{
  "origin": "codeshovel",
  "repositoryName": "commons-cli",
  "repositoryPath": "D:/_SELEN/_2022-2023/CS588/GitHub_Dataset/commons-cli/commons-cli/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "BugsTest.java",
  "functionName": "test11458",
  "functionId": "test11458",
  "sourceFilePath": "src/test/java/org/apache/commons/cli/bug/BugsTest.java",
  "functionAnnotation": "@Test",
  "functionDoc": "",
  "functionStartLine": 86,
  "functionEndLine": 124,
  "numCommitsSeen": 43,
  "timeTaken": 163,
  "changeHistory": [
    "bc0edc47dbf47cdaa3485cfb724982f377c900df",
    "357a8b0b8f1090db29e0d541a9419f570a78457b",
    "640490133d660d8850bf6f7bf93aa502ca807eb1",
    "60835e2f29d4ec09eead7789405d99f92c36a29e",
    "1e01bbad08bb961b0e9af1d94e523394803fffdb",
    "cd745ecf52fb2fe8fed1c67fc9149e4be11a73f0",
    "20dfc60e4c04d9fd69fdedbcbe50020c7e798f3a",
    "f887e8b6e2ebb519c6d0e51b1ddae6bd356dc3c0",
    "c08f73835beda155421d78ee4f96d9e11c501159",
    "469e71799a438ccb2d0925e50d4bb9dce37cdba2"
  ],
  "changeHistoryShort": {
    "bc0edc47dbf47cdaa3485cfb724982f377c900df": "Ybodychange",
    "357a8b0b8f1090db29e0d541a9419f570a78457b": "Ybodychange",
    "640490133d660d8850bf6f7bf93aa502ca807eb1": "Yfilerename",
    "60835e2f29d4ec09eead7789405d99f92c36a29e": "Yannotationchange",
    "1e01bbad08bb961b0e9af1d94e523394803fffdb": "Ybodychange",
    "cd745ecf52fb2fe8fed1c67fc9149e4be11a73f0": "Yfilerename",
    "20dfc60e4c04d9fd69fdedbcbe50020c7e798f3a": "Yformatchange",
    "f887e8b6e2ebb519c6d0e51b1ddae6bd356dc3c0": "Ymultichange(Yexceptionschange,Ybodychange)",
    "c08f73835beda155421d78ee4f96d9e11c501159": "Ybodychange",
    "469e71799a438ccb2d0925e50d4bb9dce37cdba2": "Yintroduced"
  },
  "changeHistoryDetails": {
    "bc0edc47dbf47cdaa3485cfb724982f377c900df": {
      "type": "Ybodychange",
      "commitMessage": "Clean ups.\n\n- maven-checkstyle-plugin 3.1.1 -\u003e 3.1.2.\n- checkstyle -\u003e 9.0\n- Updates for 21st century.\n- No need to nest else clause.\n- Use simple array declarations.\n- Use valueOf instead of new for Numbers.\n- Consistent formatting.\n- Remove some inline comments //-----...\n",
      "commitDate": "10/2/21 11:04 PM",
      "commitName": "bc0edc47dbf47cdaa3485cfb724982f377c900df",
      "commitAuthor": "Gary Gregory",
      "commitDateOld": "12/18/19 11:28 PM",
      "commitNameOld": "c12260c05ebcd27558265395df79b8b049534fbd",
      "commitAuthorOld": "Gary Gregory",
      "daysBetweenCommits": 653.98,
      "commitsBetweenForRepo": 87,
      "commitsBetweenForFile": 1,
      "actualSource": "@Test\r\npublic void test11458() throws Exception {\r\n    final Options options \u003d new Options();\r\n    options.addOption(OptionBuilder.withValueSeparator(\u0027\u003d\u0027).hasArgs().create(\u0027D\u0027));\r\n    options.addOption(OptionBuilder.withValueSeparator(\u0027:\u0027).hasArgs().create(\u0027p\u0027));\r\n    final String[] args \u003d { \"-DJAVA_HOME\u003d/opt/java\", \"-pfile1:file2:file3\" };\r\n    final CommandLineParser parser \u003d new PosixParser();\r\n    final CommandLine cmd \u003d parser.parse(options, args);\r\n    String[] values \u003d cmd.getOptionValues(\u0027D\u0027);\r\n    assertEquals(values[0], \"JAVA_HOME\");\r\n    assertEquals(values[1], \"/opt/java\");\r\n    values \u003d cmd.getOptionValues(\u0027p\u0027);\r\n    assertEquals(values[0], \"file1\");\r\n    assertEquals(values[1], \"file2\");\r\n    assertEquals(values[2], \"file3\");\r\n    final Iterator\u003cOption\u003e iter \u003d cmd.iterator();\r\n    while (iter.hasNext()) {\r\n        final Option opt \u003d iter.next();\r\n        switch(opt.getId()) {\r\n            case \u0027D\u0027:\r\n                assertEquals(opt.getValue(0), \"JAVA_HOME\");\r\n                assertEquals(opt.getValue(1), \"/opt/java\");\r\n                break;\r\n            case \u0027p\u0027:\r\n                assertEquals(opt.getValue(0), \"file1\");\r\n                assertEquals(opt.getValue(1), \"file2\");\r\n                assertEquals(opt.getValue(2), \"file3\");\r\n                break;\r\n            default:\r\n                fail(\"-D option not found\");\r\n        }\r\n    }\r\n}",
      "path": "src/test/java/org/apache/commons/cli/bug/BugsTest.java",
      "functionStartLine": 59,
      "functionName": "test11458",
      "functionAnnotation": "@Test",
      "functionDoc": "",
      "diff": "@@ -1,33 +1,33 @@\n @Test\r\n public void test11458() throws Exception {\r\n     final Options options \u003d new Options();\r\n     options.addOption(OptionBuilder.withValueSeparator(\u0027\u003d\u0027).hasArgs().create(\u0027D\u0027));\r\n     options.addOption(OptionBuilder.withValueSeparator(\u0027:\u0027).hasArgs().create(\u0027p\u0027));\r\n-    final String[] args \u003d new String[] { \"-DJAVA_HOME\u003d/opt/java\", \"-pfile1:file2:file3\" };\r\n+    final String[] args \u003d { \"-DJAVA_HOME\u003d/opt/java\", \"-pfile1:file2:file3\" };\r\n     final CommandLineParser parser \u003d new PosixParser();\r\n     final CommandLine cmd \u003d parser.parse(options, args);\r\n     String[] values \u003d cmd.getOptionValues(\u0027D\u0027);\r\n     assertEquals(values[0], \"JAVA_HOME\");\r\n     assertEquals(values[1], \"/opt/java\");\r\n     values \u003d cmd.getOptionValues(\u0027p\u0027);\r\n     assertEquals(values[0], \"file1\");\r\n     assertEquals(values[1], \"file2\");\r\n     assertEquals(values[2], \"file3\");\r\n     final Iterator\u003cOption\u003e iter \u003d cmd.iterator();\r\n     while (iter.hasNext()) {\r\n         final Option opt \u003d iter.next();\r\n         switch(opt.getId()) {\r\n             case \u0027D\u0027:\r\n                 assertEquals(opt.getValue(0), \"JAVA_HOME\");\r\n                 assertEquals(opt.getValue(1), \"/opt/java\");\r\n                 break;\r\n             case \u0027p\u0027:\r\n                 assertEquals(opt.getValue(0), \"file1\");\r\n                 assertEquals(opt.getValue(1), \"file2\");\r\n                 assertEquals(opt.getValue(2), \"file3\");\r\n                 break;\r\n             default:\r\n                 fail(\"-D option not found\");\r\n         }\r\n     }\r\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "357a8b0b8f1090db29e0d541a9419f570a78457b": {
      "type": "Ybodychange",
      "commitMessage": "Add final modifier to local variables.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/cli/trunk@1797673 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "6/5/17 7:37 PM",
      "commitName": "357a8b0b8f1090db29e0d541a9419f570a78457b",
      "commitAuthor": "Gary D. Gregory",
      "commitDateOld": "9/7/16 10:30 PM",
      "commitNameOld": "9e51962309fac2806f5fe0e4e3df94e0e187607a",
      "commitAuthorOld": "Benedikt Ritter",
      "daysBetweenCommits": 270.88,
      "commitsBetweenForRepo": 25,
      "commitsBetweenForFile": 1,
      "actualSource": "@Test\r\npublic void test11458() throws Exception {\r\n    final Options options \u003d new Options();\r\n    options.addOption(OptionBuilder.withValueSeparator(\u0027\u003d\u0027).hasArgs().create(\u0027D\u0027));\r\n    options.addOption(OptionBuilder.withValueSeparator(\u0027:\u0027).hasArgs().create(\u0027p\u0027));\r\n    final String[] args \u003d new String[] { \"-DJAVA_HOME\u003d/opt/java\", \"-pfile1:file2:file3\" };\r\n    final CommandLineParser parser \u003d new PosixParser();\r\n    final CommandLine cmd \u003d parser.parse(options, args);\r\n    String[] values \u003d cmd.getOptionValues(\u0027D\u0027);\r\n    assertEquals(values[0], \"JAVA_HOME\");\r\n    assertEquals(values[1], \"/opt/java\");\r\n    values \u003d cmd.getOptionValues(\u0027p\u0027);\r\n    assertEquals(values[0], \"file1\");\r\n    assertEquals(values[1], \"file2\");\r\n    assertEquals(values[2], \"file3\");\r\n    final Iterator\u003cOption\u003e iter \u003d cmd.iterator();\r\n    while (iter.hasNext()) {\r\n        final Option opt \u003d iter.next();\r\n        switch(opt.getId()) {\r\n            case \u0027D\u0027:\r\n                assertEquals(opt.getValue(0), \"JAVA_HOME\");\r\n                assertEquals(opt.getValue(1), \"/opt/java\");\r\n                break;\r\n            case \u0027p\u0027:\r\n                assertEquals(opt.getValue(0), \"file1\");\r\n                assertEquals(opt.getValue(1), \"file2\");\r\n                assertEquals(opt.getValue(2), \"file3\");\r\n                break;\r\n            default:\r\n                fail(\"-D option not found\");\r\n        }\r\n    }\r\n}",
      "path": "src/test/java/org/apache/commons/cli/bug/BugsTest.java",
      "functionStartLine": 61,
      "functionName": "test11458",
      "functionAnnotation": "@Test",
      "functionDoc": "",
      "diff": "@@ -1,33 +1,33 @@\n @Test\r\n public void test11458() throws Exception {\r\n-    Options options \u003d new Options();\r\n+    final Options options \u003d new Options();\r\n     options.addOption(OptionBuilder.withValueSeparator(\u0027\u003d\u0027).hasArgs().create(\u0027D\u0027));\r\n     options.addOption(OptionBuilder.withValueSeparator(\u0027:\u0027).hasArgs().create(\u0027p\u0027));\r\n-    String[] args \u003d new String[] { \"-DJAVA_HOME\u003d/opt/java\", \"-pfile1:file2:file3\" };\r\n-    CommandLineParser parser \u003d new PosixParser();\r\n-    CommandLine cmd \u003d parser.parse(options, args);\r\n+    final String[] args \u003d new String[] { \"-DJAVA_HOME\u003d/opt/java\", \"-pfile1:file2:file3\" };\r\n+    final CommandLineParser parser \u003d new PosixParser();\r\n+    final CommandLine cmd \u003d parser.parse(options, args);\r\n     String[] values \u003d cmd.getOptionValues(\u0027D\u0027);\r\n     assertEquals(values[0], \"JAVA_HOME\");\r\n     assertEquals(values[1], \"/opt/java\");\r\n     values \u003d cmd.getOptionValues(\u0027p\u0027);\r\n     assertEquals(values[0], \"file1\");\r\n     assertEquals(values[1], \"file2\");\r\n     assertEquals(values[2], \"file3\");\r\n-    Iterator\u003cOption\u003e iter \u003d cmd.iterator();\r\n+    final Iterator\u003cOption\u003e iter \u003d cmd.iterator();\r\n     while (iter.hasNext()) {\r\n-        Option opt \u003d iter.next();\r\n+        final Option opt \u003d iter.next();\r\n         switch(opt.getId()) {\r\n             case \u0027D\u0027:\r\n                 assertEquals(opt.getValue(0), \"JAVA_HOME\");\r\n                 assertEquals(opt.getValue(1), \"/opt/java\");\r\n                 break;\r\n             case \u0027p\u0027:\r\n                 assertEquals(opt.getValue(0), \"file1\");\r\n                 assertEquals(opt.getValue(1), \"file2\");\r\n                 assertEquals(opt.getValue(2), \"file3\");\r\n                 break;\r\n             default:\r\n                 fail(\"-D option not found\");\r\n         }\r\n     }\r\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "640490133d660d8850bf6f7bf93aa502ca807eb1": {
      "type": "Yfilerename",
      "commitMessage": "Move Bugzilla bugs test case to bugs package\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/cli/trunk@1669875 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "3/29/15 12:13 PM",
      "commitName": "640490133d660d8850bf6f7bf93aa502ca807eb1",
      "commitAuthor": "Benedikt Ritter",
      "commitDateOld": "3/29/15 12:10 PM",
      "commitNameOld": "0c0ce9b1f033319e086204895d3f8fe342ddad90",
      "commitAuthorOld": "Benedikt Ritter",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "@Test\r\npublic void test11458() throws Exception {\r\n    Options options \u003d new Options();\r\n    options.addOption(OptionBuilder.withValueSeparator(\u0027\u003d\u0027).hasArgs().create(\u0027D\u0027));\r\n    options.addOption(OptionBuilder.withValueSeparator(\u0027:\u0027).hasArgs().create(\u0027p\u0027));\r\n    String[] args \u003d new String[] { \"-DJAVA_HOME\u003d/opt/java\", \"-pfile1:file2:file3\" };\r\n    CommandLineParser parser \u003d new PosixParser();\r\n    CommandLine cmd \u003d parser.parse(options, args);\r\n    String[] values \u003d cmd.getOptionValues(\u0027D\u0027);\r\n    assertEquals(values[0], \"JAVA_HOME\");\r\n    assertEquals(values[1], \"/opt/java\");\r\n    values \u003d cmd.getOptionValues(\u0027p\u0027);\r\n    assertEquals(values[0], \"file1\");\r\n    assertEquals(values[1], \"file2\");\r\n    assertEquals(values[2], \"file3\");\r\n    Iterator\u003cOption\u003e iter \u003d cmd.iterator();\r\n    while (iter.hasNext()) {\r\n        Option opt \u003d iter.next();\r\n        switch(opt.getId()) {\r\n            case \u0027D\u0027:\r\n                assertEquals(opt.getValue(0), \"JAVA_HOME\");\r\n                assertEquals(opt.getValue(1), \"/opt/java\");\r\n                break;\r\n            case \u0027p\u0027:\r\n                assertEquals(opt.getValue(0), \"file1\");\r\n                assertEquals(opt.getValue(1), \"file2\");\r\n                assertEquals(opt.getValue(2), \"file3\");\r\n                break;\r\n            default:\r\n                fail(\"-D option not found\");\r\n        }\r\n    }\r\n}",
      "path": "src/test/java/org/apache/commons/cli/bug/BugsTest.java",
      "functionStartLine": 61,
      "functionName": "test11458",
      "functionAnnotation": "@Test",
      "functionDoc": "",
      "diff": "",
      "extendedDetails": {
        "oldPath": "src/test/java/org/apache/commons/cli/BugsTest.java",
        "newPath": "src/test/java/org/apache/commons/cli/bug/BugsTest.java"
      }
    },
    "60835e2f29d4ec09eead7789405d99f92c36a29e": {
      "type": "Yannotationchange",
      "commitMessage": "[CLI-227] Convert unit tests to junit 4, upgrade junit to 4.11, move authors to pom.xml.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/cli/trunk@1442904 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "2/6/13 12:57 PM",
      "commitName": "60835e2f29d4ec09eead7789405d99f92c36a29e",
      "commitAuthor": "Thomas Neidhart",
      "commitDateOld": "1/30/13 7:33 PM",
      "commitNameOld": "1fcf87d3e9e6e429f6fb17e6768c0562fff6d732",
      "commitAuthorOld": "Sebastian Bazley",
      "daysBetweenCommits": 6.73,
      "commitsBetweenForRepo": 5,
      "commitsBetweenForFile": 1,
      "actualSource": "@Test\r\npublic void test11458() throws Exception {\r\n    Options options \u003d new Options();\r\n    options.addOption(OptionBuilder.withValueSeparator(\u0027\u003d\u0027).hasArgs().create(\u0027D\u0027));\r\n    options.addOption(OptionBuilder.withValueSeparator(\u0027:\u0027).hasArgs().create(\u0027p\u0027));\r\n    String[] args \u003d new String[] { \"-DJAVA_HOME\u003d/opt/java\", \"-pfile1:file2:file3\" };\r\n    CommandLineParser parser \u003d new PosixParser();\r\n    CommandLine cmd \u003d parser.parse(options, args);\r\n    String[] values \u003d cmd.getOptionValues(\u0027D\u0027);\r\n    assertEquals(values[0], \"JAVA_HOME\");\r\n    assertEquals(values[1], \"/opt/java\");\r\n    values \u003d cmd.getOptionValues(\u0027p\u0027);\r\n    assertEquals(values[0], \"file1\");\r\n    assertEquals(values[1], \"file2\");\r\n    assertEquals(values[2], \"file3\");\r\n    Iterator\u003cOption\u003e iter \u003d cmd.iterator();\r\n    while (iter.hasNext()) {\r\n        Option opt \u003d iter.next();\r\n        switch(opt.getId()) {\r\n            case \u0027D\u0027:\r\n                assertEquals(opt.getValue(0), \"JAVA_HOME\");\r\n                assertEquals(opt.getValue(1), \"/opt/java\");\r\n                break;\r\n            case \u0027p\u0027:\r\n                assertEquals(opt.getValue(0), \"file1\");\r\n                assertEquals(opt.getValue(1), \"file2\");\r\n                assertEquals(opt.getValue(2), \"file3\");\r\n                break;\r\n            default:\r\n                fail(\"-D option not found\");\r\n        }\r\n    }\r\n}",
      "path": "src/test/java/org/apache/commons/cli/BugsTest.java",
      "functionStartLine": 49,
      "functionName": "test11458",
      "functionAnnotation": "@Test",
      "functionDoc": "",
      "diff": "@@ -1,32 +1,33 @@\n+@Test\r\n public void test11458() throws Exception {\r\n     Options options \u003d new Options();\r\n     options.addOption(OptionBuilder.withValueSeparator(\u0027\u003d\u0027).hasArgs().create(\u0027D\u0027));\r\n     options.addOption(OptionBuilder.withValueSeparator(\u0027:\u0027).hasArgs().create(\u0027p\u0027));\r\n     String[] args \u003d new String[] { \"-DJAVA_HOME\u003d/opt/java\", \"-pfile1:file2:file3\" };\r\n     CommandLineParser parser \u003d new PosixParser();\r\n     CommandLine cmd \u003d parser.parse(options, args);\r\n     String[] values \u003d cmd.getOptionValues(\u0027D\u0027);\r\n     assertEquals(values[0], \"JAVA_HOME\");\r\n     assertEquals(values[1], \"/opt/java\");\r\n     values \u003d cmd.getOptionValues(\u0027p\u0027);\r\n     assertEquals(values[0], \"file1\");\r\n     assertEquals(values[1], \"file2\");\r\n     assertEquals(values[2], \"file3\");\r\n     Iterator\u003cOption\u003e iter \u003d cmd.iterator();\r\n     while (iter.hasNext()) {\r\n         Option opt \u003d iter.next();\r\n         switch(opt.getId()) {\r\n             case \u0027D\u0027:\r\n                 assertEquals(opt.getValue(0), \"JAVA_HOME\");\r\n                 assertEquals(opt.getValue(1), \"/opt/java\");\r\n                 break;\r\n             case \u0027p\u0027:\r\n                 assertEquals(opt.getValue(0), \"file1\");\r\n                 assertEquals(opt.getValue(1), \"file2\");\r\n                 assertEquals(opt.getValue(2), \"file3\");\r\n                 break;\r\n             default:\r\n                 fail(\"-D option not found\");\r\n         }\r\n     }\r\n }\n\\ No newline at end of file\n",
      "extendedDetails": {
        "oldValue": "",
        "newValue": "@Test"
      }
    },
    "1e01bbad08bb961b0e9af1d94e523394803fffdb": {
      "type": "Ybodychange",
      "commitMessage": "Imports and raw tytpes\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/cli/trunk@1440528 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "1/30/13 7:11 PM",
      "commitName": "1e01bbad08bb961b0e9af1d94e523394803fffdb",
      "commitAuthor": "Sebastian Bazley",
      "commitDateOld": "6/16/10 12:41 PM",
      "commitNameOld": "cd745ecf52fb2fe8fed1c67fc9149e4be11a73f0",
      "commitAuthorOld": "Emmanuel Bourg",
      "daysBetweenCommits": 959.31,
      "commitsBetweenForRepo": 99,
      "commitsBetweenForFile": 1,
      "actualSource": "public void test11458() throws Exception {\r\n    Options options \u003d new Options();\r\n    options.addOption(OptionBuilder.withValueSeparator(\u0027\u003d\u0027).hasArgs().create(\u0027D\u0027));\r\n    options.addOption(OptionBuilder.withValueSeparator(\u0027:\u0027).hasArgs().create(\u0027p\u0027));\r\n    String[] args \u003d new String[] { \"-DJAVA_HOME\u003d/opt/java\", \"-pfile1:file2:file3\" };\r\n    CommandLineParser parser \u003d new PosixParser();\r\n    CommandLine cmd \u003d parser.parse(options, args);\r\n    String[] values \u003d cmd.getOptionValues(\u0027D\u0027);\r\n    assertEquals(values[0], \"JAVA_HOME\");\r\n    assertEquals(values[1], \"/opt/java\");\r\n    values \u003d cmd.getOptionValues(\u0027p\u0027);\r\n    assertEquals(values[0], \"file1\");\r\n    assertEquals(values[1], \"file2\");\r\n    assertEquals(values[2], \"file3\");\r\n    Iterator\u003cOption\u003e iter \u003d cmd.iterator();\r\n    while (iter.hasNext()) {\r\n        Option opt \u003d iter.next();\r\n        switch(opt.getId()) {\r\n            case \u0027D\u0027:\r\n                assertEquals(opt.getValue(0), \"JAVA_HOME\");\r\n                assertEquals(opt.getValue(1), \"/opt/java\");\r\n                break;\r\n            case \u0027p\u0027:\r\n                assertEquals(opt.getValue(0), \"file1\");\r\n                assertEquals(opt.getValue(1), \"file2\");\r\n                assertEquals(opt.getValue(2), \"file3\");\r\n                break;\r\n            default:\r\n                fail(\"-D option not found\");\r\n        }\r\n    }\r\n}",
      "path": "src/test/java/org/apache/commons/cli/BugsTest.java",
      "functionStartLine": 41,
      "functionName": "test11458",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,32 +1,32 @@\n public void test11458() throws Exception {\r\n     Options options \u003d new Options();\r\n     options.addOption(OptionBuilder.withValueSeparator(\u0027\u003d\u0027).hasArgs().create(\u0027D\u0027));\r\n     options.addOption(OptionBuilder.withValueSeparator(\u0027:\u0027).hasArgs().create(\u0027p\u0027));\r\n     String[] args \u003d new String[] { \"-DJAVA_HOME\u003d/opt/java\", \"-pfile1:file2:file3\" };\r\n     CommandLineParser parser \u003d new PosixParser();\r\n     CommandLine cmd \u003d parser.parse(options, args);\r\n     String[] values \u003d cmd.getOptionValues(\u0027D\u0027);\r\n     assertEquals(values[0], \"JAVA_HOME\");\r\n     assertEquals(values[1], \"/opt/java\");\r\n     values \u003d cmd.getOptionValues(\u0027p\u0027);\r\n     assertEquals(values[0], \"file1\");\r\n     assertEquals(values[1], \"file2\");\r\n     assertEquals(values[2], \"file3\");\r\n-    Iterator iter \u003d cmd.iterator();\r\n+    Iterator\u003cOption\u003e iter \u003d cmd.iterator();\r\n     while (iter.hasNext()) {\r\n-        Option opt \u003d (Option) iter.next();\r\n+        Option opt \u003d iter.next();\r\n         switch(opt.getId()) {\r\n             case \u0027D\u0027:\r\n                 assertEquals(opt.getValue(0), \"JAVA_HOME\");\r\n                 assertEquals(opt.getValue(1), \"/opt/java\");\r\n                 break;\r\n             case \u0027p\u0027:\r\n                 assertEquals(opt.getValue(0), \"file1\");\r\n                 assertEquals(opt.getValue(1), \"file2\");\r\n                 assertEquals(opt.getValue(2), \"file3\");\r\n                 break;\r\n             default:\r\n                 fail(\"-D option not found\");\r\n         }\r\n     }\r\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "cd745ecf52fb2fe8fed1c67fc9149e4be11a73f0": {
      "type": "Yfilerename",
      "commitMessage": "Switched to the Maven 2 default directory layout (part 1)\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/cli/trunk@955169 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "6/16/10 12:41 PM",
      "commitName": "cd745ecf52fb2fe8fed1c67fc9149e4be11a73f0",
      "commitAuthor": "Emmanuel Bourg",
      "commitDateOld": "6/16/10 12:36 PM",
      "commitNameOld": "106f3b8dd48d32cbfcba4a42e1161505c2e3cac6",
      "commitAuthorOld": "Emmanuel Bourg",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "public void test11458() throws Exception {\r\n    Options options \u003d new Options();\r\n    options.addOption(OptionBuilder.withValueSeparator(\u0027\u003d\u0027).hasArgs().create(\u0027D\u0027));\r\n    options.addOption(OptionBuilder.withValueSeparator(\u0027:\u0027).hasArgs().create(\u0027p\u0027));\r\n    String[] args \u003d new String[] { \"-DJAVA_HOME\u003d/opt/java\", \"-pfile1:file2:file3\" };\r\n    CommandLineParser parser \u003d new PosixParser();\r\n    CommandLine cmd \u003d parser.parse(options, args);\r\n    String[] values \u003d cmd.getOptionValues(\u0027D\u0027);\r\n    assertEquals(values[0], \"JAVA_HOME\");\r\n    assertEquals(values[1], \"/opt/java\");\r\n    values \u003d cmd.getOptionValues(\u0027p\u0027);\r\n    assertEquals(values[0], \"file1\");\r\n    assertEquals(values[1], \"file2\");\r\n    assertEquals(values[2], \"file3\");\r\n    Iterator iter \u003d cmd.iterator();\r\n    while (iter.hasNext()) {\r\n        Option opt \u003d (Option) iter.next();\r\n        switch(opt.getId()) {\r\n            case \u0027D\u0027:\r\n                assertEquals(opt.getValue(0), \"JAVA_HOME\");\r\n                assertEquals(opt.getValue(1), \"/opt/java\");\r\n                break;\r\n            case \u0027p\u0027:\r\n                assertEquals(opt.getValue(0), \"file1\");\r\n                assertEquals(opt.getValue(1), \"file2\");\r\n                assertEquals(opt.getValue(2), \"file3\");\r\n                break;\r\n            default:\r\n                fail(\"-D option not found\");\r\n        }\r\n    }\r\n}",
      "path": "src/test/java/org/apache/commons/cli/BugsTest.java",
      "functionStartLine": 43,
      "functionName": "test11458",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "",
      "extendedDetails": {
        "oldPath": "src/test/org/apache/commons/cli/BugsTest.java",
        "newPath": "src/test/java/org/apache/commons/cli/BugsTest.java"
      }
    },
    "20dfc60e4c04d9fd69fdedbcbe50020c7e798f3a": {
      "type": "Yformatchange",
      "commitMessage": "Restored the CLI 1.0 behavior regarding repeated options and the number of arguments per option (CLI-137)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/cli/branches/cli-1.x@667565 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "6/13/08 6:08 PM",
      "commitName": "20dfc60e4c04d9fd69fdedbcbe50020c7e798f3a",
      "commitAuthor": "Emmanuel Bourg",
      "commitDateOld": "5/29/08 7:11 PM",
      "commitNameOld": "f887e8b6e2ebb519c6d0e51b1ddae6bd356dc3c0",
      "commitAuthorOld": "Emmanuel Bourg",
      "daysBetweenCommits": 14.96,
      "commitsBetweenForRepo": 28,
      "commitsBetweenForFile": 1,
      "actualSource": "public void test11458() throws Exception {\r\n    Options options \u003d new Options();\r\n    options.addOption(OptionBuilder.withValueSeparator(\u0027\u003d\u0027).hasArgs().create(\u0027D\u0027));\r\n    options.addOption(OptionBuilder.withValueSeparator(\u0027:\u0027).hasArgs().create(\u0027p\u0027));\r\n    String[] args \u003d new String[] { \"-DJAVA_HOME\u003d/opt/java\", \"-pfile1:file2:file3\" };\r\n    CommandLineParser parser \u003d new PosixParser();\r\n    CommandLine cmd \u003d parser.parse(options, args);\r\n    String[] values \u003d cmd.getOptionValues(\u0027D\u0027);\r\n    assertEquals(values[0], \"JAVA_HOME\");\r\n    assertEquals(values[1], \"/opt/java\");\r\n    values \u003d cmd.getOptionValues(\u0027p\u0027);\r\n    assertEquals(values[0], \"file1\");\r\n    assertEquals(values[1], \"file2\");\r\n    assertEquals(values[2], \"file3\");\r\n    Iterator iter \u003d cmd.iterator();\r\n    while (iter.hasNext()) {\r\n        Option opt \u003d (Option) iter.next();\r\n        switch(opt.getId()) {\r\n            case \u0027D\u0027:\r\n                assertEquals(opt.getValue(0), \"JAVA_HOME\");\r\n                assertEquals(opt.getValue(1), \"/opt/java\");\r\n                break;\r\n            case \u0027p\u0027:\r\n                assertEquals(opt.getValue(0), \"file1\");\r\n                assertEquals(opt.getValue(1), \"file2\");\r\n                assertEquals(opt.getValue(2), \"file3\");\r\n                break;\r\n            default:\r\n                fail(\"-D option not found\");\r\n        }\r\n    }\r\n}",
      "path": "src/test/org/apache/commons/cli/BugsTest.java",
      "functionStartLine": 44,
      "functionName": "test11458",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "",
      "extendedDetails": {}
    },
    "f887e8b6e2ebb519c6d0e51b1ddae6bd356dc3c0": {
      "type": "Ymultichange(Yexceptionschange,Ybodychange)",
      "commitMessage": "Simplified the test cases by removing the unnecessary fail() calls in the catch blocks\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/cli/branches/cli-1.x@661378 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "5/29/08 7:11 PM",
      "commitName": "f887e8b6e2ebb519c6d0e51b1ddae6bd356dc3c0",
      "commitAuthor": "Emmanuel Bourg",
      "subchanges": [
        {
          "type": "Yexceptionschange",
          "commitMessage": "Simplified the test cases by removing the unnecessary fail() calls in the catch blocks\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/cli/branches/cli-1.x@661378 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "5/29/08 7:11 PM",
          "commitName": "f887e8b6e2ebb519c6d0e51b1ddae6bd356dc3c0",
          "commitAuthor": "Emmanuel Bourg",
          "commitDateOld": "5/29/08 6:30 PM",
          "commitNameOld": "2490250f9b3044e4cd946f11b46694f943f5814d",
          "commitAuthorOld": "Emmanuel Bourg",
          "daysBetweenCommits": 0.03,
          "commitsBetweenForRepo": 2,
          "commitsBetweenForFile": 1,
          "actualSource": "public void test11458() throws Exception {\r\n    Options options \u003d new Options();\r\n    options.addOption(OptionBuilder.withValueSeparator(\u0027\u003d\u0027).hasArgs().create(\u0027D\u0027));\r\n    options.addOption(OptionBuilder.withValueSeparator(\u0027:\u0027).hasArgs().create(\u0027p\u0027));\r\n    String[] args \u003d new String[] { \"-DJAVA_HOME\u003d/opt/java\", \"-pfile1:file2:file3\" };\r\n    CommandLineParser parser \u003d new PosixParser();\r\n    CommandLine cmd \u003d parser.parse(options, args);\r\n    String[] values \u003d cmd.getOptionValues(\u0027D\u0027);\r\n    assertEquals(values[0], \"JAVA_HOME\");\r\n    assertEquals(values[1], \"/opt/java\");\r\n    values \u003d cmd.getOptionValues(\u0027p\u0027);\r\n    assertEquals(values[0], \"file1\");\r\n    assertEquals(values[1], \"file2\");\r\n    assertEquals(values[2], \"file3\");\r\n    Iterator iter \u003d cmd.iterator();\r\n    while (iter.hasNext()) {\r\n        Option opt \u003d (Option) iter.next();\r\n        switch(opt.getId()) {\r\n            case \u0027D\u0027:\r\n                assertEquals(opt.getValue(0), \"JAVA_HOME\");\r\n                assertEquals(opt.getValue(1), \"/opt/java\");\r\n                break;\r\n            case \u0027p\u0027:\r\n                assertEquals(opt.getValue(0), \"file1\");\r\n                assertEquals(opt.getValue(1), \"file2\");\r\n                assertEquals(opt.getValue(2), \"file3\");\r\n                break;\r\n            default:\r\n                fail(\"-D option not found\");\r\n        }\r\n    }\r\n}",
          "path": "src/test/org/apache/commons/cli/BugsTest.java",
          "functionStartLine": 44,
          "functionName": "test11458",
          "functionAnnotation": "",
          "functionDoc": "",
          "diff": "@@ -1,36 +1,32 @@\n-public void test11458() {\r\n+public void test11458() throws Exception {\r\n     Options options \u003d new Options();\r\n     options.addOption(OptionBuilder.withValueSeparator(\u0027\u003d\u0027).hasArgs().create(\u0027D\u0027));\r\n     options.addOption(OptionBuilder.withValueSeparator(\u0027:\u0027).hasArgs().create(\u0027p\u0027));\r\n     String[] args \u003d new String[] { \"-DJAVA_HOME\u003d/opt/java\", \"-pfile1:file2:file3\" };\r\n     CommandLineParser parser \u003d new PosixParser();\r\n-    try {\r\n-        CommandLine cmd \u003d parser.parse(options, args);\r\n-        String[] values \u003d cmd.getOptionValues(\u0027D\u0027);\r\n-        assertEquals(values[0], \"JAVA_HOME\");\r\n-        assertEquals(values[1], \"/opt/java\");\r\n-        values \u003d cmd.getOptionValues(\u0027p\u0027);\r\n-        assertEquals(values[0], \"file1\");\r\n-        assertEquals(values[1], \"file2\");\r\n-        assertEquals(values[2], \"file3\");\r\n-        java.util.Iterator iter \u003d cmd.iterator();\r\n-        while (iter.hasNext()) {\r\n-            Option opt \u003d (Option) iter.next();\r\n-            switch(opt.getId()) {\r\n-                case \u0027D\u0027:\r\n-                    assertEquals(opt.getValue(0), \"JAVA_HOME\");\r\n-                    assertEquals(opt.getValue(1), \"/opt/java\");\r\n-                    break;\r\n-                case \u0027p\u0027:\r\n-                    assertEquals(opt.getValue(0), \"file1\");\r\n-                    assertEquals(opt.getValue(1), \"file2\");\r\n-                    assertEquals(opt.getValue(2), \"file3\");\r\n-                    break;\r\n-                default:\r\n-                    fail(\"-D option not found\");\r\n-            }\r\n+    CommandLine cmd \u003d parser.parse(options, args);\r\n+    String[] values \u003d cmd.getOptionValues(\u0027D\u0027);\r\n+    assertEquals(values[0], \"JAVA_HOME\");\r\n+    assertEquals(values[1], \"/opt/java\");\r\n+    values \u003d cmd.getOptionValues(\u0027p\u0027);\r\n+    assertEquals(values[0], \"file1\");\r\n+    assertEquals(values[1], \"file2\");\r\n+    assertEquals(values[2], \"file3\");\r\n+    Iterator iter \u003d cmd.iterator();\r\n+    while (iter.hasNext()) {\r\n+        Option opt \u003d (Option) iter.next();\r\n+        switch(opt.getId()) {\r\n+            case \u0027D\u0027:\r\n+                assertEquals(opt.getValue(0), \"JAVA_HOME\");\r\n+                assertEquals(opt.getValue(1), \"/opt/java\");\r\n+                break;\r\n+            case \u0027p\u0027:\r\n+                assertEquals(opt.getValue(0), \"file1\");\r\n+                assertEquals(opt.getValue(1), \"file2\");\r\n+                assertEquals(opt.getValue(2), \"file3\");\r\n+                break;\r\n+            default:\r\n+                fail(\"-D option not found\");\r\n         }\r\n-    } catch (ParseException exp) {\r\n-        fail(\"Unexpected Exception:\\nMessage:\" + exp.getMessage() + \"Type: \" + exp.getClass().getName());\r\n     }\r\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[]",
            "newValue": "[Exception]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Simplified the test cases by removing the unnecessary fail() calls in the catch blocks\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/cli/branches/cli-1.x@661378 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "5/29/08 7:11 PM",
          "commitName": "f887e8b6e2ebb519c6d0e51b1ddae6bd356dc3c0",
          "commitAuthor": "Emmanuel Bourg",
          "commitDateOld": "5/29/08 6:30 PM",
          "commitNameOld": "2490250f9b3044e4cd946f11b46694f943f5814d",
          "commitAuthorOld": "Emmanuel Bourg",
          "daysBetweenCommits": 0.03,
          "commitsBetweenForRepo": 2,
          "commitsBetweenForFile": 1,
          "actualSource": "public void test11458() throws Exception {\r\n    Options options \u003d new Options();\r\n    options.addOption(OptionBuilder.withValueSeparator(\u0027\u003d\u0027).hasArgs().create(\u0027D\u0027));\r\n    options.addOption(OptionBuilder.withValueSeparator(\u0027:\u0027).hasArgs().create(\u0027p\u0027));\r\n    String[] args \u003d new String[] { \"-DJAVA_HOME\u003d/opt/java\", \"-pfile1:file2:file3\" };\r\n    CommandLineParser parser \u003d new PosixParser();\r\n    CommandLine cmd \u003d parser.parse(options, args);\r\n    String[] values \u003d cmd.getOptionValues(\u0027D\u0027);\r\n    assertEquals(values[0], \"JAVA_HOME\");\r\n    assertEquals(values[1], \"/opt/java\");\r\n    values \u003d cmd.getOptionValues(\u0027p\u0027);\r\n    assertEquals(values[0], \"file1\");\r\n    assertEquals(values[1], \"file2\");\r\n    assertEquals(values[2], \"file3\");\r\n    Iterator iter \u003d cmd.iterator();\r\n    while (iter.hasNext()) {\r\n        Option opt \u003d (Option) iter.next();\r\n        switch(opt.getId()) {\r\n            case \u0027D\u0027:\r\n                assertEquals(opt.getValue(0), \"JAVA_HOME\");\r\n                assertEquals(opt.getValue(1), \"/opt/java\");\r\n                break;\r\n            case \u0027p\u0027:\r\n                assertEquals(opt.getValue(0), \"file1\");\r\n                assertEquals(opt.getValue(1), \"file2\");\r\n                assertEquals(opt.getValue(2), \"file3\");\r\n                break;\r\n            default:\r\n                fail(\"-D option not found\");\r\n        }\r\n    }\r\n}",
          "path": "src/test/org/apache/commons/cli/BugsTest.java",
          "functionStartLine": 44,
          "functionName": "test11458",
          "functionAnnotation": "",
          "functionDoc": "",
          "diff": "@@ -1,36 +1,32 @@\n-public void test11458() {\r\n+public void test11458() throws Exception {\r\n     Options options \u003d new Options();\r\n     options.addOption(OptionBuilder.withValueSeparator(\u0027\u003d\u0027).hasArgs().create(\u0027D\u0027));\r\n     options.addOption(OptionBuilder.withValueSeparator(\u0027:\u0027).hasArgs().create(\u0027p\u0027));\r\n     String[] args \u003d new String[] { \"-DJAVA_HOME\u003d/opt/java\", \"-pfile1:file2:file3\" };\r\n     CommandLineParser parser \u003d new PosixParser();\r\n-    try {\r\n-        CommandLine cmd \u003d parser.parse(options, args);\r\n-        String[] values \u003d cmd.getOptionValues(\u0027D\u0027);\r\n-        assertEquals(values[0], \"JAVA_HOME\");\r\n-        assertEquals(values[1], \"/opt/java\");\r\n-        values \u003d cmd.getOptionValues(\u0027p\u0027);\r\n-        assertEquals(values[0], \"file1\");\r\n-        assertEquals(values[1], \"file2\");\r\n-        assertEquals(values[2], \"file3\");\r\n-        java.util.Iterator iter \u003d cmd.iterator();\r\n-        while (iter.hasNext()) {\r\n-            Option opt \u003d (Option) iter.next();\r\n-            switch(opt.getId()) {\r\n-                case \u0027D\u0027:\r\n-                    assertEquals(opt.getValue(0), \"JAVA_HOME\");\r\n-                    assertEquals(opt.getValue(1), \"/opt/java\");\r\n-                    break;\r\n-                case \u0027p\u0027:\r\n-                    assertEquals(opt.getValue(0), \"file1\");\r\n-                    assertEquals(opt.getValue(1), \"file2\");\r\n-                    assertEquals(opt.getValue(2), \"file3\");\r\n-                    break;\r\n-                default:\r\n-                    fail(\"-D option not found\");\r\n-            }\r\n+    CommandLine cmd \u003d parser.parse(options, args);\r\n+    String[] values \u003d cmd.getOptionValues(\u0027D\u0027);\r\n+    assertEquals(values[0], \"JAVA_HOME\");\r\n+    assertEquals(values[1], \"/opt/java\");\r\n+    values \u003d cmd.getOptionValues(\u0027p\u0027);\r\n+    assertEquals(values[0], \"file1\");\r\n+    assertEquals(values[1], \"file2\");\r\n+    assertEquals(values[2], \"file3\");\r\n+    Iterator iter \u003d cmd.iterator();\r\n+    while (iter.hasNext()) {\r\n+        Option opt \u003d (Option) iter.next();\r\n+        switch(opt.getId()) {\r\n+            case \u0027D\u0027:\r\n+                assertEquals(opt.getValue(0), \"JAVA_HOME\");\r\n+                assertEquals(opt.getValue(1), \"/opt/java\");\r\n+                break;\r\n+            case \u0027p\u0027:\r\n+                assertEquals(opt.getValue(0), \"file1\");\r\n+                assertEquals(opt.getValue(1), \"file2\");\r\n+                assertEquals(opt.getValue(2), \"file3\");\r\n+                break;\r\n+            default:\r\n+                fail(\"-D option not found\");\r\n         }\r\n-    } catch (ParseException exp) {\r\n-        fail(\"Unexpected Exception:\\nMessage:\" + exp.getMessage() + \"Type: \" + exp.getClass().getName());\r\n     }\r\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        }
      ]
    },
    "c08f73835beda155421d78ee4f96d9e11c501159": {
      "type": "Ybodychange",
      "commitMessage": "changed my email add, removed CommandLineParserFactory\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/cli/trunk@129816 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "9/20/02 1:59 AM",
      "commitName": "c08f73835beda155421d78ee4f96d9e11c501159",
      "commitAuthor": "John Keyes",
      "commitDateOld": "9/2/02 1:54 AM",
      "commitNameOld": "d30f12f8fc30ddc2c30a08beea0c10d6d8f2029b",
      "commitAuthorOld": "John Keyes",
      "daysBetweenCommits": 18.0,
      "commitsBetweenForRepo": 7,
      "commitsBetweenForFile": 1,
      "actualSource": "public void test11458() {\r\n    Options options \u003d new Options();\r\n    options.addOption(OptionBuilder.withValueSeparator(\u0027\u003d\u0027).hasArgs().create(\u0027D\u0027));\r\n    options.addOption(OptionBuilder.withValueSeparator(\u0027:\u0027).hasArgs().create(\u0027p\u0027));\r\n    String[] args \u003d new String[] { \"-DJAVA_HOME\u003d/opt/java\", \"-pfile1:file2:file3\" };\r\n    CommandLineParser parser \u003d new PosixParser();\r\n    try {\r\n        CommandLine cmd \u003d parser.parse(options, args);\r\n        String[] values \u003d cmd.getOptionValues(\u0027D\u0027);\r\n        assertEquals(values[0], \"JAVA_HOME\");\r\n        assertEquals(values[1], \"/opt/java\");\r\n        values \u003d cmd.getOptionValues(\u0027p\u0027);\r\n        assertEquals(values[0], \"file1\");\r\n        assertEquals(values[1], \"file2\");\r\n        assertEquals(values[2], \"file3\");\r\n        java.util.Iterator iter \u003d cmd.iterator();\r\n        while (iter.hasNext()) {\r\n            Option opt \u003d (Option) iter.next();\r\n            switch(opt.getId()) {\r\n                case \u0027D\u0027:\r\n                    assertEquals(opt.getValue(0), \"JAVA_HOME\");\r\n                    assertEquals(opt.getValue(1), \"/opt/java\");\r\n                    break;\r\n                case \u0027p\u0027:\r\n                    assertEquals(opt.getValue(0), \"file1\");\r\n                    assertEquals(opt.getValue(1), \"file2\");\r\n                    assertEquals(opt.getValue(2), \"file3\");\r\n                    break;\r\n                default:\r\n                    fail(\"-D option not found\");\r\n            }\r\n        }\r\n    } catch (ParseException exp) {\r\n        fail(\"Unexpected Exception:\\nMessage:\" + exp.getMessage() + \"Type: \" + exp.getClass().getName());\r\n    }\r\n}",
      "path": "src/test/org/apache/commons/cli/BugsTest.java",
      "functionStartLine": 58,
      "functionName": "test11458",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,36 +1,36 @@\n public void test11458() {\r\n     Options options \u003d new Options();\r\n     options.addOption(OptionBuilder.withValueSeparator(\u0027\u003d\u0027).hasArgs().create(\u0027D\u0027));\r\n     options.addOption(OptionBuilder.withValueSeparator(\u0027:\u0027).hasArgs().create(\u0027p\u0027));\r\n     String[] args \u003d new String[] { \"-DJAVA_HOME\u003d/opt/java\", \"-pfile1:file2:file3\" };\r\n-    CommandLineParser parser \u003d CommandLineParserFactory.newParser();\r\n+    CommandLineParser parser \u003d new PosixParser();\r\n     try {\r\n         CommandLine cmd \u003d parser.parse(options, args);\r\n         String[] values \u003d cmd.getOptionValues(\u0027D\u0027);\r\n         assertEquals(values[0], \"JAVA_HOME\");\r\n         assertEquals(values[1], \"/opt/java\");\r\n         values \u003d cmd.getOptionValues(\u0027p\u0027);\r\n         assertEquals(values[0], \"file1\");\r\n         assertEquals(values[1], \"file2\");\r\n         assertEquals(values[2], \"file3\");\r\n         java.util.Iterator iter \u003d cmd.iterator();\r\n         while (iter.hasNext()) {\r\n             Option opt \u003d (Option) iter.next();\r\n             switch(opt.getId()) {\r\n                 case \u0027D\u0027:\r\n                     assertEquals(opt.getValue(0), \"JAVA_HOME\");\r\n                     assertEquals(opt.getValue(1), \"/opt/java\");\r\n                     break;\r\n                 case \u0027p\u0027:\r\n                     assertEquals(opt.getValue(0), \"file1\");\r\n                     assertEquals(opt.getValue(1), \"file2\");\r\n                     assertEquals(opt.getValue(2), \"file3\");\r\n                     break;\r\n                 default:\r\n                     fail(\"-D option not found\");\r\n             }\r\n         }\r\n     } catch (ParseException exp) {\r\n         fail(\"Unexpected Exception:\\nMessage:\" + exp.getMessage() + \"Type: \" + exp.getClass().getName());\r\n     }\r\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "469e71799a438ccb2d0925e50d4bb9dce37cdba2": {
      "type": "Yintroduced",
      "commitMessage": "bug no 11458: added test\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/cli/trunk@129802 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "8/18/02 6:52 PM",
      "commitName": "469e71799a438ccb2d0925e50d4bb9dce37cdba2",
      "commitAuthor": "John Keyes",
      "diff": "@@ -0,0 +1,36 @@\n+public void test11458() {\r\n+    Options options \u003d new Options();\r\n+    options.addOption(OptionBuilder.withValueSeparator(\u0027\u003d\u0027).hasArgs().create(\u0027D\u0027));\r\n+    options.addOption(OptionBuilder.withValueSeparator(\u0027:\u0027).hasArgs().create(\u0027p\u0027));\r\n+    String[] args \u003d new String[] { \"-DJAVA_HOME\u003d/opt/java\", \"-pfile1:file2:file3\" };\r\n+    CommandLineParser parser \u003d CommandLineParserFactory.newParser();\r\n+    try {\r\n+        CommandLine cmd \u003d parser.parse(options, args);\r\n+        String[] values \u003d cmd.getOptionValues(\u0027D\u0027);\r\n+        assertEquals(values[0], \"JAVA_HOME\");\r\n+        assertEquals(values[1], \"/opt/java\");\r\n+        values \u003d cmd.getOptionValues(\u0027p\u0027);\r\n+        assertEquals(values[0], \"file1\");\r\n+        assertEquals(values[1], \"file2\");\r\n+        assertEquals(values[2], \"file3\");\r\n+        java.util.Iterator iter \u003d cmd.iterator();\r\n+        while (iter.hasNext()) {\r\n+            Option opt \u003d (Option) iter.next();\r\n+            switch(opt.getId()) {\r\n+                case \u0027D\u0027:\r\n+                    assertEquals(opt.getValue(0), \"JAVA_HOME\");\r\n+                    assertEquals(opt.getValue(1), \"/opt/java\");\r\n+                    break;\r\n+                case \u0027p\u0027:\r\n+                    assertEquals(opt.getValue(0), \"file1\");\r\n+                    assertEquals(opt.getValue(1), \"file2\");\r\n+                    assertEquals(opt.getValue(2), \"file3\");\r\n+                    break;\r\n+                default:\r\n+                    fail(\"-D option not found\");\r\n+            }\r\n+        }\r\n+    } catch (ParseException exp) {\r\n+        fail(\"Unexpected Exception:\\nMessage:\" + exp.getMessage() + \"Type: \" + exp.getClass().getName());\r\n+    }\r\n+}\n\\ No newline at end of file\n",
      "actualSource": "public void test11458() {\r\n    Options options \u003d new Options();\r\n    options.addOption(OptionBuilder.withValueSeparator(\u0027\u003d\u0027).hasArgs().create(\u0027D\u0027));\r\n    options.addOption(OptionBuilder.withValueSeparator(\u0027:\u0027).hasArgs().create(\u0027p\u0027));\r\n    String[] args \u003d new String[] { \"-DJAVA_HOME\u003d/opt/java\", \"-pfile1:file2:file3\" };\r\n    CommandLineParser parser \u003d CommandLineParserFactory.newParser();\r\n    try {\r\n        CommandLine cmd \u003d parser.parse(options, args);\r\n        String[] values \u003d cmd.getOptionValues(\u0027D\u0027);\r\n        assertEquals(values[0], \"JAVA_HOME\");\r\n        assertEquals(values[1], \"/opt/java\");\r\n        values \u003d cmd.getOptionValues(\u0027p\u0027);\r\n        assertEquals(values[0], \"file1\");\r\n        assertEquals(values[1], \"file2\");\r\n        assertEquals(values[2], \"file3\");\r\n        java.util.Iterator iter \u003d cmd.iterator();\r\n        while (iter.hasNext()) {\r\n            Option opt \u003d (Option) iter.next();\r\n            switch(opt.getId()) {\r\n                case \u0027D\u0027:\r\n                    assertEquals(opt.getValue(0), \"JAVA_HOME\");\r\n                    assertEquals(opt.getValue(1), \"/opt/java\");\r\n                    break;\r\n                case \u0027p\u0027:\r\n                    assertEquals(opt.getValue(0), \"file1\");\r\n                    assertEquals(opt.getValue(1), \"file2\");\r\n                    assertEquals(opt.getValue(2), \"file3\");\r\n                    break;\r\n                default:\r\n                    fail(\"-D option not found\");\r\n            }\r\n        }\r\n    } catch (ParseException exp) {\r\n        fail(\"Unexpected Exception:\\nMessage:\" + exp.getMessage() + \"Type: \" + exp.getClass().getName());\r\n    }\r\n}",
      "path": "src/test/org/apache/commons/cli/BugsTest.java",
      "functionStartLine": 40,
      "functionName": "test11458",
      "functionAnnotation": "",
      "functionDoc": ""
    }
  }
}