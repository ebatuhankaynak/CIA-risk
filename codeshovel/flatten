{
  "origin": "codeshovel",
  "repositoryName": "commons-cli",
  "repositoryPath": "D:/_SELEN/_2022-2023/CS588/GitHub_Dataset/commons-cli/commons-cli/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "PosixParser.java",
  "functionName": "flatten",
  "functionId": "flatten___options-Options(modifiers-final)__arguments-String[](modifiers-final)__stopAtNonOption-boolean(modifiers-final)",
  "sourceFilePath": "src/main/java/org/apache/commons/cli/PosixParser.java",
  "functionAnnotation": "@Override",
  "functionDoc": "\u003cp\u003e\r\nAn implementation of {@link Parser}\u0027s abstract {@link Parser#flatten(Options,String[],boolean) flatten} method.\r\n\u003c/p\u003e\r\n\r\n\u003cp\u003e\r\nThe following are the rules used by this flatten method.\r\n\u003c/p\u003e\r\n\u003col\u003e\r\n\u003cli\u003eif {@code stopAtNonOption} is \u003cb\u003etrue\u003c/b\u003e then do not burst anymore of {@code arguments} entries, just\r\nadd each successive entry without further processing. Otherwise, ignore {@code stopAtNonOption}.\u003c/li\u003e\r\n\u003cli\u003eif the current {@code arguments} entry is \"\u003cb\u003e--\u003c/b\u003e\" just add the entry to the list of processed\r\ntokens\u003c/li\u003e\r\n\u003cli\u003eif the current {@code arguments} entry is \"\u003cb\u003e-\u003c/b\u003e\" just add the entry to the list of processed tokens\u003c/li\u003e\r\n\u003cli\u003eif the current {@code arguments} entry is two characters in length and the first character is \"\u003cb\u003e-\u003c/b\u003e\"\r\nthen check if this is a valid {@link Option} id. If it is a valid id, then add the entry to the list of processed\r\ntokens and set the current {@link Option} member. If it is not a valid id and {@code stopAtNonOption} is true,\r\nthen the remaining entries are copied to the list of processed tokens. Otherwise, the current entry is ignored.\u003c/li\u003e\r\n\u003cli\u003eif the current {@code arguments} entry is more than two characters in length and the first character is\r\n\"\u003cb\u003e-\u003c/b\u003e\" then we need to burst the entry to determine its constituents. For more information on the bursting\r\nalgorithm see {@link PosixParser#burstToken(String, boolean) burstToken}.\u003c/li\u003e\r\n\u003cli\u003eif the current {@code arguments} entry is not handled by any of the previous rules, then the entry is added\r\nto the list of processed tokens.\u003c/li\u003e\r\n\u003c/ol\u003e\r\n\r\n@param options The command line {@link Options}\r\n@param arguments The command line arguments to be parsed\r\n@param stopAtNonOption Specifies whether to stop flattening when an non option is found.\r\n@return The flattened {@code arguments} String array.\r\n",
  "functionStartLine": 119,
  "functionEndLine": 180,
  "numCommitsSeen": 52,
  "timeTaken": 416,
  "changeHistory": [
    "bd39a1c9cfb3ee394791f7e015a3045d042c01ba",
    "9539506e87648d753c44b68b3dfbdd1938c09315",
    "bc0edc47dbf47cdaa3485cfb724982f377c900df",
    "c12260c05ebcd27558265395df79b8b049534fbd",
    "5fb9e5009a8cdc7366b7a762f0e43dc47decf67c",
    "357a8b0b8f1090db29e0d541a9419f570a78457b",
    "700f05292777f33b5c349ac2b4f83168fd1ed888",
    "10090594827c3c90b9c0a5c8288cda448b0ce10c",
    "445ddaaa89bdcd003645b02b600fde1d3730d715",
    "3936da9d3fe37bcd20dd37216d82608e5917be07",
    "1596f3bbe57986361da4ac1a23634dd5b00d10df",
    "e366a69318c97c70bd3278ffd8c61fad3c4a4456",
    "db4a638cf642fd7d031fcaebffa306b0a16ba771",
    "147df44faa4eb12ffd4a0063fc3284f784ea67c8",
    "0823e1100abd395aa022285dc97d2dc0dd9472ef",
    "99aa05af2bfef3980ad8f94230cd077e8d30c5ea",
    "c8606251c904dfaf5303f71b788e12f7fff15fab",
    "9c5ce3501938cff01d78b7a1fff10a60abe9e0cf",
    "b599e124a373de091bb6e5b0d771505efccc444d",
    "2ff9573ffb08dd52ec3a55a49f2d77a1e94efbdf",
    "45c01740a0bc7f9fcf74c1d0acebb55b139ffcfd",
    "9b2b8038b52be022e42c8c7fdf26e236888f94c5",
    "f1a32a54f9ccc6895f94122aa32937167cbc3d3c",
    "745d1a535c9cf45d24455afc150b808981c8e0df",
    "dde69934d7f0bee13e4cd1fc99a7d60ce95a0c78"
  ],
  "changeHistoryShort": {
    "bd39a1c9cfb3ee394791f7e015a3045d042c01ba": "Ybodychange",
    "9539506e87648d753c44b68b3dfbdd1938c09315": "Ydocchange",
    "bc0edc47dbf47cdaa3485cfb724982f377c900df": "Ymultichange(Ydocchange,Yformatchange)",
    "c12260c05ebcd27558265395df79b8b049534fbd": "Yformatchange",
    "5fb9e5009a8cdc7366b7a762f0e43dc47decf67c": "Yparametermetachange",
    "357a8b0b8f1090db29e0d541a9419f570a78457b": "Ybodychange",
    "700f05292777f33b5c349ac2b4f83168fd1ed888": "Ybodychange",
    "10090594827c3c90b9c0a5c8288cda448b0ce10c": "Ydocchange",
    "445ddaaa89bdcd003645b02b600fde1d3730d715": "Yannotationchange",
    "3936da9d3fe37bcd20dd37216d82608e5917be07": "Ybodychange",
    "1596f3bbe57986361da4ac1a23634dd5b00d10df": "Yfilerename",
    "e366a69318c97c70bd3278ffd8c61fad3c4a4456": "Ymultichange(Yexceptionschange,Ybodychange)",
    "db4a638cf642fd7d031fcaebffa306b0a16ba771": "Ybodychange",
    "147df44faa4eb12ffd4a0063fc3284f784ea67c8": "Ymultichange(Ydocchange,Yformatchange)",
    "0823e1100abd395aa022285dc97d2dc0dd9472ef": "Ybodychange",
    "99aa05af2bfef3980ad8f94230cd077e8d30c5ea": "Ybodychange",
    "c8606251c904dfaf5303f71b788e12f7fff15fab": "Ybodychange",
    "9c5ce3501938cff01d78b7a1fff10a60abe9e0cf": "Ybodychange",
    "b599e124a373de091bb6e5b0d771505efccc444d": "Ybodychange",
    "2ff9573ffb08dd52ec3a55a49f2d77a1e94efbdf": "Ybodychange",
    "45c01740a0bc7f9fcf74c1d0acebb55b139ffcfd": "Ybodychange",
    "9b2b8038b52be022e42c8c7fdf26e236888f94c5": "Ymultichange(Ydocchange,Yformatchange)",
    "f1a32a54f9ccc6895f94122aa32937167cbc3d3c": "Ybodychange",
    "745d1a535c9cf45d24455afc150b808981c8e0df": "Ydocchange",
    "dde69934d7f0bee13e4cd1fc99a7d60ce95a0c78": "Yintroduced"
  },
  "changeHistoryDetails": {
    "bd39a1c9cfb3ee394791f7e015a3045d042c01ba": {
      "type": "Ybodychange",
      "commitMessage": "Use empty array. (#61)\n\n",
      "commitDate": "10/6/21 3:15 PM",
      "commitName": "bd39a1c9cfb3ee394791f7e015a3045d042c01ba",
      "commitAuthor": "Arturo Bernal",
      "commitDateOld": "10/4/21 9:55 PM",
      "commitNameOld": "c99a79a0d0d7ffa7281c49c270ea6326f08cb0cc",
      "commitAuthorOld": "Gary Gregory",
      "daysBetweenCommits": 1.72,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\r\nprotected String[] flatten(final Options options, final String[] arguments, final boolean stopAtNonOption) throws ParseException {\r\n    init();\r\n    this.options \u003d options;\r\n    final Iterator\u003cString\u003e iter \u003d Arrays.asList(arguments).iterator();\r\n    while (iter.hasNext()) {\r\n        final String token \u003d iter.next();\r\n        if (\"-\".equals(token) || \"--\".equals(token)) {\r\n            tokens.add(token);\r\n        } else if (token.startsWith(\"--\")) {\r\n            final int pos \u003d token.indexOf(\u0027\u003d\u0027);\r\n            final String opt \u003d pos \u003d\u003d -1 ? token : token.substring(0, pos);\r\n            final List\u003cString\u003e matchingOpts \u003d options.getMatchingOptions(opt);\r\n            if (matchingOpts.isEmpty()) {\r\n                processNonOptionToken(token, stopAtNonOption);\r\n            } else if (matchingOpts.size() \u003e 1) {\r\n                throw new AmbiguousOptionException(opt, matchingOpts);\r\n            } else {\r\n                currentOption \u003d options.getOption(matchingOpts.get(0));\r\n                tokens.add(\"--\" + currentOption.getLongOpt());\r\n                if (pos !\u003d -1) {\r\n                    tokens.add(token.substring(pos + 1));\r\n                }\r\n            }\r\n        } else if (token.startsWith(\"-\")) {\r\n            if (token.length() \u003d\u003d 2 || options.hasOption(token)) {\r\n                processOptionToken(token, stopAtNonOption);\r\n            } else if (!options.getMatchingOptions(token).isEmpty()) {\r\n                final List\u003cString\u003e matchingOpts \u003d options.getMatchingOptions(token);\r\n                if (matchingOpts.size() \u003e 1) {\r\n                    throw new AmbiguousOptionException(token, matchingOpts);\r\n                }\r\n                final Option opt \u003d options.getOption(matchingOpts.get(0));\r\n                processOptionToken(\"-\" + opt.getLongOpt(), stopAtNonOption);\r\n            } else {\r\n                burstToken(token, stopAtNonOption);\r\n            }\r\n        } else {\r\n            processNonOptionToken(token, stopAtNonOption);\r\n        }\r\n        gobble(iter);\r\n    }\r\n    return tokens.toArray(Util.EMPTY_STRING_ARRAY);\r\n}",
      "path": "src/main/java/org/apache/commons/cli/PosixParser.java",
      "functionStartLine": 119,
      "functionName": "flatten",
      "functionAnnotation": "@Override",
      "functionDoc": "\u003cp\u003e\r\nAn implementation of {@link Parser}\u0027s abstract {@link Parser#flatten(Options,String[],boolean) flatten} method.\r\n\u003c/p\u003e\r\n\r\n\u003cp\u003e\r\nThe following are the rules used by this flatten method.\r\n\u003c/p\u003e\r\n\u003col\u003e\r\n\u003cli\u003eif {@code stopAtNonOption} is \u003cb\u003etrue\u003c/b\u003e then do not burst anymore of {@code arguments} entries, just\r\nadd each successive entry without further processing. Otherwise, ignore {@code stopAtNonOption}.\u003c/li\u003e\r\n\u003cli\u003eif the current {@code arguments} entry is \"\u003cb\u003e--\u003c/b\u003e\" just add the entry to the list of processed\r\ntokens\u003c/li\u003e\r\n\u003cli\u003eif the current {@code arguments} entry is \"\u003cb\u003e-\u003c/b\u003e\" just add the entry to the list of processed tokens\u003c/li\u003e\r\n\u003cli\u003eif the current {@code arguments} entry is two characters in length and the first character is \"\u003cb\u003e-\u003c/b\u003e\"\r\nthen check if this is a valid {@link Option} id. If it is a valid id, then add the entry to the list of processed\r\ntokens and set the current {@link Option} member. If it is not a valid id and {@code stopAtNonOption} is true,\r\nthen the remaining entries are copied to the list of processed tokens. Otherwise, the current entry is ignored.\u003c/li\u003e\r\n\u003cli\u003eif the current {@code arguments} entry is more than two characters in length and the first character is\r\n\"\u003cb\u003e-\u003c/b\u003e\" then we need to burst the entry to determine its constituents. For more information on the bursting\r\nalgorithm see {@link PosixParser#burstToken(String, boolean) burstToken}.\u003c/li\u003e\r\n\u003cli\u003eif the current {@code arguments} entry is not handled by any of the previous rules, then the entry is added\r\nto the list of processed tokens.\u003c/li\u003e\r\n\u003c/ol\u003e\r\n\r\n@param options The command line {@link Options}\r\n@param arguments The command line arguments to be parsed\r\n@param stopAtNonOption Specifies whether to stop flattening when an non option is found.\r\n@return The flattened {@code arguments} String array.\r\n",
      "diff": "@@ -1,44 +1,44 @@\n @Override\r\n protected String[] flatten(final Options options, final String[] arguments, final boolean stopAtNonOption) throws ParseException {\r\n     init();\r\n     this.options \u003d options;\r\n     final Iterator\u003cString\u003e iter \u003d Arrays.asList(arguments).iterator();\r\n     while (iter.hasNext()) {\r\n         final String token \u003d iter.next();\r\n         if (\"-\".equals(token) || \"--\".equals(token)) {\r\n             tokens.add(token);\r\n         } else if (token.startsWith(\"--\")) {\r\n             final int pos \u003d token.indexOf(\u0027\u003d\u0027);\r\n             final String opt \u003d pos \u003d\u003d -1 ? token : token.substring(0, pos);\r\n             final List\u003cString\u003e matchingOpts \u003d options.getMatchingOptions(opt);\r\n             if (matchingOpts.isEmpty()) {\r\n                 processNonOptionToken(token, stopAtNonOption);\r\n             } else if (matchingOpts.size() \u003e 1) {\r\n                 throw new AmbiguousOptionException(opt, matchingOpts);\r\n             } else {\r\n                 currentOption \u003d options.getOption(matchingOpts.get(0));\r\n                 tokens.add(\"--\" + currentOption.getLongOpt());\r\n                 if (pos !\u003d -1) {\r\n                     tokens.add(token.substring(pos + 1));\r\n                 }\r\n             }\r\n         } else if (token.startsWith(\"-\")) {\r\n             if (token.length() \u003d\u003d 2 || options.hasOption(token)) {\r\n                 processOptionToken(token, stopAtNonOption);\r\n             } else if (!options.getMatchingOptions(token).isEmpty()) {\r\n                 final List\u003cString\u003e matchingOpts \u003d options.getMatchingOptions(token);\r\n                 if (matchingOpts.size() \u003e 1) {\r\n                     throw new AmbiguousOptionException(token, matchingOpts);\r\n                 }\r\n                 final Option opt \u003d options.getOption(matchingOpts.get(0));\r\n                 processOptionToken(\"-\" + opt.getLongOpt(), stopAtNonOption);\r\n             } else {\r\n                 burstToken(token, stopAtNonOption);\r\n             }\r\n         } else {\r\n             processNonOptionToken(token, stopAtNonOption);\r\n         }\r\n         gobble(iter);\r\n     }\r\n-    return tokens.toArray(new String[tokens.size()]);\r\n+    return tokens.toArray(Util.EMPTY_STRING_ARRAY);\r\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "9539506e87648d753c44b68b3dfbdd1938c09315": {
      "type": "Ydocchange",
      "commitMessage": "Javadoc: Use @code instead of HTML tags.\n",
      "commitDate": "10/4/21 12:32 AM",
      "commitName": "9539506e87648d753c44b68b3dfbdd1938c09315",
      "commitAuthor": "Gary Gregory",
      "commitDateOld": "10/2/21 11:07 PM",
      "commitNameOld": "4e8b3a2584ddac7411e20cdaca75b160787d7fa9",
      "commitAuthorOld": "Gary Gregory",
      "daysBetweenCommits": 1.06,
      "commitsBetweenForRepo": 9,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\r\nprotected String[] flatten(final Options options, final String[] arguments, final boolean stopAtNonOption) throws ParseException {\r\n    init();\r\n    this.options \u003d options;\r\n    final Iterator\u003cString\u003e iter \u003d Arrays.asList(arguments).iterator();\r\n    while (iter.hasNext()) {\r\n        final String token \u003d iter.next();\r\n        if (\"-\".equals(token) || \"--\".equals(token)) {\r\n            tokens.add(token);\r\n        } else if (token.startsWith(\"--\")) {\r\n            final int pos \u003d token.indexOf(\u0027\u003d\u0027);\r\n            final String opt \u003d pos \u003d\u003d -1 ? token : token.substring(0, pos);\r\n            final List\u003cString\u003e matchingOpts \u003d options.getMatchingOptions(opt);\r\n            if (matchingOpts.isEmpty()) {\r\n                processNonOptionToken(token, stopAtNonOption);\r\n            } else if (matchingOpts.size() \u003e 1) {\r\n                throw new AmbiguousOptionException(opt, matchingOpts);\r\n            } else {\r\n                currentOption \u003d options.getOption(matchingOpts.get(0));\r\n                tokens.add(\"--\" + currentOption.getLongOpt());\r\n                if (pos !\u003d -1) {\r\n                    tokens.add(token.substring(pos + 1));\r\n                }\r\n            }\r\n        } else if (token.startsWith(\"-\")) {\r\n            if (token.length() \u003d\u003d 2 || options.hasOption(token)) {\r\n                processOptionToken(token, stopAtNonOption);\r\n            } else if (!options.getMatchingOptions(token).isEmpty()) {\r\n                final List\u003cString\u003e matchingOpts \u003d options.getMatchingOptions(token);\r\n                if (matchingOpts.size() \u003e 1) {\r\n                    throw new AmbiguousOptionException(token, matchingOpts);\r\n                }\r\n                final Option opt \u003d options.getOption(matchingOpts.get(0));\r\n                processOptionToken(\"-\" + opt.getLongOpt(), stopAtNonOption);\r\n            } else {\r\n                burstToken(token, stopAtNonOption);\r\n            }\r\n        } else {\r\n            processNonOptionToken(token, stopAtNonOption);\r\n        }\r\n        gobble(iter);\r\n    }\r\n    return tokens.toArray(new String[tokens.size()]);\r\n}",
      "path": "src/main/java/org/apache/commons/cli/PosixParser.java",
      "functionStartLine": 119,
      "functionName": "flatten",
      "functionAnnotation": "@Override",
      "functionDoc": "\u003cp\u003e\r\nAn implementation of {@link Parser}\u0027s abstract {@link Parser#flatten(Options,String[],boolean) flatten} method.\r\n\u003c/p\u003e\r\n\r\n\u003cp\u003e\r\nThe following are the rules used by this flatten method.\r\n\u003c/p\u003e\r\n\u003col\u003e\r\n\u003cli\u003eif {@code stopAtNonOption} is \u003cb\u003etrue\u003c/b\u003e then do not burst anymore of {@code arguments} entries, just\r\nadd each successive entry without further processing. Otherwise, ignore {@code stopAtNonOption}.\u003c/li\u003e\r\n\u003cli\u003eif the current {@code arguments} entry is \"\u003cb\u003e--\u003c/b\u003e\" just add the entry to the list of processed\r\ntokens\u003c/li\u003e\r\n\u003cli\u003eif the current {@code arguments} entry is \"\u003cb\u003e-\u003c/b\u003e\" just add the entry to the list of processed tokens\u003c/li\u003e\r\n\u003cli\u003eif the current {@code arguments} entry is two characters in length and the first character is \"\u003cb\u003e-\u003c/b\u003e\"\r\nthen check if this is a valid {@link Option} id. If it is a valid id, then add the entry to the list of processed\r\ntokens and set the current {@link Option} member. If it is not a valid id and {@code stopAtNonOption} is true,\r\nthen the remaining entries are copied to the list of processed tokens. Otherwise, the current entry is ignored.\u003c/li\u003e\r\n\u003cli\u003eif the current {@code arguments} entry is more than two characters in length and the first character is\r\n\"\u003cb\u003e-\u003c/b\u003e\" then we need to burst the entry to determine its constituents. For more information on the bursting\r\nalgorithm see {@link PosixParser#burstToken(String, boolean) burstToken}.\u003c/li\u003e\r\n\u003cli\u003eif the current {@code arguments} entry is not handled by any of the previous rules, then the entry is added\r\nto the list of processed tokens.\u003c/li\u003e\r\n\u003c/ol\u003e\r\n\r\n@param options The command line {@link Options}\r\n@param arguments The command line arguments to be parsed\r\n@param stopAtNonOption Specifies whether to stop flattening when an non option is found.\r\n@return The flattened {@code arguments} String array.\r\n",
      "diff": "",
      "extendedDetails": {
        "oldValue": "\u003cp\u003e\r\nAn implementation of {@link Parser}\u0027s abstract {@link Parser#flatten(Options,String[],boolean) flatten} method.\r\n\u003c/p\u003e\r\n\r\n\u003cp\u003e\r\nThe following are the rules used by this flatten method.\r\n\u003c/p\u003e\r\n\u003col\u003e\r\n\u003cli\u003eif \u003ccode\u003estopAtNonOption\u003c/code\u003e is \u003cb\u003etrue\u003c/b\u003e then do not burst anymore of \u003ccode\u003earguments\u003c/code\u003e entries, just\r\nadd each successive entry without further processing. Otherwise, ignore \u003ccode\u003estopAtNonOption\u003c/code\u003e.\u003c/li\u003e\r\n\u003cli\u003eif the current \u003ccode\u003earguments\u003c/code\u003e entry is \"\u003cb\u003e--\u003c/b\u003e\" just add the entry to the list of processed\r\ntokens\u003c/li\u003e\r\n\u003cli\u003eif the current \u003ccode\u003earguments\u003c/code\u003e entry is \"\u003cb\u003e-\u003c/b\u003e\" just add the entry to the list of processed tokens\u003c/li\u003e\r\n\u003cli\u003eif the current \u003ccode\u003earguments\u003c/code\u003e entry is two characters in length and the first character is \"\u003cb\u003e-\u003c/b\u003e\"\r\nthen check if this is a valid {@link Option} id. If it is a valid id, then add the entry to the list of processed\r\ntokens and set the current {@link Option} member. If it is not a valid id and \u003ccode\u003estopAtNonOption\u003c/code\u003e is true,\r\nthen the remaining entries are copied to the list of processed tokens. Otherwise, the current entry is ignored.\u003c/li\u003e\r\n\u003cli\u003eif the current \u003ccode\u003earguments\u003c/code\u003e entry is more than two characters in length and the first character is\r\n\"\u003cb\u003e-\u003c/b\u003e\" then we need to burst the entry to determine its constituents. For more information on the bursting\r\nalgorithm see {@link PosixParser#burstToken(String, boolean) burstToken}.\u003c/li\u003e\r\n\u003cli\u003eif the current \u003ccode\u003earguments\u003c/code\u003e entry is not handled by any of the previous rules, then the entry is added\r\nto the list of processed tokens.\u003c/li\u003e\r\n\u003c/ol\u003e\r\n\r\n@param options The command line {@link Options}\r\n@param arguments The command line arguments to be parsed\r\n@param stopAtNonOption Specifies whether to stop flattening when an non option is found.\r\n@return The flattened \u003ccode\u003earguments\u003c/code\u003e String array.\r\n",
        "newValue": "\u003cp\u003e\r\nAn implementation of {@link Parser}\u0027s abstract {@link Parser#flatten(Options,String[],boolean) flatten} method.\r\n\u003c/p\u003e\r\n\r\n\u003cp\u003e\r\nThe following are the rules used by this flatten method.\r\n\u003c/p\u003e\r\n\u003col\u003e\r\n\u003cli\u003eif {@code stopAtNonOption} is \u003cb\u003etrue\u003c/b\u003e then do not burst anymore of {@code arguments} entries, just\r\nadd each successive entry without further processing. Otherwise, ignore {@code stopAtNonOption}.\u003c/li\u003e\r\n\u003cli\u003eif the current {@code arguments} entry is \"\u003cb\u003e--\u003c/b\u003e\" just add the entry to the list of processed\r\ntokens\u003c/li\u003e\r\n\u003cli\u003eif the current {@code arguments} entry is \"\u003cb\u003e-\u003c/b\u003e\" just add the entry to the list of processed tokens\u003c/li\u003e\r\n\u003cli\u003eif the current {@code arguments} entry is two characters in length and the first character is \"\u003cb\u003e-\u003c/b\u003e\"\r\nthen check if this is a valid {@link Option} id. If it is a valid id, then add the entry to the list of processed\r\ntokens and set the current {@link Option} member. If it is not a valid id and {@code stopAtNonOption} is true,\r\nthen the remaining entries are copied to the list of processed tokens. Otherwise, the current entry is ignored.\u003c/li\u003e\r\n\u003cli\u003eif the current {@code arguments} entry is more than two characters in length and the first character is\r\n\"\u003cb\u003e-\u003c/b\u003e\" then we need to burst the entry to determine its constituents. For more information on the bursting\r\nalgorithm see {@link PosixParser#burstToken(String, boolean) burstToken}.\u003c/li\u003e\r\n\u003cli\u003eif the current {@code arguments} entry is not handled by any of the previous rules, then the entry is added\r\nto the list of processed tokens.\u003c/li\u003e\r\n\u003c/ol\u003e\r\n\r\n@param options The command line {@link Options}\r\n@param arguments The command line arguments to be parsed\r\n@param stopAtNonOption Specifies whether to stop flattening when an non option is found.\r\n@return The flattened {@code arguments} String array.\r\n"
      }
    },
    "bc0edc47dbf47cdaa3485cfb724982f377c900df": {
      "type": "Ymultichange(Ydocchange,Yformatchange)",
      "commitMessage": "Clean ups.\n\n- maven-checkstyle-plugin 3.1.1 -\u003e 3.1.2.\n- checkstyle -\u003e 9.0\n- Updates for 21st century.\n- No need to nest else clause.\n- Use simple array declarations.\n- Use valueOf instead of new for Numbers.\n- Consistent formatting.\n- Remove some inline comments //-----...\n",
      "commitDate": "10/2/21 11:04 PM",
      "commitName": "bc0edc47dbf47cdaa3485cfb724982f377c900df",
      "commitAuthor": "Gary Gregory",
      "subchanges": [
        {
          "type": "Ydocchange",
          "commitMessage": "Clean ups.\n\n- maven-checkstyle-plugin 3.1.1 -\u003e 3.1.2.\n- checkstyle -\u003e 9.0\n- Updates for 21st century.\n- No need to nest else clause.\n- Use simple array declarations.\n- Use valueOf instead of new for Numbers.\n- Consistent formatting.\n- Remove some inline comments //-----...\n",
          "commitDate": "10/2/21 11:04 PM",
          "commitName": "bc0edc47dbf47cdaa3485cfb724982f377c900df",
          "commitAuthor": "Gary Gregory",
          "commitDateOld": "12/28/20 6:44 PM",
          "commitNameOld": "c67275279176504a6f5fc556cfa247e1df02a580",
          "commitAuthorOld": "Arturo Bernal",
          "daysBetweenCommits": 278.18,
          "commitsBetweenForRepo": 38,
          "commitsBetweenForFile": 1,
          "actualSource": "@Override\r\nprotected String[] flatten(final Options options, final String[] arguments, final boolean stopAtNonOption) throws ParseException {\r\n    init();\r\n    this.options \u003d options;\r\n    final Iterator\u003cString\u003e iter \u003d Arrays.asList(arguments).iterator();\r\n    while (iter.hasNext()) {\r\n        final String token \u003d iter.next();\r\n        if (\"-\".equals(token) || \"--\".equals(token)) {\r\n            tokens.add(token);\r\n        } else if (token.startsWith(\"--\")) {\r\n            final int pos \u003d token.indexOf(\u0027\u003d\u0027);\r\n            final String opt \u003d pos \u003d\u003d -1 ? token : token.substring(0, pos);\r\n            final List\u003cString\u003e matchingOpts \u003d options.getMatchingOptions(opt);\r\n            if (matchingOpts.isEmpty()) {\r\n                processNonOptionToken(token, stopAtNonOption);\r\n            } else if (matchingOpts.size() \u003e 1) {\r\n                throw new AmbiguousOptionException(opt, matchingOpts);\r\n            } else {\r\n                currentOption \u003d options.getOption(matchingOpts.get(0));\r\n                tokens.add(\"--\" + currentOption.getLongOpt());\r\n                if (pos !\u003d -1) {\r\n                    tokens.add(token.substring(pos + 1));\r\n                }\r\n            }\r\n        } else if (token.startsWith(\"-\")) {\r\n            if (token.length() \u003d\u003d 2 || options.hasOption(token)) {\r\n                processOptionToken(token, stopAtNonOption);\r\n            } else if (!options.getMatchingOptions(token).isEmpty()) {\r\n                final List\u003cString\u003e matchingOpts \u003d options.getMatchingOptions(token);\r\n                if (matchingOpts.size() \u003e 1) {\r\n                    throw new AmbiguousOptionException(token, matchingOpts);\r\n                }\r\n                final Option opt \u003d options.getOption(matchingOpts.get(0));\r\n                processOptionToken(\"-\" + opt.getLongOpt(), stopAtNonOption);\r\n            } else {\r\n                burstToken(token, stopAtNonOption);\r\n            }\r\n        } else {\r\n            processNonOptionToken(token, stopAtNonOption);\r\n        }\r\n        gobble(iter);\r\n    }\r\n    return tokens.toArray(new String[tokens.size()]);\r\n}",
          "path": "src/main/java/org/apache/commons/cli/PosixParser.java",
          "functionStartLine": 85,
          "functionName": "flatten",
          "functionAnnotation": "@Override",
          "functionDoc": "\u003cp\u003e\r\nAn implementation of {@link Parser}\u0027s abstract {@link Parser#flatten(Options,String[],boolean) flatten} method.\r\n\u003c/p\u003e\r\n\r\n\u003cp\u003e\r\nThe following are the rules used by this flatten method.\r\n\u003c/p\u003e\r\n\u003col\u003e\r\n\u003cli\u003eif \u003ccode\u003estopAtNonOption\u003c/code\u003e is \u003cb\u003etrue\u003c/b\u003e then do not burst anymore of \u003ccode\u003earguments\u003c/code\u003e entries, just\r\nadd each successive entry without further processing. Otherwise, ignore \u003ccode\u003estopAtNonOption\u003c/code\u003e.\u003c/li\u003e\r\n\u003cli\u003eif the current \u003ccode\u003earguments\u003c/code\u003e entry is \"\u003cb\u003e--\u003c/b\u003e\" just add the entry to the list of processed\r\ntokens\u003c/li\u003e\r\n\u003cli\u003eif the current \u003ccode\u003earguments\u003c/code\u003e entry is \"\u003cb\u003e-\u003c/b\u003e\" just add the entry to the list of processed tokens\u003c/li\u003e\r\n\u003cli\u003eif the current \u003ccode\u003earguments\u003c/code\u003e entry is two characters in length and the first character is \"\u003cb\u003e-\u003c/b\u003e\"\r\nthen check if this is a valid {@link Option} id. If it is a valid id, then add the entry to the list of processed\r\ntokens and set the current {@link Option} member. If it is not a valid id and \u003ccode\u003estopAtNonOption\u003c/code\u003e is true,\r\nthen the remaining entries are copied to the list of processed tokens. Otherwise, the current entry is ignored.\u003c/li\u003e\r\n\u003cli\u003eif the current \u003ccode\u003earguments\u003c/code\u003e entry is more than two characters in length and the first character is\r\n\"\u003cb\u003e-\u003c/b\u003e\" then we need to burst the entry to determine its constituents. For more information on the bursting\r\nalgorithm see {@link PosixParser#burstToken(String, boolean) burstToken}.\u003c/li\u003e\r\n\u003cli\u003eif the current \u003ccode\u003earguments\u003c/code\u003e entry is not handled by any of the previous rules, then the entry is added\r\nto the list of processed tokens.\u003c/li\u003e\r\n\u003c/ol\u003e\r\n\r\n@param options The command line {@link Options}\r\n@param arguments The command line arguments to be parsed\r\n@param stopAtNonOption Specifies whether to stop flattening when an non option is found.\r\n@return The flattened \u003ccode\u003earguments\u003c/code\u003e String array.\r\n",
          "diff": "",
          "extendedDetails": {
            "oldValue": "\u003cp\u003eAn implementation of {@link Parser}\u0027s abstract\r\n{@link Parser#flatten(Options,String[],boolean) flatten} method.\u003c/p\u003e\r\n\r\n\u003cp\u003eThe following are the rules used by this flatten method.\u003c/p\u003e\r\n\u003col\u003e\r\n \u003cli\u003eif \u003ccode\u003estopAtNonOption\u003c/code\u003e is \u003cb\u003etrue\u003c/b\u003e then do not\r\n burst anymore of \u003ccode\u003earguments\u003c/code\u003e entries, just add each\r\n successive entry without further processing.  Otherwise, ignore\r\n \u003ccode\u003estopAtNonOption\u003c/code\u003e.\u003c/li\u003e\r\n \u003cli\u003eif the current \u003ccode\u003earguments\u003c/code\u003e entry is \"\u003cb\u003e--\u003c/b\u003e\"\r\n just add the entry to the list of processed tokens\u003c/li\u003e\r\n \u003cli\u003eif the current \u003ccode\u003earguments\u003c/code\u003e entry is \"\u003cb\u003e-\u003c/b\u003e\"\r\n just add the entry to the list of processed tokens\u003c/li\u003e\r\n \u003cli\u003eif the current \u003ccode\u003earguments\u003c/code\u003e entry is two characters\r\n in length and the first character is \"\u003cb\u003e-\u003c/b\u003e\" then check if this\r\n is a valid {@link Option} id.  If it is a valid id, then add the\r\n entry to the list of processed tokens and set the current {@link Option}\r\n member.  If it is not a valid id and \u003ccode\u003estopAtNonOption\u003c/code\u003e\r\n is true, then the remaining entries are copied to the list of\r\n processed tokens.  Otherwise, the current entry is ignored.\u003c/li\u003e\r\n \u003cli\u003eif the current \u003ccode\u003earguments\u003c/code\u003e entry is more than two\r\n characters in length and the first character is \"\u003cb\u003e-\u003c/b\u003e\" then\r\n we need to burst the entry to determine its constituents.  For more\r\n information on the bursting algorithm see\r\n {@link PosixParser#burstToken(String, boolean) burstToken}.\u003c/li\u003e\r\n \u003cli\u003eif the current \u003ccode\u003earguments\u003c/code\u003e entry is not handled\r\n by any of the previous rules, then the entry is added to the list\r\n of processed tokens.\u003c/li\u003e\r\n\u003c/ol\u003e\r\n\r\n@param options The command line {@link Options}\r\n@param arguments The command line arguments to be parsed\r\n@param stopAtNonOption Specifies whether to stop flattening\r\nwhen an non option is found.\r\n@return The flattened \u003ccode\u003earguments\u003c/code\u003e String array.\r\n",
            "newValue": "\u003cp\u003e\r\nAn implementation of {@link Parser}\u0027s abstract {@link Parser#flatten(Options,String[],boolean) flatten} method.\r\n\u003c/p\u003e\r\n\r\n\u003cp\u003e\r\nThe following are the rules used by this flatten method.\r\n\u003c/p\u003e\r\n\u003col\u003e\r\n\u003cli\u003eif \u003ccode\u003estopAtNonOption\u003c/code\u003e is \u003cb\u003etrue\u003c/b\u003e then do not burst anymore of \u003ccode\u003earguments\u003c/code\u003e entries, just\r\nadd each successive entry without further processing. Otherwise, ignore \u003ccode\u003estopAtNonOption\u003c/code\u003e.\u003c/li\u003e\r\n\u003cli\u003eif the current \u003ccode\u003earguments\u003c/code\u003e entry is \"\u003cb\u003e--\u003c/b\u003e\" just add the entry to the list of processed\r\ntokens\u003c/li\u003e\r\n\u003cli\u003eif the current \u003ccode\u003earguments\u003c/code\u003e entry is \"\u003cb\u003e-\u003c/b\u003e\" just add the entry to the list of processed tokens\u003c/li\u003e\r\n\u003cli\u003eif the current \u003ccode\u003earguments\u003c/code\u003e entry is two characters in length and the first character is \"\u003cb\u003e-\u003c/b\u003e\"\r\nthen check if this is a valid {@link Option} id. If it is a valid id, then add the entry to the list of processed\r\ntokens and set the current {@link Option} member. If it is not a valid id and \u003ccode\u003estopAtNonOption\u003c/code\u003e is true,\r\nthen the remaining entries are copied to the list of processed tokens. Otherwise, the current entry is ignored.\u003c/li\u003e\r\n\u003cli\u003eif the current \u003ccode\u003earguments\u003c/code\u003e entry is more than two characters in length and the first character is\r\n\"\u003cb\u003e-\u003c/b\u003e\" then we need to burst the entry to determine its constituents. For more information on the bursting\r\nalgorithm see {@link PosixParser#burstToken(String, boolean) burstToken}.\u003c/li\u003e\r\n\u003cli\u003eif the current \u003ccode\u003earguments\u003c/code\u003e entry is not handled by any of the previous rules, then the entry is added\r\nto the list of processed tokens.\u003c/li\u003e\r\n\u003c/ol\u003e\r\n\r\n@param options The command line {@link Options}\r\n@param arguments The command line arguments to be parsed\r\n@param stopAtNonOption Specifies whether to stop flattening when an non option is found.\r\n@return The flattened \u003ccode\u003earguments\u003c/code\u003e String array.\r\n"
          }
        },
        {
          "type": "Yformatchange",
          "commitMessage": "Clean ups.\n\n- maven-checkstyle-plugin 3.1.1 -\u003e 3.1.2.\n- checkstyle -\u003e 9.0\n- Updates for 21st century.\n- No need to nest else clause.\n- Use simple array declarations.\n- Use valueOf instead of new for Numbers.\n- Consistent formatting.\n- Remove some inline comments //-----...\n",
          "commitDate": "10/2/21 11:04 PM",
          "commitName": "bc0edc47dbf47cdaa3485cfb724982f377c900df",
          "commitAuthor": "Gary Gregory",
          "commitDateOld": "12/28/20 6:44 PM",
          "commitNameOld": "c67275279176504a6f5fc556cfa247e1df02a580",
          "commitAuthorOld": "Arturo Bernal",
          "daysBetweenCommits": 278.18,
          "commitsBetweenForRepo": 38,
          "commitsBetweenForFile": 1,
          "actualSource": "@Override\r\nprotected String[] flatten(final Options options, final String[] arguments, final boolean stopAtNonOption) throws ParseException {\r\n    init();\r\n    this.options \u003d options;\r\n    final Iterator\u003cString\u003e iter \u003d Arrays.asList(arguments).iterator();\r\n    while (iter.hasNext()) {\r\n        final String token \u003d iter.next();\r\n        if (\"-\".equals(token) || \"--\".equals(token)) {\r\n            tokens.add(token);\r\n        } else if (token.startsWith(\"--\")) {\r\n            final int pos \u003d token.indexOf(\u0027\u003d\u0027);\r\n            final String opt \u003d pos \u003d\u003d -1 ? token : token.substring(0, pos);\r\n            final List\u003cString\u003e matchingOpts \u003d options.getMatchingOptions(opt);\r\n            if (matchingOpts.isEmpty()) {\r\n                processNonOptionToken(token, stopAtNonOption);\r\n            } else if (matchingOpts.size() \u003e 1) {\r\n                throw new AmbiguousOptionException(opt, matchingOpts);\r\n            } else {\r\n                currentOption \u003d options.getOption(matchingOpts.get(0));\r\n                tokens.add(\"--\" + currentOption.getLongOpt());\r\n                if (pos !\u003d -1) {\r\n                    tokens.add(token.substring(pos + 1));\r\n                }\r\n            }\r\n        } else if (token.startsWith(\"-\")) {\r\n            if (token.length() \u003d\u003d 2 || options.hasOption(token)) {\r\n                processOptionToken(token, stopAtNonOption);\r\n            } else if (!options.getMatchingOptions(token).isEmpty()) {\r\n                final List\u003cString\u003e matchingOpts \u003d options.getMatchingOptions(token);\r\n                if (matchingOpts.size() \u003e 1) {\r\n                    throw new AmbiguousOptionException(token, matchingOpts);\r\n                }\r\n                final Option opt \u003d options.getOption(matchingOpts.get(0));\r\n                processOptionToken(\"-\" + opt.getLongOpt(), stopAtNonOption);\r\n            } else {\r\n                burstToken(token, stopAtNonOption);\r\n            }\r\n        } else {\r\n            processNonOptionToken(token, stopAtNonOption);\r\n        }\r\n        gobble(iter);\r\n    }\r\n    return tokens.toArray(new String[tokens.size()]);\r\n}",
          "path": "src/main/java/org/apache/commons/cli/PosixParser.java",
          "functionStartLine": 85,
          "functionName": "flatten",
          "functionAnnotation": "@Override",
          "functionDoc": "\u003cp\u003e\r\nAn implementation of {@link Parser}\u0027s abstract {@link Parser#flatten(Options,String[],boolean) flatten} method.\r\n\u003c/p\u003e\r\n\r\n\u003cp\u003e\r\nThe following are the rules used by this flatten method.\r\n\u003c/p\u003e\r\n\u003col\u003e\r\n\u003cli\u003eif \u003ccode\u003estopAtNonOption\u003c/code\u003e is \u003cb\u003etrue\u003c/b\u003e then do not burst anymore of \u003ccode\u003earguments\u003c/code\u003e entries, just\r\nadd each successive entry without further processing. Otherwise, ignore \u003ccode\u003estopAtNonOption\u003c/code\u003e.\u003c/li\u003e\r\n\u003cli\u003eif the current \u003ccode\u003earguments\u003c/code\u003e entry is \"\u003cb\u003e--\u003c/b\u003e\" just add the entry to the list of processed\r\ntokens\u003c/li\u003e\r\n\u003cli\u003eif the current \u003ccode\u003earguments\u003c/code\u003e entry is \"\u003cb\u003e-\u003c/b\u003e\" just add the entry to the list of processed tokens\u003c/li\u003e\r\n\u003cli\u003eif the current \u003ccode\u003earguments\u003c/code\u003e entry is two characters in length and the first character is \"\u003cb\u003e-\u003c/b\u003e\"\r\nthen check if this is a valid {@link Option} id. If it is a valid id, then add the entry to the list of processed\r\ntokens and set the current {@link Option} member. If it is not a valid id and \u003ccode\u003estopAtNonOption\u003c/code\u003e is true,\r\nthen the remaining entries are copied to the list of processed tokens. Otherwise, the current entry is ignored.\u003c/li\u003e\r\n\u003cli\u003eif the current \u003ccode\u003earguments\u003c/code\u003e entry is more than two characters in length and the first character is\r\n\"\u003cb\u003e-\u003c/b\u003e\" then we need to burst the entry to determine its constituents. For more information on the bursting\r\nalgorithm see {@link PosixParser#burstToken(String, boolean) burstToken}.\u003c/li\u003e\r\n\u003cli\u003eif the current \u003ccode\u003earguments\u003c/code\u003e entry is not handled by any of the previous rules, then the entry is added\r\nto the list of processed tokens.\u003c/li\u003e\r\n\u003c/ol\u003e\r\n\r\n@param options The command line {@link Options}\r\n@param arguments The command line arguments to be parsed\r\n@param stopAtNonOption Specifies whether to stop flattening when an non option is found.\r\n@return The flattened \u003ccode\u003earguments\u003c/code\u003e String array.\r\n",
          "diff": "",
          "extendedDetails": {}
        }
      ]
    },
    "c12260c05ebcd27558265395df79b8b049534fbd": {
      "type": "Yformatchange",
      "commitMessage": "Remove trailing white spaces on all lines.\n",
      "commitDate": "12/18/19 11:28 PM",
      "commitName": "c12260c05ebcd27558265395df79b8b049534fbd",
      "commitAuthor": "Gary Gregory",
      "commitDateOld": "6/15/17 1:23 PM",
      "commitNameOld": "9a845a2a30742b500e3b823b105434203427ea93",
      "commitAuthorOld": "Bruno P. Kinoshita",
      "daysBetweenCommits": 916.42,
      "commitsBetweenForRepo": 47,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\r\nprotected String[] flatten(final Options options, final String[] arguments, final boolean stopAtNonOption) throws ParseException {\r\n    init();\r\n    this.options \u003d options;\r\n    final Iterator\u003cString\u003e iter \u003d Arrays.asList(arguments).iterator();\r\n    while (iter.hasNext()) {\r\n        final String token \u003d iter.next();\r\n        if (\"-\".equals(token) || \"--\".equals(token)) {\r\n            tokens.add(token);\r\n        } else if (token.startsWith(\"--\")) {\r\n            final int pos \u003d token.indexOf(\u0027\u003d\u0027);\r\n            final String opt \u003d pos \u003d\u003d -1 ? token : token.substring(0, pos);\r\n            final List\u003cString\u003e matchingOpts \u003d options.getMatchingOptions(opt);\r\n            if (matchingOpts.isEmpty()) {\r\n                processNonOptionToken(token, stopAtNonOption);\r\n            } else if (matchingOpts.size() \u003e 1) {\r\n                throw new AmbiguousOptionException(opt, matchingOpts);\r\n            } else {\r\n                currentOption \u003d options.getOption(matchingOpts.get(0));\r\n                tokens.add(\"--\" + currentOption.getLongOpt());\r\n                if (pos !\u003d -1) {\r\n                    tokens.add(token.substring(pos + 1));\r\n                }\r\n            }\r\n        } else if (token.startsWith(\"-\")) {\r\n            if (token.length() \u003d\u003d 2 || options.hasOption(token)) {\r\n                processOptionToken(token, stopAtNonOption);\r\n            } else if (!options.getMatchingOptions(token).isEmpty()) {\r\n                final List\u003cString\u003e matchingOpts \u003d options.getMatchingOptions(token);\r\n                if (matchingOpts.size() \u003e 1) {\r\n                    throw new AmbiguousOptionException(token, matchingOpts);\r\n                }\r\n                final Option opt \u003d options.getOption(matchingOpts.get(0));\r\n                processOptionToken(\"-\" + opt.getLongOpt(), stopAtNonOption);\r\n            } else {\r\n                burstToken(token, stopAtNonOption);\r\n            }\r\n        } else {\r\n            processNonOptionToken(token, stopAtNonOption);\r\n        }\r\n        gobble(iter);\r\n    }\r\n    return tokens.toArray(new String[tokens.size()]);\r\n}",
      "path": "src/main/java/org/apache/commons/cli/PosixParser.java",
      "functionStartLine": 95,
      "functionName": "flatten",
      "functionAnnotation": "@Override",
      "functionDoc": "\u003cp\u003eAn implementation of {@link Parser}\u0027s abstract\r\n{@link Parser#flatten(Options,String[],boolean) flatten} method.\u003c/p\u003e\r\n\r\n\u003cp\u003eThe following are the rules used by this flatten method.\u003c/p\u003e\r\n\u003col\u003e\r\n \u003cli\u003eif \u003ccode\u003estopAtNonOption\u003c/code\u003e is \u003cb\u003etrue\u003c/b\u003e then do not\r\n burst anymore of \u003ccode\u003earguments\u003c/code\u003e entries, just add each\r\n successive entry without further processing.  Otherwise, ignore\r\n \u003ccode\u003estopAtNonOption\u003c/code\u003e.\u003c/li\u003e\r\n \u003cli\u003eif the current \u003ccode\u003earguments\u003c/code\u003e entry is \"\u003cb\u003e--\u003c/b\u003e\"\r\n just add the entry to the list of processed tokens\u003c/li\u003e\r\n \u003cli\u003eif the current \u003ccode\u003earguments\u003c/code\u003e entry is \"\u003cb\u003e-\u003c/b\u003e\"\r\n just add the entry to the list of processed tokens\u003c/li\u003e\r\n \u003cli\u003eif the current \u003ccode\u003earguments\u003c/code\u003e entry is two characters\r\n in length and the first character is \"\u003cb\u003e-\u003c/b\u003e\" then check if this\r\n is a valid {@link Option} id.  If it is a valid id, then add the\r\n entry to the list of processed tokens and set the current {@link Option}\r\n member.  If it is not a valid id and \u003ccode\u003estopAtNonOption\u003c/code\u003e\r\n is true, then the remaining entries are copied to the list of\r\n processed tokens.  Otherwise, the current entry is ignored.\u003c/li\u003e\r\n \u003cli\u003eif the current \u003ccode\u003earguments\u003c/code\u003e entry is more than two\r\n characters in length and the first character is \"\u003cb\u003e-\u003c/b\u003e\" then\r\n we need to burst the entry to determine its constituents.  For more\r\n information on the bursting algorithm see\r\n {@link PosixParser#burstToken(String, boolean) burstToken}.\u003c/li\u003e\r\n \u003cli\u003eif the current \u003ccode\u003earguments\u003c/code\u003e entry is not handled\r\n by any of the previous rules, then the entry is added to the list\r\n of processed tokens.\u003c/li\u003e\r\n\u003c/ol\u003e\r\n\r\n@param options The command line {@link Options}\r\n@param arguments The command line arguments to be parsed\r\n@param stopAtNonOption Specifies whether to stop flattening\r\nwhen an non option is found.\r\n@return The flattened \u003ccode\u003earguments\u003c/code\u003e String array.\r\n",
      "diff": "",
      "extendedDetails": {}
    },
    "5fb9e5009a8cdc7366b7a762f0e43dc47decf67c": {
      "type": "Yparametermetachange",
      "commitMessage": "Add final modifier to method parameters.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/cli/trunk@1797674 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "6/5/17 7:38 PM",
      "commitName": "5fb9e5009a8cdc7366b7a762f0e43dc47decf67c",
      "commitAuthor": "Gary D. Gregory",
      "commitDateOld": "6/5/17 7:37 PM",
      "commitNameOld": "357a8b0b8f1090db29e0d541a9419f570a78457b",
      "commitAuthorOld": "Gary D. Gregory",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\r\nprotected String[] flatten(final Options options, final String[] arguments, final boolean stopAtNonOption) throws ParseException {\r\n    init();\r\n    this.options \u003d options;\r\n    final Iterator\u003cString\u003e iter \u003d Arrays.asList(arguments).iterator();\r\n    while (iter.hasNext()) {\r\n        final String token \u003d iter.next();\r\n        if (\"-\".equals(token) || \"--\".equals(token)) {\r\n            tokens.add(token);\r\n        } else if (token.startsWith(\"--\")) {\r\n            final int pos \u003d token.indexOf(\u0027\u003d\u0027);\r\n            final String opt \u003d pos \u003d\u003d -1 ? token : token.substring(0, pos);\r\n            final List\u003cString\u003e matchingOpts \u003d options.getMatchingOptions(opt);\r\n            if (matchingOpts.isEmpty()) {\r\n                processNonOptionToken(token, stopAtNonOption);\r\n            } else if (matchingOpts.size() \u003e 1) {\r\n                throw new AmbiguousOptionException(opt, matchingOpts);\r\n            } else {\r\n                currentOption \u003d options.getOption(matchingOpts.get(0));\r\n                tokens.add(\"--\" + currentOption.getLongOpt());\r\n                if (pos !\u003d -1) {\r\n                    tokens.add(token.substring(pos + 1));\r\n                }\r\n            }\r\n        } else if (token.startsWith(\"-\")) {\r\n            if (token.length() \u003d\u003d 2 || options.hasOption(token)) {\r\n                processOptionToken(token, stopAtNonOption);\r\n            } else if (!options.getMatchingOptions(token).isEmpty()) {\r\n                final List\u003cString\u003e matchingOpts \u003d options.getMatchingOptions(token);\r\n                if (matchingOpts.size() \u003e 1) {\r\n                    throw new AmbiguousOptionException(token, matchingOpts);\r\n                }\r\n                final Option opt \u003d options.getOption(matchingOpts.get(0));\r\n                processOptionToken(\"-\" + opt.getLongOpt(), stopAtNonOption);\r\n            } else {\r\n                burstToken(token, stopAtNonOption);\r\n            }\r\n        } else {\r\n            processNonOptionToken(token, stopAtNonOption);\r\n        }\r\n        gobble(iter);\r\n    }\r\n    return tokens.toArray(new String[tokens.size()]);\r\n}",
      "path": "src/main/java/org/apache/commons/cli/PosixParser.java",
      "functionStartLine": 96,
      "functionName": "flatten",
      "functionAnnotation": "@Override",
      "functionDoc": "\u003cp\u003eAn implementation of {@link Parser}\u0027s abstract\r\n{@link Parser#flatten(Options,String[],boolean) flatten} method.\u003c/p\u003e\r\n\r\n\u003cp\u003eThe following are the rules used by this flatten method.\u003c/p\u003e\r\n\u003col\u003e\r\n \u003cli\u003eif \u003ccode\u003estopAtNonOption\u003c/code\u003e is \u003cb\u003etrue\u003c/b\u003e then do not\r\n burst anymore of \u003ccode\u003earguments\u003c/code\u003e entries, just add each\r\n successive entry without further processing.  Otherwise, ignore\r\n \u003ccode\u003estopAtNonOption\u003c/code\u003e.\u003c/li\u003e\r\n \u003cli\u003eif the current \u003ccode\u003earguments\u003c/code\u003e entry is \"\u003cb\u003e--\u003c/b\u003e\"\r\n just add the entry to the list of processed tokens\u003c/li\u003e\r\n \u003cli\u003eif the current \u003ccode\u003earguments\u003c/code\u003e entry is \"\u003cb\u003e-\u003c/b\u003e\"\r\n just add the entry to the list of processed tokens\u003c/li\u003e\r\n \u003cli\u003eif the current \u003ccode\u003earguments\u003c/code\u003e entry is two characters\r\n in length and the first character is \"\u003cb\u003e-\u003c/b\u003e\" then check if this\r\n is a valid {@link Option} id.  If it is a valid id, then add the\r\n entry to the list of processed tokens and set the current {@link Option}\r\n member.  If it is not a valid id and \u003ccode\u003estopAtNonOption\u003c/code\u003e\r\n is true, then the remaining entries are copied to the list of\r\n processed tokens.  Otherwise, the current entry is ignored.\u003c/li\u003e\r\n \u003cli\u003eif the current \u003ccode\u003earguments\u003c/code\u003e entry is more than two\r\n characters in length and the first character is \"\u003cb\u003e-\u003c/b\u003e\" then\r\n we need to burst the entry to determine its constituents.  For more\r\n information on the bursting algorithm see\r\n {@link PosixParser#burstToken(String, boolean) burstToken}.\u003c/li\u003e\r\n \u003cli\u003eif the current \u003ccode\u003earguments\u003c/code\u003e entry is not handled\r\n by any of the previous rules, then the entry is added to the list\r\n of processed tokens.\u003c/li\u003e\r\n\u003c/ol\u003e\r\n\r\n@param options The command line {@link Options}\r\n@param arguments The command line arguments to be parsed\r\n@param stopAtNonOption Specifies whether to stop flattening\r\nwhen an non option is found.\r\n@return The flattened \u003ccode\u003earguments\u003c/code\u003e String array.\r\n",
      "diff": "@@ -1,44 +1,44 @@\n @Override\r\n-protected String[] flatten(Options options, String[] arguments, boolean stopAtNonOption) throws ParseException {\r\n+protected String[] flatten(final Options options, final String[] arguments, final boolean stopAtNonOption) throws ParseException {\r\n     init();\r\n     this.options \u003d options;\r\n     final Iterator\u003cString\u003e iter \u003d Arrays.asList(arguments).iterator();\r\n     while (iter.hasNext()) {\r\n         final String token \u003d iter.next();\r\n         if (\"-\".equals(token) || \"--\".equals(token)) {\r\n             tokens.add(token);\r\n         } else if (token.startsWith(\"--\")) {\r\n             final int pos \u003d token.indexOf(\u0027\u003d\u0027);\r\n             final String opt \u003d pos \u003d\u003d -1 ? token : token.substring(0, pos);\r\n             final List\u003cString\u003e matchingOpts \u003d options.getMatchingOptions(opt);\r\n             if (matchingOpts.isEmpty()) {\r\n                 processNonOptionToken(token, stopAtNonOption);\r\n             } else if (matchingOpts.size() \u003e 1) {\r\n                 throw new AmbiguousOptionException(opt, matchingOpts);\r\n             } else {\r\n                 currentOption \u003d options.getOption(matchingOpts.get(0));\r\n                 tokens.add(\"--\" + currentOption.getLongOpt());\r\n                 if (pos !\u003d -1) {\r\n                     tokens.add(token.substring(pos + 1));\r\n                 }\r\n             }\r\n         } else if (token.startsWith(\"-\")) {\r\n             if (token.length() \u003d\u003d 2 || options.hasOption(token)) {\r\n                 processOptionToken(token, stopAtNonOption);\r\n             } else if (!options.getMatchingOptions(token).isEmpty()) {\r\n                 final List\u003cString\u003e matchingOpts \u003d options.getMatchingOptions(token);\r\n                 if (matchingOpts.size() \u003e 1) {\r\n                     throw new AmbiguousOptionException(token, matchingOpts);\r\n                 }\r\n                 final Option opt \u003d options.getOption(matchingOpts.get(0));\r\n                 processOptionToken(\"-\" + opt.getLongOpt(), stopAtNonOption);\r\n             } else {\r\n                 burstToken(token, stopAtNonOption);\r\n             }\r\n         } else {\r\n             processNonOptionToken(token, stopAtNonOption);\r\n         }\r\n         gobble(iter);\r\n     }\r\n     return tokens.toArray(new String[tokens.size()]);\r\n }\n\\ No newline at end of file\n",
      "extendedDetails": {
        "oldValue": "[options-Options, arguments-String[], stopAtNonOption-boolean]",
        "newValue": "[options-Options(modifiers-final), arguments-String[](modifiers-final), stopAtNonOption-boolean(modifiers-final)]"
      }
    },
    "357a8b0b8f1090db29e0d541a9419f570a78457b": {
      "type": "Ybodychange",
      "commitMessage": "Add final modifier to local variables.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/cli/trunk@1797673 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "6/5/17 7:37 PM",
      "commitName": "357a8b0b8f1090db29e0d541a9419f570a78457b",
      "commitAuthor": "Gary D. Gregory",
      "commitDateOld": "2/16/17 10:52 AM",
      "commitNameOld": "0f56df924fabac851a111a04569f4a3d7331ef8e",
      "commitAuthorOld": "Benedikt Ritter",
      "daysBetweenCommits": 109.36,
      "commitsBetweenForRepo": 18,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\r\nprotected String[] flatten(Options options, String[] arguments, boolean stopAtNonOption) throws ParseException {\r\n    init();\r\n    this.options \u003d options;\r\n    final Iterator\u003cString\u003e iter \u003d Arrays.asList(arguments).iterator();\r\n    while (iter.hasNext()) {\r\n        final String token \u003d iter.next();\r\n        if (\"-\".equals(token) || \"--\".equals(token)) {\r\n            tokens.add(token);\r\n        } else if (token.startsWith(\"--\")) {\r\n            final int pos \u003d token.indexOf(\u0027\u003d\u0027);\r\n            final String opt \u003d pos \u003d\u003d -1 ? token : token.substring(0, pos);\r\n            final List\u003cString\u003e matchingOpts \u003d options.getMatchingOptions(opt);\r\n            if (matchingOpts.isEmpty()) {\r\n                processNonOptionToken(token, stopAtNonOption);\r\n            } else if (matchingOpts.size() \u003e 1) {\r\n                throw new AmbiguousOptionException(opt, matchingOpts);\r\n            } else {\r\n                currentOption \u003d options.getOption(matchingOpts.get(0));\r\n                tokens.add(\"--\" + currentOption.getLongOpt());\r\n                if (pos !\u003d -1) {\r\n                    tokens.add(token.substring(pos + 1));\r\n                }\r\n            }\r\n        } else if (token.startsWith(\"-\")) {\r\n            if (token.length() \u003d\u003d 2 || options.hasOption(token)) {\r\n                processOptionToken(token, stopAtNonOption);\r\n            } else if (!options.getMatchingOptions(token).isEmpty()) {\r\n                final List\u003cString\u003e matchingOpts \u003d options.getMatchingOptions(token);\r\n                if (matchingOpts.size() \u003e 1) {\r\n                    throw new AmbiguousOptionException(token, matchingOpts);\r\n                }\r\n                final Option opt \u003d options.getOption(matchingOpts.get(0));\r\n                processOptionToken(\"-\" + opt.getLongOpt(), stopAtNonOption);\r\n            } else {\r\n                burstToken(token, stopAtNonOption);\r\n            }\r\n        } else {\r\n            processNonOptionToken(token, stopAtNonOption);\r\n        }\r\n        gobble(iter);\r\n    }\r\n    return tokens.toArray(new String[tokens.size()]);\r\n}",
      "path": "src/main/java/org/apache/commons/cli/PosixParser.java",
      "functionStartLine": 96,
      "functionName": "flatten",
      "functionAnnotation": "@Override",
      "functionDoc": "\u003cp\u003eAn implementation of {@link Parser}\u0027s abstract\r\n{@link Parser#flatten(Options,String[],boolean) flatten} method.\u003c/p\u003e\r\n\r\n\u003cp\u003eThe following are the rules used by this flatten method.\u003c/p\u003e\r\n\u003col\u003e\r\n \u003cli\u003eif \u003ccode\u003estopAtNonOption\u003c/code\u003e is \u003cb\u003etrue\u003c/b\u003e then do not\r\n burst anymore of \u003ccode\u003earguments\u003c/code\u003e entries, just add each\r\n successive entry without further processing.  Otherwise, ignore\r\n \u003ccode\u003estopAtNonOption\u003c/code\u003e.\u003c/li\u003e\r\n \u003cli\u003eif the current \u003ccode\u003earguments\u003c/code\u003e entry is \"\u003cb\u003e--\u003c/b\u003e\"\r\n just add the entry to the list of processed tokens\u003c/li\u003e\r\n \u003cli\u003eif the current \u003ccode\u003earguments\u003c/code\u003e entry is \"\u003cb\u003e-\u003c/b\u003e\"\r\n just add the entry to the list of processed tokens\u003c/li\u003e\r\n \u003cli\u003eif the current \u003ccode\u003earguments\u003c/code\u003e entry is two characters\r\n in length and the first character is \"\u003cb\u003e-\u003c/b\u003e\" then check if this\r\n is a valid {@link Option} id.  If it is a valid id, then add the\r\n entry to the list of processed tokens and set the current {@link Option}\r\n member.  If it is not a valid id and \u003ccode\u003estopAtNonOption\u003c/code\u003e\r\n is true, then the remaining entries are copied to the list of\r\n processed tokens.  Otherwise, the current entry is ignored.\u003c/li\u003e\r\n \u003cli\u003eif the current \u003ccode\u003earguments\u003c/code\u003e entry is more than two\r\n characters in length and the first character is \"\u003cb\u003e-\u003c/b\u003e\" then\r\n we need to burst the entry to determine its constituents.  For more\r\n information on the bursting algorithm see\r\n {@link PosixParser#burstToken(String, boolean) burstToken}.\u003c/li\u003e\r\n \u003cli\u003eif the current \u003ccode\u003earguments\u003c/code\u003e entry is not handled\r\n by any of the previous rules, then the entry is added to the list\r\n of processed tokens.\u003c/li\u003e\r\n\u003c/ol\u003e\r\n\r\n@param options The command line {@link Options}\r\n@param arguments The command line arguments to be parsed\r\n@param stopAtNonOption Specifies whether to stop flattening\r\nwhen an non option is found.\r\n@return The flattened \u003ccode\u003earguments\u003c/code\u003e String array.\r\n",
      "diff": "@@ -1,44 +1,44 @@\n @Override\r\n protected String[] flatten(Options options, String[] arguments, boolean stopAtNonOption) throws ParseException {\r\n     init();\r\n     this.options \u003d options;\r\n-    Iterator\u003cString\u003e iter \u003d Arrays.asList(arguments).iterator();\r\n+    final Iterator\u003cString\u003e iter \u003d Arrays.asList(arguments).iterator();\r\n     while (iter.hasNext()) {\r\n-        String token \u003d iter.next();\r\n+        final String token \u003d iter.next();\r\n         if (\"-\".equals(token) || \"--\".equals(token)) {\r\n             tokens.add(token);\r\n         } else if (token.startsWith(\"--\")) {\r\n-            int pos \u003d token.indexOf(\u0027\u003d\u0027);\r\n-            String opt \u003d pos \u003d\u003d -1 ? token : token.substring(0, pos);\r\n-            List\u003cString\u003e matchingOpts \u003d options.getMatchingOptions(opt);\r\n+            final int pos \u003d token.indexOf(\u0027\u003d\u0027);\r\n+            final String opt \u003d pos \u003d\u003d -1 ? token : token.substring(0, pos);\r\n+            final List\u003cString\u003e matchingOpts \u003d options.getMatchingOptions(opt);\r\n             if (matchingOpts.isEmpty()) {\r\n                 processNonOptionToken(token, stopAtNonOption);\r\n             } else if (matchingOpts.size() \u003e 1) {\r\n                 throw new AmbiguousOptionException(opt, matchingOpts);\r\n             } else {\r\n                 currentOption \u003d options.getOption(matchingOpts.get(0));\r\n                 tokens.add(\"--\" + currentOption.getLongOpt());\r\n                 if (pos !\u003d -1) {\r\n                     tokens.add(token.substring(pos + 1));\r\n                 }\r\n             }\r\n         } else if (token.startsWith(\"-\")) {\r\n             if (token.length() \u003d\u003d 2 || options.hasOption(token)) {\r\n                 processOptionToken(token, stopAtNonOption);\r\n             } else if (!options.getMatchingOptions(token).isEmpty()) {\r\n-                List\u003cString\u003e matchingOpts \u003d options.getMatchingOptions(token);\r\n+                final List\u003cString\u003e matchingOpts \u003d options.getMatchingOptions(token);\r\n                 if (matchingOpts.size() \u003e 1) {\r\n                     throw new AmbiguousOptionException(token, matchingOpts);\r\n                 }\r\n-                Option opt \u003d options.getOption(matchingOpts.get(0));\r\n+                final Option opt \u003d options.getOption(matchingOpts.get(0));\r\n                 processOptionToken(\"-\" + opt.getLongOpt(), stopAtNonOption);\r\n             } else {\r\n                 burstToken(token, stopAtNonOption);\r\n             }\r\n         } else {\r\n             processNonOptionToken(token, stopAtNonOption);\r\n         }\r\n         gobble(iter);\r\n     }\r\n     return tokens.toArray(new String[tokens.size()]);\r\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "700f05292777f33b5c349ac2b4f83168fd1ed888": {
      "type": "Ybodychange",
      "commitMessage": "Statement unnecessarily nested within else clause.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/cli/trunk@1677451 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "5/3/15 8:09 PM",
      "commitName": "700f05292777f33b5c349ac2b4f83168fd1ed888",
      "commitAuthor": "Gary D. Gregory",
      "commitDateOld": "5/3/15 5:27 PM",
      "commitNameOld": "10090594827c3c90b9c0a5c8288cda448b0ce10c",
      "commitAuthorOld": "Benedikt Ritter",
      "daysBetweenCommits": 0.11,
      "commitsBetweenForRepo": 4,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\r\nprotected String[] flatten(Options options, String[] arguments, boolean stopAtNonOption) throws ParseException {\r\n    init();\r\n    this.options \u003d options;\r\n    Iterator\u003cString\u003e iter \u003d Arrays.asList(arguments).iterator();\r\n    while (iter.hasNext()) {\r\n        String token \u003d iter.next();\r\n        if (\"-\".equals(token) || \"--\".equals(token)) {\r\n            tokens.add(token);\r\n        } else if (token.startsWith(\"--\")) {\r\n            int pos \u003d token.indexOf(\u0027\u003d\u0027);\r\n            String opt \u003d pos \u003d\u003d -1 ? token : token.substring(0, pos);\r\n            List\u003cString\u003e matchingOpts \u003d options.getMatchingOptions(opt);\r\n            if (matchingOpts.isEmpty()) {\r\n                processNonOptionToken(token, stopAtNonOption);\r\n            } else if (matchingOpts.size() \u003e 1) {\r\n                throw new AmbiguousOptionException(opt, matchingOpts);\r\n            } else {\r\n                currentOption \u003d options.getOption(matchingOpts.get(0));\r\n                tokens.add(\"--\" + currentOption.getLongOpt());\r\n                if (pos !\u003d -1) {\r\n                    tokens.add(token.substring(pos + 1));\r\n                }\r\n            }\r\n        } else if (token.startsWith(\"-\")) {\r\n            if (token.length() \u003d\u003d 2 || options.hasOption(token)) {\r\n                processOptionToken(token, stopAtNonOption);\r\n            } else if (!options.getMatchingOptions(token).isEmpty()) {\r\n                List\u003cString\u003e matchingOpts \u003d options.getMatchingOptions(token);\r\n                if (matchingOpts.size() \u003e 1) {\r\n                    throw new AmbiguousOptionException(token, matchingOpts);\r\n                }\r\n                Option opt \u003d options.getOption(matchingOpts.get(0));\r\n                processOptionToken(\"-\" + opt.getLongOpt(), stopAtNonOption);\r\n            } else {\r\n                burstToken(token, stopAtNonOption);\r\n            }\r\n        } else {\r\n            processNonOptionToken(token, stopAtNonOption);\r\n        }\r\n        gobble(iter);\r\n    }\r\n    return tokens.toArray(new String[tokens.size()]);\r\n}",
      "path": "src/main/java/org/apache/commons/cli/PosixParser.java",
      "functionStartLine": 96,
      "functionName": "flatten",
      "functionAnnotation": "@Override",
      "functionDoc": "\u003cp\u003eAn implementation of {@link Parser}\u0027s abstract\r\n{@link Parser#flatten(Options,String[],boolean) flatten} method.\u003c/p\u003e\r\n\r\n\u003cp\u003eThe following are the rules used by this flatten method.\u003c/p\u003e\r\n\u003col\u003e\r\n \u003cli\u003eif \u003ccode\u003estopAtNonOption\u003c/code\u003e is \u003cb\u003etrue\u003c/b\u003e then do not\r\n burst anymore of \u003ccode\u003earguments\u003c/code\u003e entries, just add each\r\n successive entry without further processing.  Otherwise, ignore\r\n \u003ccode\u003estopAtNonOption\u003c/code\u003e.\u003c/li\u003e\r\n \u003cli\u003eif the current \u003ccode\u003earguments\u003c/code\u003e entry is \"\u003cb\u003e--\u003c/b\u003e\"\r\n just add the entry to the list of processed tokens\u003c/li\u003e\r\n \u003cli\u003eif the current \u003ccode\u003earguments\u003c/code\u003e entry is \"\u003cb\u003e-\u003c/b\u003e\"\r\n just add the entry to the list of processed tokens\u003c/li\u003e\r\n \u003cli\u003eif the current \u003ccode\u003earguments\u003c/code\u003e entry is two characters\r\n in length and the first character is \"\u003cb\u003e-\u003c/b\u003e\" then check if this\r\n is a valid {@link Option} id.  If it is a valid id, then add the\r\n entry to the list of processed tokens and set the current {@link Option}\r\n member.  If it is not a valid id and \u003ccode\u003estopAtNonOption\u003c/code\u003e\r\n is true, then the remaining entries are copied to the list of\r\n processed tokens.  Otherwise, the current entry is ignored.\u003c/li\u003e\r\n \u003cli\u003eif the current \u003ccode\u003earguments\u003c/code\u003e entry is more than two\r\n characters in length and the first character is \"\u003cb\u003e-\u003c/b\u003e\" then\r\n we need to burst the entry to determine its constituents.  For more\r\n information on the bursting algorithm see\r\n {@link PosixParser#burstToken(String, boolean) burstToken}.\u003c/li\u003e\r\n \u003cli\u003eif the current \u003ccode\u003earguments\u003c/code\u003e entry is not handled\r\n by any of the previous rules, then the entry is added to the list\r\n of processed tokens.\u003c/li\u003e\r\n\u003c/ol\u003e\r\n\r\n@param options The command line {@link Options}\r\n@param arguments The command line arguments to be parsed\r\n@param stopAtNonOption Specifies whether to stop flattening\r\nwhen an non option is found.\r\n@return The flattened \u003ccode\u003earguments\u003c/code\u003e String array.\r\n",
      "diff": "@@ -1,45 +1,44 @@\n @Override\r\n protected String[] flatten(Options options, String[] arguments, boolean stopAtNonOption) throws ParseException {\r\n     init();\r\n     this.options \u003d options;\r\n     Iterator\u003cString\u003e iter \u003d Arrays.asList(arguments).iterator();\r\n     while (iter.hasNext()) {\r\n         String token \u003d iter.next();\r\n         if (\"-\".equals(token) || \"--\".equals(token)) {\r\n             tokens.add(token);\r\n         } else if (token.startsWith(\"--\")) {\r\n             int pos \u003d token.indexOf(\u0027\u003d\u0027);\r\n             String opt \u003d pos \u003d\u003d -1 ? token : token.substring(0, pos);\r\n             List\u003cString\u003e matchingOpts \u003d options.getMatchingOptions(opt);\r\n             if (matchingOpts.isEmpty()) {\r\n                 processNonOptionToken(token, stopAtNonOption);\r\n             } else if (matchingOpts.size() \u003e 1) {\r\n                 throw new AmbiguousOptionException(opt, matchingOpts);\r\n             } else {\r\n                 currentOption \u003d options.getOption(matchingOpts.get(0));\r\n                 tokens.add(\"--\" + currentOption.getLongOpt());\r\n                 if (pos !\u003d -1) {\r\n                     tokens.add(token.substring(pos + 1));\r\n                 }\r\n             }\r\n         } else if (token.startsWith(\"-\")) {\r\n             if (token.length() \u003d\u003d 2 || options.hasOption(token)) {\r\n                 processOptionToken(token, stopAtNonOption);\r\n             } else if (!options.getMatchingOptions(token).isEmpty()) {\r\n                 List\u003cString\u003e matchingOpts \u003d options.getMatchingOptions(token);\r\n                 if (matchingOpts.size() \u003e 1) {\r\n                     throw new AmbiguousOptionException(token, matchingOpts);\r\n-                } else {\r\n-                    Option opt \u003d options.getOption(matchingOpts.get(0));\r\n-                    processOptionToken(\"-\" + opt.getLongOpt(), stopAtNonOption);\r\n                 }\r\n+                Option opt \u003d options.getOption(matchingOpts.get(0));\r\n+                processOptionToken(\"-\" + opt.getLongOpt(), stopAtNonOption);\r\n             } else {\r\n                 burstToken(token, stopAtNonOption);\r\n             }\r\n         } else {\r\n             processNonOptionToken(token, stopAtNonOption);\r\n         }\r\n         gobble(iter);\r\n     }\r\n     return tokens.toArray(new String[tokens.size()]);\r\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "10090594827c3c90b9c0a5c8288cda448b0ce10c": {
      "type": "Ydocchange",
      "commitMessage": "Make doclint happy\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/cli/trunk@1677406 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "5/3/15 5:27 PM",
      "commitName": "10090594827c3c90b9c0a5c8288cda448b0ce10c",
      "commitAuthor": "Benedikt Ritter",
      "commitDateOld": "5/3/15 4:57 PM",
      "commitNameOld": "6b87d290954c4594fc69a3a0b85fff12490cfde5",
      "commitAuthorOld": "Benedikt Ritter",
      "daysBetweenCommits": 0.02,
      "commitsBetweenForRepo": 4,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\r\nprotected String[] flatten(Options options, String[] arguments, boolean stopAtNonOption) throws ParseException {\r\n    init();\r\n    this.options \u003d options;\r\n    Iterator\u003cString\u003e iter \u003d Arrays.asList(arguments).iterator();\r\n    while (iter.hasNext()) {\r\n        String token \u003d iter.next();\r\n        if (\"-\".equals(token) || \"--\".equals(token)) {\r\n            tokens.add(token);\r\n        } else if (token.startsWith(\"--\")) {\r\n            int pos \u003d token.indexOf(\u0027\u003d\u0027);\r\n            String opt \u003d pos \u003d\u003d -1 ? token : token.substring(0, pos);\r\n            List\u003cString\u003e matchingOpts \u003d options.getMatchingOptions(opt);\r\n            if (matchingOpts.isEmpty()) {\r\n                processNonOptionToken(token, stopAtNonOption);\r\n            } else if (matchingOpts.size() \u003e 1) {\r\n                throw new AmbiguousOptionException(opt, matchingOpts);\r\n            } else {\r\n                currentOption \u003d options.getOption(matchingOpts.get(0));\r\n                tokens.add(\"--\" + currentOption.getLongOpt());\r\n                if (pos !\u003d -1) {\r\n                    tokens.add(token.substring(pos + 1));\r\n                }\r\n            }\r\n        } else if (token.startsWith(\"-\")) {\r\n            if (token.length() \u003d\u003d 2 || options.hasOption(token)) {\r\n                processOptionToken(token, stopAtNonOption);\r\n            } else if (!options.getMatchingOptions(token).isEmpty()) {\r\n                List\u003cString\u003e matchingOpts \u003d options.getMatchingOptions(token);\r\n                if (matchingOpts.size() \u003e 1) {\r\n                    throw new AmbiguousOptionException(token, matchingOpts);\r\n                } else {\r\n                    Option opt \u003d options.getOption(matchingOpts.get(0));\r\n                    processOptionToken(\"-\" + opt.getLongOpt(), stopAtNonOption);\r\n                }\r\n            } else {\r\n                burstToken(token, stopAtNonOption);\r\n            }\r\n        } else {\r\n            processNonOptionToken(token, stopAtNonOption);\r\n        }\r\n        gobble(iter);\r\n    }\r\n    return tokens.toArray(new String[tokens.size()]);\r\n}",
      "path": "src/main/java/org/apache/commons/cli/PosixParser.java",
      "functionStartLine": 96,
      "functionName": "flatten",
      "functionAnnotation": "@Override",
      "functionDoc": "\u003cp\u003eAn implementation of {@link Parser}\u0027s abstract\r\n{@link Parser#flatten(Options,String[],boolean) flatten} method.\u003c/p\u003e\r\n\r\n\u003cp\u003eThe following are the rules used by this flatten method.\u003c/p\u003e\r\n\u003col\u003e\r\n \u003cli\u003eif \u003ccode\u003estopAtNonOption\u003c/code\u003e is \u003cb\u003etrue\u003c/b\u003e then do not\r\n burst anymore of \u003ccode\u003earguments\u003c/code\u003e entries, just add each\r\n successive entry without further processing.  Otherwise, ignore\r\n \u003ccode\u003estopAtNonOption\u003c/code\u003e.\u003c/li\u003e\r\n \u003cli\u003eif the current \u003ccode\u003earguments\u003c/code\u003e entry is \"\u003cb\u003e--\u003c/b\u003e\"\r\n just add the entry to the list of processed tokens\u003c/li\u003e\r\n \u003cli\u003eif the current \u003ccode\u003earguments\u003c/code\u003e entry is \"\u003cb\u003e-\u003c/b\u003e\"\r\n just add the entry to the list of processed tokens\u003c/li\u003e\r\n \u003cli\u003eif the current \u003ccode\u003earguments\u003c/code\u003e entry is two characters\r\n in length and the first character is \"\u003cb\u003e-\u003c/b\u003e\" then check if this\r\n is a valid {@link Option} id.  If it is a valid id, then add the\r\n entry to the list of processed tokens and set the current {@link Option}\r\n member.  If it is not a valid id and \u003ccode\u003estopAtNonOption\u003c/code\u003e\r\n is true, then the remaining entries are copied to the list of\r\n processed tokens.  Otherwise, the current entry is ignored.\u003c/li\u003e\r\n \u003cli\u003eif the current \u003ccode\u003earguments\u003c/code\u003e entry is more than two\r\n characters in length and the first character is \"\u003cb\u003e-\u003c/b\u003e\" then\r\n we need to burst the entry to determine its constituents.  For more\r\n information on the bursting algorithm see\r\n {@link PosixParser#burstToken(String, boolean) burstToken}.\u003c/li\u003e\r\n \u003cli\u003eif the current \u003ccode\u003earguments\u003c/code\u003e entry is not handled\r\n by any of the previous rules, then the entry is added to the list\r\n of processed tokens.\u003c/li\u003e\r\n\u003c/ol\u003e\r\n\r\n@param options The command line {@link Options}\r\n@param arguments The command line arguments to be parsed\r\n@param stopAtNonOption Specifies whether to stop flattening\r\nwhen an non option is found.\r\n@return The flattened \u003ccode\u003earguments\u003c/code\u003e String array.\r\n",
      "diff": "",
      "extendedDetails": {
        "oldValue": "\u003cp\u003eAn implementation of {@link Parser}\u0027s abstract\r\n{@link Parser#flatten(Options,String[],boolean) flatten} method.\u003c/p\u003e\r\n\r\n\u003cp\u003eThe following are the rules used by this flatten method.\r\n\u003col\u003e\r\n \u003cli\u003eif \u003ccode\u003estopAtNonOption\u003c/code\u003e is \u003cb\u003etrue\u003c/b\u003e then do not\r\n burst anymore of \u003ccode\u003earguments\u003c/code\u003e entries, just add each\r\n successive entry without further processing.  Otherwise, ignore\r\n \u003ccode\u003estopAtNonOption\u003c/code\u003e.\u003c/li\u003e\r\n \u003cli\u003eif the current \u003ccode\u003earguments\u003c/code\u003e entry is \"\u003cb\u003e--\u003c/b\u003e\"\r\n just add the entry to the list of processed tokens\u003c/li\u003e\r\n \u003cli\u003eif the current \u003ccode\u003earguments\u003c/code\u003e entry is \"\u003cb\u003e-\u003c/b\u003e\"\r\n just add the entry to the list of processed tokens\u003c/li\u003e\r\n \u003cli\u003eif the current \u003ccode\u003earguments\u003c/code\u003e entry is two characters\r\n in length and the first character is \"\u003cb\u003e-\u003c/b\u003e\" then check if this\r\n is a valid {@link Option} id.  If it is a valid id, then add the\r\n entry to the list of processed tokens and set the current {@link Option}\r\n member.  If it is not a valid id and \u003ccode\u003estopAtNonOption\u003c/code\u003e\r\n is true, then the remaining entries are copied to the list of\r\n processed tokens.  Otherwise, the current entry is ignored.\u003c/li\u003e\r\n \u003cli\u003eif the current \u003ccode\u003earguments\u003c/code\u003e entry is more than two\r\n characters in length and the first character is \"\u003cb\u003e-\u003c/b\u003e\" then\r\n we need to burst the entry to determine its constituents.  For more\r\n information on the bursting algorithm see\r\n {@link PosixParser#burstToken(String, boolean) burstToken}.\u003c/li\u003e\r\n \u003cli\u003eif the current \u003ccode\u003earguments\u003c/code\u003e entry is not handled\r\n by any of the previous rules, then the entry is added to the list\r\n of processed tokens.\u003c/li\u003e\r\n\u003c/ol\u003e\r\n\u003c/p\u003e\r\n\r\n@param options The command line {@link Options}\r\n@param arguments The command line arguments to be parsed\r\n@param stopAtNonOption Specifies whether to stop flattening\r\nwhen an non option is found.\r\n@return The flattened \u003ccode\u003earguments\u003c/code\u003e String array.\r\n",
        "newValue": "\u003cp\u003eAn implementation of {@link Parser}\u0027s abstract\r\n{@link Parser#flatten(Options,String[],boolean) flatten} method.\u003c/p\u003e\r\n\r\n\u003cp\u003eThe following are the rules used by this flatten method.\u003c/p\u003e\r\n\u003col\u003e\r\n \u003cli\u003eif \u003ccode\u003estopAtNonOption\u003c/code\u003e is \u003cb\u003etrue\u003c/b\u003e then do not\r\n burst anymore of \u003ccode\u003earguments\u003c/code\u003e entries, just add each\r\n successive entry without further processing.  Otherwise, ignore\r\n \u003ccode\u003estopAtNonOption\u003c/code\u003e.\u003c/li\u003e\r\n \u003cli\u003eif the current \u003ccode\u003earguments\u003c/code\u003e entry is \"\u003cb\u003e--\u003c/b\u003e\"\r\n just add the entry to the list of processed tokens\u003c/li\u003e\r\n \u003cli\u003eif the current \u003ccode\u003earguments\u003c/code\u003e entry is \"\u003cb\u003e-\u003c/b\u003e\"\r\n just add the entry to the list of processed tokens\u003c/li\u003e\r\n \u003cli\u003eif the current \u003ccode\u003earguments\u003c/code\u003e entry is two characters\r\n in length and the first character is \"\u003cb\u003e-\u003c/b\u003e\" then check if this\r\n is a valid {@link Option} id.  If it is a valid id, then add the\r\n entry to the list of processed tokens and set the current {@link Option}\r\n member.  If it is not a valid id and \u003ccode\u003estopAtNonOption\u003c/code\u003e\r\n is true, then the remaining entries are copied to the list of\r\n processed tokens.  Otherwise, the current entry is ignored.\u003c/li\u003e\r\n \u003cli\u003eif the current \u003ccode\u003earguments\u003c/code\u003e entry is more than two\r\n characters in length and the first character is \"\u003cb\u003e-\u003c/b\u003e\" then\r\n we need to burst the entry to determine its constituents.  For more\r\n information on the bursting algorithm see\r\n {@link PosixParser#burstToken(String, boolean) burstToken}.\u003c/li\u003e\r\n \u003cli\u003eif the current \u003ccode\u003earguments\u003c/code\u003e entry is not handled\r\n by any of the previous rules, then the entry is added to the list\r\n of processed tokens.\u003c/li\u003e\r\n\u003c/ol\u003e\r\n\r\n@param options The command line {@link Options}\r\n@param arguments The command line arguments to be parsed\r\n@param stopAtNonOption Specifies whether to stop flattening\r\nwhen an non option is found.\r\n@return The flattened \u003ccode\u003earguments\u003c/code\u003e String array.\r\n"
      }
    },
    "445ddaaa89bdcd003645b02b600fde1d3730d715": {
      "type": "Yannotationchange",
      "commitMessage": "Missing @Override\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/cli/trunk@1440517 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "1/30/13 6:51 PM",
      "commitName": "445ddaaa89bdcd003645b02b600fde1d3730d715",
      "commitAuthor": "Sebastian Bazley",
      "commitDateOld": "1/29/13 5:31 PM",
      "commitNameOld": "1b1ac53a5590c862f64c39b24d8b22c4e5bb2210",
      "commitAuthorOld": "Thomas Neidhart",
      "daysBetweenCommits": 1.06,
      "commitsBetweenForRepo": 14,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\r\nprotected String[] flatten(Options options, String[] arguments, boolean stopAtNonOption) throws ParseException {\r\n    init();\r\n    this.options \u003d options;\r\n    Iterator\u003cString\u003e iter \u003d Arrays.asList(arguments).iterator();\r\n    while (iter.hasNext()) {\r\n        String token \u003d iter.next();\r\n        if (\"-\".equals(token) || \"--\".equals(token)) {\r\n            tokens.add(token);\r\n        } else if (token.startsWith(\"--\")) {\r\n            int pos \u003d token.indexOf(\u0027\u003d\u0027);\r\n            String opt \u003d pos \u003d\u003d -1 ? token : token.substring(0, pos);\r\n            List\u003cString\u003e matchingOpts \u003d options.getMatchingOptions(opt);\r\n            if (matchingOpts.isEmpty()) {\r\n                processNonOptionToken(token, stopAtNonOption);\r\n            } else if (matchingOpts.size() \u003e 1) {\r\n                throw new AmbiguousOptionException(opt, matchingOpts);\r\n            } else {\r\n                currentOption \u003d options.getOption(matchingOpts.get(0));\r\n                tokens.add(\"--\" + currentOption.getLongOpt());\r\n                if (pos !\u003d -1) {\r\n                    tokens.add(token.substring(pos + 1));\r\n                }\r\n            }\r\n        } else if (token.startsWith(\"-\")) {\r\n            if (token.length() \u003d\u003d 2 || options.hasOption(token)) {\r\n                processOptionToken(token, stopAtNonOption);\r\n            } else if (!options.getMatchingOptions(token).isEmpty()) {\r\n                List\u003cString\u003e matchingOpts \u003d options.getMatchingOptions(token);\r\n                if (matchingOpts.size() \u003e 1) {\r\n                    throw new AmbiguousOptionException(token, matchingOpts);\r\n                } else {\r\n                    Option opt \u003d options.getOption(matchingOpts.get(0));\r\n                    processOptionToken(\"-\" + opt.getLongOpt(), stopAtNonOption);\r\n                }\r\n            } else {\r\n                burstToken(token, stopAtNonOption);\r\n            }\r\n        } else {\r\n            processNonOptionToken(token, stopAtNonOption);\r\n        }\r\n        gobble(iter);\r\n    }\r\n    return tokens.toArray(new String[tokens.size()]);\r\n}",
      "path": "src/main/java/org/apache/commons/cli/PosixParser.java",
      "functionStartLine": 98,
      "functionName": "flatten",
      "functionAnnotation": "@Override",
      "functionDoc": "\u003cp\u003eAn implementation of {@link Parser}\u0027s abstract\r\n{@link Parser#flatten(Options,String[],boolean) flatten} method.\u003c/p\u003e\r\n\r\n\u003cp\u003eThe following are the rules used by this flatten method.\r\n\u003col\u003e\r\n \u003cli\u003eif \u003ccode\u003estopAtNonOption\u003c/code\u003e is \u003cb\u003etrue\u003c/b\u003e then do not\r\n burst anymore of \u003ccode\u003earguments\u003c/code\u003e entries, just add each\r\n successive entry without further processing.  Otherwise, ignore\r\n \u003ccode\u003estopAtNonOption\u003c/code\u003e.\u003c/li\u003e\r\n \u003cli\u003eif the current \u003ccode\u003earguments\u003c/code\u003e entry is \"\u003cb\u003e--\u003c/b\u003e\"\r\n just add the entry to the list of processed tokens\u003c/li\u003e\r\n \u003cli\u003eif the current \u003ccode\u003earguments\u003c/code\u003e entry is \"\u003cb\u003e-\u003c/b\u003e\"\r\n just add the entry to the list of processed tokens\u003c/li\u003e\r\n \u003cli\u003eif the current \u003ccode\u003earguments\u003c/code\u003e entry is two characters\r\n in length and the first character is \"\u003cb\u003e-\u003c/b\u003e\" then check if this\r\n is a valid {@link Option} id.  If it is a valid id, then add the\r\n entry to the list of processed tokens and set the current {@link Option}\r\n member.  If it is not a valid id and \u003ccode\u003estopAtNonOption\u003c/code\u003e\r\n is true, then the remaining entries are copied to the list of\r\n processed tokens.  Otherwise, the current entry is ignored.\u003c/li\u003e\r\n \u003cli\u003eif the current \u003ccode\u003earguments\u003c/code\u003e entry is more than two\r\n characters in length and the first character is \"\u003cb\u003e-\u003c/b\u003e\" then\r\n we need to burst the entry to determine its constituents.  For more\r\n information on the bursting algorithm see\r\n {@link PosixParser#burstToken(String, boolean) burstToken}.\u003c/li\u003e\r\n \u003cli\u003eif the current \u003ccode\u003earguments\u003c/code\u003e entry is not handled\r\n by any of the previous rules, then the entry is added to the list\r\n of processed tokens.\u003c/li\u003e\r\n\u003c/ol\u003e\r\n\u003c/p\u003e\r\n\r\n@param options The command line {@link Options}\r\n@param arguments The command line arguments to be parsed\r\n@param stopAtNonOption Specifies whether to stop flattening\r\nwhen an non option is found.\r\n@return The flattened \u003ccode\u003earguments\u003c/code\u003e String array.\r\n",
      "diff": "@@ -1,44 +1,45 @@\n+@Override\r\n protected String[] flatten(Options options, String[] arguments, boolean stopAtNonOption) throws ParseException {\r\n     init();\r\n     this.options \u003d options;\r\n     Iterator\u003cString\u003e iter \u003d Arrays.asList(arguments).iterator();\r\n     while (iter.hasNext()) {\r\n         String token \u003d iter.next();\r\n         if (\"-\".equals(token) || \"--\".equals(token)) {\r\n             tokens.add(token);\r\n         } else if (token.startsWith(\"--\")) {\r\n             int pos \u003d token.indexOf(\u0027\u003d\u0027);\r\n             String opt \u003d pos \u003d\u003d -1 ? token : token.substring(0, pos);\r\n             List\u003cString\u003e matchingOpts \u003d options.getMatchingOptions(opt);\r\n             if (matchingOpts.isEmpty()) {\r\n                 processNonOptionToken(token, stopAtNonOption);\r\n             } else if (matchingOpts.size() \u003e 1) {\r\n                 throw new AmbiguousOptionException(opt, matchingOpts);\r\n             } else {\r\n                 currentOption \u003d options.getOption(matchingOpts.get(0));\r\n                 tokens.add(\"--\" + currentOption.getLongOpt());\r\n                 if (pos !\u003d -1) {\r\n                     tokens.add(token.substring(pos + 1));\r\n                 }\r\n             }\r\n         } else if (token.startsWith(\"-\")) {\r\n             if (token.length() \u003d\u003d 2 || options.hasOption(token)) {\r\n                 processOptionToken(token, stopAtNonOption);\r\n             } else if (!options.getMatchingOptions(token).isEmpty()) {\r\n                 List\u003cString\u003e matchingOpts \u003d options.getMatchingOptions(token);\r\n                 if (matchingOpts.size() \u003e 1) {\r\n                     throw new AmbiguousOptionException(token, matchingOpts);\r\n                 } else {\r\n                     Option opt \u003d options.getOption(matchingOpts.get(0));\r\n                     processOptionToken(\"-\" + opt.getLongOpt(), stopAtNonOption);\r\n                 }\r\n             } else {\r\n                 burstToken(token, stopAtNonOption);\r\n             }\r\n         } else {\r\n             processNonOptionToken(token, stopAtNonOption);\r\n         }\r\n         gobble(iter);\r\n     }\r\n     return tokens.toArray(new String[tokens.size()]);\r\n }\n\\ No newline at end of file\n",
      "extendedDetails": {
        "oldValue": "",
        "newValue": "@Override"
      }
    },
    "3936da9d3fe37bcd20dd37216d82608e5917be07": {
      "type": "Ybodychange",
      "commitMessage": "Minor syntax changes\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/cli/trunk@1403792 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "10/30/12 7:24 PM",
      "commitName": "3936da9d3fe37bcd20dd37216d82608e5917be07",
      "commitAuthor": "Emmanuel Bourg",
      "commitDateOld": "6/16/10 12:45 PM",
      "commitNameOld": "1596f3bbe57986361da4ac1a23634dd5b00d10df",
      "commitAuthorOld": "Emmanuel Bourg",
      "daysBetweenCommits": 867.32,
      "commitsBetweenForRepo": 54,
      "commitsBetweenForFile": 1,
      "actualSource": "protected String[] flatten(Options options, String[] arguments, boolean stopAtNonOption) throws ParseException {\r\n    init();\r\n    this.options \u003d options;\r\n    Iterator\u003cString\u003e iter \u003d Arrays.asList(arguments).iterator();\r\n    while (iter.hasNext()) {\r\n        String token \u003d iter.next();\r\n        if (\"-\".equals(token) || \"--\".equals(token)) {\r\n            tokens.add(token);\r\n        } else if (token.startsWith(\"--\")) {\r\n            int pos \u003d token.indexOf(\u0027\u003d\u0027);\r\n            String opt \u003d pos \u003d\u003d -1 ? token : token.substring(0, pos);\r\n            List\u003cString\u003e matchingOpts \u003d options.getMatchingOptions(opt);\r\n            if (matchingOpts.isEmpty()) {\r\n                processNonOptionToken(token, stopAtNonOption);\r\n            } else if (matchingOpts.size() \u003e 1) {\r\n                throw new AmbiguousOptionException(opt, matchingOpts);\r\n            } else {\r\n                currentOption \u003d options.getOption(matchingOpts.get(0));\r\n                tokens.add(\"--\" + currentOption.getLongOpt());\r\n                if (pos !\u003d -1) {\r\n                    tokens.add(token.substring(pos + 1));\r\n                }\r\n            }\r\n        } else if (token.startsWith(\"-\")) {\r\n            if (token.length() \u003d\u003d 2 || options.hasOption(token)) {\r\n                processOptionToken(token, stopAtNonOption);\r\n            } else if (!options.getMatchingOptions(token).isEmpty()) {\r\n                List\u003cString\u003e matchingOpts \u003d options.getMatchingOptions(token);\r\n                if (matchingOpts.size() \u003e 1) {\r\n                    throw new AmbiguousOptionException(token, matchingOpts);\r\n                } else {\r\n                    Option opt \u003d options.getOption(matchingOpts.get(0));\r\n                    processOptionToken(\"-\" + opt.getLongOpt(), stopAtNonOption);\r\n                }\r\n            } else {\r\n                burstToken(token, stopAtNonOption);\r\n            }\r\n        } else {\r\n            processNonOptionToken(token, stopAtNonOption);\r\n        }\r\n        gobble(iter);\r\n    }\r\n    return tokens.toArray(new String[tokens.size()]);\r\n}",
      "path": "src/main/java/org/apache/commons/cli/PosixParser.java",
      "functionStartLine": 96,
      "functionName": "flatten",
      "functionAnnotation": "",
      "functionDoc": "\u003cp\u003eAn implementation of {@link Parser}\u0027s abstract\r\n{@link Parser#flatten(Options,String[],boolean) flatten} method.\u003c/p\u003e\r\n\r\n\u003cp\u003eThe following are the rules used by this flatten method.\r\n\u003col\u003e\r\n \u003cli\u003eif \u003ccode\u003estopAtNonOption\u003c/code\u003e is \u003cb\u003etrue\u003c/b\u003e then do not\r\n burst anymore of \u003ccode\u003earguments\u003c/code\u003e entries, just add each\r\n successive entry without further processing.  Otherwise, ignore\r\n \u003ccode\u003estopAtNonOption\u003c/code\u003e.\u003c/li\u003e\r\n \u003cli\u003eif the current \u003ccode\u003earguments\u003c/code\u003e entry is \"\u003cb\u003e--\u003c/b\u003e\"\r\n just add the entry to the list of processed tokens\u003c/li\u003e\r\n \u003cli\u003eif the current \u003ccode\u003earguments\u003c/code\u003e entry is \"\u003cb\u003e-\u003c/b\u003e\"\r\n just add the entry to the list of processed tokens\u003c/li\u003e\r\n \u003cli\u003eif the current \u003ccode\u003earguments\u003c/code\u003e entry is two characters\r\n in length and the first character is \"\u003cb\u003e-\u003c/b\u003e\" then check if this\r\n is a valid {@link Option} id.  If it is a valid id, then add the\r\n entry to the list of processed tokens and set the current {@link Option}\r\n member.  If it is not a valid id and \u003ccode\u003estopAtNonOption\u003c/code\u003e\r\n is true, then the remaining entries are copied to the list of\r\n processed tokens.  Otherwise, the current entry is ignored.\u003c/li\u003e\r\n \u003cli\u003eif the current \u003ccode\u003earguments\u003c/code\u003e entry is more than two\r\n characters in length and the first character is \"\u003cb\u003e-\u003c/b\u003e\" then\r\n we need to burst the entry to determine its constituents.  For more\r\n information on the bursting algorithm see\r\n {@link PosixParser#burstToken(String, boolean) burstToken}.\u003c/li\u003e\r\n \u003cli\u003eif the current \u003ccode\u003earguments\u003c/code\u003e entry is not handled\r\n by any of the previous rules, then the entry is added to the list\r\n of processed tokens.\u003c/li\u003e\r\n\u003c/ol\u003e\r\n\u003c/p\u003e\r\n\r\n@param options The command line {@link Options}\r\n@param arguments The command line arguments to be parsed\r\n@param stopAtNonOption Specifies whether to stop flattening\r\nwhen an non option is found.\r\n@return The flattened \u003ccode\u003earguments\u003c/code\u003e String array.\r\n",
      "diff": "@@ -1,44 +1,44 @@\n protected String[] flatten(Options options, String[] arguments, boolean stopAtNonOption) throws ParseException {\r\n     init();\r\n     this.options \u003d options;\r\n-    Iterator iter \u003d Arrays.asList(arguments).iterator();\r\n+    Iterator\u003cString\u003e iter \u003d Arrays.asList(arguments).iterator();\r\n     while (iter.hasNext()) {\r\n-        String token \u003d (String) iter.next();\r\n+        String token \u003d iter.next();\r\n         if (\"-\".equals(token) || \"--\".equals(token)) {\r\n             tokens.add(token);\r\n         } else if (token.startsWith(\"--\")) {\r\n             int pos \u003d token.indexOf(\u0027\u003d\u0027);\r\n             String opt \u003d pos \u003d\u003d -1 ? token : token.substring(0, pos);\r\n-            List matchingOpts \u003d options.getMatchingOptions(opt);\r\n+            List\u003cString\u003e matchingOpts \u003d options.getMatchingOptions(opt);\r\n             if (matchingOpts.isEmpty()) {\r\n                 processNonOptionToken(token, stopAtNonOption);\r\n             } else if (matchingOpts.size() \u003e 1) {\r\n                 throw new AmbiguousOptionException(opt, matchingOpts);\r\n             } else {\r\n-                currentOption \u003d options.getOption((String) matchingOpts.get(0));\r\n+                currentOption \u003d options.getOption(matchingOpts.get(0));\r\n                 tokens.add(\"--\" + currentOption.getLongOpt());\r\n                 if (pos !\u003d -1) {\r\n                     tokens.add(token.substring(pos + 1));\r\n                 }\r\n             }\r\n         } else if (token.startsWith(\"-\")) {\r\n             if (token.length() \u003d\u003d 2 || options.hasOption(token)) {\r\n                 processOptionToken(token, stopAtNonOption);\r\n             } else if (!options.getMatchingOptions(token).isEmpty()) {\r\n-                List matchingOpts \u003d options.getMatchingOptions(token);\r\n+                List\u003cString\u003e matchingOpts \u003d options.getMatchingOptions(token);\r\n                 if (matchingOpts.size() \u003e 1) {\r\n                     throw new AmbiguousOptionException(token, matchingOpts);\r\n                 } else {\r\n-                    Option opt \u003d options.getOption((String) matchingOpts.get(0));\r\n+                    Option opt \u003d options.getOption(matchingOpts.get(0));\r\n                     processOptionToken(\"-\" + opt.getLongOpt(), stopAtNonOption);\r\n                 }\r\n             } else {\r\n                 burstToken(token, stopAtNonOption);\r\n             }\r\n         } else {\r\n             processNonOptionToken(token, stopAtNonOption);\r\n         }\r\n         gobble(iter);\r\n     }\r\n-    return (String[]) tokens.toArray(new String[tokens.size()]);\r\n+    return tokens.toArray(new String[tokens.size()]);\r\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "1596f3bbe57986361da4ac1a23634dd5b00d10df": {
      "type": "Yfilerename",
      "commitMessage": "Switched to the Maven 2 default directory layout (part 3)\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/cli/trunk@955173 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "6/16/10 12:45 PM",
      "commitName": "1596f3bbe57986361da4ac1a23634dd5b00d10df",
      "commitAuthor": "Emmanuel Bourg",
      "commitDateOld": "6/16/10 12:42 PM",
      "commitNameOld": "406a35f1a128944b7c51dcbc4a1f04c3f8bec3e6",
      "commitAuthorOld": "Emmanuel Bourg",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "protected String[] flatten(Options options, String[] arguments, boolean stopAtNonOption) throws ParseException {\r\n    init();\r\n    this.options \u003d options;\r\n    Iterator iter \u003d Arrays.asList(arguments).iterator();\r\n    while (iter.hasNext()) {\r\n        String token \u003d (String) iter.next();\r\n        if (\"-\".equals(token) || \"--\".equals(token)) {\r\n            tokens.add(token);\r\n        } else if (token.startsWith(\"--\")) {\r\n            int pos \u003d token.indexOf(\u0027\u003d\u0027);\r\n            String opt \u003d pos \u003d\u003d -1 ? token : token.substring(0, pos);\r\n            List matchingOpts \u003d options.getMatchingOptions(opt);\r\n            if (matchingOpts.isEmpty()) {\r\n                processNonOptionToken(token, stopAtNonOption);\r\n            } else if (matchingOpts.size() \u003e 1) {\r\n                throw new AmbiguousOptionException(opt, matchingOpts);\r\n            } else {\r\n                currentOption \u003d options.getOption((String) matchingOpts.get(0));\r\n                tokens.add(\"--\" + currentOption.getLongOpt());\r\n                if (pos !\u003d -1) {\r\n                    tokens.add(token.substring(pos + 1));\r\n                }\r\n            }\r\n        } else if (token.startsWith(\"-\")) {\r\n            if (token.length() \u003d\u003d 2 || options.hasOption(token)) {\r\n                processOptionToken(token, stopAtNonOption);\r\n            } else if (!options.getMatchingOptions(token).isEmpty()) {\r\n                List matchingOpts \u003d options.getMatchingOptions(token);\r\n                if (matchingOpts.size() \u003e 1) {\r\n                    throw new AmbiguousOptionException(token, matchingOpts);\r\n                } else {\r\n                    Option opt \u003d options.getOption((String) matchingOpts.get(0));\r\n                    processOptionToken(\"-\" + opt.getLongOpt(), stopAtNonOption);\r\n                }\r\n            } else {\r\n                burstToken(token, stopAtNonOption);\r\n            }\r\n        } else {\r\n            processNonOptionToken(token, stopAtNonOption);\r\n        }\r\n        gobble(iter);\r\n    }\r\n    return (String[]) tokens.toArray(new String[tokens.size()]);\r\n}",
      "path": "src/main/java/org/apache/commons/cli/PosixParser.java",
      "functionStartLine": 96,
      "functionName": "flatten",
      "functionAnnotation": "",
      "functionDoc": "\u003cp\u003eAn implementation of {@link Parser}\u0027s abstract\r\n{@link Parser#flatten(Options,String[],boolean) flatten} method.\u003c/p\u003e\r\n\r\n\u003cp\u003eThe following are the rules used by this flatten method.\r\n\u003col\u003e\r\n \u003cli\u003eif \u003ccode\u003estopAtNonOption\u003c/code\u003e is \u003cb\u003etrue\u003c/b\u003e then do not\r\n burst anymore of \u003ccode\u003earguments\u003c/code\u003e entries, just add each\r\n successive entry without further processing.  Otherwise, ignore\r\n \u003ccode\u003estopAtNonOption\u003c/code\u003e.\u003c/li\u003e\r\n \u003cli\u003eif the current \u003ccode\u003earguments\u003c/code\u003e entry is \"\u003cb\u003e--\u003c/b\u003e\"\r\n just add the entry to the list of processed tokens\u003c/li\u003e\r\n \u003cli\u003eif the current \u003ccode\u003earguments\u003c/code\u003e entry is \"\u003cb\u003e-\u003c/b\u003e\"\r\n just add the entry to the list of processed tokens\u003c/li\u003e\r\n \u003cli\u003eif the current \u003ccode\u003earguments\u003c/code\u003e entry is two characters\r\n in length and the first character is \"\u003cb\u003e-\u003c/b\u003e\" then check if this\r\n is a valid {@link Option} id.  If it is a valid id, then add the\r\n entry to the list of processed tokens and set the current {@link Option}\r\n member.  If it is not a valid id and \u003ccode\u003estopAtNonOption\u003c/code\u003e\r\n is true, then the remaining entries are copied to the list of\r\n processed tokens.  Otherwise, the current entry is ignored.\u003c/li\u003e\r\n \u003cli\u003eif the current \u003ccode\u003earguments\u003c/code\u003e entry is more than two\r\n characters in length and the first character is \"\u003cb\u003e-\u003c/b\u003e\" then\r\n we need to burst the entry to determine its constituents.  For more\r\n information on the bursting algorithm see\r\n {@link PosixParser#burstToken(String, boolean) burstToken}.\u003c/li\u003e\r\n \u003cli\u003eif the current \u003ccode\u003earguments\u003c/code\u003e entry is not handled\r\n by any of the previous rules, then the entry is added to the list\r\n of processed tokens.\u003c/li\u003e\r\n\u003c/ol\u003e\r\n\u003c/p\u003e\r\n\r\n@param options The command line {@link Options}\r\n@param arguments The command line arguments to be parsed\r\n@param stopAtNonOption Specifies whether to stop flattening\r\nwhen an non option is found.\r\n@return The flattened \u003ccode\u003earguments\u003c/code\u003e String array.\r\n",
      "diff": "",
      "extendedDetails": {
        "oldPath": "src/java/org/apache/commons/cli/PosixParser.java",
        "newPath": "src/main/java/org/apache/commons/cli/PosixParser.java"
      }
    },
    "e366a69318c97c70bd3278ffd8c61fad3c4a4456": {
      "type": "Ymultichange(Yexceptionschange,Ybodychange)",
      "commitMessage": "Implemented the partial matching for long options in the PosixParser (CLI-160)\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/cli/trunk@778664 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "5/26/09 2:48 PM",
      "commitName": "e366a69318c97c70bd3278ffd8c61fad3c4a4456",
      "commitAuthor": "Emmanuel Bourg",
      "subchanges": [
        {
          "type": "Yexceptionschange",
          "commitMessage": "Implemented the partial matching for long options in the PosixParser (CLI-160)\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/cli/trunk@778664 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "5/26/09 2:48 PM",
          "commitName": "e366a69318c97c70bd3278ffd8c61fad3c4a4456",
          "commitAuthor": "Emmanuel Bourg",
          "commitDateOld": "9/16/08 11:05 AM",
          "commitNameOld": "db4a638cf642fd7d031fcaebffa306b0a16ba771",
          "commitAuthorOld": "Emmanuel Bourg",
          "daysBetweenCommits": 252.16,
          "commitsBetweenForRepo": 73,
          "commitsBetweenForFile": 1,
          "actualSource": "protected String[] flatten(Options options, String[] arguments, boolean stopAtNonOption) throws ParseException {\r\n    init();\r\n    this.options \u003d options;\r\n    Iterator iter \u003d Arrays.asList(arguments).iterator();\r\n    while (iter.hasNext()) {\r\n        String token \u003d (String) iter.next();\r\n        if (\"-\".equals(token) || \"--\".equals(token)) {\r\n            tokens.add(token);\r\n        } else if (token.startsWith(\"--\")) {\r\n            int pos \u003d token.indexOf(\u0027\u003d\u0027);\r\n            String opt \u003d pos \u003d\u003d -1 ? token : token.substring(0, pos);\r\n            List matchingOpts \u003d options.getMatchingOptions(opt);\r\n            if (matchingOpts.isEmpty()) {\r\n                processNonOptionToken(token, stopAtNonOption);\r\n            } else if (matchingOpts.size() \u003e 1) {\r\n                throw new AmbiguousOptionException(opt, matchingOpts);\r\n            } else {\r\n                currentOption \u003d options.getOption((String) matchingOpts.get(0));\r\n                tokens.add(\"--\" + currentOption.getLongOpt());\r\n                if (pos !\u003d -1) {\r\n                    tokens.add(token.substring(pos + 1));\r\n                }\r\n            }\r\n        } else if (token.startsWith(\"-\")) {\r\n            if (token.length() \u003d\u003d 2 || options.hasOption(token)) {\r\n                processOptionToken(token, stopAtNonOption);\r\n            } else if (!options.getMatchingOptions(token).isEmpty()) {\r\n                List matchingOpts \u003d options.getMatchingOptions(token);\r\n                if (matchingOpts.size() \u003e 1) {\r\n                    throw new AmbiguousOptionException(token, matchingOpts);\r\n                } else {\r\n                    Option opt \u003d options.getOption((String) matchingOpts.get(0));\r\n                    processOptionToken(\"-\" + opt.getLongOpt(), stopAtNonOption);\r\n                }\r\n            } else {\r\n                burstToken(token, stopAtNonOption);\r\n            }\r\n        } else {\r\n            processNonOptionToken(token, stopAtNonOption);\r\n        }\r\n        gobble(iter);\r\n    }\r\n    return (String[]) tokens.toArray(new String[tokens.size()]);\r\n}",
          "path": "src/java/org/apache/commons/cli/PosixParser.java",
          "functionStartLine": 95,
          "functionName": "flatten",
          "functionAnnotation": "",
          "functionDoc": "\u003cp\u003eAn implementation of {@link Parser}\u0027s abstract\r\n{@link Parser#flatten(Options,String[],boolean) flatten} method.\u003c/p\u003e\r\n\r\n\u003cp\u003eThe following are the rules used by this flatten method.\r\n\u003col\u003e\r\n \u003cli\u003eif \u003ccode\u003estopAtNonOption\u003c/code\u003e is \u003cb\u003etrue\u003c/b\u003e then do not\r\n burst anymore of \u003ccode\u003earguments\u003c/code\u003e entries, just add each\r\n successive entry without further processing.  Otherwise, ignore\r\n \u003ccode\u003estopAtNonOption\u003c/code\u003e.\u003c/li\u003e\r\n \u003cli\u003eif the current \u003ccode\u003earguments\u003c/code\u003e entry is \"\u003cb\u003e--\u003c/b\u003e\"\r\n just add the entry to the list of processed tokens\u003c/li\u003e\r\n \u003cli\u003eif the current \u003ccode\u003earguments\u003c/code\u003e entry is \"\u003cb\u003e-\u003c/b\u003e\"\r\n just add the entry to the list of processed tokens\u003c/li\u003e\r\n \u003cli\u003eif the current \u003ccode\u003earguments\u003c/code\u003e entry is two characters\r\n in length and the first character is \"\u003cb\u003e-\u003c/b\u003e\" then check if this\r\n is a valid {@link Option} id.  If it is a valid id, then add the\r\n entry to the list of processed tokens and set the current {@link Option}\r\n member.  If it is not a valid id and \u003ccode\u003estopAtNonOption\u003c/code\u003e\r\n is true, then the remaining entries are copied to the list of\r\n processed tokens.  Otherwise, the current entry is ignored.\u003c/li\u003e\r\n \u003cli\u003eif the current \u003ccode\u003earguments\u003c/code\u003e entry is more than two\r\n characters in length and the first character is \"\u003cb\u003e-\u003c/b\u003e\" then\r\n we need to burst the entry to determine its constituents.  For more\r\n information on the bursting algorithm see\r\n {@link PosixParser#burstToken(String, boolean) burstToken}.\u003c/li\u003e\r\n \u003cli\u003eif the current \u003ccode\u003earguments\u003c/code\u003e entry is not handled\r\n by any of the previous rules, then the entry is added to the list\r\n of processed tokens.\u003c/li\u003e\r\n\u003c/ol\u003e\r\n\u003c/p\u003e\r\n\r\n@param options The command line {@link Options}\r\n@param arguments The command line arguments to be parsed\r\n@param stopAtNonOption Specifies whether to stop flattening\r\nwhen an non option is found.\r\n@return The flattened \u003ccode\u003earguments\u003c/code\u003e String array.\r\n",
          "diff": "@@ -1,33 +1,44 @@\n-protected String[] flatten(Options options, String[] arguments, boolean stopAtNonOption) {\r\n+protected String[] flatten(Options options, String[] arguments, boolean stopAtNonOption) throws ParseException {\r\n     init();\r\n     this.options \u003d options;\r\n     Iterator iter \u003d Arrays.asList(arguments).iterator();\r\n     while (iter.hasNext()) {\r\n         String token \u003d (String) iter.next();\r\n-        if (token.startsWith(\"--\")) {\r\n+        if (\"-\".equals(token) || \"--\".equals(token)) {\r\n+            tokens.add(token);\r\n+        } else if (token.startsWith(\"--\")) {\r\n             int pos \u003d token.indexOf(\u0027\u003d\u0027);\r\n             String opt \u003d pos \u003d\u003d -1 ? token : token.substring(0, pos);\r\n-            if (!options.hasOption(opt)) {\r\n+            List matchingOpts \u003d options.getMatchingOptions(opt);\r\n+            if (matchingOpts.isEmpty()) {\r\n                 processNonOptionToken(token, stopAtNonOption);\r\n+            } else if (matchingOpts.size() \u003e 1) {\r\n+                throw new AmbiguousOptionException(opt, matchingOpts);\r\n             } else {\r\n-                currentOption \u003d options.getOption(opt);\r\n-                tokens.add(opt);\r\n+                currentOption \u003d options.getOption((String) matchingOpts.get(0));\r\n+                tokens.add(\"--\" + currentOption.getLongOpt());\r\n                 if (pos !\u003d -1) {\r\n                     tokens.add(token.substring(pos + 1));\r\n                 }\r\n             }\r\n-        } else if (\"-\".equals(token)) {\r\n-            tokens.add(token);\r\n         } else if (token.startsWith(\"-\")) {\r\n             if (token.length() \u003d\u003d 2 || options.hasOption(token)) {\r\n                 processOptionToken(token, stopAtNonOption);\r\n+            } else if (!options.getMatchingOptions(token).isEmpty()) {\r\n+                List matchingOpts \u003d options.getMatchingOptions(token);\r\n+                if (matchingOpts.size() \u003e 1) {\r\n+                    throw new AmbiguousOptionException(token, matchingOpts);\r\n+                } else {\r\n+                    Option opt \u003d options.getOption((String) matchingOpts.get(0));\r\n+                    processOptionToken(\"-\" + opt.getLongOpt(), stopAtNonOption);\r\n+                }\r\n             } else {\r\n                 burstToken(token, stopAtNonOption);\r\n             }\r\n         } else {\r\n             processNonOptionToken(token, stopAtNonOption);\r\n         }\r\n         gobble(iter);\r\n     }\r\n     return (String[]) tokens.toArray(new String[tokens.size()]);\r\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[]",
            "newValue": "[ParseException]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Implemented the partial matching for long options in the PosixParser (CLI-160)\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/cli/trunk@778664 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "5/26/09 2:48 PM",
          "commitName": "e366a69318c97c70bd3278ffd8c61fad3c4a4456",
          "commitAuthor": "Emmanuel Bourg",
          "commitDateOld": "9/16/08 11:05 AM",
          "commitNameOld": "db4a638cf642fd7d031fcaebffa306b0a16ba771",
          "commitAuthorOld": "Emmanuel Bourg",
          "daysBetweenCommits": 252.16,
          "commitsBetweenForRepo": 73,
          "commitsBetweenForFile": 1,
          "actualSource": "protected String[] flatten(Options options, String[] arguments, boolean stopAtNonOption) throws ParseException {\r\n    init();\r\n    this.options \u003d options;\r\n    Iterator iter \u003d Arrays.asList(arguments).iterator();\r\n    while (iter.hasNext()) {\r\n        String token \u003d (String) iter.next();\r\n        if (\"-\".equals(token) || \"--\".equals(token)) {\r\n            tokens.add(token);\r\n        } else if (token.startsWith(\"--\")) {\r\n            int pos \u003d token.indexOf(\u0027\u003d\u0027);\r\n            String opt \u003d pos \u003d\u003d -1 ? token : token.substring(0, pos);\r\n            List matchingOpts \u003d options.getMatchingOptions(opt);\r\n            if (matchingOpts.isEmpty()) {\r\n                processNonOptionToken(token, stopAtNonOption);\r\n            } else if (matchingOpts.size() \u003e 1) {\r\n                throw new AmbiguousOptionException(opt, matchingOpts);\r\n            } else {\r\n                currentOption \u003d options.getOption((String) matchingOpts.get(0));\r\n                tokens.add(\"--\" + currentOption.getLongOpt());\r\n                if (pos !\u003d -1) {\r\n                    tokens.add(token.substring(pos + 1));\r\n                }\r\n            }\r\n        } else if (token.startsWith(\"-\")) {\r\n            if (token.length() \u003d\u003d 2 || options.hasOption(token)) {\r\n                processOptionToken(token, stopAtNonOption);\r\n            } else if (!options.getMatchingOptions(token).isEmpty()) {\r\n                List matchingOpts \u003d options.getMatchingOptions(token);\r\n                if (matchingOpts.size() \u003e 1) {\r\n                    throw new AmbiguousOptionException(token, matchingOpts);\r\n                } else {\r\n                    Option opt \u003d options.getOption((String) matchingOpts.get(0));\r\n                    processOptionToken(\"-\" + opt.getLongOpt(), stopAtNonOption);\r\n                }\r\n            } else {\r\n                burstToken(token, stopAtNonOption);\r\n            }\r\n        } else {\r\n            processNonOptionToken(token, stopAtNonOption);\r\n        }\r\n        gobble(iter);\r\n    }\r\n    return (String[]) tokens.toArray(new String[tokens.size()]);\r\n}",
          "path": "src/java/org/apache/commons/cli/PosixParser.java",
          "functionStartLine": 95,
          "functionName": "flatten",
          "functionAnnotation": "",
          "functionDoc": "\u003cp\u003eAn implementation of {@link Parser}\u0027s abstract\r\n{@link Parser#flatten(Options,String[],boolean) flatten} method.\u003c/p\u003e\r\n\r\n\u003cp\u003eThe following are the rules used by this flatten method.\r\n\u003col\u003e\r\n \u003cli\u003eif \u003ccode\u003estopAtNonOption\u003c/code\u003e is \u003cb\u003etrue\u003c/b\u003e then do not\r\n burst anymore of \u003ccode\u003earguments\u003c/code\u003e entries, just add each\r\n successive entry without further processing.  Otherwise, ignore\r\n \u003ccode\u003estopAtNonOption\u003c/code\u003e.\u003c/li\u003e\r\n \u003cli\u003eif the current \u003ccode\u003earguments\u003c/code\u003e entry is \"\u003cb\u003e--\u003c/b\u003e\"\r\n just add the entry to the list of processed tokens\u003c/li\u003e\r\n \u003cli\u003eif the current \u003ccode\u003earguments\u003c/code\u003e entry is \"\u003cb\u003e-\u003c/b\u003e\"\r\n just add the entry to the list of processed tokens\u003c/li\u003e\r\n \u003cli\u003eif the current \u003ccode\u003earguments\u003c/code\u003e entry is two characters\r\n in length and the first character is \"\u003cb\u003e-\u003c/b\u003e\" then check if this\r\n is a valid {@link Option} id.  If it is a valid id, then add the\r\n entry to the list of processed tokens and set the current {@link Option}\r\n member.  If it is not a valid id and \u003ccode\u003estopAtNonOption\u003c/code\u003e\r\n is true, then the remaining entries are copied to the list of\r\n processed tokens.  Otherwise, the current entry is ignored.\u003c/li\u003e\r\n \u003cli\u003eif the current \u003ccode\u003earguments\u003c/code\u003e entry is more than two\r\n characters in length and the first character is \"\u003cb\u003e-\u003c/b\u003e\" then\r\n we need to burst the entry to determine its constituents.  For more\r\n information on the bursting algorithm see\r\n {@link PosixParser#burstToken(String, boolean) burstToken}.\u003c/li\u003e\r\n \u003cli\u003eif the current \u003ccode\u003earguments\u003c/code\u003e entry is not handled\r\n by any of the previous rules, then the entry is added to the list\r\n of processed tokens.\u003c/li\u003e\r\n\u003c/ol\u003e\r\n\u003c/p\u003e\r\n\r\n@param options The command line {@link Options}\r\n@param arguments The command line arguments to be parsed\r\n@param stopAtNonOption Specifies whether to stop flattening\r\nwhen an non option is found.\r\n@return The flattened \u003ccode\u003earguments\u003c/code\u003e String array.\r\n",
          "diff": "@@ -1,33 +1,44 @@\n-protected String[] flatten(Options options, String[] arguments, boolean stopAtNonOption) {\r\n+protected String[] flatten(Options options, String[] arguments, boolean stopAtNonOption) throws ParseException {\r\n     init();\r\n     this.options \u003d options;\r\n     Iterator iter \u003d Arrays.asList(arguments).iterator();\r\n     while (iter.hasNext()) {\r\n         String token \u003d (String) iter.next();\r\n-        if (token.startsWith(\"--\")) {\r\n+        if (\"-\".equals(token) || \"--\".equals(token)) {\r\n+            tokens.add(token);\r\n+        } else if (token.startsWith(\"--\")) {\r\n             int pos \u003d token.indexOf(\u0027\u003d\u0027);\r\n             String opt \u003d pos \u003d\u003d -1 ? token : token.substring(0, pos);\r\n-            if (!options.hasOption(opt)) {\r\n+            List matchingOpts \u003d options.getMatchingOptions(opt);\r\n+            if (matchingOpts.isEmpty()) {\r\n                 processNonOptionToken(token, stopAtNonOption);\r\n+            } else if (matchingOpts.size() \u003e 1) {\r\n+                throw new AmbiguousOptionException(opt, matchingOpts);\r\n             } else {\r\n-                currentOption \u003d options.getOption(opt);\r\n-                tokens.add(opt);\r\n+                currentOption \u003d options.getOption((String) matchingOpts.get(0));\r\n+                tokens.add(\"--\" + currentOption.getLongOpt());\r\n                 if (pos !\u003d -1) {\r\n                     tokens.add(token.substring(pos + 1));\r\n                 }\r\n             }\r\n-        } else if (\"-\".equals(token)) {\r\n-            tokens.add(token);\r\n         } else if (token.startsWith(\"-\")) {\r\n             if (token.length() \u003d\u003d 2 || options.hasOption(token)) {\r\n                 processOptionToken(token, stopAtNonOption);\r\n+            } else if (!options.getMatchingOptions(token).isEmpty()) {\r\n+                List matchingOpts \u003d options.getMatchingOptions(token);\r\n+                if (matchingOpts.size() \u003e 1) {\r\n+                    throw new AmbiguousOptionException(token, matchingOpts);\r\n+                } else {\r\n+                    Option opt \u003d options.getOption((String) matchingOpts.get(0));\r\n+                    processOptionToken(\"-\" + opt.getLongOpt(), stopAtNonOption);\r\n+                }\r\n             } else {\r\n                 burstToken(token, stopAtNonOption);\r\n             }\r\n         } else {\r\n             processNonOptionToken(token, stopAtNonOption);\r\n         }\r\n         gobble(iter);\r\n     }\r\n     return (String[]) tokens.toArray(new String[tokens.size()]);\r\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        }
      ]
    },
    "db4a638cf642fd7d031fcaebffa306b0a16ba771": {
      "type": "Ybodychange",
      "commitMessage": "Fixed testStopAtExpectedArg for PosixParser\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/cli/branches/cli-1.x@695760 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "9/16/08 11:05 AM",
      "commitName": "db4a638cf642fd7d031fcaebffa306b0a16ba771",
      "commitAuthor": "Emmanuel Bourg",
      "commitDateOld": "7/29/08 11:13 AM",
      "commitNameOld": "147df44faa4eb12ffd4a0063fc3284f784ea67c8",
      "commitAuthorOld": "Emmanuel Bourg",
      "daysBetweenCommits": 48.99,
      "commitsBetweenForRepo": 14,
      "commitsBetweenForFile": 1,
      "actualSource": "protected String[] flatten(Options options, String[] arguments, boolean stopAtNonOption) {\r\n    init();\r\n    this.options \u003d options;\r\n    Iterator iter \u003d Arrays.asList(arguments).iterator();\r\n    while (iter.hasNext()) {\r\n        String token \u003d (String) iter.next();\r\n        if (token.startsWith(\"--\")) {\r\n            int pos \u003d token.indexOf(\u0027\u003d\u0027);\r\n            String opt \u003d pos \u003d\u003d -1 ? token : token.substring(0, pos);\r\n            if (!options.hasOption(opt)) {\r\n                processNonOptionToken(token, stopAtNonOption);\r\n            } else {\r\n                currentOption \u003d options.getOption(opt);\r\n                tokens.add(opt);\r\n                if (pos !\u003d -1) {\r\n                    tokens.add(token.substring(pos + 1));\r\n                }\r\n            }\r\n        } else if (\"-\".equals(token)) {\r\n            tokens.add(token);\r\n        } else if (token.startsWith(\"-\")) {\r\n            if (token.length() \u003d\u003d 2 || options.hasOption(token)) {\r\n                processOptionToken(token, stopAtNonOption);\r\n            } else {\r\n                burstToken(token, stopAtNonOption);\r\n            }\r\n        } else {\r\n            processNonOptionToken(token, stopAtNonOption);\r\n        }\r\n        gobble(iter);\r\n    }\r\n    return (String[]) tokens.toArray(new String[tokens.size()]);\r\n}",
      "path": "src/java/org/apache/commons/cli/PosixParser.java",
      "functionStartLine": 95,
      "functionName": "flatten",
      "functionAnnotation": "",
      "functionDoc": "\u003cp\u003eAn implementation of {@link Parser}\u0027s abstract\r\n{@link Parser#flatten(Options,String[],boolean) flatten} method.\u003c/p\u003e\r\n\r\n\u003cp\u003eThe following are the rules used by this flatten method.\r\n\u003col\u003e\r\n \u003cli\u003eif \u003ccode\u003estopAtNonOption\u003c/code\u003e is \u003cb\u003etrue\u003c/b\u003e then do not\r\n burst anymore of \u003ccode\u003earguments\u003c/code\u003e entries, just add each\r\n successive entry without further processing.  Otherwise, ignore\r\n \u003ccode\u003estopAtNonOption\u003c/code\u003e.\u003c/li\u003e\r\n \u003cli\u003eif the current \u003ccode\u003earguments\u003c/code\u003e entry is \"\u003cb\u003e--\u003c/b\u003e\"\r\n just add the entry to the list of processed tokens\u003c/li\u003e\r\n \u003cli\u003eif the current \u003ccode\u003earguments\u003c/code\u003e entry is \"\u003cb\u003e-\u003c/b\u003e\"\r\n just add the entry to the list of processed tokens\u003c/li\u003e\r\n \u003cli\u003eif the current \u003ccode\u003earguments\u003c/code\u003e entry is two characters\r\n in length and the first character is \"\u003cb\u003e-\u003c/b\u003e\" then check if this\r\n is a valid {@link Option} id.  If it is a valid id, then add the\r\n entry to the list of processed tokens and set the current {@link Option}\r\n member.  If it is not a valid id and \u003ccode\u003estopAtNonOption\u003c/code\u003e\r\n is true, then the remaining entries are copied to the list of\r\n processed tokens.  Otherwise, the current entry is ignored.\u003c/li\u003e\r\n \u003cli\u003eif the current \u003ccode\u003earguments\u003c/code\u003e entry is more than two\r\n characters in length and the first character is \"\u003cb\u003e-\u003c/b\u003e\" then\r\n we need to burst the entry to determine its constituents.  For more\r\n information on the bursting algorithm see\r\n {@link PosixParser#burstToken(String, boolean) burstToken}.\u003c/li\u003e\r\n \u003cli\u003eif the current \u003ccode\u003earguments\u003c/code\u003e entry is not handled\r\n by any of the previous rules, then the entry is added to the list\r\n of processed tokens.\u003c/li\u003e\r\n\u003c/ol\u003e\r\n\u003c/p\u003e\r\n\r\n@param options The command line {@link Options}\r\n@param arguments The command line arguments to be parsed\r\n@param stopAtNonOption Specifies whether to stop flattening\r\nwhen an non option is found.\r\n@return The flattened \u003ccode\u003earguments\u003c/code\u003e String array.\r\n",
      "diff": "@@ -1,36 +1,33 @@\n protected String[] flatten(Options options, String[] arguments, boolean stopAtNonOption) {\r\n     init();\r\n     this.options \u003d options;\r\n     Iterator iter \u003d Arrays.asList(arguments).iterator();\r\n     while (iter.hasNext()) {\r\n         String token \u003d (String) iter.next();\r\n         if (token.startsWith(\"--\")) {\r\n             int pos \u003d token.indexOf(\u0027\u003d\u0027);\r\n             String opt \u003d pos \u003d\u003d -1 ? token : token.substring(0, pos);\r\n-            if (!options.hasOption(opt) \u0026\u0026 stopAtNonOption) {\r\n-                processNonOptionToken(token);\r\n+            if (!options.hasOption(opt)) {\r\n+                processNonOptionToken(token, stopAtNonOption);\r\n             } else {\r\n+                currentOption \u003d options.getOption(opt);\r\n                 tokens.add(opt);\r\n                 if (pos !\u003d -1) {\r\n                     tokens.add(token.substring(pos + 1));\r\n                 }\r\n             }\r\n         } else if (\"-\".equals(token)) {\r\n             tokens.add(token);\r\n         } else if (token.startsWith(\"-\")) {\r\n-            if (token.length() \u003d\u003d 2) {\r\n+            if (token.length() \u003d\u003d 2 || options.hasOption(token)) {\r\n                 processOptionToken(token, stopAtNonOption);\r\n-            } else if (options.hasOption(token)) {\r\n-                tokens.add(token);\r\n             } else {\r\n                 burstToken(token, stopAtNonOption);\r\n             }\r\n-        } else if (stopAtNonOption) {\r\n-            processNonOptionToken(token);\r\n         } else {\r\n-            tokens.add(token);\r\n+            processNonOptionToken(token, stopAtNonOption);\r\n         }\r\n         gobble(iter);\r\n     }\r\n     return (String[]) tokens.toArray(new String[tokens.size()]);\r\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "147df44faa4eb12ffd4a0063fc3284f784ea67c8": {
      "type": "Ymultichange(Ydocchange,Yformatchange)",
      "commitMessage": "Style update\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/cli/branches/cli-1.x@680644 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "7/29/08 11:13 AM",
      "commitName": "147df44faa4eb12ffd4a0063fc3284f784ea67c8",
      "commitAuthor": "Emmanuel Bourg",
      "subchanges": [
        {
          "type": "Ydocchange",
          "commitMessage": "Style update\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/cli/branches/cli-1.x@680644 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "7/29/08 11:13 AM",
          "commitName": "147df44faa4eb12ffd4a0063fc3284f784ea67c8",
          "commitAuthor": "Emmanuel Bourg",
          "commitDateOld": "7/28/08 1:36 PM",
          "commitNameOld": "0823e1100abd395aa022285dc97d2dc0dd9472ef",
          "commitAuthorOld": "Emmanuel Bourg",
          "daysBetweenCommits": 0.9,
          "commitsBetweenForRepo": 2,
          "commitsBetweenForFile": 1,
          "actualSource": "protected String[] flatten(Options options, String[] arguments, boolean stopAtNonOption) {\r\n    init();\r\n    this.options \u003d options;\r\n    Iterator iter \u003d Arrays.asList(arguments).iterator();\r\n    while (iter.hasNext()) {\r\n        String token \u003d (String) iter.next();\r\n        if (token.startsWith(\"--\")) {\r\n            int pos \u003d token.indexOf(\u0027\u003d\u0027);\r\n            String opt \u003d pos \u003d\u003d -1 ? token : token.substring(0, pos);\r\n            if (!options.hasOption(opt) \u0026\u0026 stopAtNonOption) {\r\n                processNonOptionToken(token);\r\n            } else {\r\n                tokens.add(opt);\r\n                if (pos !\u003d -1) {\r\n                    tokens.add(token.substring(pos + 1));\r\n                }\r\n            }\r\n        } else if (\"-\".equals(token)) {\r\n            tokens.add(token);\r\n        } else if (token.startsWith(\"-\")) {\r\n            if (token.length() \u003d\u003d 2) {\r\n                processOptionToken(token, stopAtNonOption);\r\n            } else if (options.hasOption(token)) {\r\n                tokens.add(token);\r\n            } else {\r\n                burstToken(token, stopAtNonOption);\r\n            }\r\n        } else if (stopAtNonOption) {\r\n            processNonOptionToken(token);\r\n        } else {\r\n            tokens.add(token);\r\n        }\r\n        gobble(iter);\r\n    }\r\n    return (String[]) tokens.toArray(new String[tokens.size()]);\r\n}",
          "path": "src/java/org/apache/commons/cli/PosixParser.java",
          "functionStartLine": 92,
          "functionName": "flatten",
          "functionAnnotation": "",
          "functionDoc": "\u003cp\u003eAn implementation of {@link Parser}\u0027s abstract\r\n{@link Parser#flatten(Options,String[],boolean) flatten} method.\u003c/p\u003e\r\n\r\n\u003cp\u003eThe following are the rules used by this flatten method.\r\n\u003col\u003e\r\n \u003cli\u003eif \u003ccode\u003estopAtNonOption\u003c/code\u003e is \u003cb\u003etrue\u003c/b\u003e then do not\r\n burst anymore of \u003ccode\u003earguments\u003c/code\u003e entries, just add each\r\n successive entry without further processing.  Otherwise, ignore\r\n \u003ccode\u003estopAtNonOption\u003c/code\u003e.\u003c/li\u003e\r\n \u003cli\u003eif the current \u003ccode\u003earguments\u003c/code\u003e entry is \"\u003cb\u003e--\u003c/b\u003e\"\r\n just add the entry to the list of processed tokens\u003c/li\u003e\r\n \u003cli\u003eif the current \u003ccode\u003earguments\u003c/code\u003e entry is \"\u003cb\u003e-\u003c/b\u003e\"\r\n just add the entry to the list of processed tokens\u003c/li\u003e\r\n \u003cli\u003eif the current \u003ccode\u003earguments\u003c/code\u003e entry is two characters\r\n in length and the first character is \"\u003cb\u003e-\u003c/b\u003e\" then check if this\r\n is a valid {@link Option} id.  If it is a valid id, then add the\r\n entry to the list of processed tokens and set the current {@link Option}\r\n member.  If it is not a valid id and \u003ccode\u003estopAtNonOption\u003c/code\u003e\r\n is true, then the remaining entries are copied to the list of\r\n processed tokens.  Otherwise, the current entry is ignored.\u003c/li\u003e\r\n \u003cli\u003eif the current \u003ccode\u003earguments\u003c/code\u003e entry is more than two\r\n characters in length and the first character is \"\u003cb\u003e-\u003c/b\u003e\" then\r\n we need to burst the entry to determine its constituents.  For more\r\n information on the bursting algorithm see\r\n {@link PosixParser#burstToken(String, boolean) burstToken}.\u003c/li\u003e\r\n \u003cli\u003eif the current \u003ccode\u003earguments\u003c/code\u003e entry is not handled\r\n by any of the previous rules, then the entry is added to the list\r\n of processed tokens.\u003c/li\u003e\r\n\u003c/ol\u003e\r\n\u003c/p\u003e\r\n\r\n@param options The command line {@link Options}\r\n@param arguments The command line arguments to be parsed\r\n@param stopAtNonOption Specifies whether to stop flattening\r\nwhen an non option is found.\r\n@return The flattened \u003ccode\u003earguments\u003c/code\u003e String array.\r\n",
          "diff": "",
          "extendedDetails": {
            "oldValue": "\u003cp\u003eAn implementation of {@link Parser}\u0027s abstract\r\n{@link Parser#flatten(Options,String[],boolean) flatten} method.\u003c/p\u003e\r\n\r\n\u003cp\u003eThe following are the rules used by this flatten method.\r\n\u003col\u003e\r\n \u003cli\u003eif \u003ccode\u003estopAtNonOption\u003c/code\u003e is \u003cb\u003etrue\u003c/b\u003e then do not\r\n burst anymore of \u003ccode\u003earguments\u003c/code\u003e entries, just add each\r\n successive entry without further processing.  Otherwise, ignore\r\n \u003ccode\u003estopAtNonOption\u003c/code\u003e.\u003c/li\u003e\r\n \u003cli\u003eif the current \u003ccode\u003earguments\u003c/code\u003e entry is \"\u003cb\u003e--\u003c/b\u003e\"\r\n just add the entry to the list of processed tokens\u003c/li\u003e\r\n \u003cli\u003eif the current \u003ccode\u003earguments\u003c/code\u003e entry is \"\u003cb\u003e-\u003c/b\u003e\"\r\n just add the entry to the list of processed tokens\u003c/li\u003e\r\n \u003cli\u003eif the current \u003ccode\u003earguments\u003c/code\u003e entry is two characters\r\n in length and the first character is \"\u003cb\u003e-\u003c/b\u003e\" then check if this\r\n is a valid {@link Option} id.  If it is a valid id, then add the\r\n entry to the list of processed tokens and set the current {@link Option}\r\n member.  If it is not a valid id and \u003ccode\u003estopAtNonOption\u003c/code\u003e\r\n is true, then the remaining entries are copied to the list of \r\n processed tokens.  Otherwise, the current entry is ignored.\u003c/li\u003e\r\n \u003cli\u003eif the current \u003ccode\u003earguments\u003c/code\u003e entry is more than two\r\n characters in length and the first character is \"\u003cb\u003e-\u003c/b\u003e\" then\r\n we need to burst the entry to determine its constituents.  For more\r\n information on the bursting algorithm see \r\n {@link PosixParser#burstToken(String, boolean) burstToken}.\u003c/li\u003e\r\n \u003cli\u003eif the current \u003ccode\u003earguments\u003c/code\u003e entry is not handled \r\n by any of the previous rules, then the entry is added to the list\r\n of processed tokens.\u003c/li\u003e\r\n\u003c/ol\u003e\r\n\u003c/p\u003e\r\n\r\n@param options The command line {@link Options}\r\n@param arguments The command line arguments to be parsed\r\n@param stopAtNonOption Specifies whether to stop flattening\r\nwhen an non option is found.\r\n@return The flattened \u003ccode\u003earguments\u003c/code\u003e String array.\r\n",
            "newValue": "\u003cp\u003eAn implementation of {@link Parser}\u0027s abstract\r\n{@link Parser#flatten(Options,String[],boolean) flatten} method.\u003c/p\u003e\r\n\r\n\u003cp\u003eThe following are the rules used by this flatten method.\r\n\u003col\u003e\r\n \u003cli\u003eif \u003ccode\u003estopAtNonOption\u003c/code\u003e is \u003cb\u003etrue\u003c/b\u003e then do not\r\n burst anymore of \u003ccode\u003earguments\u003c/code\u003e entries, just add each\r\n successive entry without further processing.  Otherwise, ignore\r\n \u003ccode\u003estopAtNonOption\u003c/code\u003e.\u003c/li\u003e\r\n \u003cli\u003eif the current \u003ccode\u003earguments\u003c/code\u003e entry is \"\u003cb\u003e--\u003c/b\u003e\"\r\n just add the entry to the list of processed tokens\u003c/li\u003e\r\n \u003cli\u003eif the current \u003ccode\u003earguments\u003c/code\u003e entry is \"\u003cb\u003e-\u003c/b\u003e\"\r\n just add the entry to the list of processed tokens\u003c/li\u003e\r\n \u003cli\u003eif the current \u003ccode\u003earguments\u003c/code\u003e entry is two characters\r\n in length and the first character is \"\u003cb\u003e-\u003c/b\u003e\" then check if this\r\n is a valid {@link Option} id.  If it is a valid id, then add the\r\n entry to the list of processed tokens and set the current {@link Option}\r\n member.  If it is not a valid id and \u003ccode\u003estopAtNonOption\u003c/code\u003e\r\n is true, then the remaining entries are copied to the list of\r\n processed tokens.  Otherwise, the current entry is ignored.\u003c/li\u003e\r\n \u003cli\u003eif the current \u003ccode\u003earguments\u003c/code\u003e entry is more than two\r\n characters in length and the first character is \"\u003cb\u003e-\u003c/b\u003e\" then\r\n we need to burst the entry to determine its constituents.  For more\r\n information on the bursting algorithm see\r\n {@link PosixParser#burstToken(String, boolean) burstToken}.\u003c/li\u003e\r\n \u003cli\u003eif the current \u003ccode\u003earguments\u003c/code\u003e entry is not handled\r\n by any of the previous rules, then the entry is added to the list\r\n of processed tokens.\u003c/li\u003e\r\n\u003c/ol\u003e\r\n\u003c/p\u003e\r\n\r\n@param options The command line {@link Options}\r\n@param arguments The command line arguments to be parsed\r\n@param stopAtNonOption Specifies whether to stop flattening\r\nwhen an non option is found.\r\n@return The flattened \u003ccode\u003earguments\u003c/code\u003e String array.\r\n"
          }
        },
        {
          "type": "Yformatchange",
          "commitMessage": "Style update\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/cli/branches/cli-1.x@680644 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "7/29/08 11:13 AM",
          "commitName": "147df44faa4eb12ffd4a0063fc3284f784ea67c8",
          "commitAuthor": "Emmanuel Bourg",
          "commitDateOld": "7/28/08 1:36 PM",
          "commitNameOld": "0823e1100abd395aa022285dc97d2dc0dd9472ef",
          "commitAuthorOld": "Emmanuel Bourg",
          "daysBetweenCommits": 0.9,
          "commitsBetweenForRepo": 2,
          "commitsBetweenForFile": 1,
          "actualSource": "protected String[] flatten(Options options, String[] arguments, boolean stopAtNonOption) {\r\n    init();\r\n    this.options \u003d options;\r\n    Iterator iter \u003d Arrays.asList(arguments).iterator();\r\n    while (iter.hasNext()) {\r\n        String token \u003d (String) iter.next();\r\n        if (token.startsWith(\"--\")) {\r\n            int pos \u003d token.indexOf(\u0027\u003d\u0027);\r\n            String opt \u003d pos \u003d\u003d -1 ? token : token.substring(0, pos);\r\n            if (!options.hasOption(opt) \u0026\u0026 stopAtNonOption) {\r\n                processNonOptionToken(token);\r\n            } else {\r\n                tokens.add(opt);\r\n                if (pos !\u003d -1) {\r\n                    tokens.add(token.substring(pos + 1));\r\n                }\r\n            }\r\n        } else if (\"-\".equals(token)) {\r\n            tokens.add(token);\r\n        } else if (token.startsWith(\"-\")) {\r\n            if (token.length() \u003d\u003d 2) {\r\n                processOptionToken(token, stopAtNonOption);\r\n            } else if (options.hasOption(token)) {\r\n                tokens.add(token);\r\n            } else {\r\n                burstToken(token, stopAtNonOption);\r\n            }\r\n        } else if (stopAtNonOption) {\r\n            processNonOptionToken(token);\r\n        } else {\r\n            tokens.add(token);\r\n        }\r\n        gobble(iter);\r\n    }\r\n    return (String[]) tokens.toArray(new String[tokens.size()]);\r\n}",
          "path": "src/java/org/apache/commons/cli/PosixParser.java",
          "functionStartLine": 92,
          "functionName": "flatten",
          "functionAnnotation": "",
          "functionDoc": "\u003cp\u003eAn implementation of {@link Parser}\u0027s abstract\r\n{@link Parser#flatten(Options,String[],boolean) flatten} method.\u003c/p\u003e\r\n\r\n\u003cp\u003eThe following are the rules used by this flatten method.\r\n\u003col\u003e\r\n \u003cli\u003eif \u003ccode\u003estopAtNonOption\u003c/code\u003e is \u003cb\u003etrue\u003c/b\u003e then do not\r\n burst anymore of \u003ccode\u003earguments\u003c/code\u003e entries, just add each\r\n successive entry without further processing.  Otherwise, ignore\r\n \u003ccode\u003estopAtNonOption\u003c/code\u003e.\u003c/li\u003e\r\n \u003cli\u003eif the current \u003ccode\u003earguments\u003c/code\u003e entry is \"\u003cb\u003e--\u003c/b\u003e\"\r\n just add the entry to the list of processed tokens\u003c/li\u003e\r\n \u003cli\u003eif the current \u003ccode\u003earguments\u003c/code\u003e entry is \"\u003cb\u003e-\u003c/b\u003e\"\r\n just add the entry to the list of processed tokens\u003c/li\u003e\r\n \u003cli\u003eif the current \u003ccode\u003earguments\u003c/code\u003e entry is two characters\r\n in length and the first character is \"\u003cb\u003e-\u003c/b\u003e\" then check if this\r\n is a valid {@link Option} id.  If it is a valid id, then add the\r\n entry to the list of processed tokens and set the current {@link Option}\r\n member.  If it is not a valid id and \u003ccode\u003estopAtNonOption\u003c/code\u003e\r\n is true, then the remaining entries are copied to the list of\r\n processed tokens.  Otherwise, the current entry is ignored.\u003c/li\u003e\r\n \u003cli\u003eif the current \u003ccode\u003earguments\u003c/code\u003e entry is more than two\r\n characters in length and the first character is \"\u003cb\u003e-\u003c/b\u003e\" then\r\n we need to burst the entry to determine its constituents.  For more\r\n information on the bursting algorithm see\r\n {@link PosixParser#burstToken(String, boolean) burstToken}.\u003c/li\u003e\r\n \u003cli\u003eif the current \u003ccode\u003earguments\u003c/code\u003e entry is not handled\r\n by any of the previous rules, then the entry is added to the list\r\n of processed tokens.\u003c/li\u003e\r\n\u003c/ol\u003e\r\n\u003c/p\u003e\r\n\r\n@param options The command line {@link Options}\r\n@param arguments The command line arguments to be parsed\r\n@param stopAtNonOption Specifies whether to stop flattening\r\nwhen an non option is found.\r\n@return The flattened \u003ccode\u003earguments\u003c/code\u003e String array.\r\n",
          "diff": "",
          "extendedDetails": {}
        }
      ]
    },
    "0823e1100abd395aa022285dc97d2dc0dd9472ef": {
      "type": "Ybodychange",
      "commitMessage": "Removed the unused code from PosixParser\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/cli/branches/cli-1.x@680316 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "7/28/08 1:36 PM",
      "commitName": "0823e1100abd395aa022285dc97d2dc0dd9472ef",
      "commitAuthor": "Emmanuel Bourg",
      "commitDateOld": "7/28/08 12:47 PM",
      "commitNameOld": "99aa05af2bfef3980ad8f94230cd077e8d30c5ea",
      "commitAuthorOld": "Emmanuel Bourg",
      "daysBetweenCommits": 0.03,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "actualSource": "protected String[] flatten(Options options, String[] arguments, boolean stopAtNonOption) {\r\n    init();\r\n    this.options \u003d options;\r\n    Iterator iter \u003d Arrays.asList(arguments).iterator();\r\n    while (iter.hasNext()) {\r\n        String token \u003d (String) iter.next();\r\n        if (token.startsWith(\"--\")) {\r\n            int pos \u003d token.indexOf(\u0027\u003d\u0027);\r\n            String opt \u003d pos \u003d\u003d -1 ? token : token.substring(0, pos);\r\n            if (!options.hasOption(opt) \u0026\u0026 stopAtNonOption) {\r\n                processNonOptionToken(token);\r\n            } else {\r\n                tokens.add(opt);\r\n                if (pos !\u003d -1) {\r\n                    tokens.add(token.substring(pos + 1));\r\n                }\r\n            }\r\n        } else if (\"-\".equals(token)) {\r\n            tokens.add(token);\r\n        } else if (token.startsWith(\"-\")) {\r\n            if (token.length() \u003d\u003d 2) {\r\n                processOptionToken(token, stopAtNonOption);\r\n            } else if (options.hasOption(token)) {\r\n                tokens.add(token);\r\n            } else {\r\n                burstToken(token, stopAtNonOption);\r\n            }\r\n        } else if (stopAtNonOption) {\r\n            processNonOptionToken(token);\r\n        } else {\r\n            tokens.add(token);\r\n        }\r\n        gobble(iter);\r\n    }\r\n    return (String[]) tokens.toArray(new String[tokens.size()]);\r\n}",
      "path": "src/java/org/apache/commons/cli/PosixParser.java",
      "functionStartLine": 93,
      "functionName": "flatten",
      "functionAnnotation": "",
      "functionDoc": "\u003cp\u003eAn implementation of {@link Parser}\u0027s abstract\r\n{@link Parser#flatten(Options,String[],boolean) flatten} method.\u003c/p\u003e\r\n\r\n\u003cp\u003eThe following are the rules used by this flatten method.\r\n\u003col\u003e\r\n \u003cli\u003eif \u003ccode\u003estopAtNonOption\u003c/code\u003e is \u003cb\u003etrue\u003c/b\u003e then do not\r\n burst anymore of \u003ccode\u003earguments\u003c/code\u003e entries, just add each\r\n successive entry without further processing.  Otherwise, ignore\r\n \u003ccode\u003estopAtNonOption\u003c/code\u003e.\u003c/li\u003e\r\n \u003cli\u003eif the current \u003ccode\u003earguments\u003c/code\u003e entry is \"\u003cb\u003e--\u003c/b\u003e\"\r\n just add the entry to the list of processed tokens\u003c/li\u003e\r\n \u003cli\u003eif the current \u003ccode\u003earguments\u003c/code\u003e entry is \"\u003cb\u003e-\u003c/b\u003e\"\r\n just add the entry to the list of processed tokens\u003c/li\u003e\r\n \u003cli\u003eif the current \u003ccode\u003earguments\u003c/code\u003e entry is two characters\r\n in length and the first character is \"\u003cb\u003e-\u003c/b\u003e\" then check if this\r\n is a valid {@link Option} id.  If it is a valid id, then add the\r\n entry to the list of processed tokens and set the current {@link Option}\r\n member.  If it is not a valid id and \u003ccode\u003estopAtNonOption\u003c/code\u003e\r\n is true, then the remaining entries are copied to the list of \r\n processed tokens.  Otherwise, the current entry is ignored.\u003c/li\u003e\r\n \u003cli\u003eif the current \u003ccode\u003earguments\u003c/code\u003e entry is more than two\r\n characters in length and the first character is \"\u003cb\u003e-\u003c/b\u003e\" then\r\n we need to burst the entry to determine its constituents.  For more\r\n information on the bursting algorithm see \r\n {@link PosixParser#burstToken(String, boolean) burstToken}.\u003c/li\u003e\r\n \u003cli\u003eif the current \u003ccode\u003earguments\u003c/code\u003e entry is not handled \r\n by any of the previous rules, then the entry is added to the list\r\n of processed tokens.\u003c/li\u003e\r\n\u003c/ol\u003e\r\n\u003c/p\u003e\r\n\r\n@param options The command line {@link Options}\r\n@param arguments The command line arguments to be parsed\r\n@param stopAtNonOption Specifies whether to stop flattening\r\nwhen an non option is found.\r\n@return The flattened \u003ccode\u003earguments\u003c/code\u003e String array.\r\n",
      "diff": "@@ -1,36 +1,36 @@\n protected String[] flatten(Options options, String[] arguments, boolean stopAtNonOption) {\r\n     init();\r\n     this.options \u003d options;\r\n     Iterator iter \u003d Arrays.asList(arguments).iterator();\r\n     while (iter.hasNext()) {\r\n         String token \u003d (String) iter.next();\r\n         if (token.startsWith(\"--\")) {\r\n             int pos \u003d token.indexOf(\u0027\u003d\u0027);\r\n             String opt \u003d pos \u003d\u003d -1 ? token : token.substring(0, pos);\r\n             if (!options.hasOption(opt) \u0026\u0026 stopAtNonOption) {\r\n-                process(token);\r\n+                processNonOptionToken(token);\r\n             } else {\r\n                 tokens.add(opt);\r\n                 if (pos !\u003d -1) {\r\n                     tokens.add(token.substring(pos + 1));\r\n                 }\r\n             }\r\n         } else if (\"-\".equals(token)) {\r\n             tokens.add(token);\r\n         } else if (token.startsWith(\"-\")) {\r\n             if (token.length() \u003d\u003d 2) {\r\n                 processOptionToken(token, stopAtNonOption);\r\n             } else if (options.hasOption(token)) {\r\n                 tokens.add(token);\r\n             } else {\r\n                 burstToken(token, stopAtNonOption);\r\n             }\r\n         } else if (stopAtNonOption) {\r\n-            process(token);\r\n+            processNonOptionToken(token);\r\n         } else {\r\n             tokens.add(token);\r\n         }\r\n         gobble(iter);\r\n     }\r\n     return (String[]) tokens.toArray(new String[tokens.size()]);\r\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "99aa05af2bfef3980ad8f94230cd077e8d30c5ea": {
      "type": "Ybodychange",
      "commitMessage": "Fixed PosixParser when an unrecognized long option is found (CLI-165)\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/cli/branches/cli-1.x@680299 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "7/28/08 12:47 PM",
      "commitName": "99aa05af2bfef3980ad8f94230cd077e8d30c5ea",
      "commitAuthor": "Emmanuel Bourg",
      "commitDateOld": "7/28/08 11:43 AM",
      "commitNameOld": "b1331806960001da95424315b6103d755107b519",
      "commitAuthorOld": "Emmanuel Bourg",
      "daysBetweenCommits": 0.04,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "protected String[] flatten(Options options, String[] arguments, boolean stopAtNonOption) {\r\n    init();\r\n    this.options \u003d options;\r\n    Iterator iter \u003d Arrays.asList(arguments).iterator();\r\n    while (iter.hasNext()) {\r\n        String token \u003d (String) iter.next();\r\n        if (token.startsWith(\"--\")) {\r\n            int pos \u003d token.indexOf(\u0027\u003d\u0027);\r\n            String opt \u003d pos \u003d\u003d -1 ? token : token.substring(0, pos);\r\n            if (!options.hasOption(opt) \u0026\u0026 stopAtNonOption) {\r\n                process(token);\r\n            } else {\r\n                tokens.add(opt);\r\n                if (pos !\u003d -1) {\r\n                    tokens.add(token.substring(pos + 1));\r\n                }\r\n            }\r\n        } else if (\"-\".equals(token)) {\r\n            tokens.add(token);\r\n        } else if (token.startsWith(\"-\")) {\r\n            if (token.length() \u003d\u003d 2) {\r\n                processOptionToken(token, stopAtNonOption);\r\n            } else if (options.hasOption(token)) {\r\n                tokens.add(token);\r\n            } else {\r\n                burstToken(token, stopAtNonOption);\r\n            }\r\n        } else if (stopAtNonOption) {\r\n            process(token);\r\n        } else {\r\n            tokens.add(token);\r\n        }\r\n        gobble(iter);\r\n    }\r\n    return (String[]) tokens.toArray(new String[tokens.size()]);\r\n}",
      "path": "src/java/org/apache/commons/cli/PosixParser.java",
      "functionStartLine": 97,
      "functionName": "flatten",
      "functionAnnotation": "",
      "functionDoc": "\u003cp\u003eAn implementation of {@link Parser}\u0027s abstract\r\n{@link Parser#flatten(Options,String[],boolean) flatten} method.\u003c/p\u003e\r\n\r\n\u003cp\u003eThe following are the rules used by this flatten method.\r\n\u003col\u003e\r\n \u003cli\u003eif \u003ccode\u003estopAtNonOption\u003c/code\u003e is \u003cb\u003etrue\u003c/b\u003e then do not\r\n burst anymore of \u003ccode\u003earguments\u003c/code\u003e entries, just add each\r\n successive entry without further processing.  Otherwise, ignore\r\n \u003ccode\u003estopAtNonOption\u003c/code\u003e.\u003c/li\u003e\r\n \u003cli\u003eif the current \u003ccode\u003earguments\u003c/code\u003e entry is \"\u003cb\u003e--\u003c/b\u003e\"\r\n just add the entry to the list of processed tokens\u003c/li\u003e\r\n \u003cli\u003eif the current \u003ccode\u003earguments\u003c/code\u003e entry is \"\u003cb\u003e-\u003c/b\u003e\"\r\n just add the entry to the list of processed tokens\u003c/li\u003e\r\n \u003cli\u003eif the current \u003ccode\u003earguments\u003c/code\u003e entry is two characters\r\n in length and the first character is \"\u003cb\u003e-\u003c/b\u003e\" then check if this\r\n is a valid {@link Option} id.  If it is a valid id, then add the\r\n entry to the list of processed tokens and set the current {@link Option}\r\n member.  If it is not a valid id and \u003ccode\u003estopAtNonOption\u003c/code\u003e\r\n is true, then the remaining entries are copied to the list of \r\n processed tokens.  Otherwise, the current entry is ignored.\u003c/li\u003e\r\n \u003cli\u003eif the current \u003ccode\u003earguments\u003c/code\u003e entry is more than two\r\n characters in length and the first character is \"\u003cb\u003e-\u003c/b\u003e\" then\r\n we need to burst the entry to determine its constituents.  For more\r\n information on the bursting algorithm see \r\n {@link PosixParser#burstToken(String, boolean) burstToken}.\u003c/li\u003e\r\n \u003cli\u003eif the current \u003ccode\u003earguments\u003c/code\u003e entry is not handled \r\n by any of the previous rules, then the entry is added to the list\r\n of processed tokens.\u003c/li\u003e\r\n\u003c/ol\u003e\r\n\u003c/p\u003e\r\n\r\n@param options The command line {@link Options}\r\n@param arguments The command line arguments to be parsed\r\n@param stopAtNonOption Specifies whether to stop flattening\r\nwhen an non option is found.\r\n@return The flattened \u003ccode\u003earguments\u003c/code\u003e String array.\r\n",
      "diff": "@@ -1,32 +1,36 @@\n protected String[] flatten(Options options, String[] arguments, boolean stopAtNonOption) {\r\n     init();\r\n     this.options \u003d options;\r\n     Iterator iter \u003d Arrays.asList(arguments).iterator();\r\n     while (iter.hasNext()) {\r\n         String token \u003d (String) iter.next();\r\n         if (token.startsWith(\"--\")) {\r\n-            if (token.indexOf(\u0027\u003d\u0027) !\u003d -1) {\r\n-                tokens.add(token.substring(0, token.indexOf(\u0027\u003d\u0027)));\r\n-                tokens.add(token.substring(token.indexOf(\u0027\u003d\u0027) + 1, token.length()));\r\n+            int pos \u003d token.indexOf(\u0027\u003d\u0027);\r\n+            String opt \u003d pos \u003d\u003d -1 ? token : token.substring(0, pos);\r\n+            if (!options.hasOption(opt) \u0026\u0026 stopAtNonOption) {\r\n+                process(token);\r\n             } else {\r\n-                tokens.add(token);\r\n+                tokens.add(opt);\r\n+                if (pos !\u003d -1) {\r\n+                    tokens.add(token.substring(pos + 1));\r\n+                }\r\n             }\r\n         } else if (\"-\".equals(token)) {\r\n             tokens.add(token);\r\n         } else if (token.startsWith(\"-\")) {\r\n             if (token.length() \u003d\u003d 2) {\r\n                 processOptionToken(token, stopAtNonOption);\r\n             } else if (options.hasOption(token)) {\r\n                 tokens.add(token);\r\n             } else {\r\n                 burstToken(token, stopAtNonOption);\r\n             }\r\n         } else if (stopAtNonOption) {\r\n             process(token);\r\n         } else {\r\n             tokens.add(token);\r\n         }\r\n         gobble(iter);\r\n     }\r\n     return (String[]) tokens.toArray(new String[tokens.size()]);\r\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "c8606251c904dfaf5303f71b788e12f7fff15fab": {
      "type": "Ybodychange",
      "commitMessage": "Fixed the handling of unrecognized options starting with \u0027-\u0027 by PosixParser (CLI-164)\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/cli/branches/cli-1.x@680287 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "7/28/08 11:27 AM",
      "commitName": "c8606251c904dfaf5303f71b788e12f7fff15fab",
      "commitAuthor": "Emmanuel Bourg",
      "commitDateOld": "7/28/08 2:38 AM",
      "commitNameOld": "9c5ce3501938cff01d78b7a1fff10a60abe9e0cf",
      "commitAuthorOld": "Emmanuel Bourg",
      "daysBetweenCommits": 0.37,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "protected String[] flatten(Options options, String[] arguments, boolean stopAtNonOption) {\r\n    init();\r\n    this.options \u003d options;\r\n    Iterator iter \u003d Arrays.asList(arguments).iterator();\r\n    while (iter.hasNext()) {\r\n        String token \u003d (String) iter.next();\r\n        if (token.startsWith(\"--\")) {\r\n            if (token.indexOf(\u0027\u003d\u0027) !\u003d -1) {\r\n                tokens.add(token.substring(0, token.indexOf(\u0027\u003d\u0027)));\r\n                tokens.add(token.substring(token.indexOf(\u0027\u003d\u0027) + 1, token.length()));\r\n            } else {\r\n                tokens.add(token);\r\n            }\r\n        } else if (\"-\".equals(token)) {\r\n            tokens.add(token);\r\n        } else if (token.startsWith(\"-\")) {\r\n            if (token.length() \u003d\u003d 2) {\r\n                processOptionToken(token, stopAtNonOption);\r\n            } else if (options.hasOption(token)) {\r\n                tokens.add(token);\r\n            } else {\r\n                burstToken(token, stopAtNonOption);\r\n            }\r\n        } else if (stopAtNonOption) {\r\n            process(token);\r\n        } else {\r\n            tokens.add(token);\r\n        }\r\n        gobble(iter);\r\n    }\r\n    return (String[]) tokens.toArray(new String[tokens.size()]);\r\n}",
      "path": "src/java/org/apache/commons/cli/PosixParser.java",
      "functionStartLine": 97,
      "functionName": "flatten",
      "functionAnnotation": "",
      "functionDoc": "\u003cp\u003eAn implementation of {@link Parser}\u0027s abstract\r\n{@link Parser#flatten(Options,String[],boolean) flatten} method.\u003c/p\u003e\r\n\r\n\u003cp\u003eThe following are the rules used by this flatten method.\r\n\u003col\u003e\r\n \u003cli\u003eif \u003ccode\u003estopAtNonOption\u003c/code\u003e is \u003cb\u003etrue\u003c/b\u003e then do not\r\n burst anymore of \u003ccode\u003earguments\u003c/code\u003e entries, just add each\r\n successive entry without further processing.  Otherwise, ignore\r\n \u003ccode\u003estopAtNonOption\u003c/code\u003e.\u003c/li\u003e\r\n \u003cli\u003eif the current \u003ccode\u003earguments\u003c/code\u003e entry is \"\u003cb\u003e--\u003c/b\u003e\"\r\n just add the entry to the list of processed tokens\u003c/li\u003e\r\n \u003cli\u003eif the current \u003ccode\u003earguments\u003c/code\u003e entry is \"\u003cb\u003e-\u003c/b\u003e\"\r\n just add the entry to the list of processed tokens\u003c/li\u003e\r\n \u003cli\u003eif the current \u003ccode\u003earguments\u003c/code\u003e entry is two characters\r\n in length and the first character is \"\u003cb\u003e-\u003c/b\u003e\" then check if this\r\n is a valid {@link Option} id.  If it is a valid id, then add the\r\n entry to the list of processed tokens and set the current {@link Option}\r\n member.  If it is not a valid id and \u003ccode\u003estopAtNonOption\u003c/code\u003e\r\n is true, then the remaining entries are copied to the list of \r\n processed tokens.  Otherwise, the current entry is ignored.\u003c/li\u003e\r\n \u003cli\u003eif the current \u003ccode\u003earguments\u003c/code\u003e entry is more than two\r\n characters in length and the first character is \"\u003cb\u003e-\u003c/b\u003e\" then\r\n we need to burst the entry to determine its constituents.  For more\r\n information on the bursting algorithm see \r\n {@link PosixParser#burstToken(String, boolean) burstToken}.\u003c/li\u003e\r\n \u003cli\u003eif the current \u003ccode\u003earguments\u003c/code\u003e entry is not handled \r\n by any of the previous rules, then the entry is added to the list\r\n of processed tokens.\u003c/li\u003e\r\n\u003c/ol\u003e\r\n\u003c/p\u003e\r\n\r\n@param options The command line {@link Options}\r\n@param arguments The command line arguments to be parsed\r\n@param stopAtNonOption Specifies whether to stop flattening\r\nwhen an non option is found.\r\n@return The flattened \u003ccode\u003earguments\u003c/code\u003e String array.\r\n",
      "diff": "@@ -1,35 +1,32 @@\n protected String[] flatten(Options options, String[] arguments, boolean stopAtNonOption) {\r\n     init();\r\n     this.options \u003d options;\r\n     Iterator iter \u003d Arrays.asList(arguments).iterator();\r\n     while (iter.hasNext()) {\r\n         String token \u003d (String) iter.next();\r\n         if (token.startsWith(\"--\")) {\r\n             if (token.indexOf(\u0027\u003d\u0027) !\u003d -1) {\r\n                 tokens.add(token.substring(0, token.indexOf(\u0027\u003d\u0027)));\r\n                 tokens.add(token.substring(token.indexOf(\u0027\u003d\u0027) + 1, token.length()));\r\n             } else {\r\n                 tokens.add(token);\r\n             }\r\n         } else if (\"-\".equals(token)) {\r\n-            processSingleHyphen(token);\r\n+            tokens.add(token);\r\n         } else if (token.startsWith(\"-\")) {\r\n-            int tokenLength \u003d token.length();\r\n-            if (tokenLength \u003d\u003d 2) {\r\n+            if (token.length() \u003d\u003d 2) {\r\n                 processOptionToken(token, stopAtNonOption);\r\n             } else if (options.hasOption(token)) {\r\n                 tokens.add(token);\r\n             } else {\r\n                 burstToken(token, stopAtNonOption);\r\n             }\r\n+        } else if (stopAtNonOption) {\r\n+            process(token);\r\n         } else {\r\n-            if (stopAtNonOption) {\r\n-                process(token);\r\n-            } else {\r\n-                tokens.add(token);\r\n-            }\r\n+            tokens.add(token);\r\n         }\r\n         gobble(iter);\r\n     }\r\n     return (String[]) tokens.toArray(new String[tokens.size()]);\r\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "9c5ce3501938cff01d78b7a1fff10a60abe9e0cf": {
      "type": "Ybodychange",
      "commitMessage": "Fixed PosixParser to stop bursting tokens when a non option character is found (CLI-163)\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/cli/branches/cli-1.x@680208 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "7/28/08 2:38 AM",
      "commitName": "9c5ce3501938cff01d78b7a1fff10a60abe9e0cf",
      "commitAuthor": "Emmanuel Bourg",
      "commitDateOld": "5/28/07 11:32 AM",
      "commitNameOld": "b599e124a373de091bb6e5b0d771505efccc444d",
      "commitAuthorOld": "Henri Yandell",
      "daysBetweenCommits": 426.63,
      "commitsBetweenForRepo": 98,
      "commitsBetweenForFile": 1,
      "actualSource": "protected String[] flatten(Options options, String[] arguments, boolean stopAtNonOption) {\r\n    init();\r\n    this.options \u003d options;\r\n    Iterator iter \u003d Arrays.asList(arguments).iterator();\r\n    while (iter.hasNext()) {\r\n        String token \u003d (String) iter.next();\r\n        if (token.startsWith(\"--\")) {\r\n            if (token.indexOf(\u0027\u003d\u0027) !\u003d -1) {\r\n                tokens.add(token.substring(0, token.indexOf(\u0027\u003d\u0027)));\r\n                tokens.add(token.substring(token.indexOf(\u0027\u003d\u0027) + 1, token.length()));\r\n            } else {\r\n                tokens.add(token);\r\n            }\r\n        } else if (\"-\".equals(token)) {\r\n            processSingleHyphen(token);\r\n        } else if (token.startsWith(\"-\")) {\r\n            int tokenLength \u003d token.length();\r\n            if (tokenLength \u003d\u003d 2) {\r\n                processOptionToken(token, stopAtNonOption);\r\n            } else if (options.hasOption(token)) {\r\n                tokens.add(token);\r\n            } else {\r\n                burstToken(token, stopAtNonOption);\r\n            }\r\n        } else {\r\n            if (stopAtNonOption) {\r\n                process(token);\r\n            } else {\r\n                tokens.add(token);\r\n            }\r\n        }\r\n        gobble(iter);\r\n    }\r\n    return (String[]) tokens.toArray(new String[tokens.size()]);\r\n}",
      "path": "src/java/org/apache/commons/cli/PosixParser.java",
      "functionStartLine": 97,
      "functionName": "flatten",
      "functionAnnotation": "",
      "functionDoc": "\u003cp\u003eAn implementation of {@link Parser}\u0027s abstract\r\n{@link Parser#flatten(Options,String[],boolean) flatten} method.\u003c/p\u003e\r\n\r\n\u003cp\u003eThe following are the rules used by this flatten method.\r\n\u003col\u003e\r\n \u003cli\u003eif \u003ccode\u003estopAtNonOption\u003c/code\u003e is \u003cb\u003etrue\u003c/b\u003e then do not\r\n burst anymore of \u003ccode\u003earguments\u003c/code\u003e entries, just add each\r\n successive entry without further processing.  Otherwise, ignore\r\n \u003ccode\u003estopAtNonOption\u003c/code\u003e.\u003c/li\u003e\r\n \u003cli\u003eif the current \u003ccode\u003earguments\u003c/code\u003e entry is \"\u003cb\u003e--\u003c/b\u003e\"\r\n just add the entry to the list of processed tokens\u003c/li\u003e\r\n \u003cli\u003eif the current \u003ccode\u003earguments\u003c/code\u003e entry is \"\u003cb\u003e-\u003c/b\u003e\"\r\n just add the entry to the list of processed tokens\u003c/li\u003e\r\n \u003cli\u003eif the current \u003ccode\u003earguments\u003c/code\u003e entry is two characters\r\n in length and the first character is \"\u003cb\u003e-\u003c/b\u003e\" then check if this\r\n is a valid {@link Option} id.  If it is a valid id, then add the\r\n entry to the list of processed tokens and set the current {@link Option}\r\n member.  If it is not a valid id and \u003ccode\u003estopAtNonOption\u003c/code\u003e\r\n is true, then the remaining entries are copied to the list of \r\n processed tokens.  Otherwise, the current entry is ignored.\u003c/li\u003e\r\n \u003cli\u003eif the current \u003ccode\u003earguments\u003c/code\u003e entry is more than two\r\n characters in length and the first character is \"\u003cb\u003e-\u003c/b\u003e\" then\r\n we need to burst the entry to determine its constituents.  For more\r\n information on the bursting algorithm see \r\n {@link PosixParser#burstToken(String, boolean) burstToken}.\u003c/li\u003e\r\n \u003cli\u003eif the current \u003ccode\u003earguments\u003c/code\u003e entry is not handled \r\n by any of the previous rules, then the entry is added to the list\r\n of processed tokens.\u003c/li\u003e\r\n\u003c/ol\u003e\r\n\u003c/p\u003e\r\n\r\n@param options The command line {@link Options}\r\n@param arguments The command line arguments to be parsed\r\n@param stopAtNonOption Specifies whether to stop flattening\r\nwhen an non option is found.\r\n@return The flattened \u003ccode\u003earguments\u003c/code\u003e String array.\r\n",
      "diff": "@@ -1,36 +1,35 @@\n protected String[] flatten(Options options, String[] arguments, boolean stopAtNonOption) {\r\n     init();\r\n     this.options \u003d options;\r\n     Iterator iter \u003d Arrays.asList(arguments).iterator();\r\n-    String token;\r\n     while (iter.hasNext()) {\r\n-        token \u003d (String) iter.next();\r\n+        String token \u003d (String) iter.next();\r\n         if (token.startsWith(\"--\")) {\r\n             if (token.indexOf(\u0027\u003d\u0027) !\u003d -1) {\r\n                 tokens.add(token.substring(0, token.indexOf(\u0027\u003d\u0027)));\r\n                 tokens.add(token.substring(token.indexOf(\u0027\u003d\u0027) + 1, token.length()));\r\n             } else {\r\n                 tokens.add(token);\r\n             }\r\n         } else if (\"-\".equals(token)) {\r\n             processSingleHyphen(token);\r\n         } else if (token.startsWith(\"-\")) {\r\n             int tokenLength \u003d token.length();\r\n             if (tokenLength \u003d\u003d 2) {\r\n                 processOptionToken(token, stopAtNonOption);\r\n             } else if (options.hasOption(token)) {\r\n                 tokens.add(token);\r\n             } else {\r\n                 burstToken(token, stopAtNonOption);\r\n             }\r\n         } else {\r\n             if (stopAtNonOption) {\r\n                 process(token);\r\n             } else {\r\n                 tokens.add(token);\r\n             }\r\n         }\r\n         gobble(iter);\r\n     }\r\n     return (String[]) tokens.toArray(new String[tokens.size()]);\r\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "b599e124a373de091bb6e5b0d771505efccc444d": {
      "type": "Ybodychange",
      "commitMessage": "Fixing Findbugs warnings and adding a bold WARNING to GnuParser that there is a large lump of non-executable code\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/cli/branches/cli-1.0.x@542151 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "5/28/07 11:32 AM",
      "commitName": "b599e124a373de091bb6e5b0d771505efccc444d",
      "commitAuthor": "Henri Yandell",
      "commitDateOld": "5/28/07 11:01 AM",
      "commitNameOld": "79a1091bd0a2dba7decacd23beac8104f3b5a5cb",
      "commitAuthorOld": "Henri Yandell",
      "daysBetweenCommits": 0.02,
      "commitsBetweenForRepo": 3,
      "commitsBetweenForFile": 1,
      "actualSource": "protected String[] flatten(Options options, String[] arguments, boolean stopAtNonOption) {\r\n    init();\r\n    this.options \u003d options;\r\n    Iterator iter \u003d Arrays.asList(arguments).iterator();\r\n    String token;\r\n    while (iter.hasNext()) {\r\n        token \u003d (String) iter.next();\r\n        if (token.startsWith(\"--\")) {\r\n            if (token.indexOf(\u0027\u003d\u0027) !\u003d -1) {\r\n                tokens.add(token.substring(0, token.indexOf(\u0027\u003d\u0027)));\r\n                tokens.add(token.substring(token.indexOf(\u0027\u003d\u0027) + 1, token.length()));\r\n            } else {\r\n                tokens.add(token);\r\n            }\r\n        } else if (\"-\".equals(token)) {\r\n            processSingleHyphen(token);\r\n        } else if (token.startsWith(\"-\")) {\r\n            int tokenLength \u003d token.length();\r\n            if (tokenLength \u003d\u003d 2) {\r\n                processOptionToken(token, stopAtNonOption);\r\n            } else if (options.hasOption(token)) {\r\n                tokens.add(token);\r\n            } else {\r\n                burstToken(token, stopAtNonOption);\r\n            }\r\n        } else {\r\n            if (stopAtNonOption) {\r\n                process(token);\r\n            } else {\r\n                tokens.add(token);\r\n            }\r\n        }\r\n        gobble(iter);\r\n    }\r\n    return (String[]) tokens.toArray(new String[tokens.size()]);\r\n}",
      "path": "src/java/org/apache/commons/cli/PosixParser.java",
      "functionStartLine": 95,
      "functionName": "flatten",
      "functionAnnotation": "",
      "functionDoc": "\u003cp\u003eAn implementation of {@link Parser}\u0027s abstract\r\n{@link Parser#flatten(Options,String[],boolean) flatten} method.\u003c/p\u003e\r\n\r\n\u003cp\u003eThe following are the rules used by this flatten method.\r\n\u003col\u003e\r\n \u003cli\u003eif \u003ccode\u003estopAtNonOption\u003c/code\u003e is \u003cb\u003etrue\u003c/b\u003e then do not\r\n burst anymore of \u003ccode\u003earguments\u003c/code\u003e entries, just add each\r\n successive entry without further processing.  Otherwise, ignore\r\n \u003ccode\u003estopAtNonOption\u003c/code\u003e.\u003c/li\u003e\r\n \u003cli\u003eif the current \u003ccode\u003earguments\u003c/code\u003e entry is \"\u003cb\u003e--\u003c/b\u003e\"\r\n just add the entry to the list of processed tokens\u003c/li\u003e\r\n \u003cli\u003eif the current \u003ccode\u003earguments\u003c/code\u003e entry is \"\u003cb\u003e-\u003c/b\u003e\"\r\n just add the entry to the list of processed tokens\u003c/li\u003e\r\n \u003cli\u003eif the current \u003ccode\u003earguments\u003c/code\u003e entry is two characters\r\n in length and the first character is \"\u003cb\u003e-\u003c/b\u003e\" then check if this\r\n is a valid {@link Option} id.  If it is a valid id, then add the\r\n entry to the list of processed tokens and set the current {@link Option}\r\n member.  If it is not a valid id and \u003ccode\u003estopAtNonOption\u003c/code\u003e\r\n is true, then the remaining entries are copied to the list of \r\n processed tokens.  Otherwise, the current entry is ignored.\u003c/li\u003e\r\n \u003cli\u003eif the current \u003ccode\u003earguments\u003c/code\u003e entry is more than two\r\n characters in length and the first character is \"\u003cb\u003e-\u003c/b\u003e\" then\r\n we need to burst the entry to determine its constituents.  For more\r\n information on the bursting algorithm see \r\n {@link PosixParser#burstToken(String, boolean) burstToken}.\u003c/li\u003e\r\n \u003cli\u003eif the current \u003ccode\u003earguments\u003c/code\u003e entry is not handled \r\n by any of the previous rules, then the entry is added to the list\r\n of processed tokens.\u003c/li\u003e\r\n\u003c/ol\u003e\r\n\u003c/p\u003e\r\n\r\n@param options The command line {@link Options}\r\n@param arguments The command line arguments to be parsed\r\n@param stopAtNonOption Specifies whether to stop flattening\r\nwhen an non option is found.\r\n@return The flattened \u003ccode\u003earguments\u003c/code\u003e String array.\r\n",
      "diff": "@@ -1,36 +1,36 @@\n protected String[] flatten(Options options, String[] arguments, boolean stopAtNonOption) {\r\n     init();\r\n     this.options \u003d options;\r\n     Iterator iter \u003d Arrays.asList(arguments).iterator();\r\n     String token;\r\n     while (iter.hasNext()) {\r\n         token \u003d (String) iter.next();\r\n         if (token.startsWith(\"--\")) {\r\n             if (token.indexOf(\u0027\u003d\u0027) !\u003d -1) {\r\n                 tokens.add(token.substring(0, token.indexOf(\u0027\u003d\u0027)));\r\n                 tokens.add(token.substring(token.indexOf(\u0027\u003d\u0027) + 1, token.length()));\r\n             } else {\r\n                 tokens.add(token);\r\n             }\r\n         } else if (\"-\".equals(token)) {\r\n             processSingleHyphen(token);\r\n         } else if (token.startsWith(\"-\")) {\r\n             int tokenLength \u003d token.length();\r\n             if (tokenLength \u003d\u003d 2) {\r\n                 processOptionToken(token, stopAtNonOption);\r\n             } else if (options.hasOption(token)) {\r\n                 tokens.add(token);\r\n             } else {\r\n                 burstToken(token, stopAtNonOption);\r\n             }\r\n         } else {\r\n             if (stopAtNonOption) {\r\n                 process(token);\r\n             } else {\r\n                 tokens.add(token);\r\n             }\r\n         }\r\n         gobble(iter);\r\n     }\r\n-    return (String[]) tokens.toArray(new String[] {});\r\n+    return (String[]) tokens.toArray(new String[tokens.size()]);\r\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "2ff9573ffb08dd52ec3a55a49f2d77a1e94efbdf": {
      "type": "Ybodychange",
      "commitMessage": "Applying test and fix patch from CLI-51. Thanks to Brian Egge. \n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/cli/branches/cli-1.0.x@540661 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "5/22/07 8:47 PM",
      "commitName": "2ff9573ffb08dd52ec3a55a49f2d77a1e94efbdf",
      "commitAuthor": "Henri Yandell",
      "commitDateOld": "2/26/05 2:53 PM",
      "commitNameOld": "e543edc2a488729baea94cc554631cec3fb62b74",
      "commitAuthorOld": "Dirk Verbeeck",
      "daysBetweenCommits": 815.2,
      "commitsBetweenForRepo": 96,
      "commitsBetweenForFile": 1,
      "actualSource": "protected String[] flatten(Options options, String[] arguments, boolean stopAtNonOption) {\r\n    init();\r\n    this.options \u003d options;\r\n    Iterator iter \u003d Arrays.asList(arguments).iterator();\r\n    String token;\r\n    while (iter.hasNext()) {\r\n        token \u003d (String) iter.next();\r\n        if (token.startsWith(\"--\")) {\r\n            if (token.indexOf(\u0027\u003d\u0027) !\u003d -1) {\r\n                tokens.add(token.substring(0, token.indexOf(\u0027\u003d\u0027)));\r\n                tokens.add(token.substring(token.indexOf(\u0027\u003d\u0027) + 1, token.length()));\r\n            } else {\r\n                tokens.add(token);\r\n            }\r\n        } else if (\"-\".equals(token)) {\r\n            processSingleHyphen(token);\r\n        } else if (token.startsWith(\"-\")) {\r\n            int tokenLength \u003d token.length();\r\n            if (tokenLength \u003d\u003d 2) {\r\n                processOptionToken(token, stopAtNonOption);\r\n            } else if (options.hasOption(token)) {\r\n                tokens.add(token);\r\n            } else {\r\n                burstToken(token, stopAtNonOption);\r\n            }\r\n        } else {\r\n            if (stopAtNonOption) {\r\n                process(token);\r\n            } else {\r\n                tokens.add(token);\r\n            }\r\n        }\r\n        gobble(iter);\r\n    }\r\n    return (String[]) tokens.toArray(new String[] {});\r\n}",
      "path": "src/java/org/apache/commons/cli/PosixParser.java",
      "functionStartLine": 94,
      "functionName": "flatten",
      "functionAnnotation": "",
      "functionDoc": "\u003cp\u003eAn implementation of {@link Parser}\u0027s abstract\r\n{@link Parser#flatten(Options,String[],boolean) flatten} method.\u003c/p\u003e\r\n\r\n\u003cp\u003eThe following are the rules used by this flatten method.\r\n\u003col\u003e\r\n \u003cli\u003eif \u003ccode\u003estopAtNonOption\u003c/code\u003e is \u003cb\u003etrue\u003c/b\u003e then do not\r\n burst anymore of \u003ccode\u003earguments\u003c/code\u003e entries, just add each\r\n successive entry without further processing.  Otherwise, ignore\r\n \u003ccode\u003estopAtNonOption\u003c/code\u003e.\u003c/li\u003e\r\n \u003cli\u003eif the current \u003ccode\u003earguments\u003c/code\u003e entry is \"\u003cb\u003e--\u003c/b\u003e\"\r\n just add the entry to the list of processed tokens\u003c/li\u003e\r\n \u003cli\u003eif the current \u003ccode\u003earguments\u003c/code\u003e entry is \"\u003cb\u003e-\u003c/b\u003e\"\r\n just add the entry to the list of processed tokens\u003c/li\u003e\r\n \u003cli\u003eif the current \u003ccode\u003earguments\u003c/code\u003e entry is two characters\r\n in length and the first character is \"\u003cb\u003e-\u003c/b\u003e\" then check if this\r\n is a valid {@link Option} id.  If it is a valid id, then add the\r\n entry to the list of processed tokens and set the current {@link Option}\r\n member.  If it is not a valid id and \u003ccode\u003estopAtNonOption\u003c/code\u003e\r\n is true, then the remaining entries are copied to the list of \r\n processed tokens.  Otherwise, the current entry is ignored.\u003c/li\u003e\r\n \u003cli\u003eif the current \u003ccode\u003earguments\u003c/code\u003e entry is more than two\r\n characters in length and the first character is \"\u003cb\u003e-\u003c/b\u003e\" then\r\n we need to burst the entry to determine its constituents.  For more\r\n information on the bursting algorithm see \r\n {@link PosixParser#burstToken(String, boolean) burstToken}.\u003c/li\u003e\r\n \u003cli\u003eif the current \u003ccode\u003earguments\u003c/code\u003e entry is not handled \r\n by any of the previous rules, then the entry is added to the list\r\n of processed tokens.\u003c/li\u003e\r\n\u003c/ol\u003e\r\n\u003c/p\u003e\r\n\r\n@param options The command line {@link Options}\r\n@param arguments The command line arguments to be parsed\r\n@param stopAtNonOption Specifies whether to stop flattening\r\nwhen an non option is found.\r\n@return The flattened \u003ccode\u003earguments\u003c/code\u003e String array.\r\n",
      "diff": "@@ -1,36 +1,36 @@\n protected String[] flatten(Options options, String[] arguments, boolean stopAtNonOption) {\r\n     init();\r\n     this.options \u003d options;\r\n     Iterator iter \u003d Arrays.asList(arguments).iterator();\r\n-    String token \u003d null;\r\n+    String token;\r\n     while (iter.hasNext()) {\r\n         token \u003d (String) iter.next();\r\n         if (token.startsWith(\"--\")) {\r\n             if (token.indexOf(\u0027\u003d\u0027) !\u003d -1) {\r\n                 tokens.add(token.substring(0, token.indexOf(\u0027\u003d\u0027)));\r\n                 tokens.add(token.substring(token.indexOf(\u0027\u003d\u0027) + 1, token.length()));\r\n             } else {\r\n                 tokens.add(token);\r\n             }\r\n         } else if (\"-\".equals(token)) {\r\n             processSingleHyphen(token);\r\n         } else if (token.startsWith(\"-\")) {\r\n             int tokenLength \u003d token.length();\r\n             if (tokenLength \u003d\u003d 2) {\r\n                 processOptionToken(token, stopAtNonOption);\r\n             } else if (options.hasOption(token)) {\r\n                 tokens.add(token);\r\n             } else {\r\n                 burstToken(token, stopAtNonOption);\r\n             }\r\n         } else {\r\n             if (stopAtNonOption) {\r\n                 process(token);\r\n             } else {\r\n                 tokens.add(token);\r\n             }\r\n         }\r\n         gobble(iter);\r\n     }\r\n     return (String[]) tokens.toArray(new String[] {});\r\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "45c01740a0bc7f9fcf74c1d0acebb55b139ffcfd": {
      "type": "Ybodychange",
      "commitMessage": "Stops the PosixParser from bursting options unecessarily, i.e. if -file is an acceptible option then it won\u0027t be broken into -f -i -l -e.\n\nPR: 32525\nSubmitted by:\tDavid Morris\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/cli/trunk@130108 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/27/04 2:42 PM",
      "commitName": "45c01740a0bc7f9fcf74c1d0acebb55b139ffcfd",
      "commitAuthor": "Robert James Oxspring",
      "commitDateOld": "4/23/04 2:00 AM",
      "commitNameOld": "8f95e4a724350f9f80429c2af1c3ac9bb2b2c2db",
      "commitAuthorOld": "Robert James Oxspring",
      "daysBetweenCommits": 248.57,
      "commitsBetweenForRepo": 42,
      "commitsBetweenForFile": 1,
      "actualSource": "protected String[] flatten(Options options, String[] arguments, boolean stopAtNonOption) {\r\n    init();\r\n    this.options \u003d options;\r\n    Iterator iter \u003d Arrays.asList(arguments).iterator();\r\n    String token \u003d null;\r\n    while (iter.hasNext()) {\r\n        token \u003d (String) iter.next();\r\n        if (token.startsWith(\"--\")) {\r\n            if (token.indexOf(\u0027\u003d\u0027) !\u003d -1) {\r\n                tokens.add(token.substring(0, token.indexOf(\u0027\u003d\u0027)));\r\n                tokens.add(token.substring(token.indexOf(\u0027\u003d\u0027) + 1, token.length()));\r\n            } else {\r\n                tokens.add(token);\r\n            }\r\n        } else if (\"-\".equals(token)) {\r\n            processSingleHyphen(token);\r\n        } else if (token.startsWith(\"-\")) {\r\n            int tokenLength \u003d token.length();\r\n            if (tokenLength \u003d\u003d 2) {\r\n                processOptionToken(token, stopAtNonOption);\r\n            } else if (options.hasOption(token)) {\r\n                tokens.add(token);\r\n            } else {\r\n                burstToken(token, stopAtNonOption);\r\n            }\r\n        } else {\r\n            if (stopAtNonOption) {\r\n                process(token);\r\n            } else {\r\n                tokens.add(token);\r\n            }\r\n        }\r\n        gobble(iter);\r\n    }\r\n    return (String[]) tokens.toArray(new String[] {});\r\n}",
      "path": "src/java/org/apache/commons/cli/PosixParser.java",
      "functionStartLine": 94,
      "functionName": "flatten",
      "functionAnnotation": "",
      "functionDoc": "\u003cp\u003eAn implementation of {@link Parser}\u0027s abstract\r\n{@link Parser#flatten(Options,String[],boolean) flatten} method.\u003c/p\u003e\r\n\r\n\u003cp\u003eThe following are the rules used by this flatten method.\r\n\u003col\u003e\r\n \u003cli\u003eif \u003ccode\u003estopAtNonOption\u003c/code\u003e is \u003cb\u003etrue\u003c/b\u003e then do not\r\n burst anymore of \u003ccode\u003earguments\u003c/code\u003e entries, just add each\r\n successive entry without further processing.  Otherwise, ignore\r\n \u003ccode\u003estopAtNonOption\u003c/code\u003e.\u003c/li\u003e\r\n \u003cli\u003eif the current \u003ccode\u003earguments\u003c/code\u003e entry is \"\u003cb\u003e--\u003c/b\u003e\"\r\n just add the entry to the list of processed tokens\u003c/li\u003e\r\n \u003cli\u003eif the current \u003ccode\u003earguments\u003c/code\u003e entry is \"\u003cb\u003e-\u003c/b\u003e\"\r\n just add the entry to the list of processed tokens\u003c/li\u003e\r\n \u003cli\u003eif the current \u003ccode\u003earguments\u003c/code\u003e entry is two characters\r\n in length and the first character is \"\u003cb\u003e-\u003c/b\u003e\" then check if this\r\n is a valid {@link Option} id.  If it is a valid id, then add the\r\n entry to the list of processed tokens and set the current {@link Option}\r\n member.  If it is not a valid id and \u003ccode\u003estopAtNonOption\u003c/code\u003e\r\n is true, then the remaining entries are copied to the list of \r\n processed tokens.  Otherwise, the current entry is ignored.\u003c/li\u003e\r\n \u003cli\u003eif the current \u003ccode\u003earguments\u003c/code\u003e entry is more than two\r\n characters in length and the first character is \"\u003cb\u003e-\u003c/b\u003e\" then\r\n we need to burst the entry to determine its constituents.  For more\r\n information on the bursting algorithm see \r\n {@link PosixParser#burstToken(String, boolean) burstToken}.\u003c/li\u003e\r\n \u003cli\u003eif the current \u003ccode\u003earguments\u003c/code\u003e entry is not handled \r\n by any of the previous rules, then the entry is added to the list\r\n of processed tokens.\u003c/li\u003e\r\n\u003c/ol\u003e\r\n\u003c/p\u003e\r\n\r\n@param options The command line {@link Options}\r\n@param arguments The command line arguments to be parsed\r\n@param stopAtNonOption Specifies whether to stop flattening\r\nwhen an non option is found.\r\n@return The flattened \u003ccode\u003earguments\u003c/code\u003e String array.\r\n",
      "diff": "@@ -1,34 +1,36 @@\n protected String[] flatten(Options options, String[] arguments, boolean stopAtNonOption) {\r\n     init();\r\n     this.options \u003d options;\r\n     Iterator iter \u003d Arrays.asList(arguments).iterator();\r\n     String token \u003d null;\r\n     while (iter.hasNext()) {\r\n         token \u003d (String) iter.next();\r\n         if (token.startsWith(\"--\")) {\r\n             if (token.indexOf(\u0027\u003d\u0027) !\u003d -1) {\r\n                 tokens.add(token.substring(0, token.indexOf(\u0027\u003d\u0027)));\r\n                 tokens.add(token.substring(token.indexOf(\u0027\u003d\u0027) + 1, token.length()));\r\n             } else {\r\n                 tokens.add(token);\r\n             }\r\n         } else if (\"-\".equals(token)) {\r\n             processSingleHyphen(token);\r\n         } else if (token.startsWith(\"-\")) {\r\n             int tokenLength \u003d token.length();\r\n             if (tokenLength \u003d\u003d 2) {\r\n                 processOptionToken(token, stopAtNonOption);\r\n+            } else if (options.hasOption(token)) {\r\n+                tokens.add(token);\r\n             } else {\r\n                 burstToken(token, stopAtNonOption);\r\n             }\r\n         } else {\r\n             if (stopAtNonOption) {\r\n                 process(token);\r\n             } else {\r\n                 tokens.add(token);\r\n             }\r\n         }\r\n         gobble(iter);\r\n     }\r\n     return (String[]) tokens.toArray(new String[] {});\r\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "9b2b8038b52be022e42c8c7fdf26e236888f94c5": {
      "type": "Ymultichange(Ydocchange,Yformatchange)",
      "commitMessage": "checkstyle fixes\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/cli/trunk@129857 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/10/02 1:47 AM",
      "commitName": "9b2b8038b52be022e42c8c7fdf26e236888f94c5",
      "commitAuthor": "John Keyes",
      "subchanges": [
        {
          "type": "Ydocchange",
          "commitMessage": "checkstyle fixes\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/cli/trunk@129857 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "12/10/02 1:47 AM",
          "commitName": "9b2b8038b52be022e42c8c7fdf26e236888f94c5",
          "commitAuthor": "John Keyes",
          "commitDateOld": "9/20/02 1:59 AM",
          "commitNameOld": "c08f73835beda155421d78ee4f96d9e11c501159",
          "commitAuthorOld": "John Keyes",
          "daysBetweenCommits": 81.03,
          "commitsBetweenForRepo": 35,
          "commitsBetweenForFile": 1,
          "actualSource": "protected String[] flatten(Options options, String[] arguments, boolean stopAtNonOption) {\r\n    init();\r\n    this.options \u003d options;\r\n    Iterator iter \u003d Arrays.asList(arguments).iterator();\r\n    String token \u003d null;\r\n    while (iter.hasNext()) {\r\n        token \u003d (String) iter.next();\r\n        if (token.startsWith(\"--\")) {\r\n            if (token.indexOf(\u0027\u003d\u0027) !\u003d -1) {\r\n                tokens.add(token.substring(0, token.indexOf(\u0027\u003d\u0027)));\r\n                tokens.add(token.substring(token.indexOf(\u0027\u003d\u0027) + 1, token.length()));\r\n            } else {\r\n                tokens.add(token);\r\n            }\r\n        } else if (\"-\".equals(token)) {\r\n            processSingleHyphen(token);\r\n        } else if (token.startsWith(\"-\")) {\r\n            int tokenLength \u003d token.length();\r\n            if (tokenLength \u003d\u003d 2) {\r\n                processOptionToken(token, stopAtNonOption);\r\n            } else {\r\n                burstToken(token, stopAtNonOption);\r\n            }\r\n        } else {\r\n            if (stopAtNonOption) {\r\n                process(token);\r\n            } else {\r\n                tokens.add(token);\r\n            }\r\n        }\r\n        gobble(iter);\r\n    }\r\n    return (String[]) tokens.toArray(new String[] {});\r\n}",
          "path": "src/java/org/apache/commons/cli/PosixParser.java",
          "functionStartLine": 139,
          "functionName": "flatten",
          "functionAnnotation": "",
          "functionDoc": "\u003cp\u003eAn implementation of {@link Parser}\u0027s abstract\r\n{@link Parser#flatten(Options,String[],boolean) flatten} method.\u003c/p\u003e\r\n\r\n\u003cp\u003eThe following are the rules used by this flatten method.\r\n\u003col\u003e\r\n \u003cli\u003eif \u003ccode\u003estopAtNonOption\u003c/code\u003e is \u003cb\u003etrue\u003c/b\u003e then do not\r\n burst anymore of \u003ccode\u003earguments\u003c/code\u003e entries, just add each\r\n successive entry without further processing.  Otherwise, ignore\r\n \u003ccode\u003estopAtNonOption\u003c/code\u003e.\u003c/li\u003e\r\n \u003cli\u003eif the current \u003ccode\u003earguments\u003c/code\u003e entry is \"\u003cb\u003e--\u003c/b\u003e\"\r\n just add the entry to the list of processed tokens\u003c/li\u003e\r\n \u003cli\u003eif the current \u003ccode\u003earguments\u003c/code\u003e entry is \"\u003cb\u003e-\u003c/b\u003e\"\r\n just add the entry to the list of processed tokens\u003c/li\u003e\r\n \u003cli\u003eif the current \u003ccode\u003earguments\u003c/code\u003e entry is two characters\r\n in length and the first character is \"\u003cb\u003e-\u003c/b\u003e\" then check if this\r\n is a valid {@link Option} id.  If it is a valid id, then add the\r\n entry to the list of processed tokens and set the current {@link Option}\r\n member.  If it is not a valid id and \u003ccode\u003estopAtNonOption\u003c/code\u003e\r\n is true, then the remaining entries are copied to the list of \r\n processed tokens.  Otherwise, the current entry is ignored.\u003c/li\u003e\r\n \u003cli\u003eif the current \u003ccode\u003earguments\u003c/code\u003e entry is more than two\r\n characters in length and the first character is \"\u003cb\u003e-\u003c/b\u003e\" then\r\n we need to burst the entry to determine its constituents.  For more\r\n information on the bursting algorithm see \r\n {@link PosixParser#burstToken(String, boolean) burstToken}.\u003c/li\u003e\r\n \u003cli\u003eif the current \u003ccode\u003earguments\u003c/code\u003e entry is not handled \r\n by any of the previous rules, then the entry is added to the list\r\n of processed tokens.\u003c/li\u003e\r\n\u003c/ol\u003e\r\n\u003c/p\u003e\r\n\r\n@param options The command line {@link Options}\r\n@param arguments The command line arguments to be parsed\r\n@param stopAtNonOption Specifies whether to stop flattening\r\nwhen an non option is found.\r\n@return The flattened \u003ccode\u003earguments\u003c/code\u003e String array.\r\n",
          "diff": "",
          "extendedDetails": {
            "oldValue": "\u003cp\u003eAn implementation of {@link Parser}\u0027s abstract\r\n{@link Parser#flatten(Options,String[],boolean) flatten} method.\u003c/p\u003e\r\n\r\n\u003cp\u003eThe following are the rules used by this flatten method.\r\n\u003col\u003e\r\n \u003cli\u003eif \u003ccode\u003estopAtNonOption\u003c/code\u003e is \u003cb\u003etrue\u003c/b\u003e then do not\r\n burst anymore of \u003ccode\u003earguments\u003c/code\u003e entries, just add each\r\n successive entry without further processing.  Otherwise, ignore\r\n \u003ccode\u003estopAtNonOption\u003c/code\u003e.\u003c/li\u003e\r\n \u003cli\u003eif the current \u003ccode\u003earguments\u003c/code\u003e entry is \"\u003cb\u003e--\u003c/b\u003e\"\r\n just add the entry to the list of processed tokens\u003c/li\u003e\r\n \u003cli\u003eif the current \u003ccode\u003earguments\u003c/code\u003e entry is \"\u003cb\u003e-\u003c/b\u003e\"\r\n just add the entry to the list of processed tokens\u003c/li\u003e\r\n \u003cli\u003eif the current \u003ccode\u003earguments\u003c/code\u003e entry is two characters\r\n in length and the first character is \"\u003cb\u003e-\u003c/b\u003e\" then check if this\r\n is a valid {@link Option} id.  If it is a valid id, then add the\r\n entry to the list of processed tokens and set the current {@link Option}\r\n member.  If it is not a valid id and \u003ccode\u003estopAtNonOption\u003c/code\u003e\r\n is true, then the remaining entries are copied to the list of \r\n processed tokens.  Otherwise, the current entry is ignored.\u003c/li\u003e\r\n \u003cli\u003eif the current \u003ccode\u003earguments\u003c/code\u003e entry is more than two\r\n characters in length and the first character is \"\u003cb\u003e-\u003c/b\u003e\" then\r\n we need to burst the entry to determine its constituents.  For more\r\n information on the bursting algorithm see \r\n {@link PosixParser#burstToken( String, boolean) burstToken}.\u003c/li\u003e\r\n \u003cli\u003eif the current \u003ccode\u003earguments\u003c/code\u003e entry is not handled \r\n by any of the previous rules, then the entry is added to the list\r\n of processed tokens.\u003c/li\u003e\r\n\u003c/ol\u003e\r\n\u003c/p\u003e\r\n\r\n@param options The command line {@link Options}\r\n@param arguments The command line arguments to be parsed\r\n@param stopAtNonOption Specifies whether to stop flattening\r\nwhen an non option is found.\r\n@return The flattened \u003ccode\u003earguments\u003c/code\u003e String array.\r\n",
            "newValue": "\u003cp\u003eAn implementation of {@link Parser}\u0027s abstract\r\n{@link Parser#flatten(Options,String[],boolean) flatten} method.\u003c/p\u003e\r\n\r\n\u003cp\u003eThe following are the rules used by this flatten method.\r\n\u003col\u003e\r\n \u003cli\u003eif \u003ccode\u003estopAtNonOption\u003c/code\u003e is \u003cb\u003etrue\u003c/b\u003e then do not\r\n burst anymore of \u003ccode\u003earguments\u003c/code\u003e entries, just add each\r\n successive entry without further processing.  Otherwise, ignore\r\n \u003ccode\u003estopAtNonOption\u003c/code\u003e.\u003c/li\u003e\r\n \u003cli\u003eif the current \u003ccode\u003earguments\u003c/code\u003e entry is \"\u003cb\u003e--\u003c/b\u003e\"\r\n just add the entry to the list of processed tokens\u003c/li\u003e\r\n \u003cli\u003eif the current \u003ccode\u003earguments\u003c/code\u003e entry is \"\u003cb\u003e-\u003c/b\u003e\"\r\n just add the entry to the list of processed tokens\u003c/li\u003e\r\n \u003cli\u003eif the current \u003ccode\u003earguments\u003c/code\u003e entry is two characters\r\n in length and the first character is \"\u003cb\u003e-\u003c/b\u003e\" then check if this\r\n is a valid {@link Option} id.  If it is a valid id, then add the\r\n entry to the list of processed tokens and set the current {@link Option}\r\n member.  If it is not a valid id and \u003ccode\u003estopAtNonOption\u003c/code\u003e\r\n is true, then the remaining entries are copied to the list of \r\n processed tokens.  Otherwise, the current entry is ignored.\u003c/li\u003e\r\n \u003cli\u003eif the current \u003ccode\u003earguments\u003c/code\u003e entry is more than two\r\n characters in length and the first character is \"\u003cb\u003e-\u003c/b\u003e\" then\r\n we need to burst the entry to determine its constituents.  For more\r\n information on the bursting algorithm see \r\n {@link PosixParser#burstToken(String, boolean) burstToken}.\u003c/li\u003e\r\n \u003cli\u003eif the current \u003ccode\u003earguments\u003c/code\u003e entry is not handled \r\n by any of the previous rules, then the entry is added to the list\r\n of processed tokens.\u003c/li\u003e\r\n\u003c/ol\u003e\r\n\u003c/p\u003e\r\n\r\n@param options The command line {@link Options}\r\n@param arguments The command line arguments to be parsed\r\n@param stopAtNonOption Specifies whether to stop flattening\r\nwhen an non option is found.\r\n@return The flattened \u003ccode\u003earguments\u003c/code\u003e String array.\r\n"
          }
        },
        {
          "type": "Yformatchange",
          "commitMessage": "checkstyle fixes\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/cli/trunk@129857 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "12/10/02 1:47 AM",
          "commitName": "9b2b8038b52be022e42c8c7fdf26e236888f94c5",
          "commitAuthor": "John Keyes",
          "commitDateOld": "9/20/02 1:59 AM",
          "commitNameOld": "c08f73835beda155421d78ee4f96d9e11c501159",
          "commitAuthorOld": "John Keyes",
          "daysBetweenCommits": 81.03,
          "commitsBetweenForRepo": 35,
          "commitsBetweenForFile": 1,
          "actualSource": "protected String[] flatten(Options options, String[] arguments, boolean stopAtNonOption) {\r\n    init();\r\n    this.options \u003d options;\r\n    Iterator iter \u003d Arrays.asList(arguments).iterator();\r\n    String token \u003d null;\r\n    while (iter.hasNext()) {\r\n        token \u003d (String) iter.next();\r\n        if (token.startsWith(\"--\")) {\r\n            if (token.indexOf(\u0027\u003d\u0027) !\u003d -1) {\r\n                tokens.add(token.substring(0, token.indexOf(\u0027\u003d\u0027)));\r\n                tokens.add(token.substring(token.indexOf(\u0027\u003d\u0027) + 1, token.length()));\r\n            } else {\r\n                tokens.add(token);\r\n            }\r\n        } else if (\"-\".equals(token)) {\r\n            processSingleHyphen(token);\r\n        } else if (token.startsWith(\"-\")) {\r\n            int tokenLength \u003d token.length();\r\n            if (tokenLength \u003d\u003d 2) {\r\n                processOptionToken(token, stopAtNonOption);\r\n            } else {\r\n                burstToken(token, stopAtNonOption);\r\n            }\r\n        } else {\r\n            if (stopAtNonOption) {\r\n                process(token);\r\n            } else {\r\n                tokens.add(token);\r\n            }\r\n        }\r\n        gobble(iter);\r\n    }\r\n    return (String[]) tokens.toArray(new String[] {});\r\n}",
          "path": "src/java/org/apache/commons/cli/PosixParser.java",
          "functionStartLine": 139,
          "functionName": "flatten",
          "functionAnnotation": "",
          "functionDoc": "\u003cp\u003eAn implementation of {@link Parser}\u0027s abstract\r\n{@link Parser#flatten(Options,String[],boolean) flatten} method.\u003c/p\u003e\r\n\r\n\u003cp\u003eThe following are the rules used by this flatten method.\r\n\u003col\u003e\r\n \u003cli\u003eif \u003ccode\u003estopAtNonOption\u003c/code\u003e is \u003cb\u003etrue\u003c/b\u003e then do not\r\n burst anymore of \u003ccode\u003earguments\u003c/code\u003e entries, just add each\r\n successive entry without further processing.  Otherwise, ignore\r\n \u003ccode\u003estopAtNonOption\u003c/code\u003e.\u003c/li\u003e\r\n \u003cli\u003eif the current \u003ccode\u003earguments\u003c/code\u003e entry is \"\u003cb\u003e--\u003c/b\u003e\"\r\n just add the entry to the list of processed tokens\u003c/li\u003e\r\n \u003cli\u003eif the current \u003ccode\u003earguments\u003c/code\u003e entry is \"\u003cb\u003e-\u003c/b\u003e\"\r\n just add the entry to the list of processed tokens\u003c/li\u003e\r\n \u003cli\u003eif the current \u003ccode\u003earguments\u003c/code\u003e entry is two characters\r\n in length and the first character is \"\u003cb\u003e-\u003c/b\u003e\" then check if this\r\n is a valid {@link Option} id.  If it is a valid id, then add the\r\n entry to the list of processed tokens and set the current {@link Option}\r\n member.  If it is not a valid id and \u003ccode\u003estopAtNonOption\u003c/code\u003e\r\n is true, then the remaining entries are copied to the list of \r\n processed tokens.  Otherwise, the current entry is ignored.\u003c/li\u003e\r\n \u003cli\u003eif the current \u003ccode\u003earguments\u003c/code\u003e entry is more than two\r\n characters in length and the first character is \"\u003cb\u003e-\u003c/b\u003e\" then\r\n we need to burst the entry to determine its constituents.  For more\r\n information on the bursting algorithm see \r\n {@link PosixParser#burstToken(String, boolean) burstToken}.\u003c/li\u003e\r\n \u003cli\u003eif the current \u003ccode\u003earguments\u003c/code\u003e entry is not handled \r\n by any of the previous rules, then the entry is added to the list\r\n of processed tokens.\u003c/li\u003e\r\n\u003c/ol\u003e\r\n\u003c/p\u003e\r\n\r\n@param options The command line {@link Options}\r\n@param arguments The command line arguments to be parsed\r\n@param stopAtNonOption Specifies whether to stop flattening\r\nwhen an non option is found.\r\n@return The flattened \u003ccode\u003earguments\u003c/code\u003e String array.\r\n",
          "diff": "",
          "extendedDetails": {}
        }
      ]
    },
    "f1a32a54f9ccc6895f94122aa32937167cbc3d3c": {
      "type": "Ybodychange",
      "commitMessage": "added support for special long options like in ls\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/cli/trunk@129810 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "9/9/02 10:35 PM",
      "commitName": "f1a32a54f9ccc6895f94122aa32937167cbc3d3c",
      "commitAuthor": "John Keyes",
      "commitDateOld": "8/26/02 11:15 PM",
      "commitNameOld": "745d1a535c9cf45d24455afc150b808981c8e0df",
      "commitAuthorOld": "John Keyes",
      "daysBetweenCommits": 13.97,
      "commitsBetweenForRepo": 5,
      "commitsBetweenForFile": 1,
      "actualSource": "protected String[] flatten(Options options, String[] arguments, boolean stopAtNonOption) {\r\n    init();\r\n    this.options \u003d options;\r\n    Iterator iter \u003d Arrays.asList(arguments).iterator();\r\n    String token \u003d null;\r\n    while (iter.hasNext()) {\r\n        token \u003d (String) iter.next();\r\n        if (token.startsWith(\"--\")) {\r\n            if (token.indexOf(\u0027\u003d\u0027) !\u003d -1) {\r\n                tokens.add(token.substring(0, token.indexOf(\u0027\u003d\u0027)));\r\n                tokens.add(token.substring(token.indexOf(\u0027\u003d\u0027) + 1, token.length()));\r\n            } else {\r\n                tokens.add(token);\r\n            }\r\n        } else if (\"-\".equals(token)) {\r\n            processSingleHyphen(token);\r\n        } else if (token.startsWith(\"-\")) {\r\n            int tokenLength \u003d token.length();\r\n            if (tokenLength \u003d\u003d 2) {\r\n                processOptionToken(token, stopAtNonOption);\r\n            } else {\r\n                burstToken(token, stopAtNonOption);\r\n            }\r\n        } else {\r\n            if (stopAtNonOption) {\r\n                process(token);\r\n            } else {\r\n                tokens.add(token);\r\n            }\r\n        }\r\n        gobble(iter);\r\n    }\r\n    return (String[]) tokens.toArray(new String[] {});\r\n}",
      "path": "src/java/org/apache/commons/cli/PosixParser.java",
      "functionStartLine": 137,
      "functionName": "flatten",
      "functionAnnotation": "",
      "functionDoc": "\u003cp\u003eAn implementation of {@link Parser}\u0027s abstract\r\n{@link Parser#flatten(Options,String[],boolean) flatten} method.\u003c/p\u003e\r\n\r\n\u003cp\u003eThe following are the rules used by this flatten method.\r\n\u003col\u003e\r\n \u003cli\u003eif \u003ccode\u003estopAtNonOption\u003c/code\u003e is \u003cb\u003etrue\u003c/b\u003e then do not\r\n burst anymore of \u003ccode\u003earguments\u003c/code\u003e entries, just add each\r\n successive entry without further processing.  Otherwise, ignore\r\n \u003ccode\u003estopAtNonOption\u003c/code\u003e.\u003c/li\u003e\r\n \u003cli\u003eif the current \u003ccode\u003earguments\u003c/code\u003e entry is \"\u003cb\u003e--\u003c/b\u003e\"\r\n just add the entry to the list of processed tokens\u003c/li\u003e\r\n \u003cli\u003eif the current \u003ccode\u003earguments\u003c/code\u003e entry is \"\u003cb\u003e-\u003c/b\u003e\"\r\n just add the entry to the list of processed tokens\u003c/li\u003e\r\n \u003cli\u003eif the current \u003ccode\u003earguments\u003c/code\u003e entry is two characters\r\n in length and the first character is \"\u003cb\u003e-\u003c/b\u003e\" then check if this\r\n is a valid {@link Option} id.  If it is a valid id, then add the\r\n entry to the list of processed tokens and set the current {@link Option}\r\n member.  If it is not a valid id and \u003ccode\u003estopAtNonOption\u003c/code\u003e\r\n is true, then the remaining entries are copied to the list of \r\n processed tokens.  Otherwise, the current entry is ignored.\u003c/li\u003e\r\n \u003cli\u003eif the current \u003ccode\u003earguments\u003c/code\u003e entry is more than two\r\n characters in length and the first character is \"\u003cb\u003e-\u003c/b\u003e\" then\r\n we need to burst the entry to determine its constituents.  For more\r\n information on the bursting algorithm see \r\n {@link PosixParser#burstToken( String, boolean) burstToken}.\u003c/li\u003e\r\n \u003cli\u003eif the current \u003ccode\u003earguments\u003c/code\u003e entry is not handled \r\n by any of the previous rules, then the entry is added to the list\r\n of processed tokens.\u003c/li\u003e\r\n\u003c/ol\u003e\r\n\u003c/p\u003e\r\n\r\n@param options The command line {@link Options}\r\n@param arguments The command line arguments to be parsed\r\n@param stopAtNonOption Specifies whether to stop flattening\r\nwhen an non option is found.\r\n@return The flattened \u003ccode\u003earguments\u003c/code\u003e String array.\r\n",
      "diff": "@@ -1,29 +1,34 @@\n protected String[] flatten(Options options, String[] arguments, boolean stopAtNonOption) {\r\n     init();\r\n     this.options \u003d options;\r\n     Iterator iter \u003d Arrays.asList(arguments).iterator();\r\n     String token \u003d null;\r\n     while (iter.hasNext()) {\r\n         token \u003d (String) iter.next();\r\n         if (token.startsWith(\"--\")) {\r\n-            tokens.add(token);\r\n+            if (token.indexOf(\u0027\u003d\u0027) !\u003d -1) {\r\n+                tokens.add(token.substring(0, token.indexOf(\u0027\u003d\u0027)));\r\n+                tokens.add(token.substring(token.indexOf(\u0027\u003d\u0027) + 1, token.length()));\r\n+            } else {\r\n+                tokens.add(token);\r\n+            }\r\n         } else if (\"-\".equals(token)) {\r\n             processSingleHyphen(token);\r\n         } else if (token.startsWith(\"-\")) {\r\n             int tokenLength \u003d token.length();\r\n             if (tokenLength \u003d\u003d 2) {\r\n                 processOptionToken(token, stopAtNonOption);\r\n             } else {\r\n                 burstToken(token, stopAtNonOption);\r\n             }\r\n         } else {\r\n             if (stopAtNonOption) {\r\n                 process(token);\r\n             } else {\r\n                 tokens.add(token);\r\n             }\r\n         }\r\n         gobble(iter);\r\n     }\r\n     return (String[]) tokens.toArray(new String[] {});\r\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "745d1a535c9cf45d24455afc150b808981c8e0df": {
      "type": "Ydocchange",
      "commitMessage": "javadoc updates\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/cli/trunk@129805 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "8/26/02 11:15 PM",
      "commitName": "745d1a535c9cf45d24455afc150b808981c8e0df",
      "commitAuthor": "John Keyes",
      "commitDateOld": "8/25/02 1:15 AM",
      "commitNameOld": "dde69934d7f0bee13e4cd1fc99a7d60ce95a0c78",
      "commitAuthorOld": "John Keyes",
      "daysBetweenCommits": 1.92,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "protected String[] flatten(Options options, String[] arguments, boolean stopAtNonOption) {\r\n    init();\r\n    this.options \u003d options;\r\n    Iterator iter \u003d Arrays.asList(arguments).iterator();\r\n    String token \u003d null;\r\n    while (iter.hasNext()) {\r\n        token \u003d (String) iter.next();\r\n        if (token.startsWith(\"--\")) {\r\n            tokens.add(token);\r\n        } else if (\"-\".equals(token)) {\r\n            processSingleHyphen(token);\r\n        } else if (token.startsWith(\"-\")) {\r\n            int tokenLength \u003d token.length();\r\n            if (tokenLength \u003d\u003d 2) {\r\n                processOptionToken(token, stopAtNonOption);\r\n            } else {\r\n                burstToken(token, stopAtNonOption);\r\n            }\r\n        } else {\r\n            if (stopAtNonOption) {\r\n                process(token);\r\n            } else {\r\n                tokens.add(token);\r\n            }\r\n        }\r\n        gobble(iter);\r\n    }\r\n    return (String[]) tokens.toArray(new String[] {});\r\n}",
      "path": "src/java/org/apache/commons/cli/PosixParser.java",
      "functionStartLine": 137,
      "functionName": "flatten",
      "functionAnnotation": "",
      "functionDoc": "\u003cp\u003eAn implementation of {@link Parser}\u0027s abstract\r\n{@link Parser#flatten(Options,String[],boolean) flatten} method.\u003c/p\u003e\r\n\r\n\u003cp\u003eThe following are the rules used by this flatten method.\r\n\u003col\u003e\r\n \u003cli\u003eif \u003ccode\u003estopAtNonOption\u003c/code\u003e is \u003cb\u003etrue\u003c/b\u003e then do not\r\n burst anymore of \u003ccode\u003earguments\u003c/code\u003e entries, just add each\r\n successive entry without further processing.  Otherwise, ignore\r\n \u003ccode\u003estopAtNonOption\u003c/code\u003e.\u003c/li\u003e\r\n \u003cli\u003eif the current \u003ccode\u003earguments\u003c/code\u003e entry is \"\u003cb\u003e--\u003c/b\u003e\"\r\n just add the entry to the list of processed tokens\u003c/li\u003e\r\n \u003cli\u003eif the current \u003ccode\u003earguments\u003c/code\u003e entry is \"\u003cb\u003e-\u003c/b\u003e\"\r\n just add the entry to the list of processed tokens\u003c/li\u003e\r\n \u003cli\u003eif the current \u003ccode\u003earguments\u003c/code\u003e entry is two characters\r\n in length and the first character is \"\u003cb\u003e-\u003c/b\u003e\" then check if this\r\n is a valid {@link Option} id.  If it is a valid id, then add the\r\n entry to the list of processed tokens and set the current {@link Option}\r\n member.  If it is not a valid id and \u003ccode\u003estopAtNonOption\u003c/code\u003e\r\n is true, then the remaining entries are copied to the list of \r\n processed tokens.  Otherwise, the current entry is ignored.\u003c/li\u003e\r\n \u003cli\u003eif the current \u003ccode\u003earguments\u003c/code\u003e entry is more than two\r\n characters in length and the first character is \"\u003cb\u003e-\u003c/b\u003e\" then\r\n we need to burst the entry to determine its constituents.  For more\r\n information on the bursting algorithm see \r\n {@link PosixParser#burstToken( String, boolean) burstToken}.\u003c/li\u003e\r\n \u003cli\u003eif the current \u003ccode\u003earguments\u003c/code\u003e entry is not handled \r\n by any of the previous rules, then the entry is added to the list\r\n of processed tokens.\u003c/li\u003e\r\n\u003c/ol\u003e\r\n\u003c/p\u003e\r\n\r\n@param options The command line {@link Options}\r\n@param arguments The command line arguments to be parsed\r\n@param stopAtNonOption Specifies whether to stop flattening\r\nwhen an non option is found.\r\n@return The flattened \u003ccode\u003earguments\u003c/code\u003e String array.\r\n",
      "diff": "",
      "extendedDetails": {
        "oldValue": "",
        "newValue": "\u003cp\u003eAn implementation of {@link Parser}\u0027s abstract\r\n{@link Parser#flatten(Options,String[],boolean) flatten} method.\u003c/p\u003e\r\n\r\n\u003cp\u003eThe following are the rules used by this flatten method.\r\n\u003col\u003e\r\n \u003cli\u003eif \u003ccode\u003estopAtNonOption\u003c/code\u003e is \u003cb\u003etrue\u003c/b\u003e then do not\r\n burst anymore of \u003ccode\u003earguments\u003c/code\u003e entries, just add each\r\n successive entry without further processing.  Otherwise, ignore\r\n \u003ccode\u003estopAtNonOption\u003c/code\u003e.\u003c/li\u003e\r\n \u003cli\u003eif the current \u003ccode\u003earguments\u003c/code\u003e entry is \"\u003cb\u003e--\u003c/b\u003e\"\r\n just add the entry to the list of processed tokens\u003c/li\u003e\r\n \u003cli\u003eif the current \u003ccode\u003earguments\u003c/code\u003e entry is \"\u003cb\u003e-\u003c/b\u003e\"\r\n just add the entry to the list of processed tokens\u003c/li\u003e\r\n \u003cli\u003eif the current \u003ccode\u003earguments\u003c/code\u003e entry is two characters\r\n in length and the first character is \"\u003cb\u003e-\u003c/b\u003e\" then check if this\r\n is a valid {@link Option} id.  If it is a valid id, then add the\r\n entry to the list of processed tokens and set the current {@link Option}\r\n member.  If it is not a valid id and \u003ccode\u003estopAtNonOption\u003c/code\u003e\r\n is true, then the remaining entries are copied to the list of \r\n processed tokens.  Otherwise, the current entry is ignored.\u003c/li\u003e\r\n \u003cli\u003eif the current \u003ccode\u003earguments\u003c/code\u003e entry is more than two\r\n characters in length and the first character is \"\u003cb\u003e-\u003c/b\u003e\" then\r\n we need to burst the entry to determine its constituents.  For more\r\n information on the bursting algorithm see \r\n {@link PosixParser#burstToken( String, boolean) burstToken}.\u003c/li\u003e\r\n \u003cli\u003eif the current \u003ccode\u003earguments\u003c/code\u003e entry is not handled \r\n by any of the previous rules, then the entry is added to the list\r\n of processed tokens.\u003c/li\u003e\r\n\u003c/ol\u003e\r\n\u003c/p\u003e\r\n\r\n@param options The command line {@link Options}\r\n@param arguments The command line arguments to be parsed\r\n@param stopAtNonOption Specifies whether to stop flattening\r\nwhen an non option is found.\r\n@return The flattened \u003ccode\u003earguments\u003c/code\u003e String array.\r\n"
      }
    },
    "dde69934d7f0bee13e4cd1fc99a7d60ce95a0c78": {
      "type": "Yintroduced",
      "commitMessage": "separated the argument flattening from the Option processing\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/cli/trunk@129804 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "8/25/02 1:15 AM",
      "commitName": "dde69934d7f0bee13e4cd1fc99a7d60ce95a0c78",
      "commitAuthor": "John Keyes",
      "diff": "@@ -0,0 +1,29 @@\n+protected String[] flatten(Options options, String[] arguments, boolean stopAtNonOption) {\r\n+    init();\r\n+    this.options \u003d options;\r\n+    Iterator iter \u003d Arrays.asList(arguments).iterator();\r\n+    String token \u003d null;\r\n+    while (iter.hasNext()) {\r\n+        token \u003d (String) iter.next();\r\n+        if (token.startsWith(\"--\")) {\r\n+            tokens.add(token);\r\n+        } else if (\"-\".equals(token)) {\r\n+            processSingleHyphen(token);\r\n+        } else if (token.startsWith(\"-\")) {\r\n+            int tokenLength \u003d token.length();\r\n+            if (tokenLength \u003d\u003d 2) {\r\n+                processOptionToken(token, stopAtNonOption);\r\n+            } else {\r\n+                burstToken(token, stopAtNonOption);\r\n+            }\r\n+        } else {\r\n+            if (stopAtNonOption) {\r\n+                process(token);\r\n+            } else {\r\n+                tokens.add(token);\r\n+            }\r\n+        }\r\n+        gobble(iter);\r\n+    }\r\n+    return (String[]) tokens.toArray(new String[] {});\r\n+}\n\\ No newline at end of file\n",
      "actualSource": "protected String[] flatten(Options options, String[] arguments, boolean stopAtNonOption) {\r\n    init();\r\n    this.options \u003d options;\r\n    Iterator iter \u003d Arrays.asList(arguments).iterator();\r\n    String token \u003d null;\r\n    while (iter.hasNext()) {\r\n        token \u003d (String) iter.next();\r\n        if (token.startsWith(\"--\")) {\r\n            tokens.add(token);\r\n        } else if (\"-\".equals(token)) {\r\n            processSingleHyphen(token);\r\n        } else if (token.startsWith(\"-\")) {\r\n            int tokenLength \u003d token.length();\r\n            if (tokenLength \u003d\u003d 2) {\r\n                processOptionToken(token, stopAtNonOption);\r\n            } else {\r\n                burstToken(token, stopAtNonOption);\r\n            }\r\n        } else {\r\n            if (stopAtNonOption) {\r\n                process(token);\r\n            } else {\r\n                tokens.add(token);\r\n            }\r\n        }\r\n        gobble(iter);\r\n    }\r\n    return (String[]) tokens.toArray(new String[] {});\r\n}",
      "path": "src/java/org/apache/commons/cli/PosixParser.java",
      "functionStartLine": 25,
      "functionName": "flatten",
      "functionAnnotation": "",
      "functionDoc": ""
    }
  }
}