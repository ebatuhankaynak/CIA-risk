{
  "origin": "codeshovel",
  "repositoryName": "commons-cli",
  "repositoryPath": "D:/_SELEN/_2022-2023/CS588/GitHub_Dataset/commons-cli/commons-cli/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ApplicationTest.java",
  "functionName": "testAnt",
  "functionId": "testAnt",
  "sourceFilePath": "src/test/java/org/apache/commons/cli/ApplicationTest.java",
  "functionAnnotation": "@Test",
  "functionDoc": "Ant test\r\n",
  "functionStartLine": 47,
  "functionEndLine": 86,
  "numCommitsSeen": 33,
  "timeTaken": 502,
  "changeHistory": [
    "bc0edc47dbf47cdaa3485cfb724982f377c900df",
    "357a8b0b8f1090db29e0d541a9419f570a78457b",
    "60835e2f29d4ec09eead7789405d99f92c36a29e",
    "cd745ecf52fb2fe8fed1c67fc9149e4be11a73f0",
    "f887e8b6e2ebb519c6d0e51b1ddae6bd356dc3c0",
    "6a6bb48840aa0043200a5d9f6fffea47aea1a8db",
    "c08f73835beda155421d78ee4f96d9e11c501159",
    "f9df51847e354190206432ba87661586e6dc814d",
    "1060ee73965dc30d92afbad80525bd4cdabe9153",
    "16b91ad2b9f5f524b2b07ba4515c65479999f7ee",
    "fbc0bd02b0d9d97ae044aebbbfbc5b13d3eacafe",
    "e56c41bcf610081622b663fc053521552705909f",
    "66d0ae6216730abd8bd736e210be73229c8e807b",
    "094746596cb39b2bfbd1843233b7dd2009736c00",
    "ead3757ef361f85cfb92754e808dafd74eb15702"
  ],
  "changeHistoryShort": {
    "bc0edc47dbf47cdaa3485cfb724982f377c900df": "Ybodychange",
    "357a8b0b8f1090db29e0d541a9419f570a78457b": "Ybodychange",
    "60835e2f29d4ec09eead7789405d99f92c36a29e": "Yannotationchange",
    "cd745ecf52fb2fe8fed1c67fc9149e4be11a73f0": "Yfilerename",
    "f887e8b6e2ebb519c6d0e51b1ddae6bd356dc3c0": "Ymultichange(Yexceptionschange,Ybodychange)",
    "6a6bb48840aa0043200a5d9f6fffea47aea1a8db": "Ybodychange",
    "c08f73835beda155421d78ee4f96d9e11c501159": "Ybodychange",
    "f9df51847e354190206432ba87661586e6dc814d": "Ybodychange",
    "1060ee73965dc30d92afbad80525bd4cdabe9153": "Ybodychange",
    "16b91ad2b9f5f524b2b07ba4515c65479999f7ee": "Ybodychange",
    "fbc0bd02b0d9d97ae044aebbbfbc5b13d3eacafe": "Ybodychange",
    "e56c41bcf610081622b663fc053521552705909f": "Ybodychange",
    "66d0ae6216730abd8bd736e210be73229c8e807b": "Ybodychange",
    "094746596cb39b2bfbd1843233b7dd2009736c00": "Ymultichange(Ybodychange,Ydocchange)",
    "ead3757ef361f85cfb92754e808dafd74eb15702": "Yintroduced"
  },
  "changeHistoryDetails": {
    "bc0edc47dbf47cdaa3485cfb724982f377c900df": {
      "type": "Ybodychange",
      "commitMessage": "Clean ups.\n\n- maven-checkstyle-plugin 3.1.1 -\u003e 3.1.2.\n- checkstyle -\u003e 9.0\n- Updates for 21st century.\n- No need to nest else clause.\n- Use simple array declarations.\n- Use valueOf instead of new for Numbers.\n- Consistent formatting.\n- Remove some inline comments //-----...\n",
      "commitDate": "10/2/21 11:04 PM",
      "commitName": "bc0edc47dbf47cdaa3485cfb724982f377c900df",
      "commitAuthor": "Gary Gregory",
      "commitDateOld": "12/28/20 6:44 PM",
      "commitNameOld": "c67275279176504a6f5fc556cfa247e1df02a580",
      "commitAuthorOld": "Arturo Bernal",
      "daysBetweenCommits": 278.18,
      "commitsBetweenForRepo": 38,
      "commitsBetweenForFile": 1,
      "actualSource": "@Test\r\npublic void testAnt() throws Exception {\r\n    final CommandLineParser parser \u003d new GnuParser();\r\n    final Options options \u003d new Options();\r\n    options.addOption(\"help\", false, \"print this message\");\r\n    options.addOption(\"projecthelp\", false, \"print project help information\");\r\n    options.addOption(\"version\", false, \"print the version information and exit\");\r\n    options.addOption(\"quiet\", false, \"be extra quiet\");\r\n    options.addOption(\"verbose\", false, \"be extra verbose\");\r\n    options.addOption(\"debug\", false, \"print debug information\");\r\n    options.addOption(\"logfile\", true, \"use given file for log\");\r\n    options.addOption(\"logger\", true, \"the class which is to perform the logging\");\r\n    options.addOption(\"listener\", true, \"add an instance of a class as a project listener\");\r\n    options.addOption(\"buildfile\", true, \"use given buildfile\");\r\n    options.addOption(OptionBuilder.withDescription(\"use value for given property\").hasArgs().withValueSeparator().create(\u0027D\u0027));\r\n    options.addOption(\"find\", true, \"search for buildfile towards the root of the filesystem and use it\");\r\n    final String[] args \u003d { \"-buildfile\", \"mybuild.xml\", \"-Dproperty\u003dvalue\", \"-Dproperty1\u003dvalue1\", \"-projecthelp\" };\r\n    final CommandLine line \u003d parser.parse(options, args);\r\n    final String[] opts \u003d line.getOptionValues(\"D\");\r\n    assertEquals(\"property\", opts[0]);\r\n    assertEquals(\"value\", opts[1]);\r\n    assertEquals(\"property1\", opts[2]);\r\n    assertEquals(\"value1\", opts[3]);\r\n    assertEquals(line.getOptionValue(\"buildfile\"), \"mybuild.xml\");\r\n    assertTrue(line.hasOption(\"projecthelp\"));\r\n}",
      "path": "src/test/java/org/apache/commons/cli/ApplicationTest.java",
      "functionStartLine": 74,
      "functionName": "testAnt",
      "functionAnnotation": "@Test",
      "functionDoc": "Ant test\r\n",
      "diff": "@@ -1,26 +1,26 @@\n @Test\r\n public void testAnt() throws Exception {\r\n     final CommandLineParser parser \u003d new GnuParser();\r\n     final Options options \u003d new Options();\r\n     options.addOption(\"help\", false, \"print this message\");\r\n     options.addOption(\"projecthelp\", false, \"print project help information\");\r\n     options.addOption(\"version\", false, \"print the version information and exit\");\r\n     options.addOption(\"quiet\", false, \"be extra quiet\");\r\n     options.addOption(\"verbose\", false, \"be extra verbose\");\r\n     options.addOption(\"debug\", false, \"print debug information\");\r\n     options.addOption(\"logfile\", true, \"use given file for log\");\r\n     options.addOption(\"logger\", true, \"the class which is to perform the logging\");\r\n     options.addOption(\"listener\", true, \"add an instance of a class as a project listener\");\r\n     options.addOption(\"buildfile\", true, \"use given buildfile\");\r\n     options.addOption(OptionBuilder.withDescription(\"use value for given property\").hasArgs().withValueSeparator().create(\u0027D\u0027));\r\n     options.addOption(\"find\", true, \"search for buildfile towards the root of the filesystem and use it\");\r\n-    final String[] args \u003d new String[] { \"-buildfile\", \"mybuild.xml\", \"-Dproperty\u003dvalue\", \"-Dproperty1\u003dvalue1\", \"-projecthelp\" };\r\n+    final String[] args \u003d { \"-buildfile\", \"mybuild.xml\", \"-Dproperty\u003dvalue\", \"-Dproperty1\u003dvalue1\", \"-projecthelp\" };\r\n     final CommandLine line \u003d parser.parse(options, args);\r\n     final String[] opts \u003d line.getOptionValues(\"D\");\r\n     assertEquals(\"property\", opts[0]);\r\n     assertEquals(\"value\", opts[1]);\r\n     assertEquals(\"property1\", opts[2]);\r\n     assertEquals(\"value1\", opts[3]);\r\n     assertEquals(line.getOptionValue(\"buildfile\"), \"mybuild.xml\");\r\n     assertTrue(line.hasOption(\"projecthelp\"));\r\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "357a8b0b8f1090db29e0d541a9419f570a78457b": {
      "type": "Ybodychange",
      "commitMessage": "Add final modifier to local variables.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/cli/trunk@1797673 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "6/5/17 7:37 PM",
      "commitName": "357a8b0b8f1090db29e0d541a9419f570a78457b",
      "commitAuthor": "Gary D. Gregory",
      "commitDateOld": "5/3/15 5:48 PM",
      "commitNameOld": "22576c14c60092fb6c67789ab2f5ee14952c0c18",
      "commitAuthorOld": "Benedikt Ritter",
      "daysBetweenCommits": 764.08,
      "commitsBetweenForRepo": 53,
      "commitsBetweenForFile": 1,
      "actualSource": "@Test\r\npublic void testAnt() throws Exception {\r\n    final CommandLineParser parser \u003d new GnuParser();\r\n    final Options options \u003d new Options();\r\n    options.addOption(\"help\", false, \"print this message\");\r\n    options.addOption(\"projecthelp\", false, \"print project help information\");\r\n    options.addOption(\"version\", false, \"print the version information and exit\");\r\n    options.addOption(\"quiet\", false, \"be extra quiet\");\r\n    options.addOption(\"verbose\", false, \"be extra verbose\");\r\n    options.addOption(\"debug\", false, \"print debug information\");\r\n    options.addOption(\"logfile\", true, \"use given file for log\");\r\n    options.addOption(\"logger\", true, \"the class which is to perform the logging\");\r\n    options.addOption(\"listener\", true, \"add an instance of a class as a project listener\");\r\n    options.addOption(\"buildfile\", true, \"use given buildfile\");\r\n    options.addOption(OptionBuilder.withDescription(\"use value for given property\").hasArgs().withValueSeparator().create(\u0027D\u0027));\r\n    options.addOption(\"find\", true, \"search for buildfile towards the root of the filesystem and use it\");\r\n    final String[] args \u003d new String[] { \"-buildfile\", \"mybuild.xml\", \"-Dproperty\u003dvalue\", \"-Dproperty1\u003dvalue1\", \"-projecthelp\" };\r\n    final CommandLine line \u003d parser.parse(options, args);\r\n    final String[] opts \u003d line.getOptionValues(\"D\");\r\n    assertEquals(\"property\", opts[0]);\r\n    assertEquals(\"value\", opts[1]);\r\n    assertEquals(\"property1\", opts[2]);\r\n    assertEquals(\"value1\", opts[3]);\r\n    assertEquals(line.getOptionValue(\"buildfile\"), \"mybuild.xml\");\r\n    assertTrue(line.hasOption(\"projecthelp\"));\r\n}",
      "path": "src/test/java/org/apache/commons/cli/ApplicationTest.java",
      "functionStartLine": 72,
      "functionName": "testAnt",
      "functionAnnotation": "@Test",
      "functionDoc": "Ant test\r\n",
      "diff": "@@ -1,26 +1,26 @@\n @Test\r\n public void testAnt() throws Exception {\r\n-    CommandLineParser parser \u003d new GnuParser();\r\n-    Options options \u003d new Options();\r\n+    final CommandLineParser parser \u003d new GnuParser();\r\n+    final Options options \u003d new Options();\r\n     options.addOption(\"help\", false, \"print this message\");\r\n     options.addOption(\"projecthelp\", false, \"print project help information\");\r\n     options.addOption(\"version\", false, \"print the version information and exit\");\r\n     options.addOption(\"quiet\", false, \"be extra quiet\");\r\n     options.addOption(\"verbose\", false, \"be extra verbose\");\r\n     options.addOption(\"debug\", false, \"print debug information\");\r\n     options.addOption(\"logfile\", true, \"use given file for log\");\r\n     options.addOption(\"logger\", true, \"the class which is to perform the logging\");\r\n     options.addOption(\"listener\", true, \"add an instance of a class as a project listener\");\r\n     options.addOption(\"buildfile\", true, \"use given buildfile\");\r\n     options.addOption(OptionBuilder.withDescription(\"use value for given property\").hasArgs().withValueSeparator().create(\u0027D\u0027));\r\n     options.addOption(\"find\", true, \"search for buildfile towards the root of the filesystem and use it\");\r\n-    String[] args \u003d new String[] { \"-buildfile\", \"mybuild.xml\", \"-Dproperty\u003dvalue\", \"-Dproperty1\u003dvalue1\", \"-projecthelp\" };\r\n-    CommandLine line \u003d parser.parse(options, args);\r\n-    String[] opts \u003d line.getOptionValues(\"D\");\r\n+    final String[] args \u003d new String[] { \"-buildfile\", \"mybuild.xml\", \"-Dproperty\u003dvalue\", \"-Dproperty1\u003dvalue1\", \"-projecthelp\" };\r\n+    final CommandLine line \u003d parser.parse(options, args);\r\n+    final String[] opts \u003d line.getOptionValues(\"D\");\r\n     assertEquals(\"property\", opts[0]);\r\n     assertEquals(\"value\", opts[1]);\r\n     assertEquals(\"property1\", opts[2]);\r\n     assertEquals(\"value1\", opts[3]);\r\n     assertEquals(line.getOptionValue(\"buildfile\"), \"mybuild.xml\");\r\n     assertTrue(line.hasOption(\"projecthelp\"));\r\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "60835e2f29d4ec09eead7789405d99f92c36a29e": {
      "type": "Yannotationchange",
      "commitMessage": "[CLI-227] Convert unit tests to junit 4, upgrade junit to 4.11, move authors to pom.xml.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/cli/trunk@1442904 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "2/6/13 12:57 PM",
      "commitName": "60835e2f29d4ec09eead7789405d99f92c36a29e",
      "commitAuthor": "Thomas Neidhart",
      "commitDateOld": "1/30/13 7:20 PM",
      "commitNameOld": "0cbe33506c92b790fd4dc866237d7e430a6c91dd",
      "commitAuthorOld": "Sebastian Bazley",
      "daysBetweenCommits": 6.73,
      "commitsBetweenForRepo": 8,
      "commitsBetweenForFile": 1,
      "actualSource": "@Test\r\npublic void testAnt() throws Exception {\r\n    CommandLineParser parser \u003d new GnuParser();\r\n    Options options \u003d new Options();\r\n    options.addOption(\"help\", false, \"print this message\");\r\n    options.addOption(\"projecthelp\", false, \"print project help information\");\r\n    options.addOption(\"version\", false, \"print the version information and exit\");\r\n    options.addOption(\"quiet\", false, \"be extra quiet\");\r\n    options.addOption(\"verbose\", false, \"be extra verbose\");\r\n    options.addOption(\"debug\", false, \"print debug information\");\r\n    options.addOption(\"logfile\", true, \"use given file for log\");\r\n    options.addOption(\"logger\", true, \"the class which is to perform the logging\");\r\n    options.addOption(\"listener\", true, \"add an instance of a class as a project listener\");\r\n    options.addOption(\"buildfile\", true, \"use given buildfile\");\r\n    options.addOption(OptionBuilder.withDescription(\"use value for given property\").hasArgs().withValueSeparator().create(\u0027D\u0027));\r\n    options.addOption(\"find\", true, \"search for buildfile towards the root of the filesystem and use it\");\r\n    String[] args \u003d new String[] { \"-buildfile\", \"mybuild.xml\", \"-Dproperty\u003dvalue\", \"-Dproperty1\u003dvalue1\", \"-projecthelp\" };\r\n    CommandLine line \u003d parser.parse(options, args);\r\n    String[] opts \u003d line.getOptionValues(\"D\");\r\n    assertEquals(\"property\", opts[0]);\r\n    assertEquals(\"value\", opts[1]);\r\n    assertEquals(\"property1\", opts[2]);\r\n    assertEquals(\"value1\", opts[3]);\r\n    assertEquals(line.getOptionValue(\"buildfile\"), \"mybuild.xml\");\r\n    assertTrue(line.hasOption(\"projecthelp\"));\r\n}",
      "path": "src/test/java/org/apache/commons/cli/ApplicationTest.java",
      "functionStartLine": 69,
      "functionName": "testAnt",
      "functionAnnotation": "@Test",
      "functionDoc": "Ant test\r\n",
      "diff": "@@ -1,25 +1,26 @@\n+@Test\r\n public void testAnt() throws Exception {\r\n     CommandLineParser parser \u003d new GnuParser();\r\n     Options options \u003d new Options();\r\n     options.addOption(\"help\", false, \"print this message\");\r\n     options.addOption(\"projecthelp\", false, \"print project help information\");\r\n     options.addOption(\"version\", false, \"print the version information and exit\");\r\n     options.addOption(\"quiet\", false, \"be extra quiet\");\r\n     options.addOption(\"verbose\", false, \"be extra verbose\");\r\n     options.addOption(\"debug\", false, \"print debug information\");\r\n     options.addOption(\"logfile\", true, \"use given file for log\");\r\n     options.addOption(\"logger\", true, \"the class which is to perform the logging\");\r\n     options.addOption(\"listener\", true, \"add an instance of a class as a project listener\");\r\n     options.addOption(\"buildfile\", true, \"use given buildfile\");\r\n     options.addOption(OptionBuilder.withDescription(\"use value for given property\").hasArgs().withValueSeparator().create(\u0027D\u0027));\r\n     options.addOption(\"find\", true, \"search for buildfile towards the root of the filesystem and use it\");\r\n     String[] args \u003d new String[] { \"-buildfile\", \"mybuild.xml\", \"-Dproperty\u003dvalue\", \"-Dproperty1\u003dvalue1\", \"-projecthelp\" };\r\n     CommandLine line \u003d parser.parse(options, args);\r\n     String[] opts \u003d line.getOptionValues(\"D\");\r\n     assertEquals(\"property\", opts[0]);\r\n     assertEquals(\"value\", opts[1]);\r\n     assertEquals(\"property1\", opts[2]);\r\n     assertEquals(\"value1\", opts[3]);\r\n     assertEquals(line.getOptionValue(\"buildfile\"), \"mybuild.xml\");\r\n     assertTrue(line.hasOption(\"projecthelp\"));\r\n }\n\\ No newline at end of file\n",
      "extendedDetails": {
        "oldValue": "",
        "newValue": "@Test"
      }
    },
    "cd745ecf52fb2fe8fed1c67fc9149e4be11a73f0": {
      "type": "Yfilerename",
      "commitMessage": "Switched to the Maven 2 default directory layout (part 1)\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/cli/trunk@955169 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "6/16/10 12:41 PM",
      "commitName": "cd745ecf52fb2fe8fed1c67fc9149e4be11a73f0",
      "commitAuthor": "Emmanuel Bourg",
      "commitDateOld": "6/16/10 12:36 PM",
      "commitNameOld": "106f3b8dd48d32cbfcba4a42e1161505c2e3cac6",
      "commitAuthorOld": "Emmanuel Bourg",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "public void testAnt() throws Exception {\r\n    CommandLineParser parser \u003d new GnuParser();\r\n    Options options \u003d new Options();\r\n    options.addOption(\"help\", false, \"print this message\");\r\n    options.addOption(\"projecthelp\", false, \"print project help information\");\r\n    options.addOption(\"version\", false, \"print the version information and exit\");\r\n    options.addOption(\"quiet\", false, \"be extra quiet\");\r\n    options.addOption(\"verbose\", false, \"be extra verbose\");\r\n    options.addOption(\"debug\", false, \"print debug information\");\r\n    options.addOption(\"logfile\", true, \"use given file for log\");\r\n    options.addOption(\"logger\", true, \"the class which is to perform the logging\");\r\n    options.addOption(\"listener\", true, \"add an instance of a class as a project listener\");\r\n    options.addOption(\"buildfile\", true, \"use given buildfile\");\r\n    options.addOption(OptionBuilder.withDescription(\"use value for given property\").hasArgs().withValueSeparator().create(\u0027D\u0027));\r\n    options.addOption(\"find\", true, \"search for buildfile towards the root of the filesystem and use it\");\r\n    String[] args \u003d new String[] { \"-buildfile\", \"mybuild.xml\", \"-Dproperty\u003dvalue\", \"-Dproperty1\u003dvalue1\", \"-projecthelp\" };\r\n    CommandLine line \u003d parser.parse(options, args);\r\n    String[] opts \u003d line.getOptionValues(\"D\");\r\n    assertEquals(\"property\", opts[0]);\r\n    assertEquals(\"value\", opts[1]);\r\n    assertEquals(\"property1\", opts[2]);\r\n    assertEquals(\"value1\", opts[3]);\r\n    assertEquals(line.getOptionValue(\"buildfile\"), \"mybuild.xml\");\r\n    assertTrue(line.hasOption(\"projecthelp\"));\r\n}",
      "path": "src/test/java/org/apache/commons/cli/ApplicationTest.java",
      "functionStartLine": 65,
      "functionName": "testAnt",
      "functionAnnotation": "",
      "functionDoc": "Ant test\r\n",
      "diff": "",
      "extendedDetails": {
        "oldPath": "src/test/org/apache/commons/cli/ApplicationTest.java",
        "newPath": "src/test/java/org/apache/commons/cli/ApplicationTest.java"
      }
    },
    "f887e8b6e2ebb519c6d0e51b1ddae6bd356dc3c0": {
      "type": "Ymultichange(Yexceptionschange,Ybodychange)",
      "commitMessage": "Simplified the test cases by removing the unnecessary fail() calls in the catch blocks\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/cli/branches/cli-1.x@661378 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "5/29/08 7:11 PM",
      "commitName": "f887e8b6e2ebb519c6d0e51b1ddae6bd356dc3c0",
      "commitAuthor": "Emmanuel Bourg",
      "subchanges": [
        {
          "type": "Yexceptionschange",
          "commitMessage": "Simplified the test cases by removing the unnecessary fail() calls in the catch blocks\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/cli/branches/cli-1.x@661378 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "5/29/08 7:11 PM",
          "commitName": "f887e8b6e2ebb519c6d0e51b1ddae6bd356dc3c0",
          "commitAuthor": "Emmanuel Bourg",
          "commitDateOld": "5/29/08 6:30 PM",
          "commitNameOld": "2490250f9b3044e4cd946f11b46694f943f5814d",
          "commitAuthorOld": "Emmanuel Bourg",
          "daysBetweenCommits": 0.03,
          "commitsBetweenForRepo": 2,
          "commitsBetweenForFile": 1,
          "actualSource": "public void testAnt() throws Exception {\r\n    CommandLineParser parser \u003d new GnuParser();\r\n    Options options \u003d new Options();\r\n    options.addOption(\"help\", false, \"print this message\");\r\n    options.addOption(\"projecthelp\", false, \"print project help information\");\r\n    options.addOption(\"version\", false, \"print the version information and exit\");\r\n    options.addOption(\"quiet\", false, \"be extra quiet\");\r\n    options.addOption(\"verbose\", false, \"be extra verbose\");\r\n    options.addOption(\"debug\", false, \"print debug information\");\r\n    options.addOption(\"logfile\", true, \"use given file for log\");\r\n    options.addOption(\"logger\", true, \"the class which is to perform the logging\");\r\n    options.addOption(\"listener\", true, \"add an instance of a class as a project listener\");\r\n    options.addOption(\"buildfile\", true, \"use given buildfile\");\r\n    options.addOption(OptionBuilder.withDescription(\"use value for given property\").hasArgs().withValueSeparator().create(\u0027D\u0027));\r\n    options.addOption(\"find\", true, \"search for buildfile towards the root of the filesystem and use it\");\r\n    String[] args \u003d new String[] { \"-buildfile\", \"mybuild.xml\", \"-Dproperty\u003dvalue\", \"-Dproperty1\u003dvalue1\", \"-projecthelp\" };\r\n    CommandLine line \u003d parser.parse(options, args);\r\n    String[] opts \u003d line.getOptionValues(\"D\");\r\n    assertEquals(\"property\", opts[0]);\r\n    assertEquals(\"value\", opts[1]);\r\n    assertEquals(\"property1\", opts[2]);\r\n    assertEquals(\"value1\", opts[3]);\r\n    assertEquals(line.getOptionValue(\"buildfile\"), \"mybuild.xml\");\r\n    assertTrue(line.hasOption(\"projecthelp\"));\r\n}",
          "path": "src/test/org/apache/commons/cli/ApplicationTest.java",
          "functionStartLine": 65,
          "functionName": "testAnt",
          "functionAnnotation": "",
          "functionDoc": "Ant test\r\n",
          "diff": "@@ -1,29 +1,25 @@\n-public void testAnt() {\r\n+public void testAnt() throws Exception {\r\n     CommandLineParser parser \u003d new GnuParser();\r\n     Options options \u003d new Options();\r\n     options.addOption(\"help\", false, \"print this message\");\r\n     options.addOption(\"projecthelp\", false, \"print project help information\");\r\n     options.addOption(\"version\", false, \"print the version information and exit\");\r\n     options.addOption(\"quiet\", false, \"be extra quiet\");\r\n     options.addOption(\"verbose\", false, \"be extra verbose\");\r\n     options.addOption(\"debug\", false, \"print debug information\");\r\n     options.addOption(\"logfile\", true, \"use given file for log\");\r\n     options.addOption(\"logger\", true, \"the class which is to perform the logging\");\r\n     options.addOption(\"listener\", true, \"add an instance of a class as a project listener\");\r\n     options.addOption(\"buildfile\", true, \"use given buildfile\");\r\n     options.addOption(OptionBuilder.withDescription(\"use value for given property\").hasArgs().withValueSeparator().create(\u0027D\u0027));\r\n     options.addOption(\"find\", true, \"search for buildfile towards the root of the filesystem and use it\");\r\n     String[] args \u003d new String[] { \"-buildfile\", \"mybuild.xml\", \"-Dproperty\u003dvalue\", \"-Dproperty1\u003dvalue1\", \"-projecthelp\" };\r\n-    try {\r\n-        CommandLine line \u003d parser.parse(options, args);\r\n-        String[] opts \u003d line.getOptionValues(\"D\");\r\n-        assertEquals(\"property\", opts[0]);\r\n-        assertEquals(\"value\", opts[1]);\r\n-        assertEquals(\"property1\", opts[2]);\r\n-        assertEquals(\"value1\", opts[3]);\r\n-        assertEquals(line.getOptionValue(\"buildfile\"), \"mybuild.xml\");\r\n-        assertTrue(line.hasOption(\"projecthelp\"));\r\n-    } catch (ParseException exp) {\r\n-        fail(\"Unexpected exception:\" + exp.getMessage());\r\n-    }\r\n+    CommandLine line \u003d parser.parse(options, args);\r\n+    String[] opts \u003d line.getOptionValues(\"D\");\r\n+    assertEquals(\"property\", opts[0]);\r\n+    assertEquals(\"value\", opts[1]);\r\n+    assertEquals(\"property1\", opts[2]);\r\n+    assertEquals(\"value1\", opts[3]);\r\n+    assertEquals(line.getOptionValue(\"buildfile\"), \"mybuild.xml\");\r\n+    assertTrue(line.hasOption(\"projecthelp\"));\r\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[]",
            "newValue": "[Exception]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Simplified the test cases by removing the unnecessary fail() calls in the catch blocks\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/cli/branches/cli-1.x@661378 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "5/29/08 7:11 PM",
          "commitName": "f887e8b6e2ebb519c6d0e51b1ddae6bd356dc3c0",
          "commitAuthor": "Emmanuel Bourg",
          "commitDateOld": "5/29/08 6:30 PM",
          "commitNameOld": "2490250f9b3044e4cd946f11b46694f943f5814d",
          "commitAuthorOld": "Emmanuel Bourg",
          "daysBetweenCommits": 0.03,
          "commitsBetweenForRepo": 2,
          "commitsBetweenForFile": 1,
          "actualSource": "public void testAnt() throws Exception {\r\n    CommandLineParser parser \u003d new GnuParser();\r\n    Options options \u003d new Options();\r\n    options.addOption(\"help\", false, \"print this message\");\r\n    options.addOption(\"projecthelp\", false, \"print project help information\");\r\n    options.addOption(\"version\", false, \"print the version information and exit\");\r\n    options.addOption(\"quiet\", false, \"be extra quiet\");\r\n    options.addOption(\"verbose\", false, \"be extra verbose\");\r\n    options.addOption(\"debug\", false, \"print debug information\");\r\n    options.addOption(\"logfile\", true, \"use given file for log\");\r\n    options.addOption(\"logger\", true, \"the class which is to perform the logging\");\r\n    options.addOption(\"listener\", true, \"add an instance of a class as a project listener\");\r\n    options.addOption(\"buildfile\", true, \"use given buildfile\");\r\n    options.addOption(OptionBuilder.withDescription(\"use value for given property\").hasArgs().withValueSeparator().create(\u0027D\u0027));\r\n    options.addOption(\"find\", true, \"search for buildfile towards the root of the filesystem and use it\");\r\n    String[] args \u003d new String[] { \"-buildfile\", \"mybuild.xml\", \"-Dproperty\u003dvalue\", \"-Dproperty1\u003dvalue1\", \"-projecthelp\" };\r\n    CommandLine line \u003d parser.parse(options, args);\r\n    String[] opts \u003d line.getOptionValues(\"D\");\r\n    assertEquals(\"property\", opts[0]);\r\n    assertEquals(\"value\", opts[1]);\r\n    assertEquals(\"property1\", opts[2]);\r\n    assertEquals(\"value1\", opts[3]);\r\n    assertEquals(line.getOptionValue(\"buildfile\"), \"mybuild.xml\");\r\n    assertTrue(line.hasOption(\"projecthelp\"));\r\n}",
          "path": "src/test/org/apache/commons/cli/ApplicationTest.java",
          "functionStartLine": 65,
          "functionName": "testAnt",
          "functionAnnotation": "",
          "functionDoc": "Ant test\r\n",
          "diff": "@@ -1,29 +1,25 @@\n-public void testAnt() {\r\n+public void testAnt() throws Exception {\r\n     CommandLineParser parser \u003d new GnuParser();\r\n     Options options \u003d new Options();\r\n     options.addOption(\"help\", false, \"print this message\");\r\n     options.addOption(\"projecthelp\", false, \"print project help information\");\r\n     options.addOption(\"version\", false, \"print the version information and exit\");\r\n     options.addOption(\"quiet\", false, \"be extra quiet\");\r\n     options.addOption(\"verbose\", false, \"be extra verbose\");\r\n     options.addOption(\"debug\", false, \"print debug information\");\r\n     options.addOption(\"logfile\", true, \"use given file for log\");\r\n     options.addOption(\"logger\", true, \"the class which is to perform the logging\");\r\n     options.addOption(\"listener\", true, \"add an instance of a class as a project listener\");\r\n     options.addOption(\"buildfile\", true, \"use given buildfile\");\r\n     options.addOption(OptionBuilder.withDescription(\"use value for given property\").hasArgs().withValueSeparator().create(\u0027D\u0027));\r\n     options.addOption(\"find\", true, \"search for buildfile towards the root of the filesystem and use it\");\r\n     String[] args \u003d new String[] { \"-buildfile\", \"mybuild.xml\", \"-Dproperty\u003dvalue\", \"-Dproperty1\u003dvalue1\", \"-projecthelp\" };\r\n-    try {\r\n-        CommandLine line \u003d parser.parse(options, args);\r\n-        String[] opts \u003d line.getOptionValues(\"D\");\r\n-        assertEquals(\"property\", opts[0]);\r\n-        assertEquals(\"value\", opts[1]);\r\n-        assertEquals(\"property1\", opts[2]);\r\n-        assertEquals(\"value1\", opts[3]);\r\n-        assertEquals(line.getOptionValue(\"buildfile\"), \"mybuild.xml\");\r\n-        assertTrue(line.hasOption(\"projecthelp\"));\r\n-    } catch (ParseException exp) {\r\n-        fail(\"Unexpected exception:\" + exp.getMessage());\r\n-    }\r\n+    CommandLine line \u003d parser.parse(options, args);\r\n+    String[] opts \u003d line.getOptionValues(\"D\");\r\n+    assertEquals(\"property\", opts[0]);\r\n+    assertEquals(\"value\", opts[1]);\r\n+    assertEquals(\"property1\", opts[2]);\r\n+    assertEquals(\"value1\", opts[3]);\r\n+    assertEquals(line.getOptionValue(\"buildfile\"), \"mybuild.xml\");\r\n+    assertTrue(line.hasOption(\"projecthelp\"));\r\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        }
      ]
    },
    "6a6bb48840aa0043200a5d9f6fffea47aea1a8db": {
      "type": "Ybodychange",
      "commitMessage": "Removing the duplication \u0027version\u0027 option as pointed out by Andrew Kutz\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/cli/branches/cli-1.x@651842 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "4/26/08 8:31 PM",
      "commitName": "6a6bb48840aa0043200a5d9f6fffea47aea1a8db",
      "commitAuthor": "Henri Yandell",
      "commitDateOld": "5/28/07 11:01 AM",
      "commitNameOld": "79a1091bd0a2dba7decacd23beac8104f3b5a5cb",
      "commitAuthorOld": "Henri Yandell",
      "daysBetweenCommits": 334.4,
      "commitsBetweenForRepo": 47,
      "commitsBetweenForFile": 1,
      "actualSource": "public void testAnt() {\r\n    CommandLineParser parser \u003d new GnuParser();\r\n    Options options \u003d new Options();\r\n    options.addOption(\"help\", false, \"print this message\");\r\n    options.addOption(\"projecthelp\", false, \"print project help information\");\r\n    options.addOption(\"version\", false, \"print the version information and exit\");\r\n    options.addOption(\"quiet\", false, \"be extra quiet\");\r\n    options.addOption(\"verbose\", false, \"be extra verbose\");\r\n    options.addOption(\"debug\", false, \"print debug information\");\r\n    options.addOption(\"logfile\", true, \"use given file for log\");\r\n    options.addOption(\"logger\", true, \"the class which is to perform the logging\");\r\n    options.addOption(\"listener\", true, \"add an instance of a class as a project listener\");\r\n    options.addOption(\"buildfile\", true, \"use given buildfile\");\r\n    options.addOption(OptionBuilder.withDescription(\"use value for given property\").hasArgs().withValueSeparator().create(\u0027D\u0027));\r\n    options.addOption(\"find\", true, \"search for buildfile towards the root of the filesystem and use it\");\r\n    String[] args \u003d new String[] { \"-buildfile\", \"mybuild.xml\", \"-Dproperty\u003dvalue\", \"-Dproperty1\u003dvalue1\", \"-projecthelp\" };\r\n    try {\r\n        CommandLine line \u003d parser.parse(options, args);\r\n        String[] opts \u003d line.getOptionValues(\"D\");\r\n        assertEquals(\"property\", opts[0]);\r\n        assertEquals(\"value\", opts[1]);\r\n        assertEquals(\"property1\", opts[2]);\r\n        assertEquals(\"value1\", opts[3]);\r\n        assertEquals(line.getOptionValue(\"buildfile\"), \"mybuild.xml\");\r\n        assertTrue(line.hasOption(\"projecthelp\"));\r\n    } catch (ParseException exp) {\r\n        fail(\"Unexpected exception:\" + exp.getMessage());\r\n    }\r\n}",
      "path": "src/test/org/apache/commons/cli/ApplicationTest.java",
      "functionStartLine": 83,
      "functionName": "testAnt",
      "functionAnnotation": "",
      "functionDoc": "Ant test\r\n",
      "diff": "@@ -1,30 +1,29 @@\n public void testAnt() {\r\n     CommandLineParser parser \u003d new GnuParser();\r\n     Options options \u003d new Options();\r\n     options.addOption(\"help\", false, \"print this message\");\r\n     options.addOption(\"projecthelp\", false, \"print project help information\");\r\n     options.addOption(\"version\", false, \"print the version information and exit\");\r\n     options.addOption(\"quiet\", false, \"be extra quiet\");\r\n     options.addOption(\"verbose\", false, \"be extra verbose\");\r\n     options.addOption(\"debug\", false, \"print debug information\");\r\n-    options.addOption(\"version\", false, \"produce logging information without adornments\");\r\n     options.addOption(\"logfile\", true, \"use given file for log\");\r\n     options.addOption(\"logger\", true, \"the class which is to perform the logging\");\r\n     options.addOption(\"listener\", true, \"add an instance of a class as a project listener\");\r\n     options.addOption(\"buildfile\", true, \"use given buildfile\");\r\n     options.addOption(OptionBuilder.withDescription(\"use value for given property\").hasArgs().withValueSeparator().create(\u0027D\u0027));\r\n     options.addOption(\"find\", true, \"search for buildfile towards the root of the filesystem and use it\");\r\n     String[] args \u003d new String[] { \"-buildfile\", \"mybuild.xml\", \"-Dproperty\u003dvalue\", \"-Dproperty1\u003dvalue1\", \"-projecthelp\" };\r\n     try {\r\n         CommandLine line \u003d parser.parse(options, args);\r\n         String[] opts \u003d line.getOptionValues(\"D\");\r\n         assertEquals(\"property\", opts[0]);\r\n         assertEquals(\"value\", opts[1]);\r\n         assertEquals(\"property1\", opts[2]);\r\n         assertEquals(\"value1\", opts[3]);\r\n         assertEquals(line.getOptionValue(\"buildfile\"), \"mybuild.xml\");\r\n         assertTrue(line.hasOption(\"projecthelp\"));\r\n     } catch (ParseException exp) {\r\n         fail(\"Unexpected exception:\" + exp.getMessage());\r\n     }\r\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "c08f73835beda155421d78ee4f96d9e11c501159": {
      "type": "Ybodychange",
      "commitMessage": "changed my email add, removed CommandLineParserFactory\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/cli/trunk@129816 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "9/20/02 1:59 AM",
      "commitName": "c08f73835beda155421d78ee4f96d9e11c501159",
      "commitAuthor": "John Keyes",
      "commitDateOld": "8/15/02 1:27 AM",
      "commitNameOld": "f9df51847e354190206432ba87661586e6dc814d",
      "commitAuthorOld": "John Keyes",
      "daysBetweenCommits": 36.02,
      "commitsBetweenForRepo": 17,
      "commitsBetweenForFile": 1,
      "actualSource": "public void testAnt() {\r\n    CommandLineParser parser \u003d new GnuParser();\r\n    Options options \u003d new Options();\r\n    options.addOption(\"help\", false, \"print this message\");\r\n    options.addOption(\"projecthelp\", false, \"print project help information\");\r\n    options.addOption(\"version\", false, \"print the version information and exit\");\r\n    options.addOption(\"quiet\", false, \"be extra quiet\");\r\n    options.addOption(\"verbose\", false, \"be extra verbose\");\r\n    options.addOption(\"debug\", false, \"print debug information\");\r\n    options.addOption(\"version\", false, \"produce logging information without adornments\");\r\n    options.addOption(\"logfile\", true, \"use given file for log\");\r\n    options.addOption(\"logger\", true, \"the class which is to perform the logging\");\r\n    options.addOption(\"listener\", true, \"add an instance of a class as a project listener\");\r\n    options.addOption(\"buildfile\", true, \"use given buildfile\");\r\n    options.addOption(OptionBuilder.withDescription(\"use value for given property\").hasArgs().withValueSeparator().create(\u0027D\u0027));\r\n    options.addOption(\"find\", true, \"search for buildfile towards the root of the filesystem and use it\");\r\n    String[] args \u003d new String[] { \"-buildfile\", \"mybuild.xml\", \"-Dproperty\u003dvalue\", \"-Dproperty1\u003dvalue1\", \"-projecthelp\" };\r\n    try {\r\n        CommandLine line \u003d parser.parse(options, args);\r\n        String[] opts \u003d line.getOptionValues(\"D\");\r\n        assertEquals(\"property\", opts[0]);\r\n        assertEquals(\"value\", opts[1]);\r\n        assertEquals(\"property1\", opts[2]);\r\n        assertEquals(\"value1\", opts[3]);\r\n        assertEquals(line.getOptionValue(\"buildfile\"), \"mybuild.xml\");\r\n        assertTrue(line.hasOption(\"projecthelp\"));\r\n    } catch (ParseException exp) {\r\n        fail(\"Unexpected exception:\" + exp.getMessage());\r\n    }\r\n}",
      "path": "src/test/org/apache/commons/cli/ApplicationTest.java",
      "functionStartLine": 67,
      "functionName": "testAnt",
      "functionAnnotation": "",
      "functionDoc": "Ant test\r\n",
      "diff": "@@ -1,30 +1,30 @@\n public void testAnt() {\r\n-    CommandLineParser parser \u003d CommandLineParserFactory.newParser(\"org.apache.commons.cli.GnuParser\");\r\n+    CommandLineParser parser \u003d new GnuParser();\r\n     Options options \u003d new Options();\r\n     options.addOption(\"help\", false, \"print this message\");\r\n     options.addOption(\"projecthelp\", false, \"print project help information\");\r\n     options.addOption(\"version\", false, \"print the version information and exit\");\r\n     options.addOption(\"quiet\", false, \"be extra quiet\");\r\n     options.addOption(\"verbose\", false, \"be extra verbose\");\r\n     options.addOption(\"debug\", false, \"print debug information\");\r\n     options.addOption(\"version\", false, \"produce logging information without adornments\");\r\n     options.addOption(\"logfile\", true, \"use given file for log\");\r\n     options.addOption(\"logger\", true, \"the class which is to perform the logging\");\r\n     options.addOption(\"listener\", true, \"add an instance of a class as a project listener\");\r\n     options.addOption(\"buildfile\", true, \"use given buildfile\");\r\n     options.addOption(OptionBuilder.withDescription(\"use value for given property\").hasArgs().withValueSeparator().create(\u0027D\u0027));\r\n     options.addOption(\"find\", true, \"search for buildfile towards the root of the filesystem and use it\");\r\n     String[] args \u003d new String[] { \"-buildfile\", \"mybuild.xml\", \"-Dproperty\u003dvalue\", \"-Dproperty1\u003dvalue1\", \"-projecthelp\" };\r\n     try {\r\n         CommandLine line \u003d parser.parse(options, args);\r\n         String[] opts \u003d line.getOptionValues(\"D\");\r\n         assertEquals(\"property\", opts[0]);\r\n         assertEquals(\"value\", opts[1]);\r\n         assertEquals(\"property1\", opts[2]);\r\n         assertEquals(\"value1\", opts[3]);\r\n         assertEquals(line.getOptionValue(\"buildfile\"), \"mybuild.xml\");\r\n         assertTrue(line.hasOption(\"projecthelp\"));\r\n     } catch (ParseException exp) {\r\n         fail(\"Unexpected exception:\" + exp.getMessage());\r\n     }\r\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "f9df51847e354190206432ba87661586e6dc814d": {
      "type": "Ybodychange",
      "commitMessage": "iterator for all Option instances parsed\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/cli/trunk@129799 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "8/15/02 1:27 AM",
      "commitName": "f9df51847e354190206432ba87661586e6dc814d",
      "commitAuthor": "John Keyes",
      "commitDateOld": "8/5/02 2:04 AM",
      "commitNameOld": "1060ee73965dc30d92afbad80525bd4cdabe9153",
      "commitAuthorOld": "John Keyes",
      "daysBetweenCommits": 9.97,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "actualSource": "public void testAnt() {\r\n    CommandLineParser parser \u003d CommandLineParserFactory.newParser(\"org.apache.commons.cli.GnuParser\");\r\n    Options options \u003d new Options();\r\n    options.addOption(\"help\", false, \"print this message\");\r\n    options.addOption(\"projecthelp\", false, \"print project help information\");\r\n    options.addOption(\"version\", false, \"print the version information and exit\");\r\n    options.addOption(\"quiet\", false, \"be extra quiet\");\r\n    options.addOption(\"verbose\", false, \"be extra verbose\");\r\n    options.addOption(\"debug\", false, \"print debug information\");\r\n    options.addOption(\"version\", false, \"produce logging information without adornments\");\r\n    options.addOption(\"logfile\", true, \"use given file for log\");\r\n    options.addOption(\"logger\", true, \"the class which is to perform the logging\");\r\n    options.addOption(\"listener\", true, \"add an instance of a class as a project listener\");\r\n    options.addOption(\"buildfile\", true, \"use given buildfile\");\r\n    options.addOption(OptionBuilder.withDescription(\"use value for given property\").hasArgs().withValueSeparator().create(\u0027D\u0027));\r\n    options.addOption(\"find\", true, \"search for buildfile towards the root of the filesystem and use it\");\r\n    String[] args \u003d new String[] { \"-buildfile\", \"mybuild.xml\", \"-Dproperty\u003dvalue\", \"-Dproperty1\u003dvalue1\", \"-projecthelp\" };\r\n    try {\r\n        CommandLine line \u003d parser.parse(options, args);\r\n        String[] opts \u003d line.getOptionValues(\"D\");\r\n        assertEquals(\"property\", opts[0]);\r\n        assertEquals(\"value\", opts[1]);\r\n        assertEquals(\"property1\", opts[2]);\r\n        assertEquals(\"value1\", opts[3]);\r\n        assertEquals(line.getOptionValue(\"buildfile\"), \"mybuild.xml\");\r\n        assertTrue(line.hasOption(\"projecthelp\"));\r\n    } catch (ParseException exp) {\r\n        fail(\"Unexpected exception:\" + exp.getMessage());\r\n    }\r\n}",
      "path": "src/test/org/apache/commons/cli/ApplicationTest.java",
      "functionStartLine": 36,
      "functionName": "testAnt",
      "functionAnnotation": "",
      "functionDoc": "Ant test\r\n",
      "diff": "@@ -1,28 +1,30 @@\n public void testAnt() {\r\n     CommandLineParser parser \u003d CommandLineParserFactory.newParser(\"org.apache.commons.cli.GnuParser\");\r\n     Options options \u003d new Options();\r\n     options.addOption(\"help\", false, \"print this message\");\r\n     options.addOption(\"projecthelp\", false, \"print project help information\");\r\n     options.addOption(\"version\", false, \"print the version information and exit\");\r\n     options.addOption(\"quiet\", false, \"be extra quiet\");\r\n     options.addOption(\"verbose\", false, \"be extra verbose\");\r\n     options.addOption(\"debug\", false, \"print debug information\");\r\n     options.addOption(\"version\", false, \"produce logging information without adornments\");\r\n     options.addOption(\"logfile\", true, \"use given file for log\");\r\n     options.addOption(\"logger\", true, \"the class which is to perform the logging\");\r\n     options.addOption(\"listener\", true, \"add an instance of a class as a project listener\");\r\n     options.addOption(\"buildfile\", true, \"use given buildfile\");\r\n-    options.addOption(OptionBuilder.withDescription(\"use value for given property\").hasArgs().create(\u0027D\u0027));\r\n+    options.addOption(OptionBuilder.withDescription(\"use value for given property\").hasArgs().withValueSeparator().create(\u0027D\u0027));\r\n     options.addOption(\"find\", true, \"search for buildfile towards the root of the filesystem and use it\");\r\n     String[] args \u003d new String[] { \"-buildfile\", \"mybuild.xml\", \"-Dproperty\u003dvalue\", \"-Dproperty1\u003dvalue1\", \"-projecthelp\" };\r\n     try {\r\n         CommandLine line \u003d parser.parse(options, args);\r\n         String[] opts \u003d line.getOptionValues(\"D\");\r\n-        assertEquals(opts[0], \"property\u003dvalue\");\r\n-        assertEquals(opts[1], \"property1\u003dvalue1\");\r\n+        assertEquals(\"property\", opts[0]);\r\n+        assertEquals(\"value\", opts[1]);\r\n+        assertEquals(\"property1\", opts[2]);\r\n+        assertEquals(\"value1\", opts[3]);\r\n         assertEquals(line.getOptionValue(\"buildfile\"), \"mybuild.xml\");\r\n         assertTrue(line.hasOption(\"projecthelp\"));\r\n     } catch (ParseException exp) {\r\n         fail(\"Unexpected exception:\" + exp.getMessage());\r\n     }\r\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "1060ee73965dc30d92afbad80525bd4cdabe9153": {
      "type": "Ybodychange",
      "commitMessage": "bug 11458 fixed\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/cli/trunk@129796 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "8/5/02 2:04 AM",
      "commitName": "1060ee73965dc30d92afbad80525bd4cdabe9153",
      "commitAuthor": "John Keyes",
      "commitDateOld": "8/4/02 2:45 AM",
      "commitNameOld": "16b91ad2b9f5f524b2b07ba4515c65479999f7ee",
      "commitAuthorOld": "John Keyes",
      "daysBetweenCommits": 0.97,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "actualSource": "public void testAnt() {\r\n    CommandLineParser parser \u003d CommandLineParserFactory.newParser(\"org.apache.commons.cli.GnuParser\");\r\n    Options options \u003d new Options();\r\n    options.addOption(\"help\", false, \"print this message\");\r\n    options.addOption(\"projecthelp\", false, \"print project help information\");\r\n    options.addOption(\"version\", false, \"print the version information and exit\");\r\n    options.addOption(\"quiet\", false, \"be extra quiet\");\r\n    options.addOption(\"verbose\", false, \"be extra verbose\");\r\n    options.addOption(\"debug\", false, \"print debug information\");\r\n    options.addOption(\"version\", false, \"produce logging information without adornments\");\r\n    options.addOption(\"logfile\", true, \"use given file for log\");\r\n    options.addOption(\"logger\", true, \"the class which is to perform the logging\");\r\n    options.addOption(\"listener\", true, \"add an instance of a class as a project listener\");\r\n    options.addOption(\"buildfile\", true, \"use given buildfile\");\r\n    options.addOption(OptionBuilder.withDescription(\"use value for given property\").hasArgs().create(\u0027D\u0027));\r\n    options.addOption(\"find\", true, \"search for buildfile towards the root of the filesystem and use it\");\r\n    String[] args \u003d new String[] { \"-buildfile\", \"mybuild.xml\", \"-Dproperty\u003dvalue\", \"-Dproperty1\u003dvalue1\", \"-projecthelp\" };\r\n    try {\r\n        CommandLine line \u003d parser.parse(options, args);\r\n        String[] opts \u003d line.getOptionValues(\"D\");\r\n        assertEquals(opts[0], \"property\u003dvalue\");\r\n        assertEquals(opts[1], \"property1\u003dvalue1\");\r\n        assertEquals(line.getOptionValue(\"buildfile\"), \"mybuild.xml\");\r\n        assertTrue(line.hasOption(\"projecthelp\"));\r\n    } catch (ParseException exp) {\r\n        fail(\"Unexpected exception:\" + exp.getMessage());\r\n    }\r\n}",
      "path": "src/test/org/apache/commons/cli/ApplicationTest.java",
      "functionStartLine": 36,
      "functionName": "testAnt",
      "functionAnnotation": "",
      "functionDoc": "Ant test\r\n",
      "diff": "@@ -1,28 +1,28 @@\n public void testAnt() {\r\n     CommandLineParser parser \u003d CommandLineParserFactory.newParser(\"org.apache.commons.cli.GnuParser\");\r\n     Options options \u003d new Options();\r\n     options.addOption(\"help\", false, \"print this message\");\r\n     options.addOption(\"projecthelp\", false, \"print project help information\");\r\n     options.addOption(\"version\", false, \"print the version information and exit\");\r\n     options.addOption(\"quiet\", false, \"be extra quiet\");\r\n     options.addOption(\"verbose\", false, \"be extra verbose\");\r\n     options.addOption(\"debug\", false, \"print debug information\");\r\n     options.addOption(\"version\", false, \"produce logging information without adornments\");\r\n     options.addOption(\"logfile\", true, \"use given file for log\");\r\n     options.addOption(\"logger\", true, \"the class which is to perform the logging\");\r\n     options.addOption(\"listener\", true, \"add an instance of a class as a project listener\");\r\n     options.addOption(\"buildfile\", true, \"use given buildfile\");\r\n-    options.addOption(OptionBuilder.withDescription(\"use value for given property\").hasArg().hasArgs().create(\u0027D\u0027));\r\n+    options.addOption(OptionBuilder.withDescription(\"use value for given property\").hasArgs().create(\u0027D\u0027));\r\n     options.addOption(\"find\", true, \"search for buildfile towards the root of the filesystem and use it\");\r\n     String[] args \u003d new String[] { \"-buildfile\", \"mybuild.xml\", \"-Dproperty\u003dvalue\", \"-Dproperty1\u003dvalue1\", \"-projecthelp\" };\r\n     try {\r\n         CommandLine line \u003d parser.parse(options, args);\r\n         String[] opts \u003d line.getOptionValues(\"D\");\r\n         assertEquals(opts[0], \"property\u003dvalue\");\r\n         assertEquals(opts[1], \"property1\u003dvalue1\");\r\n         assertEquals(line.getOptionValue(\"buildfile\"), \"mybuild.xml\");\r\n         assertTrue(line.hasOption(\"projecthelp\"));\r\n     } catch (ParseException exp) {\r\n         fail(\"Unexpected exception:\" + exp.getMessage());\r\n     }\r\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "16b91ad2b9f5f524b2b07ba4515c65479999f7ee": {
      "type": "Ybodychange",
      "commitMessage": "its now possible to specify the number of argument values an option can have, refactored parsers argument value handling, refactored argument handling in Option, added getOptions method on CommandLine to return an array of the processed Options\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/cli/trunk@129794 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "8/4/02 2:45 AM",
      "commitName": "16b91ad2b9f5f524b2b07ba4515c65479999f7ee",
      "commitAuthor": "John Keyes",
      "commitDateOld": "7/31/02 2:06 AM",
      "commitNameOld": "fbc0bd02b0d9d97ae044aebbbfbc5b13d3eacafe",
      "commitAuthorOld": "John Keyes",
      "daysBetweenCommits": 4.03,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "actualSource": "public void testAnt() {\r\n    CommandLineParser parser \u003d CommandLineParserFactory.newParser(\"org.apache.commons.cli.GnuParser\");\r\n    Options options \u003d new Options();\r\n    options.addOption(\"help\", false, \"print this message\");\r\n    options.addOption(\"projecthelp\", false, \"print project help information\");\r\n    options.addOption(\"version\", false, \"print the version information and exit\");\r\n    options.addOption(\"quiet\", false, \"be extra quiet\");\r\n    options.addOption(\"verbose\", false, \"be extra verbose\");\r\n    options.addOption(\"debug\", false, \"print debug information\");\r\n    options.addOption(\"version\", false, \"produce logging information without adornments\");\r\n    options.addOption(\"logfile\", true, \"use given file for log\");\r\n    options.addOption(\"logger\", true, \"the class which is to perform the logging\");\r\n    options.addOption(\"listener\", true, \"add an instance of a class as a project listener\");\r\n    options.addOption(\"buildfile\", true, \"use given buildfile\");\r\n    options.addOption(OptionBuilder.withDescription(\"use value for given property\").hasArg().hasArgs().create(\u0027D\u0027));\r\n    options.addOption(\"find\", true, \"search for buildfile towards the root of the filesystem and use it\");\r\n    String[] args \u003d new String[] { \"-buildfile\", \"mybuild.xml\", \"-Dproperty\u003dvalue\", \"-Dproperty1\u003dvalue1\", \"-projecthelp\" };\r\n    try {\r\n        CommandLine line \u003d parser.parse(options, args);\r\n        String[] opts \u003d line.getOptionValues(\"D\");\r\n        assertEquals(opts[0], \"property\u003dvalue\");\r\n        assertEquals(opts[1], \"property1\u003dvalue1\");\r\n        assertEquals(line.getOptionValue(\"buildfile\"), \"mybuild.xml\");\r\n        assertTrue(line.hasOption(\"projecthelp\"));\r\n    } catch (ParseException exp) {\r\n        fail(\"Unexpected exception:\" + exp.getMessage());\r\n    }\r\n}",
      "path": "src/test/org/apache/commons/cli/ApplicationTest.java",
      "functionStartLine": 36,
      "functionName": "testAnt",
      "functionAnnotation": "",
      "functionDoc": "Ant test\r\n",
      "diff": "@@ -1,28 +1,28 @@\n public void testAnt() {\r\n     CommandLineParser parser \u003d CommandLineParserFactory.newParser(\"org.apache.commons.cli.GnuParser\");\r\n     Options options \u003d new Options();\r\n     options.addOption(\"help\", false, \"print this message\");\r\n     options.addOption(\"projecthelp\", false, \"print project help information\");\r\n     options.addOption(\"version\", false, \"print the version information and exit\");\r\n     options.addOption(\"quiet\", false, \"be extra quiet\");\r\n     options.addOption(\"verbose\", false, \"be extra verbose\");\r\n     options.addOption(\"debug\", false, \"print debug information\");\r\n     options.addOption(\"version\", false, \"produce logging information without adornments\");\r\n     options.addOption(\"logfile\", true, \"use given file for log\");\r\n     options.addOption(\"logger\", true, \"the class which is to perform the logging\");\r\n     options.addOption(\"listener\", true, \"add an instance of a class as a project listener\");\r\n     options.addOption(\"buildfile\", true, \"use given buildfile\");\r\n-    options.addOption(OptionBuilder.withDescription(\"use value for given property\").hasArg().hasMultipleArgs().create(\u0027D\u0027));\r\n+    options.addOption(OptionBuilder.withDescription(\"use value for given property\").hasArg().hasArgs().create(\u0027D\u0027));\r\n     options.addOption(\"find\", true, \"search for buildfile towards the root of the filesystem and use it\");\r\n     String[] args \u003d new String[] { \"-buildfile\", \"mybuild.xml\", \"-Dproperty\u003dvalue\", \"-Dproperty1\u003dvalue1\", \"-projecthelp\" };\r\n     try {\r\n         CommandLine line \u003d parser.parse(options, args);\r\n         String[] opts \u003d line.getOptionValues(\"D\");\r\n         assertEquals(opts[0], \"property\u003dvalue\");\r\n         assertEquals(opts[1], \"property1\u003dvalue1\");\r\n         assertEquals(line.getOptionValue(\"buildfile\"), \"mybuild.xml\");\r\n         assertTrue(line.hasOption(\"projecthelp\"));\r\n     } catch (ParseException exp) {\r\n         fail(\"Unexpected exception:\" + exp.getMessage());\r\n     }\r\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "fbc0bd02b0d9d97ae044aebbbfbc5b13d3eacafe": {
      "type": "Ybodychange",
      "commitMessage": "integrated PatternBuilder\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/cli/trunk@129792 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "7/31/02 2:06 AM",
      "commitName": "fbc0bd02b0d9d97ae044aebbbfbc5b13d3eacafe",
      "commitAuthor": "John Keyes",
      "commitDateOld": "7/26/02 12:40 AM",
      "commitNameOld": "e56c41bcf610081622b663fc053521552705909f",
      "commitAuthorOld": "John Keyes",
      "daysBetweenCommits": 5.06,
      "commitsBetweenForRepo": 3,
      "commitsBetweenForFile": 1,
      "actualSource": "public void testAnt() {\r\n    CommandLineParser parser \u003d CommandLineParserFactory.newParser(\"org.apache.commons.cli.GnuParser\");\r\n    Options options \u003d new Options();\r\n    options.addOption(\"help\", false, \"print this message\");\r\n    options.addOption(\"projecthelp\", false, \"print project help information\");\r\n    options.addOption(\"version\", false, \"print the version information and exit\");\r\n    options.addOption(\"quiet\", false, \"be extra quiet\");\r\n    options.addOption(\"verbose\", false, \"be extra verbose\");\r\n    options.addOption(\"debug\", false, \"print debug information\");\r\n    options.addOption(\"version\", false, \"produce logging information without adornments\");\r\n    options.addOption(\"logfile\", true, \"use given file for log\");\r\n    options.addOption(\"logger\", true, \"the class which is to perform the logging\");\r\n    options.addOption(\"listener\", true, \"add an instance of a class as a project listener\");\r\n    options.addOption(\"buildfile\", true, \"use given buildfile\");\r\n    options.addOption(OptionBuilder.withDescription(\"use value for given property\").hasArg().hasMultipleArgs().create(\u0027D\u0027));\r\n    options.addOption(\"find\", true, \"search for buildfile towards the root of the filesystem and use it\");\r\n    String[] args \u003d new String[] { \"-buildfile\", \"mybuild.xml\", \"-Dproperty\u003dvalue\", \"-Dproperty1\u003dvalue1\", \"-projecthelp\" };\r\n    try {\r\n        CommandLine line \u003d parser.parse(options, args);\r\n        String[] opts \u003d line.getOptionValues(\"D\");\r\n        assertEquals(opts[0], \"property\u003dvalue\");\r\n        assertEquals(opts[1], \"property1\u003dvalue1\");\r\n        assertEquals(line.getOptionValue(\"buildfile\"), \"mybuild.xml\");\r\n        assertTrue(line.hasOption(\"projecthelp\"));\r\n    } catch (ParseException exp) {\r\n        fail(\"Unexpected exception:\" + exp.getMessage());\r\n    }\r\n}",
      "path": "src/test/org/apache/commons/cli/ApplicationTest.java",
      "functionStartLine": 36,
      "functionName": "testAnt",
      "functionAnnotation": "",
      "functionDoc": "Ant test\r\n",
      "diff": "@@ -1,28 +1,28 @@\n public void testAnt() {\r\n     CommandLineParser parser \u003d CommandLineParserFactory.newParser(\"org.apache.commons.cli.GnuParser\");\r\n     Options options \u003d new Options();\r\n     options.addOption(\"help\", false, \"print this message\");\r\n     options.addOption(\"projecthelp\", false, \"print project help information\");\r\n     options.addOption(\"version\", false, \"print the version information and exit\");\r\n     options.addOption(\"quiet\", false, \"be extra quiet\");\r\n     options.addOption(\"verbose\", false, \"be extra verbose\");\r\n     options.addOption(\"debug\", false, \"print debug information\");\r\n     options.addOption(\"version\", false, \"produce logging information without adornments\");\r\n     options.addOption(\"logfile\", true, \"use given file for log\");\r\n     options.addOption(\"logger\", true, \"the class which is to perform the logging\");\r\n     options.addOption(\"listener\", true, \"add an instance of a class as a project listener\");\r\n     options.addOption(\"buildfile\", true, \"use given buildfile\");\r\n-    options.addOption(\"D\", null, true, \"use value for given property\", false, true);\r\n+    options.addOption(OptionBuilder.withDescription(\"use value for given property\").hasArg().hasMultipleArgs().create(\u0027D\u0027));\r\n     options.addOption(\"find\", true, \"search for buildfile towards the root of the filesystem and use it\");\r\n     String[] args \u003d new String[] { \"-buildfile\", \"mybuild.xml\", \"-Dproperty\u003dvalue\", \"-Dproperty1\u003dvalue1\", \"-projecthelp\" };\r\n     try {\r\n         CommandLine line \u003d parser.parse(options, args);\r\n         String[] opts \u003d line.getOptionValues(\"D\");\r\n         assertEquals(opts[0], \"property\u003dvalue\");\r\n         assertEquals(opts[1], \"property1\u003dvalue1\");\r\n         assertEquals(line.getOptionValue(\"buildfile\"), \"mybuild.xml\");\r\n         assertTrue(line.hasOption(\"projecthelp\"));\r\n     } catch (ParseException exp) {\r\n         fail(\"Unexpected exception:\" + exp.getMessage());\r\n     }\r\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "e56c41bcf610081622b663fc053521552705909f": {
      "type": "Ybodychange",
      "commitMessage": "create the parser using a classname parameter instead of a system property\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/cli/trunk@129789 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "7/26/02 12:40 AM",
      "commitName": "e56c41bcf610081622b663fc053521552705909f",
      "commitAuthor": "John Keyes",
      "commitDateOld": "7/5/02 1:32 AM",
      "commitNameOld": "66d0ae6216730abd8bd736e210be73229c8e807b",
      "commitAuthorOld": "John Keyes",
      "daysBetweenCommits": 20.96,
      "commitsBetweenForRepo": 11,
      "commitsBetweenForFile": 1,
      "actualSource": "public void testAnt() {\r\n    CommandLineParser parser \u003d CommandLineParserFactory.newParser(\"org.apache.commons.cli.GnuParser\");\r\n    Options options \u003d new Options();\r\n    options.addOption(\"help\", false, \"print this message\");\r\n    options.addOption(\"projecthelp\", false, \"print project help information\");\r\n    options.addOption(\"version\", false, \"print the version information and exit\");\r\n    options.addOption(\"quiet\", false, \"be extra quiet\");\r\n    options.addOption(\"verbose\", false, \"be extra verbose\");\r\n    options.addOption(\"debug\", false, \"print debug information\");\r\n    options.addOption(\"version\", false, \"produce logging information without adornments\");\r\n    options.addOption(\"logfile\", true, \"use given file for log\");\r\n    options.addOption(\"logger\", true, \"the class which is to perform the logging\");\r\n    options.addOption(\"listener\", true, \"add an instance of a class as a project listener\");\r\n    options.addOption(\"buildfile\", true, \"use given buildfile\");\r\n    options.addOption(\"D\", null, true, \"use value for given property\", false, true);\r\n    options.addOption(\"find\", true, \"search for buildfile towards the root of the filesystem and use it\");\r\n    String[] args \u003d new String[] { \"-buildfile\", \"mybuild.xml\", \"-Dproperty\u003dvalue\", \"-Dproperty1\u003dvalue1\", \"-projecthelp\" };\r\n    try {\r\n        CommandLine line \u003d parser.parse(options, args);\r\n        String[] opts \u003d line.getOptionValues(\"D\");\r\n        assertEquals(opts[0], \"property\u003dvalue\");\r\n        assertEquals(opts[1], \"property1\u003dvalue1\");\r\n        assertEquals(line.getOptionValue(\"buildfile\"), \"mybuild.xml\");\r\n        assertTrue(line.hasOption(\"projecthelp\"));\r\n    } catch (ParseException exp) {\r\n        fail(\"Unexpected exception:\" + exp.getMessage());\r\n    }\r\n}",
      "path": "src/test/org/apache/commons/cli/ApplicationTest.java",
      "functionStartLine": 36,
      "functionName": "testAnt",
      "functionAnnotation": "",
      "functionDoc": "Ant test\r\n",
      "diff": "@@ -1,29 +1,28 @@\n public void testAnt() {\r\n-    System.setProperty(\"org.apache.commons.cli.parser\", \"org.apache.commons.cli.GnuParser\");\r\n-    CommandLineParser parser \u003d CommandLineParserFactory.newParser();\r\n+    CommandLineParser parser \u003d CommandLineParserFactory.newParser(\"org.apache.commons.cli.GnuParser\");\r\n     Options options \u003d new Options();\r\n     options.addOption(\"help\", false, \"print this message\");\r\n     options.addOption(\"projecthelp\", false, \"print project help information\");\r\n     options.addOption(\"version\", false, \"print the version information and exit\");\r\n     options.addOption(\"quiet\", false, \"be extra quiet\");\r\n     options.addOption(\"verbose\", false, \"be extra verbose\");\r\n     options.addOption(\"debug\", false, \"print debug information\");\r\n     options.addOption(\"version\", false, \"produce logging information without adornments\");\r\n     options.addOption(\"logfile\", true, \"use given file for log\");\r\n     options.addOption(\"logger\", true, \"the class which is to perform the logging\");\r\n     options.addOption(\"listener\", true, \"add an instance of a class as a project listener\");\r\n     options.addOption(\"buildfile\", true, \"use given buildfile\");\r\n     options.addOption(\"D\", null, true, \"use value for given property\", false, true);\r\n     options.addOption(\"find\", true, \"search for buildfile towards the root of the filesystem and use it\");\r\n     String[] args \u003d new String[] { \"-buildfile\", \"mybuild.xml\", \"-Dproperty\u003dvalue\", \"-Dproperty1\u003dvalue1\", \"-projecthelp\" };\r\n     try {\r\n         CommandLine line \u003d parser.parse(options, args);\r\n         String[] opts \u003d line.getOptionValues(\"D\");\r\n         assertEquals(opts[0], \"property\u003dvalue\");\r\n         assertEquals(opts[1], \"property1\u003dvalue1\");\r\n         assertEquals(line.getOptionValue(\"buildfile\"), \"mybuild.xml\");\r\n         assertTrue(line.hasOption(\"projecthelp\"));\r\n     } catch (ParseException exp) {\r\n         fail(\"Unexpected exception:\" + exp.getMessage());\r\n     }\r\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "66d0ae6216730abd8bd736e210be73229c8e807b": {
      "type": "Ybodychange",
      "commitMessage": "implemented the parser factory, added new unit tests for the GnuParser, a good deal of refactoring for both parsers\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/cli/trunk@129778 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "7/5/02 1:32 AM",
      "commitName": "66d0ae6216730abd8bd736e210be73229c8e807b",
      "commitAuthor": "John Keyes",
      "commitDateOld": "6/21/02 12:30 AM",
      "commitNameOld": "094746596cb39b2bfbd1843233b7dd2009736c00",
      "commitAuthorOld": "John Keyes",
      "daysBetweenCommits": 14.04,
      "commitsBetweenForRepo": 4,
      "commitsBetweenForFile": 1,
      "actualSource": "public void testAnt() {\r\n    System.setProperty(\"org.apache.commons.cli.parser\", \"org.apache.commons.cli.GnuParser\");\r\n    CommandLineParser parser \u003d CommandLineParserFactory.newParser();\r\n    Options options \u003d new Options();\r\n    options.addOption(\"help\", false, \"print this message\");\r\n    options.addOption(\"projecthelp\", false, \"print project help information\");\r\n    options.addOption(\"version\", false, \"print the version information and exit\");\r\n    options.addOption(\"quiet\", false, \"be extra quiet\");\r\n    options.addOption(\"verbose\", false, \"be extra verbose\");\r\n    options.addOption(\"debug\", false, \"print debug information\");\r\n    options.addOption(\"version\", false, \"produce logging information without adornments\");\r\n    options.addOption(\"logfile\", true, \"use given file for log\");\r\n    options.addOption(\"logger\", true, \"the class which is to perform the logging\");\r\n    options.addOption(\"listener\", true, \"add an instance of a class as a project listener\");\r\n    options.addOption(\"buildfile\", true, \"use given buildfile\");\r\n    options.addOption(\"D\", null, true, \"use value for given property\", false, true);\r\n    options.addOption(\"find\", true, \"search for buildfile towards the root of the filesystem and use it\");\r\n    String[] args \u003d new String[] { \"-buildfile\", \"mybuild.xml\", \"-Dproperty\u003dvalue\", \"-Dproperty1\u003dvalue1\", \"-projecthelp\" };\r\n    try {\r\n        CommandLine line \u003d parser.parse(options, args);\r\n        String[] opts \u003d line.getOptionValues(\"D\");\r\n        assertEquals(opts[0], \"property\u003dvalue\");\r\n        assertEquals(opts[1], \"property1\u003dvalue1\");\r\n        assertEquals(line.getOptionValue(\"buildfile\"), \"mybuild.xml\");\r\n        assertTrue(line.hasOption(\"projecthelp\"));\r\n    } catch (ParseException exp) {\r\n        fail(\"Unexpected exception:\" + exp.getMessage());\r\n    }\r\n}",
      "path": "src/test/org/apache/commons/cli/ApplicationTest.java",
      "functionStartLine": 36,
      "functionName": "testAnt",
      "functionAnnotation": "",
      "functionDoc": "Ant test\r\n",
      "diff": "@@ -1,28 +1,29 @@\n public void testAnt() {\r\n     System.setProperty(\"org.apache.commons.cli.parser\", \"org.apache.commons.cli.GnuParser\");\r\n+    CommandLineParser parser \u003d CommandLineParserFactory.newParser();\r\n     Options options \u003d new Options();\r\n     options.addOption(\"help\", false, \"print this message\");\r\n     options.addOption(\"projecthelp\", false, \"print project help information\");\r\n     options.addOption(\"version\", false, \"print the version information and exit\");\r\n     options.addOption(\"quiet\", false, \"be extra quiet\");\r\n     options.addOption(\"verbose\", false, \"be extra verbose\");\r\n     options.addOption(\"debug\", false, \"print debug information\");\r\n     options.addOption(\"version\", false, \"produce logging information without adornments\");\r\n     options.addOption(\"logfile\", true, \"use given file for log\");\r\n     options.addOption(\"logger\", true, \"the class which is to perform the logging\");\r\n     options.addOption(\"listener\", true, \"add an instance of a class as a project listener\");\r\n     options.addOption(\"buildfile\", true, \"use given buildfile\");\r\n     options.addOption(\"D\", null, true, \"use value for given property\", false, true);\r\n     options.addOption(\"find\", true, \"search for buildfile towards the root of the filesystem and use it\");\r\n     String[] args \u003d new String[] { \"-buildfile\", \"mybuild.xml\", \"-Dproperty\u003dvalue\", \"-Dproperty1\u003dvalue1\", \"-projecthelp\" };\r\n     try {\r\n-        CommandLine line \u003d options.parse(args);\r\n+        CommandLine line \u003d parser.parse(options, args);\r\n         String[] opts \u003d line.getOptionValues(\"D\");\r\n         assertEquals(opts[0], \"property\u003dvalue\");\r\n         assertEquals(opts[1], \"property1\u003dvalue1\");\r\n         assertEquals(line.getOptionValue(\"buildfile\"), \"mybuild.xml\");\r\n         assertTrue(line.hasOption(\"projecthelp\"));\r\n     } catch (ParseException exp) {\r\n         fail(\"Unexpected exception:\" + exp.getMessage());\r\n     }\r\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "094746596cb39b2bfbd1843233b7dd2009736c00": {
      "type": "Ymultichange(Ybodychange,Ydocchange)",
      "commitMessage": "improved the testing of ant\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/cli/trunk@129774 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "6/21/02 12:30 AM",
      "commitName": "094746596cb39b2bfbd1843233b7dd2009736c00",
      "commitAuthor": "John Keyes",
      "subchanges": [
        {
          "type": "Ybodychange",
          "commitMessage": "improved the testing of ant\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/cli/trunk@129774 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "6/21/02 12:30 AM",
          "commitName": "094746596cb39b2bfbd1843233b7dd2009736c00",
          "commitAuthor": "John Keyes",
          "commitDateOld": "6/20/02 12:25 AM",
          "commitNameOld": "ead3757ef361f85cfb92754e808dafd74eb15702",
          "commitAuthorOld": "John Keyes",
          "daysBetweenCommits": 1.0,
          "commitsBetweenForRepo": 3,
          "commitsBetweenForFile": 1,
          "actualSource": "public void testAnt() {\r\n    System.setProperty(\"org.apache.commons.cli.parser\", \"org.apache.commons.cli.GnuParser\");\r\n    Options options \u003d new Options();\r\n    options.addOption(\"help\", false, \"print this message\");\r\n    options.addOption(\"projecthelp\", false, \"print project help information\");\r\n    options.addOption(\"version\", false, \"print the version information and exit\");\r\n    options.addOption(\"quiet\", false, \"be extra quiet\");\r\n    options.addOption(\"verbose\", false, \"be extra verbose\");\r\n    options.addOption(\"debug\", false, \"print debug information\");\r\n    options.addOption(\"version\", false, \"produce logging information without adornments\");\r\n    options.addOption(\"logfile\", true, \"use given file for log\");\r\n    options.addOption(\"logger\", true, \"the class which is to perform the logging\");\r\n    options.addOption(\"listener\", true, \"add an instance of a class as a project listener\");\r\n    options.addOption(\"buildfile\", true, \"use given buildfile\");\r\n    options.addOption(\"D\", null, true, \"use value for given property\", false, true);\r\n    options.addOption(\"find\", true, \"search for buildfile towards the root of the filesystem and use it\");\r\n    String[] args \u003d new String[] { \"-buildfile\", \"mybuild.xml\", \"-Dproperty\u003dvalue\", \"-Dproperty1\u003dvalue1\", \"-projecthelp\" };\r\n    try {\r\n        CommandLine line \u003d options.parse(args);\r\n        String[] opts \u003d line.getOptionValues(\"D\");\r\n        assertEquals(opts[0], \"property\u003dvalue\");\r\n        assertEquals(opts[1], \"property1\u003dvalue1\");\r\n        assertEquals(line.getOptionValue(\"buildfile\"), \"mybuild.xml\");\r\n        assertTrue(line.hasOption(\"projecthelp\"));\r\n    } catch (ParseException exp) {\r\n        fail(\"Unexpected exception:\" + exp.getMessage());\r\n    }\r\n}",
          "path": "src/test/org/apache/commons/cli/ApplicationTest.java",
          "functionStartLine": 36,
          "functionName": "testAnt",
          "functionAnnotation": "",
          "functionDoc": "Ant test\r\n",
          "diff": "@@ -1,30 +1,28 @@\n public void testAnt() {\r\n+    System.setProperty(\"org.apache.commons.cli.parser\", \"org.apache.commons.cli.GnuParser\");\r\n     Options options \u003d new Options();\r\n     options.addOption(\"help\", false, \"print this message\");\r\n     options.addOption(\"projecthelp\", false, \"print project help information\");\r\n     options.addOption(\"version\", false, \"print the version information and exit\");\r\n     options.addOption(\"quiet\", false, \"be extra quiet\");\r\n     options.addOption(\"verbose\", false, \"be extra verbose\");\r\n     options.addOption(\"debug\", false, \"print debug information\");\r\n     options.addOption(\"version\", false, \"produce logging information without adornments\");\r\n     options.addOption(\"logfile\", true, \"use given file for log\");\r\n     options.addOption(\"logger\", true, \"the class which is to perform the logging\");\r\n     options.addOption(\"listener\", true, \"add an instance of a class as a project listener\");\r\n     options.addOption(\"buildfile\", true, \"use given buildfile\");\r\n-    options.addOption(\"D\", true, \"use value for given property\");\r\n+    options.addOption(\"D\", null, true, \"use value for given property\", false, true);\r\n     options.addOption(\"find\", true, \"search for buildfile towards the root of the filesystem and use it\");\r\n-    String[] args \u003d new String[] { \"-buildfile\", \"mybuild.xml\" };\r\n+    String[] args \u003d new String[] { \"-buildfile\", \"mybuild.xml\", \"-Dproperty\u003dvalue\", \"-Dproperty1\u003dvalue1\", \"-projecthelp\" };\r\n     try {\r\n         CommandLine line \u003d options.parse(args);\r\n-        assertTrue(\"mybuild.xml\" \u003d\u003d line.getOptionValue(\"buildfile\"));\r\n-    } catch (ParseException exp) {\r\n-        fail(\"Unexpected exception:\" + exp.getMessage());\r\n-    }\r\n-    args \u003d new String[] { \"-buildfile\", \"mybuild.xml\", \"-Dproperty\u003dvalue\" };\r\n-    try {\r\n-        CommandLine line \u003d options.parse(args);\r\n-        assertEquals(line.getOptionValue(\"D\"), \"property\u003dvalue\");\r\n+        String[] opts \u003d line.getOptionValues(\"D\");\r\n+        assertEquals(opts[0], \"property\u003dvalue\");\r\n+        assertEquals(opts[1], \"property1\u003dvalue1\");\r\n+        assertEquals(line.getOptionValue(\"buildfile\"), \"mybuild.xml\");\r\n+        assertTrue(line.hasOption(\"projecthelp\"));\r\n     } catch (ParseException exp) {\r\n         fail(\"Unexpected exception:\" + exp.getMessage());\r\n     }\r\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        },
        {
          "type": "Ydocchange",
          "commitMessage": "improved the testing of ant\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/cli/trunk@129774 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "6/21/02 12:30 AM",
          "commitName": "094746596cb39b2bfbd1843233b7dd2009736c00",
          "commitAuthor": "John Keyes",
          "commitDateOld": "6/20/02 12:25 AM",
          "commitNameOld": "ead3757ef361f85cfb92754e808dafd74eb15702",
          "commitAuthorOld": "John Keyes",
          "daysBetweenCommits": 1.0,
          "commitsBetweenForRepo": 3,
          "commitsBetweenForFile": 1,
          "actualSource": "public void testAnt() {\r\n    System.setProperty(\"org.apache.commons.cli.parser\", \"org.apache.commons.cli.GnuParser\");\r\n    Options options \u003d new Options();\r\n    options.addOption(\"help\", false, \"print this message\");\r\n    options.addOption(\"projecthelp\", false, \"print project help information\");\r\n    options.addOption(\"version\", false, \"print the version information and exit\");\r\n    options.addOption(\"quiet\", false, \"be extra quiet\");\r\n    options.addOption(\"verbose\", false, \"be extra verbose\");\r\n    options.addOption(\"debug\", false, \"print debug information\");\r\n    options.addOption(\"version\", false, \"produce logging information without adornments\");\r\n    options.addOption(\"logfile\", true, \"use given file for log\");\r\n    options.addOption(\"logger\", true, \"the class which is to perform the logging\");\r\n    options.addOption(\"listener\", true, \"add an instance of a class as a project listener\");\r\n    options.addOption(\"buildfile\", true, \"use given buildfile\");\r\n    options.addOption(\"D\", null, true, \"use value for given property\", false, true);\r\n    options.addOption(\"find\", true, \"search for buildfile towards the root of the filesystem and use it\");\r\n    String[] args \u003d new String[] { \"-buildfile\", \"mybuild.xml\", \"-Dproperty\u003dvalue\", \"-Dproperty1\u003dvalue1\", \"-projecthelp\" };\r\n    try {\r\n        CommandLine line \u003d options.parse(args);\r\n        String[] opts \u003d line.getOptionValues(\"D\");\r\n        assertEquals(opts[0], \"property\u003dvalue\");\r\n        assertEquals(opts[1], \"property1\u003dvalue1\");\r\n        assertEquals(line.getOptionValue(\"buildfile\"), \"mybuild.xml\");\r\n        assertTrue(line.hasOption(\"projecthelp\"));\r\n    } catch (ParseException exp) {\r\n        fail(\"Unexpected exception:\" + exp.getMessage());\r\n    }\r\n}",
          "path": "src/test/org/apache/commons/cli/ApplicationTest.java",
          "functionStartLine": 36,
          "functionName": "testAnt",
          "functionAnnotation": "",
          "functionDoc": "Ant test\r\n",
          "diff": "@@ -1,30 +1,28 @@\n public void testAnt() {\r\n+    System.setProperty(\"org.apache.commons.cli.parser\", \"org.apache.commons.cli.GnuParser\");\r\n     Options options \u003d new Options();\r\n     options.addOption(\"help\", false, \"print this message\");\r\n     options.addOption(\"projecthelp\", false, \"print project help information\");\r\n     options.addOption(\"version\", false, \"print the version information and exit\");\r\n     options.addOption(\"quiet\", false, \"be extra quiet\");\r\n     options.addOption(\"verbose\", false, \"be extra verbose\");\r\n     options.addOption(\"debug\", false, \"print debug information\");\r\n     options.addOption(\"version\", false, \"produce logging information without adornments\");\r\n     options.addOption(\"logfile\", true, \"use given file for log\");\r\n     options.addOption(\"logger\", true, \"the class which is to perform the logging\");\r\n     options.addOption(\"listener\", true, \"add an instance of a class as a project listener\");\r\n     options.addOption(\"buildfile\", true, \"use given buildfile\");\r\n-    options.addOption(\"D\", true, \"use value for given property\");\r\n+    options.addOption(\"D\", null, true, \"use value for given property\", false, true);\r\n     options.addOption(\"find\", true, \"search for buildfile towards the root of the filesystem and use it\");\r\n-    String[] args \u003d new String[] { \"-buildfile\", \"mybuild.xml\" };\r\n+    String[] args \u003d new String[] { \"-buildfile\", \"mybuild.xml\", \"-Dproperty\u003dvalue\", \"-Dproperty1\u003dvalue1\", \"-projecthelp\" };\r\n     try {\r\n         CommandLine line \u003d options.parse(args);\r\n-        assertTrue(\"mybuild.xml\" \u003d\u003d line.getOptionValue(\"buildfile\"));\r\n-    } catch (ParseException exp) {\r\n-        fail(\"Unexpected exception:\" + exp.getMessage());\r\n-    }\r\n-    args \u003d new String[] { \"-buildfile\", \"mybuild.xml\", \"-Dproperty\u003dvalue\" };\r\n-    try {\r\n-        CommandLine line \u003d options.parse(args);\r\n-        assertEquals(line.getOptionValue(\"D\"), \"property\u003dvalue\");\r\n+        String[] opts \u003d line.getOptionValues(\"D\");\r\n+        assertEquals(opts[0], \"property\u003dvalue\");\r\n+        assertEquals(opts[1], \"property1\u003dvalue1\");\r\n+        assertEquals(line.getOptionValue(\"buildfile\"), \"mybuild.xml\");\r\n+        assertTrue(line.hasOption(\"projecthelp\"));\r\n     } catch (ParseException exp) {\r\n         fail(\"Unexpected exception:\" + exp.getMessage());\r\n     }\r\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "",
            "newValue": "Ant test\r\n"
          }
        }
      ]
    },
    "ead3757ef361f85cfb92754e808dafd74eb15702": {
      "type": "Yintroduced",
      "commitMessage": "GNU parser, one unit test for Ant\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/cli/trunk@129771 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "6/20/02 12:25 AM",
      "commitName": "ead3757ef361f85cfb92754e808dafd74eb15702",
      "commitAuthor": "John Keyes",
      "diff": "@@ -0,0 +1,30 @@\n+public void testAnt() {\r\n+    Options options \u003d new Options();\r\n+    options.addOption(\"help\", false, \"print this message\");\r\n+    options.addOption(\"projecthelp\", false, \"print project help information\");\r\n+    options.addOption(\"version\", false, \"print the version information and exit\");\r\n+    options.addOption(\"quiet\", false, \"be extra quiet\");\r\n+    options.addOption(\"verbose\", false, \"be extra verbose\");\r\n+    options.addOption(\"debug\", false, \"print debug information\");\r\n+    options.addOption(\"version\", false, \"produce logging information without adornments\");\r\n+    options.addOption(\"logfile\", true, \"use given file for log\");\r\n+    options.addOption(\"logger\", true, \"the class which is to perform the logging\");\r\n+    options.addOption(\"listener\", true, \"add an instance of a class as a project listener\");\r\n+    options.addOption(\"buildfile\", true, \"use given buildfile\");\r\n+    options.addOption(\"D\", true, \"use value for given property\");\r\n+    options.addOption(\"find\", true, \"search for buildfile towards the root of the filesystem and use it\");\r\n+    String[] args \u003d new String[] { \"-buildfile\", \"mybuild.xml\" };\r\n+    try {\r\n+        CommandLine line \u003d options.parse(args);\r\n+        assertTrue(\"mybuild.xml\" \u003d\u003d line.getOptionValue(\"buildfile\"));\r\n+    } catch (ParseException exp) {\r\n+        fail(\"Unexpected exception:\" + exp.getMessage());\r\n+    }\r\n+    args \u003d new String[] { \"-buildfile\", \"mybuild.xml\", \"-Dproperty\u003dvalue\" };\r\n+    try {\r\n+        CommandLine line \u003d options.parse(args);\r\n+        assertEquals(line.getOptionValue(\"D\"), \"property\u003dvalue\");\r\n+    } catch (ParseException exp) {\r\n+        fail(\"Unexpected exception:\" + exp.getMessage());\r\n+    }\r\n+}\n\\ No newline at end of file\n",
      "actualSource": "public void testAnt() {\r\n    Options options \u003d new Options();\r\n    options.addOption(\"help\", false, \"print this message\");\r\n    options.addOption(\"projecthelp\", false, \"print project help information\");\r\n    options.addOption(\"version\", false, \"print the version information and exit\");\r\n    options.addOption(\"quiet\", false, \"be extra quiet\");\r\n    options.addOption(\"verbose\", false, \"be extra verbose\");\r\n    options.addOption(\"debug\", false, \"print debug information\");\r\n    options.addOption(\"version\", false, \"produce logging information without adornments\");\r\n    options.addOption(\"logfile\", true, \"use given file for log\");\r\n    options.addOption(\"logger\", true, \"the class which is to perform the logging\");\r\n    options.addOption(\"listener\", true, \"add an instance of a class as a project listener\");\r\n    options.addOption(\"buildfile\", true, \"use given buildfile\");\r\n    options.addOption(\"D\", true, \"use value for given property\");\r\n    options.addOption(\"find\", true, \"search for buildfile towards the root of the filesystem and use it\");\r\n    String[] args \u003d new String[] { \"-buildfile\", \"mybuild.xml\" };\r\n    try {\r\n        CommandLine line \u003d options.parse(args);\r\n        assertTrue(\"mybuild.xml\" \u003d\u003d line.getOptionValue(\"buildfile\"));\r\n    } catch (ParseException exp) {\r\n        fail(\"Unexpected exception:\" + exp.getMessage());\r\n    }\r\n    args \u003d new String[] { \"-buildfile\", \"mybuild.xml\", \"-Dproperty\u003dvalue\" };\r\n    try {\r\n        CommandLine line \u003d options.parse(args);\r\n        assertEquals(line.getOptionValue(\"D\"), \"property\u003dvalue\");\r\n    } catch (ParseException exp) {\r\n        fail(\"Unexpected exception:\" + exp.getMessage());\r\n    }\r\n}",
      "path": "src/test/org/apache/commons/cli/ApplicationTest.java",
      "functionStartLine": 23,
      "functionName": "testAnt",
      "functionAnnotation": "",
      "functionDoc": ""
    }
  }
}