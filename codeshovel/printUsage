{
  "origin": "codeshovel",
  "repositoryName": "commons-cli",
  "repositoryPath": "D:/_SELEN/_2022-2023/CS588/GitHub_Dataset/commons-cli/commons-cli/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "HelpFormatter.java",
  "functionName": "printUsage",
  "functionId": "printUsage___pw-PrintWriter(modifiers-final)__width-int(modifiers-final)__app-String(modifiers-final)__options-Options(modifiers-final)",
  "sourceFilePath": "src/main/java/org/apache/commons/cli/HelpFormatter.java",
  "functionAnnotation": "",
  "functionDoc": "Prints the usage statement for the specified application.\r\n\r\n@param pw The PrintWriter to print the usage statement\r\n@param width The number of characters to display per line\r\n@param app The application name\r\n@param options The command line Options\r\n",
  "functionStartLine": 584,
  "functionEndLine": 630,
  "numCommitsSeen": 92,
  "timeTaken": 291,
  "changeHistory": [
    "bc0edc47dbf47cdaa3485cfb724982f377c900df",
    "66cc7b4cb8b0f39edfe0ee37eead4ace04a7be4e",
    "02aba6c78d451376053478e4d627ba6f2fd6ba21",
    "c12260c05ebcd27558265395df79b8b049534fbd",
    "5fb9e5009a8cdc7366b7a762f0e43dc47decf67c",
    "357a8b0b8f1090db29e0d541a9419f570a78457b",
    "3936da9d3fe37bcd20dd37216d82608e5917be07",
    "97ddfd9dc79cc0fd5044f754f5e74818387567c3",
    "491340dc5e6c8d4233cc575571e15dd357f20b70",
    "a955324468d45eb845e05107d5b0013285c3bc0a",
    "a1b5d44432c057cf675f051bb20379937565f4ef",
    "3d57a495145916d1cd183cced771935c06da786a",
    "1596f3bbe57986361da4ac1a23634dd5b00d10df",
    "180a16def56be368c2c33a56c1778b8d7ce170c7",
    "147df44faa4eb12ffd4a0063fc3284f784ea67c8",
    "df8f8e160c5fc9b955c627c4b65c7ba67088b7ac",
    "6f972cf56d7a3054bac902fecb6d3dd5ee310dea",
    "9b2b8038b52be022e42c8c7fdf26e236888f94c5",
    "6bcbf153c4497c38c4c36c3a04c1eac1f4cc153b",
    "4c34483ea18c6a4f259f19a6d18637bb1fbae1e8",
    "a0212835ed42e03a01c2c930a695e478a0884f68",
    "62670f565aa434b6cb614c1054a8ea5bc3715f25",
    "c7127329dad2c5d6284532da09ddc0fdefd67436"
  ],
  "changeHistoryShort": {
    "bc0edc47dbf47cdaa3485cfb724982f377c900df": "Yformatchange",
    "66cc7b4cb8b0f39edfe0ee37eead4ace04a7be4e": "Ybodychange",
    "02aba6c78d451376053478e4d627ba6f2fd6ba21": "Ybodychange",
    "c12260c05ebcd27558265395df79b8b049534fbd": "Yformatchange",
    "5fb9e5009a8cdc7366b7a762f0e43dc47decf67c": "Yparametermetachange",
    "357a8b0b8f1090db29e0d541a9419f570a78457b": "Ybodychange",
    "3936da9d3fe37bcd20dd37216d82608e5917be07": "Ybodychange",
    "97ddfd9dc79cc0fd5044f754f5e74818387567c3": "Ybodychange",
    "491340dc5e6c8d4233cc575571e15dd357f20b70": "Yformatchange",
    "a955324468d45eb845e05107d5b0013285c3bc0a": "Ybodychange",
    "a1b5d44432c057cf675f051bb20379937565f4ef": "Ybodychange",
    "3d57a495145916d1cd183cced771935c06da786a": "Ybodychange",
    "1596f3bbe57986361da4ac1a23634dd5b00d10df": "Yfilerename",
    "180a16def56be368c2c33a56c1778b8d7ce170c7": "Ydocchange",
    "147df44faa4eb12ffd4a0063fc3284f784ea67c8": "Yformatchange",
    "df8f8e160c5fc9b955c627c4b65c7ba67088b7ac": "Ybodychange",
    "6f972cf56d7a3054bac902fecb6d3dd5ee310dea": "Ybodychange",
    "9b2b8038b52be022e42c8c7fdf26e236888f94c5": "Ymultichange(Ydocchange,Yformatchange)",
    "6bcbf153c4497c38c4c36c3a04c1eac1f4cc153b": "Ymultichange(Ybodychange,Ydocchange)",
    "4c34483ea18c6a4f259f19a6d18637bb1fbae1e8": "Ybodychange",
    "a0212835ed42e03a01c2c930a695e478a0884f68": "Ybodychange",
    "62670f565aa434b6cb614c1054a8ea5bc3715f25": "Ybodychange",
    "c7127329dad2c5d6284532da09ddc0fdefd67436": "Yintroduced"
  },
  "changeHistoryDetails": {
    "bc0edc47dbf47cdaa3485cfb724982f377c900df": {
      "type": "Yformatchange",
      "commitMessage": "Clean ups.\n\n- maven-checkstyle-plugin 3.1.1 -\u003e 3.1.2.\n- checkstyle -\u003e 9.0\n- Updates for 21st century.\n- No need to nest else clause.\n- Use simple array declarations.\n- Use valueOf instead of new for Numbers.\n- Consistent formatting.\n- Remove some inline comments //-----...\n",
      "commitDate": "10/2/21 11:04 PM",
      "commitName": "bc0edc47dbf47cdaa3485cfb724982f377c900df",
      "commitAuthor": "Gary Gregory",
      "commitDateOld": "2/8/21 10:11 PM",
      "commitNameOld": "66cc7b4cb8b0f39edfe0ee37eead4ace04a7be4e",
      "commitAuthorOld": "Gary Gregory",
      "daysBetweenCommits": 236.04,
      "commitsBetweenForRepo": 22,
      "commitsBetweenForFile": 1,
      "actualSource": "public void printUsage(final PrintWriter pw, final int width, final String app, final Options options) {\r\n    final StringBuffer buff \u003d new StringBuffer(getSyntaxPrefix()).append(app).append(\" \");\r\n    final Collection\u003cOptionGroup\u003e processedGroups \u003d new ArrayList\u003c\u003e();\r\n    final List\u003cOption\u003e optList \u003d new ArrayList\u003c\u003e(options.getOptions());\r\n    if (getOptionComparator() !\u003d null) {\r\n        Collections.sort(optList, getOptionComparator());\r\n    }\r\n    for (final Iterator\u003cOption\u003e it \u003d optList.iterator(); it.hasNext(); ) {\r\n        final Option option \u003d it.next();\r\n        final OptionGroup group \u003d options.getOptionGroup(option);\r\n        if (group !\u003d null) {\r\n            if (!processedGroups.contains(group)) {\r\n                processedGroups.add(group);\r\n                appendOptionGroup(buff, group);\r\n            }\r\n        } else {\r\n            appendOption(buff, option, option.isRequired());\r\n        }\r\n        if (it.hasNext()) {\r\n            buff.append(\" \");\r\n        }\r\n    }\r\n    printWrapped(pw, width, buff.toString().indexOf(\u0027 \u0027) + 1, buff.toString());\r\n}",
      "path": "src/main/java/org/apache/commons/cli/HelpFormatter.java",
      "functionStartLine": 506,
      "functionName": "printUsage",
      "functionAnnotation": "",
      "functionDoc": "Prints the usage statement for the specified application.\r\n\r\n@param pw The PrintWriter to print the usage statement\r\n@param width The number of characters to display per line\r\n@param app The application name\r\n@param options The command line Options\r\n",
      "diff": "",
      "extendedDetails": {}
    },
    "66cc7b4cb8b0f39edfe0ee37eead4ace04a7be4e": {
      "type": "Ybodychange",
      "commitMessage": "Normalize to US English spelling.\n",
      "commitDate": "2/8/21 10:11 PM",
      "commitName": "66cc7b4cb8b0f39edfe0ee37eead4ace04a7be4e",
      "commitAuthor": "Gary Gregory",
      "commitDateOld": "1/17/21 5:38 PM",
      "commitNameOld": "e20023d55962858ec6cd3d786686a00192959a9b",
      "commitAuthorOld": "Gary Gregory",
      "daysBetweenCommits": 22.19,
      "commitsBetweenForRepo": 5,
      "commitsBetweenForFile": 1,
      "actualSource": "public void printUsage(final PrintWriter pw, final int width, final String app, final Options options) {\r\n    final StringBuffer buff \u003d new StringBuffer(getSyntaxPrefix()).append(app).append(\" \");\r\n    final Collection\u003cOptionGroup\u003e processedGroups \u003d new ArrayList\u003c\u003e();\r\n    final List\u003cOption\u003e optList \u003d new ArrayList\u003c\u003e(options.getOptions());\r\n    if (getOptionComparator() !\u003d null) {\r\n        Collections.sort(optList, getOptionComparator());\r\n    }\r\n    for (final Iterator\u003cOption\u003e it \u003d optList.iterator(); it.hasNext(); ) {\r\n        final Option option \u003d it.next();\r\n        final OptionGroup group \u003d options.getOptionGroup(option);\r\n        if (group !\u003d null) {\r\n            if (!processedGroups.contains(group)) {\r\n                processedGroups.add(group);\r\n                appendOptionGroup(buff, group);\r\n            }\r\n        } else {\r\n            appendOption(buff, option, option.isRequired());\r\n        }\r\n        if (it.hasNext()) {\r\n            buff.append(\" \");\r\n        }\r\n    }\r\n    printWrapped(pw, width, buff.toString().indexOf(\u0027 \u0027) + 1, buff.toString());\r\n}",
      "path": "src/main/java/org/apache/commons/cli/HelpFormatter.java",
      "functionStartLine": 577,
      "functionName": "printUsage",
      "functionAnnotation": "",
      "functionDoc": "Prints the usage statement for the specified application.\r\n\r\n@param pw The PrintWriter to print the usage statement\r\n@param width The number of characters to display per line\r\n@param app The application name\r\n@param options The command line Options\r\n",
      "diff": "",
      "extendedDetails": {}
    },
    "02aba6c78d451376053478e4d627ba6f2fd6ba21": {
      "type": "Ybodychange",
      "commitMessage": "Remove redundant generic type arguments.\n",
      "commitDate": "5/24/20 6:44 PM",
      "commitName": "02aba6c78d451376053478e4d627ba6f2fd6ba21",
      "commitAuthor": "Gary Gregory",
      "commitDateOld": "12/18/19 11:28 PM",
      "commitNameOld": "c12260c05ebcd27558265395df79b8b049534fbd",
      "commitAuthorOld": "Gary Gregory",
      "daysBetweenCommits": 157.8,
      "commitsBetweenForRepo": 6,
      "commitsBetweenForFile": 1,
      "actualSource": "public void printUsage(final PrintWriter pw, final int width, final String app, final Options options) {\r\n    final StringBuffer buff \u003d new StringBuffer(getSyntaxPrefix()).append(app).append(\" \");\r\n    final Collection\u003cOptionGroup\u003e processedGroups \u003d new ArrayList\u003c\u003e();\r\n    final List\u003cOption\u003e optList \u003d new ArrayList\u003c\u003e(options.getOptions());\r\n    if (getOptionComparator() !\u003d null) {\r\n        Collections.sort(optList, getOptionComparator());\r\n    }\r\n    for (final Iterator\u003cOption\u003e it \u003d optList.iterator(); it.hasNext(); ) {\r\n        final Option option \u003d it.next();\r\n        final OptionGroup group \u003d options.getOptionGroup(option);\r\n        if (group !\u003d null) {\r\n            if (!processedGroups.contains(group)) {\r\n                processedGroups.add(group);\r\n                appendOptionGroup(buff, group);\r\n            }\r\n        } else {\r\n            appendOption(buff, option, option.isRequired());\r\n        }\r\n        if (it.hasNext()) {\r\n            buff.append(\" \");\r\n        }\r\n    }\r\n    printWrapped(pw, width, buff.toString().indexOf(\u0027 \u0027) + 1, buff.toString());\r\n}",
      "path": "src/main/java/org/apache/commons/cli/HelpFormatter.java",
      "functionStartLine": 577,
      "functionName": "printUsage",
      "functionAnnotation": "",
      "functionDoc": "Prints the usage statement for the specified application.\r\n\r\n@param pw The PrintWriter to print the usage statement\r\n@param width The number of characters to display per line\r\n@param app The application name\r\n@param options The command line Options\r\n",
      "diff": "@@ -1,24 +1,24 @@\n public void printUsage(final PrintWriter pw, final int width, final String app, final Options options) {\r\n     final StringBuffer buff \u003d new StringBuffer(getSyntaxPrefix()).append(app).append(\" \");\r\n-    final Collection\u003cOptionGroup\u003e processedGroups \u003d new ArrayList\u003cOptionGroup\u003e();\r\n-    final List\u003cOption\u003e optList \u003d new ArrayList\u003cOption\u003e(options.getOptions());\r\n+    final Collection\u003cOptionGroup\u003e processedGroups \u003d new ArrayList\u003c\u003e();\r\n+    final List\u003cOption\u003e optList \u003d new ArrayList\u003c\u003e(options.getOptions());\r\n     if (getOptionComparator() !\u003d null) {\r\n         Collections.sort(optList, getOptionComparator());\r\n     }\r\n     for (final Iterator\u003cOption\u003e it \u003d optList.iterator(); it.hasNext(); ) {\r\n         final Option option \u003d it.next();\r\n         final OptionGroup group \u003d options.getOptionGroup(option);\r\n         if (group !\u003d null) {\r\n             if (!processedGroups.contains(group)) {\r\n                 processedGroups.add(group);\r\n                 appendOptionGroup(buff, group);\r\n             }\r\n         } else {\r\n             appendOption(buff, option, option.isRequired());\r\n         }\r\n         if (it.hasNext()) {\r\n             buff.append(\" \");\r\n         }\r\n     }\r\n     printWrapped(pw, width, buff.toString().indexOf(\u0027 \u0027) + 1, buff.toString());\r\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "c12260c05ebcd27558265395df79b8b049534fbd": {
      "type": "Yformatchange",
      "commitMessage": "Remove trailing white spaces on all lines.\n",
      "commitDate": "12/18/19 11:28 PM",
      "commitName": "c12260c05ebcd27558265395df79b8b049534fbd",
      "commitAuthor": "Gary Gregory",
      "commitDateOld": "6/15/17 1:23 PM",
      "commitNameOld": "9a845a2a30742b500e3b823b105434203427ea93",
      "commitAuthorOld": "Bruno P. Kinoshita",
      "daysBetweenCommits": 916.42,
      "commitsBetweenForRepo": 47,
      "commitsBetweenForFile": 1,
      "actualSource": "public void printUsage(final PrintWriter pw, final int width, final String app, final Options options) {\r\n    final StringBuffer buff \u003d new StringBuffer(getSyntaxPrefix()).append(app).append(\" \");\r\n    final Collection\u003cOptionGroup\u003e processedGroups \u003d new ArrayList\u003cOptionGroup\u003e();\r\n    final List\u003cOption\u003e optList \u003d new ArrayList\u003cOption\u003e(options.getOptions());\r\n    if (getOptionComparator() !\u003d null) {\r\n        Collections.sort(optList, getOptionComparator());\r\n    }\r\n    for (final Iterator\u003cOption\u003e it \u003d optList.iterator(); it.hasNext(); ) {\r\n        final Option option \u003d it.next();\r\n        final OptionGroup group \u003d options.getOptionGroup(option);\r\n        if (group !\u003d null) {\r\n            if (!processedGroups.contains(group)) {\r\n                processedGroups.add(group);\r\n                appendOptionGroup(buff, group);\r\n            }\r\n        } else {\r\n            appendOption(buff, option, option.isRequired());\r\n        }\r\n        if (it.hasNext()) {\r\n            buff.append(\" \");\r\n        }\r\n    }\r\n    printWrapped(pw, width, buff.toString().indexOf(\u0027 \u0027) + 1, buff.toString());\r\n}",
      "path": "src/main/java/org/apache/commons/cli/HelpFormatter.java",
      "functionStartLine": 577,
      "functionName": "printUsage",
      "functionAnnotation": "",
      "functionDoc": "Prints the usage statement for the specified application.\r\n\r\n@param pw The PrintWriter to print the usage statement\r\n@param width The number of characters to display per line\r\n@param app The application name\r\n@param options The command line Options\r\n",
      "diff": "",
      "extendedDetails": {}
    },
    "5fb9e5009a8cdc7366b7a762f0e43dc47decf67c": {
      "type": "Yparametermetachange",
      "commitMessage": "Add final modifier to method parameters.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/cli/trunk@1797674 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "6/5/17 7:38 PM",
      "commitName": "5fb9e5009a8cdc7366b7a762f0e43dc47decf67c",
      "commitAuthor": "Gary D. Gregory",
      "commitDateOld": "6/5/17 7:37 PM",
      "commitNameOld": "357a8b0b8f1090db29e0d541a9419f570a78457b",
      "commitAuthorOld": "Gary D. Gregory",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "public void printUsage(final PrintWriter pw, final int width, final String app, final Options options) {\r\n    final StringBuffer buff \u003d new StringBuffer(getSyntaxPrefix()).append(app).append(\" \");\r\n    final Collection\u003cOptionGroup\u003e processedGroups \u003d new ArrayList\u003cOptionGroup\u003e();\r\n    final List\u003cOption\u003e optList \u003d new ArrayList\u003cOption\u003e(options.getOptions());\r\n    if (getOptionComparator() !\u003d null) {\r\n        Collections.sort(optList, getOptionComparator());\r\n    }\r\n    for (final Iterator\u003cOption\u003e it \u003d optList.iterator(); it.hasNext(); ) {\r\n        final Option option \u003d it.next();\r\n        final OptionGroup group \u003d options.getOptionGroup(option);\r\n        if (group !\u003d null) {\r\n            if (!processedGroups.contains(group)) {\r\n                processedGroups.add(group);\r\n                appendOptionGroup(buff, group);\r\n            }\r\n        } else {\r\n            appendOption(buff, option, option.isRequired());\r\n        }\r\n        if (it.hasNext()) {\r\n            buff.append(\" \");\r\n        }\r\n    }\r\n    printWrapped(pw, width, buff.toString().indexOf(\u0027 \u0027) + 1, buff.toString());\r\n}",
      "path": "src/main/java/org/apache/commons/cli/HelpFormatter.java",
      "functionStartLine": 579,
      "functionName": "printUsage",
      "functionAnnotation": "",
      "functionDoc": "Prints the usage statement for the specified application.\r\n\r\n@param pw The PrintWriter to print the usage statement\r\n@param width The number of characters to display per line\r\n@param app The application name\r\n@param options The command line Options\r\n",
      "diff": "@@ -1,24 +1,24 @@\n-public void printUsage(PrintWriter pw, int width, String app, Options options) {\r\n+public void printUsage(final PrintWriter pw, final int width, final String app, final Options options) {\r\n     final StringBuffer buff \u003d new StringBuffer(getSyntaxPrefix()).append(app).append(\" \");\r\n     final Collection\u003cOptionGroup\u003e processedGroups \u003d new ArrayList\u003cOptionGroup\u003e();\r\n     final List\u003cOption\u003e optList \u003d new ArrayList\u003cOption\u003e(options.getOptions());\r\n     if (getOptionComparator() !\u003d null) {\r\n         Collections.sort(optList, getOptionComparator());\r\n     }\r\n     for (final Iterator\u003cOption\u003e it \u003d optList.iterator(); it.hasNext(); ) {\r\n         final Option option \u003d it.next();\r\n         final OptionGroup group \u003d options.getOptionGroup(option);\r\n         if (group !\u003d null) {\r\n             if (!processedGroups.contains(group)) {\r\n                 processedGroups.add(group);\r\n                 appendOptionGroup(buff, group);\r\n             }\r\n         } else {\r\n             appendOption(buff, option, option.isRequired());\r\n         }\r\n         if (it.hasNext()) {\r\n             buff.append(\" \");\r\n         }\r\n     }\r\n     printWrapped(pw, width, buff.toString().indexOf(\u0027 \u0027) + 1, buff.toString());\r\n }\n\\ No newline at end of file\n",
      "extendedDetails": {
        "oldValue": "[pw-PrintWriter, width-int, app-String, options-Options]",
        "newValue": "[pw-PrintWriter(modifiers-final), width-int(modifiers-final), app-String(modifiers-final), options-Options(modifiers-final)]"
      }
    },
    "357a8b0b8f1090db29e0d541a9419f570a78457b": {
      "type": "Ybodychange",
      "commitMessage": "Add final modifier to local variables.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/cli/trunk@1797673 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "6/5/17 7:37 PM",
      "commitName": "357a8b0b8f1090db29e0d541a9419f570a78457b",
      "commitAuthor": "Gary D. Gregory",
      "commitDateOld": "5/3/15 5:31 PM",
      "commitNameOld": "3a730c03fcd3f2715c83db85331d1b5b8c95a1d5",
      "commitAuthorOld": "Benedikt Ritter",
      "daysBetweenCommits": 764.09,
      "commitsBetweenForRepo": 55,
      "commitsBetweenForFile": 1,
      "actualSource": "public void printUsage(PrintWriter pw, int width, String app, Options options) {\r\n    final StringBuffer buff \u003d new StringBuffer(getSyntaxPrefix()).append(app).append(\" \");\r\n    final Collection\u003cOptionGroup\u003e processedGroups \u003d new ArrayList\u003cOptionGroup\u003e();\r\n    final List\u003cOption\u003e optList \u003d new ArrayList\u003cOption\u003e(options.getOptions());\r\n    if (getOptionComparator() !\u003d null) {\r\n        Collections.sort(optList, getOptionComparator());\r\n    }\r\n    for (final Iterator\u003cOption\u003e it \u003d optList.iterator(); it.hasNext(); ) {\r\n        final Option option \u003d it.next();\r\n        final OptionGroup group \u003d options.getOptionGroup(option);\r\n        if (group !\u003d null) {\r\n            if (!processedGroups.contains(group)) {\r\n                processedGroups.add(group);\r\n                appendOptionGroup(buff, group);\r\n            }\r\n        } else {\r\n            appendOption(buff, option, option.isRequired());\r\n        }\r\n        if (it.hasNext()) {\r\n            buff.append(\" \");\r\n        }\r\n    }\r\n    printWrapped(pw, width, buff.toString().indexOf(\u0027 \u0027) + 1, buff.toString());\r\n}",
      "path": "src/main/java/org/apache/commons/cli/HelpFormatter.java",
      "functionStartLine": 579,
      "functionName": "printUsage",
      "functionAnnotation": "",
      "functionDoc": "Prints the usage statement for the specified application.\r\n\r\n@param pw The PrintWriter to print the usage statement\r\n@param width The number of characters to display per line\r\n@param app The application name\r\n@param options The command line Options\r\n",
      "diff": "@@ -1,24 +1,24 @@\n public void printUsage(PrintWriter pw, int width, String app, Options options) {\r\n-    StringBuffer buff \u003d new StringBuffer(getSyntaxPrefix()).append(app).append(\" \");\r\n-    Collection\u003cOptionGroup\u003e processedGroups \u003d new ArrayList\u003cOptionGroup\u003e();\r\n-    List\u003cOption\u003e optList \u003d new ArrayList\u003cOption\u003e(options.getOptions());\r\n+    final StringBuffer buff \u003d new StringBuffer(getSyntaxPrefix()).append(app).append(\" \");\r\n+    final Collection\u003cOptionGroup\u003e processedGroups \u003d new ArrayList\u003cOptionGroup\u003e();\r\n+    final List\u003cOption\u003e optList \u003d new ArrayList\u003cOption\u003e(options.getOptions());\r\n     if (getOptionComparator() !\u003d null) {\r\n         Collections.sort(optList, getOptionComparator());\r\n     }\r\n-    for (Iterator\u003cOption\u003e it \u003d optList.iterator(); it.hasNext(); ) {\r\n-        Option option \u003d it.next();\r\n-        OptionGroup group \u003d options.getOptionGroup(option);\r\n+    for (final Iterator\u003cOption\u003e it \u003d optList.iterator(); it.hasNext(); ) {\r\n+        final Option option \u003d it.next();\r\n+        final OptionGroup group \u003d options.getOptionGroup(option);\r\n         if (group !\u003d null) {\r\n             if (!processedGroups.contains(group)) {\r\n                 processedGroups.add(group);\r\n                 appendOptionGroup(buff, group);\r\n             }\r\n         } else {\r\n             appendOption(buff, option, option.isRequired());\r\n         }\r\n         if (it.hasNext()) {\r\n             buff.append(\" \");\r\n         }\r\n     }\r\n     printWrapped(pw, width, buff.toString().indexOf(\u0027 \u0027) + 1, buff.toString());\r\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "3936da9d3fe37bcd20dd37216d82608e5917be07": {
      "type": "Ybodychange",
      "commitMessage": "Minor syntax changes\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/cli/trunk@1403792 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "10/30/12 7:24 PM",
      "commitName": "3936da9d3fe37bcd20dd37216d82608e5917be07",
      "commitAuthor": "Emmanuel Bourg",
      "commitDateOld": "10/30/12 4:16 PM",
      "commitNameOld": "4f1b2386770c76ce39d45c00ed9d939be8a7d081",
      "commitAuthorOld": "Emmanuel Bourg",
      "daysBetweenCommits": 0.13,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "public void printUsage(PrintWriter pw, int width, String app, Options options) {\r\n    StringBuffer buff \u003d new StringBuffer(getSyntaxPrefix()).append(app).append(\" \");\r\n    Collection\u003cOptionGroup\u003e processedGroups \u003d new ArrayList\u003cOptionGroup\u003e();\r\n    List\u003cOption\u003e optList \u003d new ArrayList\u003cOption\u003e(options.getOptions());\r\n    if (getOptionComparator() !\u003d null) {\r\n        Collections.sort(optList, getOptionComparator());\r\n    }\r\n    for (Iterator\u003cOption\u003e it \u003d optList.iterator(); it.hasNext(); ) {\r\n        Option option \u003d it.next();\r\n        OptionGroup group \u003d options.getOptionGroup(option);\r\n        if (group !\u003d null) {\r\n            if (!processedGroups.contains(group)) {\r\n                processedGroups.add(group);\r\n                appendOptionGroup(buff, group);\r\n            }\r\n        } else {\r\n            appendOption(buff, option, option.isRequired());\r\n        }\r\n        if (it.hasNext()) {\r\n            buff.append(\" \");\r\n        }\r\n    }\r\n    printWrapped(pw, width, buff.toString().indexOf(\u0027 \u0027) + 1, buff.toString());\r\n}",
      "path": "src/main/java/org/apache/commons/cli/HelpFormatter.java",
      "functionStartLine": 566,
      "functionName": "printUsage",
      "functionAnnotation": "",
      "functionDoc": "Prints the usage statement for the specified application.\r\n\r\n@param pw The PrintWriter to print the usage statement\r\n@param width The number of characters to display per line\r\n@param app The application name\r\n@param options The command line Options\r\n",
      "diff": "@@ -1,24 +1,24 @@\n public void printUsage(PrintWriter pw, int width, String app, Options options) {\r\n     StringBuffer buff \u003d new StringBuffer(getSyntaxPrefix()).append(app).append(\" \");\r\n     Collection\u003cOptionGroup\u003e processedGroups \u003d new ArrayList\u003cOptionGroup\u003e();\r\n     List\u003cOption\u003e optList \u003d new ArrayList\u003cOption\u003e(options.getOptions());\r\n     if (getOptionComparator() !\u003d null) {\r\n         Collections.sort(optList, getOptionComparator());\r\n     }\r\n-    for (Iterator i \u003d optList.iterator(); i.hasNext(); ) {\r\n-        Option option \u003d (Option) i.next();\r\n+    for (Iterator\u003cOption\u003e it \u003d optList.iterator(); it.hasNext(); ) {\r\n+        Option option \u003d it.next();\r\n         OptionGroup group \u003d options.getOptionGroup(option);\r\n         if (group !\u003d null) {\r\n             if (!processedGroups.contains(group)) {\r\n                 processedGroups.add(group);\r\n                 appendOptionGroup(buff, group);\r\n             }\r\n         } else {\r\n             appendOption(buff, option, option.isRequired());\r\n         }\r\n-        if (i.hasNext()) {\r\n+        if (it.hasNext()) {\r\n             buff.append(\" \");\r\n         }\r\n     }\r\n     printWrapped(pw, width, buff.toString().indexOf(\u0027 \u0027) + 1, buff.toString());\r\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "97ddfd9dc79cc0fd5044f754f5e74818387567c3": {
      "type": "Ybodychange",
      "commitMessage": "Removed unnecessary final modifiers\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/cli/trunk@1214691 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/15/11 12:30 PM",
      "commitName": "97ddfd9dc79cc0fd5044f754f5e74818387567c3",
      "commitAuthor": "Emmanuel Bourg",
      "commitDateOld": "12/15/11 12:26 PM",
      "commitNameOld": "10eeaf63d01a0c31c5af87438d83be7096cd343e",
      "commitAuthorOld": "Emmanuel Bourg",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "public void printUsage(PrintWriter pw, int width, String app, Options options) {\r\n    StringBuffer buff \u003d new StringBuffer(getSyntaxPrefix()).append(app).append(\" \");\r\n    Collection\u003cOptionGroup\u003e processedGroups \u003d new ArrayList\u003cOptionGroup\u003e();\r\n    List\u003cOption\u003e optList \u003d new ArrayList\u003cOption\u003e(options.getOptions());\r\n    if (getOptionComparator() !\u003d null) {\r\n        Collections.sort(optList, getOptionComparator());\r\n    }\r\n    for (Iterator i \u003d optList.iterator(); i.hasNext(); ) {\r\n        Option option \u003d (Option) i.next();\r\n        OptionGroup group \u003d options.getOptionGroup(option);\r\n        if (group !\u003d null) {\r\n            if (!processedGroups.contains(group)) {\r\n                processedGroups.add(group);\r\n                appendOptionGroup(buff, group);\r\n            }\r\n        } else {\r\n            appendOption(buff, option, option.isRequired());\r\n        }\r\n        if (i.hasNext()) {\r\n            buff.append(\" \");\r\n        }\r\n    }\r\n    printWrapped(pw, width, buff.toString().indexOf(\u0027 \u0027) + 1, buff.toString());\r\n}",
      "path": "src/main/java/org/apache/commons/cli/HelpFormatter.java",
      "functionStartLine": 534,
      "functionName": "printUsage",
      "functionAnnotation": "",
      "functionDoc": "Prints the usage statement for the specified application.\r\n\r\n@param pw The PrintWriter to print the usage statement\r\n@param width The number of characters to display per line\r\n@param app The application name\r\n@param options The command line Options\r\n",
      "diff": "@@ -1,24 +1,24 @@\n public void printUsage(PrintWriter pw, int width, String app, Options options) {\r\n     StringBuffer buff \u003d new StringBuffer(getSyntaxPrefix()).append(app).append(\" \");\r\n-    final Collection\u003cOptionGroup\u003e processedGroups \u003d new ArrayList\u003cOptionGroup\u003e();\r\n+    Collection\u003cOptionGroup\u003e processedGroups \u003d new ArrayList\u003cOptionGroup\u003e();\r\n     List\u003cOption\u003e optList \u003d new ArrayList\u003cOption\u003e(options.getOptions());\r\n     if (getOptionComparator() !\u003d null) {\r\n         Collections.sort(optList, getOptionComparator());\r\n     }\r\n     for (Iterator i \u003d optList.iterator(); i.hasNext(); ) {\r\n         Option option \u003d (Option) i.next();\r\n         OptionGroup group \u003d options.getOptionGroup(option);\r\n         if (group !\u003d null) {\r\n             if (!processedGroups.contains(group)) {\r\n                 processedGroups.add(group);\r\n                 appendOptionGroup(buff, group);\r\n             }\r\n         } else {\r\n             appendOption(buff, option, option.isRequired());\r\n         }\r\n         if (i.hasNext()) {\r\n             buff.append(\" \");\r\n         }\r\n     }\r\n     printWrapped(pw, width, buff.toString().indexOf(\u0027 \u0027) + 1, buff.toString());\r\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "491340dc5e6c8d4233cc575571e15dd357f20b70": {
      "type": "Yformatchange",
      "commitMessage": "trailing spaces\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/cli/trunk@1095659 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "4/21/11 2:22 PM",
      "commitName": "491340dc5e6c8d4233cc575571e15dd357f20b70",
      "commitAuthor": "Simone Tripodi",
      "commitDateOld": "4/13/11 12:17 AM",
      "commitNameOld": "a955324468d45eb845e05107d5b0013285c3bc0a",
      "commitAuthorOld": "Emmanuel Bourg",
      "daysBetweenCommits": 8.59,
      "commitsBetweenForRepo": 10,
      "commitsBetweenForFile": 1,
      "actualSource": "public void printUsage(PrintWriter pw, int width, String app, Options options) {\r\n    StringBuffer buff \u003d new StringBuffer(getSyntaxPrefix()).append(app).append(\" \");\r\n    final Collection\u003cOptionGroup\u003e processedGroups \u003d new ArrayList\u003cOptionGroup\u003e();\r\n    List\u003cOption\u003e optList \u003d new ArrayList\u003cOption\u003e(options.getOptions());\r\n    if (getOptionComparator() !\u003d null) {\r\n        Collections.sort(optList, getOptionComparator());\r\n    }\r\n    for (Iterator i \u003d optList.iterator(); i.hasNext(); ) {\r\n        Option option \u003d (Option) i.next();\r\n        OptionGroup group \u003d options.getOptionGroup(option);\r\n        if (group !\u003d null) {\r\n            if (!processedGroups.contains(group)) {\r\n                processedGroups.add(group);\r\n                appendOptionGroup(buff, group);\r\n            }\r\n        } else {\r\n            appendOption(buff, option, option.isRequired());\r\n        }\r\n        if (i.hasNext()) {\r\n            buff.append(\" \");\r\n        }\r\n    }\r\n    printWrapped(pw, width, buff.toString().indexOf(\u0027 \u0027) + 1, buff.toString());\r\n}",
      "path": "src/main/java/org/apache/commons/cli/HelpFormatter.java",
      "functionStartLine": 534,
      "functionName": "printUsage",
      "functionAnnotation": "",
      "functionDoc": "Prints the usage statement for the specified application.\r\n\r\n@param pw The PrintWriter to print the usage statement\r\n@param width The number of characters to display per line\r\n@param app The application name\r\n@param options The command line Options\r\n",
      "diff": "",
      "extendedDetails": {}
    },
    "a955324468d45eb845e05107d5b0013285c3bc0a": {
      "type": "Ybodychange",
      "commitMessage": "HelpFormatter now accepts a null comparator to preserve the declaration order of the options (CLI-212)\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/cli/trunk@1091575 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "4/13/11 12:17 AM",
      "commitName": "a955324468d45eb845e05107d5b0013285c3bc0a",
      "commitAuthor": "Emmanuel Bourg",
      "commitDateOld": "4/12/11 10:17 PM",
      "commitNameOld": "39e1da969818b360858115ae5d852e22acd4329a",
      "commitAuthorOld": "Emmanuel Bourg",
      "daysBetweenCommits": 0.08,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "actualSource": "public void printUsage(PrintWriter pw, int width, String app, Options options) {\r\n    StringBuffer buff \u003d new StringBuffer(getSyntaxPrefix()).append(app).append(\" \");\r\n    final Collection\u003cOptionGroup\u003e processedGroups \u003d new ArrayList\u003cOptionGroup\u003e();\r\n    List\u003cOption\u003e optList \u003d new ArrayList\u003cOption\u003e(options.getOptions());\r\n    if (getOptionComparator() !\u003d null) {\r\n        Collections.sort(optList, getOptionComparator());\r\n    }\r\n    for (Iterator i \u003d optList.iterator(); i.hasNext(); ) {\r\n        Option option \u003d (Option) i.next();\r\n        OptionGroup group \u003d options.getOptionGroup(option);\r\n        if (group !\u003d null) {\r\n            if (!processedGroups.contains(group)) {\r\n                processedGroups.add(group);\r\n                appendOptionGroup(buff, group);\r\n            }\r\n        } else {\r\n            appendOption(buff, option, option.isRequired());\r\n        }\r\n        if (i.hasNext()) {\r\n            buff.append(\" \");\r\n        }\r\n    }\r\n    printWrapped(pw, width, buff.toString().indexOf(\u0027 \u0027) + 1, buff.toString());\r\n}",
      "path": "src/main/java/org/apache/commons/cli/HelpFormatter.java",
      "functionStartLine": 534,
      "functionName": "printUsage",
      "functionAnnotation": "",
      "functionDoc": "Prints the usage statement for the specified application.\r\n\r\n@param pw The PrintWriter to print the usage statement\r\n@param width The number of characters to display per line\r\n@param app The application name\r\n@param options The command line Options\r\n",
      "diff": "@@ -1,23 +1,24 @@\n public void printUsage(PrintWriter pw, int width, String app, Options options) {\r\n     StringBuffer buff \u003d new StringBuffer(getSyntaxPrefix()).append(app).append(\" \");\r\n     final Collection\u003cOptionGroup\u003e processedGroups \u003d new ArrayList\u003cOptionGroup\u003e();\r\n-    Option option;\r\n     List\u003cOption\u003e optList \u003d new ArrayList\u003cOption\u003e(options.getOptions());\r\n-    Collections.sort(optList, getOptionComparator());\r\n+    if (getOptionComparator() !\u003d null) {\r\n+        Collections.sort(optList, getOptionComparator());\r\n+    }\r\n     for (Iterator i \u003d optList.iterator(); i.hasNext(); ) {\r\n-        option \u003d (Option) i.next();\r\n+        Option option \u003d (Option) i.next();\r\n         OptionGroup group \u003d options.getOptionGroup(option);\r\n         if (group !\u003d null) {\r\n             if (!processedGroups.contains(group)) {\r\n                 processedGroups.add(group);\r\n                 appendOptionGroup(buff, group);\r\n             }\r\n         } else {\r\n             appendOption(buff, option, option.isRequired());\r\n         }\r\n         if (i.hasNext()) {\r\n             buff.append(\" \");\r\n         }\r\n     }\r\n     printWrapped(pw, width, buff.toString().indexOf(\u0027 \u0027) + 1, buff.toString());\r\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "a1b5d44432c057cf675f051bb20379937565f4ef": {
      "type": "Ybodychange",
      "commitMessage": "Moving to Java 5\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/cli/trunk@1091539 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "4/12/11 9:57 PM",
      "commitName": "a1b5d44432c057cf675f051bb20379937565f4ef",
      "commitAuthor": "Emmanuel Bourg",
      "commitDateOld": "7/21/10 7:49 PM",
      "commitNameOld": "3d57a495145916d1cd183cced771935c06da786a",
      "commitAuthorOld": "Emmanuel Bourg",
      "daysBetweenCommits": 265.09,
      "commitsBetweenForRepo": 11,
      "commitsBetweenForFile": 1,
      "actualSource": "public void printUsage(PrintWriter pw, int width, String app, Options options) {\r\n    StringBuffer buff \u003d new StringBuffer(getSyntaxPrefix()).append(app).append(\" \");\r\n    final Collection\u003cOptionGroup\u003e processedGroups \u003d new ArrayList\u003cOptionGroup\u003e();\r\n    Option option;\r\n    List\u003cOption\u003e optList \u003d new ArrayList\u003cOption\u003e(options.getOptions());\r\n    Collections.sort(optList, getOptionComparator());\r\n    for (Iterator i \u003d optList.iterator(); i.hasNext(); ) {\r\n        option \u003d (Option) i.next();\r\n        OptionGroup group \u003d options.getOptionGroup(option);\r\n        if (group !\u003d null) {\r\n            if (!processedGroups.contains(group)) {\r\n                processedGroups.add(group);\r\n                appendOptionGroup(buff, group);\r\n            }\r\n        } else {\r\n            appendOption(buff, option, option.isRequired());\r\n        }\r\n        if (i.hasNext()) {\r\n            buff.append(\" \");\r\n        }\r\n    }\r\n    printWrapped(pw, width, buff.toString().indexOf(\u0027 \u0027) + 1, buff.toString());\r\n}",
      "path": "src/main/java/org/apache/commons/cli/HelpFormatter.java",
      "functionStartLine": 541,
      "functionName": "printUsage",
      "functionAnnotation": "",
      "functionDoc": "Prints the usage statement for the specified application.\r\n\r\n@param pw The PrintWriter to print the usage statement\r\n@param width The number of characters to display per line\r\n@param app The application name\r\n@param options The command line Options\r\n",
      "diff": "@@ -1,23 +1,23 @@\n public void printUsage(PrintWriter pw, int width, String app, Options options) {\r\n     StringBuffer buff \u003d new StringBuffer(getSyntaxPrefix()).append(app).append(\" \");\r\n-    final Collection processedGroups \u003d new ArrayList();\r\n+    final Collection\u003cOptionGroup\u003e processedGroups \u003d new ArrayList\u003cOptionGroup\u003e();\r\n     Option option;\r\n-    List optList \u003d new ArrayList(options.getOptions());\r\n+    List\u003cOption\u003e optList \u003d new ArrayList\u003cOption\u003e(options.getOptions());\r\n     Collections.sort(optList, getOptionComparator());\r\n     for (Iterator i \u003d optList.iterator(); i.hasNext(); ) {\r\n         option \u003d (Option) i.next();\r\n         OptionGroup group \u003d options.getOptionGroup(option);\r\n         if (group !\u003d null) {\r\n             if (!processedGroups.contains(group)) {\r\n                 processedGroups.add(group);\r\n                 appendOptionGroup(buff, group);\r\n             }\r\n         } else {\r\n             appendOption(buff, option, option.isRequired());\r\n         }\r\n         if (i.hasNext()) {\r\n             buff.append(\" \");\r\n         }\r\n     }\r\n     printWrapped(pw, width, buff.toString().indexOf(\u0027 \u0027) + 1, buff.toString());\r\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "3d57a495145916d1cd183cced771935c06da786a": {
      "type": "Ybodychange",
      "commitMessage": "Removed the direct usage of the deprecated fields in HelpFormatter\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/cli/trunk@966310 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "7/21/10 7:49 PM",
      "commitName": "3d57a495145916d1cd183cced771935c06da786a",
      "commitAuthor": "Emmanuel Bourg",
      "commitDateOld": "7/21/10 7:40 PM",
      "commitNameOld": "483f811dfefdc6bee162481425f261d983f15e4a",
      "commitAuthorOld": "Emmanuel Bourg",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "public void printUsage(PrintWriter pw, int width, String app, Options options) {\r\n    StringBuffer buff \u003d new StringBuffer(getSyntaxPrefix()).append(app).append(\" \");\r\n    final Collection processedGroups \u003d new ArrayList();\r\n    Option option;\r\n    List optList \u003d new ArrayList(options.getOptions());\r\n    Collections.sort(optList, getOptionComparator());\r\n    for (Iterator i \u003d optList.iterator(); i.hasNext(); ) {\r\n        option \u003d (Option) i.next();\r\n        OptionGroup group \u003d options.getOptionGroup(option);\r\n        if (group !\u003d null) {\r\n            if (!processedGroups.contains(group)) {\r\n                processedGroups.add(group);\r\n                appendOptionGroup(buff, group);\r\n            }\r\n        } else {\r\n            appendOption(buff, option, option.isRequired());\r\n        }\r\n        if (i.hasNext()) {\r\n            buff.append(\" \");\r\n        }\r\n    }\r\n    printWrapped(pw, width, buff.toString().indexOf(\u0027 \u0027) + 1, buff.toString());\r\n}",
      "path": "src/main/java/org/apache/commons/cli/HelpFormatter.java",
      "functionStartLine": 541,
      "functionName": "printUsage",
      "functionAnnotation": "",
      "functionDoc": "Prints the usage statement for the specified application.\r\n\r\n@param pw The PrintWriter to print the usage statement\r\n@param width The number of characters to display per line\r\n@param app The application name\r\n@param options The command line Options\r\n",
      "diff": "@@ -1,23 +1,23 @@\n public void printUsage(PrintWriter pw, int width, String app, Options options) {\r\n-    StringBuffer buff \u003d new StringBuffer(defaultSyntaxPrefix).append(app).append(\" \");\r\n+    StringBuffer buff \u003d new StringBuffer(getSyntaxPrefix()).append(app).append(\" \");\r\n     final Collection processedGroups \u003d new ArrayList();\r\n     Option option;\r\n     List optList \u003d new ArrayList(options.getOptions());\r\n     Collections.sort(optList, getOptionComparator());\r\n     for (Iterator i \u003d optList.iterator(); i.hasNext(); ) {\r\n         option \u003d (Option) i.next();\r\n         OptionGroup group \u003d options.getOptionGroup(option);\r\n         if (group !\u003d null) {\r\n             if (!processedGroups.contains(group)) {\r\n                 processedGroups.add(group);\r\n                 appendOptionGroup(buff, group);\r\n             }\r\n         } else {\r\n             appendOption(buff, option, option.isRequired());\r\n         }\r\n         if (i.hasNext()) {\r\n             buff.append(\" \");\r\n         }\r\n     }\r\n     printWrapped(pw, width, buff.toString().indexOf(\u0027 \u0027) + 1, buff.toString());\r\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "1596f3bbe57986361da4ac1a23634dd5b00d10df": {
      "type": "Yfilerename",
      "commitMessage": "Switched to the Maven 2 default directory layout (part 3)\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/cli/trunk@955173 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "6/16/10 12:45 PM",
      "commitName": "1596f3bbe57986361da4ac1a23634dd5b00d10df",
      "commitAuthor": "Emmanuel Bourg",
      "commitDateOld": "6/16/10 12:42 PM",
      "commitNameOld": "406a35f1a128944b7c51dcbc4a1f04c3f8bec3e6",
      "commitAuthorOld": "Emmanuel Bourg",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "public void printUsage(PrintWriter pw, int width, String app, Options options) {\r\n    StringBuffer buff \u003d new StringBuffer(defaultSyntaxPrefix).append(app).append(\" \");\r\n    final Collection processedGroups \u003d new ArrayList();\r\n    Option option;\r\n    List optList \u003d new ArrayList(options.getOptions());\r\n    Collections.sort(optList, getOptionComparator());\r\n    for (Iterator i \u003d optList.iterator(); i.hasNext(); ) {\r\n        option \u003d (Option) i.next();\r\n        OptionGroup group \u003d options.getOptionGroup(option);\r\n        if (group !\u003d null) {\r\n            if (!processedGroups.contains(group)) {\r\n                processedGroups.add(group);\r\n                appendOptionGroup(buff, group);\r\n            }\r\n        } else {\r\n            appendOption(buff, option, option.isRequired());\r\n        }\r\n        if (i.hasNext()) {\r\n            buff.append(\" \");\r\n        }\r\n    }\r\n    printWrapped(pw, width, buff.toString().indexOf(\u0027 \u0027) + 1, buff.toString());\r\n}",
      "path": "src/main/java/org/apache/commons/cli/HelpFormatter.java",
      "functionStartLine": 537,
      "functionName": "printUsage",
      "functionAnnotation": "",
      "functionDoc": "Prints the usage statement for the specified application.\r\n\r\n@param pw The PrintWriter to print the usage statement\r\n@param width The number of characters to display per line\r\n@param app The application name\r\n@param options The command line Options\r\n",
      "diff": "",
      "extendedDetails": {
        "oldPath": "src/java/org/apache/commons/cli/HelpFormatter.java",
        "newPath": "src/main/java/org/apache/commons/cli/HelpFormatter.java"
      }
    },
    "180a16def56be368c2c33a56c1778b8d7ce170c7": {
      "type": "Ydocchange",
      "commitMessage": "Added a parameter in HelpFormatter to specify the separator displayed between a long option and its value (CLI-169)\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/cli/trunk@954899 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "6/15/10 5:11 PM",
      "commitName": "180a16def56be368c2c33a56c1778b8d7ce170c7",
      "commitAuthor": "Emmanuel Bourg",
      "commitDateOld": "5/28/09 7:22 PM",
      "commitNameOld": "6a999186695d404ccb6c1528df68fe2eb42863c2",
      "commitAuthorOld": "Jim Jagielski",
      "daysBetweenCommits": 382.91,
      "commitsBetweenForRepo": 18,
      "commitsBetweenForFile": 1,
      "actualSource": "public void printUsage(PrintWriter pw, int width, String app, Options options) {\r\n    StringBuffer buff \u003d new StringBuffer(defaultSyntaxPrefix).append(app).append(\" \");\r\n    final Collection processedGroups \u003d new ArrayList();\r\n    Option option;\r\n    List optList \u003d new ArrayList(options.getOptions());\r\n    Collections.sort(optList, getOptionComparator());\r\n    for (Iterator i \u003d optList.iterator(); i.hasNext(); ) {\r\n        option \u003d (Option) i.next();\r\n        OptionGroup group \u003d options.getOptionGroup(option);\r\n        if (group !\u003d null) {\r\n            if (!processedGroups.contains(group)) {\r\n                processedGroups.add(group);\r\n                appendOptionGroup(buff, group);\r\n            }\r\n        } else {\r\n            appendOption(buff, option, option.isRequired());\r\n        }\r\n        if (i.hasNext()) {\r\n            buff.append(\" \");\r\n        }\r\n    }\r\n    printWrapped(pw, width, buff.toString().indexOf(\u0027 \u0027) + 1, buff.toString());\r\n}",
      "path": "src/java/org/apache/commons/cli/HelpFormatter.java",
      "functionStartLine": 537,
      "functionName": "printUsage",
      "functionAnnotation": "",
      "functionDoc": "Prints the usage statement for the specified application.\r\n\r\n@param pw The PrintWriter to print the usage statement\r\n@param width The number of characters to display per line\r\n@param app The application name\r\n@param options The command line Options\r\n",
      "diff": "",
      "extendedDetails": {
        "oldValue": "\u003cp\u003ePrints the usage statement for the specified application.\u003c/p\u003e\r\n\r\n@param pw The PrintWriter to print the usage statement\r\n@param width The number of characters to display per line\r\n@param app The application name\r\n@param options The command line Options\r\n",
        "newValue": "Prints the usage statement for the specified application.\r\n\r\n@param pw The PrintWriter to print the usage statement\r\n@param width The number of characters to display per line\r\n@param app The application name\r\n@param options The command line Options\r\n"
      }
    },
    "147df44faa4eb12ffd4a0063fc3284f784ea67c8": {
      "type": "Yformatchange",
      "commitMessage": "Style update\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/cli/branches/cli-1.x@680644 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "7/29/08 11:13 AM",
      "commitName": "147df44faa4eb12ffd4a0063fc3284f784ea67c8",
      "commitAuthor": "Emmanuel Bourg",
      "commitDateOld": "5/30/08 1:22 PM",
      "commitNameOld": "d36adebd3547279b709960c902c3fb7b89a9a4ef",
      "commitAuthorOld": "Emmanuel Bourg",
      "daysBetweenCommits": 59.91,
      "commitsBetweenForRepo": 39,
      "commitsBetweenForFile": 1,
      "actualSource": "public void printUsage(PrintWriter pw, int width, String app, Options options) {\r\n    StringBuffer buff \u003d new StringBuffer(defaultSyntaxPrefix).append(app).append(\" \");\r\n    final Collection processedGroups \u003d new ArrayList();\r\n    Option option;\r\n    List optList \u003d new ArrayList(options.getOptions());\r\n    Collections.sort(optList, getOptionComparator());\r\n    for (Iterator i \u003d optList.iterator(); i.hasNext(); ) {\r\n        option \u003d (Option) i.next();\r\n        OptionGroup group \u003d options.getOptionGroup(option);\r\n        if (group !\u003d null) {\r\n            if (!processedGroups.contains(group)) {\r\n                processedGroups.add(group);\r\n                appendOptionGroup(buff, group);\r\n            }\r\n        } else {\r\n            appendOption(buff, option, option.isRequired());\r\n        }\r\n        if (i.hasNext()) {\r\n            buff.append(\" \");\r\n        }\r\n    }\r\n    printWrapped(pw, width, buff.toString().indexOf(\u0027 \u0027) + 1, buff.toString());\r\n}",
      "path": "src/java/org/apache/commons/cli/HelpFormatter.java",
      "functionStartLine": 502,
      "functionName": "printUsage",
      "functionAnnotation": "",
      "functionDoc": "\u003cp\u003ePrints the usage statement for the specified application.\u003c/p\u003e\r\n\r\n@param pw The PrintWriter to print the usage statement\r\n@param width The number of characters to display per line\r\n@param app The application name\r\n@param options The command line Options\r\n",
      "diff": "",
      "extendedDetails": {}
    },
    "df8f8e160c5fc9b955c627c4b65c7ba67088b7ac": {
      "type": "Ybodychange",
      "commitMessage": "Making the OptionComparator modifiable so people can change the order in which arguments are printed by the HelpFormatter - as requested in CLI-155\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/cli/branches/cli-1.x@655735 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "5/13/08 7:54 AM",
      "commitName": "df8f8e160c5fc9b955c627c4b65c7ba67088b7ac",
      "commitAuthor": "Henri Yandell",
      "commitDateOld": "5/8/08 9:40 AM",
      "commitNameOld": "4f407378c93b9e2a8e24c855e8bed5eb12bf7a06",
      "commitAuthorOld": "Henri Yandell",
      "daysBetweenCommits": 4.93,
      "commitsBetweenForRepo": 3,
      "commitsBetweenForFile": 1,
      "actualSource": "public void printUsage(PrintWriter pw, int width, String app, Options options) {\r\n    StringBuffer buff \u003d new StringBuffer(defaultSyntaxPrefix).append(app).append(\" \");\r\n    final Collection processedGroups \u003d new ArrayList();\r\n    Option option;\r\n    List optList \u003d new ArrayList(options.getOptions());\r\n    Collections.sort(optList, getOptionComparator());\r\n    for (Iterator i \u003d optList.iterator(); i.hasNext(); ) {\r\n        option \u003d (Option) i.next();\r\n        OptionGroup group \u003d options.getOptionGroup(option);\r\n        if (group !\u003d null) {\r\n            if (!processedGroups.contains(group)) {\r\n                processedGroups.add(group);\r\n                appendOptionGroup(buff, group);\r\n            }\r\n        } else {\r\n            appendOption(buff, option, option.isRequired());\r\n        }\r\n        if (i.hasNext()) {\r\n            buff.append(\" \");\r\n        }\r\n    }\r\n    printWrapped(pw, width, buff.toString().indexOf(\u0027 \u0027) + 1, buff.toString());\r\n}",
      "path": "src/java/org/apache/commons/cli/HelpFormatter.java",
      "functionStartLine": 510,
      "functionName": "printUsage",
      "functionAnnotation": "",
      "functionDoc": "\u003cp\u003ePrints the usage statement for the specified application.\u003c/p\u003e\r\n\r\n@param pw The PrintWriter to print the usage statement\r\n@param width The number of characters to display per line\r\n@param app The application name\r\n@param options The command line Options\r\n",
      "diff": "@@ -1,23 +1,23 @@\n public void printUsage(PrintWriter pw, int width, String app, Options options) {\r\n     StringBuffer buff \u003d new StringBuffer(defaultSyntaxPrefix).append(app).append(\" \");\r\n     final Collection processedGroups \u003d new ArrayList();\r\n     Option option;\r\n     List optList \u003d new ArrayList(options.getOptions());\r\n-    Collections.sort(optList, new OptionComparator());\r\n+    Collections.sort(optList, getOptionComparator());\r\n     for (Iterator i \u003d optList.iterator(); i.hasNext(); ) {\r\n         option \u003d (Option) i.next();\r\n         OptionGroup group \u003d options.getOptionGroup(option);\r\n         if (group !\u003d null) {\r\n             if (!processedGroups.contains(group)) {\r\n                 processedGroups.add(group);\r\n                 appendOptionGroup(buff, group);\r\n             }\r\n         } else {\r\n             appendOption(buff, option, option.isRequired());\r\n         }\r\n         if (i.hasNext()) {\r\n             buff.append(\" \");\r\n         }\r\n     }\r\n     printWrapped(pw, width, buff.toString().indexOf(\u0027 \u0027) + 1, buff.toString());\r\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "6f972cf56d7a3054bac902fecb6d3dd5ee310dea": {
      "type": "Ybodychange",
      "commitMessage": "Applying Brian Egge\u0027s enhancement from CLI-131\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/cli/branches/cli-1.0.x@544762 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "6/6/07 11:01 AM",
      "commitName": "6f972cf56d7a3054bac902fecb6d3dd5ee310dea",
      "commitAuthor": "Henri Yandell",
      "commitDateOld": "5/28/07 11:01 AM",
      "commitNameOld": "79a1091bd0a2dba7decacd23beac8104f3b5a5cb",
      "commitAuthorOld": "Henri Yandell",
      "daysBetweenCommits": 9.0,
      "commitsBetweenForRepo": 13,
      "commitsBetweenForFile": 1,
      "actualSource": "public void printUsage(PrintWriter pw, int width, String app, Options options) {\r\n    StringBuffer buff \u003d new StringBuffer(defaultSyntaxPrefix).append(app).append(\" \");\r\n    final Collection processedGroups \u003d new ArrayList();\r\n    Option option;\r\n    List optList \u003d new ArrayList(options.getOptions());\r\n    Collections.sort(optList, new OptionComparator());\r\n    for (Iterator i \u003d optList.iterator(); i.hasNext(); ) {\r\n        option \u003d (Option) i.next();\r\n        OptionGroup group \u003d options.getOptionGroup(option);\r\n        if (group !\u003d null) {\r\n            if (!processedGroups.contains(group)) {\r\n                processedGroups.add(group);\r\n                appendOptionGroup(buff, group);\r\n            }\r\n        } else {\r\n            appendOption(buff, option, option.isRequired());\r\n        }\r\n        if (i.hasNext()) {\r\n            buff.append(\" \");\r\n        }\r\n    }\r\n    printWrapped(pw, width, buff.toString().indexOf(\u0027 \u0027) + 1, buff.toString());\r\n}",
      "path": "src/java/org/apache/commons/cli/HelpFormatter.java",
      "functionStartLine": 432,
      "functionName": "printUsage",
      "functionAnnotation": "",
      "functionDoc": "\u003cp\u003ePrints the usage statement for the specified application.\u003c/p\u003e\r\n\r\n@param pw The PrintWriter to print the usage statement\r\n@param width The number of characters to display per line\r\n@param app The application name\r\n@param options The command line Options\r\n",
      "diff": "@@ -1,21 +1,23 @@\n public void printUsage(PrintWriter pw, int width, String app, Options options) {\r\n     StringBuffer buff \u003d new StringBuffer(defaultSyntaxPrefix).append(app).append(\" \");\r\n     final Collection processedGroups \u003d new ArrayList();\r\n     Option option;\r\n-    for (Iterator i \u003d options.getOptions().iterator(); i.hasNext(); ) {\r\n+    List optList \u003d new ArrayList(options.getOptions());\r\n+    Collections.sort(optList, new OptionComparator());\r\n+    for (Iterator i \u003d optList.iterator(); i.hasNext(); ) {\r\n         option \u003d (Option) i.next();\r\n         OptionGroup group \u003d options.getOptionGroup(option);\r\n         if (group !\u003d null) {\r\n             if (!processedGroups.contains(group)) {\r\n                 processedGroups.add(group);\r\n                 appendOptionGroup(buff, group);\r\n             }\r\n         } else {\r\n             appendOption(buff, option, option.isRequired());\r\n         }\r\n         if (i.hasNext()) {\r\n             buff.append(\" \");\r\n         }\r\n     }\r\n     printWrapped(pw, width, buff.toString().indexOf(\u0027 \u0027) + 1, buff.toString());\r\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "9b2b8038b52be022e42c8c7fdf26e236888f94c5": {
      "type": "Ymultichange(Ydocchange,Yformatchange)",
      "commitMessage": "checkstyle fixes\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/cli/trunk@129857 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/10/02 1:47 AM",
      "commitName": "9b2b8038b52be022e42c8c7fdf26e236888f94c5",
      "commitAuthor": "John Keyes",
      "subchanges": [
        {
          "type": "Ydocchange",
          "commitMessage": "checkstyle fixes\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/cli/trunk@129857 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "12/10/02 1:47 AM",
          "commitName": "9b2b8038b52be022e42c8c7fdf26e236888f94c5",
          "commitAuthor": "John Keyes",
          "commitDateOld": "11/20/02 12:50 AM",
          "commitNameOld": "6bcbf153c4497c38c4c36c3a04c1eac1f4cc153b",
          "commitAuthorOld": "John Keyes",
          "daysBetweenCommits": 20.04,
          "commitsBetweenForRepo": 6,
          "commitsBetweenForFile": 1,
          "actualSource": "public void printUsage(PrintWriter pw, int width, String app, Options options) {\r\n    StringBuffer buff \u003d new StringBuffer(defaultSyntaxPrefix).append(app).append(\" \");\r\n    final Collection processedGroups \u003d new ArrayList();\r\n    Option option;\r\n    for (Iterator i \u003d options.getOptions().iterator(); i.hasNext(); ) {\r\n        option \u003d (Option) i.next();\r\n        OptionGroup group \u003d options.getOptionGroup(option);\r\n        if (group !\u003d null) {\r\n            if (!processedGroups.contains(group)) {\r\n                processedGroups.add(group);\r\n                appendOptionGroup(buff, group);\r\n            }\r\n        } else {\r\n            appendOption(buff, option, option.isRequired());\r\n        }\r\n        if (i.hasNext()) {\r\n            buff.append(\" \");\r\n        }\r\n    }\r\n    printWrapped(pw, width, buff.toString().indexOf(\u0027 \u0027) + 1, buff.toString());\r\n}",
          "path": "src/java/org/apache/commons/cli/HelpFormatter.java",
          "functionStartLine": 470,
          "functionName": "printUsage",
          "functionAnnotation": "",
          "functionDoc": "\u003cp\u003ePrints the usage statement for the specified application.\u003c/p\u003e\r\n\r\n@param pw The PrintWriter to print the usage statement\r\n@param width The number of characters to display per line\r\n@param app The application name\r\n@param options The command line Options\r\n",
          "diff": "",
          "extendedDetails": {
            "oldValue": "\u003cp\u003ePrints the usage statement for the specified application.\u003c/p\u003e\r\n\r\n@param pw The PrintWriter to print the usage statement\r\n@param width ??\r\n@param appName The application name\r\n@param options The command line Options\r\n@see #appendOptionGroup(StringBuffer,OptionGroup)\r\n@see #appendOption(StringBuffer,Option,boolean)\r\n",
            "newValue": "\u003cp\u003ePrints the usage statement for the specified application.\u003c/p\u003e\r\n\r\n@param pw The PrintWriter to print the usage statement\r\n@param width The number of characters to display per line\r\n@param app The application name\r\n@param options The command line Options\r\n"
          }
        },
        {
          "type": "Yformatchange",
          "commitMessage": "checkstyle fixes\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/cli/trunk@129857 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "12/10/02 1:47 AM",
          "commitName": "9b2b8038b52be022e42c8c7fdf26e236888f94c5",
          "commitAuthor": "John Keyes",
          "commitDateOld": "11/20/02 12:50 AM",
          "commitNameOld": "6bcbf153c4497c38c4c36c3a04c1eac1f4cc153b",
          "commitAuthorOld": "John Keyes",
          "daysBetweenCommits": 20.04,
          "commitsBetweenForRepo": 6,
          "commitsBetweenForFile": 1,
          "actualSource": "public void printUsage(PrintWriter pw, int width, String app, Options options) {\r\n    StringBuffer buff \u003d new StringBuffer(defaultSyntaxPrefix).append(app).append(\" \");\r\n    final Collection processedGroups \u003d new ArrayList();\r\n    Option option;\r\n    for (Iterator i \u003d options.getOptions().iterator(); i.hasNext(); ) {\r\n        option \u003d (Option) i.next();\r\n        OptionGroup group \u003d options.getOptionGroup(option);\r\n        if (group !\u003d null) {\r\n            if (!processedGroups.contains(group)) {\r\n                processedGroups.add(group);\r\n                appendOptionGroup(buff, group);\r\n            }\r\n        } else {\r\n            appendOption(buff, option, option.isRequired());\r\n        }\r\n        if (i.hasNext()) {\r\n            buff.append(\" \");\r\n        }\r\n    }\r\n    printWrapped(pw, width, buff.toString().indexOf(\u0027 \u0027) + 1, buff.toString());\r\n}",
          "path": "src/java/org/apache/commons/cli/HelpFormatter.java",
          "functionStartLine": 470,
          "functionName": "printUsage",
          "functionAnnotation": "",
          "functionDoc": "\u003cp\u003ePrints the usage statement for the specified application.\u003c/p\u003e\r\n\r\n@param pw The PrintWriter to print the usage statement\r\n@param width The number of characters to display per line\r\n@param app The application name\r\n@param options The command line Options\r\n",
          "diff": "",
          "extendedDetails": {}
        }
      ]
    },
    "6bcbf153c4497c38c4c36c3a04c1eac1f4cc153b": {
      "type": "Ymultichange(Ybodychange,Ydocchange)",
      "commitMessage": "applied some fixes to HelpFormatter, thanks to Rob and Boon\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/cli/trunk@129850 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "11/20/02 12:50 AM",
      "commitName": "6bcbf153c4497c38c4c36c3a04c1eac1f4cc153b",
      "commitAuthor": "John Keyes",
      "subchanges": [
        {
          "type": "Ybodychange",
          "commitMessage": "applied some fixes to HelpFormatter, thanks to Rob and Boon\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/cli/trunk@129850 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "11/20/02 12:50 AM",
          "commitName": "6bcbf153c4497c38c4c36c3a04c1eac1f4cc153b",
          "commitAuthor": "John Keyes",
          "commitDateOld": "11/16/02 12:22 AM",
          "commitNameOld": "4c34483ea18c6a4f259f19a6d18637bb1fbae1e8",
          "commitAuthorOld": "John Keyes",
          "daysBetweenCommits": 4.02,
          "commitsBetweenForRepo": 5,
          "commitsBetweenForFile": 1,
          "actualSource": "public void printUsage(PrintWriter pw, int width, String app, Options options) {\r\n    StringBuffer buff \u003d new StringBuffer(defaultSyntaxPrefix).append(app).append(\" \");\r\n    final Collection processedGroups \u003d new ArrayList();\r\n    Option option;\r\n    for (Iterator i \u003d options.getOptions().iterator(); i.hasNext(); ) {\r\n        option \u003d (Option) i.next();\r\n        OptionGroup group \u003d options.getOptionGroup(option);\r\n        if (group !\u003d null) {\r\n            if (!processedGroups.contains(group)) {\r\n                processedGroups.add(group);\r\n                appendOptionGroup(buff, group);\r\n            }\r\n        } else {\r\n            appendOption(buff, option, option.isRequired());\r\n        }\r\n        if (i.hasNext()) {\r\n            buff.append(\" \");\r\n        }\r\n    }\r\n    printWrapped(pw, width, buff.toString().indexOf(\u0027 \u0027) + 1, buff.toString());\r\n}",
          "path": "src/java/org/apache/commons/cli/HelpFormatter.java",
          "functionStartLine": 227,
          "functionName": "printUsage",
          "functionAnnotation": "",
          "functionDoc": "\u003cp\u003ePrints the usage statement for the specified application.\u003c/p\u003e\r\n\r\n@param pw The PrintWriter to print the usage statement\r\n@param width ??\r\n@param appName The application name\r\n@param options The command line Options\r\n@see #appendOptionGroup(StringBuffer,OptionGroup)\r\n@see #appendOption(StringBuffer,Option,boolean)\r\n",
          "diff": "@@ -1,38 +1,21 @@\n public void printUsage(PrintWriter pw, int width, String app, Options options) {\r\n     StringBuffer buff \u003d new StringBuffer(defaultSyntaxPrefix).append(app).append(\" \");\r\n-    ArrayList list \u003d new ArrayList();\r\n+    final Collection processedGroups \u003d new ArrayList();\r\n     Option option;\r\n     for (Iterator i \u003d options.getOptions().iterator(); i.hasNext(); ) {\r\n         option \u003d (Option) i.next();\r\n         OptionGroup group \u003d options.getOptionGroup(option);\r\n-        if (group !\u003d null \u0026\u0026 !list.contains(group)) {\r\n-            list.add(group);\r\n-            Collection names \u003d group.getNames();\r\n-            buff.append(\"[\");\r\n-            for (Iterator iter \u003d names.iterator(); iter.hasNext(); ) {\r\n-                buff.append(iter.next());\r\n-                if (iter.hasNext()) {\r\n-                    buff.append(\" | \");\r\n-                }\r\n+        if (group !\u003d null) {\r\n+            if (!processedGroups.contains(group)) {\r\n+                processedGroups.add(group);\r\n+                appendOptionGroup(buff, group);\r\n             }\r\n-            buff.append(\"]\");\r\n         } else {\r\n-            if (!option.isRequired()) {\r\n-                buff.append(\"[\");\r\n-            }\r\n-            if (!\" \".equals(option.getOpt())) {\r\n-                buff.append(\"-\").append(option.getOpt());\r\n-            } else {\r\n-                buff.append(\"--\").append(option.getLongOpt());\r\n-            }\r\n-            if (option.hasArg() \u0026\u0026 option.getArgName() !\u003d null) {\r\n-                buff.append(\" \").append(option.getArgName());\r\n-            }\r\n-            if (!option.isRequired()) {\r\n-                buff.append(\"]\");\r\n-            }\r\n+            appendOption(buff, option, option.isRequired());\r\n+        }\r\n+        if (i.hasNext()) {\r\n             buff.append(\" \");\r\n         }\r\n     }\r\n     printWrapped(pw, width, buff.toString().indexOf(\u0027 \u0027) + 1, buff.toString());\r\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        },
        {
          "type": "Ydocchange",
          "commitMessage": "applied some fixes to HelpFormatter, thanks to Rob and Boon\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/cli/trunk@129850 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "11/20/02 12:50 AM",
          "commitName": "6bcbf153c4497c38c4c36c3a04c1eac1f4cc153b",
          "commitAuthor": "John Keyes",
          "commitDateOld": "11/16/02 12:22 AM",
          "commitNameOld": "4c34483ea18c6a4f259f19a6d18637bb1fbae1e8",
          "commitAuthorOld": "John Keyes",
          "daysBetweenCommits": 4.02,
          "commitsBetweenForRepo": 5,
          "commitsBetweenForFile": 1,
          "actualSource": "public void printUsage(PrintWriter pw, int width, String app, Options options) {\r\n    StringBuffer buff \u003d new StringBuffer(defaultSyntaxPrefix).append(app).append(\" \");\r\n    final Collection processedGroups \u003d new ArrayList();\r\n    Option option;\r\n    for (Iterator i \u003d options.getOptions().iterator(); i.hasNext(); ) {\r\n        option \u003d (Option) i.next();\r\n        OptionGroup group \u003d options.getOptionGroup(option);\r\n        if (group !\u003d null) {\r\n            if (!processedGroups.contains(group)) {\r\n                processedGroups.add(group);\r\n                appendOptionGroup(buff, group);\r\n            }\r\n        } else {\r\n            appendOption(buff, option, option.isRequired());\r\n        }\r\n        if (i.hasNext()) {\r\n            buff.append(\" \");\r\n        }\r\n    }\r\n    printWrapped(pw, width, buff.toString().indexOf(\u0027 \u0027) + 1, buff.toString());\r\n}",
          "path": "src/java/org/apache/commons/cli/HelpFormatter.java",
          "functionStartLine": 227,
          "functionName": "printUsage",
          "functionAnnotation": "",
          "functionDoc": "\u003cp\u003ePrints the usage statement for the specified application.\u003c/p\u003e\r\n\r\n@param pw The PrintWriter to print the usage statement\r\n@param width ??\r\n@param appName The application name\r\n@param options The command line Options\r\n@see #appendOptionGroup(StringBuffer,OptionGroup)\r\n@see #appendOption(StringBuffer,Option,boolean)\r\n",
          "diff": "@@ -1,38 +1,21 @@\n public void printUsage(PrintWriter pw, int width, String app, Options options) {\r\n     StringBuffer buff \u003d new StringBuffer(defaultSyntaxPrefix).append(app).append(\" \");\r\n-    ArrayList list \u003d new ArrayList();\r\n+    final Collection processedGroups \u003d new ArrayList();\r\n     Option option;\r\n     for (Iterator i \u003d options.getOptions().iterator(); i.hasNext(); ) {\r\n         option \u003d (Option) i.next();\r\n         OptionGroup group \u003d options.getOptionGroup(option);\r\n-        if (group !\u003d null \u0026\u0026 !list.contains(group)) {\r\n-            list.add(group);\r\n-            Collection names \u003d group.getNames();\r\n-            buff.append(\"[\");\r\n-            for (Iterator iter \u003d names.iterator(); iter.hasNext(); ) {\r\n-                buff.append(iter.next());\r\n-                if (iter.hasNext()) {\r\n-                    buff.append(\" | \");\r\n-                }\r\n+        if (group !\u003d null) {\r\n+            if (!processedGroups.contains(group)) {\r\n+                processedGroups.add(group);\r\n+                appendOptionGroup(buff, group);\r\n             }\r\n-            buff.append(\"]\");\r\n         } else {\r\n-            if (!option.isRequired()) {\r\n-                buff.append(\"[\");\r\n-            }\r\n-            if (!\" \".equals(option.getOpt())) {\r\n-                buff.append(\"-\").append(option.getOpt());\r\n-            } else {\r\n-                buff.append(\"--\").append(option.getLongOpt());\r\n-            }\r\n-            if (option.hasArg() \u0026\u0026 option.getArgName() !\u003d null) {\r\n-                buff.append(\" \").append(option.getArgName());\r\n-            }\r\n-            if (!option.isRequired()) {\r\n-                buff.append(\"]\");\r\n-            }\r\n+            appendOption(buff, option, option.isRequired());\r\n+        }\r\n+        if (i.hasNext()) {\r\n             buff.append(\" \");\r\n         }\r\n     }\r\n     printWrapped(pw, width, buff.toString().indexOf(\u0027 \u0027) + 1, buff.toString());\r\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "\u003cp\u003ePrints the usage statement for the specified application.\u003c/p\u003e\r\n\r\n@param pw The PrintWriter to print the usage statement\r\n@param width ??\r\n@param appName The application name\r\n@param options The command line Options\r\n",
            "newValue": "\u003cp\u003ePrints the usage statement for the specified application.\u003c/p\u003e\r\n\r\n@param pw The PrintWriter to print the usage statement\r\n@param width ??\r\n@param appName The application name\r\n@param options The command line Options\r\n@see #appendOptionGroup(StringBuffer,OptionGroup)\r\n@see #appendOption(StringBuffer,Option,boolean)\r\n"
          }
        }
      ]
    },
    "4c34483ea18c6a4f259f19a6d18637bb1fbae1e8": {
      "type": "Ybodychange",
      "commitMessage": "some fixes to avoid \u0027null\u0027 appearing in the help output\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/cli/trunk@129844 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "11/16/02 12:22 AM",
      "commitName": "4c34483ea18c6a4f259f19a6d18637bb1fbae1e8",
      "commitAuthor": "John Keyes",
      "commitDateOld": "10/12/02 2:10 AM",
      "commitNameOld": "a0212835ed42e03a01c2c930a695e478a0884f68",
      "commitAuthorOld": "John Keyes",
      "daysBetweenCommits": 34.97,
      "commitsBetweenForRepo": 20,
      "commitsBetweenForFile": 1,
      "actualSource": "public void printUsage(PrintWriter pw, int width, String app, Options options) {\r\n    StringBuffer buff \u003d new StringBuffer(defaultSyntaxPrefix).append(app).append(\" \");\r\n    ArrayList list \u003d new ArrayList();\r\n    Option option;\r\n    for (Iterator i \u003d options.getOptions().iterator(); i.hasNext(); ) {\r\n        option \u003d (Option) i.next();\r\n        OptionGroup group \u003d options.getOptionGroup(option);\r\n        if (group !\u003d null \u0026\u0026 !list.contains(group)) {\r\n            list.add(group);\r\n            Collection names \u003d group.getNames();\r\n            buff.append(\"[\");\r\n            for (Iterator iter \u003d names.iterator(); iter.hasNext(); ) {\r\n                buff.append(iter.next());\r\n                if (iter.hasNext()) {\r\n                    buff.append(\" | \");\r\n                }\r\n            }\r\n            buff.append(\"]\");\r\n        } else {\r\n            if (!option.isRequired()) {\r\n                buff.append(\"[\");\r\n            }\r\n            if (!\" \".equals(option.getOpt())) {\r\n                buff.append(\"-\").append(option.getOpt());\r\n            } else {\r\n                buff.append(\"--\").append(option.getLongOpt());\r\n            }\r\n            if (option.hasArg() \u0026\u0026 option.getArgName() !\u003d null) {\r\n                buff.append(\" \").append(option.getArgName());\r\n            }\r\n            if (!option.isRequired()) {\r\n                buff.append(\"]\");\r\n            }\r\n            buff.append(\" \");\r\n        }\r\n    }\r\n    printWrapped(pw, width, buff.toString().indexOf(\u0027 \u0027) + 1, buff.toString());\r\n}",
      "path": "src/java/org/apache/commons/cli/HelpFormatter.java",
      "functionStartLine": 225,
      "functionName": "printUsage",
      "functionAnnotation": "",
      "functionDoc": "\u003cp\u003ePrints the usage statement for the specified application.\u003c/p\u003e\r\n\r\n@param pw The PrintWriter to print the usage statement\r\n@param width ??\r\n@param appName The application name\r\n@param options The command line Options\r\n",
      "diff": "@@ -1,41 +1,38 @@\n public void printUsage(PrintWriter pw, int width, String app, Options options) {\r\n     StringBuffer buff \u003d new StringBuffer(defaultSyntaxPrefix).append(app).append(\" \");\r\n     ArrayList list \u003d new ArrayList();\r\n     Option option;\r\n     for (Iterator i \u003d options.getOptions().iterator(); i.hasNext(); ) {\r\n         option \u003d (Option) i.next();\r\n         OptionGroup group \u003d options.getOptionGroup(option);\r\n         if (group !\u003d null \u0026\u0026 !list.contains(group)) {\r\n             list.add(group);\r\n             Collection names \u003d group.getNames();\r\n             buff.append(\"[\");\r\n             for (Iterator iter \u003d names.iterator(); iter.hasNext(); ) {\r\n                 buff.append(iter.next());\r\n                 if (iter.hasNext()) {\r\n                     buff.append(\" | \");\r\n                 }\r\n             }\r\n             buff.append(\"]\");\r\n         } else {\r\n             if (!option.isRequired()) {\r\n                 buff.append(\"[\");\r\n             }\r\n             if (!\" \".equals(option.getOpt())) {\r\n                 buff.append(\"-\").append(option.getOpt());\r\n             } else {\r\n                 buff.append(\"--\").append(option.getLongOpt());\r\n             }\r\n-            if (option.hasArg()) {\r\n-                buff.append(\" \");\r\n-            }\r\n-            if (option.hasArg()) {\r\n-                buff.append(option.getArgName());\r\n+            if (option.hasArg() \u0026\u0026 option.getArgName() !\u003d null) {\r\n+                buff.append(\" \").append(option.getArgName());\r\n             }\r\n             if (!option.isRequired()) {\r\n                 buff.append(\"]\");\r\n             }\r\n             buff.append(\" \");\r\n         }\r\n     }\r\n     printWrapped(pw, width, buff.toString().indexOf(\u0027 \u0027) + 1, buff.toString());\r\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "a0212835ed42e03a01c2c930a695e478a0884f68": {
      "type": "Ybodychange",
      "commitMessage": "some fixes for autousage and padding\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/cli/trunk@129821 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "10/12/02 2:10 AM",
      "commitName": "a0212835ed42e03a01c2c930a695e478a0884f68",
      "commitAuthor": "John Keyes",
      "commitDateOld": "10/9/02 12:24 AM",
      "commitNameOld": "62670f565aa434b6cb614c1054a8ea5bc3715f25",
      "commitAuthorOld": "John Keyes",
      "daysBetweenCommits": 3.07,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "actualSource": "public void printUsage(PrintWriter pw, int width, String app, Options options) {\r\n    StringBuffer buff \u003d new StringBuffer(defaultSyntaxPrefix).append(app).append(\" \");\r\n    ArrayList list \u003d new ArrayList();\r\n    Option option;\r\n    for (Iterator i \u003d options.getOptions().iterator(); i.hasNext(); ) {\r\n        option \u003d (Option) i.next();\r\n        OptionGroup group \u003d options.getOptionGroup(option);\r\n        if (group !\u003d null \u0026\u0026 !list.contains(group)) {\r\n            list.add(group);\r\n            Collection names \u003d group.getNames();\r\n            buff.append(\"[\");\r\n            for (Iterator iter \u003d names.iterator(); iter.hasNext(); ) {\r\n                buff.append(iter.next());\r\n                if (iter.hasNext()) {\r\n                    buff.append(\" | \");\r\n                }\r\n            }\r\n            buff.append(\"]\");\r\n        } else {\r\n            if (!option.isRequired()) {\r\n                buff.append(\"[\");\r\n            }\r\n            if (!\" \".equals(option.getOpt())) {\r\n                buff.append(\"-\").append(option.getOpt());\r\n            } else {\r\n                buff.append(\"--\").append(option.getLongOpt());\r\n            }\r\n            if (option.hasArg()) {\r\n                buff.append(\" \");\r\n            }\r\n            if (option.hasArg()) {\r\n                buff.append(option.getArgName());\r\n            }\r\n            if (!option.isRequired()) {\r\n                buff.append(\"]\");\r\n            }\r\n            buff.append(\" \");\r\n        }\r\n    }\r\n    printWrapped(pw, width, buff.toString().indexOf(\u0027 \u0027) + 1, buff.toString());\r\n}",
      "path": "src/java/org/apache/commons/cli/HelpFormatter.java",
      "functionStartLine": 225,
      "functionName": "printUsage",
      "functionAnnotation": "",
      "functionDoc": "\u003cp\u003ePrints the usage statement for the specified application.\u003c/p\u003e\r\n\r\n@param pw The PrintWriter to print the usage statement\r\n@param width ??\r\n@param appName The application name\r\n@param options The command line Options\r\n",
      "diff": "@@ -1,43 +1,41 @@\n public void printUsage(PrintWriter pw, int width, String app, Options options) {\r\n     StringBuffer buff \u003d new StringBuffer(defaultSyntaxPrefix).append(app).append(\" \");\r\n     ArrayList list \u003d new ArrayList();\r\n     Option option;\r\n     for (Iterator i \u003d options.getOptions().iterator(); i.hasNext(); ) {\r\n         option \u003d (Option) i.next();\r\n         OptionGroup group \u003d options.getOptionGroup(option);\r\n         if (group !\u003d null \u0026\u0026 !list.contains(group)) {\r\n             list.add(group);\r\n             Collection names \u003d group.getNames();\r\n             buff.append(\"[\");\r\n             for (Iterator iter \u003d names.iterator(); iter.hasNext(); ) {\r\n                 buff.append(iter.next());\r\n                 if (iter.hasNext()) {\r\n                     buff.append(\" | \");\r\n                 }\r\n             }\r\n             buff.append(\"]\");\r\n         } else {\r\n             if (!option.isRequired()) {\r\n                 buff.append(\"[\");\r\n             }\r\n             if (!\" \".equals(option.getOpt())) {\r\n                 buff.append(\"-\").append(option.getOpt());\r\n             } else {\r\n                 buff.append(\"--\").append(option.getLongOpt());\r\n             }\r\n-            if (option.getValueSeparator() !\u003d (char) 0) {\r\n-                buff.append(option.getValueSeparator());\r\n-            } else if (option.hasArg()) {\r\n+            if (option.hasArg()) {\r\n                 buff.append(\" \");\r\n             }\r\n             if (option.hasArg()) {\r\n                 buff.append(option.getArgName());\r\n             }\r\n             if (!option.isRequired()) {\r\n                 buff.append(\"]\");\r\n             }\r\n             buff.append(\" \");\r\n         }\r\n     }\r\n     printWrapped(pw, width, buff.toString().indexOf(\u0027 \u0027) + 1, buff.toString());\r\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "62670f565aa434b6cb614c1054a8ea5bc3715f25": {
      "type": "Ybodychange",
      "commitMessage": "fixed bug 13425, added argName support, fixed some bugs in the HelpFormatter\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/cli/trunk@129819 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "10/9/02 12:24 AM",
      "commitName": "62670f565aa434b6cb614c1054a8ea5bc3715f25",
      "commitAuthor": "John Keyes",
      "commitDateOld": "9/20/02 1:59 AM",
      "commitNameOld": "c08f73835beda155421d78ee4f96d9e11c501159",
      "commitAuthorOld": "John Keyes",
      "daysBetweenCommits": 18.93,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "actualSource": "public void printUsage(PrintWriter pw, int width, String app, Options options) {\r\n    StringBuffer buff \u003d new StringBuffer(defaultSyntaxPrefix).append(app).append(\" \");\r\n    ArrayList list \u003d new ArrayList();\r\n    Option option;\r\n    for (Iterator i \u003d options.getOptions().iterator(); i.hasNext(); ) {\r\n        option \u003d (Option) i.next();\r\n        OptionGroup group \u003d options.getOptionGroup(option);\r\n        if (group !\u003d null \u0026\u0026 !list.contains(group)) {\r\n            list.add(group);\r\n            Collection names \u003d group.getNames();\r\n            buff.append(\"[\");\r\n            for (Iterator iter \u003d names.iterator(); iter.hasNext(); ) {\r\n                buff.append(iter.next());\r\n                if (iter.hasNext()) {\r\n                    buff.append(\" | \");\r\n                }\r\n            }\r\n            buff.append(\"]\");\r\n        } else {\r\n            if (!option.isRequired()) {\r\n                buff.append(\"[\");\r\n            }\r\n            if (!\" \".equals(option.getOpt())) {\r\n                buff.append(\"-\").append(option.getOpt());\r\n            } else {\r\n                buff.append(\"--\").append(option.getLongOpt());\r\n            }\r\n            if (option.getValueSeparator() !\u003d (char) 0) {\r\n                buff.append(option.getValueSeparator());\r\n            } else if (option.hasArg()) {\r\n                buff.append(\" \");\r\n            }\r\n            if (option.hasArg()) {\r\n                buff.append(option.getArgName());\r\n            }\r\n            if (!option.isRequired()) {\r\n                buff.append(\"]\");\r\n            }\r\n            buff.append(\" \");\r\n        }\r\n    }\r\n    printWrapped(pw, width, buff.toString().indexOf(\u0027 \u0027) + 1, buff.toString());\r\n}",
      "path": "src/java/org/apache/commons/cli/HelpFormatter.java",
      "functionStartLine": 225,
      "functionName": "printUsage",
      "functionAnnotation": "",
      "functionDoc": "\u003cp\u003ePrints the usage statement for the specified application.\u003c/p\u003e\r\n\r\n@param pw The PrintWriter to print the usage statement\r\n@param width ??\r\n@param appName The application name\r\n@param options The command line Options\r\n",
      "diff": "@@ -1,35 +1,43 @@\n public void printUsage(PrintWriter pw, int width, String app, Options options) {\r\n     StringBuffer buff \u003d new StringBuffer(defaultSyntaxPrefix).append(app).append(\" \");\r\n     ArrayList list \u003d new ArrayList();\r\n     Option option;\r\n     for (Iterator i \u003d options.getOptions().iterator(); i.hasNext(); ) {\r\n         option \u003d (Option) i.next();\r\n         OptionGroup group \u003d options.getOptionGroup(option);\r\n         if (group !\u003d null \u0026\u0026 !list.contains(group)) {\r\n             list.add(group);\r\n             Collection names \u003d group.getNames();\r\n             buff.append(\"[\");\r\n             for (Iterator iter \u003d names.iterator(); iter.hasNext(); ) {\r\n                 buff.append(iter.next());\r\n                 if (iter.hasNext()) {\r\n                     buff.append(\" | \");\r\n                 }\r\n             }\r\n             buff.append(\"]\");\r\n         } else {\r\n             if (!option.isRequired()) {\r\n                 buff.append(\"[\");\r\n             }\r\n-            buff.append(\"-\").append(option.getOpt());\r\n+            if (!\" \".equals(option.getOpt())) {\r\n+                buff.append(\"-\").append(option.getOpt());\r\n+            } else {\r\n+                buff.append(\"--\").append(option.getLongOpt());\r\n+            }\r\n+            if (option.getValueSeparator() !\u003d (char) 0) {\r\n+                buff.append(option.getValueSeparator());\r\n+            } else if (option.hasArg()) {\r\n+                buff.append(\" \");\r\n+            }\r\n             if (option.hasArg()) {\r\n-                buff.append(\" arg\");\r\n+                buff.append(option.getArgName());\r\n             }\r\n             if (!option.isRequired()) {\r\n                 buff.append(\"]\");\r\n             }\r\n             buff.append(\" \");\r\n         }\r\n     }\r\n-    System.out.println(\"-\u003e\" + buff.toString());\r\n     printWrapped(pw, width, buff.toString().indexOf(\u0027 \u0027) + 1, buff.toString());\r\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "c7127329dad2c5d6284532da09ddc0fdefd67436": {
      "type": "Yintroduced",
      "commitMessage": "added automatic usage generation\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/cli/trunk@129785 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "7/23/02 1:49 AM",
      "commitName": "c7127329dad2c5d6284532da09ddc0fdefd67436",
      "commitAuthor": "John Keyes",
      "diff": "@@ -0,0 +1,35 @@\n+public void printUsage(PrintWriter pw, int width, String app, Options options) {\r\n+    StringBuffer buff \u003d new StringBuffer(defaultSyntaxPrefix).append(app).append(\" \");\r\n+    ArrayList list \u003d new ArrayList();\r\n+    Option option;\r\n+    for (Iterator i \u003d options.getOptions().iterator(); i.hasNext(); ) {\r\n+        option \u003d (Option) i.next();\r\n+        OptionGroup group \u003d options.getOptionGroup(option);\r\n+        if (group !\u003d null \u0026\u0026 !list.contains(group)) {\r\n+            list.add(group);\r\n+            Collection names \u003d group.getNames();\r\n+            buff.append(\"[\");\r\n+            for (Iterator iter \u003d names.iterator(); iter.hasNext(); ) {\r\n+                buff.append(iter.next());\r\n+                if (iter.hasNext()) {\r\n+                    buff.append(\" | \");\r\n+                }\r\n+            }\r\n+            buff.append(\"]\");\r\n+        } else {\r\n+            if (!option.isRequired()) {\r\n+                buff.append(\"[\");\r\n+            }\r\n+            buff.append(\"-\").append(option.getOpt());\r\n+            if (option.hasArg()) {\r\n+                buff.append(\" arg\");\r\n+            }\r\n+            if (!option.isRequired()) {\r\n+                buff.append(\"]\");\r\n+            }\r\n+            buff.append(\" \");\r\n+        }\r\n+    }\r\n+    System.out.println(\"-\u003e\" + buff.toString());\r\n+    printWrapped(pw, width, buff.toString().indexOf(\u0027 \u0027) + 1, buff.toString());\r\n+}\n\\ No newline at end of file\n",
      "actualSource": "public void printUsage(PrintWriter pw, int width, String app, Options options) {\r\n    StringBuffer buff \u003d new StringBuffer(defaultSyntaxPrefix).append(app).append(\" \");\r\n    ArrayList list \u003d new ArrayList();\r\n    Option option;\r\n    for (Iterator i \u003d options.getOptions().iterator(); i.hasNext(); ) {\r\n        option \u003d (Option) i.next();\r\n        OptionGroup group \u003d options.getOptionGroup(option);\r\n        if (group !\u003d null \u0026\u0026 !list.contains(group)) {\r\n            list.add(group);\r\n            Collection names \u003d group.getNames();\r\n            buff.append(\"[\");\r\n            for (Iterator iter \u003d names.iterator(); iter.hasNext(); ) {\r\n                buff.append(iter.next());\r\n                if (iter.hasNext()) {\r\n                    buff.append(\" | \");\r\n                }\r\n            }\r\n            buff.append(\"]\");\r\n        } else {\r\n            if (!option.isRequired()) {\r\n                buff.append(\"[\");\r\n            }\r\n            buff.append(\"-\").append(option.getOpt());\r\n            if (option.hasArg()) {\r\n                buff.append(\" arg\");\r\n            }\r\n            if (!option.isRequired()) {\r\n                buff.append(\"]\");\r\n            }\r\n            buff.append(\" \");\r\n        }\r\n    }\r\n    System.out.println(\"-\u003e\" + buff.toString());\r\n    printWrapped(pw, width, buff.toString().indexOf(\u0027 \u0027) + 1, buff.toString());\r\n}",
      "path": "src/java/org/apache/commons/cli/HelpFormatter.java",
      "functionStartLine": 225,
      "functionName": "printUsage",
      "functionAnnotation": "",
      "functionDoc": "\u003cp\u003ePrints the usage statement for the specified application.\u003c/p\u003e\r\n\r\n@param pw The PrintWriter to print the usage statement\r\n@param width ??\r\n@param appName The application name\r\n@param options The command line Options\r\n"
    }
  }
}