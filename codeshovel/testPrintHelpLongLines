{
  "origin": "codeshovel",
  "repositoryName": "commons-cli",
  "repositoryPath": "D:/_SELEN/_2022-2023/CS588/GitHub_Dataset/commons-cli/commons-cli/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "BugCLI162Test.java",
  "functionName": "testPrintHelpLongLines",
  "functionId": "testPrintHelpLongLines",
  "sourceFilePath": "src/test/java/org/apache/commons/cli/bug/BugCLI162Test.java",
  "functionAnnotation": "@Test",
  "functionDoc": "",
  "functionStartLine": 191,
  "functionEndLine": 382,
  "numCommitsSeen": 20,
  "timeTaken": 196,
  "changeHistory": [
    "bc0edc47dbf47cdaa3485cfb724982f377c900df",
    "c67275279176504a6f5fc556cfa247e1df02a580",
    "357a8b0b8f1090db29e0d541a9419f570a78457b",
    "b207a2bcef8e29df436bc393c3569947680e93e6",
    "60835e2f29d4ec09eead7789405d99f92c36a29e",
    "f06a1b95c4568997295e987b9617be799c517845",
    "cd745ecf52fb2fe8fed1c67fc9149e4be11a73f0",
    "27cf61e22583db8e796e7c14f1f20fbc9538b1ef",
    "b0c92c04fe83ff9348221ac6964f73badffd9b90",
    "4745ade0eb9450e51476269ad3d55db52df677e6",
    "6c740e79cb07ec9074b2c77822732c0678690ae9"
  ],
  "changeHistoryShort": {
    "bc0edc47dbf47cdaa3485cfb724982f377c900df": "Ybodychange",
    "c67275279176504a6f5fc556cfa247e1df02a580": "Ybodychange",
    "357a8b0b8f1090db29e0d541a9419f570a78457b": "Ybodychange",
    "b207a2bcef8e29df436bc393c3569947680e93e6": "Ybodychange",
    "60835e2f29d4ec09eead7789405d99f92c36a29e": "Yannotationchange",
    "f06a1b95c4568997295e987b9617be799c517845": "Yexceptionschange",
    "cd745ecf52fb2fe8fed1c67fc9149e4be11a73f0": "Yfilerename",
    "27cf61e22583db8e796e7c14f1f20fbc9538b1ef": "Yformatchange",
    "b0c92c04fe83ff9348221ac6964f73badffd9b90": "Ybodychange",
    "4745ade0eb9450e51476269ad3d55db52df677e6": "Ybodychange",
    "6c740e79cb07ec9074b2c77822732c0678690ae9": "Yintroduced"
  },
  "changeHistoryDetails": {
    "bc0edc47dbf47cdaa3485cfb724982f377c900df": {
      "type": "Ybodychange",
      "commitMessage": "Clean ups.\n\n- maven-checkstyle-plugin 3.1.1 -\u003e 3.1.2.\n- checkstyle -\u003e 9.0\n- Updates for 21st century.\n- No need to nest else clause.\n- Use simple array declarations.\n- Use valueOf instead of new for Numbers.\n- Consistent formatting.\n- Remove some inline comments //-----...\n",
      "commitDate": "10/2/21 11:04 PM",
      "commitName": "bc0edc47dbf47cdaa3485cfb724982f377c900df",
      "commitAuthor": "Gary Gregory",
      "commitDateOld": "12/28/20 6:44 PM",
      "commitNameOld": "c67275279176504a6f5fc556cfa247e1df02a580",
      "commitAuthorOld": "Arturo Bernal",
      "daysBetweenCommits": 278.18,
      "commitsBetweenForRepo": 38,
      "commitsBetweenForFile": 1,
      "actualSource": "@Test\r\npublic void testPrintHelpLongLines() {\r\n    final Options commandLineOptions;\r\n    commandLineOptions \u003d new Options();\r\n    commandLineOptions.addOption(OPT_HELP, OPT_HELP_LONG, false, \"Prints help and quits\");\r\n    commandLineOptions.addOption(OPT_DRIVER, \"driver\", true, \"JDBC driver class name\");\r\n    commandLineOptions.addOption(OPT_DRIVER_INFO, \"info\", false, \"Prints driver information and properties. If \" + OPT + OPT_CONNECTION + \" is not specified, all drivers on the classpath are displayed.\");\r\n    commandLineOptions.addOption(OPT_CONNECTION, \"url\", true, \"Connection URL\");\r\n    commandLineOptions.addOption(OPT_USER, \"user\", true, \"A database user name\");\r\n    commandLineOptions.addOption(OPT_PASSWORD, OPT_PASSWORD_L, true, \"The database password for the user specified with the \" + OPT + OPT_USER + \" option. You can obfuscate the password with org.mortbay.jetty.security.Password,\" + \" see http://docs.codehaus.org/display/JETTY/Securing+Passwords\");\r\n    commandLineOptions.addOption(OPT_SQL, OPT_SQL_L, true, \"Runs SQL or {call stored_procedure(?, ?)} or {?\u003dcall function(?, ?)}\");\r\n    commandLineOptions.addOption(OPT_FILE_SFMD, \"sfmd\", true, \"Writes a SFMD file for the given SQL\");\r\n    commandLineOptions.addOption(OPT_FILE_BINDING, \"jdbc\", true, \"Writes a JDBC binding node file for the given SQL\");\r\n    commandLineOptions.addOption(OPT_FILE_JDBC, \"node\", true, \"Writes a JDBC node file for the given SQL (internal debugging)\");\r\n    commandLineOptions.addOption(OPT_WRITE_TO_FILE, \"outfile\", true, \"Writes the SQL output to the given file\");\r\n    commandLineOptions.addOption(OPT_DESCRIPTION, \"description\", true, \"SFMD description. A default description is used if omited. Example: \" + OPT + OPT_DESCRIPTION + \" \\\"Runs such and such\\\"\");\r\n    commandLineOptions.addOption(OPT_INTERACTIVE, \"interactive\", false, \"Runs in interactive mode, reading and writing from the console, \u0027go\u0027 or \u0027/\u0027 sends a statement\");\r\n    commandLineOptions.addOption(OPT_TIMING, \"printTiming\", false, \"Prints timing information\");\r\n    commandLineOptions.addOption(OPT_METADATA, \"printMetaData\", false, \"Prints metadata information\");\r\n    commandLineOptions.addOption(OPT_STACK_TRACE, \"printStack\", false, \"Prints stack traces on errors\");\r\n    Option option \u003d new Option(OPT_COLUMN_NAMES, \"columnNames\", true, \"Column XML names; default names column labels. Example: \" + OPT + OPT_COLUMN_NAMES + \" \\\"cname1 cname2\\\"\");\r\n    commandLineOptions.addOption(option);\r\n    option \u003d new Option(OPT_PARAM_NAMES, \"paramNames\", true, \"Parameter XML names; default names are param1, param2, etc. Example: \" + OPT + OPT_PARAM_NAMES + \" \\\"pname1 pname2\\\"\");\r\n    commandLineOptions.addOption(option);\r\n    final OptionGroup pOutTypesOptionGroup \u003d new OptionGroup();\r\n    final String pOutTypesOptionGroupDoc \u003d OPT + OPT_PARAM_TYPES_INT + \" and \" + OPT + OPT_PARAM_TYPES_NAME + \" are mutually exclusive.\";\r\n    final String typesClassName \u003d Types.class.getName();\r\n    option \u003d new Option(OPT_PARAM_TYPES_INT, \"paramTypes\", true, \"Parameter types from \" + typesClassName + \". \" + pOutTypesOptionGroupDoc + \" Example: \" + OPT + OPT_PARAM_TYPES_INT + \" \\\"-10 12\\\"\");\r\n    commandLineOptions.addOption(option);\r\n    option \u003d new Option(OPT_PARAM_TYPES_NAME, \"paramTypeNames\", true, \"Parameter \" + typesClassName + \" names. \" + pOutTypesOptionGroupDoc + \" Example: \" + OPT + OPT_PARAM_TYPES_NAME + \" \\\"CURSOR VARCHAR\\\"\");\r\n    commandLineOptions.addOption(option);\r\n    commandLineOptions.addOptionGroup(pOutTypesOptionGroup);\r\n    final OptionGroup modesOptionGroup \u003d new OptionGroup();\r\n    final String modesOptionGroupDoc \u003d OPT + OPT_PARAM_MODES_INT + \" and \" + OPT + OPT_PARAM_MODES_NAME + \" are mutually exclusive.\";\r\n    option \u003d new Option(OPT_PARAM_MODES_INT, \"paramModes\", true, \"Parameters modes (\" + ParameterMetaData.parameterModeIn + \"\u003dIN, \" + ParameterMetaData.parameterModeInOut + \"\u003dINOUT, \" + ParameterMetaData.parameterModeOut + \"\u003dOUT, \" + ParameterMetaData.parameterModeUnknown + \"\u003dUnknown\" + \"). \" + modesOptionGroupDoc + \" Example for 2 parameters, OUT and IN: \" + OPT + OPT_PARAM_MODES_INT + \" \\\"\" + ParameterMetaData.parameterModeOut + \" \" + ParameterMetaData.parameterModeIn + \"\\\"\");\r\n    modesOptionGroup.addOption(option);\r\n    option \u003d new Option(OPT_PARAM_MODES_NAME, \"paramModeNames\", true, \"Parameters mode names (\" + PMODES + \"). \" + modesOptionGroupDoc + \" Example for 2 parameters, OUT and IN: \" + OPT + OPT_PARAM_MODES_NAME + \" \\\"\" + PMODE_OUT + \" \" + PMODE_IN + \"\\\"\");\r\n    modesOptionGroup.addOption(option);\r\n    commandLineOptions.addOptionGroup(modesOptionGroup);\r\n    option \u003d new Option(null, OPT_TRIM_L, true, \"Trims leading and trailing spaces from all column values. Column XML names can be optionally specified to set which columns to trim.\");\r\n    option.setOptionalArg(true);\r\n    commandLineOptions.addOption(option);\r\n    option \u003d new Option(OPT_JDBC_TO_SFMD, OPT_JDBC_TO_SFMD_L, true, \"Converts the JDBC file in the first argument to an SMFD file specified in the second argument.\");\r\n    option.setArgs(2);\r\n    commandLineOptions.addOption(option);\r\n    formatter.printHelp(new PrintWriter(sw), HelpFormatter.DEFAULT_WIDTH, this.getClass().getName(), null, commandLineOptions, HelpFormatter.DEFAULT_LEFT_PAD, HelpFormatter.DEFAULT_DESC_PAD, null);\r\n    final String expected \u003d \"usage: org.apache.commons.cli.bug.BugCLI162Test\" + CR + \" -2,--jdbc2sfmd \u003carg\u003e        Converts the JDBC file in the first argument\" + CR + \"                             to an SMFD file specified in the second\" + CR + \"                             argument.\" + CR + \" -a,--paramNames \u003carg\u003e       Parameter XML names; default names are\" + CR + \"                             param1, param2, etc. Example: -a \\\"pname1\" + CR + \"                             pname2\\\"\" + CR + \" -b,--jdbc \u003carg\u003e             Writes a JDBC binding node file for the given\" + CR + \"                             SQL\" + CR + \" -c,--url \u003carg\u003e              Connection URL\" + CR + \" -d,--driver \u003carg\u003e           JDBC driver class name\" + CR + \" -e,--description \u003carg\u003e      SFMD description. A default description is\" + CR + \"                             used if omited. Example: -e \\\"Runs such and\" + CR + \"                             such\\\"\" + CR + \" -f,--sfmd \u003carg\u003e             Writes a SFMD file for the given SQL\" + CR + \" -g,--printTiming            Prints timing information\" + CR + \" -h,--help                   Prints help and quits\" + CR + \" -i,--interactive            Runs in interactive mode, reading and writing\" + CR + \"                             from the console, \u0027go\u0027 or \u0027/\u0027 sends a\" + CR + \"                             statement\" + CR + \" -j,--node \u003carg\u003e             Writes a JDBC node file for the given SQL\" + CR + \"                             (internal debugging)\" + CR + \" -l,--columnNames \u003carg\u003e      Column XML names; default names column\" + CR + \"                             labels. Example: -l \\\"cname1 cname2\\\"\" + CR + \" -m,--printMetaData          Prints metadata information\" + CR + \" -n,--info                   Prints driver information and properties. If\" + CR + \"                             -c is not specified, all drivers on the\" + CR + \"                             classpath are displayed.\" + CR + \" -o,--paramModes \u003carg\u003e       Parameters modes (1\u003dIN, 2\u003dINOUT, 4\u003dOUT,\" + CR + \"                             0\u003dUnknown). -o and -O are mutually exclusive.\" + CR + \"                             Example for 2 parameters, OUT and IN: -o \\\"4\" + CR + \"                             1\\\"\" + CR + \" -O,--paramModeNames \u003carg\u003e   Parameters mode names (IN, INOUT, OUT,\" + CR + \"                             Unknown). -o and -O are mutually exclusive.\" + CR + \"                             Example for 2 parameters, OUT and IN: -O \\\"OUT\" + CR + \"                             IN\\\"\" + CR + \" -p,--password \u003carg\u003e         The database password for the user specified\" + CR + \"                             with the -u option. You can obfuscate the\" + CR + \"                             password with\" + CR + \"                             org.mortbay.jetty.security.Password, see\" + CR + \"                             http://docs.codehaus.org/display/JETTY/Securi\" + CR + \"                             ng+Passwords\" + CR + \" -s,--sql \u003carg\u003e              Runs SQL or {call stored_procedure(?, ?)} or\" + CR + \"                             {?\u003dcall function(?, ?)}\" + CR + \" -t,--printStack             Prints stack traces on errors\" + CR + \"    --trim \u003carg\u003e             Trims leading and trailing spaces from all\" + CR + \"                             column values. Column XML names can be\" + CR + \"                             optionally specified to set which columns to\" + CR + \"                             trim.\" + CR + \" -u,--user \u003carg\u003e             A database user name\" + CR + \" -w,--outfile \u003carg\u003e          Writes the SQL output to the given file\" + CR + \" -y,--paramTypes \u003carg\u003e       Parameter types from java.sql.Types. -y and\" + CR + \"                             -Y are mutually exclusive. Example: -y \\\"-10\" + CR + \"                             12\\\"\" + CR + \" -Y,--paramTypeNames \u003carg\u003e   Parameter java.sql.Types names. -y and -Y are\" + CR + \"                             mutually exclusive. Example: -Y \\\"CURSOR\" + CR + \"                             VARCHAR\\\"\" + CR;\r\n    assertEquals(expected, sw.toString());\r\n}",
      "path": "src/test/java/org/apache/commons/cli/bug/BugCLI162Test.java",
      "functionStartLine": 195,
      "functionName": "testPrintHelpLongLines",
      "functionAnnotation": "@Test",
      "functionDoc": "",
      "diff": "@@ -1,85 +1,49 @@\n @Test\r\n public void testPrintHelpLongLines() {\r\n-    final String OPT \u003d \"-\";\r\n-    final String OPT_COLUMN_NAMES \u003d \"l\";\r\n-    final String OPT_CONNECTION \u003d \"c\";\r\n-    final String OPT_DESCRIPTION \u003d \"e\";\r\n-    final String OPT_DRIVER \u003d \"d\";\r\n-    final String OPT_DRIVER_INFO \u003d \"n\";\r\n-    final String OPT_FILE_BINDING \u003d \"b\";\r\n-    final String OPT_FILE_JDBC \u003d \"j\";\r\n-    final String OPT_FILE_SFMD \u003d \"f\";\r\n-    final String OPT_HELP \u003d \"h\";\r\n-    final String OPT_HELP_ \u003d \"help\";\r\n-    final String OPT_INTERACTIVE \u003d \"i\";\r\n-    final String OPT_JDBC_TO_SFMD \u003d \"2\";\r\n-    final String OPT_JDBC_TO_SFMD_L \u003d \"jdbc2sfmd\";\r\n-    final String OPT_METADATA \u003d \"m\";\r\n-    final String OPT_PARAM_MODES_INT \u003d \"o\";\r\n-    final String OPT_PARAM_MODES_NAME \u003d \"O\";\r\n-    final String OPT_PARAM_NAMES \u003d \"a\";\r\n-    final String OPT_PARAM_TYPES_INT \u003d \"y\";\r\n-    final String OPT_PARAM_TYPES_NAME \u003d \"Y\";\r\n-    final String OPT_PASSWORD \u003d \"p\";\r\n-    final String OPT_PASSWORD_L \u003d \"password\";\r\n-    final String OPT_SQL \u003d \"s\";\r\n-    final String OPT_SQL_L \u003d \"sql\";\r\n-    final String OPT_SQL_SPLIT_DEFAULT \u003d \"###\";\r\n-    final String OPT_SQL_SPLIT_L \u003d \"splitSql\";\r\n-    final String OPT_STACK_TRACE \u003d \"t\";\r\n-    final String OPT_TIMING \u003d \"g\";\r\n-    final String OPT_TRIM_L \u003d \"trim\";\r\n-    final String OPT_USER \u003d \"u\";\r\n-    final String OPT_WRITE_TO_FILE \u003d \"w\";\r\n-    final String _PMODE_IN \u003d \"IN\";\r\n-    final String _PMODE_INOUT \u003d \"INOUT\";\r\n-    final String _PMODE_OUT \u003d \"OUT\";\r\n-    final String _PMODE_UNK \u003d \"Unknown\";\r\n-    final String PMODES \u003d _PMODE_IN + \", \" + _PMODE_INOUT + \", \" + _PMODE_OUT + \", \" + _PMODE_UNK;\r\n     final Options commandLineOptions;\r\n     commandLineOptions \u003d new Options();\r\n-    commandLineOptions.addOption(OPT_HELP, OPT_HELP_, false, \"Prints help and quits\");\r\n+    commandLineOptions.addOption(OPT_HELP, OPT_HELP_LONG, false, \"Prints help and quits\");\r\n     commandLineOptions.addOption(OPT_DRIVER, \"driver\", true, \"JDBC driver class name\");\r\n     commandLineOptions.addOption(OPT_DRIVER_INFO, \"info\", false, \"Prints driver information and properties. If \" + OPT + OPT_CONNECTION + \" is not specified, all drivers on the classpath are displayed.\");\r\n     commandLineOptions.addOption(OPT_CONNECTION, \"url\", true, \"Connection URL\");\r\n     commandLineOptions.addOption(OPT_USER, \"user\", true, \"A database user name\");\r\n-    commandLineOptions.addOption(OPT_PASSWORD, OPT_PASSWORD_L, true, \"The database password for the user specified with the \" + OPT + OPT_USER + \" option. You can obfuscate the password with org.mortbay.jetty.security.Password, see http://docs.codehaus.org/display/JETTY/Securing+Passwords\");\r\n+    commandLineOptions.addOption(OPT_PASSWORD, OPT_PASSWORD_L, true, \"The database password for the user specified with the \" + OPT + OPT_USER + \" option. You can obfuscate the password with org.mortbay.jetty.security.Password,\" + \" see http://docs.codehaus.org/display/JETTY/Securing+Passwords\");\r\n     commandLineOptions.addOption(OPT_SQL, OPT_SQL_L, true, \"Runs SQL or {call stored_procedure(?, ?)} or {?\u003dcall function(?, ?)}\");\r\n     commandLineOptions.addOption(OPT_FILE_SFMD, \"sfmd\", true, \"Writes a SFMD file for the given SQL\");\r\n     commandLineOptions.addOption(OPT_FILE_BINDING, \"jdbc\", true, \"Writes a JDBC binding node file for the given SQL\");\r\n     commandLineOptions.addOption(OPT_FILE_JDBC, \"node\", true, \"Writes a JDBC node file for the given SQL (internal debugging)\");\r\n     commandLineOptions.addOption(OPT_WRITE_TO_FILE, \"outfile\", true, \"Writes the SQL output to the given file\");\r\n     commandLineOptions.addOption(OPT_DESCRIPTION, \"description\", true, \"SFMD description. A default description is used if omited. Example: \" + OPT + OPT_DESCRIPTION + \" \\\"Runs such and such\\\"\");\r\n     commandLineOptions.addOption(OPT_INTERACTIVE, \"interactive\", false, \"Runs in interactive mode, reading and writing from the console, \u0027go\u0027 or \u0027/\u0027 sends a statement\");\r\n     commandLineOptions.addOption(OPT_TIMING, \"printTiming\", false, \"Prints timing information\");\r\n     commandLineOptions.addOption(OPT_METADATA, \"printMetaData\", false, \"Prints metadata information\");\r\n     commandLineOptions.addOption(OPT_STACK_TRACE, \"printStack\", false, \"Prints stack traces on errors\");\r\n     Option option \u003d new Option(OPT_COLUMN_NAMES, \"columnNames\", true, \"Column XML names; default names column labels. Example: \" + OPT + OPT_COLUMN_NAMES + \" \\\"cname1 cname2\\\"\");\r\n     commandLineOptions.addOption(option);\r\n     option \u003d new Option(OPT_PARAM_NAMES, \"paramNames\", true, \"Parameter XML names; default names are param1, param2, etc. Example: \" + OPT + OPT_PARAM_NAMES + \" \\\"pname1 pname2\\\"\");\r\n     commandLineOptions.addOption(option);\r\n     final OptionGroup pOutTypesOptionGroup \u003d new OptionGroup();\r\n     final String pOutTypesOptionGroupDoc \u003d OPT + OPT_PARAM_TYPES_INT + \" and \" + OPT + OPT_PARAM_TYPES_NAME + \" are mutually exclusive.\";\r\n     final String typesClassName \u003d Types.class.getName();\r\n     option \u003d new Option(OPT_PARAM_TYPES_INT, \"paramTypes\", true, \"Parameter types from \" + typesClassName + \". \" + pOutTypesOptionGroupDoc + \" Example: \" + OPT + OPT_PARAM_TYPES_INT + \" \\\"-10 12\\\"\");\r\n     commandLineOptions.addOption(option);\r\n     option \u003d new Option(OPT_PARAM_TYPES_NAME, \"paramTypeNames\", true, \"Parameter \" + typesClassName + \" names. \" + pOutTypesOptionGroupDoc + \" Example: \" + OPT + OPT_PARAM_TYPES_NAME + \" \\\"CURSOR VARCHAR\\\"\");\r\n     commandLineOptions.addOption(option);\r\n     commandLineOptions.addOptionGroup(pOutTypesOptionGroup);\r\n     final OptionGroup modesOptionGroup \u003d new OptionGroup();\r\n     final String modesOptionGroupDoc \u003d OPT + OPT_PARAM_MODES_INT + \" and \" + OPT + OPT_PARAM_MODES_NAME + \" are mutually exclusive.\";\r\n     option \u003d new Option(OPT_PARAM_MODES_INT, \"paramModes\", true, \"Parameters modes (\" + ParameterMetaData.parameterModeIn + \"\u003dIN, \" + ParameterMetaData.parameterModeInOut + \"\u003dINOUT, \" + ParameterMetaData.parameterModeOut + \"\u003dOUT, \" + ParameterMetaData.parameterModeUnknown + \"\u003dUnknown\" + \"). \" + modesOptionGroupDoc + \" Example for 2 parameters, OUT and IN: \" + OPT + OPT_PARAM_MODES_INT + \" \\\"\" + ParameterMetaData.parameterModeOut + \" \" + ParameterMetaData.parameterModeIn + \"\\\"\");\r\n     modesOptionGroup.addOption(option);\r\n-    option \u003d new Option(OPT_PARAM_MODES_NAME, \"paramModeNames\", true, \"Parameters mode names (\" + PMODES + \"). \" + modesOptionGroupDoc + \" Example for 2 parameters, OUT and IN: \" + OPT + OPT_PARAM_MODES_NAME + \" \\\"\" + _PMODE_OUT + \" \" + _PMODE_IN + \"\\\"\");\r\n+    option \u003d new Option(OPT_PARAM_MODES_NAME, \"paramModeNames\", true, \"Parameters mode names (\" + PMODES + \"). \" + modesOptionGroupDoc + \" Example for 2 parameters, OUT and IN: \" + OPT + OPT_PARAM_MODES_NAME + \" \\\"\" + PMODE_OUT + \" \" + PMODE_IN + \"\\\"\");\r\n     modesOptionGroup.addOption(option);\r\n     commandLineOptions.addOptionGroup(modesOptionGroup);\r\n     option \u003d new Option(null, OPT_TRIM_L, true, \"Trims leading and trailing spaces from all column values. Column XML names can be optionally specified to set which columns to trim.\");\r\n     option.setOptionalArg(true);\r\n     commandLineOptions.addOption(option);\r\n     option \u003d new Option(OPT_JDBC_TO_SFMD, OPT_JDBC_TO_SFMD_L, true, \"Converts the JDBC file in the first argument to an SMFD file specified in the second argument.\");\r\n     option.setArgs(2);\r\n     commandLineOptions.addOption(option);\r\n     formatter.printHelp(new PrintWriter(sw), HelpFormatter.DEFAULT_WIDTH, this.getClass().getName(), null, commandLineOptions, HelpFormatter.DEFAULT_LEFT_PAD, HelpFormatter.DEFAULT_DESC_PAD, null);\r\n     final String expected \u003d \"usage: org.apache.commons.cli.bug.BugCLI162Test\" + CR + \" -2,--jdbc2sfmd \u003carg\u003e        Converts the JDBC file in the first argument\" + CR + \"                             to an SMFD file specified in the second\" + CR + \"                             argument.\" + CR + \" -a,--paramNames \u003carg\u003e       Parameter XML names; default names are\" + CR + \"                             param1, param2, etc. Example: -a \\\"pname1\" + CR + \"                             pname2\\\"\" + CR + \" -b,--jdbc \u003carg\u003e             Writes a JDBC binding node file for the given\" + CR + \"                             SQL\" + CR + \" -c,--url \u003carg\u003e              Connection URL\" + CR + \" -d,--driver \u003carg\u003e           JDBC driver class name\" + CR + \" -e,--description \u003carg\u003e      SFMD description. A default description is\" + CR + \"                             used if omited. Example: -e \\\"Runs such and\" + CR + \"                             such\\\"\" + CR + \" -f,--sfmd \u003carg\u003e             Writes a SFMD file for the given SQL\" + CR + \" -g,--printTiming            Prints timing information\" + CR + \" -h,--help                   Prints help and quits\" + CR + \" -i,--interactive            Runs in interactive mode, reading and writing\" + CR + \"                             from the console, \u0027go\u0027 or \u0027/\u0027 sends a\" + CR + \"                             statement\" + CR + \" -j,--node \u003carg\u003e             Writes a JDBC node file for the given SQL\" + CR + \"                             (internal debugging)\" + CR + \" -l,--columnNames \u003carg\u003e      Column XML names; default names column\" + CR + \"                             labels. Example: -l \\\"cname1 cname2\\\"\" + CR + \" -m,--printMetaData          Prints metadata information\" + CR + \" -n,--info                   Prints driver information and properties. If\" + CR + \"                             -c is not specified, all drivers on the\" + CR + \"                             classpath are displayed.\" + CR + \" -o,--paramModes \u003carg\u003e       Parameters modes (1\u003dIN, 2\u003dINOUT, 4\u003dOUT,\" + CR + \"                             0\u003dUnknown). -o and -O are mutually exclusive.\" + CR + \"                             Example for 2 parameters, OUT and IN: -o \\\"4\" + CR + \"                             1\\\"\" + CR + \" -O,--paramModeNames \u003carg\u003e   Parameters mode names (IN, INOUT, OUT,\" + CR + \"                             Unknown). -o and -O are mutually exclusive.\" + CR + \"                             Example for 2 parameters, OUT and IN: -O \\\"OUT\" + CR + \"                             IN\\\"\" + CR + \" -p,--password \u003carg\u003e         The database password for the user specified\" + CR + \"                             with the -u option. You can obfuscate the\" + CR + \"                             password with\" + CR + \"                             org.mortbay.jetty.security.Password, see\" + CR + \"                             http://docs.codehaus.org/display/JETTY/Securi\" + CR + \"                             ng+Passwords\" + CR + \" -s,--sql \u003carg\u003e              Runs SQL or {call stored_procedure(?, ?)} or\" + CR + \"                             {?\u003dcall function(?, ?)}\" + CR + \" -t,--printStack             Prints stack traces on errors\" + CR + \"    --trim \u003carg\u003e             Trims leading and trailing spaces from all\" + CR + \"                             column values. Column XML names can be\" + CR + \"                             optionally specified to set which columns to\" + CR + \"                             trim.\" + CR + \" -u,--user \u003carg\u003e             A database user name\" + CR + \" -w,--outfile \u003carg\u003e          Writes the SQL output to the given file\" + CR + \" -y,--paramTypes \u003carg\u003e       Parameter types from java.sql.Types. -y and\" + CR + \"                             -Y are mutually exclusive. Example: -y \\\"-10\" + CR + \"                             12\\\"\" + CR + \" -Y,--paramTypeNames \u003carg\u003e   Parameter java.sql.Types names. -y and -Y are\" + CR + \"                             mutually exclusive. Example: -Y \\\"CURSOR\" + CR + \"                             VARCHAR\\\"\" + CR;\r\n     assertEquals(expected, sw.toString());\r\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "c67275279176504a6f5fc556cfa247e1df02a580": {
      "type": "Ybodychange",
      "commitMessage": "Minor Improvements: (#57)\n\n* Unused import\r\n* Add final\r\n* License header should be a plain comment",
      "commitDate": "12/28/20 6:44 PM",
      "commitName": "c67275279176504a6f5fc556cfa247e1df02a580",
      "commitAuthor": "Arturo Bernal",
      "commitDateOld": "12/18/19 11:28 PM",
      "commitNameOld": "c12260c05ebcd27558265395df79b8b049534fbd",
      "commitAuthorOld": "Gary Gregory",
      "daysBetweenCommits": 375.8,
      "commitsBetweenForRepo": 49,
      "commitsBetweenForFile": 1,
      "actualSource": "@Test\r\npublic void testPrintHelpLongLines() {\r\n    final String OPT \u003d \"-\";\r\n    final String OPT_COLUMN_NAMES \u003d \"l\";\r\n    final String OPT_CONNECTION \u003d \"c\";\r\n    final String OPT_DESCRIPTION \u003d \"e\";\r\n    final String OPT_DRIVER \u003d \"d\";\r\n    final String OPT_DRIVER_INFO \u003d \"n\";\r\n    final String OPT_FILE_BINDING \u003d \"b\";\r\n    final String OPT_FILE_JDBC \u003d \"j\";\r\n    final String OPT_FILE_SFMD \u003d \"f\";\r\n    final String OPT_HELP \u003d \"h\";\r\n    final String OPT_HELP_ \u003d \"help\";\r\n    final String OPT_INTERACTIVE \u003d \"i\";\r\n    final String OPT_JDBC_TO_SFMD \u003d \"2\";\r\n    final String OPT_JDBC_TO_SFMD_L \u003d \"jdbc2sfmd\";\r\n    final String OPT_METADATA \u003d \"m\";\r\n    final String OPT_PARAM_MODES_INT \u003d \"o\";\r\n    final String OPT_PARAM_MODES_NAME \u003d \"O\";\r\n    final String OPT_PARAM_NAMES \u003d \"a\";\r\n    final String OPT_PARAM_TYPES_INT \u003d \"y\";\r\n    final String OPT_PARAM_TYPES_NAME \u003d \"Y\";\r\n    final String OPT_PASSWORD \u003d \"p\";\r\n    final String OPT_PASSWORD_L \u003d \"password\";\r\n    final String OPT_SQL \u003d \"s\";\r\n    final String OPT_SQL_L \u003d \"sql\";\r\n    final String OPT_SQL_SPLIT_DEFAULT \u003d \"###\";\r\n    final String OPT_SQL_SPLIT_L \u003d \"splitSql\";\r\n    final String OPT_STACK_TRACE \u003d \"t\";\r\n    final String OPT_TIMING \u003d \"g\";\r\n    final String OPT_TRIM_L \u003d \"trim\";\r\n    final String OPT_USER \u003d \"u\";\r\n    final String OPT_WRITE_TO_FILE \u003d \"w\";\r\n    final String _PMODE_IN \u003d \"IN\";\r\n    final String _PMODE_INOUT \u003d \"INOUT\";\r\n    final String _PMODE_OUT \u003d \"OUT\";\r\n    final String _PMODE_UNK \u003d \"Unknown\";\r\n    final String PMODES \u003d _PMODE_IN + \", \" + _PMODE_INOUT + \", \" + _PMODE_OUT + \", \" + _PMODE_UNK;\r\n    final Options commandLineOptions;\r\n    commandLineOptions \u003d new Options();\r\n    commandLineOptions.addOption(OPT_HELP, OPT_HELP_, false, \"Prints help and quits\");\r\n    commandLineOptions.addOption(OPT_DRIVER, \"driver\", true, \"JDBC driver class name\");\r\n    commandLineOptions.addOption(OPT_DRIVER_INFO, \"info\", false, \"Prints driver information and properties. If \" + OPT + OPT_CONNECTION + \" is not specified, all drivers on the classpath are displayed.\");\r\n    commandLineOptions.addOption(OPT_CONNECTION, \"url\", true, \"Connection URL\");\r\n    commandLineOptions.addOption(OPT_USER, \"user\", true, \"A database user name\");\r\n    commandLineOptions.addOption(OPT_PASSWORD, OPT_PASSWORD_L, true, \"The database password for the user specified with the \" + OPT + OPT_USER + \" option. You can obfuscate the password with org.mortbay.jetty.security.Password, see http://docs.codehaus.org/display/JETTY/Securing+Passwords\");\r\n    commandLineOptions.addOption(OPT_SQL, OPT_SQL_L, true, \"Runs SQL or {call stored_procedure(?, ?)} or {?\u003dcall function(?, ?)}\");\r\n    commandLineOptions.addOption(OPT_FILE_SFMD, \"sfmd\", true, \"Writes a SFMD file for the given SQL\");\r\n    commandLineOptions.addOption(OPT_FILE_BINDING, \"jdbc\", true, \"Writes a JDBC binding node file for the given SQL\");\r\n    commandLineOptions.addOption(OPT_FILE_JDBC, \"node\", true, \"Writes a JDBC node file for the given SQL (internal debugging)\");\r\n    commandLineOptions.addOption(OPT_WRITE_TO_FILE, \"outfile\", true, \"Writes the SQL output to the given file\");\r\n    commandLineOptions.addOption(OPT_DESCRIPTION, \"description\", true, \"SFMD description. A default description is used if omited. Example: \" + OPT + OPT_DESCRIPTION + \" \\\"Runs such and such\\\"\");\r\n    commandLineOptions.addOption(OPT_INTERACTIVE, \"interactive\", false, \"Runs in interactive mode, reading and writing from the console, \u0027go\u0027 or \u0027/\u0027 sends a statement\");\r\n    commandLineOptions.addOption(OPT_TIMING, \"printTiming\", false, \"Prints timing information\");\r\n    commandLineOptions.addOption(OPT_METADATA, \"printMetaData\", false, \"Prints metadata information\");\r\n    commandLineOptions.addOption(OPT_STACK_TRACE, \"printStack\", false, \"Prints stack traces on errors\");\r\n    Option option \u003d new Option(OPT_COLUMN_NAMES, \"columnNames\", true, \"Column XML names; default names column labels. Example: \" + OPT + OPT_COLUMN_NAMES + \" \\\"cname1 cname2\\\"\");\r\n    commandLineOptions.addOption(option);\r\n    option \u003d new Option(OPT_PARAM_NAMES, \"paramNames\", true, \"Parameter XML names; default names are param1, param2, etc. Example: \" + OPT + OPT_PARAM_NAMES + \" \\\"pname1 pname2\\\"\");\r\n    commandLineOptions.addOption(option);\r\n    final OptionGroup pOutTypesOptionGroup \u003d new OptionGroup();\r\n    final String pOutTypesOptionGroupDoc \u003d OPT + OPT_PARAM_TYPES_INT + \" and \" + OPT + OPT_PARAM_TYPES_NAME + \" are mutually exclusive.\";\r\n    final String typesClassName \u003d Types.class.getName();\r\n    option \u003d new Option(OPT_PARAM_TYPES_INT, \"paramTypes\", true, \"Parameter types from \" + typesClassName + \". \" + pOutTypesOptionGroupDoc + \" Example: \" + OPT + OPT_PARAM_TYPES_INT + \" \\\"-10 12\\\"\");\r\n    commandLineOptions.addOption(option);\r\n    option \u003d new Option(OPT_PARAM_TYPES_NAME, \"paramTypeNames\", true, \"Parameter \" + typesClassName + \" names. \" + pOutTypesOptionGroupDoc + \" Example: \" + OPT + OPT_PARAM_TYPES_NAME + \" \\\"CURSOR VARCHAR\\\"\");\r\n    commandLineOptions.addOption(option);\r\n    commandLineOptions.addOptionGroup(pOutTypesOptionGroup);\r\n    final OptionGroup modesOptionGroup \u003d new OptionGroup();\r\n    final String modesOptionGroupDoc \u003d OPT + OPT_PARAM_MODES_INT + \" and \" + OPT + OPT_PARAM_MODES_NAME + \" are mutually exclusive.\";\r\n    option \u003d new Option(OPT_PARAM_MODES_INT, \"paramModes\", true, \"Parameters modes (\" + ParameterMetaData.parameterModeIn + \"\u003dIN, \" + ParameterMetaData.parameterModeInOut + \"\u003dINOUT, \" + ParameterMetaData.parameterModeOut + \"\u003dOUT, \" + ParameterMetaData.parameterModeUnknown + \"\u003dUnknown\" + \"). \" + modesOptionGroupDoc + \" Example for 2 parameters, OUT and IN: \" + OPT + OPT_PARAM_MODES_INT + \" \\\"\" + ParameterMetaData.parameterModeOut + \" \" + ParameterMetaData.parameterModeIn + \"\\\"\");\r\n    modesOptionGroup.addOption(option);\r\n    option \u003d new Option(OPT_PARAM_MODES_NAME, \"paramModeNames\", true, \"Parameters mode names (\" + PMODES + \"). \" + modesOptionGroupDoc + \" Example for 2 parameters, OUT and IN: \" + OPT + OPT_PARAM_MODES_NAME + \" \\\"\" + _PMODE_OUT + \" \" + _PMODE_IN + \"\\\"\");\r\n    modesOptionGroup.addOption(option);\r\n    commandLineOptions.addOptionGroup(modesOptionGroup);\r\n    option \u003d new Option(null, OPT_TRIM_L, true, \"Trims leading and trailing spaces from all column values. Column XML names can be optionally specified to set which columns to trim.\");\r\n    option.setOptionalArg(true);\r\n    commandLineOptions.addOption(option);\r\n    option \u003d new Option(OPT_JDBC_TO_SFMD, OPT_JDBC_TO_SFMD_L, true, \"Converts the JDBC file in the first argument to an SMFD file specified in the second argument.\");\r\n    option.setArgs(2);\r\n    commandLineOptions.addOption(option);\r\n    formatter.printHelp(new PrintWriter(sw), HelpFormatter.DEFAULT_WIDTH, this.getClass().getName(), null, commandLineOptions, HelpFormatter.DEFAULT_LEFT_PAD, HelpFormatter.DEFAULT_DESC_PAD, null);\r\n    final String expected \u003d \"usage: org.apache.commons.cli.bug.BugCLI162Test\" + CR + \" -2,--jdbc2sfmd \u003carg\u003e        Converts the JDBC file in the first argument\" + CR + \"                             to an SMFD file specified in the second\" + CR + \"                             argument.\" + CR + \" -a,--paramNames \u003carg\u003e       Parameter XML names; default names are\" + CR + \"                             param1, param2, etc. Example: -a \\\"pname1\" + CR + \"                             pname2\\\"\" + CR + \" -b,--jdbc \u003carg\u003e             Writes a JDBC binding node file for the given\" + CR + \"                             SQL\" + CR + \" -c,--url \u003carg\u003e              Connection URL\" + CR + \" -d,--driver \u003carg\u003e           JDBC driver class name\" + CR + \" -e,--description \u003carg\u003e      SFMD description. A default description is\" + CR + \"                             used if omited. Example: -e \\\"Runs such and\" + CR + \"                             such\\\"\" + CR + \" -f,--sfmd \u003carg\u003e             Writes a SFMD file for the given SQL\" + CR + \" -g,--printTiming            Prints timing information\" + CR + \" -h,--help                   Prints help and quits\" + CR + \" -i,--interactive            Runs in interactive mode, reading and writing\" + CR + \"                             from the console, \u0027go\u0027 or \u0027/\u0027 sends a\" + CR + \"                             statement\" + CR + \" -j,--node \u003carg\u003e             Writes a JDBC node file for the given SQL\" + CR + \"                             (internal debugging)\" + CR + \" -l,--columnNames \u003carg\u003e      Column XML names; default names column\" + CR + \"                             labels. Example: -l \\\"cname1 cname2\\\"\" + CR + \" -m,--printMetaData          Prints metadata information\" + CR + \" -n,--info                   Prints driver information and properties. If\" + CR + \"                             -c is not specified, all drivers on the\" + CR + \"                             classpath are displayed.\" + CR + \" -o,--paramModes \u003carg\u003e       Parameters modes (1\u003dIN, 2\u003dINOUT, 4\u003dOUT,\" + CR + \"                             0\u003dUnknown). -o and -O are mutually exclusive.\" + CR + \"                             Example for 2 parameters, OUT and IN: -o \\\"4\" + CR + \"                             1\\\"\" + CR + \" -O,--paramModeNames \u003carg\u003e   Parameters mode names (IN, INOUT, OUT,\" + CR + \"                             Unknown). -o and -O are mutually exclusive.\" + CR + \"                             Example for 2 parameters, OUT and IN: -O \\\"OUT\" + CR + \"                             IN\\\"\" + CR + \" -p,--password \u003carg\u003e         The database password for the user specified\" + CR + \"                             with the -u option. You can obfuscate the\" + CR + \"                             password with\" + CR + \"                             org.mortbay.jetty.security.Password, see\" + CR + \"                             http://docs.codehaus.org/display/JETTY/Securi\" + CR + \"                             ng+Passwords\" + CR + \" -s,--sql \u003carg\u003e              Runs SQL or {call stored_procedure(?, ?)} or\" + CR + \"                             {?\u003dcall function(?, ?)}\" + CR + \" -t,--printStack             Prints stack traces on errors\" + CR + \"    --trim \u003carg\u003e             Trims leading and trailing spaces from all\" + CR + \"                             column values. Column XML names can be\" + CR + \"                             optionally specified to set which columns to\" + CR + \"                             trim.\" + CR + \" -u,--user \u003carg\u003e             A database user name\" + CR + \" -w,--outfile \u003carg\u003e          Writes the SQL output to the given file\" + CR + \" -y,--paramTypes \u003carg\u003e       Parameter types from java.sql.Types. -y and\" + CR + \"                             -Y are mutually exclusive. Example: -y \\\"-10\" + CR + \"                             12\\\"\" + CR + \" -Y,--paramTypeNames \u003carg\u003e   Parameter java.sql.Types names. -y and -Y are\" + CR + \"                             mutually exclusive. Example: -Y \\\"CURSOR\" + CR + \"                             VARCHAR\\\"\" + CR;\r\n    assertEquals(expected, sw.toString());\r\n}",
      "path": "src/test/java/org/apache/commons/cli/bug/BugCLI162Test.java",
      "functionStartLine": 67,
      "functionName": "testPrintHelpLongLines",
      "functionAnnotation": "@Test",
      "functionDoc": "",
      "diff": "@@ -1,85 +1,85 @@\n @Test\r\n public void testPrintHelpLongLines() {\r\n     final String OPT \u003d \"-\";\r\n     final String OPT_COLUMN_NAMES \u003d \"l\";\r\n     final String OPT_CONNECTION \u003d \"c\";\r\n     final String OPT_DESCRIPTION \u003d \"e\";\r\n     final String OPT_DRIVER \u003d \"d\";\r\n     final String OPT_DRIVER_INFO \u003d \"n\";\r\n     final String OPT_FILE_BINDING \u003d \"b\";\r\n     final String OPT_FILE_JDBC \u003d \"j\";\r\n     final String OPT_FILE_SFMD \u003d \"f\";\r\n     final String OPT_HELP \u003d \"h\";\r\n     final String OPT_HELP_ \u003d \"help\";\r\n     final String OPT_INTERACTIVE \u003d \"i\";\r\n     final String OPT_JDBC_TO_SFMD \u003d \"2\";\r\n     final String OPT_JDBC_TO_SFMD_L \u003d \"jdbc2sfmd\";\r\n     final String OPT_METADATA \u003d \"m\";\r\n     final String OPT_PARAM_MODES_INT \u003d \"o\";\r\n     final String OPT_PARAM_MODES_NAME \u003d \"O\";\r\n     final String OPT_PARAM_NAMES \u003d \"a\";\r\n     final String OPT_PARAM_TYPES_INT \u003d \"y\";\r\n     final String OPT_PARAM_TYPES_NAME \u003d \"Y\";\r\n     final String OPT_PASSWORD \u003d \"p\";\r\n     final String OPT_PASSWORD_L \u003d \"password\";\r\n     final String OPT_SQL \u003d \"s\";\r\n     final String OPT_SQL_L \u003d \"sql\";\r\n     final String OPT_SQL_SPLIT_DEFAULT \u003d \"###\";\r\n     final String OPT_SQL_SPLIT_L \u003d \"splitSql\";\r\n     final String OPT_STACK_TRACE \u003d \"t\";\r\n     final String OPT_TIMING \u003d \"g\";\r\n     final String OPT_TRIM_L \u003d \"trim\";\r\n     final String OPT_USER \u003d \"u\";\r\n     final String OPT_WRITE_TO_FILE \u003d \"w\";\r\n     final String _PMODE_IN \u003d \"IN\";\r\n     final String _PMODE_INOUT \u003d \"INOUT\";\r\n     final String _PMODE_OUT \u003d \"OUT\";\r\n     final String _PMODE_UNK \u003d \"Unknown\";\r\n     final String PMODES \u003d _PMODE_IN + \", \" + _PMODE_INOUT + \", \" + _PMODE_OUT + \", \" + _PMODE_UNK;\r\n-    Options commandLineOptions;\r\n+    final Options commandLineOptions;\r\n     commandLineOptions \u003d new Options();\r\n     commandLineOptions.addOption(OPT_HELP, OPT_HELP_, false, \"Prints help and quits\");\r\n     commandLineOptions.addOption(OPT_DRIVER, \"driver\", true, \"JDBC driver class name\");\r\n     commandLineOptions.addOption(OPT_DRIVER_INFO, \"info\", false, \"Prints driver information and properties. If \" + OPT + OPT_CONNECTION + \" is not specified, all drivers on the classpath are displayed.\");\r\n     commandLineOptions.addOption(OPT_CONNECTION, \"url\", true, \"Connection URL\");\r\n     commandLineOptions.addOption(OPT_USER, \"user\", true, \"A database user name\");\r\n     commandLineOptions.addOption(OPT_PASSWORD, OPT_PASSWORD_L, true, \"The database password for the user specified with the \" + OPT + OPT_USER + \" option. You can obfuscate the password with org.mortbay.jetty.security.Password, see http://docs.codehaus.org/display/JETTY/Securing+Passwords\");\r\n     commandLineOptions.addOption(OPT_SQL, OPT_SQL_L, true, \"Runs SQL or {call stored_procedure(?, ?)} or {?\u003dcall function(?, ?)}\");\r\n     commandLineOptions.addOption(OPT_FILE_SFMD, \"sfmd\", true, \"Writes a SFMD file for the given SQL\");\r\n     commandLineOptions.addOption(OPT_FILE_BINDING, \"jdbc\", true, \"Writes a JDBC binding node file for the given SQL\");\r\n     commandLineOptions.addOption(OPT_FILE_JDBC, \"node\", true, \"Writes a JDBC node file for the given SQL (internal debugging)\");\r\n     commandLineOptions.addOption(OPT_WRITE_TO_FILE, \"outfile\", true, \"Writes the SQL output to the given file\");\r\n     commandLineOptions.addOption(OPT_DESCRIPTION, \"description\", true, \"SFMD description. A default description is used if omited. Example: \" + OPT + OPT_DESCRIPTION + \" \\\"Runs such and such\\\"\");\r\n     commandLineOptions.addOption(OPT_INTERACTIVE, \"interactive\", false, \"Runs in interactive mode, reading and writing from the console, \u0027go\u0027 or \u0027/\u0027 sends a statement\");\r\n     commandLineOptions.addOption(OPT_TIMING, \"printTiming\", false, \"Prints timing information\");\r\n     commandLineOptions.addOption(OPT_METADATA, \"printMetaData\", false, \"Prints metadata information\");\r\n     commandLineOptions.addOption(OPT_STACK_TRACE, \"printStack\", false, \"Prints stack traces on errors\");\r\n     Option option \u003d new Option(OPT_COLUMN_NAMES, \"columnNames\", true, \"Column XML names; default names column labels. Example: \" + OPT + OPT_COLUMN_NAMES + \" \\\"cname1 cname2\\\"\");\r\n     commandLineOptions.addOption(option);\r\n     option \u003d new Option(OPT_PARAM_NAMES, \"paramNames\", true, \"Parameter XML names; default names are param1, param2, etc. Example: \" + OPT + OPT_PARAM_NAMES + \" \\\"pname1 pname2\\\"\");\r\n     commandLineOptions.addOption(option);\r\n     final OptionGroup pOutTypesOptionGroup \u003d new OptionGroup();\r\n     final String pOutTypesOptionGroupDoc \u003d OPT + OPT_PARAM_TYPES_INT + \" and \" + OPT + OPT_PARAM_TYPES_NAME + \" are mutually exclusive.\";\r\n     final String typesClassName \u003d Types.class.getName();\r\n     option \u003d new Option(OPT_PARAM_TYPES_INT, \"paramTypes\", true, \"Parameter types from \" + typesClassName + \". \" + pOutTypesOptionGroupDoc + \" Example: \" + OPT + OPT_PARAM_TYPES_INT + \" \\\"-10 12\\\"\");\r\n     commandLineOptions.addOption(option);\r\n     option \u003d new Option(OPT_PARAM_TYPES_NAME, \"paramTypeNames\", true, \"Parameter \" + typesClassName + \" names. \" + pOutTypesOptionGroupDoc + \" Example: \" + OPT + OPT_PARAM_TYPES_NAME + \" \\\"CURSOR VARCHAR\\\"\");\r\n     commandLineOptions.addOption(option);\r\n     commandLineOptions.addOptionGroup(pOutTypesOptionGroup);\r\n     final OptionGroup modesOptionGroup \u003d new OptionGroup();\r\n     final String modesOptionGroupDoc \u003d OPT + OPT_PARAM_MODES_INT + \" and \" + OPT + OPT_PARAM_MODES_NAME + \" are mutually exclusive.\";\r\n     option \u003d new Option(OPT_PARAM_MODES_INT, \"paramModes\", true, \"Parameters modes (\" + ParameterMetaData.parameterModeIn + \"\u003dIN, \" + ParameterMetaData.parameterModeInOut + \"\u003dINOUT, \" + ParameterMetaData.parameterModeOut + \"\u003dOUT, \" + ParameterMetaData.parameterModeUnknown + \"\u003dUnknown\" + \"). \" + modesOptionGroupDoc + \" Example for 2 parameters, OUT and IN: \" + OPT + OPT_PARAM_MODES_INT + \" \\\"\" + ParameterMetaData.parameterModeOut + \" \" + ParameterMetaData.parameterModeIn + \"\\\"\");\r\n     modesOptionGroup.addOption(option);\r\n     option \u003d new Option(OPT_PARAM_MODES_NAME, \"paramModeNames\", true, \"Parameters mode names (\" + PMODES + \"). \" + modesOptionGroupDoc + \" Example for 2 parameters, OUT and IN: \" + OPT + OPT_PARAM_MODES_NAME + \" \\\"\" + _PMODE_OUT + \" \" + _PMODE_IN + \"\\\"\");\r\n     modesOptionGroup.addOption(option);\r\n     commandLineOptions.addOptionGroup(modesOptionGroup);\r\n     option \u003d new Option(null, OPT_TRIM_L, true, \"Trims leading and trailing spaces from all column values. Column XML names can be optionally specified to set which columns to trim.\");\r\n     option.setOptionalArg(true);\r\n     commandLineOptions.addOption(option);\r\n     option \u003d new Option(OPT_JDBC_TO_SFMD, OPT_JDBC_TO_SFMD_L, true, \"Converts the JDBC file in the first argument to an SMFD file specified in the second argument.\");\r\n     option.setArgs(2);\r\n     commandLineOptions.addOption(option);\r\n     formatter.printHelp(new PrintWriter(sw), HelpFormatter.DEFAULT_WIDTH, this.getClass().getName(), null, commandLineOptions, HelpFormatter.DEFAULT_LEFT_PAD, HelpFormatter.DEFAULT_DESC_PAD, null);\r\n     final String expected \u003d \"usage: org.apache.commons.cli.bug.BugCLI162Test\" + CR + \" -2,--jdbc2sfmd \u003carg\u003e        Converts the JDBC file in the first argument\" + CR + \"                             to an SMFD file specified in the second\" + CR + \"                             argument.\" + CR + \" -a,--paramNames \u003carg\u003e       Parameter XML names; default names are\" + CR + \"                             param1, param2, etc. Example: -a \\\"pname1\" + CR + \"                             pname2\\\"\" + CR + \" -b,--jdbc \u003carg\u003e             Writes a JDBC binding node file for the given\" + CR + \"                             SQL\" + CR + \" -c,--url \u003carg\u003e              Connection URL\" + CR + \" -d,--driver \u003carg\u003e           JDBC driver class name\" + CR + \" -e,--description \u003carg\u003e      SFMD description. A default description is\" + CR + \"                             used if omited. Example: -e \\\"Runs such and\" + CR + \"                             such\\\"\" + CR + \" -f,--sfmd \u003carg\u003e             Writes a SFMD file for the given SQL\" + CR + \" -g,--printTiming            Prints timing information\" + CR + \" -h,--help                   Prints help and quits\" + CR + \" -i,--interactive            Runs in interactive mode, reading and writing\" + CR + \"                             from the console, \u0027go\u0027 or \u0027/\u0027 sends a\" + CR + \"                             statement\" + CR + \" -j,--node \u003carg\u003e             Writes a JDBC node file for the given SQL\" + CR + \"                             (internal debugging)\" + CR + \" -l,--columnNames \u003carg\u003e      Column XML names; default names column\" + CR + \"                             labels. Example: -l \\\"cname1 cname2\\\"\" + CR + \" -m,--printMetaData          Prints metadata information\" + CR + \" -n,--info                   Prints driver information and properties. If\" + CR + \"                             -c is not specified, all drivers on the\" + CR + \"                             classpath are displayed.\" + CR + \" -o,--paramModes \u003carg\u003e       Parameters modes (1\u003dIN, 2\u003dINOUT, 4\u003dOUT,\" + CR + \"                             0\u003dUnknown). -o and -O are mutually exclusive.\" + CR + \"                             Example for 2 parameters, OUT and IN: -o \\\"4\" + CR + \"                             1\\\"\" + CR + \" -O,--paramModeNames \u003carg\u003e   Parameters mode names (IN, INOUT, OUT,\" + CR + \"                             Unknown). -o and -O are mutually exclusive.\" + CR + \"                             Example for 2 parameters, OUT and IN: -O \\\"OUT\" + CR + \"                             IN\\\"\" + CR + \" -p,--password \u003carg\u003e         The database password for the user specified\" + CR + \"                             with the -u option. You can obfuscate the\" + CR + \"                             password with\" + CR + \"                             org.mortbay.jetty.security.Password, see\" + CR + \"                             http://docs.codehaus.org/display/JETTY/Securi\" + CR + \"                             ng+Passwords\" + CR + \" -s,--sql \u003carg\u003e              Runs SQL or {call stored_procedure(?, ?)} or\" + CR + \"                             {?\u003dcall function(?, ?)}\" + CR + \" -t,--printStack             Prints stack traces on errors\" + CR + \"    --trim \u003carg\u003e             Trims leading and trailing spaces from all\" + CR + \"                             column values. Column XML names can be\" + CR + \"                             optionally specified to set which columns to\" + CR + \"                             trim.\" + CR + \" -u,--user \u003carg\u003e             A database user name\" + CR + \" -w,--outfile \u003carg\u003e          Writes the SQL output to the given file\" + CR + \" -y,--paramTypes \u003carg\u003e       Parameter types from java.sql.Types. -y and\" + CR + \"                             -Y are mutually exclusive. Example: -y \\\"-10\" + CR + \"                             12\\\"\" + CR + \" -Y,--paramTypeNames \u003carg\u003e   Parameter java.sql.Types names. -y and -Y are\" + CR + \"                             mutually exclusive. Example: -Y \\\"CURSOR\" + CR + \"                             VARCHAR\\\"\" + CR;\r\n     assertEquals(expected, sw.toString());\r\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "357a8b0b8f1090db29e0d541a9419f570a78457b": {
      "type": "Ybodychange",
      "commitMessage": "Add final modifier to local variables.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/cli/trunk@1797673 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "6/5/17 7:37 PM",
      "commitName": "357a8b0b8f1090db29e0d541a9419f570a78457b",
      "commitAuthor": "Gary D. Gregory",
      "commitDateOld": "3/29/15 12:34 PM",
      "commitNameOld": "b207a2bcef8e29df436bc393c3569947680e93e6",
      "commitAuthorOld": "Benedikt Ritter",
      "daysBetweenCommits": 799.29,
      "commitsBetweenForRepo": 72,
      "commitsBetweenForFile": 1,
      "actualSource": "@Test\r\npublic void testPrintHelpLongLines() {\r\n    final String OPT \u003d \"-\";\r\n    final String OPT_COLUMN_NAMES \u003d \"l\";\r\n    final String OPT_CONNECTION \u003d \"c\";\r\n    final String OPT_DESCRIPTION \u003d \"e\";\r\n    final String OPT_DRIVER \u003d \"d\";\r\n    final String OPT_DRIVER_INFO \u003d \"n\";\r\n    final String OPT_FILE_BINDING \u003d \"b\";\r\n    final String OPT_FILE_JDBC \u003d \"j\";\r\n    final String OPT_FILE_SFMD \u003d \"f\";\r\n    final String OPT_HELP \u003d \"h\";\r\n    final String OPT_HELP_ \u003d \"help\";\r\n    final String OPT_INTERACTIVE \u003d \"i\";\r\n    final String OPT_JDBC_TO_SFMD \u003d \"2\";\r\n    final String OPT_JDBC_TO_SFMD_L \u003d \"jdbc2sfmd\";\r\n    final String OPT_METADATA \u003d \"m\";\r\n    final String OPT_PARAM_MODES_INT \u003d \"o\";\r\n    final String OPT_PARAM_MODES_NAME \u003d \"O\";\r\n    final String OPT_PARAM_NAMES \u003d \"a\";\r\n    final String OPT_PARAM_TYPES_INT \u003d \"y\";\r\n    final String OPT_PARAM_TYPES_NAME \u003d \"Y\";\r\n    final String OPT_PASSWORD \u003d \"p\";\r\n    final String OPT_PASSWORD_L \u003d \"password\";\r\n    final String OPT_SQL \u003d \"s\";\r\n    final String OPT_SQL_L \u003d \"sql\";\r\n    final String OPT_SQL_SPLIT_DEFAULT \u003d \"###\";\r\n    final String OPT_SQL_SPLIT_L \u003d \"splitSql\";\r\n    final String OPT_STACK_TRACE \u003d \"t\";\r\n    final String OPT_TIMING \u003d \"g\";\r\n    final String OPT_TRIM_L \u003d \"trim\";\r\n    final String OPT_USER \u003d \"u\";\r\n    final String OPT_WRITE_TO_FILE \u003d \"w\";\r\n    final String _PMODE_IN \u003d \"IN\";\r\n    final String _PMODE_INOUT \u003d \"INOUT\";\r\n    final String _PMODE_OUT \u003d \"OUT\";\r\n    final String _PMODE_UNK \u003d \"Unknown\";\r\n    final String PMODES \u003d _PMODE_IN + \", \" + _PMODE_INOUT + \", \" + _PMODE_OUT + \", \" + _PMODE_UNK;\r\n    Options commandLineOptions;\r\n    commandLineOptions \u003d new Options();\r\n    commandLineOptions.addOption(OPT_HELP, OPT_HELP_, false, \"Prints help and quits\");\r\n    commandLineOptions.addOption(OPT_DRIVER, \"driver\", true, \"JDBC driver class name\");\r\n    commandLineOptions.addOption(OPT_DRIVER_INFO, \"info\", false, \"Prints driver information and properties. If \" + OPT + OPT_CONNECTION + \" is not specified, all drivers on the classpath are displayed.\");\r\n    commandLineOptions.addOption(OPT_CONNECTION, \"url\", true, \"Connection URL\");\r\n    commandLineOptions.addOption(OPT_USER, \"user\", true, \"A database user name\");\r\n    commandLineOptions.addOption(OPT_PASSWORD, OPT_PASSWORD_L, true, \"The database password for the user specified with the \" + OPT + OPT_USER + \" option. You can obfuscate the password with org.mortbay.jetty.security.Password, see http://docs.codehaus.org/display/JETTY/Securing+Passwords\");\r\n    commandLineOptions.addOption(OPT_SQL, OPT_SQL_L, true, \"Runs SQL or {call stored_procedure(?, ?)} or {?\u003dcall function(?, ?)}\");\r\n    commandLineOptions.addOption(OPT_FILE_SFMD, \"sfmd\", true, \"Writes a SFMD file for the given SQL\");\r\n    commandLineOptions.addOption(OPT_FILE_BINDING, \"jdbc\", true, \"Writes a JDBC binding node file for the given SQL\");\r\n    commandLineOptions.addOption(OPT_FILE_JDBC, \"node\", true, \"Writes a JDBC node file for the given SQL (internal debugging)\");\r\n    commandLineOptions.addOption(OPT_WRITE_TO_FILE, \"outfile\", true, \"Writes the SQL output to the given file\");\r\n    commandLineOptions.addOption(OPT_DESCRIPTION, \"description\", true, \"SFMD description. A default description is used if omited. Example: \" + OPT + OPT_DESCRIPTION + \" \\\"Runs such and such\\\"\");\r\n    commandLineOptions.addOption(OPT_INTERACTIVE, \"interactive\", false, \"Runs in interactive mode, reading and writing from the console, \u0027go\u0027 or \u0027/\u0027 sends a statement\");\r\n    commandLineOptions.addOption(OPT_TIMING, \"printTiming\", false, \"Prints timing information\");\r\n    commandLineOptions.addOption(OPT_METADATA, \"printMetaData\", false, \"Prints metadata information\");\r\n    commandLineOptions.addOption(OPT_STACK_TRACE, \"printStack\", false, \"Prints stack traces on errors\");\r\n    Option option \u003d new Option(OPT_COLUMN_NAMES, \"columnNames\", true, \"Column XML names; default names column labels. Example: \" + OPT + OPT_COLUMN_NAMES + \" \\\"cname1 cname2\\\"\");\r\n    commandLineOptions.addOption(option);\r\n    option \u003d new Option(OPT_PARAM_NAMES, \"paramNames\", true, \"Parameter XML names; default names are param1, param2, etc. Example: \" + OPT + OPT_PARAM_NAMES + \" \\\"pname1 pname2\\\"\");\r\n    commandLineOptions.addOption(option);\r\n    final OptionGroup pOutTypesOptionGroup \u003d new OptionGroup();\r\n    final String pOutTypesOptionGroupDoc \u003d OPT + OPT_PARAM_TYPES_INT + \" and \" + OPT + OPT_PARAM_TYPES_NAME + \" are mutually exclusive.\";\r\n    final String typesClassName \u003d Types.class.getName();\r\n    option \u003d new Option(OPT_PARAM_TYPES_INT, \"paramTypes\", true, \"Parameter types from \" + typesClassName + \". \" + pOutTypesOptionGroupDoc + \" Example: \" + OPT + OPT_PARAM_TYPES_INT + \" \\\"-10 12\\\"\");\r\n    commandLineOptions.addOption(option);\r\n    option \u003d new Option(OPT_PARAM_TYPES_NAME, \"paramTypeNames\", true, \"Parameter \" + typesClassName + \" names. \" + pOutTypesOptionGroupDoc + \" Example: \" + OPT + OPT_PARAM_TYPES_NAME + \" \\\"CURSOR VARCHAR\\\"\");\r\n    commandLineOptions.addOption(option);\r\n    commandLineOptions.addOptionGroup(pOutTypesOptionGroup);\r\n    final OptionGroup modesOptionGroup \u003d new OptionGroup();\r\n    final String modesOptionGroupDoc \u003d OPT + OPT_PARAM_MODES_INT + \" and \" + OPT + OPT_PARAM_MODES_NAME + \" are mutually exclusive.\";\r\n    option \u003d new Option(OPT_PARAM_MODES_INT, \"paramModes\", true, \"Parameters modes (\" + ParameterMetaData.parameterModeIn + \"\u003dIN, \" + ParameterMetaData.parameterModeInOut + \"\u003dINOUT, \" + ParameterMetaData.parameterModeOut + \"\u003dOUT, \" + ParameterMetaData.parameterModeUnknown + \"\u003dUnknown\" + \"). \" + modesOptionGroupDoc + \" Example for 2 parameters, OUT and IN: \" + OPT + OPT_PARAM_MODES_INT + \" \\\"\" + ParameterMetaData.parameterModeOut + \" \" + ParameterMetaData.parameterModeIn + \"\\\"\");\r\n    modesOptionGroup.addOption(option);\r\n    option \u003d new Option(OPT_PARAM_MODES_NAME, \"paramModeNames\", true, \"Parameters mode names (\" + PMODES + \"). \" + modesOptionGroupDoc + \" Example for 2 parameters, OUT and IN: \" + OPT + OPT_PARAM_MODES_NAME + \" \\\"\" + _PMODE_OUT + \" \" + _PMODE_IN + \"\\\"\");\r\n    modesOptionGroup.addOption(option);\r\n    commandLineOptions.addOptionGroup(modesOptionGroup);\r\n    option \u003d new Option(null, OPT_TRIM_L, true, \"Trims leading and trailing spaces from all column values. Column XML names can be optionally specified to set which columns to trim.\");\r\n    option.setOptionalArg(true);\r\n    commandLineOptions.addOption(option);\r\n    option \u003d new Option(OPT_JDBC_TO_SFMD, OPT_JDBC_TO_SFMD_L, true, \"Converts the JDBC file in the first argument to an SMFD file specified in the second argument.\");\r\n    option.setArgs(2);\r\n    commandLineOptions.addOption(option);\r\n    formatter.printHelp(new PrintWriter(sw), HelpFormatter.DEFAULT_WIDTH, this.getClass().getName(), null, commandLineOptions, HelpFormatter.DEFAULT_LEFT_PAD, HelpFormatter.DEFAULT_DESC_PAD, null);\r\n    final String expected \u003d \"usage: org.apache.commons.cli.bug.BugCLI162Test\" + CR + \" -2,--jdbc2sfmd \u003carg\u003e        Converts the JDBC file in the first argument\" + CR + \"                             to an SMFD file specified in the second\" + CR + \"                             argument.\" + CR + \" -a,--paramNames \u003carg\u003e       Parameter XML names; default names are\" + CR + \"                             param1, param2, etc. Example: -a \\\"pname1\" + CR + \"                             pname2\\\"\" + CR + \" -b,--jdbc \u003carg\u003e             Writes a JDBC binding node file for the given\" + CR + \"                             SQL\" + CR + \" -c,--url \u003carg\u003e              Connection URL\" + CR + \" -d,--driver \u003carg\u003e           JDBC driver class name\" + CR + \" -e,--description \u003carg\u003e      SFMD description. A default description is\" + CR + \"                             used if omited. Example: -e \\\"Runs such and\" + CR + \"                             such\\\"\" + CR + \" -f,--sfmd \u003carg\u003e             Writes a SFMD file for the given SQL\" + CR + \" -g,--printTiming            Prints timing information\" + CR + \" -h,--help                   Prints help and quits\" + CR + \" -i,--interactive            Runs in interactive mode, reading and writing\" + CR + \"                             from the console, \u0027go\u0027 or \u0027/\u0027 sends a\" + CR + \"                             statement\" + CR + \" -j,--node \u003carg\u003e             Writes a JDBC node file for the given SQL\" + CR + \"                             (internal debugging)\" + CR + \" -l,--columnNames \u003carg\u003e      Column XML names; default names column\" + CR + \"                             labels. Example: -l \\\"cname1 cname2\\\"\" + CR + \" -m,--printMetaData          Prints metadata information\" + CR + \" -n,--info                   Prints driver information and properties. If\" + CR + \"                             -c is not specified, all drivers on the\" + CR + \"                             classpath are displayed.\" + CR + \" -o,--paramModes \u003carg\u003e       Parameters modes (1\u003dIN, 2\u003dINOUT, 4\u003dOUT,\" + CR + \"                             0\u003dUnknown). -o and -O are mutually exclusive.\" + CR + \"                             Example for 2 parameters, OUT and IN: -o \\\"4\" + CR + \"                             1\\\"\" + CR + \" -O,--paramModeNames \u003carg\u003e   Parameters mode names (IN, INOUT, OUT,\" + CR + \"                             Unknown). -o and -O are mutually exclusive.\" + CR + \"                             Example for 2 parameters, OUT and IN: -O \\\"OUT\" + CR + \"                             IN\\\"\" + CR + \" -p,--password \u003carg\u003e         The database password for the user specified\" + CR + \"                             with the -u option. You can obfuscate the\" + CR + \"                             password with\" + CR + \"                             org.mortbay.jetty.security.Password, see\" + CR + \"                             http://docs.codehaus.org/display/JETTY/Securi\" + CR + \"                             ng+Passwords\" + CR + \" -s,--sql \u003carg\u003e              Runs SQL or {call stored_procedure(?, ?)} or\" + CR + \"                             {?\u003dcall function(?, ?)}\" + CR + \" -t,--printStack             Prints stack traces on errors\" + CR + \"    --trim \u003carg\u003e             Trims leading and trailing spaces from all\" + CR + \"                             column values. Column XML names can be\" + CR + \"                             optionally specified to set which columns to\" + CR + \"                             trim.\" + CR + \" -u,--user \u003carg\u003e             A database user name\" + CR + \" -w,--outfile \u003carg\u003e          Writes the SQL output to the given file\" + CR + \" -y,--paramTypes \u003carg\u003e       Parameter types from java.sql.Types. -y and\" + CR + \"                             -Y are mutually exclusive. Example: -y \\\"-10\" + CR + \"                             12\\\"\" + CR + \" -Y,--paramTypeNames \u003carg\u003e   Parameter java.sql.Types names. -y and -Y are\" + CR + \"                             mutually exclusive. Example: -Y \\\"CURSOR\" + CR + \"                             VARCHAR\\\"\" + CR;\r\n    assertEquals(expected, sw.toString());\r\n}",
      "path": "src/test/java/org/apache/commons/cli/bug/BugCLI162Test.java",
      "functionStartLine": 67,
      "functionName": "testPrintHelpLongLines",
      "functionAnnotation": "@Test",
      "functionDoc": "",
      "diff": "@@ -1,85 +1,85 @@\n @Test\r\n public void testPrintHelpLongLines() {\r\n     final String OPT \u003d \"-\";\r\n     final String OPT_COLUMN_NAMES \u003d \"l\";\r\n     final String OPT_CONNECTION \u003d \"c\";\r\n     final String OPT_DESCRIPTION \u003d \"e\";\r\n     final String OPT_DRIVER \u003d \"d\";\r\n     final String OPT_DRIVER_INFO \u003d \"n\";\r\n     final String OPT_FILE_BINDING \u003d \"b\";\r\n     final String OPT_FILE_JDBC \u003d \"j\";\r\n     final String OPT_FILE_SFMD \u003d \"f\";\r\n     final String OPT_HELP \u003d \"h\";\r\n     final String OPT_HELP_ \u003d \"help\";\r\n     final String OPT_INTERACTIVE \u003d \"i\";\r\n     final String OPT_JDBC_TO_SFMD \u003d \"2\";\r\n     final String OPT_JDBC_TO_SFMD_L \u003d \"jdbc2sfmd\";\r\n     final String OPT_METADATA \u003d \"m\";\r\n     final String OPT_PARAM_MODES_INT \u003d \"o\";\r\n     final String OPT_PARAM_MODES_NAME \u003d \"O\";\r\n     final String OPT_PARAM_NAMES \u003d \"a\";\r\n     final String OPT_PARAM_TYPES_INT \u003d \"y\";\r\n     final String OPT_PARAM_TYPES_NAME \u003d \"Y\";\r\n     final String OPT_PASSWORD \u003d \"p\";\r\n     final String OPT_PASSWORD_L \u003d \"password\";\r\n     final String OPT_SQL \u003d \"s\";\r\n     final String OPT_SQL_L \u003d \"sql\";\r\n     final String OPT_SQL_SPLIT_DEFAULT \u003d \"###\";\r\n     final String OPT_SQL_SPLIT_L \u003d \"splitSql\";\r\n     final String OPT_STACK_TRACE \u003d \"t\";\r\n     final String OPT_TIMING \u003d \"g\";\r\n     final String OPT_TRIM_L \u003d \"trim\";\r\n     final String OPT_USER \u003d \"u\";\r\n     final String OPT_WRITE_TO_FILE \u003d \"w\";\r\n     final String _PMODE_IN \u003d \"IN\";\r\n     final String _PMODE_INOUT \u003d \"INOUT\";\r\n     final String _PMODE_OUT \u003d \"OUT\";\r\n     final String _PMODE_UNK \u003d \"Unknown\";\r\n     final String PMODES \u003d _PMODE_IN + \", \" + _PMODE_INOUT + \", \" + _PMODE_OUT + \", \" + _PMODE_UNK;\r\n     Options commandLineOptions;\r\n     commandLineOptions \u003d new Options();\r\n     commandLineOptions.addOption(OPT_HELP, OPT_HELP_, false, \"Prints help and quits\");\r\n     commandLineOptions.addOption(OPT_DRIVER, \"driver\", true, \"JDBC driver class name\");\r\n     commandLineOptions.addOption(OPT_DRIVER_INFO, \"info\", false, \"Prints driver information and properties. If \" + OPT + OPT_CONNECTION + \" is not specified, all drivers on the classpath are displayed.\");\r\n     commandLineOptions.addOption(OPT_CONNECTION, \"url\", true, \"Connection URL\");\r\n     commandLineOptions.addOption(OPT_USER, \"user\", true, \"A database user name\");\r\n     commandLineOptions.addOption(OPT_PASSWORD, OPT_PASSWORD_L, true, \"The database password for the user specified with the \" + OPT + OPT_USER + \" option. You can obfuscate the password with org.mortbay.jetty.security.Password, see http://docs.codehaus.org/display/JETTY/Securing+Passwords\");\r\n     commandLineOptions.addOption(OPT_SQL, OPT_SQL_L, true, \"Runs SQL or {call stored_procedure(?, ?)} or {?\u003dcall function(?, ?)}\");\r\n     commandLineOptions.addOption(OPT_FILE_SFMD, \"sfmd\", true, \"Writes a SFMD file for the given SQL\");\r\n     commandLineOptions.addOption(OPT_FILE_BINDING, \"jdbc\", true, \"Writes a JDBC binding node file for the given SQL\");\r\n     commandLineOptions.addOption(OPT_FILE_JDBC, \"node\", true, \"Writes a JDBC node file for the given SQL (internal debugging)\");\r\n     commandLineOptions.addOption(OPT_WRITE_TO_FILE, \"outfile\", true, \"Writes the SQL output to the given file\");\r\n     commandLineOptions.addOption(OPT_DESCRIPTION, \"description\", true, \"SFMD description. A default description is used if omited. Example: \" + OPT + OPT_DESCRIPTION + \" \\\"Runs such and such\\\"\");\r\n     commandLineOptions.addOption(OPT_INTERACTIVE, \"interactive\", false, \"Runs in interactive mode, reading and writing from the console, \u0027go\u0027 or \u0027/\u0027 sends a statement\");\r\n     commandLineOptions.addOption(OPT_TIMING, \"printTiming\", false, \"Prints timing information\");\r\n     commandLineOptions.addOption(OPT_METADATA, \"printMetaData\", false, \"Prints metadata information\");\r\n     commandLineOptions.addOption(OPT_STACK_TRACE, \"printStack\", false, \"Prints stack traces on errors\");\r\n     Option option \u003d new Option(OPT_COLUMN_NAMES, \"columnNames\", true, \"Column XML names; default names column labels. Example: \" + OPT + OPT_COLUMN_NAMES + \" \\\"cname1 cname2\\\"\");\r\n     commandLineOptions.addOption(option);\r\n     option \u003d new Option(OPT_PARAM_NAMES, \"paramNames\", true, \"Parameter XML names; default names are param1, param2, etc. Example: \" + OPT + OPT_PARAM_NAMES + \" \\\"pname1 pname2\\\"\");\r\n     commandLineOptions.addOption(option);\r\n-    OptionGroup pOutTypesOptionGroup \u003d new OptionGroup();\r\n-    String pOutTypesOptionGroupDoc \u003d OPT + OPT_PARAM_TYPES_INT + \" and \" + OPT + OPT_PARAM_TYPES_NAME + \" are mutually exclusive.\";\r\n+    final OptionGroup pOutTypesOptionGroup \u003d new OptionGroup();\r\n+    final String pOutTypesOptionGroupDoc \u003d OPT + OPT_PARAM_TYPES_INT + \" and \" + OPT + OPT_PARAM_TYPES_NAME + \" are mutually exclusive.\";\r\n     final String typesClassName \u003d Types.class.getName();\r\n     option \u003d new Option(OPT_PARAM_TYPES_INT, \"paramTypes\", true, \"Parameter types from \" + typesClassName + \". \" + pOutTypesOptionGroupDoc + \" Example: \" + OPT + OPT_PARAM_TYPES_INT + \" \\\"-10 12\\\"\");\r\n     commandLineOptions.addOption(option);\r\n     option \u003d new Option(OPT_PARAM_TYPES_NAME, \"paramTypeNames\", true, \"Parameter \" + typesClassName + \" names. \" + pOutTypesOptionGroupDoc + \" Example: \" + OPT + OPT_PARAM_TYPES_NAME + \" \\\"CURSOR VARCHAR\\\"\");\r\n     commandLineOptions.addOption(option);\r\n     commandLineOptions.addOptionGroup(pOutTypesOptionGroup);\r\n-    OptionGroup modesOptionGroup \u003d new OptionGroup();\r\n-    String modesOptionGroupDoc \u003d OPT + OPT_PARAM_MODES_INT + \" and \" + OPT + OPT_PARAM_MODES_NAME + \" are mutually exclusive.\";\r\n+    final OptionGroup modesOptionGroup \u003d new OptionGroup();\r\n+    final String modesOptionGroupDoc \u003d OPT + OPT_PARAM_MODES_INT + \" and \" + OPT + OPT_PARAM_MODES_NAME + \" are mutually exclusive.\";\r\n     option \u003d new Option(OPT_PARAM_MODES_INT, \"paramModes\", true, \"Parameters modes (\" + ParameterMetaData.parameterModeIn + \"\u003dIN, \" + ParameterMetaData.parameterModeInOut + \"\u003dINOUT, \" + ParameterMetaData.parameterModeOut + \"\u003dOUT, \" + ParameterMetaData.parameterModeUnknown + \"\u003dUnknown\" + \"). \" + modesOptionGroupDoc + \" Example for 2 parameters, OUT and IN: \" + OPT + OPT_PARAM_MODES_INT + \" \\\"\" + ParameterMetaData.parameterModeOut + \" \" + ParameterMetaData.parameterModeIn + \"\\\"\");\r\n     modesOptionGroup.addOption(option);\r\n     option \u003d new Option(OPT_PARAM_MODES_NAME, \"paramModeNames\", true, \"Parameters mode names (\" + PMODES + \"). \" + modesOptionGroupDoc + \" Example for 2 parameters, OUT and IN: \" + OPT + OPT_PARAM_MODES_NAME + \" \\\"\" + _PMODE_OUT + \" \" + _PMODE_IN + \"\\\"\");\r\n     modesOptionGroup.addOption(option);\r\n     commandLineOptions.addOptionGroup(modesOptionGroup);\r\n     option \u003d new Option(null, OPT_TRIM_L, true, \"Trims leading and trailing spaces from all column values. Column XML names can be optionally specified to set which columns to trim.\");\r\n     option.setOptionalArg(true);\r\n     commandLineOptions.addOption(option);\r\n     option \u003d new Option(OPT_JDBC_TO_SFMD, OPT_JDBC_TO_SFMD_L, true, \"Converts the JDBC file in the first argument to an SMFD file specified in the second argument.\");\r\n     option.setArgs(2);\r\n     commandLineOptions.addOption(option);\r\n     formatter.printHelp(new PrintWriter(sw), HelpFormatter.DEFAULT_WIDTH, this.getClass().getName(), null, commandLineOptions, HelpFormatter.DEFAULT_LEFT_PAD, HelpFormatter.DEFAULT_DESC_PAD, null);\r\n-    String expected \u003d \"usage: org.apache.commons.cli.bug.BugCLI162Test\" + CR + \" -2,--jdbc2sfmd \u003carg\u003e        Converts the JDBC file in the first argument\" + CR + \"                             to an SMFD file specified in the second\" + CR + \"                             argument.\" + CR + \" -a,--paramNames \u003carg\u003e       Parameter XML names; default names are\" + CR + \"                             param1, param2, etc. Example: -a \\\"pname1\" + CR + \"                             pname2\\\"\" + CR + \" -b,--jdbc \u003carg\u003e             Writes a JDBC binding node file for the given\" + CR + \"                             SQL\" + CR + \" -c,--url \u003carg\u003e              Connection URL\" + CR + \" -d,--driver \u003carg\u003e           JDBC driver class name\" + CR + \" -e,--description \u003carg\u003e      SFMD description. A default description is\" + CR + \"                             used if omited. Example: -e \\\"Runs such and\" + CR + \"                             such\\\"\" + CR + \" -f,--sfmd \u003carg\u003e             Writes a SFMD file for the given SQL\" + CR + \" -g,--printTiming            Prints timing information\" + CR + \" -h,--help                   Prints help and quits\" + CR + \" -i,--interactive            Runs in interactive mode, reading and writing\" + CR + \"                             from the console, \u0027go\u0027 or \u0027/\u0027 sends a\" + CR + \"                             statement\" + CR + \" -j,--node \u003carg\u003e             Writes a JDBC node file for the given SQL\" + CR + \"                             (internal debugging)\" + CR + \" -l,--columnNames \u003carg\u003e      Column XML names; default names column\" + CR + \"                             labels. Example: -l \\\"cname1 cname2\\\"\" + CR + \" -m,--printMetaData          Prints metadata information\" + CR + \" -n,--info                   Prints driver information and properties. If\" + CR + \"                             -c is not specified, all drivers on the\" + CR + \"                             classpath are displayed.\" + CR + \" -o,--paramModes \u003carg\u003e       Parameters modes (1\u003dIN, 2\u003dINOUT, 4\u003dOUT,\" + CR + \"                             0\u003dUnknown). -o and -O are mutually exclusive.\" + CR + \"                             Example for 2 parameters, OUT and IN: -o \\\"4\" + CR + \"                             1\\\"\" + CR + \" -O,--paramModeNames \u003carg\u003e   Parameters mode names (IN, INOUT, OUT,\" + CR + \"                             Unknown). -o and -O are mutually exclusive.\" + CR + \"                             Example for 2 parameters, OUT and IN: -O \\\"OUT\" + CR + \"                             IN\\\"\" + CR + \" -p,--password \u003carg\u003e         The database password for the user specified\" + CR + \"                             with the -u option. You can obfuscate the\" + CR + \"                             password with\" + CR + \"                             org.mortbay.jetty.security.Password, see\" + CR + \"                             http://docs.codehaus.org/display/JETTY/Securi\" + CR + \"                             ng+Passwords\" + CR + \" -s,--sql \u003carg\u003e              Runs SQL or {call stored_procedure(?, ?)} or\" + CR + \"                             {?\u003dcall function(?, ?)}\" + CR + \" -t,--printStack             Prints stack traces on errors\" + CR + \"    --trim \u003carg\u003e             Trims leading and trailing spaces from all\" + CR + \"                             column values. Column XML names can be\" + CR + \"                             optionally specified to set which columns to\" + CR + \"                             trim.\" + CR + \" -u,--user \u003carg\u003e             A database user name\" + CR + \" -w,--outfile \u003carg\u003e          Writes the SQL output to the given file\" + CR + \" -y,--paramTypes \u003carg\u003e       Parameter types from java.sql.Types. -y and\" + CR + \"                             -Y are mutually exclusive. Example: -y \\\"-10\" + CR + \"                             12\\\"\" + CR + \" -Y,--paramTypeNames \u003carg\u003e   Parameter java.sql.Types names. -y and -Y are\" + CR + \"                             mutually exclusive. Example: -Y \\\"CURSOR\" + CR + \"                             VARCHAR\\\"\" + CR;\r\n+    final String expected \u003d \"usage: org.apache.commons.cli.bug.BugCLI162Test\" + CR + \" -2,--jdbc2sfmd \u003carg\u003e        Converts the JDBC file in the first argument\" + CR + \"                             to an SMFD file specified in the second\" + CR + \"                             argument.\" + CR + \" -a,--paramNames \u003carg\u003e       Parameter XML names; default names are\" + CR + \"                             param1, param2, etc. Example: -a \\\"pname1\" + CR + \"                             pname2\\\"\" + CR + \" -b,--jdbc \u003carg\u003e             Writes a JDBC binding node file for the given\" + CR + \"                             SQL\" + CR + \" -c,--url \u003carg\u003e              Connection URL\" + CR + \" -d,--driver \u003carg\u003e           JDBC driver class name\" + CR + \" -e,--description \u003carg\u003e      SFMD description. A default description is\" + CR + \"                             used if omited. Example: -e \\\"Runs such and\" + CR + \"                             such\\\"\" + CR + \" -f,--sfmd \u003carg\u003e             Writes a SFMD file for the given SQL\" + CR + \" -g,--printTiming            Prints timing information\" + CR + \" -h,--help                   Prints help and quits\" + CR + \" -i,--interactive            Runs in interactive mode, reading and writing\" + CR + \"                             from the console, \u0027go\u0027 or \u0027/\u0027 sends a\" + CR + \"                             statement\" + CR + \" -j,--node \u003carg\u003e             Writes a JDBC node file for the given SQL\" + CR + \"                             (internal debugging)\" + CR + \" -l,--columnNames \u003carg\u003e      Column XML names; default names column\" + CR + \"                             labels. Example: -l \\\"cname1 cname2\\\"\" + CR + \" -m,--printMetaData          Prints metadata information\" + CR + \" -n,--info                   Prints driver information and properties. If\" + CR + \"                             -c is not specified, all drivers on the\" + CR + \"                             classpath are displayed.\" + CR + \" -o,--paramModes \u003carg\u003e       Parameters modes (1\u003dIN, 2\u003dINOUT, 4\u003dOUT,\" + CR + \"                             0\u003dUnknown). -o and -O are mutually exclusive.\" + CR + \"                             Example for 2 parameters, OUT and IN: -o \\\"4\" + CR + \"                             1\\\"\" + CR + \" -O,--paramModeNames \u003carg\u003e   Parameters mode names (IN, INOUT, OUT,\" + CR + \"                             Unknown). -o and -O are mutually exclusive.\" + CR + \"                             Example for 2 parameters, OUT and IN: -O \\\"OUT\" + CR + \"                             IN\\\"\" + CR + \" -p,--password \u003carg\u003e         The database password for the user specified\" + CR + \"                             with the -u option. You can obfuscate the\" + CR + \"                             password with\" + CR + \"                             org.mortbay.jetty.security.Password, see\" + CR + \"                             http://docs.codehaus.org/display/JETTY/Securi\" + CR + \"                             ng+Passwords\" + CR + \" -s,--sql \u003carg\u003e              Runs SQL or {call stored_procedure(?, ?)} or\" + CR + \"                             {?\u003dcall function(?, ?)}\" + CR + \" -t,--printStack             Prints stack traces on errors\" + CR + \"    --trim \u003carg\u003e             Trims leading and trailing spaces from all\" + CR + \"                             column values. Column XML names can be\" + CR + \"                             optionally specified to set which columns to\" + CR + \"                             trim.\" + CR + \" -u,--user \u003carg\u003e             A database user name\" + CR + \" -w,--outfile \u003carg\u003e          Writes the SQL output to the given file\" + CR + \" -y,--paramTypes \u003carg\u003e       Parameter types from java.sql.Types. -y and\" + CR + \"                             -Y are mutually exclusive. Example: -y \\\"-10\" + CR + \"                             12\\\"\" + CR + \" -Y,--paramTypeNames \u003carg\u003e   Parameter java.sql.Types names. -y and -Y are\" + CR + \"                             mutually exclusive. Example: -Y \\\"CURSOR\" + CR + \"                             VARCHAR\\\"\" + CR;\r\n     assertEquals(expected, sw.toString());\r\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "b207a2bcef8e29df436bc393c3569947680e93e6": {
      "type": "Ybodychange",
      "commitMessage": "Tests sould not write to std out, but instead should verify return values for correctness\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/cli/trunk@1669880 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "3/29/15 12:34 PM",
      "commitName": "b207a2bcef8e29df436bc393c3569947680e93e6",
      "commitAuthor": "Benedikt Ritter",
      "commitDateOld": "2/6/13 12:57 PM",
      "commitNameOld": "60835e2f29d4ec09eead7789405d99f92c36a29e",
      "commitAuthorOld": "Thomas Neidhart",
      "daysBetweenCommits": 780.94,
      "commitsBetweenForRepo": 54,
      "commitsBetweenForFile": 1,
      "actualSource": "@Test\r\npublic void testPrintHelpLongLines() {\r\n    final String OPT \u003d \"-\";\r\n    final String OPT_COLUMN_NAMES \u003d \"l\";\r\n    final String OPT_CONNECTION \u003d \"c\";\r\n    final String OPT_DESCRIPTION \u003d \"e\";\r\n    final String OPT_DRIVER \u003d \"d\";\r\n    final String OPT_DRIVER_INFO \u003d \"n\";\r\n    final String OPT_FILE_BINDING \u003d \"b\";\r\n    final String OPT_FILE_JDBC \u003d \"j\";\r\n    final String OPT_FILE_SFMD \u003d \"f\";\r\n    final String OPT_HELP \u003d \"h\";\r\n    final String OPT_HELP_ \u003d \"help\";\r\n    final String OPT_INTERACTIVE \u003d \"i\";\r\n    final String OPT_JDBC_TO_SFMD \u003d \"2\";\r\n    final String OPT_JDBC_TO_SFMD_L \u003d \"jdbc2sfmd\";\r\n    final String OPT_METADATA \u003d \"m\";\r\n    final String OPT_PARAM_MODES_INT \u003d \"o\";\r\n    final String OPT_PARAM_MODES_NAME \u003d \"O\";\r\n    final String OPT_PARAM_NAMES \u003d \"a\";\r\n    final String OPT_PARAM_TYPES_INT \u003d \"y\";\r\n    final String OPT_PARAM_TYPES_NAME \u003d \"Y\";\r\n    final String OPT_PASSWORD \u003d \"p\";\r\n    final String OPT_PASSWORD_L \u003d \"password\";\r\n    final String OPT_SQL \u003d \"s\";\r\n    final String OPT_SQL_L \u003d \"sql\";\r\n    final String OPT_SQL_SPLIT_DEFAULT \u003d \"###\";\r\n    final String OPT_SQL_SPLIT_L \u003d \"splitSql\";\r\n    final String OPT_STACK_TRACE \u003d \"t\";\r\n    final String OPT_TIMING \u003d \"g\";\r\n    final String OPT_TRIM_L \u003d \"trim\";\r\n    final String OPT_USER \u003d \"u\";\r\n    final String OPT_WRITE_TO_FILE \u003d \"w\";\r\n    final String _PMODE_IN \u003d \"IN\";\r\n    final String _PMODE_INOUT \u003d \"INOUT\";\r\n    final String _PMODE_OUT \u003d \"OUT\";\r\n    final String _PMODE_UNK \u003d \"Unknown\";\r\n    final String PMODES \u003d _PMODE_IN + \", \" + _PMODE_INOUT + \", \" + _PMODE_OUT + \", \" + _PMODE_UNK;\r\n    Options commandLineOptions;\r\n    commandLineOptions \u003d new Options();\r\n    commandLineOptions.addOption(OPT_HELP, OPT_HELP_, false, \"Prints help and quits\");\r\n    commandLineOptions.addOption(OPT_DRIVER, \"driver\", true, \"JDBC driver class name\");\r\n    commandLineOptions.addOption(OPT_DRIVER_INFO, \"info\", false, \"Prints driver information and properties. If \" + OPT + OPT_CONNECTION + \" is not specified, all drivers on the classpath are displayed.\");\r\n    commandLineOptions.addOption(OPT_CONNECTION, \"url\", true, \"Connection URL\");\r\n    commandLineOptions.addOption(OPT_USER, \"user\", true, \"A database user name\");\r\n    commandLineOptions.addOption(OPT_PASSWORD, OPT_PASSWORD_L, true, \"The database password for the user specified with the \" + OPT + OPT_USER + \" option. You can obfuscate the password with org.mortbay.jetty.security.Password, see http://docs.codehaus.org/display/JETTY/Securing+Passwords\");\r\n    commandLineOptions.addOption(OPT_SQL, OPT_SQL_L, true, \"Runs SQL or {call stored_procedure(?, ?)} or {?\u003dcall function(?, ?)}\");\r\n    commandLineOptions.addOption(OPT_FILE_SFMD, \"sfmd\", true, \"Writes a SFMD file for the given SQL\");\r\n    commandLineOptions.addOption(OPT_FILE_BINDING, \"jdbc\", true, \"Writes a JDBC binding node file for the given SQL\");\r\n    commandLineOptions.addOption(OPT_FILE_JDBC, \"node\", true, \"Writes a JDBC node file for the given SQL (internal debugging)\");\r\n    commandLineOptions.addOption(OPT_WRITE_TO_FILE, \"outfile\", true, \"Writes the SQL output to the given file\");\r\n    commandLineOptions.addOption(OPT_DESCRIPTION, \"description\", true, \"SFMD description. A default description is used if omited. Example: \" + OPT + OPT_DESCRIPTION + \" \\\"Runs such and such\\\"\");\r\n    commandLineOptions.addOption(OPT_INTERACTIVE, \"interactive\", false, \"Runs in interactive mode, reading and writing from the console, \u0027go\u0027 or \u0027/\u0027 sends a statement\");\r\n    commandLineOptions.addOption(OPT_TIMING, \"printTiming\", false, \"Prints timing information\");\r\n    commandLineOptions.addOption(OPT_METADATA, \"printMetaData\", false, \"Prints metadata information\");\r\n    commandLineOptions.addOption(OPT_STACK_TRACE, \"printStack\", false, \"Prints stack traces on errors\");\r\n    Option option \u003d new Option(OPT_COLUMN_NAMES, \"columnNames\", true, \"Column XML names; default names column labels. Example: \" + OPT + OPT_COLUMN_NAMES + \" \\\"cname1 cname2\\\"\");\r\n    commandLineOptions.addOption(option);\r\n    option \u003d new Option(OPT_PARAM_NAMES, \"paramNames\", true, \"Parameter XML names; default names are param1, param2, etc. Example: \" + OPT + OPT_PARAM_NAMES + \" \\\"pname1 pname2\\\"\");\r\n    commandLineOptions.addOption(option);\r\n    OptionGroup pOutTypesOptionGroup \u003d new OptionGroup();\r\n    String pOutTypesOptionGroupDoc \u003d OPT + OPT_PARAM_TYPES_INT + \" and \" + OPT + OPT_PARAM_TYPES_NAME + \" are mutually exclusive.\";\r\n    final String typesClassName \u003d Types.class.getName();\r\n    option \u003d new Option(OPT_PARAM_TYPES_INT, \"paramTypes\", true, \"Parameter types from \" + typesClassName + \". \" + pOutTypesOptionGroupDoc + \" Example: \" + OPT + OPT_PARAM_TYPES_INT + \" \\\"-10 12\\\"\");\r\n    commandLineOptions.addOption(option);\r\n    option \u003d new Option(OPT_PARAM_TYPES_NAME, \"paramTypeNames\", true, \"Parameter \" + typesClassName + \" names. \" + pOutTypesOptionGroupDoc + \" Example: \" + OPT + OPT_PARAM_TYPES_NAME + \" \\\"CURSOR VARCHAR\\\"\");\r\n    commandLineOptions.addOption(option);\r\n    commandLineOptions.addOptionGroup(pOutTypesOptionGroup);\r\n    OptionGroup modesOptionGroup \u003d new OptionGroup();\r\n    String modesOptionGroupDoc \u003d OPT + OPT_PARAM_MODES_INT + \" and \" + OPT + OPT_PARAM_MODES_NAME + \" are mutually exclusive.\";\r\n    option \u003d new Option(OPT_PARAM_MODES_INT, \"paramModes\", true, \"Parameters modes (\" + ParameterMetaData.parameterModeIn + \"\u003dIN, \" + ParameterMetaData.parameterModeInOut + \"\u003dINOUT, \" + ParameterMetaData.parameterModeOut + \"\u003dOUT, \" + ParameterMetaData.parameterModeUnknown + \"\u003dUnknown\" + \"). \" + modesOptionGroupDoc + \" Example for 2 parameters, OUT and IN: \" + OPT + OPT_PARAM_MODES_INT + \" \\\"\" + ParameterMetaData.parameterModeOut + \" \" + ParameterMetaData.parameterModeIn + \"\\\"\");\r\n    modesOptionGroup.addOption(option);\r\n    option \u003d new Option(OPT_PARAM_MODES_NAME, \"paramModeNames\", true, \"Parameters mode names (\" + PMODES + \"). \" + modesOptionGroupDoc + \" Example for 2 parameters, OUT and IN: \" + OPT + OPT_PARAM_MODES_NAME + \" \\\"\" + _PMODE_OUT + \" \" + _PMODE_IN + \"\\\"\");\r\n    modesOptionGroup.addOption(option);\r\n    commandLineOptions.addOptionGroup(modesOptionGroup);\r\n    option \u003d new Option(null, OPT_TRIM_L, true, \"Trims leading and trailing spaces from all column values. Column XML names can be optionally specified to set which columns to trim.\");\r\n    option.setOptionalArg(true);\r\n    commandLineOptions.addOption(option);\r\n    option \u003d new Option(OPT_JDBC_TO_SFMD, OPT_JDBC_TO_SFMD_L, true, \"Converts the JDBC file in the first argument to an SMFD file specified in the second argument.\");\r\n    option.setArgs(2);\r\n    commandLineOptions.addOption(option);\r\n    formatter.printHelp(new PrintWriter(sw), HelpFormatter.DEFAULT_WIDTH, this.getClass().getName(), null, commandLineOptions, HelpFormatter.DEFAULT_LEFT_PAD, HelpFormatter.DEFAULT_DESC_PAD, null);\r\n    String expected \u003d \"usage: org.apache.commons.cli.bug.BugCLI162Test\" + CR + \" -2,--jdbc2sfmd \u003carg\u003e        Converts the JDBC file in the first argument\" + CR + \"                             to an SMFD file specified in the second\" + CR + \"                             argument.\" + CR + \" -a,--paramNames \u003carg\u003e       Parameter XML names; default names are\" + CR + \"                             param1, param2, etc. Example: -a \\\"pname1\" + CR + \"                             pname2\\\"\" + CR + \" -b,--jdbc \u003carg\u003e             Writes a JDBC binding node file for the given\" + CR + \"                             SQL\" + CR + \" -c,--url \u003carg\u003e              Connection URL\" + CR + \" -d,--driver \u003carg\u003e           JDBC driver class name\" + CR + \" -e,--description \u003carg\u003e      SFMD description. A default description is\" + CR + \"                             used if omited. Example: -e \\\"Runs such and\" + CR + \"                             such\\\"\" + CR + \" -f,--sfmd \u003carg\u003e             Writes a SFMD file for the given SQL\" + CR + \" -g,--printTiming            Prints timing information\" + CR + \" -h,--help                   Prints help and quits\" + CR + \" -i,--interactive            Runs in interactive mode, reading and writing\" + CR + \"                             from the console, \u0027go\u0027 or \u0027/\u0027 sends a\" + CR + \"                             statement\" + CR + \" -j,--node \u003carg\u003e             Writes a JDBC node file for the given SQL\" + CR + \"                             (internal debugging)\" + CR + \" -l,--columnNames \u003carg\u003e      Column XML names; default names column\" + CR + \"                             labels. Example: -l \\\"cname1 cname2\\\"\" + CR + \" -m,--printMetaData          Prints metadata information\" + CR + \" -n,--info                   Prints driver information and properties. If\" + CR + \"                             -c is not specified, all drivers on the\" + CR + \"                             classpath are displayed.\" + CR + \" -o,--paramModes \u003carg\u003e       Parameters modes (1\u003dIN, 2\u003dINOUT, 4\u003dOUT,\" + CR + \"                             0\u003dUnknown). -o and -O are mutually exclusive.\" + CR + \"                             Example for 2 parameters, OUT and IN: -o \\\"4\" + CR + \"                             1\\\"\" + CR + \" -O,--paramModeNames \u003carg\u003e   Parameters mode names (IN, INOUT, OUT,\" + CR + \"                             Unknown). -o and -O are mutually exclusive.\" + CR + \"                             Example for 2 parameters, OUT and IN: -O \\\"OUT\" + CR + \"                             IN\\\"\" + CR + \" -p,--password \u003carg\u003e         The database password for the user specified\" + CR + \"                             with the -u option. You can obfuscate the\" + CR + \"                             password with\" + CR + \"                             org.mortbay.jetty.security.Password, see\" + CR + \"                             http://docs.codehaus.org/display/JETTY/Securi\" + CR + \"                             ng+Passwords\" + CR + \" -s,--sql \u003carg\u003e              Runs SQL or {call stored_procedure(?, ?)} or\" + CR + \"                             {?\u003dcall function(?, ?)}\" + CR + \" -t,--printStack             Prints stack traces on errors\" + CR + \"    --trim \u003carg\u003e             Trims leading and trailing spaces from all\" + CR + \"                             column values. Column XML names can be\" + CR + \"                             optionally specified to set which columns to\" + CR + \"                             trim.\" + CR + \" -u,--user \u003carg\u003e             A database user name\" + CR + \" -w,--outfile \u003carg\u003e          Writes the SQL output to the given file\" + CR + \" -y,--paramTypes \u003carg\u003e       Parameter types from java.sql.Types. -y and\" + CR + \"                             -Y are mutually exclusive. Example: -y \\\"-10\" + CR + \"                             12\\\"\" + CR + \" -Y,--paramTypeNames \u003carg\u003e   Parameter java.sql.Types names. -y and -Y are\" + CR + \"                             mutually exclusive. Example: -Y \\\"CURSOR\" + CR + \"                             VARCHAR\\\"\" + CR;\r\n    assertEquals(expected, sw.toString());\r\n}",
      "path": "src/test/java/org/apache/commons/cli/bug/BugCLI162Test.java",
      "functionStartLine": 67,
      "functionName": "testPrintHelpLongLines",
      "functionAnnotation": "@Test",
      "functionDoc": "",
      "diff": "@@ -1,83 +1,85 @@\n @Test\r\n public void testPrintHelpLongLines() {\r\n     final String OPT \u003d \"-\";\r\n     final String OPT_COLUMN_NAMES \u003d \"l\";\r\n     final String OPT_CONNECTION \u003d \"c\";\r\n     final String OPT_DESCRIPTION \u003d \"e\";\r\n     final String OPT_DRIVER \u003d \"d\";\r\n     final String OPT_DRIVER_INFO \u003d \"n\";\r\n     final String OPT_FILE_BINDING \u003d \"b\";\r\n     final String OPT_FILE_JDBC \u003d \"j\";\r\n     final String OPT_FILE_SFMD \u003d \"f\";\r\n     final String OPT_HELP \u003d \"h\";\r\n     final String OPT_HELP_ \u003d \"help\";\r\n     final String OPT_INTERACTIVE \u003d \"i\";\r\n     final String OPT_JDBC_TO_SFMD \u003d \"2\";\r\n     final String OPT_JDBC_TO_SFMD_L \u003d \"jdbc2sfmd\";\r\n     final String OPT_METADATA \u003d \"m\";\r\n     final String OPT_PARAM_MODES_INT \u003d \"o\";\r\n     final String OPT_PARAM_MODES_NAME \u003d \"O\";\r\n     final String OPT_PARAM_NAMES \u003d \"a\";\r\n     final String OPT_PARAM_TYPES_INT \u003d \"y\";\r\n     final String OPT_PARAM_TYPES_NAME \u003d \"Y\";\r\n     final String OPT_PASSWORD \u003d \"p\";\r\n     final String OPT_PASSWORD_L \u003d \"password\";\r\n     final String OPT_SQL \u003d \"s\";\r\n     final String OPT_SQL_L \u003d \"sql\";\r\n     final String OPT_SQL_SPLIT_DEFAULT \u003d \"###\";\r\n     final String OPT_SQL_SPLIT_L \u003d \"splitSql\";\r\n     final String OPT_STACK_TRACE \u003d \"t\";\r\n     final String OPT_TIMING \u003d \"g\";\r\n     final String OPT_TRIM_L \u003d \"trim\";\r\n     final String OPT_USER \u003d \"u\";\r\n     final String OPT_WRITE_TO_FILE \u003d \"w\";\r\n     final String _PMODE_IN \u003d \"IN\";\r\n     final String _PMODE_INOUT \u003d \"INOUT\";\r\n     final String _PMODE_OUT \u003d \"OUT\";\r\n     final String _PMODE_UNK \u003d \"Unknown\";\r\n     final String PMODES \u003d _PMODE_IN + \", \" + _PMODE_INOUT + \", \" + _PMODE_OUT + \", \" + _PMODE_UNK;\r\n     Options commandLineOptions;\r\n     commandLineOptions \u003d new Options();\r\n     commandLineOptions.addOption(OPT_HELP, OPT_HELP_, false, \"Prints help and quits\");\r\n     commandLineOptions.addOption(OPT_DRIVER, \"driver\", true, \"JDBC driver class name\");\r\n     commandLineOptions.addOption(OPT_DRIVER_INFO, \"info\", false, \"Prints driver information and properties. If \" + OPT + OPT_CONNECTION + \" is not specified, all drivers on the classpath are displayed.\");\r\n     commandLineOptions.addOption(OPT_CONNECTION, \"url\", true, \"Connection URL\");\r\n     commandLineOptions.addOption(OPT_USER, \"user\", true, \"A database user name\");\r\n     commandLineOptions.addOption(OPT_PASSWORD, OPT_PASSWORD_L, true, \"The database password for the user specified with the \" + OPT + OPT_USER + \" option. You can obfuscate the password with org.mortbay.jetty.security.Password, see http://docs.codehaus.org/display/JETTY/Securing+Passwords\");\r\n     commandLineOptions.addOption(OPT_SQL, OPT_SQL_L, true, \"Runs SQL or {call stored_procedure(?, ?)} or {?\u003dcall function(?, ?)}\");\r\n     commandLineOptions.addOption(OPT_FILE_SFMD, \"sfmd\", true, \"Writes a SFMD file for the given SQL\");\r\n     commandLineOptions.addOption(OPT_FILE_BINDING, \"jdbc\", true, \"Writes a JDBC binding node file for the given SQL\");\r\n     commandLineOptions.addOption(OPT_FILE_JDBC, \"node\", true, \"Writes a JDBC node file for the given SQL (internal debugging)\");\r\n     commandLineOptions.addOption(OPT_WRITE_TO_FILE, \"outfile\", true, \"Writes the SQL output to the given file\");\r\n     commandLineOptions.addOption(OPT_DESCRIPTION, \"description\", true, \"SFMD description. A default description is used if omited. Example: \" + OPT + OPT_DESCRIPTION + \" \\\"Runs such and such\\\"\");\r\n     commandLineOptions.addOption(OPT_INTERACTIVE, \"interactive\", false, \"Runs in interactive mode, reading and writing from the console, \u0027go\u0027 or \u0027/\u0027 sends a statement\");\r\n     commandLineOptions.addOption(OPT_TIMING, \"printTiming\", false, \"Prints timing information\");\r\n     commandLineOptions.addOption(OPT_METADATA, \"printMetaData\", false, \"Prints metadata information\");\r\n     commandLineOptions.addOption(OPT_STACK_TRACE, \"printStack\", false, \"Prints stack traces on errors\");\r\n     Option option \u003d new Option(OPT_COLUMN_NAMES, \"columnNames\", true, \"Column XML names; default names column labels. Example: \" + OPT + OPT_COLUMN_NAMES + \" \\\"cname1 cname2\\\"\");\r\n     commandLineOptions.addOption(option);\r\n     option \u003d new Option(OPT_PARAM_NAMES, \"paramNames\", true, \"Parameter XML names; default names are param1, param2, etc. Example: \" + OPT + OPT_PARAM_NAMES + \" \\\"pname1 pname2\\\"\");\r\n     commandLineOptions.addOption(option);\r\n     OptionGroup pOutTypesOptionGroup \u003d new OptionGroup();\r\n     String pOutTypesOptionGroupDoc \u003d OPT + OPT_PARAM_TYPES_INT + \" and \" + OPT + OPT_PARAM_TYPES_NAME + \" are mutually exclusive.\";\r\n     final String typesClassName \u003d Types.class.getName();\r\n     option \u003d new Option(OPT_PARAM_TYPES_INT, \"paramTypes\", true, \"Parameter types from \" + typesClassName + \". \" + pOutTypesOptionGroupDoc + \" Example: \" + OPT + OPT_PARAM_TYPES_INT + \" \\\"-10 12\\\"\");\r\n     commandLineOptions.addOption(option);\r\n     option \u003d new Option(OPT_PARAM_TYPES_NAME, \"paramTypeNames\", true, \"Parameter \" + typesClassName + \" names. \" + pOutTypesOptionGroupDoc + \" Example: \" + OPT + OPT_PARAM_TYPES_NAME + \" \\\"CURSOR VARCHAR\\\"\");\r\n     commandLineOptions.addOption(option);\r\n     commandLineOptions.addOptionGroup(pOutTypesOptionGroup);\r\n     OptionGroup modesOptionGroup \u003d new OptionGroup();\r\n     String modesOptionGroupDoc \u003d OPT + OPT_PARAM_MODES_INT + \" and \" + OPT + OPT_PARAM_MODES_NAME + \" are mutually exclusive.\";\r\n     option \u003d new Option(OPT_PARAM_MODES_INT, \"paramModes\", true, \"Parameters modes (\" + ParameterMetaData.parameterModeIn + \"\u003dIN, \" + ParameterMetaData.parameterModeInOut + \"\u003dINOUT, \" + ParameterMetaData.parameterModeOut + \"\u003dOUT, \" + ParameterMetaData.parameterModeUnknown + \"\u003dUnknown\" + \"). \" + modesOptionGroupDoc + \" Example for 2 parameters, OUT and IN: \" + OPT + OPT_PARAM_MODES_INT + \" \\\"\" + ParameterMetaData.parameterModeOut + \" \" + ParameterMetaData.parameterModeIn + \"\\\"\");\r\n     modesOptionGroup.addOption(option);\r\n     option \u003d new Option(OPT_PARAM_MODES_NAME, \"paramModeNames\", true, \"Parameters mode names (\" + PMODES + \"). \" + modesOptionGroupDoc + \" Example for 2 parameters, OUT and IN: \" + OPT + OPT_PARAM_MODES_NAME + \" \\\"\" + _PMODE_OUT + \" \" + _PMODE_IN + \"\\\"\");\r\n     modesOptionGroup.addOption(option);\r\n     commandLineOptions.addOptionGroup(modesOptionGroup);\r\n     option \u003d new Option(null, OPT_TRIM_L, true, \"Trims leading and trailing spaces from all column values. Column XML names can be optionally specified to set which columns to trim.\");\r\n     option.setOptionalArg(true);\r\n     commandLineOptions.addOption(option);\r\n     option \u003d new Option(OPT_JDBC_TO_SFMD, OPT_JDBC_TO_SFMD_L, true, \"Converts the JDBC file in the first argument to an SMFD file specified in the second argument.\");\r\n     option.setArgs(2);\r\n     commandLineOptions.addOption(option);\r\n-    new HelpFormatter().printHelp(this.getClass().getName(), commandLineOptions);\r\n+    formatter.printHelp(new PrintWriter(sw), HelpFormatter.DEFAULT_WIDTH, this.getClass().getName(), null, commandLineOptions, HelpFormatter.DEFAULT_LEFT_PAD, HelpFormatter.DEFAULT_DESC_PAD, null);\r\n+    String expected \u003d \"usage: org.apache.commons.cli.bug.BugCLI162Test\" + CR + \" -2,--jdbc2sfmd \u003carg\u003e        Converts the JDBC file in the first argument\" + CR + \"                             to an SMFD file specified in the second\" + CR + \"                             argument.\" + CR + \" -a,--paramNames \u003carg\u003e       Parameter XML names; default names are\" + CR + \"                             param1, param2, etc. Example: -a \\\"pname1\" + CR + \"                             pname2\\\"\" + CR + \" -b,--jdbc \u003carg\u003e             Writes a JDBC binding node file for the given\" + CR + \"                             SQL\" + CR + \" -c,--url \u003carg\u003e              Connection URL\" + CR + \" -d,--driver \u003carg\u003e           JDBC driver class name\" + CR + \" -e,--description \u003carg\u003e      SFMD description. A default description is\" + CR + \"                             used if omited. Example: -e \\\"Runs such and\" + CR + \"                             such\\\"\" + CR + \" -f,--sfmd \u003carg\u003e             Writes a SFMD file for the given SQL\" + CR + \" -g,--printTiming            Prints timing information\" + CR + \" -h,--help                   Prints help and quits\" + CR + \" -i,--interactive            Runs in interactive mode, reading and writing\" + CR + \"                             from the console, \u0027go\u0027 or \u0027/\u0027 sends a\" + CR + \"                             statement\" + CR + \" -j,--node \u003carg\u003e             Writes a JDBC node file for the given SQL\" + CR + \"                             (internal debugging)\" + CR + \" -l,--columnNames \u003carg\u003e      Column XML names; default names column\" + CR + \"                             labels. Example: -l \\\"cname1 cname2\\\"\" + CR + \" -m,--printMetaData          Prints metadata information\" + CR + \" -n,--info                   Prints driver information and properties. If\" + CR + \"                             -c is not specified, all drivers on the\" + CR + \"                             classpath are displayed.\" + CR + \" -o,--paramModes \u003carg\u003e       Parameters modes (1\u003dIN, 2\u003dINOUT, 4\u003dOUT,\" + CR + \"                             0\u003dUnknown). -o and -O are mutually exclusive.\" + CR + \"                             Example for 2 parameters, OUT and IN: -o \\\"4\" + CR + \"                             1\\\"\" + CR + \" -O,--paramModeNames \u003carg\u003e   Parameters mode names (IN, INOUT, OUT,\" + CR + \"                             Unknown). -o and -O are mutually exclusive.\" + CR + \"                             Example for 2 parameters, OUT and IN: -O \\\"OUT\" + CR + \"                             IN\\\"\" + CR + \" -p,--password \u003carg\u003e         The database password for the user specified\" + CR + \"                             with the -u option. You can obfuscate the\" + CR + \"                             password with\" + CR + \"                             org.mortbay.jetty.security.Password, see\" + CR + \"                             http://docs.codehaus.org/display/JETTY/Securi\" + CR + \"                             ng+Passwords\" + CR + \" -s,--sql \u003carg\u003e              Runs SQL or {call stored_procedure(?, ?)} or\" + CR + \"                             {?\u003dcall function(?, ?)}\" + CR + \" -t,--printStack             Prints stack traces on errors\" + CR + \"    --trim \u003carg\u003e             Trims leading and trailing spaces from all\" + CR + \"                             column values. Column XML names can be\" + CR + \"                             optionally specified to set which columns to\" + CR + \"                             trim.\" + CR + \" -u,--user \u003carg\u003e             A database user name\" + CR + \" -w,--outfile \u003carg\u003e          Writes the SQL output to the given file\" + CR + \" -y,--paramTypes \u003carg\u003e       Parameter types from java.sql.Types. -y and\" + CR + \"                             -Y are mutually exclusive. Example: -y \\\"-10\" + CR + \"                             12\\\"\" + CR + \" -Y,--paramTypeNames \u003carg\u003e   Parameter java.sql.Types names. -y and -Y are\" + CR + \"                             mutually exclusive. Example: -Y \\\"CURSOR\" + CR + \"                             VARCHAR\\\"\" + CR;\r\n+    assertEquals(expected, sw.toString());\r\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "60835e2f29d4ec09eead7789405d99f92c36a29e": {
      "type": "Yannotationchange",
      "commitMessage": "[CLI-227] Convert unit tests to junit 4, upgrade junit to 4.11, move authors to pom.xml.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/cli/trunk@1442904 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "2/6/13 12:57 PM",
      "commitName": "60835e2f29d4ec09eead7789405d99f92c36a29e",
      "commitAuthor": "Thomas Neidhart",
      "commitDateOld": "1/30/13 7:22 PM",
      "commitNameOld": "f06a1b95c4568997295e987b9617be799c517845",
      "commitAuthorOld": "Sebastian Bazley",
      "daysBetweenCommits": 6.73,
      "commitsBetweenForRepo": 7,
      "commitsBetweenForFile": 1,
      "actualSource": "@Test\r\npublic void testPrintHelpLongLines() {\r\n    final String OPT \u003d \"-\";\r\n    final String OPT_COLUMN_NAMES \u003d \"l\";\r\n    final String OPT_CONNECTION \u003d \"c\";\r\n    final String OPT_DESCRIPTION \u003d \"e\";\r\n    final String OPT_DRIVER \u003d \"d\";\r\n    final String OPT_DRIVER_INFO \u003d \"n\";\r\n    final String OPT_FILE_BINDING \u003d \"b\";\r\n    final String OPT_FILE_JDBC \u003d \"j\";\r\n    final String OPT_FILE_SFMD \u003d \"f\";\r\n    final String OPT_HELP \u003d \"h\";\r\n    final String OPT_HELP_ \u003d \"help\";\r\n    final String OPT_INTERACTIVE \u003d \"i\";\r\n    final String OPT_JDBC_TO_SFMD \u003d \"2\";\r\n    final String OPT_JDBC_TO_SFMD_L \u003d \"jdbc2sfmd\";\r\n    final String OPT_METADATA \u003d \"m\";\r\n    final String OPT_PARAM_MODES_INT \u003d \"o\";\r\n    final String OPT_PARAM_MODES_NAME \u003d \"O\";\r\n    final String OPT_PARAM_NAMES \u003d \"a\";\r\n    final String OPT_PARAM_TYPES_INT \u003d \"y\";\r\n    final String OPT_PARAM_TYPES_NAME \u003d \"Y\";\r\n    final String OPT_PASSWORD \u003d \"p\";\r\n    final String OPT_PASSWORD_L \u003d \"password\";\r\n    final String OPT_SQL \u003d \"s\";\r\n    final String OPT_SQL_L \u003d \"sql\";\r\n    final String OPT_SQL_SPLIT_DEFAULT \u003d \"###\";\r\n    final String OPT_SQL_SPLIT_L \u003d \"splitSql\";\r\n    final String OPT_STACK_TRACE \u003d \"t\";\r\n    final String OPT_TIMING \u003d \"g\";\r\n    final String OPT_TRIM_L \u003d \"trim\";\r\n    final String OPT_USER \u003d \"u\";\r\n    final String OPT_WRITE_TO_FILE \u003d \"w\";\r\n    final String _PMODE_IN \u003d \"IN\";\r\n    final String _PMODE_INOUT \u003d \"INOUT\";\r\n    final String _PMODE_OUT \u003d \"OUT\";\r\n    final String _PMODE_UNK \u003d \"Unknown\";\r\n    final String PMODES \u003d _PMODE_IN + \", \" + _PMODE_INOUT + \", \" + _PMODE_OUT + \", \" + _PMODE_UNK;\r\n    Options commandLineOptions;\r\n    commandLineOptions \u003d new Options();\r\n    commandLineOptions.addOption(OPT_HELP, OPT_HELP_, false, \"Prints help and quits\");\r\n    commandLineOptions.addOption(OPT_DRIVER, \"driver\", true, \"JDBC driver class name\");\r\n    commandLineOptions.addOption(OPT_DRIVER_INFO, \"info\", false, \"Prints driver information and properties. If \" + OPT + OPT_CONNECTION + \" is not specified, all drivers on the classpath are displayed.\");\r\n    commandLineOptions.addOption(OPT_CONNECTION, \"url\", true, \"Connection URL\");\r\n    commandLineOptions.addOption(OPT_USER, \"user\", true, \"A database user name\");\r\n    commandLineOptions.addOption(OPT_PASSWORD, OPT_PASSWORD_L, true, \"The database password for the user specified with the \" + OPT + OPT_USER + \" option. You can obfuscate the password with org.mortbay.jetty.security.Password, see http://docs.codehaus.org/display/JETTY/Securing+Passwords\");\r\n    commandLineOptions.addOption(OPT_SQL, OPT_SQL_L, true, \"Runs SQL or {call stored_procedure(?, ?)} or {?\u003dcall function(?, ?)}\");\r\n    commandLineOptions.addOption(OPT_FILE_SFMD, \"sfmd\", true, \"Writes a SFMD file for the given SQL\");\r\n    commandLineOptions.addOption(OPT_FILE_BINDING, \"jdbc\", true, \"Writes a JDBC binding node file for the given SQL\");\r\n    commandLineOptions.addOption(OPT_FILE_JDBC, \"node\", true, \"Writes a JDBC node file for the given SQL (internal debugging)\");\r\n    commandLineOptions.addOption(OPT_WRITE_TO_FILE, \"outfile\", true, \"Writes the SQL output to the given file\");\r\n    commandLineOptions.addOption(OPT_DESCRIPTION, \"description\", true, \"SFMD description. A default description is used if omited. Example: \" + OPT + OPT_DESCRIPTION + \" \\\"Runs such and such\\\"\");\r\n    commandLineOptions.addOption(OPT_INTERACTIVE, \"interactive\", false, \"Runs in interactive mode, reading and writing from the console, \u0027go\u0027 or \u0027/\u0027 sends a statement\");\r\n    commandLineOptions.addOption(OPT_TIMING, \"printTiming\", false, \"Prints timing information\");\r\n    commandLineOptions.addOption(OPT_METADATA, \"printMetaData\", false, \"Prints metadata information\");\r\n    commandLineOptions.addOption(OPT_STACK_TRACE, \"printStack\", false, \"Prints stack traces on errors\");\r\n    Option option \u003d new Option(OPT_COLUMN_NAMES, \"columnNames\", true, \"Column XML names; default names column labels. Example: \" + OPT + OPT_COLUMN_NAMES + \" \\\"cname1 cname2\\\"\");\r\n    commandLineOptions.addOption(option);\r\n    option \u003d new Option(OPT_PARAM_NAMES, \"paramNames\", true, \"Parameter XML names; default names are param1, param2, etc. Example: \" + OPT + OPT_PARAM_NAMES + \" \\\"pname1 pname2\\\"\");\r\n    commandLineOptions.addOption(option);\r\n    OptionGroup pOutTypesOptionGroup \u003d new OptionGroup();\r\n    String pOutTypesOptionGroupDoc \u003d OPT + OPT_PARAM_TYPES_INT + \" and \" + OPT + OPT_PARAM_TYPES_NAME + \" are mutually exclusive.\";\r\n    final String typesClassName \u003d Types.class.getName();\r\n    option \u003d new Option(OPT_PARAM_TYPES_INT, \"paramTypes\", true, \"Parameter types from \" + typesClassName + \". \" + pOutTypesOptionGroupDoc + \" Example: \" + OPT + OPT_PARAM_TYPES_INT + \" \\\"-10 12\\\"\");\r\n    commandLineOptions.addOption(option);\r\n    option \u003d new Option(OPT_PARAM_TYPES_NAME, \"paramTypeNames\", true, \"Parameter \" + typesClassName + \" names. \" + pOutTypesOptionGroupDoc + \" Example: \" + OPT + OPT_PARAM_TYPES_NAME + \" \\\"CURSOR VARCHAR\\\"\");\r\n    commandLineOptions.addOption(option);\r\n    commandLineOptions.addOptionGroup(pOutTypesOptionGroup);\r\n    OptionGroup modesOptionGroup \u003d new OptionGroup();\r\n    String modesOptionGroupDoc \u003d OPT + OPT_PARAM_MODES_INT + \" and \" + OPT + OPT_PARAM_MODES_NAME + \" are mutually exclusive.\";\r\n    option \u003d new Option(OPT_PARAM_MODES_INT, \"paramModes\", true, \"Parameters modes (\" + ParameterMetaData.parameterModeIn + \"\u003dIN, \" + ParameterMetaData.parameterModeInOut + \"\u003dINOUT, \" + ParameterMetaData.parameterModeOut + \"\u003dOUT, \" + ParameterMetaData.parameterModeUnknown + \"\u003dUnknown\" + \"). \" + modesOptionGroupDoc + \" Example for 2 parameters, OUT and IN: \" + OPT + OPT_PARAM_MODES_INT + \" \\\"\" + ParameterMetaData.parameterModeOut + \" \" + ParameterMetaData.parameterModeIn + \"\\\"\");\r\n    modesOptionGroup.addOption(option);\r\n    option \u003d new Option(OPT_PARAM_MODES_NAME, \"paramModeNames\", true, \"Parameters mode names (\" + PMODES + \"). \" + modesOptionGroupDoc + \" Example for 2 parameters, OUT and IN: \" + OPT + OPT_PARAM_MODES_NAME + \" \\\"\" + _PMODE_OUT + \" \" + _PMODE_IN + \"\\\"\");\r\n    modesOptionGroup.addOption(option);\r\n    commandLineOptions.addOptionGroup(modesOptionGroup);\r\n    option \u003d new Option(null, OPT_TRIM_L, true, \"Trims leading and trailing spaces from all column values. Column XML names can be optionally specified to set which columns to trim.\");\r\n    option.setOptionalArg(true);\r\n    commandLineOptions.addOption(option);\r\n    option \u003d new Option(OPT_JDBC_TO_SFMD, OPT_JDBC_TO_SFMD_L, true, \"Converts the JDBC file in the first argument to an SMFD file specified in the second argument.\");\r\n    option.setArgs(2);\r\n    commandLineOptions.addOption(option);\r\n    new HelpFormatter().printHelp(this.getClass().getName(), commandLineOptions);\r\n}",
      "path": "src/test/java/org/apache/commons/cli/bug/BugCLI162Test.java",
      "functionStartLine": 48,
      "functionName": "testPrintHelpLongLines",
      "functionAnnotation": "@Test",
      "functionDoc": "",
      "diff": "@@ -1,82 +1,83 @@\n+@Test\r\n public void testPrintHelpLongLines() {\r\n     final String OPT \u003d \"-\";\r\n     final String OPT_COLUMN_NAMES \u003d \"l\";\r\n     final String OPT_CONNECTION \u003d \"c\";\r\n     final String OPT_DESCRIPTION \u003d \"e\";\r\n     final String OPT_DRIVER \u003d \"d\";\r\n     final String OPT_DRIVER_INFO \u003d \"n\";\r\n     final String OPT_FILE_BINDING \u003d \"b\";\r\n     final String OPT_FILE_JDBC \u003d \"j\";\r\n     final String OPT_FILE_SFMD \u003d \"f\";\r\n     final String OPT_HELP \u003d \"h\";\r\n     final String OPT_HELP_ \u003d \"help\";\r\n     final String OPT_INTERACTIVE \u003d \"i\";\r\n     final String OPT_JDBC_TO_SFMD \u003d \"2\";\r\n     final String OPT_JDBC_TO_SFMD_L \u003d \"jdbc2sfmd\";\r\n     final String OPT_METADATA \u003d \"m\";\r\n     final String OPT_PARAM_MODES_INT \u003d \"o\";\r\n     final String OPT_PARAM_MODES_NAME \u003d \"O\";\r\n     final String OPT_PARAM_NAMES \u003d \"a\";\r\n     final String OPT_PARAM_TYPES_INT \u003d \"y\";\r\n     final String OPT_PARAM_TYPES_NAME \u003d \"Y\";\r\n     final String OPT_PASSWORD \u003d \"p\";\r\n     final String OPT_PASSWORD_L \u003d \"password\";\r\n     final String OPT_SQL \u003d \"s\";\r\n     final String OPT_SQL_L \u003d \"sql\";\r\n     final String OPT_SQL_SPLIT_DEFAULT \u003d \"###\";\r\n     final String OPT_SQL_SPLIT_L \u003d \"splitSql\";\r\n     final String OPT_STACK_TRACE \u003d \"t\";\r\n     final String OPT_TIMING \u003d \"g\";\r\n     final String OPT_TRIM_L \u003d \"trim\";\r\n     final String OPT_USER \u003d \"u\";\r\n     final String OPT_WRITE_TO_FILE \u003d \"w\";\r\n     final String _PMODE_IN \u003d \"IN\";\r\n     final String _PMODE_INOUT \u003d \"INOUT\";\r\n     final String _PMODE_OUT \u003d \"OUT\";\r\n     final String _PMODE_UNK \u003d \"Unknown\";\r\n     final String PMODES \u003d _PMODE_IN + \", \" + _PMODE_INOUT + \", \" + _PMODE_OUT + \", \" + _PMODE_UNK;\r\n     Options commandLineOptions;\r\n     commandLineOptions \u003d new Options();\r\n     commandLineOptions.addOption(OPT_HELP, OPT_HELP_, false, \"Prints help and quits\");\r\n     commandLineOptions.addOption(OPT_DRIVER, \"driver\", true, \"JDBC driver class name\");\r\n     commandLineOptions.addOption(OPT_DRIVER_INFO, \"info\", false, \"Prints driver information and properties. If \" + OPT + OPT_CONNECTION + \" is not specified, all drivers on the classpath are displayed.\");\r\n     commandLineOptions.addOption(OPT_CONNECTION, \"url\", true, \"Connection URL\");\r\n     commandLineOptions.addOption(OPT_USER, \"user\", true, \"A database user name\");\r\n     commandLineOptions.addOption(OPT_PASSWORD, OPT_PASSWORD_L, true, \"The database password for the user specified with the \" + OPT + OPT_USER + \" option. You can obfuscate the password with org.mortbay.jetty.security.Password, see http://docs.codehaus.org/display/JETTY/Securing+Passwords\");\r\n     commandLineOptions.addOption(OPT_SQL, OPT_SQL_L, true, \"Runs SQL or {call stored_procedure(?, ?)} or {?\u003dcall function(?, ?)}\");\r\n     commandLineOptions.addOption(OPT_FILE_SFMD, \"sfmd\", true, \"Writes a SFMD file for the given SQL\");\r\n     commandLineOptions.addOption(OPT_FILE_BINDING, \"jdbc\", true, \"Writes a JDBC binding node file for the given SQL\");\r\n     commandLineOptions.addOption(OPT_FILE_JDBC, \"node\", true, \"Writes a JDBC node file for the given SQL (internal debugging)\");\r\n     commandLineOptions.addOption(OPT_WRITE_TO_FILE, \"outfile\", true, \"Writes the SQL output to the given file\");\r\n     commandLineOptions.addOption(OPT_DESCRIPTION, \"description\", true, \"SFMD description. A default description is used if omited. Example: \" + OPT + OPT_DESCRIPTION + \" \\\"Runs such and such\\\"\");\r\n     commandLineOptions.addOption(OPT_INTERACTIVE, \"interactive\", false, \"Runs in interactive mode, reading and writing from the console, \u0027go\u0027 or \u0027/\u0027 sends a statement\");\r\n     commandLineOptions.addOption(OPT_TIMING, \"printTiming\", false, \"Prints timing information\");\r\n     commandLineOptions.addOption(OPT_METADATA, \"printMetaData\", false, \"Prints metadata information\");\r\n     commandLineOptions.addOption(OPT_STACK_TRACE, \"printStack\", false, \"Prints stack traces on errors\");\r\n     Option option \u003d new Option(OPT_COLUMN_NAMES, \"columnNames\", true, \"Column XML names; default names column labels. Example: \" + OPT + OPT_COLUMN_NAMES + \" \\\"cname1 cname2\\\"\");\r\n     commandLineOptions.addOption(option);\r\n     option \u003d new Option(OPT_PARAM_NAMES, \"paramNames\", true, \"Parameter XML names; default names are param1, param2, etc. Example: \" + OPT + OPT_PARAM_NAMES + \" \\\"pname1 pname2\\\"\");\r\n     commandLineOptions.addOption(option);\r\n     OptionGroup pOutTypesOptionGroup \u003d new OptionGroup();\r\n     String pOutTypesOptionGroupDoc \u003d OPT + OPT_PARAM_TYPES_INT + \" and \" + OPT + OPT_PARAM_TYPES_NAME + \" are mutually exclusive.\";\r\n     final String typesClassName \u003d Types.class.getName();\r\n     option \u003d new Option(OPT_PARAM_TYPES_INT, \"paramTypes\", true, \"Parameter types from \" + typesClassName + \". \" + pOutTypesOptionGroupDoc + \" Example: \" + OPT + OPT_PARAM_TYPES_INT + \" \\\"-10 12\\\"\");\r\n     commandLineOptions.addOption(option);\r\n     option \u003d new Option(OPT_PARAM_TYPES_NAME, \"paramTypeNames\", true, \"Parameter \" + typesClassName + \" names. \" + pOutTypesOptionGroupDoc + \" Example: \" + OPT + OPT_PARAM_TYPES_NAME + \" \\\"CURSOR VARCHAR\\\"\");\r\n     commandLineOptions.addOption(option);\r\n     commandLineOptions.addOptionGroup(pOutTypesOptionGroup);\r\n     OptionGroup modesOptionGroup \u003d new OptionGroup();\r\n     String modesOptionGroupDoc \u003d OPT + OPT_PARAM_MODES_INT + \" and \" + OPT + OPT_PARAM_MODES_NAME + \" are mutually exclusive.\";\r\n     option \u003d new Option(OPT_PARAM_MODES_INT, \"paramModes\", true, \"Parameters modes (\" + ParameterMetaData.parameterModeIn + \"\u003dIN, \" + ParameterMetaData.parameterModeInOut + \"\u003dINOUT, \" + ParameterMetaData.parameterModeOut + \"\u003dOUT, \" + ParameterMetaData.parameterModeUnknown + \"\u003dUnknown\" + \"). \" + modesOptionGroupDoc + \" Example for 2 parameters, OUT and IN: \" + OPT + OPT_PARAM_MODES_INT + \" \\\"\" + ParameterMetaData.parameterModeOut + \" \" + ParameterMetaData.parameterModeIn + \"\\\"\");\r\n     modesOptionGroup.addOption(option);\r\n     option \u003d new Option(OPT_PARAM_MODES_NAME, \"paramModeNames\", true, \"Parameters mode names (\" + PMODES + \"). \" + modesOptionGroupDoc + \" Example for 2 parameters, OUT and IN: \" + OPT + OPT_PARAM_MODES_NAME + \" \\\"\" + _PMODE_OUT + \" \" + _PMODE_IN + \"\\\"\");\r\n     modesOptionGroup.addOption(option);\r\n     commandLineOptions.addOptionGroup(modesOptionGroup);\r\n     option \u003d new Option(null, OPT_TRIM_L, true, \"Trims leading and trailing spaces from all column values. Column XML names can be optionally specified to set which columns to trim.\");\r\n     option.setOptionalArg(true);\r\n     commandLineOptions.addOption(option);\r\n     option \u003d new Option(OPT_JDBC_TO_SFMD, OPT_JDBC_TO_SFMD_L, true, \"Converts the JDBC file in the first argument to an SMFD file specified in the second argument.\");\r\n     option.setArgs(2);\r\n     commandLineOptions.addOption(option);\r\n     new HelpFormatter().printHelp(this.getClass().getName(), commandLineOptions);\r\n }\n\\ No newline at end of file\n",
      "extendedDetails": {
        "oldValue": "",
        "newValue": "@Test"
      }
    },
    "f06a1b95c4568997295e987b9617be799c517845": {
      "type": "Yexceptionschange",
      "commitMessage": "Exceptions not thrown\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/cli/trunk@1440534 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "1/30/13 7:22 PM",
      "commitName": "f06a1b95c4568997295e987b9617be799c517845",
      "commitAuthor": "Sebastian Bazley",
      "commitDateOld": "6/16/10 12:41 PM",
      "commitNameOld": "cd745ecf52fb2fe8fed1c67fc9149e4be11a73f0",
      "commitAuthorOld": "Emmanuel Bourg",
      "daysBetweenCommits": 959.32,
      "commitsBetweenForRepo": 102,
      "commitsBetweenForFile": 1,
      "actualSource": "public void testPrintHelpLongLines() {\r\n    final String OPT \u003d \"-\";\r\n    final String OPT_COLUMN_NAMES \u003d \"l\";\r\n    final String OPT_CONNECTION \u003d \"c\";\r\n    final String OPT_DESCRIPTION \u003d \"e\";\r\n    final String OPT_DRIVER \u003d \"d\";\r\n    final String OPT_DRIVER_INFO \u003d \"n\";\r\n    final String OPT_FILE_BINDING \u003d \"b\";\r\n    final String OPT_FILE_JDBC \u003d \"j\";\r\n    final String OPT_FILE_SFMD \u003d \"f\";\r\n    final String OPT_HELP \u003d \"h\";\r\n    final String OPT_HELP_ \u003d \"help\";\r\n    final String OPT_INTERACTIVE \u003d \"i\";\r\n    final String OPT_JDBC_TO_SFMD \u003d \"2\";\r\n    final String OPT_JDBC_TO_SFMD_L \u003d \"jdbc2sfmd\";\r\n    final String OPT_METADATA \u003d \"m\";\r\n    final String OPT_PARAM_MODES_INT \u003d \"o\";\r\n    final String OPT_PARAM_MODES_NAME \u003d \"O\";\r\n    final String OPT_PARAM_NAMES \u003d \"a\";\r\n    final String OPT_PARAM_TYPES_INT \u003d \"y\";\r\n    final String OPT_PARAM_TYPES_NAME \u003d \"Y\";\r\n    final String OPT_PASSWORD \u003d \"p\";\r\n    final String OPT_PASSWORD_L \u003d \"password\";\r\n    final String OPT_SQL \u003d \"s\";\r\n    final String OPT_SQL_L \u003d \"sql\";\r\n    final String OPT_SQL_SPLIT_DEFAULT \u003d \"###\";\r\n    final String OPT_SQL_SPLIT_L \u003d \"splitSql\";\r\n    final String OPT_STACK_TRACE \u003d \"t\";\r\n    final String OPT_TIMING \u003d \"g\";\r\n    final String OPT_TRIM_L \u003d \"trim\";\r\n    final String OPT_USER \u003d \"u\";\r\n    final String OPT_WRITE_TO_FILE \u003d \"w\";\r\n    final String _PMODE_IN \u003d \"IN\";\r\n    final String _PMODE_INOUT \u003d \"INOUT\";\r\n    final String _PMODE_OUT \u003d \"OUT\";\r\n    final String _PMODE_UNK \u003d \"Unknown\";\r\n    final String PMODES \u003d _PMODE_IN + \", \" + _PMODE_INOUT + \", \" + _PMODE_OUT + \", \" + _PMODE_UNK;\r\n    Options commandLineOptions;\r\n    commandLineOptions \u003d new Options();\r\n    commandLineOptions.addOption(OPT_HELP, OPT_HELP_, false, \"Prints help and quits\");\r\n    commandLineOptions.addOption(OPT_DRIVER, \"driver\", true, \"JDBC driver class name\");\r\n    commandLineOptions.addOption(OPT_DRIVER_INFO, \"info\", false, \"Prints driver information and properties. If \" + OPT + OPT_CONNECTION + \" is not specified, all drivers on the classpath are displayed.\");\r\n    commandLineOptions.addOption(OPT_CONNECTION, \"url\", true, \"Connection URL\");\r\n    commandLineOptions.addOption(OPT_USER, \"user\", true, \"A database user name\");\r\n    commandLineOptions.addOption(OPT_PASSWORD, OPT_PASSWORD_L, true, \"The database password for the user specified with the \" + OPT + OPT_USER + \" option. You can obfuscate the password with org.mortbay.jetty.security.Password, see http://docs.codehaus.org/display/JETTY/Securing+Passwords\");\r\n    commandLineOptions.addOption(OPT_SQL, OPT_SQL_L, true, \"Runs SQL or {call stored_procedure(?, ?)} or {?\u003dcall function(?, ?)}\");\r\n    commandLineOptions.addOption(OPT_FILE_SFMD, \"sfmd\", true, \"Writes a SFMD file for the given SQL\");\r\n    commandLineOptions.addOption(OPT_FILE_BINDING, \"jdbc\", true, \"Writes a JDBC binding node file for the given SQL\");\r\n    commandLineOptions.addOption(OPT_FILE_JDBC, \"node\", true, \"Writes a JDBC node file for the given SQL (internal debugging)\");\r\n    commandLineOptions.addOption(OPT_WRITE_TO_FILE, \"outfile\", true, \"Writes the SQL output to the given file\");\r\n    commandLineOptions.addOption(OPT_DESCRIPTION, \"description\", true, \"SFMD description. A default description is used if omited. Example: \" + OPT + OPT_DESCRIPTION + \" \\\"Runs such and such\\\"\");\r\n    commandLineOptions.addOption(OPT_INTERACTIVE, \"interactive\", false, \"Runs in interactive mode, reading and writing from the console, \u0027go\u0027 or \u0027/\u0027 sends a statement\");\r\n    commandLineOptions.addOption(OPT_TIMING, \"printTiming\", false, \"Prints timing information\");\r\n    commandLineOptions.addOption(OPT_METADATA, \"printMetaData\", false, \"Prints metadata information\");\r\n    commandLineOptions.addOption(OPT_STACK_TRACE, \"printStack\", false, \"Prints stack traces on errors\");\r\n    Option option \u003d new Option(OPT_COLUMN_NAMES, \"columnNames\", true, \"Column XML names; default names column labels. Example: \" + OPT + OPT_COLUMN_NAMES + \" \\\"cname1 cname2\\\"\");\r\n    commandLineOptions.addOption(option);\r\n    option \u003d new Option(OPT_PARAM_NAMES, \"paramNames\", true, \"Parameter XML names; default names are param1, param2, etc. Example: \" + OPT + OPT_PARAM_NAMES + \" \\\"pname1 pname2\\\"\");\r\n    commandLineOptions.addOption(option);\r\n    OptionGroup pOutTypesOptionGroup \u003d new OptionGroup();\r\n    String pOutTypesOptionGroupDoc \u003d OPT + OPT_PARAM_TYPES_INT + \" and \" + OPT + OPT_PARAM_TYPES_NAME + \" are mutually exclusive.\";\r\n    final String typesClassName \u003d Types.class.getName();\r\n    option \u003d new Option(OPT_PARAM_TYPES_INT, \"paramTypes\", true, \"Parameter types from \" + typesClassName + \". \" + pOutTypesOptionGroupDoc + \" Example: \" + OPT + OPT_PARAM_TYPES_INT + \" \\\"-10 12\\\"\");\r\n    commandLineOptions.addOption(option);\r\n    option \u003d new Option(OPT_PARAM_TYPES_NAME, \"paramTypeNames\", true, \"Parameter \" + typesClassName + \" names. \" + pOutTypesOptionGroupDoc + \" Example: \" + OPT + OPT_PARAM_TYPES_NAME + \" \\\"CURSOR VARCHAR\\\"\");\r\n    commandLineOptions.addOption(option);\r\n    commandLineOptions.addOptionGroup(pOutTypesOptionGroup);\r\n    OptionGroup modesOptionGroup \u003d new OptionGroup();\r\n    String modesOptionGroupDoc \u003d OPT + OPT_PARAM_MODES_INT + \" and \" + OPT + OPT_PARAM_MODES_NAME + \" are mutually exclusive.\";\r\n    option \u003d new Option(OPT_PARAM_MODES_INT, \"paramModes\", true, \"Parameters modes (\" + ParameterMetaData.parameterModeIn + \"\u003dIN, \" + ParameterMetaData.parameterModeInOut + \"\u003dINOUT, \" + ParameterMetaData.parameterModeOut + \"\u003dOUT, \" + ParameterMetaData.parameterModeUnknown + \"\u003dUnknown\" + \"). \" + modesOptionGroupDoc + \" Example for 2 parameters, OUT and IN: \" + OPT + OPT_PARAM_MODES_INT + \" \\\"\" + ParameterMetaData.parameterModeOut + \" \" + ParameterMetaData.parameterModeIn + \"\\\"\");\r\n    modesOptionGroup.addOption(option);\r\n    option \u003d new Option(OPT_PARAM_MODES_NAME, \"paramModeNames\", true, \"Parameters mode names (\" + PMODES + \"). \" + modesOptionGroupDoc + \" Example for 2 parameters, OUT and IN: \" + OPT + OPT_PARAM_MODES_NAME + \" \\\"\" + _PMODE_OUT + \" \" + _PMODE_IN + \"\\\"\");\r\n    modesOptionGroup.addOption(option);\r\n    commandLineOptions.addOptionGroup(modesOptionGroup);\r\n    option \u003d new Option(null, OPT_TRIM_L, true, \"Trims leading and trailing spaces from all column values. Column XML names can be optionally specified to set which columns to trim.\");\r\n    option.setOptionalArg(true);\r\n    commandLineOptions.addOption(option);\r\n    option \u003d new Option(OPT_JDBC_TO_SFMD, OPT_JDBC_TO_SFMD_L, true, \"Converts the JDBC file in the first argument to an SMFD file specified in the second argument.\");\r\n    option.setArgs(2);\r\n    commandLineOptions.addOption(option);\r\n    new HelpFormatter().printHelp(this.getClass().getName(), commandLineOptions);\r\n}",
      "path": "src/test/java/org/apache/commons/cli/bug/BugCLI162Test.java",
      "functionStartLine": 45,
      "functionName": "testPrintHelpLongLines",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,82 +1,82 @@\n-public void testPrintHelpLongLines() throws ParseException, IOException {\r\n+public void testPrintHelpLongLines() {\r\n     final String OPT \u003d \"-\";\r\n     final String OPT_COLUMN_NAMES \u003d \"l\";\r\n     final String OPT_CONNECTION \u003d \"c\";\r\n     final String OPT_DESCRIPTION \u003d \"e\";\r\n     final String OPT_DRIVER \u003d \"d\";\r\n     final String OPT_DRIVER_INFO \u003d \"n\";\r\n     final String OPT_FILE_BINDING \u003d \"b\";\r\n     final String OPT_FILE_JDBC \u003d \"j\";\r\n     final String OPT_FILE_SFMD \u003d \"f\";\r\n     final String OPT_HELP \u003d \"h\";\r\n     final String OPT_HELP_ \u003d \"help\";\r\n     final String OPT_INTERACTIVE \u003d \"i\";\r\n     final String OPT_JDBC_TO_SFMD \u003d \"2\";\r\n     final String OPT_JDBC_TO_SFMD_L \u003d \"jdbc2sfmd\";\r\n     final String OPT_METADATA \u003d \"m\";\r\n     final String OPT_PARAM_MODES_INT \u003d \"o\";\r\n     final String OPT_PARAM_MODES_NAME \u003d \"O\";\r\n     final String OPT_PARAM_NAMES \u003d \"a\";\r\n     final String OPT_PARAM_TYPES_INT \u003d \"y\";\r\n     final String OPT_PARAM_TYPES_NAME \u003d \"Y\";\r\n     final String OPT_PASSWORD \u003d \"p\";\r\n     final String OPT_PASSWORD_L \u003d \"password\";\r\n     final String OPT_SQL \u003d \"s\";\r\n     final String OPT_SQL_L \u003d \"sql\";\r\n     final String OPT_SQL_SPLIT_DEFAULT \u003d \"###\";\r\n     final String OPT_SQL_SPLIT_L \u003d \"splitSql\";\r\n     final String OPT_STACK_TRACE \u003d \"t\";\r\n     final String OPT_TIMING \u003d \"g\";\r\n     final String OPT_TRIM_L \u003d \"trim\";\r\n     final String OPT_USER \u003d \"u\";\r\n     final String OPT_WRITE_TO_FILE \u003d \"w\";\r\n     final String _PMODE_IN \u003d \"IN\";\r\n     final String _PMODE_INOUT \u003d \"INOUT\";\r\n     final String _PMODE_OUT \u003d \"OUT\";\r\n     final String _PMODE_UNK \u003d \"Unknown\";\r\n     final String PMODES \u003d _PMODE_IN + \", \" + _PMODE_INOUT + \", \" + _PMODE_OUT + \", \" + _PMODE_UNK;\r\n     Options commandLineOptions;\r\n     commandLineOptions \u003d new Options();\r\n     commandLineOptions.addOption(OPT_HELP, OPT_HELP_, false, \"Prints help and quits\");\r\n     commandLineOptions.addOption(OPT_DRIVER, \"driver\", true, \"JDBC driver class name\");\r\n     commandLineOptions.addOption(OPT_DRIVER_INFO, \"info\", false, \"Prints driver information and properties. If \" + OPT + OPT_CONNECTION + \" is not specified, all drivers on the classpath are displayed.\");\r\n     commandLineOptions.addOption(OPT_CONNECTION, \"url\", true, \"Connection URL\");\r\n     commandLineOptions.addOption(OPT_USER, \"user\", true, \"A database user name\");\r\n     commandLineOptions.addOption(OPT_PASSWORD, OPT_PASSWORD_L, true, \"The database password for the user specified with the \" + OPT + OPT_USER + \" option. You can obfuscate the password with org.mortbay.jetty.security.Password, see http://docs.codehaus.org/display/JETTY/Securing+Passwords\");\r\n     commandLineOptions.addOption(OPT_SQL, OPT_SQL_L, true, \"Runs SQL or {call stored_procedure(?, ?)} or {?\u003dcall function(?, ?)}\");\r\n     commandLineOptions.addOption(OPT_FILE_SFMD, \"sfmd\", true, \"Writes a SFMD file for the given SQL\");\r\n     commandLineOptions.addOption(OPT_FILE_BINDING, \"jdbc\", true, \"Writes a JDBC binding node file for the given SQL\");\r\n     commandLineOptions.addOption(OPT_FILE_JDBC, \"node\", true, \"Writes a JDBC node file for the given SQL (internal debugging)\");\r\n     commandLineOptions.addOption(OPT_WRITE_TO_FILE, \"outfile\", true, \"Writes the SQL output to the given file\");\r\n     commandLineOptions.addOption(OPT_DESCRIPTION, \"description\", true, \"SFMD description. A default description is used if omited. Example: \" + OPT + OPT_DESCRIPTION + \" \\\"Runs such and such\\\"\");\r\n     commandLineOptions.addOption(OPT_INTERACTIVE, \"interactive\", false, \"Runs in interactive mode, reading and writing from the console, \u0027go\u0027 or \u0027/\u0027 sends a statement\");\r\n     commandLineOptions.addOption(OPT_TIMING, \"printTiming\", false, \"Prints timing information\");\r\n     commandLineOptions.addOption(OPT_METADATA, \"printMetaData\", false, \"Prints metadata information\");\r\n     commandLineOptions.addOption(OPT_STACK_TRACE, \"printStack\", false, \"Prints stack traces on errors\");\r\n     Option option \u003d new Option(OPT_COLUMN_NAMES, \"columnNames\", true, \"Column XML names; default names column labels. Example: \" + OPT + OPT_COLUMN_NAMES + \" \\\"cname1 cname2\\\"\");\r\n     commandLineOptions.addOption(option);\r\n     option \u003d new Option(OPT_PARAM_NAMES, \"paramNames\", true, \"Parameter XML names; default names are param1, param2, etc. Example: \" + OPT + OPT_PARAM_NAMES + \" \\\"pname1 pname2\\\"\");\r\n     commandLineOptions.addOption(option);\r\n     OptionGroup pOutTypesOptionGroup \u003d new OptionGroup();\r\n     String pOutTypesOptionGroupDoc \u003d OPT + OPT_PARAM_TYPES_INT + \" and \" + OPT + OPT_PARAM_TYPES_NAME + \" are mutually exclusive.\";\r\n     final String typesClassName \u003d Types.class.getName();\r\n     option \u003d new Option(OPT_PARAM_TYPES_INT, \"paramTypes\", true, \"Parameter types from \" + typesClassName + \". \" + pOutTypesOptionGroupDoc + \" Example: \" + OPT + OPT_PARAM_TYPES_INT + \" \\\"-10 12\\\"\");\r\n     commandLineOptions.addOption(option);\r\n     option \u003d new Option(OPT_PARAM_TYPES_NAME, \"paramTypeNames\", true, \"Parameter \" + typesClassName + \" names. \" + pOutTypesOptionGroupDoc + \" Example: \" + OPT + OPT_PARAM_TYPES_NAME + \" \\\"CURSOR VARCHAR\\\"\");\r\n     commandLineOptions.addOption(option);\r\n     commandLineOptions.addOptionGroup(pOutTypesOptionGroup);\r\n     OptionGroup modesOptionGroup \u003d new OptionGroup();\r\n     String modesOptionGroupDoc \u003d OPT + OPT_PARAM_MODES_INT + \" and \" + OPT + OPT_PARAM_MODES_NAME + \" are mutually exclusive.\";\r\n     option \u003d new Option(OPT_PARAM_MODES_INT, \"paramModes\", true, \"Parameters modes (\" + ParameterMetaData.parameterModeIn + \"\u003dIN, \" + ParameterMetaData.parameterModeInOut + \"\u003dINOUT, \" + ParameterMetaData.parameterModeOut + \"\u003dOUT, \" + ParameterMetaData.parameterModeUnknown + \"\u003dUnknown\" + \"). \" + modesOptionGroupDoc + \" Example for 2 parameters, OUT and IN: \" + OPT + OPT_PARAM_MODES_INT + \" \\\"\" + ParameterMetaData.parameterModeOut + \" \" + ParameterMetaData.parameterModeIn + \"\\\"\");\r\n     modesOptionGroup.addOption(option);\r\n     option \u003d new Option(OPT_PARAM_MODES_NAME, \"paramModeNames\", true, \"Parameters mode names (\" + PMODES + \"). \" + modesOptionGroupDoc + \" Example for 2 parameters, OUT and IN: \" + OPT + OPT_PARAM_MODES_NAME + \" \\\"\" + _PMODE_OUT + \" \" + _PMODE_IN + \"\\\"\");\r\n     modesOptionGroup.addOption(option);\r\n     commandLineOptions.addOptionGroup(modesOptionGroup);\r\n     option \u003d new Option(null, OPT_TRIM_L, true, \"Trims leading and trailing spaces from all column values. Column XML names can be optionally specified to set which columns to trim.\");\r\n     option.setOptionalArg(true);\r\n     commandLineOptions.addOption(option);\r\n     option \u003d new Option(OPT_JDBC_TO_SFMD, OPT_JDBC_TO_SFMD_L, true, \"Converts the JDBC file in the first argument to an SMFD file specified in the second argument.\");\r\n     option.setArgs(2);\r\n     commandLineOptions.addOption(option);\r\n     new HelpFormatter().printHelp(this.getClass().getName(), commandLineOptions);\r\n }\n\\ No newline at end of file\n",
      "extendedDetails": {
        "oldValue": "[ParseException, IOException]",
        "newValue": "[]"
      }
    },
    "cd745ecf52fb2fe8fed1c67fc9149e4be11a73f0": {
      "type": "Yfilerename",
      "commitMessage": "Switched to the Maven 2 default directory layout (part 1)\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/cli/trunk@955169 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "6/16/10 12:41 PM",
      "commitName": "cd745ecf52fb2fe8fed1c67fc9149e4be11a73f0",
      "commitAuthor": "Emmanuel Bourg",
      "commitDateOld": "6/16/10 12:36 PM",
      "commitNameOld": "106f3b8dd48d32cbfcba4a42e1161505c2e3cac6",
      "commitAuthorOld": "Emmanuel Bourg",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "public void testPrintHelpLongLines() throws ParseException, IOException {\r\n    final String OPT \u003d \"-\";\r\n    final String OPT_COLUMN_NAMES \u003d \"l\";\r\n    final String OPT_CONNECTION \u003d \"c\";\r\n    final String OPT_DESCRIPTION \u003d \"e\";\r\n    final String OPT_DRIVER \u003d \"d\";\r\n    final String OPT_DRIVER_INFO \u003d \"n\";\r\n    final String OPT_FILE_BINDING \u003d \"b\";\r\n    final String OPT_FILE_JDBC \u003d \"j\";\r\n    final String OPT_FILE_SFMD \u003d \"f\";\r\n    final String OPT_HELP \u003d \"h\";\r\n    final String OPT_HELP_ \u003d \"help\";\r\n    final String OPT_INTERACTIVE \u003d \"i\";\r\n    final String OPT_JDBC_TO_SFMD \u003d \"2\";\r\n    final String OPT_JDBC_TO_SFMD_L \u003d \"jdbc2sfmd\";\r\n    final String OPT_METADATA \u003d \"m\";\r\n    final String OPT_PARAM_MODES_INT \u003d \"o\";\r\n    final String OPT_PARAM_MODES_NAME \u003d \"O\";\r\n    final String OPT_PARAM_NAMES \u003d \"a\";\r\n    final String OPT_PARAM_TYPES_INT \u003d \"y\";\r\n    final String OPT_PARAM_TYPES_NAME \u003d \"Y\";\r\n    final String OPT_PASSWORD \u003d \"p\";\r\n    final String OPT_PASSWORD_L \u003d \"password\";\r\n    final String OPT_SQL \u003d \"s\";\r\n    final String OPT_SQL_L \u003d \"sql\";\r\n    final String OPT_SQL_SPLIT_DEFAULT \u003d \"###\";\r\n    final String OPT_SQL_SPLIT_L \u003d \"splitSql\";\r\n    final String OPT_STACK_TRACE \u003d \"t\";\r\n    final String OPT_TIMING \u003d \"g\";\r\n    final String OPT_TRIM_L \u003d \"trim\";\r\n    final String OPT_USER \u003d \"u\";\r\n    final String OPT_WRITE_TO_FILE \u003d \"w\";\r\n    final String _PMODE_IN \u003d \"IN\";\r\n    final String _PMODE_INOUT \u003d \"INOUT\";\r\n    final String _PMODE_OUT \u003d \"OUT\";\r\n    final String _PMODE_UNK \u003d \"Unknown\";\r\n    final String PMODES \u003d _PMODE_IN + \", \" + _PMODE_INOUT + \", \" + _PMODE_OUT + \", \" + _PMODE_UNK;\r\n    Options commandLineOptions;\r\n    commandLineOptions \u003d new Options();\r\n    commandLineOptions.addOption(OPT_HELP, OPT_HELP_, false, \"Prints help and quits\");\r\n    commandLineOptions.addOption(OPT_DRIVER, \"driver\", true, \"JDBC driver class name\");\r\n    commandLineOptions.addOption(OPT_DRIVER_INFO, \"info\", false, \"Prints driver information and properties. If \" + OPT + OPT_CONNECTION + \" is not specified, all drivers on the classpath are displayed.\");\r\n    commandLineOptions.addOption(OPT_CONNECTION, \"url\", true, \"Connection URL\");\r\n    commandLineOptions.addOption(OPT_USER, \"user\", true, \"A database user name\");\r\n    commandLineOptions.addOption(OPT_PASSWORD, OPT_PASSWORD_L, true, \"The database password for the user specified with the \" + OPT + OPT_USER + \" option. You can obfuscate the password with org.mortbay.jetty.security.Password, see http://docs.codehaus.org/display/JETTY/Securing+Passwords\");\r\n    commandLineOptions.addOption(OPT_SQL, OPT_SQL_L, true, \"Runs SQL or {call stored_procedure(?, ?)} or {?\u003dcall function(?, ?)}\");\r\n    commandLineOptions.addOption(OPT_FILE_SFMD, \"sfmd\", true, \"Writes a SFMD file for the given SQL\");\r\n    commandLineOptions.addOption(OPT_FILE_BINDING, \"jdbc\", true, \"Writes a JDBC binding node file for the given SQL\");\r\n    commandLineOptions.addOption(OPT_FILE_JDBC, \"node\", true, \"Writes a JDBC node file for the given SQL (internal debugging)\");\r\n    commandLineOptions.addOption(OPT_WRITE_TO_FILE, \"outfile\", true, \"Writes the SQL output to the given file\");\r\n    commandLineOptions.addOption(OPT_DESCRIPTION, \"description\", true, \"SFMD description. A default description is used if omited. Example: \" + OPT + OPT_DESCRIPTION + \" \\\"Runs such and such\\\"\");\r\n    commandLineOptions.addOption(OPT_INTERACTIVE, \"interactive\", false, \"Runs in interactive mode, reading and writing from the console, \u0027go\u0027 or \u0027/\u0027 sends a statement\");\r\n    commandLineOptions.addOption(OPT_TIMING, \"printTiming\", false, \"Prints timing information\");\r\n    commandLineOptions.addOption(OPT_METADATA, \"printMetaData\", false, \"Prints metadata information\");\r\n    commandLineOptions.addOption(OPT_STACK_TRACE, \"printStack\", false, \"Prints stack traces on errors\");\r\n    Option option \u003d new Option(OPT_COLUMN_NAMES, \"columnNames\", true, \"Column XML names; default names column labels. Example: \" + OPT + OPT_COLUMN_NAMES + \" \\\"cname1 cname2\\\"\");\r\n    commandLineOptions.addOption(option);\r\n    option \u003d new Option(OPT_PARAM_NAMES, \"paramNames\", true, \"Parameter XML names; default names are param1, param2, etc. Example: \" + OPT + OPT_PARAM_NAMES + \" \\\"pname1 pname2\\\"\");\r\n    commandLineOptions.addOption(option);\r\n    OptionGroup pOutTypesOptionGroup \u003d new OptionGroup();\r\n    String pOutTypesOptionGroupDoc \u003d OPT + OPT_PARAM_TYPES_INT + \" and \" + OPT + OPT_PARAM_TYPES_NAME + \" are mutually exclusive.\";\r\n    final String typesClassName \u003d Types.class.getName();\r\n    option \u003d new Option(OPT_PARAM_TYPES_INT, \"paramTypes\", true, \"Parameter types from \" + typesClassName + \". \" + pOutTypesOptionGroupDoc + \" Example: \" + OPT + OPT_PARAM_TYPES_INT + \" \\\"-10 12\\\"\");\r\n    commandLineOptions.addOption(option);\r\n    option \u003d new Option(OPT_PARAM_TYPES_NAME, \"paramTypeNames\", true, \"Parameter \" + typesClassName + \" names. \" + pOutTypesOptionGroupDoc + \" Example: \" + OPT + OPT_PARAM_TYPES_NAME + \" \\\"CURSOR VARCHAR\\\"\");\r\n    commandLineOptions.addOption(option);\r\n    commandLineOptions.addOptionGroup(pOutTypesOptionGroup);\r\n    OptionGroup modesOptionGroup \u003d new OptionGroup();\r\n    String modesOptionGroupDoc \u003d OPT + OPT_PARAM_MODES_INT + \" and \" + OPT + OPT_PARAM_MODES_NAME + \" are mutually exclusive.\";\r\n    option \u003d new Option(OPT_PARAM_MODES_INT, \"paramModes\", true, \"Parameters modes (\" + ParameterMetaData.parameterModeIn + \"\u003dIN, \" + ParameterMetaData.parameterModeInOut + \"\u003dINOUT, \" + ParameterMetaData.parameterModeOut + \"\u003dOUT, \" + ParameterMetaData.parameterModeUnknown + \"\u003dUnknown\" + \"). \" + modesOptionGroupDoc + \" Example for 2 parameters, OUT and IN: \" + OPT + OPT_PARAM_MODES_INT + \" \\\"\" + ParameterMetaData.parameterModeOut + \" \" + ParameterMetaData.parameterModeIn + \"\\\"\");\r\n    modesOptionGroup.addOption(option);\r\n    option \u003d new Option(OPT_PARAM_MODES_NAME, \"paramModeNames\", true, \"Parameters mode names (\" + PMODES + \"). \" + modesOptionGroupDoc + \" Example for 2 parameters, OUT and IN: \" + OPT + OPT_PARAM_MODES_NAME + \" \\\"\" + _PMODE_OUT + \" \" + _PMODE_IN + \"\\\"\");\r\n    modesOptionGroup.addOption(option);\r\n    commandLineOptions.addOptionGroup(modesOptionGroup);\r\n    option \u003d new Option(null, OPT_TRIM_L, true, \"Trims leading and trailing spaces from all column values. Column XML names can be optionally specified to set which columns to trim.\");\r\n    option.setOptionalArg(true);\r\n    commandLineOptions.addOption(option);\r\n    option \u003d new Option(OPT_JDBC_TO_SFMD, OPT_JDBC_TO_SFMD_L, true, \"Converts the JDBC file in the first argument to an SMFD file specified in the second argument.\");\r\n    option.setArgs(2);\r\n    commandLineOptions.addOption(option);\r\n    new HelpFormatter().printHelp(this.getClass().getName(), commandLineOptions);\r\n}",
      "path": "src/test/java/org/apache/commons/cli/bug/BugCLI162Test.java",
      "functionStartLine": 47,
      "functionName": "testPrintHelpLongLines",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "",
      "extendedDetails": {
        "oldPath": "src/test/org/apache/commons/cli/bug/BugCLI162Test.java",
        "newPath": "src/test/java/org/apache/commons/cli/bug/BugCLI162Test.java"
      }
    },
    "27cf61e22583db8e796e7c14f1f20fbc9538b1ef": {
      "type": "Yformatchange",
      "commitMessage": "Appling Oliver Heger\u0027s patch from CLI-175 to fix the build on Windows\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/cli/branches/cli-1.x@748927 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "2/28/09 11:55 PM",
      "commitName": "27cf61e22583db8e796e7c14f1f20fbc9538b1ef",
      "commitAuthor": "Henri Yandell",
      "commitDateOld": "2/27/09 11:38 AM",
      "commitNameOld": "6a585453d385449dc23d90479488f92f02cd6b83",
      "commitAuthorOld": "Henri Yandell",
      "daysBetweenCommits": 1.51,
      "commitsBetweenForRepo": 3,
      "commitsBetweenForFile": 1,
      "actualSource": "public void testPrintHelpLongLines() throws ParseException, IOException {\r\n    final String OPT \u003d \"-\";\r\n    final String OPT_COLUMN_NAMES \u003d \"l\";\r\n    final String OPT_CONNECTION \u003d \"c\";\r\n    final String OPT_DESCRIPTION \u003d \"e\";\r\n    final String OPT_DRIVER \u003d \"d\";\r\n    final String OPT_DRIVER_INFO \u003d \"n\";\r\n    final String OPT_FILE_BINDING \u003d \"b\";\r\n    final String OPT_FILE_JDBC \u003d \"j\";\r\n    final String OPT_FILE_SFMD \u003d \"f\";\r\n    final String OPT_HELP \u003d \"h\";\r\n    final String OPT_HELP_ \u003d \"help\";\r\n    final String OPT_INTERACTIVE \u003d \"i\";\r\n    final String OPT_JDBC_TO_SFMD \u003d \"2\";\r\n    final String OPT_JDBC_TO_SFMD_L \u003d \"jdbc2sfmd\";\r\n    final String OPT_METADATA \u003d \"m\";\r\n    final String OPT_PARAM_MODES_INT \u003d \"o\";\r\n    final String OPT_PARAM_MODES_NAME \u003d \"O\";\r\n    final String OPT_PARAM_NAMES \u003d \"a\";\r\n    final String OPT_PARAM_TYPES_INT \u003d \"y\";\r\n    final String OPT_PARAM_TYPES_NAME \u003d \"Y\";\r\n    final String OPT_PASSWORD \u003d \"p\";\r\n    final String OPT_PASSWORD_L \u003d \"password\";\r\n    final String OPT_SQL \u003d \"s\";\r\n    final String OPT_SQL_L \u003d \"sql\";\r\n    final String OPT_SQL_SPLIT_DEFAULT \u003d \"###\";\r\n    final String OPT_SQL_SPLIT_L \u003d \"splitSql\";\r\n    final String OPT_STACK_TRACE \u003d \"t\";\r\n    final String OPT_TIMING \u003d \"g\";\r\n    final String OPT_TRIM_L \u003d \"trim\";\r\n    final String OPT_USER \u003d \"u\";\r\n    final String OPT_WRITE_TO_FILE \u003d \"w\";\r\n    final String _PMODE_IN \u003d \"IN\";\r\n    final String _PMODE_INOUT \u003d \"INOUT\";\r\n    final String _PMODE_OUT \u003d \"OUT\";\r\n    final String _PMODE_UNK \u003d \"Unknown\";\r\n    final String PMODES \u003d _PMODE_IN + \", \" + _PMODE_INOUT + \", \" + _PMODE_OUT + \", \" + _PMODE_UNK;\r\n    Options commandLineOptions;\r\n    commandLineOptions \u003d new Options();\r\n    commandLineOptions.addOption(OPT_HELP, OPT_HELP_, false, \"Prints help and quits\");\r\n    commandLineOptions.addOption(OPT_DRIVER, \"driver\", true, \"JDBC driver class name\");\r\n    commandLineOptions.addOption(OPT_DRIVER_INFO, \"info\", false, \"Prints driver information and properties. If \" + OPT + OPT_CONNECTION + \" is not specified, all drivers on the classpath are displayed.\");\r\n    commandLineOptions.addOption(OPT_CONNECTION, \"url\", true, \"Connection URL\");\r\n    commandLineOptions.addOption(OPT_USER, \"user\", true, \"A database user name\");\r\n    commandLineOptions.addOption(OPT_PASSWORD, OPT_PASSWORD_L, true, \"The database password for the user specified with the \" + OPT + OPT_USER + \" option. You can obfuscate the password with org.mortbay.jetty.security.Password, see http://docs.codehaus.org/display/JETTY/Securing+Passwords\");\r\n    commandLineOptions.addOption(OPT_SQL, OPT_SQL_L, true, \"Runs SQL or {call stored_procedure(?, ?)} or {?\u003dcall function(?, ?)}\");\r\n    commandLineOptions.addOption(OPT_FILE_SFMD, \"sfmd\", true, \"Writes a SFMD file for the given SQL\");\r\n    commandLineOptions.addOption(OPT_FILE_BINDING, \"jdbc\", true, \"Writes a JDBC binding node file for the given SQL\");\r\n    commandLineOptions.addOption(OPT_FILE_JDBC, \"node\", true, \"Writes a JDBC node file for the given SQL (internal debugging)\");\r\n    commandLineOptions.addOption(OPT_WRITE_TO_FILE, \"outfile\", true, \"Writes the SQL output to the given file\");\r\n    commandLineOptions.addOption(OPT_DESCRIPTION, \"description\", true, \"SFMD description. A default description is used if omited. Example: \" + OPT + OPT_DESCRIPTION + \" \\\"Runs such and such\\\"\");\r\n    commandLineOptions.addOption(OPT_INTERACTIVE, \"interactive\", false, \"Runs in interactive mode, reading and writing from the console, \u0027go\u0027 or \u0027/\u0027 sends a statement\");\r\n    commandLineOptions.addOption(OPT_TIMING, \"printTiming\", false, \"Prints timing information\");\r\n    commandLineOptions.addOption(OPT_METADATA, \"printMetaData\", false, \"Prints metadata information\");\r\n    commandLineOptions.addOption(OPT_STACK_TRACE, \"printStack\", false, \"Prints stack traces on errors\");\r\n    Option option \u003d new Option(OPT_COLUMN_NAMES, \"columnNames\", true, \"Column XML names; default names column labels. Example: \" + OPT + OPT_COLUMN_NAMES + \" \\\"cname1 cname2\\\"\");\r\n    commandLineOptions.addOption(option);\r\n    option \u003d new Option(OPT_PARAM_NAMES, \"paramNames\", true, \"Parameter XML names; default names are param1, param2, etc. Example: \" + OPT + OPT_PARAM_NAMES + \" \\\"pname1 pname2\\\"\");\r\n    commandLineOptions.addOption(option);\r\n    OptionGroup pOutTypesOptionGroup \u003d new OptionGroup();\r\n    String pOutTypesOptionGroupDoc \u003d OPT + OPT_PARAM_TYPES_INT + \" and \" + OPT + OPT_PARAM_TYPES_NAME + \" are mutually exclusive.\";\r\n    final String typesClassName \u003d Types.class.getName();\r\n    option \u003d new Option(OPT_PARAM_TYPES_INT, \"paramTypes\", true, \"Parameter types from \" + typesClassName + \". \" + pOutTypesOptionGroupDoc + \" Example: \" + OPT + OPT_PARAM_TYPES_INT + \" \\\"-10 12\\\"\");\r\n    commandLineOptions.addOption(option);\r\n    option \u003d new Option(OPT_PARAM_TYPES_NAME, \"paramTypeNames\", true, \"Parameter \" + typesClassName + \" names. \" + pOutTypesOptionGroupDoc + \" Example: \" + OPT + OPT_PARAM_TYPES_NAME + \" \\\"CURSOR VARCHAR\\\"\");\r\n    commandLineOptions.addOption(option);\r\n    commandLineOptions.addOptionGroup(pOutTypesOptionGroup);\r\n    OptionGroup modesOptionGroup \u003d new OptionGroup();\r\n    String modesOptionGroupDoc \u003d OPT + OPT_PARAM_MODES_INT + \" and \" + OPT + OPT_PARAM_MODES_NAME + \" are mutually exclusive.\";\r\n    option \u003d new Option(OPT_PARAM_MODES_INT, \"paramModes\", true, \"Parameters modes (\" + ParameterMetaData.parameterModeIn + \"\u003dIN, \" + ParameterMetaData.parameterModeInOut + \"\u003dINOUT, \" + ParameterMetaData.parameterModeOut + \"\u003dOUT, \" + ParameterMetaData.parameterModeUnknown + \"\u003dUnknown\" + \"). \" + modesOptionGroupDoc + \" Example for 2 parameters, OUT and IN: \" + OPT + OPT_PARAM_MODES_INT + \" \\\"\" + ParameterMetaData.parameterModeOut + \" \" + ParameterMetaData.parameterModeIn + \"\\\"\");\r\n    modesOptionGroup.addOption(option);\r\n    option \u003d new Option(OPT_PARAM_MODES_NAME, \"paramModeNames\", true, \"Parameters mode names (\" + PMODES + \"). \" + modesOptionGroupDoc + \" Example for 2 parameters, OUT and IN: \" + OPT + OPT_PARAM_MODES_NAME + \" \\\"\" + _PMODE_OUT + \" \" + _PMODE_IN + \"\\\"\");\r\n    modesOptionGroup.addOption(option);\r\n    commandLineOptions.addOptionGroup(modesOptionGroup);\r\n    option \u003d new Option(null, OPT_TRIM_L, true, \"Trims leading and trailing spaces from all column values. Column XML names can be optionally specified to set which columns to trim.\");\r\n    option.setOptionalArg(true);\r\n    commandLineOptions.addOption(option);\r\n    option \u003d new Option(OPT_JDBC_TO_SFMD, OPT_JDBC_TO_SFMD_L, true, \"Converts the JDBC file in the first argument to an SMFD file specified in the second argument.\");\r\n    option.setArgs(2);\r\n    commandLineOptions.addOption(option);\r\n    new HelpFormatter().printHelp(this.getClass().getName(), commandLineOptions);\r\n}",
      "path": "src/test/org/apache/commons/cli/bug/BugCLI162Test.java",
      "functionStartLine": 47,
      "functionName": "testPrintHelpLongLines",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "",
      "extendedDetails": {}
    },
    "b0c92c04fe83ff9348221ac6964f73badffd9b90": {
      "type": "Ybodychange",
      "commitMessage": "Fixing the previous commit so the right variable is used. There\u0027s no reason to share the options class between methods, so deleting the setUp()\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/cli/branches/cli-1.x@745755 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "2/19/09 8:43 AM",
      "commitName": "b0c92c04fe83ff9348221ac6964f73badffd9b90",
      "commitAuthor": "Henri Yandell",
      "commitDateOld": "2/19/09 8:34 AM",
      "commitNameOld": "4745ade0eb9450e51476269ad3d55db52df677e6",
      "commitAuthorOld": "Henri Yandell",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "public void testPrintHelpLongLines() throws ParseException, IOException {\r\n    final String OPT \u003d \"-\";\r\n    final String OPT_COLUMN_NAMES \u003d \"l\";\r\n    final String OPT_CONNECTION \u003d \"c\";\r\n    final String OPT_DESCRIPTION \u003d \"e\";\r\n    final String OPT_DRIVER \u003d \"d\";\r\n    final String OPT_DRIVER_INFO \u003d \"n\";\r\n    final String OPT_FILE_BINDING \u003d \"b\";\r\n    final String OPT_FILE_JDBC \u003d \"j\";\r\n    final String OPT_FILE_SFMD \u003d \"f\";\r\n    final String OPT_HELP \u003d \"h\";\r\n    final String OPT_HELP_ \u003d \"help\";\r\n    final String OPT_INTERACTIVE \u003d \"i\";\r\n    final String OPT_JDBC_TO_SFMD \u003d \"2\";\r\n    final String OPT_JDBC_TO_SFMD_L \u003d \"jdbc2sfmd\";\r\n    final String OPT_METADATA \u003d \"m\";\r\n    final String OPT_PARAM_MODES_INT \u003d \"o\";\r\n    final String OPT_PARAM_MODES_NAME \u003d \"O\";\r\n    final String OPT_PARAM_NAMES \u003d \"a\";\r\n    final String OPT_PARAM_TYPES_INT \u003d \"y\";\r\n    final String OPT_PARAM_TYPES_NAME \u003d \"Y\";\r\n    final String OPT_PASSWORD \u003d \"p\";\r\n    final String OPT_PASSWORD_L \u003d \"password\";\r\n    final String OPT_SQL \u003d \"s\";\r\n    final String OPT_SQL_L \u003d \"sql\";\r\n    final String OPT_SQL_SPLIT_DEFAULT \u003d \"###\";\r\n    final String OPT_SQL_SPLIT_L \u003d \"splitSql\";\r\n    final String OPT_STACK_TRACE \u003d \"t\";\r\n    final String OPT_TIMING \u003d \"g\";\r\n    final String OPT_TRIM_L \u003d \"trim\";\r\n    final String OPT_USER \u003d \"u\";\r\n    final String OPT_WRITE_TO_FILE \u003d \"w\";\r\n    final String _PMODE_IN \u003d \"IN\";\r\n    final String _PMODE_INOUT \u003d \"INOUT\";\r\n    final String _PMODE_OUT \u003d \"OUT\";\r\n    final String _PMODE_UNK \u003d \"Unknown\";\r\n    final String PMODES \u003d _PMODE_IN + \", \" + _PMODE_INOUT + \", \" + _PMODE_OUT + \", \" + _PMODE_UNK;\r\n    Options commandLineOptions;\r\n    commandLineOptions \u003d new Options();\r\n    commandLineOptions.addOption(OPT_HELP, OPT_HELP_, false, \"Prints help and quits\");\r\n    commandLineOptions.addOption(OPT_DRIVER, \"driver\", true, \"JDBC driver class name\");\r\n    commandLineOptions.addOption(OPT_DRIVER_INFO, \"info\", false, \"Prints driver information and properties. If \" + OPT + OPT_CONNECTION + \" is not specified, all drivers on the classpath are displayed.\");\r\n    commandLineOptions.addOption(OPT_CONNECTION, \"url\", true, \"Connection URL\");\r\n    commandLineOptions.addOption(OPT_USER, \"user\", true, \"A database user name\");\r\n    commandLineOptions.addOption(OPT_PASSWORD, OPT_PASSWORD_L, true, \"The database password for the user specified with the \" + OPT + OPT_USER + \" option. You can obfuscate the password with org.mortbay.jetty.security.Password, see http://docs.codehaus.org/display/JETTY/Securing+Passwords\");\r\n    commandLineOptions.addOption(OPT_SQL, OPT_SQL_L, true, \"Runs SQL or {call stored_procedure(?, ?)} or {?\u003dcall function(?, ?)}\");\r\n    commandLineOptions.addOption(OPT_FILE_SFMD, \"sfmd\", true, \"Writes a SFMD file for the given SQL\");\r\n    commandLineOptions.addOption(OPT_FILE_BINDING, \"jdbc\", true, \"Writes a JDBC binding node file for the given SQL\");\r\n    commandLineOptions.addOption(OPT_FILE_JDBC, \"node\", true, \"Writes a JDBC node file for the given SQL (internal debugging)\");\r\n    commandLineOptions.addOption(OPT_WRITE_TO_FILE, \"outfile\", true, \"Writes the SQL output to the given file\");\r\n    commandLineOptions.addOption(OPT_DESCRIPTION, \"description\", true, \"SFMD description. A default description is used if omited. Example: \" + OPT + OPT_DESCRIPTION + \" \\\"Runs such and such\\\"\");\r\n    commandLineOptions.addOption(OPT_INTERACTIVE, \"interactive\", false, \"Runs in interactive mode, reading and writing from the console, \u0027go\u0027 or \u0027/\u0027 sends a statement\");\r\n    commandLineOptions.addOption(OPT_TIMING, \"printTiming\", false, \"Prints timing information\");\r\n    commandLineOptions.addOption(OPT_METADATA, \"printMetaData\", false, \"Prints metadata information\");\r\n    commandLineOptions.addOption(OPT_STACK_TRACE, \"printStack\", false, \"Prints stack traces on errors\");\r\n    Option option \u003d new Option(OPT_COLUMN_NAMES, \"columnNames\", true, \"Column XML names; default names column labels. Example: \" + OPT + OPT_COLUMN_NAMES + \" \\\"cname1 cname2\\\"\");\r\n    commandLineOptions.addOption(option);\r\n    option \u003d new Option(OPT_PARAM_NAMES, \"paramNames\", true, \"Parameter XML names; default names are param1, param2, etc. Example: \" + OPT + OPT_PARAM_NAMES + \" \\\"pname1 pname2\\\"\");\r\n    commandLineOptions.addOption(option);\r\n    OptionGroup pOutTypesOptionGroup \u003d new OptionGroup();\r\n    String pOutTypesOptionGroupDoc \u003d OPT + OPT_PARAM_TYPES_INT + \" and \" + OPT + OPT_PARAM_TYPES_NAME + \" are mutually exclusive.\";\r\n    final String typesClassName \u003d Types.class.getName();\r\n    option \u003d new Option(OPT_PARAM_TYPES_INT, \"paramTypes\", true, \"Parameter types from \" + typesClassName + \". \" + pOutTypesOptionGroupDoc + \" Example: \" + OPT + OPT_PARAM_TYPES_INT + \" \\\"-10 12\\\"\");\r\n    commandLineOptions.addOption(option);\r\n    option \u003d new Option(OPT_PARAM_TYPES_NAME, \"paramTypeNames\", true, \"Parameter \" + typesClassName + \" names. \" + pOutTypesOptionGroupDoc + \" Example: \" + OPT + OPT_PARAM_TYPES_NAME + \" \\\"CURSOR VARCHAR\\\"\");\r\n    commandLineOptions.addOption(option);\r\n    commandLineOptions.addOptionGroup(pOutTypesOptionGroup);\r\n    OptionGroup modesOptionGroup \u003d new OptionGroup();\r\n    String modesOptionGroupDoc \u003d OPT + OPT_PARAM_MODES_INT + \" and \" + OPT + OPT_PARAM_MODES_NAME + \" are mutually exclusive.\";\r\n    option \u003d new Option(OPT_PARAM_MODES_INT, \"paramModes\", true, \"Parameters modes (\" + ParameterMetaData.parameterModeIn + \"\u003dIN, \" + ParameterMetaData.parameterModeInOut + \"\u003dINOUT, \" + ParameterMetaData.parameterModeOut + \"\u003dOUT, \" + ParameterMetaData.parameterModeUnknown + \"\u003dUnknown\" + \"). \" + modesOptionGroupDoc + \" Example for 2 parameters, OUT and IN: \" + OPT + OPT_PARAM_MODES_INT + \" \\\"\" + ParameterMetaData.parameterModeOut + \" \" + ParameterMetaData.parameterModeIn + \"\\\"\");\r\n    modesOptionGroup.addOption(option);\r\n    option \u003d new Option(OPT_PARAM_MODES_NAME, \"paramModeNames\", true, \"Parameters mode names (\" + PMODES + \"). \" + modesOptionGroupDoc + \" Example for 2 parameters, OUT and IN: \" + OPT + OPT_PARAM_MODES_NAME + \" \\\"\" + _PMODE_OUT + \" \" + _PMODE_IN + \"\\\"\");\r\n    modesOptionGroup.addOption(option);\r\n    commandLineOptions.addOptionGroup(modesOptionGroup);\r\n    option \u003d new Option(null, OPT_TRIM_L, true, \"Trims leading and trailing spaces from all column values. Column XML names can be optionally specified to set which columns to trim.\");\r\n    option.setOptionalArg(true);\r\n    commandLineOptions.addOption(option);\r\n    option \u003d new Option(OPT_JDBC_TO_SFMD, OPT_JDBC_TO_SFMD_L, true, \"Converts the JDBC file in the first argument to an SMFD file specified in the second argument.\");\r\n    option.setArgs(2);\r\n    commandLineOptions.addOption(option);\r\n    new HelpFormatter().printHelp(this.getClass().getName(), commandLineOptions);\r\n}",
      "path": "src/test/org/apache/commons/cli/bug/BugCLI162Test.java",
      "functionStartLine": 43,
      "functionName": "testPrintHelpLongLines",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,82 +1,82 @@\n public void testPrintHelpLongLines() throws ParseException, IOException {\r\n     final String OPT \u003d \"-\";\r\n     final String OPT_COLUMN_NAMES \u003d \"l\";\r\n     final String OPT_CONNECTION \u003d \"c\";\r\n     final String OPT_DESCRIPTION \u003d \"e\";\r\n     final String OPT_DRIVER \u003d \"d\";\r\n     final String OPT_DRIVER_INFO \u003d \"n\";\r\n     final String OPT_FILE_BINDING \u003d \"b\";\r\n     final String OPT_FILE_JDBC \u003d \"j\";\r\n     final String OPT_FILE_SFMD \u003d \"f\";\r\n     final String OPT_HELP \u003d \"h\";\r\n     final String OPT_HELP_ \u003d \"help\";\r\n     final String OPT_INTERACTIVE \u003d \"i\";\r\n     final String OPT_JDBC_TO_SFMD \u003d \"2\";\r\n     final String OPT_JDBC_TO_SFMD_L \u003d \"jdbc2sfmd\";\r\n     final String OPT_METADATA \u003d \"m\";\r\n     final String OPT_PARAM_MODES_INT \u003d \"o\";\r\n     final String OPT_PARAM_MODES_NAME \u003d \"O\";\r\n     final String OPT_PARAM_NAMES \u003d \"a\";\r\n     final String OPT_PARAM_TYPES_INT \u003d \"y\";\r\n     final String OPT_PARAM_TYPES_NAME \u003d \"Y\";\r\n     final String OPT_PASSWORD \u003d \"p\";\r\n     final String OPT_PASSWORD_L \u003d \"password\";\r\n     final String OPT_SQL \u003d \"s\";\r\n     final String OPT_SQL_L \u003d \"sql\";\r\n     final String OPT_SQL_SPLIT_DEFAULT \u003d \"###\";\r\n     final String OPT_SQL_SPLIT_L \u003d \"splitSql\";\r\n     final String OPT_STACK_TRACE \u003d \"t\";\r\n     final String OPT_TIMING \u003d \"g\";\r\n     final String OPT_TRIM_L \u003d \"trim\";\r\n     final String OPT_USER \u003d \"u\";\r\n     final String OPT_WRITE_TO_FILE \u003d \"w\";\r\n     final String _PMODE_IN \u003d \"IN\";\r\n     final String _PMODE_INOUT \u003d \"INOUT\";\r\n     final String _PMODE_OUT \u003d \"OUT\";\r\n     final String _PMODE_UNK \u003d \"Unknown\";\r\n     final String PMODES \u003d _PMODE_IN + \", \" + _PMODE_INOUT + \", \" + _PMODE_OUT + \", \" + _PMODE_UNK;\r\n     Options commandLineOptions;\r\n     commandLineOptions \u003d new Options();\r\n     commandLineOptions.addOption(OPT_HELP, OPT_HELP_, false, \"Prints help and quits\");\r\n     commandLineOptions.addOption(OPT_DRIVER, \"driver\", true, \"JDBC driver class name\");\r\n     commandLineOptions.addOption(OPT_DRIVER_INFO, \"info\", false, \"Prints driver information and properties. If \" + OPT + OPT_CONNECTION + \" is not specified, all drivers on the classpath are displayed.\");\r\n     commandLineOptions.addOption(OPT_CONNECTION, \"url\", true, \"Connection URL\");\r\n     commandLineOptions.addOption(OPT_USER, \"user\", true, \"A database user name\");\r\n     commandLineOptions.addOption(OPT_PASSWORD, OPT_PASSWORD_L, true, \"The database password for the user specified with the \" + OPT + OPT_USER + \" option. You can obfuscate the password with org.mortbay.jetty.security.Password, see http://docs.codehaus.org/display/JETTY/Securing+Passwords\");\r\n     commandLineOptions.addOption(OPT_SQL, OPT_SQL_L, true, \"Runs SQL or {call stored_procedure(?, ?)} or {?\u003dcall function(?, ?)}\");\r\n     commandLineOptions.addOption(OPT_FILE_SFMD, \"sfmd\", true, \"Writes a SFMD file for the given SQL\");\r\n     commandLineOptions.addOption(OPT_FILE_BINDING, \"jdbc\", true, \"Writes a JDBC binding node file for the given SQL\");\r\n     commandLineOptions.addOption(OPT_FILE_JDBC, \"node\", true, \"Writes a JDBC node file for the given SQL (internal debugging)\");\r\n     commandLineOptions.addOption(OPT_WRITE_TO_FILE, \"outfile\", true, \"Writes the SQL output to the given file\");\r\n     commandLineOptions.addOption(OPT_DESCRIPTION, \"description\", true, \"SFMD description. A default description is used if omited. Example: \" + OPT + OPT_DESCRIPTION + \" \\\"Runs such and such\\\"\");\r\n     commandLineOptions.addOption(OPT_INTERACTIVE, \"interactive\", false, \"Runs in interactive mode, reading and writing from the console, \u0027go\u0027 or \u0027/\u0027 sends a statement\");\r\n     commandLineOptions.addOption(OPT_TIMING, \"printTiming\", false, \"Prints timing information\");\r\n     commandLineOptions.addOption(OPT_METADATA, \"printMetaData\", false, \"Prints metadata information\");\r\n     commandLineOptions.addOption(OPT_STACK_TRACE, \"printStack\", false, \"Prints stack traces on errors\");\r\n     Option option \u003d new Option(OPT_COLUMN_NAMES, \"columnNames\", true, \"Column XML names; default names column labels. Example: \" + OPT + OPT_COLUMN_NAMES + \" \\\"cname1 cname2\\\"\");\r\n     commandLineOptions.addOption(option);\r\n     option \u003d new Option(OPT_PARAM_NAMES, \"paramNames\", true, \"Parameter XML names; default names are param1, param2, etc. Example: \" + OPT + OPT_PARAM_NAMES + \" \\\"pname1 pname2\\\"\");\r\n     commandLineOptions.addOption(option);\r\n     OptionGroup pOutTypesOptionGroup \u003d new OptionGroup();\r\n     String pOutTypesOptionGroupDoc \u003d OPT + OPT_PARAM_TYPES_INT + \" and \" + OPT + OPT_PARAM_TYPES_NAME + \" are mutually exclusive.\";\r\n     final String typesClassName \u003d Types.class.getName();\r\n     option \u003d new Option(OPT_PARAM_TYPES_INT, \"paramTypes\", true, \"Parameter types from \" + typesClassName + \". \" + pOutTypesOptionGroupDoc + \" Example: \" + OPT + OPT_PARAM_TYPES_INT + \" \\\"-10 12\\\"\");\r\n     commandLineOptions.addOption(option);\r\n     option \u003d new Option(OPT_PARAM_TYPES_NAME, \"paramTypeNames\", true, \"Parameter \" + typesClassName + \" names. \" + pOutTypesOptionGroupDoc + \" Example: \" + OPT + OPT_PARAM_TYPES_NAME + \" \\\"CURSOR VARCHAR\\\"\");\r\n     commandLineOptions.addOption(option);\r\n     commandLineOptions.addOptionGroup(pOutTypesOptionGroup);\r\n     OptionGroup modesOptionGroup \u003d new OptionGroup();\r\n     String modesOptionGroupDoc \u003d OPT + OPT_PARAM_MODES_INT + \" and \" + OPT + OPT_PARAM_MODES_NAME + \" are mutually exclusive.\";\r\n     option \u003d new Option(OPT_PARAM_MODES_INT, \"paramModes\", true, \"Parameters modes (\" + ParameterMetaData.parameterModeIn + \"\u003dIN, \" + ParameterMetaData.parameterModeInOut + \"\u003dINOUT, \" + ParameterMetaData.parameterModeOut + \"\u003dOUT, \" + ParameterMetaData.parameterModeUnknown + \"\u003dUnknown\" + \"). \" + modesOptionGroupDoc + \" Example for 2 parameters, OUT and IN: \" + OPT + OPT_PARAM_MODES_INT + \" \\\"\" + ParameterMetaData.parameterModeOut + \" \" + ParameterMetaData.parameterModeIn + \"\\\"\");\r\n     modesOptionGroup.addOption(option);\r\n     option \u003d new Option(OPT_PARAM_MODES_NAME, \"paramModeNames\", true, \"Parameters mode names (\" + PMODES + \"). \" + modesOptionGroupDoc + \" Example for 2 parameters, OUT and IN: \" + OPT + OPT_PARAM_MODES_NAME + \" \\\"\" + _PMODE_OUT + \" \" + _PMODE_IN + \"\\\"\");\r\n     modesOptionGroup.addOption(option);\r\n     commandLineOptions.addOptionGroup(modesOptionGroup);\r\n     option \u003d new Option(null, OPT_TRIM_L, true, \"Trims leading and trailing spaces from all column values. Column XML names can be optionally specified to set which columns to trim.\");\r\n     option.setOptionalArg(true);\r\n     commandLineOptions.addOption(option);\r\n     option \u003d new Option(OPT_JDBC_TO_SFMD, OPT_JDBC_TO_SFMD_L, true, \"Converts the JDBC file in the first argument to an SMFD file specified in the second argument.\");\r\n     option.setArgs(2);\r\n     commandLineOptions.addOption(option);\r\n-    new HelpFormatter().printHelp(this.getClass().getName(), options);\r\n+    new HelpFormatter().printHelp(this.getClass().getName(), commandLineOptions);\r\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "4745ade0eb9450e51476269ad3d55db52df677e6": {
      "type": "Ybodychange",
      "commitMessage": "Getting rid of the unnecessary testPrintHelp method\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/cli/branches/cli-1.x@745753 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "2/19/09 8:34 AM",
      "commitName": "4745ade0eb9450e51476269ad3d55db52df677e6",
      "commitAuthor": "Henri Yandell",
      "commitDateOld": "2/18/09 7:42 AM",
      "commitNameOld": "2ddaae14dd23643a4b5f71f8274534b0b34556a4",
      "commitAuthorOld": "Henri Yandell",
      "daysBetweenCommits": 1.04,
      "commitsBetweenForRepo": 3,
      "commitsBetweenForFile": 1,
      "actualSource": "public void testPrintHelpLongLines() throws ParseException, IOException {\r\n    final String OPT \u003d \"-\";\r\n    final String OPT_COLUMN_NAMES \u003d \"l\";\r\n    final String OPT_CONNECTION \u003d \"c\";\r\n    final String OPT_DESCRIPTION \u003d \"e\";\r\n    final String OPT_DRIVER \u003d \"d\";\r\n    final String OPT_DRIVER_INFO \u003d \"n\";\r\n    final String OPT_FILE_BINDING \u003d \"b\";\r\n    final String OPT_FILE_JDBC \u003d \"j\";\r\n    final String OPT_FILE_SFMD \u003d \"f\";\r\n    final String OPT_HELP \u003d \"h\";\r\n    final String OPT_HELP_ \u003d \"help\";\r\n    final String OPT_INTERACTIVE \u003d \"i\";\r\n    final String OPT_JDBC_TO_SFMD \u003d \"2\";\r\n    final String OPT_JDBC_TO_SFMD_L \u003d \"jdbc2sfmd\";\r\n    final String OPT_METADATA \u003d \"m\";\r\n    final String OPT_PARAM_MODES_INT \u003d \"o\";\r\n    final String OPT_PARAM_MODES_NAME \u003d \"O\";\r\n    final String OPT_PARAM_NAMES \u003d \"a\";\r\n    final String OPT_PARAM_TYPES_INT \u003d \"y\";\r\n    final String OPT_PARAM_TYPES_NAME \u003d \"Y\";\r\n    final String OPT_PASSWORD \u003d \"p\";\r\n    final String OPT_PASSWORD_L \u003d \"password\";\r\n    final String OPT_SQL \u003d \"s\";\r\n    final String OPT_SQL_L \u003d \"sql\";\r\n    final String OPT_SQL_SPLIT_DEFAULT \u003d \"###\";\r\n    final String OPT_SQL_SPLIT_L \u003d \"splitSql\";\r\n    final String OPT_STACK_TRACE \u003d \"t\";\r\n    final String OPT_TIMING \u003d \"g\";\r\n    final String OPT_TRIM_L \u003d \"trim\";\r\n    final String OPT_USER \u003d \"u\";\r\n    final String OPT_WRITE_TO_FILE \u003d \"w\";\r\n    final String _PMODE_IN \u003d \"IN\";\r\n    final String _PMODE_INOUT \u003d \"INOUT\";\r\n    final String _PMODE_OUT \u003d \"OUT\";\r\n    final String _PMODE_UNK \u003d \"Unknown\";\r\n    final String PMODES \u003d _PMODE_IN + \", \" + _PMODE_INOUT + \", \" + _PMODE_OUT + \", \" + _PMODE_UNK;\r\n    Options commandLineOptions;\r\n    commandLineOptions \u003d new Options();\r\n    commandLineOptions.addOption(OPT_HELP, OPT_HELP_, false, \"Prints help and quits\");\r\n    commandLineOptions.addOption(OPT_DRIVER, \"driver\", true, \"JDBC driver class name\");\r\n    commandLineOptions.addOption(OPT_DRIVER_INFO, \"info\", false, \"Prints driver information and properties. If \" + OPT + OPT_CONNECTION + \" is not specified, all drivers on the classpath are displayed.\");\r\n    commandLineOptions.addOption(OPT_CONNECTION, \"url\", true, \"Connection URL\");\r\n    commandLineOptions.addOption(OPT_USER, \"user\", true, \"A database user name\");\r\n    commandLineOptions.addOption(OPT_PASSWORD, OPT_PASSWORD_L, true, \"The database password for the user specified with the \" + OPT + OPT_USER + \" option. You can obfuscate the password with org.mortbay.jetty.security.Password, see http://docs.codehaus.org/display/JETTY/Securing+Passwords\");\r\n    commandLineOptions.addOption(OPT_SQL, OPT_SQL_L, true, \"Runs SQL or {call stored_procedure(?, ?)} or {?\u003dcall function(?, ?)}\");\r\n    commandLineOptions.addOption(OPT_FILE_SFMD, \"sfmd\", true, \"Writes a SFMD file for the given SQL\");\r\n    commandLineOptions.addOption(OPT_FILE_BINDING, \"jdbc\", true, \"Writes a JDBC binding node file for the given SQL\");\r\n    commandLineOptions.addOption(OPT_FILE_JDBC, \"node\", true, \"Writes a JDBC node file for the given SQL (internal debugging)\");\r\n    commandLineOptions.addOption(OPT_WRITE_TO_FILE, \"outfile\", true, \"Writes the SQL output to the given file\");\r\n    commandLineOptions.addOption(OPT_DESCRIPTION, \"description\", true, \"SFMD description. A default description is used if omited. Example: \" + OPT + OPT_DESCRIPTION + \" \\\"Runs such and such\\\"\");\r\n    commandLineOptions.addOption(OPT_INTERACTIVE, \"interactive\", false, \"Runs in interactive mode, reading and writing from the console, \u0027go\u0027 or \u0027/\u0027 sends a statement\");\r\n    commandLineOptions.addOption(OPT_TIMING, \"printTiming\", false, \"Prints timing information\");\r\n    commandLineOptions.addOption(OPT_METADATA, \"printMetaData\", false, \"Prints metadata information\");\r\n    commandLineOptions.addOption(OPT_STACK_TRACE, \"printStack\", false, \"Prints stack traces on errors\");\r\n    Option option \u003d new Option(OPT_COLUMN_NAMES, \"columnNames\", true, \"Column XML names; default names column labels. Example: \" + OPT + OPT_COLUMN_NAMES + \" \\\"cname1 cname2\\\"\");\r\n    commandLineOptions.addOption(option);\r\n    option \u003d new Option(OPT_PARAM_NAMES, \"paramNames\", true, \"Parameter XML names; default names are param1, param2, etc. Example: \" + OPT + OPT_PARAM_NAMES + \" \\\"pname1 pname2\\\"\");\r\n    commandLineOptions.addOption(option);\r\n    OptionGroup pOutTypesOptionGroup \u003d new OptionGroup();\r\n    String pOutTypesOptionGroupDoc \u003d OPT + OPT_PARAM_TYPES_INT + \" and \" + OPT + OPT_PARAM_TYPES_NAME + \" are mutually exclusive.\";\r\n    final String typesClassName \u003d Types.class.getName();\r\n    option \u003d new Option(OPT_PARAM_TYPES_INT, \"paramTypes\", true, \"Parameter types from \" + typesClassName + \". \" + pOutTypesOptionGroupDoc + \" Example: \" + OPT + OPT_PARAM_TYPES_INT + \" \\\"-10 12\\\"\");\r\n    commandLineOptions.addOption(option);\r\n    option \u003d new Option(OPT_PARAM_TYPES_NAME, \"paramTypeNames\", true, \"Parameter \" + typesClassName + \" names. \" + pOutTypesOptionGroupDoc + \" Example: \" + OPT + OPT_PARAM_TYPES_NAME + \" \\\"CURSOR VARCHAR\\\"\");\r\n    commandLineOptions.addOption(option);\r\n    commandLineOptions.addOptionGroup(pOutTypesOptionGroup);\r\n    OptionGroup modesOptionGroup \u003d new OptionGroup();\r\n    String modesOptionGroupDoc \u003d OPT + OPT_PARAM_MODES_INT + \" and \" + OPT + OPT_PARAM_MODES_NAME + \" are mutually exclusive.\";\r\n    option \u003d new Option(OPT_PARAM_MODES_INT, \"paramModes\", true, \"Parameters modes (\" + ParameterMetaData.parameterModeIn + \"\u003dIN, \" + ParameterMetaData.parameterModeInOut + \"\u003dINOUT, \" + ParameterMetaData.parameterModeOut + \"\u003dOUT, \" + ParameterMetaData.parameterModeUnknown + \"\u003dUnknown\" + \"). \" + modesOptionGroupDoc + \" Example for 2 parameters, OUT and IN: \" + OPT + OPT_PARAM_MODES_INT + \" \\\"\" + ParameterMetaData.parameterModeOut + \" \" + ParameterMetaData.parameterModeIn + \"\\\"\");\r\n    modesOptionGroup.addOption(option);\r\n    option \u003d new Option(OPT_PARAM_MODES_NAME, \"paramModeNames\", true, \"Parameters mode names (\" + PMODES + \"). \" + modesOptionGroupDoc + \" Example for 2 parameters, OUT and IN: \" + OPT + OPT_PARAM_MODES_NAME + \" \\\"\" + _PMODE_OUT + \" \" + _PMODE_IN + \"\\\"\");\r\n    modesOptionGroup.addOption(option);\r\n    commandLineOptions.addOptionGroup(modesOptionGroup);\r\n    option \u003d new Option(null, OPT_TRIM_L, true, \"Trims leading and trailing spaces from all column values. Column XML names can be optionally specified to set which columns to trim.\");\r\n    option.setOptionalArg(true);\r\n    commandLineOptions.addOption(option);\r\n    option \u003d new Option(OPT_JDBC_TO_SFMD, OPT_JDBC_TO_SFMD_L, true, \"Converts the JDBC file in the first argument to an SMFD file specified in the second argument.\");\r\n    option.setArgs(2);\r\n    commandLineOptions.addOption(option);\r\n    new HelpFormatter().printHelp(this.getClass().getName(), options);\r\n}",
      "path": "src/test/org/apache/commons/cli/bug/BugCLI162Test.java",
      "functionStartLine": 48,
      "functionName": "testPrintHelpLongLines",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,82 +1,82 @@\n public void testPrintHelpLongLines() throws ParseException, IOException {\r\n     final String OPT \u003d \"-\";\r\n     final String OPT_COLUMN_NAMES \u003d \"l\";\r\n     final String OPT_CONNECTION \u003d \"c\";\r\n     final String OPT_DESCRIPTION \u003d \"e\";\r\n     final String OPT_DRIVER \u003d \"d\";\r\n     final String OPT_DRIVER_INFO \u003d \"n\";\r\n     final String OPT_FILE_BINDING \u003d \"b\";\r\n     final String OPT_FILE_JDBC \u003d \"j\";\r\n     final String OPT_FILE_SFMD \u003d \"f\";\r\n     final String OPT_HELP \u003d \"h\";\r\n     final String OPT_HELP_ \u003d \"help\";\r\n     final String OPT_INTERACTIVE \u003d \"i\";\r\n     final String OPT_JDBC_TO_SFMD \u003d \"2\";\r\n     final String OPT_JDBC_TO_SFMD_L \u003d \"jdbc2sfmd\";\r\n     final String OPT_METADATA \u003d \"m\";\r\n     final String OPT_PARAM_MODES_INT \u003d \"o\";\r\n     final String OPT_PARAM_MODES_NAME \u003d \"O\";\r\n     final String OPT_PARAM_NAMES \u003d \"a\";\r\n     final String OPT_PARAM_TYPES_INT \u003d \"y\";\r\n     final String OPT_PARAM_TYPES_NAME \u003d \"Y\";\r\n     final String OPT_PASSWORD \u003d \"p\";\r\n     final String OPT_PASSWORD_L \u003d \"password\";\r\n     final String OPT_SQL \u003d \"s\";\r\n     final String OPT_SQL_L \u003d \"sql\";\r\n     final String OPT_SQL_SPLIT_DEFAULT \u003d \"###\";\r\n     final String OPT_SQL_SPLIT_L \u003d \"splitSql\";\r\n     final String OPT_STACK_TRACE \u003d \"t\";\r\n     final String OPT_TIMING \u003d \"g\";\r\n     final String OPT_TRIM_L \u003d \"trim\";\r\n     final String OPT_USER \u003d \"u\";\r\n     final String OPT_WRITE_TO_FILE \u003d \"w\";\r\n     final String _PMODE_IN \u003d \"IN\";\r\n     final String _PMODE_INOUT \u003d \"INOUT\";\r\n     final String _PMODE_OUT \u003d \"OUT\";\r\n     final String _PMODE_UNK \u003d \"Unknown\";\r\n     final String PMODES \u003d _PMODE_IN + \", \" + _PMODE_INOUT + \", \" + _PMODE_OUT + \", \" + _PMODE_UNK;\r\n     Options commandLineOptions;\r\n     commandLineOptions \u003d new Options();\r\n     commandLineOptions.addOption(OPT_HELP, OPT_HELP_, false, \"Prints help and quits\");\r\n     commandLineOptions.addOption(OPT_DRIVER, \"driver\", true, \"JDBC driver class name\");\r\n     commandLineOptions.addOption(OPT_DRIVER_INFO, \"info\", false, \"Prints driver information and properties. If \" + OPT + OPT_CONNECTION + \" is not specified, all drivers on the classpath are displayed.\");\r\n     commandLineOptions.addOption(OPT_CONNECTION, \"url\", true, \"Connection URL\");\r\n     commandLineOptions.addOption(OPT_USER, \"user\", true, \"A database user name\");\r\n     commandLineOptions.addOption(OPT_PASSWORD, OPT_PASSWORD_L, true, \"The database password for the user specified with the \" + OPT + OPT_USER + \" option. You can obfuscate the password with org.mortbay.jetty.security.Password, see http://docs.codehaus.org/display/JETTY/Securing+Passwords\");\r\n     commandLineOptions.addOption(OPT_SQL, OPT_SQL_L, true, \"Runs SQL or {call stored_procedure(?, ?)} or {?\u003dcall function(?, ?)}\");\r\n     commandLineOptions.addOption(OPT_FILE_SFMD, \"sfmd\", true, \"Writes a SFMD file for the given SQL\");\r\n     commandLineOptions.addOption(OPT_FILE_BINDING, \"jdbc\", true, \"Writes a JDBC binding node file for the given SQL\");\r\n     commandLineOptions.addOption(OPT_FILE_JDBC, \"node\", true, \"Writes a JDBC node file for the given SQL (internal debugging)\");\r\n     commandLineOptions.addOption(OPT_WRITE_TO_FILE, \"outfile\", true, \"Writes the SQL output to the given file\");\r\n     commandLineOptions.addOption(OPT_DESCRIPTION, \"description\", true, \"SFMD description. A default description is used if omited. Example: \" + OPT + OPT_DESCRIPTION + \" \\\"Runs such and such\\\"\");\r\n     commandLineOptions.addOption(OPT_INTERACTIVE, \"interactive\", false, \"Runs in interactive mode, reading and writing from the console, \u0027go\u0027 or \u0027/\u0027 sends a statement\");\r\n     commandLineOptions.addOption(OPT_TIMING, \"printTiming\", false, \"Prints timing information\");\r\n     commandLineOptions.addOption(OPT_METADATA, \"printMetaData\", false, \"Prints metadata information\");\r\n     commandLineOptions.addOption(OPT_STACK_TRACE, \"printStack\", false, \"Prints stack traces on errors\");\r\n     Option option \u003d new Option(OPT_COLUMN_NAMES, \"columnNames\", true, \"Column XML names; default names column labels. Example: \" + OPT + OPT_COLUMN_NAMES + \" \\\"cname1 cname2\\\"\");\r\n     commandLineOptions.addOption(option);\r\n     option \u003d new Option(OPT_PARAM_NAMES, \"paramNames\", true, \"Parameter XML names; default names are param1, param2, etc. Example: \" + OPT + OPT_PARAM_NAMES + \" \\\"pname1 pname2\\\"\");\r\n     commandLineOptions.addOption(option);\r\n     OptionGroup pOutTypesOptionGroup \u003d new OptionGroup();\r\n     String pOutTypesOptionGroupDoc \u003d OPT + OPT_PARAM_TYPES_INT + \" and \" + OPT + OPT_PARAM_TYPES_NAME + \" are mutually exclusive.\";\r\n     final String typesClassName \u003d Types.class.getName();\r\n     option \u003d new Option(OPT_PARAM_TYPES_INT, \"paramTypes\", true, \"Parameter types from \" + typesClassName + \". \" + pOutTypesOptionGroupDoc + \" Example: \" + OPT + OPT_PARAM_TYPES_INT + \" \\\"-10 12\\\"\");\r\n     commandLineOptions.addOption(option);\r\n     option \u003d new Option(OPT_PARAM_TYPES_NAME, \"paramTypeNames\", true, \"Parameter \" + typesClassName + \" names. \" + pOutTypesOptionGroupDoc + \" Example: \" + OPT + OPT_PARAM_TYPES_NAME + \" \\\"CURSOR VARCHAR\\\"\");\r\n     commandLineOptions.addOption(option);\r\n     commandLineOptions.addOptionGroup(pOutTypesOptionGroup);\r\n     OptionGroup modesOptionGroup \u003d new OptionGroup();\r\n     String modesOptionGroupDoc \u003d OPT + OPT_PARAM_MODES_INT + \" and \" + OPT + OPT_PARAM_MODES_NAME + \" are mutually exclusive.\";\r\n     option \u003d new Option(OPT_PARAM_MODES_INT, \"paramModes\", true, \"Parameters modes (\" + ParameterMetaData.parameterModeIn + \"\u003dIN, \" + ParameterMetaData.parameterModeInOut + \"\u003dINOUT, \" + ParameterMetaData.parameterModeOut + \"\u003dOUT, \" + ParameterMetaData.parameterModeUnknown + \"\u003dUnknown\" + \"). \" + modesOptionGroupDoc + \" Example for 2 parameters, OUT and IN: \" + OPT + OPT_PARAM_MODES_INT + \" \\\"\" + ParameterMetaData.parameterModeOut + \" \" + ParameterMetaData.parameterModeIn + \"\\\"\");\r\n     modesOptionGroup.addOption(option);\r\n     option \u003d new Option(OPT_PARAM_MODES_NAME, \"paramModeNames\", true, \"Parameters mode names (\" + PMODES + \"). \" + modesOptionGroupDoc + \" Example for 2 parameters, OUT and IN: \" + OPT + OPT_PARAM_MODES_NAME + \" \\\"\" + _PMODE_OUT + \" \" + _PMODE_IN + \"\\\"\");\r\n     modesOptionGroup.addOption(option);\r\n     commandLineOptions.addOptionGroup(modesOptionGroup);\r\n     option \u003d new Option(null, OPT_TRIM_L, true, \"Trims leading and trailing spaces from all column values. Column XML names can be optionally specified to set which columns to trim.\");\r\n     option.setOptionalArg(true);\r\n     commandLineOptions.addOption(option);\r\n     option \u003d new Option(OPT_JDBC_TO_SFMD, OPT_JDBC_TO_SFMD_L, true, \"Converts the JDBC file in the first argument to an SMFD file specified in the second argument.\");\r\n     option.setArgs(2);\r\n     commandLineOptions.addOption(option);\r\n-    this.testPrintHelp(commandLineOptions);\r\n+    new HelpFormatter().printHelp(this.getClass().getName(), options);\r\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "6c740e79cb07ec9074b2c77822732c0678690ae9": {
      "type": "Yintroduced",
      "commitMessage": "[CLI-162] new long lines test cause a RuntimeException.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/cli/branches/cli-1.x@742845 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "2/10/09 6:46 AM",
      "commitName": "6c740e79cb07ec9074b2c77822732c0678690ae9",
      "commitAuthor": "Gary D. Gregory",
      "diff": "@@ -0,0 +1,82 @@\n+public void testPrintHelpLongLines() throws ParseException, IOException {\r\n+    final String OPT \u003d \"-\";\r\n+    final String OPT_COLUMN_NAMES \u003d \"l\";\r\n+    final String OPT_CONNECTION \u003d \"c\";\r\n+    final String OPT_DESCRIPTION \u003d \"e\";\r\n+    final String OPT_DRIVER \u003d \"d\";\r\n+    final String OPT_DRIVER_INFO \u003d \"n\";\r\n+    final String OPT_FILE_BINDING \u003d \"b\";\r\n+    final String OPT_FILE_JDBC \u003d \"j\";\r\n+    final String OPT_FILE_SFMD \u003d \"f\";\r\n+    final String OPT_HELP \u003d \"h\";\r\n+    final String OPT_HELP_ \u003d \"help\";\r\n+    final String OPT_INTERACTIVE \u003d \"i\";\r\n+    final String OPT_JDBC_TO_SFMD \u003d \"2\";\r\n+    final String OPT_JDBC_TO_SFMD_L \u003d \"jdbc2sfmd\";\r\n+    final String OPT_METADATA \u003d \"m\";\r\n+    final String OPT_PARAM_MODES_INT \u003d \"o\";\r\n+    final String OPT_PARAM_MODES_NAME \u003d \"O\";\r\n+    final String OPT_PARAM_NAMES \u003d \"a\";\r\n+    final String OPT_PARAM_TYPES_INT \u003d \"y\";\r\n+    final String OPT_PARAM_TYPES_NAME \u003d \"Y\";\r\n+    final String OPT_PASSWORD \u003d \"p\";\r\n+    final String OPT_PASSWORD_L \u003d \"password\";\r\n+    final String OPT_SQL \u003d \"s\";\r\n+    final String OPT_SQL_L \u003d \"sql\";\r\n+    final String OPT_SQL_SPLIT_DEFAULT \u003d \"###\";\r\n+    final String OPT_SQL_SPLIT_L \u003d \"splitSql\";\r\n+    final String OPT_STACK_TRACE \u003d \"t\";\r\n+    final String OPT_TIMING \u003d \"g\";\r\n+    final String OPT_TRIM_L \u003d \"trim\";\r\n+    final String OPT_USER \u003d \"u\";\r\n+    final String OPT_WRITE_TO_FILE \u003d \"w\";\r\n+    final String _PMODE_IN \u003d \"IN\";\r\n+    final String _PMODE_INOUT \u003d \"INOUT\";\r\n+    final String _PMODE_OUT \u003d \"OUT\";\r\n+    final String _PMODE_UNK \u003d \"Unknown\";\r\n+    final String PMODES \u003d _PMODE_IN + \", \" + _PMODE_INOUT + \", \" + _PMODE_OUT + \", \" + _PMODE_UNK;\r\n+    Options commandLineOptions;\r\n+    commandLineOptions \u003d new Options();\r\n+    commandLineOptions.addOption(OPT_HELP, OPT_HELP_, false, \"Prints help and quits\");\r\n+    commandLineOptions.addOption(OPT_DRIVER, \"driver\", true, \"JDBC driver class name\");\r\n+    commandLineOptions.addOption(OPT_DRIVER_INFO, \"info\", false, \"Prints driver information and properties. If \" + OPT + OPT_CONNECTION + \" is not specified, all drivers on the classpath are displayed.\");\r\n+    commandLineOptions.addOption(OPT_CONNECTION, \"url\", true, \"Connection URL\");\r\n+    commandLineOptions.addOption(OPT_USER, \"user\", true, \"A database user name\");\r\n+    commandLineOptions.addOption(OPT_PASSWORD, OPT_PASSWORD_L, true, \"The database password for the user specified with the \" + OPT + OPT_USER + \" option. You can obfuscate the password with org.mortbay.jetty.security.Password, see http://docs.codehaus.org/display/JETTY/Securing+Passwords\");\r\n+    commandLineOptions.addOption(OPT_SQL, OPT_SQL_L, true, \"Runs SQL or {call stored_procedure(?, ?)} or {?\u003dcall function(?, ?)}\");\r\n+    commandLineOptions.addOption(OPT_FILE_SFMD, \"sfmd\", true, \"Writes a SFMD file for the given SQL\");\r\n+    commandLineOptions.addOption(OPT_FILE_BINDING, \"jdbc\", true, \"Writes a JDBC binding node file for the given SQL\");\r\n+    commandLineOptions.addOption(OPT_FILE_JDBC, \"node\", true, \"Writes a JDBC node file for the given SQL (internal debugging)\");\r\n+    commandLineOptions.addOption(OPT_WRITE_TO_FILE, \"outfile\", true, \"Writes the SQL output to the given file\");\r\n+    commandLineOptions.addOption(OPT_DESCRIPTION, \"description\", true, \"SFMD description. A default description is used if omited. Example: \" + OPT + OPT_DESCRIPTION + \" \\\"Runs such and such\\\"\");\r\n+    commandLineOptions.addOption(OPT_INTERACTIVE, \"interactive\", false, \"Runs in interactive mode, reading and writing from the console, \u0027go\u0027 or \u0027/\u0027 sends a statement\");\r\n+    commandLineOptions.addOption(OPT_TIMING, \"printTiming\", false, \"Prints timing information\");\r\n+    commandLineOptions.addOption(OPT_METADATA, \"printMetaData\", false, \"Prints metadata information\");\r\n+    commandLineOptions.addOption(OPT_STACK_TRACE, \"printStack\", false, \"Prints stack traces on errors\");\r\n+    Option option \u003d new Option(OPT_COLUMN_NAMES, \"columnNames\", true, \"Column XML names; default names column labels. Example: \" + OPT + OPT_COLUMN_NAMES + \" \\\"cname1 cname2\\\"\");\r\n+    commandLineOptions.addOption(option);\r\n+    option \u003d new Option(OPT_PARAM_NAMES, \"paramNames\", true, \"Parameter XML names; default names are param1, param2, etc. Example: \" + OPT + OPT_PARAM_NAMES + \" \\\"pname1 pname2\\\"\");\r\n+    commandLineOptions.addOption(option);\r\n+    OptionGroup pOutTypesOptionGroup \u003d new OptionGroup();\r\n+    String pOutTypesOptionGroupDoc \u003d OPT + OPT_PARAM_TYPES_INT + \" and \" + OPT + OPT_PARAM_TYPES_NAME + \" are mutually exclusive.\";\r\n+    final String typesClassName \u003d Types.class.getName();\r\n+    option \u003d new Option(OPT_PARAM_TYPES_INT, \"paramTypes\", true, \"Parameter types from \" + typesClassName + \". \" + pOutTypesOptionGroupDoc + \" Example: \" + OPT + OPT_PARAM_TYPES_INT + \" \\\"-10 12\\\"\");\r\n+    commandLineOptions.addOption(option);\r\n+    option \u003d new Option(OPT_PARAM_TYPES_NAME, \"paramTypeNames\", true, \"Parameter \" + typesClassName + \" names. \" + pOutTypesOptionGroupDoc + \" Example: \" + OPT + OPT_PARAM_TYPES_NAME + \" \\\"CURSOR VARCHAR\\\"\");\r\n+    commandLineOptions.addOption(option);\r\n+    commandLineOptions.addOptionGroup(pOutTypesOptionGroup);\r\n+    OptionGroup modesOptionGroup \u003d new OptionGroup();\r\n+    String modesOptionGroupDoc \u003d OPT + OPT_PARAM_MODES_INT + \" and \" + OPT + OPT_PARAM_MODES_NAME + \" are mutually exclusive.\";\r\n+    option \u003d new Option(OPT_PARAM_MODES_INT, \"paramModes\", true, \"Parameters modes (\" + ParameterMetaData.parameterModeIn + \"\u003dIN, \" + ParameterMetaData.parameterModeInOut + \"\u003dINOUT, \" + ParameterMetaData.parameterModeOut + \"\u003dOUT, \" + ParameterMetaData.parameterModeUnknown + \"\u003dUnknown\" + \"). \" + modesOptionGroupDoc + \" Example for 2 parameters, OUT and IN: \" + OPT + OPT_PARAM_MODES_INT + \" \\\"\" + ParameterMetaData.parameterModeOut + \" \" + ParameterMetaData.parameterModeIn + \"\\\"\");\r\n+    modesOptionGroup.addOption(option);\r\n+    option \u003d new Option(OPT_PARAM_MODES_NAME, \"paramModeNames\", true, \"Parameters mode names (\" + PMODES + \"). \" + modesOptionGroupDoc + \" Example for 2 parameters, OUT and IN: \" + OPT + OPT_PARAM_MODES_NAME + \" \\\"\" + _PMODE_OUT + \" \" + _PMODE_IN + \"\\\"\");\r\n+    modesOptionGroup.addOption(option);\r\n+    commandLineOptions.addOptionGroup(modesOptionGroup);\r\n+    option \u003d new Option(null, OPT_TRIM_L, true, \"Trims leading and trailing spaces from all column values. Column XML names can be optionally specified to set which columns to trim.\");\r\n+    option.setOptionalArg(true);\r\n+    commandLineOptions.addOption(option);\r\n+    option \u003d new Option(OPT_JDBC_TO_SFMD, OPT_JDBC_TO_SFMD_L, true, \"Converts the JDBC file in the first argument to an SMFD file specified in the second argument.\");\r\n+    option.setArgs(2);\r\n+    commandLineOptions.addOption(option);\r\n+    this.testPrintHelp(commandLineOptions);\r\n+}\n\\ No newline at end of file\n",
      "actualSource": "public void testPrintHelpLongLines() throws ParseException, IOException {\r\n    final String OPT \u003d \"-\";\r\n    final String OPT_COLUMN_NAMES \u003d \"l\";\r\n    final String OPT_CONNECTION \u003d \"c\";\r\n    final String OPT_DESCRIPTION \u003d \"e\";\r\n    final String OPT_DRIVER \u003d \"d\";\r\n    final String OPT_DRIVER_INFO \u003d \"n\";\r\n    final String OPT_FILE_BINDING \u003d \"b\";\r\n    final String OPT_FILE_JDBC \u003d \"j\";\r\n    final String OPT_FILE_SFMD \u003d \"f\";\r\n    final String OPT_HELP \u003d \"h\";\r\n    final String OPT_HELP_ \u003d \"help\";\r\n    final String OPT_INTERACTIVE \u003d \"i\";\r\n    final String OPT_JDBC_TO_SFMD \u003d \"2\";\r\n    final String OPT_JDBC_TO_SFMD_L \u003d \"jdbc2sfmd\";\r\n    final String OPT_METADATA \u003d \"m\";\r\n    final String OPT_PARAM_MODES_INT \u003d \"o\";\r\n    final String OPT_PARAM_MODES_NAME \u003d \"O\";\r\n    final String OPT_PARAM_NAMES \u003d \"a\";\r\n    final String OPT_PARAM_TYPES_INT \u003d \"y\";\r\n    final String OPT_PARAM_TYPES_NAME \u003d \"Y\";\r\n    final String OPT_PASSWORD \u003d \"p\";\r\n    final String OPT_PASSWORD_L \u003d \"password\";\r\n    final String OPT_SQL \u003d \"s\";\r\n    final String OPT_SQL_L \u003d \"sql\";\r\n    final String OPT_SQL_SPLIT_DEFAULT \u003d \"###\";\r\n    final String OPT_SQL_SPLIT_L \u003d \"splitSql\";\r\n    final String OPT_STACK_TRACE \u003d \"t\";\r\n    final String OPT_TIMING \u003d \"g\";\r\n    final String OPT_TRIM_L \u003d \"trim\";\r\n    final String OPT_USER \u003d \"u\";\r\n    final String OPT_WRITE_TO_FILE \u003d \"w\";\r\n    final String _PMODE_IN \u003d \"IN\";\r\n    final String _PMODE_INOUT \u003d \"INOUT\";\r\n    final String _PMODE_OUT \u003d \"OUT\";\r\n    final String _PMODE_UNK \u003d \"Unknown\";\r\n    final String PMODES \u003d _PMODE_IN + \", \" + _PMODE_INOUT + \", \" + _PMODE_OUT + \", \" + _PMODE_UNK;\r\n    Options commandLineOptions;\r\n    commandLineOptions \u003d new Options();\r\n    commandLineOptions.addOption(OPT_HELP, OPT_HELP_, false, \"Prints help and quits\");\r\n    commandLineOptions.addOption(OPT_DRIVER, \"driver\", true, \"JDBC driver class name\");\r\n    commandLineOptions.addOption(OPT_DRIVER_INFO, \"info\", false, \"Prints driver information and properties. If \" + OPT + OPT_CONNECTION + \" is not specified, all drivers on the classpath are displayed.\");\r\n    commandLineOptions.addOption(OPT_CONNECTION, \"url\", true, \"Connection URL\");\r\n    commandLineOptions.addOption(OPT_USER, \"user\", true, \"A database user name\");\r\n    commandLineOptions.addOption(OPT_PASSWORD, OPT_PASSWORD_L, true, \"The database password for the user specified with the \" + OPT + OPT_USER + \" option. You can obfuscate the password with org.mortbay.jetty.security.Password, see http://docs.codehaus.org/display/JETTY/Securing+Passwords\");\r\n    commandLineOptions.addOption(OPT_SQL, OPT_SQL_L, true, \"Runs SQL or {call stored_procedure(?, ?)} or {?\u003dcall function(?, ?)}\");\r\n    commandLineOptions.addOption(OPT_FILE_SFMD, \"sfmd\", true, \"Writes a SFMD file for the given SQL\");\r\n    commandLineOptions.addOption(OPT_FILE_BINDING, \"jdbc\", true, \"Writes a JDBC binding node file for the given SQL\");\r\n    commandLineOptions.addOption(OPT_FILE_JDBC, \"node\", true, \"Writes a JDBC node file for the given SQL (internal debugging)\");\r\n    commandLineOptions.addOption(OPT_WRITE_TO_FILE, \"outfile\", true, \"Writes the SQL output to the given file\");\r\n    commandLineOptions.addOption(OPT_DESCRIPTION, \"description\", true, \"SFMD description. A default description is used if omited. Example: \" + OPT + OPT_DESCRIPTION + \" \\\"Runs such and such\\\"\");\r\n    commandLineOptions.addOption(OPT_INTERACTIVE, \"interactive\", false, \"Runs in interactive mode, reading and writing from the console, \u0027go\u0027 or \u0027/\u0027 sends a statement\");\r\n    commandLineOptions.addOption(OPT_TIMING, \"printTiming\", false, \"Prints timing information\");\r\n    commandLineOptions.addOption(OPT_METADATA, \"printMetaData\", false, \"Prints metadata information\");\r\n    commandLineOptions.addOption(OPT_STACK_TRACE, \"printStack\", false, \"Prints stack traces on errors\");\r\n    Option option \u003d new Option(OPT_COLUMN_NAMES, \"columnNames\", true, \"Column XML names; default names column labels. Example: \" + OPT + OPT_COLUMN_NAMES + \" \\\"cname1 cname2\\\"\");\r\n    commandLineOptions.addOption(option);\r\n    option \u003d new Option(OPT_PARAM_NAMES, \"paramNames\", true, \"Parameter XML names; default names are param1, param2, etc. Example: \" + OPT + OPT_PARAM_NAMES + \" \\\"pname1 pname2\\\"\");\r\n    commandLineOptions.addOption(option);\r\n    OptionGroup pOutTypesOptionGroup \u003d new OptionGroup();\r\n    String pOutTypesOptionGroupDoc \u003d OPT + OPT_PARAM_TYPES_INT + \" and \" + OPT + OPT_PARAM_TYPES_NAME + \" are mutually exclusive.\";\r\n    final String typesClassName \u003d Types.class.getName();\r\n    option \u003d new Option(OPT_PARAM_TYPES_INT, \"paramTypes\", true, \"Parameter types from \" + typesClassName + \". \" + pOutTypesOptionGroupDoc + \" Example: \" + OPT + OPT_PARAM_TYPES_INT + \" \\\"-10 12\\\"\");\r\n    commandLineOptions.addOption(option);\r\n    option \u003d new Option(OPT_PARAM_TYPES_NAME, \"paramTypeNames\", true, \"Parameter \" + typesClassName + \" names. \" + pOutTypesOptionGroupDoc + \" Example: \" + OPT + OPT_PARAM_TYPES_NAME + \" \\\"CURSOR VARCHAR\\\"\");\r\n    commandLineOptions.addOption(option);\r\n    commandLineOptions.addOptionGroup(pOutTypesOptionGroup);\r\n    OptionGroup modesOptionGroup \u003d new OptionGroup();\r\n    String modesOptionGroupDoc \u003d OPT + OPT_PARAM_MODES_INT + \" and \" + OPT + OPT_PARAM_MODES_NAME + \" are mutually exclusive.\";\r\n    option \u003d new Option(OPT_PARAM_MODES_INT, \"paramModes\", true, \"Parameters modes (\" + ParameterMetaData.parameterModeIn + \"\u003dIN, \" + ParameterMetaData.parameterModeInOut + \"\u003dINOUT, \" + ParameterMetaData.parameterModeOut + \"\u003dOUT, \" + ParameterMetaData.parameterModeUnknown + \"\u003dUnknown\" + \"). \" + modesOptionGroupDoc + \" Example for 2 parameters, OUT and IN: \" + OPT + OPT_PARAM_MODES_INT + \" \\\"\" + ParameterMetaData.parameterModeOut + \" \" + ParameterMetaData.parameterModeIn + \"\\\"\");\r\n    modesOptionGroup.addOption(option);\r\n    option \u003d new Option(OPT_PARAM_MODES_NAME, \"paramModeNames\", true, \"Parameters mode names (\" + PMODES + \"). \" + modesOptionGroupDoc + \" Example for 2 parameters, OUT and IN: \" + OPT + OPT_PARAM_MODES_NAME + \" \\\"\" + _PMODE_OUT + \" \" + _PMODE_IN + \"\\\"\");\r\n    modesOptionGroup.addOption(option);\r\n    commandLineOptions.addOptionGroup(modesOptionGroup);\r\n    option \u003d new Option(null, OPT_TRIM_L, true, \"Trims leading and trailing spaces from all column values. Column XML names can be optionally specified to set which columns to trim.\");\r\n    option.setOptionalArg(true);\r\n    commandLineOptions.addOption(option);\r\n    option \u003d new Option(OPT_JDBC_TO_SFMD, OPT_JDBC_TO_SFMD_L, true, \"Converts the JDBC file in the first argument to an SMFD file specified in the second argument.\");\r\n    option.setArgs(2);\r\n    commandLineOptions.addOption(option);\r\n    this.testPrintHelp(commandLineOptions);\r\n}",
      "path": "src/test/org/apache/commons/cli/bug/BugCLI162Test.java",
      "functionStartLine": 56,
      "functionName": "testPrintHelpLongLines",
      "functionAnnotation": "",
      "functionDoc": ""
    }
  }
}