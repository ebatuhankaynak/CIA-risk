{
  "origin": "codeshovel",
  "repositoryName": "commons-cli",
  "repositoryPath": "D:/_SELEN/_2022-2023/CS588/GitHub_Dataset/commons-cli/commons-cli/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "HelpFormatter.java",
  "functionName": "renderWrappedText",
  "functionId": "renderWrappedText___sb-StringBuffer(modifiers-final)__width-int(modifiers-final)__nextLineTabStop-int__text-String",
  "sourceFilePath": "src/main/java/org/apache/commons/cli/HelpFormatter.java",
  "functionAnnotation": "",
  "functionDoc": "Render the specified text and return the rendered Options in a StringBuffer.\r\n\r\n@param sb The StringBuffer to place the rendered text into.\r\n@param width The number of characters to display per line\r\n@param nextLineTabStop The position on the next line for the first tab.\r\n@param text The text to be rendered.\r\n@return the StringBuffer with the rendered Options contents.\r\n",
  "functionStartLine": 752,
  "functionEndLine": 786,
  "numCommitsSeen": 92,
  "timeTaken": 381,
  "changeHistory": [
    "bc0edc47dbf47cdaa3485cfb724982f377c900df",
    "5fb9e5009a8cdc7366b7a762f0e43dc47decf67c",
    "6b87d290954c4594fc69a3a0b85fff12490cfde5",
    "491340dc5e6c8d4233cc575571e15dd357f20b70",
    "3d57a495145916d1cd183cced771935c06da786a",
    "23df383408513eddaf3e6dc4244c89fd48427695",
    "d8df5107a76b1a7fa579ec91f5482be901d18435",
    "1596f3bbe57986361da4ac1a23634dd5b00d10df",
    "6a585453d385449dc23d90479488f92f02cd6b83",
    "02dd7c20646bf67dcfb6f7da6beeb7cdffc6ac22",
    "ac6e754ecfc86822aa1ab74d657b0b3f0222b2e6",
    "84234a65638f0e9e4be73dfcccaa6530a5b571af",
    "a3e716227a66fb02fc9cce926b8820a7b1c5f2c4",
    "d1121d3ad3154e3564e150555dcedb368ad3aa94",
    "2ddaae14dd23643a4b5f71f8274534b0b34556a4",
    "880a9f6c45dbcb14215bb35de21fdbbfaeb89c2e",
    "147df44faa4eb12ffd4a0063fc3284f784ea67c8",
    "4f407378c93b9e2a8e24c855e8bed5eb12bf7a06",
    "a8a8ec06a85a1090d560dc6cf236663da580863e",
    "9b2b8038b52be022e42c8c7fdf26e236888f94c5",
    "aae50c585ec3ac33c6a9af792e80378904a73195"
  ],
  "changeHistoryShort": {
    "bc0edc47dbf47cdaa3485cfb724982f377c900df": "Ymultichange(Ydocchange,Yformatchange)",
    "5fb9e5009a8cdc7366b7a762f0e43dc47decf67c": "Yparametermetachange",
    "6b87d290954c4594fc69a3a0b85fff12490cfde5": "Ybodychange",
    "491340dc5e6c8d4233cc575571e15dd357f20b70": "Yformatchange",
    "3d57a495145916d1cd183cced771935c06da786a": "Ybodychange",
    "23df383408513eddaf3e6dc4244c89fd48427695": "Ybodychange",
    "d8df5107a76b1a7fa579ec91f5482be901d18435": "Yformatchange",
    "1596f3bbe57986361da4ac1a23634dd5b00d10df": "Yfilerename",
    "6a585453d385449dc23d90479488f92f02cd6b83": "Ybodychange",
    "02dd7c20646bf67dcfb6f7da6beeb7cdffc6ac22": "Ybodychange",
    "ac6e754ecfc86822aa1ab74d657b0b3f0222b2e6": "Ybodychange",
    "84234a65638f0e9e4be73dfcccaa6530a5b571af": "Ybodychange",
    "a3e716227a66fb02fc9cce926b8820a7b1c5f2c4": "Yformatchange",
    "d1121d3ad3154e3564e150555dcedb368ad3aa94": "Ybodychange",
    "2ddaae14dd23643a4b5f71f8274534b0b34556a4": "Ybodychange",
    "880a9f6c45dbcb14215bb35de21fdbbfaeb89c2e": "Ybodychange",
    "147df44faa4eb12ffd4a0063fc3284f784ea67c8": "Ydocchange",
    "4f407378c93b9e2a8e24c855e8bed5eb12bf7a06": "Ybodychange",
    "a8a8ec06a85a1090d560dc6cf236663da580863e": "Ybodychange",
    "9b2b8038b52be022e42c8c7fdf26e236888f94c5": "Ymultichange(Ybodychange,Ydocchange)",
    "aae50c585ec3ac33c6a9af792e80378904a73195": "Yintroduced"
  },
  "changeHistoryDetails": {
    "bc0edc47dbf47cdaa3485cfb724982f377c900df": {
      "type": "Ymultichange(Ydocchange,Yformatchange)",
      "commitMessage": "Clean ups.\n\n- maven-checkstyle-plugin 3.1.1 -\u003e 3.1.2.\n- checkstyle -\u003e 9.0\n- Updates for 21st century.\n- No need to nest else clause.\n- Use simple array declarations.\n- Use valueOf instead of new for Numbers.\n- Consistent formatting.\n- Remove some inline comments //-----...\n",
      "commitDate": "10/2/21 11:04 PM",
      "commitName": "bc0edc47dbf47cdaa3485cfb724982f377c900df",
      "commitAuthor": "Gary Gregory",
      "subchanges": [
        {
          "type": "Ydocchange",
          "commitMessage": "Clean ups.\n\n- maven-checkstyle-plugin 3.1.1 -\u003e 3.1.2.\n- checkstyle -\u003e 9.0\n- Updates for 21st century.\n- No need to nest else clause.\n- Use simple array declarations.\n- Use valueOf instead of new for Numbers.\n- Consistent formatting.\n- Remove some inline comments //-----...\n",
          "commitDate": "10/2/21 11:04 PM",
          "commitName": "bc0edc47dbf47cdaa3485cfb724982f377c900df",
          "commitAuthor": "Gary Gregory",
          "commitDateOld": "2/8/21 10:11 PM",
          "commitNameOld": "66cc7b4cb8b0f39edfe0ee37eead4ace04a7be4e",
          "commitAuthorOld": "Gary Gregory",
          "daysBetweenCommits": 236.04,
          "commitsBetweenForRepo": 22,
          "commitsBetweenForFile": 1,
          "actualSource": "protected StringBuffer renderWrappedText(final StringBuffer sb, final int width, int nextLineTabStop, String text) {\r\n    int pos \u003d findWrapPos(text, width, 0);\r\n    if (pos \u003d\u003d -1) {\r\n        sb.append(rtrim(text));\r\n        return sb;\r\n    }\r\n    sb.append(rtrim(text.substring(0, pos))).append(getNewLine());\r\n    if (nextLineTabStop \u003e\u003d width) {\r\n        nextLineTabStop \u003d 1;\r\n    }\r\n    final String padding \u003d createPadding(nextLineTabStop);\r\n    while (true) {\r\n        text \u003d padding + text.substring(pos).trim();\r\n        pos \u003d findWrapPos(text, width, 0);\r\n        if (pos \u003d\u003d -1) {\r\n            sb.append(text);\r\n            return sb;\r\n        }\r\n        if (text.length() \u003e width \u0026\u0026 pos \u003d\u003d nextLineTabStop - 1) {\r\n            pos \u003d width;\r\n        }\r\n        sb.append(rtrim(text.substring(0, pos))).append(getNewLine());\r\n    }\r\n}",
          "path": "src/main/java/org/apache/commons/cli/HelpFormatter.java",
          "functionStartLine": 768,
          "functionName": "renderWrappedText",
          "functionAnnotation": "",
          "functionDoc": "Render the specified text and return the rendered Options in a StringBuffer.\r\n\r\n@param sb The StringBuffer to place the rendered text into.\r\n@param width The number of characters to display per line\r\n@param nextLineTabStop The position on the next line for the first tab.\r\n@param text The text to be rendered.\r\n@return the StringBuffer with the rendered Options contents.\r\n",
          "diff": "",
          "extendedDetails": {
            "oldValue": "Render the specified text and return the rendered Options\r\nin a StringBuffer.\r\n\r\n@param sb The StringBuffer to place the rendered text into.\r\n@param width The number of characters to display per line\r\n@param nextLineTabStop The position on the next line for the first tab.\r\n@param text The text to be rendered.\r\n@return the StringBuffer with the rendered Options contents.\r\n",
            "newValue": "Render the specified text and return the rendered Options in a StringBuffer.\r\n\r\n@param sb The StringBuffer to place the rendered text into.\r\n@param width The number of characters to display per line\r\n@param nextLineTabStop The position on the next line for the first tab.\r\n@param text The text to be rendered.\r\n@return the StringBuffer with the rendered Options contents.\r\n"
          }
        },
        {
          "type": "Yformatchange",
          "commitMessage": "Clean ups.\n\n- maven-checkstyle-plugin 3.1.1 -\u003e 3.1.2.\n- checkstyle -\u003e 9.0\n- Updates for 21st century.\n- No need to nest else clause.\n- Use simple array declarations.\n- Use valueOf instead of new for Numbers.\n- Consistent formatting.\n- Remove some inline comments //-----...\n",
          "commitDate": "10/2/21 11:04 PM",
          "commitName": "bc0edc47dbf47cdaa3485cfb724982f377c900df",
          "commitAuthor": "Gary Gregory",
          "commitDateOld": "2/8/21 10:11 PM",
          "commitNameOld": "66cc7b4cb8b0f39edfe0ee37eead4ace04a7be4e",
          "commitAuthorOld": "Gary Gregory",
          "daysBetweenCommits": 236.04,
          "commitsBetweenForRepo": 22,
          "commitsBetweenForFile": 1,
          "actualSource": "protected StringBuffer renderWrappedText(final StringBuffer sb, final int width, int nextLineTabStop, String text) {\r\n    int pos \u003d findWrapPos(text, width, 0);\r\n    if (pos \u003d\u003d -1) {\r\n        sb.append(rtrim(text));\r\n        return sb;\r\n    }\r\n    sb.append(rtrim(text.substring(0, pos))).append(getNewLine());\r\n    if (nextLineTabStop \u003e\u003d width) {\r\n        nextLineTabStop \u003d 1;\r\n    }\r\n    final String padding \u003d createPadding(nextLineTabStop);\r\n    while (true) {\r\n        text \u003d padding + text.substring(pos).trim();\r\n        pos \u003d findWrapPos(text, width, 0);\r\n        if (pos \u003d\u003d -1) {\r\n            sb.append(text);\r\n            return sb;\r\n        }\r\n        if (text.length() \u003e width \u0026\u0026 pos \u003d\u003d nextLineTabStop - 1) {\r\n            pos \u003d width;\r\n        }\r\n        sb.append(rtrim(text.substring(0, pos))).append(getNewLine());\r\n    }\r\n}",
          "path": "src/main/java/org/apache/commons/cli/HelpFormatter.java",
          "functionStartLine": 768,
          "functionName": "renderWrappedText",
          "functionAnnotation": "",
          "functionDoc": "Render the specified text and return the rendered Options in a StringBuffer.\r\n\r\n@param sb The StringBuffer to place the rendered text into.\r\n@param width The number of characters to display per line\r\n@param nextLineTabStop The position on the next line for the first tab.\r\n@param text The text to be rendered.\r\n@return the StringBuffer with the rendered Options contents.\r\n",
          "diff": "",
          "extendedDetails": {}
        }
      ]
    },
    "5fb9e5009a8cdc7366b7a762f0e43dc47decf67c": {
      "type": "Yparametermetachange",
      "commitMessage": "Add final modifier to method parameters.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/cli/trunk@1797674 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "6/5/17 7:38 PM",
      "commitName": "5fb9e5009a8cdc7366b7a762f0e43dc47decf67c",
      "commitAuthor": "Gary D. Gregory",
      "commitDateOld": "6/5/17 7:37 PM",
      "commitNameOld": "357a8b0b8f1090db29e0d541a9419f570a78457b",
      "commitAuthorOld": "Gary D. Gregory",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "protected StringBuffer renderWrappedText(final StringBuffer sb, final int width, int nextLineTabStop, String text) {\r\n    int pos \u003d findWrapPos(text, width, 0);\r\n    if (pos \u003d\u003d -1) {\r\n        sb.append(rtrim(text));\r\n        return sb;\r\n    }\r\n    sb.append(rtrim(text.substring(0, pos))).append(getNewLine());\r\n    if (nextLineTabStop \u003e\u003d width) {\r\n        nextLineTabStop \u003d 1;\r\n    }\r\n    final String padding \u003d createPadding(nextLineTabStop);\r\n    while (true) {\r\n        text \u003d padding + text.substring(pos).trim();\r\n        pos \u003d findWrapPos(text, width, 0);\r\n        if (pos \u003d\u003d -1) {\r\n            sb.append(text);\r\n            return sb;\r\n        }\r\n        if (text.length() \u003e width \u0026\u0026 pos \u003d\u003d nextLineTabStop - 1) {\r\n            pos \u003d width;\r\n        }\r\n        sb.append(rtrim(text.substring(0, pos))).append(getNewLine());\r\n    }\r\n}",
      "path": "src/main/java/org/apache/commons/cli/HelpFormatter.java",
      "functionStartLine": 890,
      "functionName": "renderWrappedText",
      "functionAnnotation": "",
      "functionDoc": "Render the specified text and return the rendered Options\r\nin a StringBuffer.\r\n\r\n@param sb The StringBuffer to place the rendered text into.\r\n@param width The number of characters to display per line\r\n@param nextLineTabStop The position on the next line for the first tab.\r\n@param text The text to be rendered.\r\n@return the StringBuffer with the rendered Options contents.\r\n",
      "diff": "@@ -1,24 +1,24 @@\n-protected StringBuffer renderWrappedText(StringBuffer sb, int width, int nextLineTabStop, String text) {\r\n+protected StringBuffer renderWrappedText(final StringBuffer sb, final int width, int nextLineTabStop, String text) {\r\n     int pos \u003d findWrapPos(text, width, 0);\r\n     if (pos \u003d\u003d -1) {\r\n         sb.append(rtrim(text));\r\n         return sb;\r\n     }\r\n     sb.append(rtrim(text.substring(0, pos))).append(getNewLine());\r\n     if (nextLineTabStop \u003e\u003d width) {\r\n         nextLineTabStop \u003d 1;\r\n     }\r\n     final String padding \u003d createPadding(nextLineTabStop);\r\n     while (true) {\r\n         text \u003d padding + text.substring(pos).trim();\r\n         pos \u003d findWrapPos(text, width, 0);\r\n         if (pos \u003d\u003d -1) {\r\n             sb.append(text);\r\n             return sb;\r\n         }\r\n         if (text.length() \u003e width \u0026\u0026 pos \u003d\u003d nextLineTabStop - 1) {\r\n             pos \u003d width;\r\n         }\r\n         sb.append(rtrim(text.substring(0, pos))).append(getNewLine());\r\n     }\r\n }\n\\ No newline at end of file\n",
      "extendedDetails": {
        "oldValue": "[sb-StringBuffer, width-int, nextLineTabStop-int, text-String]",
        "newValue": "[sb-StringBuffer(modifiers-final), width-int(modifiers-final), nextLineTabStop-int, text-String]"
      }
    },
    "6b87d290954c4594fc69a3a0b85fff12490cfde5": {
      "type": "Ybodychange",
      "commitMessage": "PMD: Useless parenthesis\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/cli/trunk@1677402 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "5/3/15 4:57 PM",
      "commitName": "6b87d290954c4594fc69a3a0b85fff12490cfde5",
      "commitAuthor": "Benedikt Ritter",
      "commitDateOld": "2/11/13 11:03 PM",
      "commitNameOld": "fadd0a3c19356ebd5a0ee5a365ff0b6666ff99a9",
      "commitAuthorOld": "Thomas Neidhart",
      "daysBetweenCommits": 810.7,
      "commitsBetweenForRepo": 55,
      "commitsBetweenForFile": 1,
      "actualSource": "protected StringBuffer renderWrappedText(StringBuffer sb, int width, int nextLineTabStop, String text) {\r\n    int pos \u003d findWrapPos(text, width, 0);\r\n    if (pos \u003d\u003d -1) {\r\n        sb.append(rtrim(text));\r\n        return sb;\r\n    }\r\n    sb.append(rtrim(text.substring(0, pos))).append(getNewLine());\r\n    if (nextLineTabStop \u003e\u003d width) {\r\n        nextLineTabStop \u003d 1;\r\n    }\r\n    final String padding \u003d createPadding(nextLineTabStop);\r\n    while (true) {\r\n        text \u003d padding + text.substring(pos).trim();\r\n        pos \u003d findWrapPos(text, width, 0);\r\n        if (pos \u003d\u003d -1) {\r\n            sb.append(text);\r\n            return sb;\r\n        }\r\n        if (text.length() \u003e width \u0026\u0026 pos \u003d\u003d nextLineTabStop - 1) {\r\n            pos \u003d width;\r\n        }\r\n        sb.append(rtrim(text.substring(0, pos))).append(getNewLine());\r\n    }\r\n}",
      "path": "src/main/java/org/apache/commons/cli/HelpFormatter.java",
      "functionStartLine": 886,
      "functionName": "renderWrappedText",
      "functionAnnotation": "",
      "functionDoc": "Render the specified text and return the rendered Options\r\nin a StringBuffer.\r\n\r\n@param sb The StringBuffer to place the rendered text into.\r\n@param width The number of characters to display per line\r\n@param nextLineTabStop The position on the next line for the first tab.\r\n@param text The text to be rendered.\r\n@return the StringBuffer with the rendered Options contents.\r\n",
      "diff": "@@ -1,24 +1,24 @@\n protected StringBuffer renderWrappedText(StringBuffer sb, int width, int nextLineTabStop, String text) {\r\n     int pos \u003d findWrapPos(text, width, 0);\r\n     if (pos \u003d\u003d -1) {\r\n         sb.append(rtrim(text));\r\n         return sb;\r\n     }\r\n     sb.append(rtrim(text.substring(0, pos))).append(getNewLine());\r\n     if (nextLineTabStop \u003e\u003d width) {\r\n         nextLineTabStop \u003d 1;\r\n     }\r\n     final String padding \u003d createPadding(nextLineTabStop);\r\n     while (true) {\r\n         text \u003d padding + text.substring(pos).trim();\r\n         pos \u003d findWrapPos(text, width, 0);\r\n         if (pos \u003d\u003d -1) {\r\n             sb.append(text);\r\n             return sb;\r\n         }\r\n-        if ((text.length() \u003e width) \u0026\u0026 (pos \u003d\u003d nextLineTabStop - 1)) {\r\n+        if (text.length() \u003e width \u0026\u0026 pos \u003d\u003d nextLineTabStop - 1) {\r\n             pos \u003d width;\r\n         }\r\n         sb.append(rtrim(text.substring(0, pos))).append(getNewLine());\r\n     }\r\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "491340dc5e6c8d4233cc575571e15dd357f20b70": {
      "type": "Yformatchange",
      "commitMessage": "trailing spaces\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/cli/trunk@1095659 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "4/21/11 2:22 PM",
      "commitName": "491340dc5e6c8d4233cc575571e15dd357f20b70",
      "commitAuthor": "Simone Tripodi",
      "commitDateOld": "4/13/11 12:17 AM",
      "commitNameOld": "a955324468d45eb845e05107d5b0013285c3bc0a",
      "commitAuthorOld": "Emmanuel Bourg",
      "daysBetweenCommits": 8.59,
      "commitsBetweenForRepo": 10,
      "commitsBetweenForFile": 1,
      "actualSource": "protected StringBuffer renderWrappedText(StringBuffer sb, int width, int nextLineTabStop, String text) {\r\n    int pos \u003d findWrapPos(text, width, 0);\r\n    if (pos \u003d\u003d -1) {\r\n        sb.append(rtrim(text));\r\n        return sb;\r\n    }\r\n    sb.append(rtrim(text.substring(0, pos))).append(getNewLine());\r\n    if (nextLineTabStop \u003e\u003d width) {\r\n        nextLineTabStop \u003d 1;\r\n    }\r\n    final String padding \u003d createPadding(nextLineTabStop);\r\n    while (true) {\r\n        text \u003d padding + text.substring(pos).trim();\r\n        pos \u003d findWrapPos(text, width, 0);\r\n        if (pos \u003d\u003d -1) {\r\n            sb.append(text);\r\n            return sb;\r\n        }\r\n        if ((text.length() \u003e width) \u0026\u0026 (pos \u003d\u003d nextLineTabStop - 1)) {\r\n            pos \u003d width;\r\n        }\r\n        sb.append(rtrim(text.substring(0, pos))).append(getNewLine());\r\n    }\r\n}",
      "path": "src/main/java/org/apache/commons/cli/HelpFormatter.java",
      "functionStartLine": 845,
      "functionName": "renderWrappedText",
      "functionAnnotation": "",
      "functionDoc": "Render the specified text and return the rendered Options\r\nin a StringBuffer.\r\n\r\n@param sb The StringBuffer to place the rendered text into.\r\n@param width The number of characters to display per line\r\n@param nextLineTabStop The position on the next line for the first tab.\r\n@param text The text to be rendered.\r\n@return the StringBuffer with the rendered Options contents.\r\n",
      "diff": "",
      "extendedDetails": {}
    },
    "3d57a495145916d1cd183cced771935c06da786a": {
      "type": "Ybodychange",
      "commitMessage": "Removed the direct usage of the deprecated fields in HelpFormatter\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/cli/trunk@966310 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "7/21/10 7:49 PM",
      "commitName": "3d57a495145916d1cd183cced771935c06da786a",
      "commitAuthor": "Emmanuel Bourg",
      "commitDateOld": "7/21/10 7:40 PM",
      "commitNameOld": "483f811dfefdc6bee162481425f261d983f15e4a",
      "commitAuthorOld": "Emmanuel Bourg",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "protected StringBuffer renderWrappedText(StringBuffer sb, int width, int nextLineTabStop, String text) {\r\n    int pos \u003d findWrapPos(text, width, 0);\r\n    if (pos \u003d\u003d -1) {\r\n        sb.append(rtrim(text));\r\n        return sb;\r\n    }\r\n    sb.append(rtrim(text.substring(0, pos))).append(getNewLine());\r\n    if (nextLineTabStop \u003e\u003d width) {\r\n        nextLineTabStop \u003d 1;\r\n    }\r\n    final String padding \u003d createPadding(nextLineTabStop);\r\n    while (true) {\r\n        text \u003d padding + text.substring(pos).trim();\r\n        pos \u003d findWrapPos(text, width, 0);\r\n        if (pos \u003d\u003d -1) {\r\n            sb.append(text);\r\n            return sb;\r\n        }\r\n        if ((text.length() \u003e width) \u0026\u0026 (pos \u003d\u003d nextLineTabStop - 1)) {\r\n            pos \u003d width;\r\n        }\r\n        sb.append(rtrim(text.substring(0, pos))).append(getNewLine());\r\n    }\r\n}",
      "path": "src/main/java/org/apache/commons/cli/HelpFormatter.java",
      "functionStartLine": 848,
      "functionName": "renderWrappedText",
      "functionAnnotation": "",
      "functionDoc": "Render the specified text and return the rendered Options\r\nin a StringBuffer.\r\n\r\n@param sb The StringBuffer to place the rendered text into.\r\n@param width The number of characters to display per line\r\n@param nextLineTabStop The position on the next line for the first tab.\r\n@param text The text to be rendered.\r\n@return the StringBuffer with the rendered Options contents.\r\n",
      "diff": "@@ -1,24 +1,24 @@\n protected StringBuffer renderWrappedText(StringBuffer sb, int width, int nextLineTabStop, String text) {\r\n     int pos \u003d findWrapPos(text, width, 0);\r\n     if (pos \u003d\u003d -1) {\r\n         sb.append(rtrim(text));\r\n         return sb;\r\n     }\r\n-    sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\r\n+    sb.append(rtrim(text.substring(0, pos))).append(getNewLine());\r\n     if (nextLineTabStop \u003e\u003d width) {\r\n         nextLineTabStop \u003d 1;\r\n     }\r\n     final String padding \u003d createPadding(nextLineTabStop);\r\n     while (true) {\r\n         text \u003d padding + text.substring(pos).trim();\r\n         pos \u003d findWrapPos(text, width, 0);\r\n         if (pos \u003d\u003d -1) {\r\n             sb.append(text);\r\n             return sb;\r\n         }\r\n         if ((text.length() \u003e width) \u0026\u0026 (pos \u003d\u003d nextLineTabStop - 1)) {\r\n             pos \u003d width;\r\n         }\r\n-        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\r\n+        sb.append(rtrim(text.substring(0, pos))).append(getNewLine());\r\n     }\r\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "23df383408513eddaf3e6dc4244c89fd48427695": {
      "type": "Ybodychange",
      "commitMessage": "Simplified the createPadding() method\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/cli/trunk@961361 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "7/7/10 3:55 PM",
      "commitName": "23df383408513eddaf3e6dc4244c89fd48427695",
      "commitAuthor": "Emmanuel Bourg",
      "commitDateOld": "6/20/10 1:06 AM",
      "commitNameOld": "4d2c8a22d1e1831858029b8ef225a07f4445a221",
      "commitAuthorOld": "Emmanuel Bourg",
      "daysBetweenCommits": 17.62,
      "commitsBetweenForRepo": 3,
      "commitsBetweenForFile": 1,
      "actualSource": "protected StringBuffer renderWrappedText(StringBuffer sb, int width, int nextLineTabStop, String text) {\r\n    int pos \u003d findWrapPos(text, width, 0);\r\n    if (pos \u003d\u003d -1) {\r\n        sb.append(rtrim(text));\r\n        return sb;\r\n    }\r\n    sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\r\n    if (nextLineTabStop \u003e\u003d width) {\r\n        nextLineTabStop \u003d 1;\r\n    }\r\n    final String padding \u003d createPadding(nextLineTabStop);\r\n    while (true) {\r\n        text \u003d padding + text.substring(pos).trim();\r\n        pos \u003d findWrapPos(text, width, 0);\r\n        if (pos \u003d\u003d -1) {\r\n            sb.append(text);\r\n            return sb;\r\n        }\r\n        if ((text.length() \u003e width) \u0026\u0026 (pos \u003d\u003d nextLineTabStop - 1)) {\r\n            pos \u003d width;\r\n        }\r\n        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\r\n    }\r\n}",
      "path": "src/main/java/org/apache/commons/cli/HelpFormatter.java",
      "functionStartLine": 845,
      "functionName": "renderWrappedText",
      "functionAnnotation": "",
      "functionDoc": "Render the specified text and return the rendered Options\r\nin a StringBuffer.\r\n\r\n@param sb The StringBuffer to place the rendered text into.\r\n@param width The number of characters to display per line\r\n@param nextLineTabStop The position on the next line for the first tab.\r\n@param text The text to be rendered.\r\n@return the StringBuffer with the rendered Options contents.\r\n",
      "diff": "",
      "extendedDetails": {}
    },
    "d8df5107a76b1a7fa579ec91f5482be901d18435": {
      "type": "Yformatchange",
      "commitMessage": "Fixed some of the checkstyle errors\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/cli/trunk@955185 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "6/16/10 1:32 PM",
      "commitName": "d8df5107a76b1a7fa579ec91f5482be901d18435",
      "commitAuthor": "Emmanuel Bourg",
      "commitDateOld": "6/16/10 12:45 PM",
      "commitNameOld": "1596f3bbe57986361da4ac1a23634dd5b00d10df",
      "commitAuthorOld": "Emmanuel Bourg",
      "daysBetweenCommits": 0.03,
      "commitsBetweenForRepo": 3,
      "commitsBetweenForFile": 1,
      "actualSource": "protected StringBuffer renderWrappedText(StringBuffer sb, int width, int nextLineTabStop, String text) {\r\n    int pos \u003d findWrapPos(text, width, 0);\r\n    if (pos \u003d\u003d -1) {\r\n        sb.append(rtrim(text));\r\n        return sb;\r\n    }\r\n    sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\r\n    if (nextLineTabStop \u003e\u003d width) {\r\n        nextLineTabStop \u003d 1;\r\n    }\r\n    final String padding \u003d createPadding(nextLineTabStop);\r\n    while (true) {\r\n        text \u003d padding + text.substring(pos).trim();\r\n        pos \u003d findWrapPos(text, width, 0);\r\n        if (pos \u003d\u003d -1) {\r\n            sb.append(text);\r\n            return sb;\r\n        }\r\n        if ((text.length() \u003e width) \u0026\u0026 (pos \u003d\u003d nextLineTabStop - 1)) {\r\n            pos \u003d width;\r\n        }\r\n        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\r\n    }\r\n}",
      "path": "src/main/java/org/apache/commons/cli/HelpFormatter.java",
      "functionStartLine": 842,
      "functionName": "renderWrappedText",
      "functionAnnotation": "",
      "functionDoc": "Render the specified text and return the rendered Options\r\nin a StringBuffer.\r\n\r\n@param sb The StringBuffer to place the rendered text into.\r\n@param width The number of characters to display per line\r\n@param nextLineTabStop The position on the next line for the first tab.\r\n@param text The text to be rendered.\r\n@return the StringBuffer with the rendered Options contents.\r\n",
      "diff": "",
      "extendedDetails": {}
    },
    "1596f3bbe57986361da4ac1a23634dd5b00d10df": {
      "type": "Yfilerename",
      "commitMessage": "Switched to the Maven 2 default directory layout (part 3)\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/cli/trunk@955173 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "6/16/10 12:45 PM",
      "commitName": "1596f3bbe57986361da4ac1a23634dd5b00d10df",
      "commitAuthor": "Emmanuel Bourg",
      "commitDateOld": "6/16/10 12:42 PM",
      "commitNameOld": "406a35f1a128944b7c51dcbc4a1f04c3f8bec3e6",
      "commitAuthorOld": "Emmanuel Bourg",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "protected StringBuffer renderWrappedText(StringBuffer sb, int width, int nextLineTabStop, String text) {\r\n    int pos \u003d findWrapPos(text, width, 0);\r\n    if (pos \u003d\u003d -1) {\r\n        sb.append(rtrim(text));\r\n        return sb;\r\n    }\r\n    sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\r\n    if (nextLineTabStop \u003e\u003d width) {\r\n        nextLineTabStop \u003d 1;\r\n    }\r\n    final String padding \u003d createPadding(nextLineTabStop);\r\n    while (true) {\r\n        text \u003d padding + text.substring(pos).trim();\r\n        pos \u003d findWrapPos(text, width, 0);\r\n        if (pos \u003d\u003d -1) {\r\n            sb.append(text);\r\n            return sb;\r\n        }\r\n        if ((text.length() \u003e width) \u0026\u0026 (pos \u003d\u003d nextLineTabStop - 1)) {\r\n            pos \u003d width;\r\n        }\r\n        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\r\n    }\r\n}",
      "path": "src/main/java/org/apache/commons/cli/HelpFormatter.java",
      "functionStartLine": 842,
      "functionName": "renderWrappedText",
      "functionAnnotation": "",
      "functionDoc": "Render the specified text and return the rendered Options\r\nin a StringBuffer.\r\n\r\n@param sb The StringBuffer to place the rendered text into.\r\n@param width The number of characters to display per line\r\n@param nextLineTabStop The position on the next line for the first tab.\r\n@param text The text to be rendered.\r\n@return the StringBuffer with the rendered Options contents.\r\n",
      "diff": "",
      "extendedDetails": {
        "oldPath": "src/java/org/apache/commons/cli/HelpFormatter.java",
        "newPath": "src/main/java/org/apache/commons/cli/HelpFormatter.java"
      }
    },
    "6a585453d385449dc23d90479488f92f02cd6b83": {
      "type": "Ybodychange",
      "commitMessage": "Adjusting - best is to switch to an indent of 1 than do silly things like having every line have 1 character. CLI-162\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/cli/branches/cli-1.x@748463 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "2/27/09 11:38 AM",
      "commitName": "6a585453d385449dc23d90479488f92f02cd6b83",
      "commitAuthor": "Henri Yandell",
      "commitDateOld": "2/27/09 11:34 AM",
      "commitNameOld": "02dd7c20646bf67dcfb6f7da6beeb7cdffc6ac22",
      "commitAuthorOld": "Henri Yandell",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "protected StringBuffer renderWrappedText(StringBuffer sb, int width, int nextLineTabStop, String text) {\r\n    int pos \u003d findWrapPos(text, width, 0);\r\n    if (pos \u003d\u003d -1) {\r\n        sb.append(rtrim(text));\r\n        return sb;\r\n    }\r\n    sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\r\n    if (nextLineTabStop \u003e\u003d width) {\r\n        nextLineTabStop \u003d 1;\r\n    }\r\n    final String padding \u003d createPadding(nextLineTabStop);\r\n    while (true) {\r\n        text \u003d padding + text.substring(pos).trim();\r\n        pos \u003d findWrapPos(text, width, 0);\r\n        if (pos \u003d\u003d -1) {\r\n            sb.append(text);\r\n            return sb;\r\n        }\r\n        if ((text.length() \u003e width) \u0026\u0026 (pos \u003d\u003d nextLineTabStop - 1)) {\r\n            pos \u003d width;\r\n        }\r\n        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\r\n    }\r\n}",
      "path": "src/java/org/apache/commons/cli/HelpFormatter.java",
      "functionStartLine": 809,
      "functionName": "renderWrappedText",
      "functionAnnotation": "",
      "functionDoc": "Render the specified text and return the rendered Options\r\nin a StringBuffer.\r\n\r\n@param sb The StringBuffer to place the rendered text into.\r\n@param width The number of characters to display per line\r\n@param nextLineTabStop The position on the next line for the first tab.\r\n@param text The text to be rendered.\r\n@return the StringBuffer with the rendered Options contents.\r\n",
      "diff": "@@ -1,24 +1,24 @@\n protected StringBuffer renderWrappedText(StringBuffer sb, int width, int nextLineTabStop, String text) {\r\n     int pos \u003d findWrapPos(text, width, 0);\r\n     if (pos \u003d\u003d -1) {\r\n         sb.append(rtrim(text));\r\n         return sb;\r\n     }\r\n     sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\r\n     if (nextLineTabStop \u003e\u003d width) {\r\n-        nextLineTabStop \u003d width - 1;\r\n+        nextLineTabStop \u003d 1;\r\n     }\r\n     final String padding \u003d createPadding(nextLineTabStop);\r\n     while (true) {\r\n         text \u003d padding + text.substring(pos).trim();\r\n         pos \u003d findWrapPos(text, width, 0);\r\n         if (pos \u003d\u003d -1) {\r\n             sb.append(text);\r\n             return sb;\r\n         }\r\n         if ((text.length() \u003e width) \u0026\u0026 (pos \u003d\u003d nextLineTabStop - 1)) {\r\n             pos \u003d width;\r\n         }\r\n         sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\r\n     }\r\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "02dd7c20646bf67dcfb6f7da6beeb7cdffc6ac22": {
      "type": "Ybodychange",
      "commitMessage": "Switching from the IllegalStateException to trying hard to work. A better user experience and didn\u0027t end up with the code being any more evil. CLI-162\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/cli/branches/cli-1.x@748461 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "2/27/09 11:34 AM",
      "commitName": "02dd7c20646bf67dcfb6f7da6beeb7cdffc6ac22",
      "commitAuthor": "Henri Yandell",
      "commitDateOld": "2/27/09 11:18 AM",
      "commitNameOld": "ac6e754ecfc86822aa1ab74d657b0b3f0222b2e6",
      "commitAuthorOld": "Henri Yandell",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "protected StringBuffer renderWrappedText(StringBuffer sb, int width, int nextLineTabStop, String text) {\r\n    int pos \u003d findWrapPos(text, width, 0);\r\n    if (pos \u003d\u003d -1) {\r\n        sb.append(rtrim(text));\r\n        return sb;\r\n    }\r\n    sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\r\n    if (nextLineTabStop \u003e\u003d width) {\r\n        nextLineTabStop \u003d width - 1;\r\n    }\r\n    final String padding \u003d createPadding(nextLineTabStop);\r\n    while (true) {\r\n        text \u003d padding + text.substring(pos).trim();\r\n        pos \u003d findWrapPos(text, width, 0);\r\n        if (pos \u003d\u003d -1) {\r\n            sb.append(text);\r\n            return sb;\r\n        }\r\n        if ((text.length() \u003e width) \u0026\u0026 (pos \u003d\u003d nextLineTabStop - 1)) {\r\n            pos \u003d width;\r\n        }\r\n        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\r\n    }\r\n}",
      "path": "src/java/org/apache/commons/cli/HelpFormatter.java",
      "functionStartLine": 809,
      "functionName": "renderWrappedText",
      "functionAnnotation": "",
      "functionDoc": "Render the specified text and return the rendered Options\r\nin a StringBuffer.\r\n\r\n@param sb The StringBuffer to place the rendered text into.\r\n@param width The number of characters to display per line\r\n@param nextLineTabStop The position on the next line for the first tab.\r\n@param text The text to be rendered.\r\n@return the StringBuffer with the rendered Options contents.\r\n",
      "diff": "@@ -1,24 +1,24 @@\n protected StringBuffer renderWrappedText(StringBuffer sb, int width, int nextLineTabStop, String text) {\r\n     int pos \u003d findWrapPos(text, width, 0);\r\n     if (pos \u003d\u003d -1) {\r\n         sb.append(rtrim(text));\r\n         return sb;\r\n     }\r\n     sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\r\n     if (nextLineTabStop \u003e\u003d width) {\r\n-        throw new IllegalStateException(\"Total width is less than the width of the argument and indent \" + \"- no room for the description\");\r\n+        nextLineTabStop \u003d width - 1;\r\n     }\r\n     final String padding \u003d createPadding(nextLineTabStop);\r\n     while (true) {\r\n         text \u003d padding + text.substring(pos).trim();\r\n         pos \u003d findWrapPos(text, width, 0);\r\n         if (pos \u003d\u003d -1) {\r\n             sb.append(text);\r\n             return sb;\r\n         }\r\n         if ((text.length() \u003e width) \u0026\u0026 (pos \u003d\u003d nextLineTabStop - 1)) {\r\n             pos \u003d width;\r\n         }\r\n         sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\r\n     }\r\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "ac6e754ecfc86822aa1ab74d657b0b3f0222b2e6": {
      "type": "Ybodychange",
      "commitMessage": "Improving the order of the code - no point using a variable before it is tested\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/cli/branches/cli-1.x@748453 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "2/27/09 11:18 AM",
      "commitName": "ac6e754ecfc86822aa1ab74d657b0b3f0222b2e6",
      "commitAuthor": "Henri Yandell",
      "commitDateOld": "2/20/09 7:09 AM",
      "commitNameOld": "eeb83e4d69f835a5a1da54f6fd1f541d9ed7a80d",
      "commitAuthorOld": "Henri Yandell",
      "daysBetweenCommits": 7.17,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "protected StringBuffer renderWrappedText(StringBuffer sb, int width, int nextLineTabStop, String text) {\r\n    int pos \u003d findWrapPos(text, width, 0);\r\n    if (pos \u003d\u003d -1) {\r\n        sb.append(rtrim(text));\r\n        return sb;\r\n    }\r\n    sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\r\n    if (nextLineTabStop \u003e\u003d width) {\r\n        throw new IllegalStateException(\"Total width is less than the width of the argument and indent \" + \"- no room for the description\");\r\n    }\r\n    final String padding \u003d createPadding(nextLineTabStop);\r\n    while (true) {\r\n        text \u003d padding + text.substring(pos).trim();\r\n        pos \u003d findWrapPos(text, width, 0);\r\n        if (pos \u003d\u003d -1) {\r\n            sb.append(text);\r\n            return sb;\r\n        }\r\n        if ((text.length() \u003e width) \u0026\u0026 (pos \u003d\u003d nextLineTabStop - 1)) {\r\n            pos \u003d width;\r\n        }\r\n        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\r\n    }\r\n}",
      "path": "src/java/org/apache/commons/cli/HelpFormatter.java",
      "functionStartLine": 809,
      "functionName": "renderWrappedText",
      "functionAnnotation": "",
      "functionDoc": "Render the specified text and return the rendered Options\r\nin a StringBuffer.\r\n\r\n@param sb The StringBuffer to place the rendered text into.\r\n@param width The number of characters to display per line\r\n@param nextLineTabStop The position on the next line for the first tab.\r\n@param text The text to be rendered.\r\n@return the StringBuffer with the rendered Options contents.\r\n",
      "diff": "@@ -1,24 +1,24 @@\n protected StringBuffer renderWrappedText(StringBuffer sb, int width, int nextLineTabStop, String text) {\r\n     int pos \u003d findWrapPos(text, width, 0);\r\n     if (pos \u003d\u003d -1) {\r\n         sb.append(rtrim(text));\r\n         return sb;\r\n     }\r\n     sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\r\n-    final String padding \u003d createPadding(nextLineTabStop);\r\n     if (nextLineTabStop \u003e\u003d width) {\r\n         throw new IllegalStateException(\"Total width is less than the width of the argument and indent \" + \"- no room for the description\");\r\n     }\r\n+    final String padding \u003d createPadding(nextLineTabStop);\r\n     while (true) {\r\n         text \u003d padding + text.substring(pos).trim();\r\n         pos \u003d findWrapPos(text, width, 0);\r\n         if (pos \u003d\u003d -1) {\r\n             sb.append(text);\r\n             return sb;\r\n         }\r\n         if ((text.length() \u003e width) \u0026\u0026 (pos \u003d\u003d nextLineTabStop - 1)) {\r\n             pos \u003d width;\r\n         }\r\n         sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\r\n     }\r\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "84234a65638f0e9e4be73dfcccaa6530a5b571af": {
      "type": "Ybodychange",
      "commitMessage": "Applying additional patch to throw IllegalStateException when the specified width is not enough to fit the flags, indent and 1 character for the description. This closes out CLI-162 (for now :) ). \n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/cli/branches/cli-1.x@746137 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "2/20/09 7:00 AM",
      "commitName": "84234a65638f0e9e4be73dfcccaa6530a5b571af",
      "commitAuthor": "Henri Yandell",
      "commitDateOld": "2/19/09 7:07 AM",
      "commitNameOld": "a3e716227a66fb02fc9cce926b8820a7b1c5f2c4",
      "commitAuthorOld": "Henri Yandell",
      "daysBetweenCommits": 1.0,
      "commitsBetweenForRepo": 4,
      "commitsBetweenForFile": 1,
      "actualSource": "protected StringBuffer renderWrappedText(StringBuffer sb, int width, int nextLineTabStop, String text) {\r\n    int pos \u003d findWrapPos(text, width, 0);\r\n    if (pos \u003d\u003d -1) {\r\n        sb.append(rtrim(text));\r\n        return sb;\r\n    }\r\n    sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\r\n    final String padding \u003d createPadding(nextLineTabStop);\r\n    if (nextLineTabStop \u003e\u003d width) {\r\n        throw new IllegalStateException(\"Total width is less than the width of the argument and indent \" + \"- no room for the description\");\r\n    }\r\n    while (true) {\r\n        text \u003d padding + text.substring(pos).trim();\r\n        pos \u003d findWrapPos(text, width, 0);\r\n        if (pos \u003d\u003d -1) {\r\n            sb.append(text);\r\n            return sb;\r\n        }\r\n        if ((text.length() \u003e width) \u0026\u0026 (pos \u003d\u003d nextLineTabStop - 1)) {\r\n            pos \u003d width;\r\n        }\r\n        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\r\n    }\r\n}",
      "path": "src/java/org/apache/commons/cli/HelpFormatter.java",
      "functionStartLine": 805,
      "functionName": "renderWrappedText",
      "functionAnnotation": "",
      "functionDoc": "Render the specified text and return the rendered Options\r\nin a StringBuffer.\r\n\r\n@param sb The StringBuffer to place the rendered text into.\r\n@param width The number of characters to display per line\r\n@param nextLineTabStop The position on the next line for the first tab.\r\n@param text The text to be rendered.\r\n@return the StringBuffer with the rendered Options contents.\r\n",
      "diff": "@@ -1,21 +1,24 @@\n protected StringBuffer renderWrappedText(StringBuffer sb, int width, int nextLineTabStop, String text) {\r\n     int pos \u003d findWrapPos(text, width, 0);\r\n     if (pos \u003d\u003d -1) {\r\n         sb.append(rtrim(text));\r\n         return sb;\r\n     }\r\n     sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\r\n     final String padding \u003d createPadding(nextLineTabStop);\r\n+    if (nextLineTabStop \u003e\u003d width) {\r\n+        throw new IllegalStateException(\"Total width is less than the width of the argument and indent \" + \"- no room for the description\");\r\n+    }\r\n     while (true) {\r\n         text \u003d padding + text.substring(pos).trim();\r\n         pos \u003d findWrapPos(text, width, 0);\r\n         if (pos \u003d\u003d -1) {\r\n             sb.append(text);\r\n             return sb;\r\n         }\r\n         if ((text.length() \u003e width) \u0026\u0026 (pos \u003d\u003d nextLineTabStop - 1)) {\r\n             pos \u003d width;\r\n         }\r\n         sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\r\n     }\r\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "a3e716227a66fb02fc9cce926b8820a7b1c5f2c4": {
      "type": "Yformatchange",
      "commitMessage": "Always hard to remember to drop the braces in CLI\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/cli/branches/cli-1.x@745727 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "2/19/09 7:07 AM",
      "commitName": "a3e716227a66fb02fc9cce926b8820a7b1c5f2c4",
      "commitAuthor": "Henri Yandell",
      "commitDateOld": "2/19/09 7:06 AM",
      "commitNameOld": "d1121d3ad3154e3564e150555dcedb368ad3aa94",
      "commitAuthorOld": "Henri Yandell",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "protected StringBuffer renderWrappedText(StringBuffer sb, int width, int nextLineTabStop, String text) {\r\n    int pos \u003d findWrapPos(text, width, 0);\r\n    if (pos \u003d\u003d -1) {\r\n        sb.append(rtrim(text));\r\n        return sb;\r\n    }\r\n    sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\r\n    final String padding \u003d createPadding(nextLineTabStop);\r\n    while (true) {\r\n        text \u003d padding + text.substring(pos).trim();\r\n        pos \u003d findWrapPos(text, width, 0);\r\n        if (pos \u003d\u003d -1) {\r\n            sb.append(text);\r\n            return sb;\r\n        }\r\n        if ((text.length() \u003e width) \u0026\u0026 (pos \u003d\u003d nextLineTabStop - 1)) {\r\n            pos \u003d width;\r\n        }\r\n        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\r\n    }\r\n}",
      "path": "src/java/org/apache/commons/cli/HelpFormatter.java",
      "functionStartLine": 805,
      "functionName": "renderWrappedText",
      "functionAnnotation": "",
      "functionDoc": "Render the specified text and return the rendered Options\r\nin a StringBuffer.\r\n\r\n@param sb The StringBuffer to place the rendered text into.\r\n@param width The number of characters to display per line\r\n@param nextLineTabStop The position on the next line for the first tab.\r\n@param text The text to be rendered.\r\n@return the StringBuffer with the rendered Options contents.\r\n",
      "diff": "",
      "extendedDetails": {}
    },
    "d1121d3ad3154e3564e150555dcedb368ad3aa94": {
      "type": "Ybodychange",
      "commitMessage": "Adjusting so that long lines are mercilessly cut off at the maxwidth and continued as before on the following line. \n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/cli/branches/cli-1.x@745725 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "2/19/09 7:06 AM",
      "commitName": "d1121d3ad3154e3564e150555dcedb368ad3aa94",
      "commitAuthor": "Henri Yandell",
      "commitDateOld": "2/18/09 7:42 AM",
      "commitNameOld": "2ddaae14dd23643a4b5f71f8274534b0b34556a4",
      "commitAuthorOld": "Henri Yandell",
      "daysBetweenCommits": 0.97,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "protected StringBuffer renderWrappedText(StringBuffer sb, int width, int nextLineTabStop, String text) {\r\n    int pos \u003d findWrapPos(text, width, 0);\r\n    if (pos \u003d\u003d -1) {\r\n        sb.append(rtrim(text));\r\n        return sb;\r\n    }\r\n    sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\r\n    final String padding \u003d createPadding(nextLineTabStop);\r\n    while (true) {\r\n        text \u003d padding + text.substring(pos).trim();\r\n        pos \u003d findWrapPos(text, width, 0);\r\n        if (pos \u003d\u003d -1) {\r\n            sb.append(text);\r\n            return sb;\r\n        }\r\n        if ((text.length() \u003e width) \u0026\u0026 (pos \u003d\u003d nextLineTabStop - 1)) {\r\n            pos \u003d width;\r\n        }\r\n        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\r\n    }\r\n}",
      "path": "src/java/org/apache/commons/cli/HelpFormatter.java",
      "functionStartLine": 805,
      "functionName": "renderWrappedText",
      "functionAnnotation": "",
      "functionDoc": "Render the specified text and return the rendered Options\r\nin a StringBuffer.\r\n\r\n@param sb The StringBuffer to place the rendered text into.\r\n@param width The number of characters to display per line\r\n@param nextLineTabStop The position on the next line for the first tab.\r\n@param text The text to be rendered.\r\n@return the StringBuffer with the rendered Options contents.\r\n",
      "diff": "@@ -1,22 +1,21 @@\n protected StringBuffer renderWrappedText(StringBuffer sb, int width, int nextLineTabStop, String text) {\r\n     int pos \u003d findWrapPos(text, width, 0);\r\n     if (pos \u003d\u003d -1) {\r\n         sb.append(rtrim(text));\r\n         return sb;\r\n     }\r\n     sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\r\n     final String padding \u003d createPadding(nextLineTabStop);\r\n     while (true) {\r\n         text \u003d padding + text.substring(pos).trim();\r\n         pos \u003d findWrapPos(text, width, 0);\r\n         if (pos \u003d\u003d -1) {\r\n             sb.append(text);\r\n             return sb;\r\n         }\r\n         if ((text.length() \u003e width) \u0026\u0026 (pos \u003d\u003d nextLineTabStop - 1)) {\r\n-            sb.append(text);\r\n-            return sb;\r\n+            pos \u003d width;\r\n         }\r\n         sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\r\n     }\r\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "2ddaae14dd23643a4b5f71f8274534b0b34556a4": {
      "type": "Ybodychange",
      "commitMessage": "Applying my second attempt at a patch to CLI-162. This fixes Gary\u0027s reported bug (one of which was an example of CLI-162, and one a bug in my first attempt to patch). Open question is whether to output text that is too long, or try and break it up to fit the screen width. \n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/cli/branches/cli-1.x@745388 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "2/18/09 7:42 AM",
      "commitName": "2ddaae14dd23643a4b5f71f8274534b0b34556a4",
      "commitAuthor": "Henri Yandell",
      "commitDateOld": "1/17/09 11:30 AM",
      "commitNameOld": "880a9f6c45dbcb14215bb35de21fdbbfaeb89c2e",
      "commitAuthorOld": "Henri Yandell",
      "daysBetweenCommits": 31.84,
      "commitsBetweenForRepo": 18,
      "commitsBetweenForFile": 1,
      "actualSource": "protected StringBuffer renderWrappedText(StringBuffer sb, int width, int nextLineTabStop, String text) {\r\n    int pos \u003d findWrapPos(text, width, 0);\r\n    if (pos \u003d\u003d -1) {\r\n        sb.append(rtrim(text));\r\n        return sb;\r\n    }\r\n    sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\r\n    final String padding \u003d createPadding(nextLineTabStop);\r\n    while (true) {\r\n        text \u003d padding + text.substring(pos).trim();\r\n        pos \u003d findWrapPos(text, width, 0);\r\n        if (pos \u003d\u003d -1) {\r\n            sb.append(text);\r\n            return sb;\r\n        }\r\n        if ((text.length() \u003e width) \u0026\u0026 (pos \u003d\u003d nextLineTabStop - 1)) {\r\n            sb.append(text);\r\n            return sb;\r\n        }\r\n        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\r\n    }\r\n}",
      "path": "src/java/org/apache/commons/cli/HelpFormatter.java",
      "functionStartLine": 805,
      "functionName": "renderWrappedText",
      "functionAnnotation": "",
      "functionDoc": "Render the specified text and return the rendered Options\r\nin a StringBuffer.\r\n\r\n@param sb The StringBuffer to place the rendered text into.\r\n@param width The number of characters to display per line\r\n@param nextLineTabStop The position on the next line for the first tab.\r\n@param text The text to be rendered.\r\n@return the StringBuffer with the rendered Options contents.\r\n",
      "diff": "@@ -1,21 +1,22 @@\n protected StringBuffer renderWrappedText(StringBuffer sb, int width, int nextLineTabStop, String text) {\r\n     int pos \u003d findWrapPos(text, width, 0);\r\n     if (pos \u003d\u003d -1) {\r\n         sb.append(rtrim(text));\r\n         return sb;\r\n     }\r\n     sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\r\n     final String padding \u003d createPadding(nextLineTabStop);\r\n     while (true) {\r\n-        int lastPos \u003d pos;\r\n         text \u003d padding + text.substring(pos).trim();\r\n         pos \u003d findWrapPos(text, width, 0);\r\n         if (pos \u003d\u003d -1) {\r\n             sb.append(text);\r\n             return sb;\r\n-        } else if (pos \u003d\u003d lastPos) {\r\n-            throw new RuntimeException(\"Text too long for line - throwing exception to avoid infinite loop [CLI-162]: \" + text);\r\n+        }\r\n+        if ((text.length() \u003e width) \u0026\u0026 (pos \u003d\u003d nextLineTabStop - 1)) {\r\n+            sb.append(text);\r\n+            return sb;\r\n         }\r\n         sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\r\n     }\r\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "880a9f6c45dbcb14215bb35de21fdbbfaeb89c2e": {
      "type": "Ybodychange",
      "commitMessage": "Changing the current OutOfMemoryError to a RuntimeException per CLI-162. A new ticket for the RuntimeException is at CLI-174\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/cli/branches/cli-1.x@735257 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "1/17/09 11:30 AM",
      "commitName": "880a9f6c45dbcb14215bb35de21fdbbfaeb89c2e",
      "commitAuthor": "Henri Yandell",
      "commitDateOld": "7/29/08 11:13 AM",
      "commitNameOld": "147df44faa4eb12ffd4a0063fc3284f784ea67c8",
      "commitAuthorOld": "Emmanuel Bourg",
      "daysBetweenCommits": 172.05,
      "commitsBetweenForRepo": 21,
      "commitsBetweenForFile": 1,
      "actualSource": "protected StringBuffer renderWrappedText(StringBuffer sb, int width, int nextLineTabStop, String text) {\r\n    int pos \u003d findWrapPos(text, width, 0);\r\n    if (pos \u003d\u003d -1) {\r\n        sb.append(rtrim(text));\r\n        return sb;\r\n    }\r\n    sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\r\n    final String padding \u003d createPadding(nextLineTabStop);\r\n    while (true) {\r\n        int lastPos \u003d pos;\r\n        text \u003d padding + text.substring(pos).trim();\r\n        pos \u003d findWrapPos(text, width, 0);\r\n        if (pos \u003d\u003d -1) {\r\n            sb.append(text);\r\n            return sb;\r\n        } else if (pos \u003d\u003d lastPos) {\r\n            throw new RuntimeException(\"Text too long for line - throwing exception to avoid infinite loop [CLI-162]: \" + text);\r\n        }\r\n        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\r\n    }\r\n}",
      "path": "src/java/org/apache/commons/cli/HelpFormatter.java",
      "functionStartLine": 805,
      "functionName": "renderWrappedText",
      "functionAnnotation": "",
      "functionDoc": "Render the specified text and return the rendered Options\r\nin a StringBuffer.\r\n\r\n@param sb The StringBuffer to place the rendered text into.\r\n@param width The number of characters to display per line\r\n@param nextLineTabStop The position on the next line for the first tab.\r\n@param text The text to be rendered.\r\n@return the StringBuffer with the rendered Options contents.\r\n",
      "diff": "@@ -1,18 +1,21 @@\n protected StringBuffer renderWrappedText(StringBuffer sb, int width, int nextLineTabStop, String text) {\r\n     int pos \u003d findWrapPos(text, width, 0);\r\n     if (pos \u003d\u003d -1) {\r\n         sb.append(rtrim(text));\r\n         return sb;\r\n     }\r\n     sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\r\n     final String padding \u003d createPadding(nextLineTabStop);\r\n     while (true) {\r\n+        int lastPos \u003d pos;\r\n         text \u003d padding + text.substring(pos).trim();\r\n         pos \u003d findWrapPos(text, width, 0);\r\n         if (pos \u003d\u003d -1) {\r\n             sb.append(text);\r\n             return sb;\r\n+        } else if (pos \u003d\u003d lastPos) {\r\n+            throw new RuntimeException(\"Text too long for line - throwing exception to avoid infinite loop [CLI-162]: \" + text);\r\n         }\r\n         sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\r\n     }\r\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "147df44faa4eb12ffd4a0063fc3284f784ea67c8": {
      "type": "Ydocchange",
      "commitMessage": "Style update\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/cli/branches/cli-1.x@680644 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "7/29/08 11:13 AM",
      "commitName": "147df44faa4eb12ffd4a0063fc3284f784ea67c8",
      "commitAuthor": "Emmanuel Bourg",
      "commitDateOld": "5/30/08 1:22 PM",
      "commitNameOld": "d36adebd3547279b709960c902c3fb7b89a9a4ef",
      "commitAuthorOld": "Emmanuel Bourg",
      "daysBetweenCommits": 59.91,
      "commitsBetweenForRepo": 39,
      "commitsBetweenForFile": 1,
      "actualSource": "protected StringBuffer renderWrappedText(StringBuffer sb, int width, int nextLineTabStop, String text) {\r\n    int pos \u003d findWrapPos(text, width, 0);\r\n    if (pos \u003d\u003d -1) {\r\n        sb.append(rtrim(text));\r\n        return sb;\r\n    }\r\n    sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\r\n    final String padding \u003d createPadding(nextLineTabStop);\r\n    while (true) {\r\n        text \u003d padding + text.substring(pos).trim();\r\n        pos \u003d findWrapPos(text, width, 0);\r\n        if (pos \u003d\u003d -1) {\r\n            sb.append(text);\r\n            return sb;\r\n        }\r\n        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\r\n    }\r\n}",
      "path": "src/java/org/apache/commons/cli/HelpFormatter.java",
      "functionStartLine": 805,
      "functionName": "renderWrappedText",
      "functionAnnotation": "",
      "functionDoc": "Render the specified text and return the rendered Options\r\nin a StringBuffer.\r\n\r\n@param sb The StringBuffer to place the rendered text into.\r\n@param width The number of characters to display per line\r\n@param nextLineTabStop The position on the next line for the first tab.\r\n@param text The text to be rendered.\r\n@return the StringBuffer with the rendered Options contents.\r\n",
      "diff": "",
      "extendedDetails": {
        "oldValue": "\u003cp\u003eRender the specified text and return the rendered Options\r\nin a StringBuffer.\u003c/p\u003e\r\n\r\n@param sb The StringBuffer to place the rendered text into.\r\n@param width The number of characters to display per line\r\n@param nextLineTabStop The position on the next line for the first tab.\r\n@param text The text to be rendered.\r\n@return the StringBuffer with the rendered Options contents.\r\n",
        "newValue": "Render the specified text and return the rendered Options\r\nin a StringBuffer.\r\n\r\n@param sb The StringBuffer to place the rendered text into.\r\n@param width The number of characters to display per line\r\n@param nextLineTabStop The position on the next line for the first tab.\r\n@param text The text to be rendered.\r\n@return the StringBuffer with the rendered Options contents.\r\n"
      }
    },
    "4f407378c93b9e2a8e24c855e8bed5eb12bf7a06": {
      "type": "Ybodychange",
      "commitMessage": "Applying J. Lewis Muir\u0027s patch from CLI-151 fixing HelpFormatter so it wraps properly on multiple lines\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/cli/branches/cli-1.x@654428 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "5/8/08 9:40 AM",
      "commitName": "4f407378c93b9e2a8e24c855e8bed5eb12bf7a06",
      "commitAuthor": "Henri Yandell",
      "commitDateOld": "6/14/07 2:13 AM",
      "commitNameOld": "a52a9af7c135b93a2f8c2480916ec5f5bad226ec",
      "commitAuthorOld": "Niall Kegan Pemberton",
      "daysBetweenCommits": 329.31,
      "commitsBetweenForRepo": 21,
      "commitsBetweenForFile": 1,
      "actualSource": "protected StringBuffer renderWrappedText(StringBuffer sb, int width, int nextLineTabStop, String text) {\r\n    int pos \u003d findWrapPos(text, width, 0);\r\n    if (pos \u003d\u003d -1) {\r\n        sb.append(rtrim(text));\r\n        return sb;\r\n    }\r\n    sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\r\n    final String padding \u003d createPadding(nextLineTabStop);\r\n    while (true) {\r\n        text \u003d padding + text.substring(pos).trim();\r\n        pos \u003d findWrapPos(text, width, 0);\r\n        if (pos \u003d\u003d -1) {\r\n            sb.append(text);\r\n            return sb;\r\n        }\r\n        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\r\n    }\r\n}",
      "path": "src/java/org/apache/commons/cli/HelpFormatter.java",
      "functionStartLine": 792,
      "functionName": "renderWrappedText",
      "functionAnnotation": "",
      "functionDoc": "\u003cp\u003eRender the specified text and return the rendered Options\r\nin a StringBuffer.\u003c/p\u003e\r\n\r\n@param sb The StringBuffer to place the rendered text into.\r\n@param width The number of characters to display per line\r\n@param nextLineTabStop The position on the next line for the first tab.\r\n@param text The text to be rendered.\r\n@return the StringBuffer with the rendered Options contents.\r\n",
      "diff": "@@ -1,18 +1,18 @@\n protected StringBuffer renderWrappedText(StringBuffer sb, int width, int nextLineTabStop, String text) {\r\n     int pos \u003d findWrapPos(text, width, 0);\r\n     if (pos \u003d\u003d -1) {\r\n         sb.append(rtrim(text));\r\n         return sb;\r\n     }\r\n     sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\r\n     final String padding \u003d createPadding(nextLineTabStop);\r\n     while (true) {\r\n         text \u003d padding + text.substring(pos).trim();\r\n-        pos \u003d findWrapPos(text, width, nextLineTabStop);\r\n+        pos \u003d findWrapPos(text, width, 0);\r\n         if (pos \u003d\u003d -1) {\r\n             sb.append(text);\r\n             return sb;\r\n         }\r\n         sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\r\n     }\r\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "a8a8ec06a85a1090d560dc6cf236663da580863e": {
      "type": "Ybodychange",
      "commitMessage": "Lots of minor refactoring and tidying to avoid compiler warnings\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/cli/trunk@155293 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "2/25/05 5:21 AM",
      "commitName": "a8a8ec06a85a1090d560dc6cf236663da580863e",
      "commitAuthor": "Robert James Oxspring",
      "commitDateOld": "12/27/04 4:51 PM",
      "commitNameOld": "9cb37e0e0363bc71646a146b1dac6ac59b6a629e",
      "commitAuthorOld": "Robert James Oxspring",
      "daysBetweenCommits": 59.52,
      "commitsBetweenForRepo": 10,
      "commitsBetweenForFile": 1,
      "actualSource": "protected StringBuffer renderWrappedText(StringBuffer sb, int width, int nextLineTabStop, String text) {\r\n    int pos \u003d findWrapPos(text, width, 0);\r\n    if (pos \u003d\u003d -1) {\r\n        sb.append(rtrim(text));\r\n        return sb;\r\n    }\r\n    sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\r\n    final String padding \u003d createPadding(nextLineTabStop);\r\n    while (true) {\r\n        text \u003d padding + text.substring(pos).trim();\r\n        pos \u003d findWrapPos(text, width, nextLineTabStop);\r\n        if (pos \u003d\u003d -1) {\r\n            sb.append(text);\r\n            return sb;\r\n        }\r\n        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\r\n    }\r\n}",
      "path": "src/java/org/apache/commons/cli/HelpFormatter.java",
      "functionStartLine": 743,
      "functionName": "renderWrappedText",
      "functionAnnotation": "",
      "functionDoc": "\u003cp\u003eRender the specified text and return the rendered Options\r\nin a StringBuffer.\u003c/p\u003e\r\n\r\n@param sb The StringBuffer to place the rendered text into.\r\n@param width The number of characters to display per line\r\n@param nextLineTabStop The position on the next line for the first tab.\r\n@param text The text to be rendered.\r\n@return the StringBuffer with the rendered Options contents.\r\n",
      "diff": "@@ -1,19 +1,18 @@\n protected StringBuffer renderWrappedText(StringBuffer sb, int width, int nextLineTabStop, String text) {\r\n     int pos \u003d findWrapPos(text, width, 0);\r\n     if (pos \u003d\u003d -1) {\r\n         sb.append(rtrim(text));\r\n         return sb;\r\n-    } else {\r\n-        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\r\n     }\r\n+    sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\r\n     final String padding \u003d createPadding(nextLineTabStop);\r\n     while (true) {\r\n         text \u003d padding + text.substring(pos).trim();\r\n         pos \u003d findWrapPos(text, width, nextLineTabStop);\r\n         if (pos \u003d\u003d -1) {\r\n             sb.append(text);\r\n             return sb;\r\n         }\r\n         sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\r\n     }\r\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "9b2b8038b52be022e42c8c7fdf26e236888f94c5": {
      "type": "Ymultichange(Ybodychange,Ydocchange)",
      "commitMessage": "checkstyle fixes\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/cli/trunk@129857 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/10/02 1:47 AM",
      "commitName": "9b2b8038b52be022e42c8c7fdf26e236888f94c5",
      "commitAuthor": "John Keyes",
      "subchanges": [
        {
          "type": "Ybodychange",
          "commitMessage": "checkstyle fixes\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/cli/trunk@129857 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "12/10/02 1:47 AM",
          "commitName": "9b2b8038b52be022e42c8c7fdf26e236888f94c5",
          "commitAuthor": "John Keyes",
          "commitDateOld": "11/20/02 12:50 AM",
          "commitNameOld": "6bcbf153c4497c38c4c36c3a04c1eac1f4cc153b",
          "commitAuthorOld": "John Keyes",
          "daysBetweenCommits": 20.04,
          "commitsBetweenForRepo": 6,
          "commitsBetweenForFile": 1,
          "actualSource": "protected StringBuffer renderWrappedText(StringBuffer sb, int width, int nextLineTabStop, String text) {\r\n    int pos \u003d findWrapPos(text, width, 0);\r\n    if (pos \u003d\u003d -1) {\r\n        sb.append(rtrim(text));\r\n        return sb;\r\n    } else {\r\n        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\r\n    }\r\n    final String padding \u003d createPadding(nextLineTabStop);\r\n    while (true) {\r\n        text \u003d padding + text.substring(pos).trim();\r\n        pos \u003d findWrapPos(text, width, nextLineTabStop);\r\n        if (pos \u003d\u003d -1) {\r\n            sb.append(text);\r\n            return sb;\r\n        }\r\n        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\r\n    }\r\n}",
          "path": "src/java/org/apache/commons/cli/HelpFormatter.java",
          "functionStartLine": 782,
          "functionName": "renderWrappedText",
          "functionAnnotation": "",
          "functionDoc": "\u003cp\u003eRender the specified text and return the rendered Options\r\nin a StringBuffer.\u003c/p\u003e\r\n\r\n@param sb The StringBuffer to place the rendered text into.\r\n@param width The number of characters to display per line\r\n@param nextLineTabStop The position on the next line for the first tab.\r\n@param text The text to be rendered.\r\n@return the StringBuffer with the rendered Options contents.\r\n",
          "diff": "",
          "extendedDetails": {}
        },
        {
          "type": "Ydocchange",
          "commitMessage": "checkstyle fixes\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/cli/trunk@129857 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "12/10/02 1:47 AM",
          "commitName": "9b2b8038b52be022e42c8c7fdf26e236888f94c5",
          "commitAuthor": "John Keyes",
          "commitDateOld": "11/20/02 12:50 AM",
          "commitNameOld": "6bcbf153c4497c38c4c36c3a04c1eac1f4cc153b",
          "commitAuthorOld": "John Keyes",
          "daysBetweenCommits": 20.04,
          "commitsBetweenForRepo": 6,
          "commitsBetweenForFile": 1,
          "actualSource": "protected StringBuffer renderWrappedText(StringBuffer sb, int width, int nextLineTabStop, String text) {\r\n    int pos \u003d findWrapPos(text, width, 0);\r\n    if (pos \u003d\u003d -1) {\r\n        sb.append(rtrim(text));\r\n        return sb;\r\n    } else {\r\n        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\r\n    }\r\n    final String padding \u003d createPadding(nextLineTabStop);\r\n    while (true) {\r\n        text \u003d padding + text.substring(pos).trim();\r\n        pos \u003d findWrapPos(text, width, nextLineTabStop);\r\n        if (pos \u003d\u003d -1) {\r\n            sb.append(text);\r\n            return sb;\r\n        }\r\n        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\r\n    }\r\n}",
          "path": "src/java/org/apache/commons/cli/HelpFormatter.java",
          "functionStartLine": 782,
          "functionName": "renderWrappedText",
          "functionAnnotation": "",
          "functionDoc": "\u003cp\u003eRender the specified text and return the rendered Options\r\nin a StringBuffer.\u003c/p\u003e\r\n\r\n@param sb The StringBuffer to place the rendered text into.\r\n@param width The number of characters to display per line\r\n@param nextLineTabStop The position on the next line for the first tab.\r\n@param text The text to be rendered.\r\n@return the StringBuffer with the rendered Options contents.\r\n",
          "diff": "",
          "extendedDetails": {
            "oldValue": "",
            "newValue": "\u003cp\u003eRender the specified text and return the rendered Options\r\nin a StringBuffer.\u003c/p\u003e\r\n\r\n@param sb The StringBuffer to place the rendered text into.\r\n@param width The number of characters to display per line\r\n@param nextLineTabStop The position on the next line for the first tab.\r\n@param text The text to be rendered.\r\n@return the StringBuffer with the rendered Options contents.\r\n"
          }
        }
      ]
    },
    "aae50c585ec3ac33c6a9af792e80378904a73195": {
      "type": "Yintroduced",
      "commitMessage": "moved cli over from the sandbox to commons proper\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/cli/trunk@129767 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "6/10/02 9:01 PM",
      "commitName": "aae50c585ec3ac33c6a9af792e80378904a73195",
      "commitAuthor": "James Strachan",
      "diff": "@@ -0,0 +1,19 @@\n+protected StringBuffer renderWrappedText(StringBuffer sb, int width, int nextLineTabStop, String text) {\r\n+    int pos \u003d findWrapPos(text, width, 0);\r\n+    if (pos \u003d\u003d -1) {\r\n+        sb.append(rtrim(text));\r\n+        return sb;\r\n+    } else {\r\n+        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\r\n+    }\r\n+    final String padding \u003d createPadding(nextLineTabStop);\r\n+    while (true) {\r\n+        text \u003d padding + text.substring(pos).trim();\r\n+        pos \u003d findWrapPos(text, width, nextLineTabStop);\r\n+        if (pos \u003d\u003d -1) {\r\n+            sb.append(text);\r\n+            return sb;\r\n+        }\r\n+        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\r\n+    }\r\n+}\n\\ No newline at end of file\n",
      "actualSource": "protected StringBuffer renderWrappedText(StringBuffer sb, int width, int nextLineTabStop, String text) {\r\n    int pos \u003d findWrapPos(text, width, 0);\r\n    if (pos \u003d\u003d -1) {\r\n        sb.append(rtrim(text));\r\n        return sb;\r\n    } else {\r\n        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\r\n    }\r\n    final String padding \u003d createPadding(nextLineTabStop);\r\n    while (true) {\r\n        text \u003d padding + text.substring(pos).trim();\r\n        pos \u003d findWrapPos(text, width, nextLineTabStop);\r\n        if (pos \u003d\u003d -1) {\r\n            sb.append(text);\r\n            return sb;\r\n        }\r\n        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\r\n    }\r\n}",
      "path": "src/java/org/apache/commons/cli/HelpFormatter.java",
      "functionStartLine": 214,
      "functionName": "renderWrappedText",
      "functionAnnotation": "",
      "functionDoc": ""
    }
  }
}