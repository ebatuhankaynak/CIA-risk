{
  "origin": "codeshovel",
  "repositoryName": "commons-cli",
  "repositoryPath": "D:/_SELEN/_2022-2023/CS588/GitHub_Dataset/commons-cli/commons-cli/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "CommandLineTest.java",
  "functionName": "testNullhOption",
  "functionId": "testNullhOption",
  "sourceFilePath": "src/test/java/org/apache/commons/cli/CommandLineTest.java",
  "functionAnnotation": "@Test",
  "functionDoc": "",
  "functionStartLine": 169,
  "functionEndLine": 179,
  "numCommitsSeen": 15,
  "timeTaken": 63,
  "changeHistory": [
    "bc0edc47dbf47cdaa3485cfb724982f377c900df",
    "357a8b0b8f1090db29e0d541a9419f570a78457b",
    "269eae18a911f792895d0402f5dd4e7913410523"
  ],
  "changeHistoryShort": {
    "bc0edc47dbf47cdaa3485cfb724982f377c900df": "Ybodychange",
    "357a8b0b8f1090db29e0d541a9419f570a78457b": "Ybodychange",
    "269eae18a911f792895d0402f5dd4e7913410523": "Yintroduced"
  },
  "changeHistoryDetails": {
    "bc0edc47dbf47cdaa3485cfb724982f377c900df": {
      "type": "Ybodychange",
      "commitMessage": "Clean ups.\n\n- maven-checkstyle-plugin 3.1.1 -\u003e 3.1.2.\n- checkstyle -\u003e 9.0\n- Updates for 21st century.\n- No need to nest else clause.\n- Use simple array declarations.\n- Use valueOf instead of new for Numbers.\n- Consistent formatting.\n- Remove some inline comments //-----...\n",
      "commitDate": "10/2/21 11:04 PM",
      "commitName": "bc0edc47dbf47cdaa3485cfb724982f377c900df",
      "commitAuthor": "Gary Gregory",
      "commitDateOld": "12/28/20 6:44 PM",
      "commitNameOld": "c67275279176504a6f5fc556cfa247e1df02a580",
      "commitAuthorOld": "Arturo Bernal",
      "daysBetweenCommits": 278.18,
      "commitsBetweenForRepo": 38,
      "commitsBetweenForFile": 1,
      "actualSource": "@Test\r\npublic void testNullhOption() throws Exception {\r\n    final Options options \u003d new Options();\r\n    final Option optI \u003d Option.builder(\"i\").hasArg().type(Number.class).build();\r\n    final Option optF \u003d Option.builder(\"f\").hasArg().build();\r\n    options.addOption(optI);\r\n    options.addOption(optF);\r\n    final CommandLineParser parser \u003d new DefaultParser();\r\n    final CommandLine cmd \u003d parser.parse(options, new String[] { \"-i\", \"123\", \"-f\", \"foo\" });\r\n    assertNull(cmd.getOptionValue((Option) null));\r\n    assertNull(cmd.getParsedOptionValue((Option) null));\r\n}",
      "path": "src/test/java/org/apache/commons/cli/CommandLineTest.java",
      "functionStartLine": 132,
      "functionName": "testNullhOption",
      "functionAnnotation": "@Test",
      "functionDoc": "",
      "diff": "@@ -1,12 +1,12 @@\n @Test\r\n public void testNullhOption() throws Exception {\r\n     final Options options \u003d new Options();\r\n-    final Option opt_i \u003d Option.builder(\"i\").hasArg().type(Number.class).build();\r\n-    final Option opt_f \u003d Option.builder(\"f\").hasArg().build();\r\n-    options.addOption(opt_i);\r\n-    options.addOption(opt_f);\r\n+    final Option optI \u003d Option.builder(\"i\").hasArg().type(Number.class).build();\r\n+    final Option optF \u003d Option.builder(\"f\").hasArg().build();\r\n+    options.addOption(optI);\r\n+    options.addOption(optF);\r\n     final CommandLineParser parser \u003d new DefaultParser();\r\n     final CommandLine cmd \u003d parser.parse(options, new String[] { \"-i\", \"123\", \"-f\", \"foo\" });\r\n     assertNull(cmd.getOptionValue((Option) null));\r\n     assertNull(cmd.getParsedOptionValue((Option) null));\r\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "357a8b0b8f1090db29e0d541a9419f570a78457b": {
      "type": "Ybodychange",
      "commitMessage": "Add final modifier to local variables.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/cli/trunk@1797673 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "6/5/17 7:37 PM",
      "commitName": "357a8b0b8f1090db29e0d541a9419f570a78457b",
      "commitAuthor": "Gary D. Gregory",
      "commitDateOld": "3/25/17 9:32 PM",
      "commitNameOld": "269eae18a911f792895d0402f5dd4e7913410523",
      "commitAuthorOld": "Benedikt Ritter",
      "daysBetweenCommits": 71.92,
      "commitsBetweenForRepo": 7,
      "commitsBetweenForFile": 1,
      "actualSource": "@Test\r\npublic void testNullhOption() throws Exception {\r\n    final Options options \u003d new Options();\r\n    final Option opt_i \u003d Option.builder(\"i\").hasArg().type(Number.class).build();\r\n    final Option opt_f \u003d Option.builder(\"f\").hasArg().build();\r\n    options.addOption(opt_i);\r\n    options.addOption(opt_f);\r\n    final CommandLineParser parser \u003d new DefaultParser();\r\n    final CommandLine cmd \u003d parser.parse(options, new String[] { \"-i\", \"123\", \"-f\", \"foo\" });\r\n    assertNull(cmd.getOptionValue((Option) null));\r\n    assertNull(cmd.getParsedOptionValue((Option) null));\r\n}",
      "path": "src/test/java/org/apache/commons/cli/CommandLineTest.java",
      "functionStartLine": 135,
      "functionName": "testNullhOption",
      "functionAnnotation": "@Test",
      "functionDoc": "",
      "diff": "@@ -1,12 +1,12 @@\n @Test\r\n public void testNullhOption() throws Exception {\r\n-    Options options \u003d new Options();\r\n-    Option opt_i \u003d Option.builder(\"i\").hasArg().type(Number.class).build();\r\n-    Option opt_f \u003d Option.builder(\"f\").hasArg().build();\r\n+    final Options options \u003d new Options();\r\n+    final Option opt_i \u003d Option.builder(\"i\").hasArg().type(Number.class).build();\r\n+    final Option opt_f \u003d Option.builder(\"f\").hasArg().build();\r\n     options.addOption(opt_i);\r\n     options.addOption(opt_f);\r\n-    CommandLineParser parser \u003d new DefaultParser();\r\n-    CommandLine cmd \u003d parser.parse(options, new String[] { \"-i\", \"123\", \"-f\", \"foo\" });\r\n+    final CommandLineParser parser \u003d new DefaultParser();\r\n+    final CommandLine cmd \u003d parser.parse(options, new String[] { \"-i\", \"123\", \"-f\", \"foo\" });\r\n     assertNull(cmd.getOptionValue((Option) null));\r\n     assertNull(cmd.getParsedOptionValue((Option) null));\r\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "269eae18a911f792895d0402f5dd4e7913410523": {
      "type": "Yintroduced",
      "commitMessage": "CLI-271: CommandLine.getXXX and CommandLine.hasXXX should accept an Option as a\nparameter. Thanks to Christoph LÃ¤ubrich. This also fixes #9 from GitHub\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/cli/trunk@1788678 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "3/25/17 9:32 PM",
      "commitName": "269eae18a911f792895d0402f5dd4e7913410523",
      "commitAuthor": "Benedikt Ritter",
      "diff": "@@ -0,0 +1,12 @@\n+@Test\r\n+public void testNullhOption() throws Exception {\r\n+    Options options \u003d new Options();\r\n+    Option opt_i \u003d Option.builder(\"i\").hasArg().type(Number.class).build();\r\n+    Option opt_f \u003d Option.builder(\"f\").hasArg().build();\r\n+    options.addOption(opt_i);\r\n+    options.addOption(opt_f);\r\n+    CommandLineParser parser \u003d new DefaultParser();\r\n+    CommandLine cmd \u003d parser.parse(options, new String[] { \"-i\", \"123\", \"-f\", \"foo\" });\r\n+    assertNull(cmd.getOptionValue((Option) null));\r\n+    assertNull(cmd.getParsedOptionValue((Option) null));\r\n+}\n\\ No newline at end of file\n",
      "actualSource": "@Test\r\npublic void testNullhOption() throws Exception {\r\n    Options options \u003d new Options();\r\n    Option opt_i \u003d Option.builder(\"i\").hasArg().type(Number.class).build();\r\n    Option opt_f \u003d Option.builder(\"f\").hasArg().build();\r\n    options.addOption(opt_i);\r\n    options.addOption(opt_f);\r\n    CommandLineParser parser \u003d new DefaultParser();\r\n    CommandLine cmd \u003d parser.parse(options, new String[] { \"-i\", \"123\", \"-f\", \"foo\" });\r\n    assertNull(cmd.getOptionValue((Option) null));\r\n    assertNull(cmd.getParsedOptionValue((Option) null));\r\n}",
      "path": "src/test/java/org/apache/commons/cli/CommandLineTest.java",
      "functionStartLine": 135,
      "functionName": "testNullhOption",
      "functionAnnotation": "@Test",
      "functionDoc": ""
    }
  }
}