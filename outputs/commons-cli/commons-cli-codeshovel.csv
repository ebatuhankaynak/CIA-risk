File Directory	Function Name	Function Signature	Function Starting Line No	Function Ending Line No	Cyclomatic	Result
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\main\java\org\apache\commons\cli\AlreadySelectedException.java	getOption	org.apache.commons.cli.AlreadySelectedException.getOption()	69	71	1	[{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2008","diff":"\"\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2008","diff":"\"@@ -0,0 +1,3 @@\\n+public Option getOption() {\\r\\n+    return option;\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\main\java\org\apache\commons\cli\AlreadySelectedException.java	getOptionGroup	org.apache.commons.cli.AlreadySelectedException.getOptionGroup()	79	81	1	[{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2008","diff":"\"\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2008","diff":"\"@@ -0,0 +1,3 @@\\n+public OptionGroup getOptionGroup() {\\r\\n+    return group;\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\main\java\org\apache\commons\cli\AmbiguousOptionException.java	createMessage	org.apache.commons.cli.AmbiguousOptionException.createMessage(String, Collection<String>)	41	58	3	[{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"\""},{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,16 +1,16 @@\\n-private static String createMessage(String option, Collection<String> matchingOptions) {\\r\\n+private static String createMessage(final String option, final Collection<String> matchingOptions) {\\r\\n     final StringBuilder buf = new StringBuilder(\\\"Ambiguous option: '\\\");\\r\\n     buf.append(option);\\r\\n     buf.append(\\\"'  (could be: \\\");\\r\\n     final Iterator<String> it = matchingOptions.iterator();\\r\\n     while (it.hasNext()) {\\r\\n         buf.append(\\\"'\\\");\\r\\n         buf.append(it.next());\\r\\n         buf.append(\\\"'\\\");\\r\\n         if (it.hasNext()) {\\r\\n             buf.append(\\\", \\\");\\r\\n         }\\r\\n     }\\r\\n     buf.append(\\\")\\\");\\r\\n     return buf.toString();\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,16 +1,16 @@\\n private static String createMessage(String option, Collection<String> matchingOptions) {\\r\\n-    StringBuilder buf = new StringBuilder(\\\"Ambiguous option: '\\\");\\r\\n+    final StringBuilder buf = new StringBuilder(\\\"Ambiguous option: '\\\");\\r\\n     buf.append(option);\\r\\n     buf.append(\\\"'  (could be: \\\");\\r\\n-    Iterator<String> it = matchingOptions.iterator();\\r\\n+    final Iterator<String> it = matchingOptions.iterator();\\r\\n     while (it.hasNext()) {\\r\\n         buf.append(\\\"'\\\");\\r\\n         buf.append(it.next());\\r\\n         buf.append(\\\"'\\\");\\r\\n         if (it.hasNext()) {\\r\\n             buf.append(\\\", \\\");\\r\\n         }\\r\\n     }\\r\\n     buf.append(\\\")\\\");\\r\\n     return buf.toString();\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2011","diff":"\"@@ -1,16 +1,16 @@\\n private static String createMessage(String option, Collection<String> matchingOptions) {\\r\\n-    StringBuffer buff = new StringBuffer(\\\"Ambiguous option: '\\\");\\r\\n-    buff.append(option);\\r\\n-    buff.append(\\\"'  (could be: \\\");\\r\\n+    StringBuilder buf = new StringBuilder(\\\"Ambiguous option: '\\\");\\r\\n+    buf.append(option);\\r\\n+    buf.append(\\\"'  (could be: \\\");\\r\\n     Iterator<String> it = matchingOptions.iterator();\\r\\n     while (it.hasNext()) {\\r\\n-        buff.append(\\\"'\\\");\\r\\n-        buff.append(it.next());\\r\\n-        buff.append(\\\"'\\\");\\r\\n+        buf.append(\\\"'\\\");\\r\\n+        buf.append(it.next());\\r\\n+        buf.append(\\\"'\\\");\\r\\n         if (it.hasNext()) {\\r\\n-            buff.append(\\\", \\\");\\r\\n+            buf.append(\\\", \\\");\\r\\n         }\\r\\n     }\\r\\n-    buff.append(\\\")\\\");\\r\\n-    return buff.toString();\\r\\n+    buf.append(\\\")\\\");\\r\\n+    return buf.toString();\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"simonetripodi@apache.org","authorName":"Simone Tripodi","commitYear":"2011","diff":"\"@@ -1,16 +1,16 @@\\n private static String createMessage(String option, Collection<String> matchingOptions) {\\r\\n     StringBuffer buff = new StringBuffer(\\\"Ambiguous option: '\\\");\\r\\n     buff.append(option);\\r\\n     buff.append(\\\"'  (could be: \\\");\\r\\n-    Iterator it = matchingOptions.iterator();\\r\\n+    Iterator<String> it = matchingOptions.iterator();\\r\\n     while (it.hasNext()) {\\r\\n         buff.append(\\\"'\\\");\\r\\n         buff.append(it.next());\\r\\n         buff.append(\\\"'\\\");\\r\\n         if (it.hasNext()) {\\r\\n             buff.append(\\\", \\\");\\r\\n         }\\r\\n     }\\r\\n     buff.append(\\\")\\\");\\r\\n     return buff.toString();\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2011","diff":"\"@@ -1,16 +1,16 @@\\n-private static String createMessage(String option, Collection matchingOptions) {\\r\\n+private static String createMessage(String option, Collection<String> matchingOptions) {\\r\\n     StringBuffer buff = new StringBuffer(\\\"Ambiguous option: '\\\");\\r\\n     buff.append(option);\\r\\n     buff.append(\\\"'  (could be: \\\");\\r\\n     Iterator it = matchingOptions.iterator();\\r\\n     while (it.hasNext()) {\\r\\n         buff.append(\\\"'\\\");\\r\\n         buff.append(it.next());\\r\\n         buff.append(\\\"'\\\");\\r\\n         if (it.hasNext()) {\\r\\n             buff.append(\\\", \\\");\\r\\n         }\\r\\n     }\\r\\n     buff.append(\\\")\\\");\\r\\n     return buff.toString();\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2009","diff":"\"@@ -0,0 +1,16 @@\\n+private static String createMessage(String option, Collection matchingOptions) {\\r\\n+    StringBuffer buff = new StringBuffer(\\\"Ambiguous option: '\\\");\\r\\n+    buff.append(option);\\r\\n+    buff.append(\\\"'  (could be: \\\");\\r\\n+    Iterator it = matchingOptions.iterator();\\r\\n+    while (it.hasNext()) {\\r\\n+        buff.append(\\\"'\\\");\\r\\n+        buff.append(it.next());\\r\\n+        buff.append(\\\"'\\\");\\r\\n+        if (it.hasNext()) {\\r\\n+            buff.append(\\\", \\\");\\r\\n+        }\\r\\n+    }\\r\\n+    buff.append(\\\")\\\");\\r\\n+    return buff.toString();\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\main\java\org\apache\commons\cli\AmbiguousOptionException.java	getMatchingOptions	org.apache.commons.cli.AmbiguousOptionException.getMatchingOptions()	79	81	1	[{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"\""},{"authorEmail":"tn@apache.org","authorName":"Thomas Neidhart","commitYear":"2013","diff":"\"\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2011","diff":"\"@@ -1,3 +1,3 @@\\n-public Collection getMatchingOptions() {\\r\\n+public Collection<String> getMatchingOptions() {\\r\\n     return matchingOptions;\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2009","diff":"\"@@ -0,0 +1,3 @@\\n+public Collection getMatchingOptions() {\\r\\n+    return matchingOptions;\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\main\java\org\apache\commons\cli\BasicParser.java	flatten	org.apache.commons.cli.BasicParser.flatten(Options, String[], boolean)	44	48	1	[{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"\""},{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"\""},{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,4 +1,4 @@\\n @Override\\r\\n-protected String[] flatten(@SuppressWarnings(\\\"unused\\\") Options options, String[] arguments, @SuppressWarnings(\\\"unused\\\") boolean stopAtNonOption) {\\r\\n+protected String[] flatten(@SuppressWarnings(\\\"unused\\\") final Options options, final String[] arguments, @SuppressWarnings(\\\"unused\\\") final boolean stopAtNonOption) {\\r\\n     return arguments;\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"simonetripodi@apache.org","authorName":"Simone Tripodi","commitYear":"2011","diff":"\"@@ -1,3 +1,4 @@\\n-protected String[] flatten(Options options, String[] arguments, boolean stopAtNonOption) {\\r\\n+@Override\\r\\n+protected String[] flatten(@SuppressWarnings(\\\"unused\\\") Options options, String[] arguments, @SuppressWarnings(\\\"unused\\\") boolean stopAtNonOption) {\\r\\n     return arguments;\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2008","diff":"\"\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -0,0 +1,3 @@\\n+protected String[] flatten(Options options, String[] arguments, boolean stopAtNonOption) {\\r\\n+    return arguments;\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\main\java\org\apache\commons\cli\CommandLine.java	addArg	org.apache.commons.cli.Builder.addArg(String)	58	61	1	[{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2023","diff":"\"\""},{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,4 +1,4 @@\\n-public Builder addArg(String arg) {\\r\\n+public Builder addArg(final String arg) {\\r\\n     commandLine.addArg(arg);\\r\\n     return this;\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"britter@apache.org","authorName":"Benedikt Ritter","commitYear":"2017","diff":"\"\""},{"authorEmail":"rfscholte@apache.org","authorName":"Robert Scholte","commitYear":"2017","diff":"\"@@ -1,3 +1,4 @@\\n-protected void addArg(String arg) {\\r\\n-    args.add(arg);\\r\\n+public Builder addArg(String arg) {\\r\\n+    commandLine.addArg(arg);\\r\\n+    return this;\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2016","diff":"\"\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2010","diff":"\"@@ -1,3 +1,3 @@\\n-void addArg(String arg) {\\r\\n+protected void addArg(String arg) {\\r\\n     args.add(arg);\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"roxspring@apache.org","authorName":"Robert James Oxspring","commitYear":"2004","diff":"\"\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"\""},{"authorEmail":"jstrachan@apache.org","authorName":"James Strachan","commitYear":"2002","diff":"\"@@ -0,0 +1,3 @@\\n+void addArg(String arg) {\\r\\n+    args.add(arg);\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\main\java\org\apache\commons\cli\CommandLine.java	addOption	org.apache.commons.cli.Builder.addOption(Option)	70	73	1	[{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2023","diff":"\"\""},{"authorEmail":"Krishna.Mohan@capitalone.com","authorName":"Krishna Mohan","commitYear":"2017","diff":"\"\""},{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,4 +1,4 @@\\n-public Builder addOption(Option opt) {\\r\\n+public Builder addOption(final Option opt) {\\r\\n     commandLine.addOption(opt);\\r\\n     return this;\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"britter@apache.org","authorName":"Benedikt Ritter","commitYear":"2017","diff":"\"\""},{"authorEmail":"rfscholte@apache.org","authorName":"Robert Scholte","commitYear":"2017","diff":"\"@@ -1,3 +1,4 @@\\n-protected void addOption(Option opt) {\\r\\n-    options.add(opt);\\r\\n+public Builder addOption(Option opt) {\\r\\n+    commandLine.addOption(opt);\\r\\n+    return this;\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2010","diff":"\"@@ -1,3 +1,3 @@\\n-void addOption(Option opt) {\\r\\n+protected void addOption(Option opt) {\\r\\n     options.add(opt);\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2008","diff":"\"\""},{"authorEmail":"bayard@apache.org","authorName":"Henri Yandell","commitYear":"2007","diff":"\"@@ -1,10 +1,3 @@\\n void addOption(Option opt) {\\r\\n-    hashcodeMap.put(new Integer(opt.hashCode()), opt);\\r\\n-    String key = opt.getKey();\\r\\n-    if (key == null) {\\r\\n-        key = opt.getLongOpt();\\r\\n-    } else {\\r\\n-        names.put(opt.getLongOpt(), key);\\r\\n-    }\\r\\n-    options.put(key, opt);\\r\\n+    options.add(opt);\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"roxspring@apache.org","authorName":"Robert James Oxspring","commitYear":"2004","diff":"\"\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -1,13 +1,10 @@\\n void addOption(Option opt) {\\r\\n     hashcodeMap.put(new Integer(opt.hashCode()), opt);\\r\\n     String key = opt.getKey();\\r\\n     if (key == null) {\\r\\n         key = opt.getLongOpt();\\r\\n     } else {\\r\\n         names.put(opt.getLongOpt(), key);\\r\\n     }\\r\\n-    if (opt.getValues() != null) {\\r\\n-        System.out.println(opt.getKey() + \\\"=\\\" + opt.getValues().length);\\r\\n-    }\\r\\n     options.put(key, opt);\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -1,15 +1,13 @@\\n void addOption(Option opt) {\\r\\n     hashcodeMap.put(new Integer(opt.hashCode()), opt);\\r\\n-    String key = opt.getOpt();\\r\\n-    if (\\\" \\\".equals(key)) {\\r\\n+    String key = opt.getKey();\\r\\n+    if (key == null) {\\r\\n         key = opt.getLongOpt();\\r\\n     } else {\\r\\n         names.put(opt.getLongOpt(), key);\\r\\n     }\\r\\n-    if (options.get(key) != null) {\\r\\n-        ((java.util.List) options.get(key)).add(opt);\\r\\n-    } else {\\r\\n-        options.put(key, new java.util.ArrayList());\\r\\n-        ((java.util.List) options.get(key)).add(opt);\\r\\n+    if (opt.getValues() != null) {\\r\\n+        System.out.println(opt.getKey() + \\\"=\\\" + opt.getValues().length);\\r\\n     }\\r\\n+    options.put(key, opt);\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -1,13 +1,15 @@\\n void addOption(Option opt) {\\r\\n     hashcodeMap.put(new Integer(opt.hashCode()), opt);\\r\\n     String key = opt.getOpt();\\r\\n     if (\\\" \\\".equals(key)) {\\r\\n         key = opt.getLongOpt();\\r\\n+    } else {\\r\\n+        names.put(opt.getLongOpt(), key);\\r\\n     }\\r\\n     if (options.get(key) != null) {\\r\\n         ((java.util.List) options.get(key)).add(opt);\\r\\n     } else {\\r\\n         options.put(key, new java.util.ArrayList());\\r\\n         ((java.util.List) options.get(key)).add(opt);\\r\\n     }\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -1,15 +1,13 @@\\n void addOption(Option opt) {\\r\\n     hashcodeMap.put(new Integer(opt.hashCode()), opt);\\r\\n-    optionList.add(opt);\\r\\n     String key = opt.getOpt();\\r\\n     if (\\\" \\\".equals(key)) {\\r\\n         key = opt.getLongOpt();\\r\\n     }\\r\\n-    keyList.add(key);\\r\\n     if (options.get(key) != null) {\\r\\n         ((java.util.List) options.get(key)).add(opt);\\r\\n     } else {\\r\\n         options.put(key, new java.util.ArrayList());\\r\\n         ((java.util.List) options.get(key)).add(opt);\\r\\n     }\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -0,0 +1,15 @@\\n+void addOption(Option opt) {\\r\\n+    hashcodeMap.put(new Integer(opt.hashCode()), opt);\\r\\n+    optionList.add(opt);\\r\\n+    String key = opt.getOpt();\\r\\n+    if (\\\" \\\".equals(key)) {\\r\\n+        key = opt.getLongOpt();\\r\\n+    }\\r\\n+    keyList.add(key);\\r\\n+    if (options.get(key) != null) {\\r\\n+        ((java.util.List) options.get(key)).add(opt);\\r\\n+    } else {\\r\\n+        options.put(key, new java.util.ArrayList());\\r\\n+        ((java.util.List) options.get(key)).add(opt);\\r\\n+    }\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\main\java\org\apache\commons\cli\CommandLine.java	build	org.apache.commons.cli.Builder.build()	80	82	1	[{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2023","diff":"\"\""},{"authorEmail":"rfscholte@apache.org","authorName":"Robert Scholte","commitYear":"2017","diff":"\"@@ -0,0 +1,3 @@\\n+public CommandLine build() {\\r\\n+    return commandLine;\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\main\java\org\apache\commons\cli\CommandLine.java	addArg	org.apache.commons.cli.CommandLine.addArg(String)	106	110	2	[{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2023","diff":"\"@@ -1,3 +1,5 @@\\n protected void addArg(final String arg) {\\r\\n-    args.add(arg);\\r\\n+    if (arg != null) {\\r\\n+        args.add(arg);\\r\\n+    }\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2023","diff":"\"\""},{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,3 +1,3 @@\\n-protected void addArg(String arg) {\\r\\n+protected void addArg(final String arg) {\\r\\n     args.add(arg);\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2016","diff":"\"\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2010","diff":"\"@@ -1,3 +1,3 @@\\n-void addArg(String arg) {\\r\\n+protected void addArg(String arg) {\\r\\n     args.add(arg);\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"roxspring@apache.org","authorName":"Robert James Oxspring","commitYear":"2004","diff":"\"\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"\""},{"authorEmail":"jstrachan@apache.org","authorName":"James Strachan","commitYear":"2002","diff":"\"@@ -0,0 +1,3 @@\\n+void addArg(String arg) {\\r\\n+    args.add(arg);\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\main\java\org\apache\commons\cli\CommandLine.java	addOption	org.apache.commons.cli.CommandLine.addOption(Option)	117	121	2	[{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2023","diff":"\"@@ -1,3 +1,5 @@\\n protected void addOption(final Option opt) {\\r\\n-    options.add(opt);\\r\\n+    if (opt != null) {\\r\\n+        options.add(opt);\\r\\n+    }\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2023","diff":"\"\""},{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"\""},{"authorEmail":"Krishna.Mohan@capitalone.com","authorName":"Krishna Mohan","commitYear":"2017","diff":"\"\""},{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,3 +1,3 @@\\n-protected void addOption(Option opt) {\\r\\n+protected void addOption(final Option opt) {\\r\\n     options.add(opt);\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2010","diff":"\"@@ -1,3 +1,3 @@\\n-void addOption(Option opt) {\\r\\n+protected void addOption(Option opt) {\\r\\n     options.add(opt);\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2008","diff":"\"\""},{"authorEmail":"bayard@apache.org","authorName":"Henri Yandell","commitYear":"2007","diff":"\"@@ -1,10 +1,3 @@\\n void addOption(Option opt) {\\r\\n-    hashcodeMap.put(new Integer(opt.hashCode()), opt);\\r\\n-    String key = opt.getKey();\\r\\n-    if (key == null) {\\r\\n-        key = opt.getLongOpt();\\r\\n-    } else {\\r\\n-        names.put(opt.getLongOpt(), key);\\r\\n-    }\\r\\n-    options.put(key, opt);\\r\\n+    options.add(opt);\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"roxspring@apache.org","authorName":"Robert James Oxspring","commitYear":"2004","diff":"\"\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -1,13 +1,10 @@\\n void addOption(Option opt) {\\r\\n     hashcodeMap.put(new Integer(opt.hashCode()), opt);\\r\\n     String key = opt.getKey();\\r\\n     if (key == null) {\\r\\n         key = opt.getLongOpt();\\r\\n     } else {\\r\\n         names.put(opt.getLongOpt(), key);\\r\\n     }\\r\\n-    if (opt.getValues() != null) {\\r\\n-        System.out.println(opt.getKey() + \\\"=\\\" + opt.getValues().length);\\r\\n-    }\\r\\n     options.put(key, opt);\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -1,15 +1,13 @@\\n void addOption(Option opt) {\\r\\n     hashcodeMap.put(new Integer(opt.hashCode()), opt);\\r\\n-    String key = opt.getOpt();\\r\\n-    if (\\\" \\\".equals(key)) {\\r\\n+    String key = opt.getKey();\\r\\n+    if (key == null) {\\r\\n         key = opt.getLongOpt();\\r\\n     } else {\\r\\n         names.put(opt.getLongOpt(), key);\\r\\n     }\\r\\n-    if (options.get(key) != null) {\\r\\n-        ((java.util.List) options.get(key)).add(opt);\\r\\n-    } else {\\r\\n-        options.put(key, new java.util.ArrayList());\\r\\n-        ((java.util.List) options.get(key)).add(opt);\\r\\n+    if (opt.getValues() != null) {\\r\\n+        System.out.println(opt.getKey() + \\\"=\\\" + opt.getValues().length);\\r\\n     }\\r\\n+    options.put(key, opt);\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -1,13 +1,15 @@\\n void addOption(Option opt) {\\r\\n     hashcodeMap.put(new Integer(opt.hashCode()), opt);\\r\\n     String key = opt.getOpt();\\r\\n     if (\\\" \\\".equals(key)) {\\r\\n         key = opt.getLongOpt();\\r\\n+    } else {\\r\\n+        names.put(opt.getLongOpt(), key);\\r\\n     }\\r\\n     if (options.get(key) != null) {\\r\\n         ((java.util.List) options.get(key)).add(opt);\\r\\n     } else {\\r\\n         options.put(key, new java.util.ArrayList());\\r\\n         ((java.util.List) options.get(key)).add(opt);\\r\\n     }\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -1,15 +1,13 @@\\n void addOption(Option opt) {\\r\\n     hashcodeMap.put(new Integer(opt.hashCode()), opt);\\r\\n-    optionList.add(opt);\\r\\n     String key = opt.getOpt();\\r\\n     if (\\\" \\\".equals(key)) {\\r\\n         key = opt.getLongOpt();\\r\\n     }\\r\\n-    keyList.add(key);\\r\\n     if (options.get(key) != null) {\\r\\n         ((java.util.List) options.get(key)).add(opt);\\r\\n     } else {\\r\\n         options.put(key, new java.util.ArrayList());\\r\\n         ((java.util.List) options.get(key)).add(opt);\\r\\n     }\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -0,0 +1,15 @@\\n+void addOption(Option opt) {\\r\\n+    hashcodeMap.put(new Integer(opt.hashCode()), opt);\\r\\n+    optionList.add(opt);\\r\\n+    String key = opt.getOpt();\\r\\n+    if (\\\" \\\".equals(key)) {\\r\\n+        key = opt.getLongOpt();\\r\\n+    }\\r\\n+    keyList.add(key);\\r\\n+    if (options.get(key) != null) {\\r\\n+        ((java.util.List) options.get(key)).add(opt);\\r\\n+    } else {\\r\\n+        options.put(key, new java.util.ArrayList());\\r\\n+        ((java.util.List) options.get(key)).add(opt);\\r\\n+    }\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\main\java\org\apache\commons\cli\CommandLine.java	getArgList	org.apache.commons.cli.CommandLine.getArgList()	128	130	1	[{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2023","diff":"\"\""},{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2011","diff":"\"@@ -1,3 +1,3 @@\\n-public List getArgList() {\\r\\n+public List<String> getArgList() {\\r\\n     return args;\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"roxspring@apache.org","authorName":"Robert James Oxspring","commitYear":"2004","diff":"\"\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"\""},{"authorEmail":"jstrachan@apache.org","authorName":"James Strachan","commitYear":"2002","diff":"\"@@ -0,0 +1,3 @@\\n+public List getArgList() {\\r\\n+    return args;\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\main\java\org\apache\commons\cli\CommandLine.java	getArgs	org.apache.commons.cli.CommandLine.getArgs()	137	139	1	[{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2023","diff":"\"\""},{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2022","diff":"\"@@ -1,5 +1,3 @@\\n public String[] getArgs() {\\r\\n-    final String[] answer = new String[args.size()];\\r\\n-    args.toArray(answer);\\r\\n-    return answer;\\r\\n+    return args.toArray(Util.EMPTY_STRING_ARRAY);\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"Krishna.Mohan@capitalone.com","authorName":"Krishna Mohan","commitYear":"2017","diff":"\"\""},{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,5 +1,5 @@\\n public String[] getArgs() {\\r\\n-    String[] answer = new String[args.size()];\\r\\n+    final String[] answer = new String[args.size()];\\r\\n     args.toArray(answer);\\r\\n     return answer;\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"roxspring@apache.org","authorName":"Robert James Oxspring","commitYear":"2004","diff":"\"\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"\""},{"authorEmail":"jstrachan@apache.org","authorName":"James Strachan","commitYear":"2002","diff":"\"@@ -0,0 +1,5 @@\\n+public String[] getArgs() {\\r\\n+    String[] answer = new String[args.size()];\\r\\n+    args.toArray(answer);\\r\\n+    return answer;\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\main\java\org\apache\commons\cli\CommandLine.java	getOptionObject	org.apache.commons.cli.CommandLine.getOptionObject(char)	149	151	1	[{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2023","diff":"\"\""},{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"\""},{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2020","diff":"\"@@ -1,3 +1,4 @@\\n+@Deprecated\\r\\n public Object getOptionObject(final char opt) {\\r\\n     return getOptionObject(String.valueOf(opt));\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"Krishna.Mohan@capitalone.com","authorName":"Krishna Mohan","commitYear":"2017","diff":"\"\""},{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,3 +1,3 @@\\n-public Object getOptionObject(char opt) {\\r\\n+public Object getOptionObject(final char opt) {\\r\\n     return getOptionObject(String.valueOf(opt));\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"britter@apache.org","authorName":"Benedikt Ritter","commitYear":"2017","diff":"\"\""},{"authorEmail":"roxspring@apache.org","authorName":"Robert James Oxspring","commitYear":"2004","diff":"\"\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -0,0 +1,3 @@\\n+public Object getOptionObject(char opt) {\\r\\n+    return getOptionObject(String.valueOf(opt));\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\main\java\org\apache\commons\cli\CommandLine.java	getOptionObject	org.apache.commons.cli.CommandLine.getOptionObject(String)	161	168	4	[{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2023","diff":"\"\""},{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"\""},{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"\""},{"authorEmail":"Krishna.Mohan@capitalone.com","authorName":"Krishna Mohan","commitYear":"2017","diff":"\"\""},{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,9 +1,9 @@\\n @Deprecated\\r\\n-public Object getOptionObject(String opt) {\\r\\n+public Object getOptionObject(final String opt) {\\r\\n     try {\\r\\n         return getParsedOptionValue(opt);\\r\\n     } catch (final ParseException pe) {\\r\\n         System.err.println(\\\"Exception found converting \\\" + opt + \\\" to desired type: \\\" + pe.getMessage());\\r\\n         return null;\\r\\n     }\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,9 +1,9 @@\\n @Deprecated\\r\\n public Object getOptionObject(String opt) {\\r\\n     try {\\r\\n         return getParsedOptionValue(opt);\\r\\n-    } catch (ParseException pe) {\\r\\n+    } catch (final ParseException pe) {\\r\\n         System.err.println(\\\"Exception found converting \\\" + opt + \\\" to desired type: \\\" + pe.getMessage());\\r\\n         return null;\\r\\n     }\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"sebb@apache.org","authorName":"Sebastian Bazley","commitYear":"2013","diff":"\"@@ -1,8 +1,9 @@\\n+@Deprecated\\r\\n public Object getOptionObject(String opt) {\\r\\n     try {\\r\\n         return getParsedOptionValue(opt);\\r\\n     } catch (ParseException pe) {\\r\\n         System.err.println(\\\"Exception found converting \\\" + opt + \\\" to desired type: \\\" + pe.getMessage());\\r\\n         return null;\\r\\n     }\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2010","diff":"\"\""},{"authorEmail":"bayard@apache.org","authorName":"Henri Yandell","commitYear":"2009","diff":"\"@@ -1,9 +1,8 @@\\n public Object getOptionObject(String opt) {\\r\\n-    String res = getOptionValue(opt);\\r\\n-    Option option = resolveOption(opt);\\r\\n-    if (option == null) {\\r\\n+    try {\\r\\n+        return getParsedOptionValue(opt);\\r\\n+    } catch (ParseException pe) {\\r\\n+        System.err.println(\\\"Exception found converting \\\" + opt + \\\" to desired type: \\\" + pe.getMessage());\\r\\n         return null;\\r\\n     }\\r\\n-    Object type = option.getType();\\r\\n-    return (res == null) ? null : TypeHandler.createValue(res, type);\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"bayard@apache.org","authorName":"Henri Yandell","commitYear":"2007","diff":"\"@@ -1,8 +1,9 @@\\n public Object getOptionObject(String opt) {\\r\\n     String res = getOptionValue(opt);\\r\\n-    if (!options.containsKey(opt)) {\\r\\n+    Option option = resolveOption(opt);\\r\\n+    if (option == null) {\\r\\n         return null;\\r\\n     }\\r\\n-    Object type = ((Option) options.get(opt)).getType();\\r\\n+    Object type = option.getType();\\r\\n     return (res == null) ? null : TypeHandler.createValue(res, type);\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"roxspring@apache.org","authorName":"Robert James Oxspring","commitYear":"2004","diff":"\"\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -1,8 +1,8 @@\\n public Object getOptionObject(String opt) {\\r\\n     String res = getOptionValue(opt);\\r\\n     if (!options.containsKey(opt)) {\\r\\n         return null;\\r\\n     }\\r\\n     Object type = ((Option) options.get(opt)).getType();\\r\\n-    return res == null ? null : TypeHandler.createValue(res, type);\\r\\n+    return (res == null) ? null : TypeHandler.createValue(res, type);\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -1,5 +1,8 @@\\n public Object getOptionObject(String opt) {\\r\\n     String res = getOptionValue(opt);\\r\\n+    if (!options.containsKey(opt)) {\\r\\n+        return null;\\r\\n+    }\\r\\n     Object type = ((Option) options.get(opt)).getType();\\r\\n     return res == null ? null : TypeHandler.createValue(res, type);\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -1,5 +1,5 @@\\n public Object getOptionObject(String opt) {\\r\\n     String res = getOptionValue(opt);\\r\\n-    Object type = ((Option) ((List) options.get(opt)).iterator().next()).getType();\\r\\n+    Object type = ((Option) options.get(opt)).getType();\\r\\n     return res == null ? null : TypeHandler.createValue(res, type);\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -1,5 +1,5 @@\\n public Object getOptionObject(String opt) {\\r\\n     String res = getOptionValue(opt);\\r\\n-    Object type = ((Option) options.get(opt)).getType();\\r\\n+    Object type = ((Option) ((List) options.get(opt)).iterator().next()).getType();\\r\\n     return res == null ? null : TypeHandler.createValue(res, type);\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -1,5 +1,5 @@\\n public Object getOptionObject(String opt) {\\r\\n     String res = getOptionValue(opt);\\r\\n-    Object type = types.get(opt);\\r\\n+    Object type = ((Option) options.get(opt)).getType();\\r\\n     return res == null ? null : TypeHandler.createValue(res, type);\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -1,9 +1,5 @@\\n public Object getOptionObject(String opt) {\\r\\n-    String[] result = (String[]) options.get(opt);\\r\\n+    String res = getOptionValue(opt);\\r\\n     Object type = types.get(opt);\\r\\n-    String res = result == null ? null : result[0];\\r\\n-    if (res == null) {\\r\\n-        return null;\\r\\n-    }\\r\\n-    return TypeHandler.createValue(res, type);\\r\\n+    return res == null ? null : TypeHandler.createValue(res, type);\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -1,9 +1,9 @@\\n-public Object getOptionObject(char opt) {\\r\\n-    String[] result = (String[]) options.get(new Character(opt));\\r\\n-    Object type = types.get(new Character(opt));\\r\\n+public Object getOptionObject(String opt) {\\r\\n+    String[] result = (String[]) options.get(opt);\\r\\n+    Object type = types.get(opt);\\r\\n     String res = result == null ? null : result[0];\\r\\n     if (res == null) {\\r\\n         return null;\\r\\n     }\\r\\n     return TypeHandler.createValue(res, type);\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jstrachan@apache.org","authorName":"James Strachan","commitYear":"2002","diff":"\"@@ -0,0 +1,9 @@\\n+public Object getOptionObject(char opt) {\\r\\n+    String[] result = (String[]) options.get(new Character(opt));\\r\\n+    Object type = types.get(new Character(opt));\\r\\n+    String res = result == null ? null : result[0];\\r\\n+    if (res == null) {\\r\\n+        return null;\\r\\n+    }\\r\\n+    return TypeHandler.createValue(res, type);\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\main\java\org\apache\commons\cli\CommandLine.java	getOptionProperties	org.apache.commons.cli.CommandLine.getOptionProperties(Option)	180	197	6	[{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2023","diff":"\"\""},{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"\""},{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"\""},{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"\""},{"authorEmail":"britter@apache.org","authorName":"Benedikt Ritter","commitYear":"2019","diff":"\"\""},{"authorEmail":"Krishna.Mohan@capitalone.com","authorName":"Krishna Mohan","commitYear":"2017","diff":"\"\""},{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,14 +1,14 @@\\n-public Properties getOptionProperties(Option option) {\\r\\n+public Properties getOptionProperties(final Option option) {\\r\\n     final Properties props = new Properties();\\r\\n     for (final Option processedOption : options) {\\r\\n         if (processedOption.equals(option)) {\\r\\n             final List<String> values = processedOption.getValuesList();\\r\\n             if (values.size() >= 2) {\\r\\n                 props.put(values.get(0), values.get(1));\\r\\n             } else if (values.size() == 1) {\\r\\n                 props.put(values.get(0), \\\"true\\\");\\r\\n             }\\r\\n         }\\r\\n     }\\r\\n     return props;\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,14 +1,14 @@\\n public Properties getOptionProperties(Option option) {\\r\\n-    Properties props = new Properties();\\r\\n-    for (Option processedOption : options) {\\r\\n+    final Properties props = new Properties();\\r\\n+    for (final Option processedOption : options) {\\r\\n         if (processedOption.equals(option)) {\\r\\n-            List<String> values = processedOption.getValuesList();\\r\\n+            final List<String> values = processedOption.getValuesList();\\r\\n             if (values.size() >= 2) {\\r\\n                 props.put(values.get(0), values.get(1));\\r\\n             } else if (values.size() == 1) {\\r\\n                 props.put(values.get(0), \\\"true\\\");\\r\\n             }\\r\\n         }\\r\\n     }\\r\\n     return props;\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"britter@apache.org","authorName":"Benedikt Ritter","commitYear":"2017","diff":"\"\""},{"authorEmail":"britter@apache.org","authorName":"Benedikt Ritter","commitYear":"2017","diff":"\"@@ -0,0 +1,14 @@\\n+public Properties getOptionProperties(Option option) {\\r\\n+    Properties props = new Properties();\\r\\n+    for (Option processedOption : options) {\\r\\n+        if (processedOption.equals(option)) {\\r\\n+            List<String> values = processedOption.getValuesList();\\r\\n+            if (values.size() >= 2) {\\r\\n+                props.put(values.get(0), values.get(1));\\r\\n+            } else if (values.size() == 1) {\\r\\n+                props.put(values.get(0), \\\"true\\\");\\r\\n+            }\\r\\n+        }\\r\\n+    }\\r\\n+    return props;\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\main\java\org\apache\commons\cli\CommandLine.java	getOptionProperties	org.apache.commons.cli.CommandLine.getOptionProperties(String)	209	226	7	[{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2023","diff":"\"\""},{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"\""},{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"\""},{"authorEmail":"britter@apache.org","authorName":"Benedikt Ritter","commitYear":"2019","diff":"\"\""},{"authorEmail":"Krishna.Mohan@capitalone.com","authorName":"Krishna Mohan","commitYear":"2017","diff":"\"\""},{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,14 +1,14 @@\\n-public Properties getOptionProperties(String opt) {\\r\\n+public Properties getOptionProperties(final String opt) {\\r\\n     final Properties props = new Properties();\\r\\n     for (final Option option : options) {\\r\\n         if (opt.equals(option.getOpt()) || opt.equals(option.getLongOpt())) {\\r\\n             final List<String> values = option.getValuesList();\\r\\n             if (values.size() >= 2) {\\r\\n                 props.put(values.get(0), values.get(1));\\r\\n             } else if (values.size() == 1) {\\r\\n                 props.put(values.get(0), \\\"true\\\");\\r\\n             }\\r\\n         }\\r\\n     }\\r\\n     return props;\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,14 +1,14 @@\\n public Properties getOptionProperties(String opt) {\\r\\n-    Properties props = new Properties();\\r\\n-    for (Option option : options) {\\r\\n+    final Properties props = new Properties();\\r\\n+    for (final Option option : options) {\\r\\n         if (opt.equals(option.getOpt()) || opt.equals(option.getLongOpt())) {\\r\\n-            List<String> values = option.getValuesList();\\r\\n+            final List<String> values = option.getValuesList();\\r\\n             if (values.size() >= 2) {\\r\\n                 props.put(values.get(0), values.get(1));\\r\\n             } else if (values.size() == 1) {\\r\\n                 props.put(values.get(0), \\\"true\\\");\\r\\n             }\\r\\n         }\\r\\n     }\\r\\n     return props;\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2011","diff":"\"@@ -1,15 +1,14 @@\\n public Properties getOptionProperties(String opt) {\\r\\n     Properties props = new Properties();\\r\\n-    for (Iterator it = options.iterator(); it.hasNext(); ) {\\r\\n-        Option option = (Option) it.next();\\r\\n+    for (Option option : options) {\\r\\n         if (opt.equals(option.getOpt()) || opt.equals(option.getLongOpt())) {\\r\\n-            List values = option.getValuesList();\\r\\n+            List<String> values = option.getValuesList();\\r\\n             if (values.size() >= 2) {\\r\\n                 props.put(values.get(0), values.get(1));\\r\\n             } else if (values.size() == 1) {\\r\\n                 props.put(values.get(0), \\\"true\\\");\\r\\n             }\\r\\n         }\\r\\n     }\\r\\n     return props;\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2008","diff":"\"\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2008","diff":"\"\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2008","diff":"\"@@ -0,0 +1,15 @@\\n+public Properties getOptionProperties(String opt) {\\r\\n+    Properties props = new Properties();\\r\\n+    for (Iterator it = options.iterator(); it.hasNext(); ) {\\r\\n+        Option option = (Option) it.next();\\r\\n+        if (opt.equals(option.getOpt()) || opt.equals(option.getLongOpt())) {\\r\\n+            List values = option.getValuesList();\\r\\n+            if (values.size() >= 2) {\\r\\n+                props.put(values.get(0), values.get(1));\\r\\n+            } else if (values.size() == 1) {\\r\\n+                props.put(values.get(0), \\\"true\\\");\\r\\n+            }\\r\\n+        }\\r\\n+    }\\r\\n+    return props;\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\main\java\org\apache\commons\cli\CommandLine.java	getOptions	org.apache.commons.cli.CommandLine.getOptions()	233	235	1	[{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2022","diff":"\"@@ -1,5 +1,3 @@\\n public Option[] getOptions() {\\r\\n-    final Collection<Option> processed = options;\\r\\n-    final Option[] optionsArray = new Option[processed.size()];\\r\\n-    return processed.toArray(optionsArray);\\r\\n+    return options.toArray(Option.EMPTY_ARRAY);\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"\""},{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"\""},{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,5 +1,5 @@\\n public Option[] getOptions() {\\r\\n-    Collection<Option> processed = options;\\r\\n-    Option[] optionsArray = new Option[processed.size()];\\r\\n+    final Collection<Option> processed = options;\\r\\n+    final Option[] optionsArray = new Option[processed.size()];\\r\\n     return processed.toArray(optionsArray);\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2011","diff":"\"@@ -1,5 +1,5 @@\\n public Option[] getOptions() {\\r\\n-    Collection processed = options;\\r\\n+    Collection<Option> processed = options;\\r\\n     Option[] optionsArray = new Option[processed.size()];\\r\\n-    return (Option[]) processed.toArray(optionsArray);\\r\\n+    return processed.toArray(optionsArray);\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"bayard@apache.org","authorName":"Henri Yandell","commitYear":"2007","diff":"\"@@ -1,5 +1,5 @@\\n public Option[] getOptions() {\\r\\n-    Collection processed = options.values();\\r\\n-    optionsArray = new Option[processed.size()];\\r\\n+    Collection processed = options;\\r\\n+    Option[] optionsArray = new Option[processed.size()];\\r\\n     return (Option[]) processed.toArray(optionsArray);\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"roxspring@apache.org","authorName":"Robert James Oxspring","commitYear":"2004","diff":"\"\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -1,5 +1,5 @@\\n public Option[] getOptions() {\\r\\n-    Collection processed = hashcodeMap.values();\\r\\n+    Collection processed = options.values();\\r\\n     optionsArray = new Option[processed.size()];\\r\\n     return (Option[]) processed.toArray(optionsArray);\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -1,5 +1,5 @@\\n public Option[] getOptions() {\\r\\n-    Collection processed = options.values();\\r\\n+    Collection processed = hashcodeMap.values();\\r\\n     optionsArray = new Option[processed.size()];\\r\\n     return (Option[]) processed.toArray(optionsArray);\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -0,0 +1,5 @@\\n+public Option[] getOptions() {\\r\\n+    Collection processed = options.values();\\r\\n+    optionsArray = new Option[processed.size()];\\r\\n+    return (Option[]) processed.toArray(optionsArray);\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\main\java\org\apache\commons\cli\CommandLine.java	getOptionValue	org.apache.commons.cli.CommandLine.getOptionValue(char)	243	245	1	[{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2023","diff":"\"\""},{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"\""},{"authorEmail":"Krishna.Mohan@capitalone.com","authorName":"Krishna Mohan","commitYear":"2017","diff":"\"\""},{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,3 +1,3 @@\\n-public String getOptionValue(char opt) {\\r\\n+public String getOptionValue(final char opt) {\\r\\n     return getOptionValue(String.valueOf(opt));\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"tn@apache.org","authorName":"Thomas Neidhart","commitYear":"2013","diff":"\"\""},{"authorEmail":"roxspring@apache.org","authorName":"Robert James Oxspring","commitYear":"2004","diff":"\"\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -0,0 +1,3 @@\\n+public String getOptionValue(char opt) {\\r\\n+    return getOptionValue(String.valueOf(opt));\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\main\java\org\apache\commons\cli\CommandLine.java	getOptionValue	org.apache.commons.cli.CommandLine.getOptionValue(char, String)	254	256	1	[{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2023","diff":"\"\""},{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"\""},{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"\""},{"authorEmail":"Krishna.Mohan@capitalone.com","authorName":"Krishna Mohan","commitYear":"2017","diff":"\"\""},{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,3 +1,3 @@\\n-public String getOptionValue(char opt, String defaultValue) {\\r\\n+public String getOptionValue(final char opt, final String defaultValue) {\\r\\n     return getOptionValue(String.valueOf(opt), defaultValue);\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2008","diff":"\"\""},{"authorEmail":"roxspring@apache.org","authorName":"Robert James Oxspring","commitYear":"2004","diff":"\"\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -0,0 +1,3 @@\\n+public String getOptionValue(char opt, String defaultValue) {\\r\\n+    return getOptionValue(String.valueOf(opt), defaultValue);\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\main\java\org\apache\commons\cli\CommandLine.java	getOptionValue	org.apache.commons.cli.CommandLine.getOptionValue(Option)	265	271	4	[{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2023","diff":"\"\""},{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"\""},{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"@@ -1,7 +1,7 @@\\n public String getOptionValue(final Option option) {\\r\\n     if (option == null) {\\r\\n         return null;\\r\\n     }\\r\\n     final String[] values = getOptionValues(option);\\r\\n-    return (values == null) ? null : values[0];\\r\\n+    return values == null ? null : values[0];\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"\""},{"authorEmail":"Krishna.Mohan@capitalone.com","authorName":"Krishna Mohan","commitYear":"2017","diff":"\"\""},{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,7 +1,7 @@\\n-public String getOptionValue(Option option) {\\r\\n+public String getOptionValue(final Option option) {\\r\\n     if (option == null) {\\r\\n         return null;\\r\\n     }\\r\\n     final String[] values = getOptionValues(option);\\r\\n     return (values == null) ? null : values[0];\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,7 +1,7 @@\\n public String getOptionValue(Option option) {\\r\\n     if (option == null) {\\r\\n         return null;\\r\\n     }\\r\\n-    String[] values = getOptionValues(option);\\r\\n+    final String[] values = getOptionValues(option);\\r\\n     return (values == null) ? null : values[0];\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"britter@apache.org","authorName":"Benedikt Ritter","commitYear":"2017","diff":"\"\""},{"authorEmail":"britter@apache.org","authorName":"Benedikt Ritter","commitYear":"2017","diff":"\"@@ -0,0 +1,7 @@\\n+public String getOptionValue(Option option) {\\r\\n+    if (option == null) {\\r\\n+        return null;\\r\\n+    }\\r\\n+    String[] values = getOptionValues(option);\\r\\n+    return (values == null) ? null : values[0];\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\main\java\org\apache\commons\cli\CommandLine.java	getOptionValue	org.apache.commons.cli.CommandLine.getOptionValue(Option, String)	281	284	2	[{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2023","diff":"\"\""},{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"\""},{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"@@ -1,4 +1,4 @@\\n public String getOptionValue(final Option option, final String defaultValue) {\\r\\n     final String answer = getOptionValue(option);\\r\\n-    return (answer != null) ? answer : defaultValue;\\r\\n+    return answer != null ? answer : defaultValue;\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"\""},{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"\""},{"authorEmail":"Krishna.Mohan@capitalone.com","authorName":"Krishna Mohan","commitYear":"2017","diff":"\"\""},{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,4 +1,4 @@\\n-public String getOptionValue(Option option, String defaultValue) {\\r\\n+public String getOptionValue(final Option option, final String defaultValue) {\\r\\n     final String answer = getOptionValue(option);\\r\\n     return (answer != null) ? answer : defaultValue;\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,4 +1,4 @@\\n public String getOptionValue(Option option, String defaultValue) {\\r\\n-    String answer = getOptionValue(option);\\r\\n+    final String answer = getOptionValue(option);\\r\\n     return (answer != null) ? answer : defaultValue;\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"britter@apache.org","authorName":"Benedikt Ritter","commitYear":"2017","diff":"\"\""},{"authorEmail":"britter@apache.org","authorName":"Benedikt Ritter","commitYear":"2017","diff":"\"@@ -0,0 +1,4 @@\\n+public String getOptionValue(Option option, String defaultValue) {\\r\\n+    String answer = getOptionValue(option);\\r\\n+    return (answer != null) ? answer : defaultValue;\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\main\java\org\apache\commons\cli\CommandLine.java	getOptionValue	org.apache.commons.cli.CommandLine.getOptionValue(String)	292	294	1	[{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2023","diff":"\"\""},{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"\""},{"authorEmail":"Krishna.Mohan@capitalone.com","authorName":"Krishna Mohan","commitYear":"2017","diff":"\"\""},{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,3 +1,3 @@\\n-public String getOptionValue(String opt) {\\r\\n+public String getOptionValue(final String opt) {\\r\\n     return getOptionValue(resolveOption(opt));\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"britter@apache.org","authorName":"Benedikt Ritter","commitYear":"2017","diff":"\"@@ -1,4 +1,3 @@\\n public String getOptionValue(String opt) {\\r\\n-    String[] values = getOptionValues(opt);\\r\\n-    return (values == null) ? null : values[0];\\r\\n+    return getOptionValue(resolveOption(opt));\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"tn@apache.org","authorName":"Thomas Neidhart","commitYear":"2013","diff":"\"\""},{"authorEmail":"roxspring@apache.org","authorName":"Robert James Oxspring","commitYear":"2004","diff":"\"\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -1,3 +1,4 @@\\n public String getOptionValue(String opt) {\\r\\n-    return (String) ((Option) options.get(opt)).getValue();\\r\\n+    String[] values = getOptionValues(opt);\\r\\n+    return (values == null) ? null : values[0];\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -1,4 +1,3 @@\\n public String getOptionValue(String opt) {\\r\\n-    String[] result = (String[]) options.get(opt);\\r\\n-    return result == null ? null : result[0];\\r\\n+    return (String) ((Option) options.get(opt)).getValue();\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -1,4 +1,4 @@\\n-public String getOptionValue(char opt) {\\r\\n-    String[] result = (String[]) options.get(new Character(opt));\\r\\n+public String getOptionValue(String opt) {\\r\\n+    String[] result = (String[]) options.get(opt);\\r\\n     return result == null ? null : result[0];\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jstrachan@apache.org","authorName":"James Strachan","commitYear":"2002","diff":"\"@@ -0,0 +1,4 @@\\n+public String getOptionValue(char opt) {\\r\\n+    String[] result = (String[]) options.get(new Character(opt));\\r\\n+    return result == null ? null : result[0];\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\main\java\org\apache\commons\cli\CommandLine.java	getOptionValue	org.apache.commons.cli.CommandLine.getOptionValue(String, String)	303	305	1	[{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2023","diff":"\"\""},{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"\""},{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"\""},{"authorEmail":"Krishna.Mohan@capitalone.com","authorName":"Krishna Mohan","commitYear":"2017","diff":"\"\""},{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,3 +1,3 @@\\n-public String getOptionValue(String opt, String defaultValue) {\\r\\n+public String getOptionValue(final String opt, final String defaultValue) {\\r\\n     return getOptionValue(resolveOption(opt), defaultValue);\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"britter@apache.org","authorName":"Benedikt Ritter","commitYear":"2017","diff":"\"@@ -1,4 +1,3 @@\\n public String getOptionValue(String opt, String defaultValue) {\\r\\n-    String answer = getOptionValue(opt);\\r\\n-    return (answer != null) ? answer : defaultValue;\\r\\n+    return getOptionValue(resolveOption(opt), defaultValue);\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"tn@apache.org","authorName":"Thomas Neidhart","commitYear":"2013","diff":"\"\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2008","diff":"\"\""},{"authorEmail":"roxspring@apache.org","authorName":"Robert James Oxspring","commitYear":"2004","diff":"\"\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -1,4 +1,4 @@\\n-public String getOptionValue(char opt, String defaultValue) {\\r\\n+public String getOptionValue(String opt, String defaultValue) {\\r\\n     String answer = getOptionValue(opt);\\r\\n     return (answer != null) ? answer : defaultValue;\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jstrachan@apache.org","authorName":"James Strachan","commitYear":"2002","diff":"\"@@ -0,0 +1,4 @@\\n+public String getOptionValue(char opt, String defaultValue) {\\r\\n+    String answer = getOptionValue(opt);\\r\\n+    return (answer != null) ? answer : defaultValue;\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\main\java\org\apache\commons\cli\CommandLine.java	getOptionValues	org.apache.commons.cli.CommandLine.getOptionValues(char)	313	315	1	[{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2023","diff":"\"\""},{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"\""},{"authorEmail":"Krishna.Mohan@capitalone.com","authorName":"Krishna Mohan","commitYear":"2017","diff":"\"\""},{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,3 +1,3 @@\\n-public String[] getOptionValues(char opt) {\\r\\n+public String[] getOptionValues(final char opt) {\\r\\n     return getOptionValues(String.valueOf(opt));\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"roxspring@apache.org","authorName":"Robert James Oxspring","commitYear":"2004","diff":"\"\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -0,0 +1,3 @@\\n+public String[] getOptionValues(char opt) {\\r\\n+    return getOptionValues(String.valueOf(opt));\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\main\java\org\apache\commons\cli\CommandLine.java	getOptionValues	org.apache.commons.cli.CommandLine.getOptionValues(Option)	324	334	4	[{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2023","diff":"\"\""},{"authorEmail":"arturobernalg@gmail.com","authorName":"Arturo Bernal","commitYear":"2022","diff":"\"@@ -1,9 +1,9 @@\\n public String[] getOptionValues(final Option option) {\\r\\n     final List<String> values = new ArrayList<>();\\r\\n     for (final Option processedOption : options) {\\r\\n         if (processedOption.equals(option)) {\\r\\n             values.addAll(processedOption.getValuesList());\\r\\n         }\\r\\n     }\\r\\n-    return values.isEmpty() ? null : values.toArray(new String[values.size()]);\\r\\n+    return values.isEmpty() ? null : values.toArray(EMPTY_STRING_ARRAY);\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"\""},{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"\""},{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2020","diff":"\"@@ -1,9 +1,9 @@\\n public String[] getOptionValues(final Option option) {\\r\\n-    final List<String> values = new ArrayList<String>();\\r\\n+    final List<String> values = new ArrayList<>();\\r\\n     for (final Option processedOption : options) {\\r\\n         if (processedOption.equals(option)) {\\r\\n             values.addAll(processedOption.getValuesList());\\r\\n         }\\r\\n     }\\r\\n     return values.isEmpty() ? null : values.toArray(new String[values.size()]);\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"Krishna.Mohan@capitalone.com","authorName":"Krishna Mohan","commitYear":"2017","diff":"\"\""},{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,9 +1,9 @@\\n-public String[] getOptionValues(Option option) {\\r\\n+public String[] getOptionValues(final Option option) {\\r\\n     final List<String> values = new ArrayList<String>();\\r\\n     for (final Option processedOption : options) {\\r\\n         if (processedOption.equals(option)) {\\r\\n             values.addAll(processedOption.getValuesList());\\r\\n         }\\r\\n     }\\r\\n     return values.isEmpty() ? null : values.toArray(new String[values.size()]);\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,9 +1,9 @@\\n public String[] getOptionValues(Option option) {\\r\\n-    List<String> values = new ArrayList<String>();\\r\\n-    for (Option processedOption : options) {\\r\\n+    final List<String> values = new ArrayList<String>();\\r\\n+    for (final Option processedOption : options) {\\r\\n         if (processedOption.equals(option)) {\\r\\n             values.addAll(processedOption.getValuesList());\\r\\n         }\\r\\n     }\\r\\n     return values.isEmpty() ? null : values.toArray(new String[values.size()]);\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"britter@apache.org","authorName":"Benedikt Ritter","commitYear":"2017","diff":"\"\""},{"authorEmail":"britter@apache.org","authorName":"Benedikt Ritter","commitYear":"2017","diff":"\"@@ -0,0 +1,9 @@\\n+public String[] getOptionValues(Option option) {\\r\\n+    List<String> values = new ArrayList<String>();\\r\\n+    for (Option processedOption : options) {\\r\\n+        if (processedOption.equals(option)) {\\r\\n+            values.addAll(processedOption.getValuesList());\\r\\n+        }\\r\\n+    }\\r\\n+    return values.isEmpty() ? null : values.toArray(new String[values.size()]);\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\main\java\org\apache\commons\cli\CommandLine.java	getOptionValues	org.apache.commons.cli.CommandLine.getOptionValues(String)	342	344	1	[{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2023","diff":"\"\""},{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"\""},{"authorEmail":"Krishna.Mohan@capitalone.com","authorName":"Krishna Mohan","commitYear":"2017","diff":"\"\""},{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,3 +1,3 @@\\n-public String[] getOptionValues(String opt) {\\r\\n+public String[] getOptionValues(final String opt) {\\r\\n     return getOptionValues(resolveOption(opt));\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"britter@apache.org","authorName":"Benedikt Ritter","commitYear":"2017","diff":"\"@@ -1,9 +1,3 @@\\n public String[] getOptionValues(String opt) {\\r\\n-    List<String> values = new ArrayList<String>();\\r\\n-    for (Option option : options) {\\r\\n-        if (opt.equals(option.getOpt()) || opt.equals(option.getLongOpt())) {\\r\\n-            values.addAll(option.getValuesList());\\r\\n-        }\\r\\n-    }\\r\\n-    return values.isEmpty() ? null : values.toArray(new String[values.size()]);\\r\\n+    return getOptionValues(resolveOption(opt));\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2011","diff":"\"@@ -1,10 +1,9 @@\\n public String[] getOptionValues(String opt) {\\r\\n-    List values = new ArrayList();\\r\\n-    for (Iterator it = options.iterator(); it.hasNext(); ) {\\r\\n-        Option option = (Option) it.next();\\r\\n+    List<String> values = new ArrayList<String>();\\r\\n+    for (Option option : options) {\\r\\n         if (opt.equals(option.getOpt()) || opt.equals(option.getLongOpt())) {\\r\\n             values.addAll(option.getValuesList());\\r\\n         }\\r\\n     }\\r\\n-    return values.isEmpty() ? null : (String[]) values.toArray(new String[values.size()]);\\r\\n+    return values.isEmpty() ? null : values.toArray(new String[values.size()]);\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2008","diff":"\"\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2008","diff":"\"@@ -1,7 +1,10 @@\\n public String[] getOptionValues(String opt) {\\r\\n-    Option key = resolveOption(opt);\\r\\n-    if (options.contains(key)) {\\r\\n-        return key.getValues();\\r\\n+    List values = new ArrayList();\\r\\n+    for (Iterator it = options.iterator(); it.hasNext(); ) {\\r\\n+        Option option = (Option) it.next();\\r\\n+        if (opt.equals(option.getOpt()) || opt.equals(option.getLongOpt())) {\\r\\n+            values.addAll(option.getValuesList());\\r\\n+        }\\r\\n     }\\r\\n-    return null;\\r\\n+    return values.isEmpty() ? null : (String[]) values.toArray(new String[values.size()]);\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"bayard@apache.org","authorName":"Henri Yandell","commitYear":"2007","diff":"\"@@ -1,11 +1,7 @@\\n public String[] getOptionValues(String opt) {\\r\\n-    opt = Util.stripLeadingHyphens(opt);\\r\\n-    String key = opt;\\r\\n-    if (names.containsKey(opt)) {\\r\\n-        key = (String) names.get(opt);\\r\\n-    }\\r\\n-    if (options.containsKey(key)) {\\r\\n-        return ((Option) options.get(key)).getValues();\\r\\n+    Option key = resolveOption(opt);\\r\\n+    if (options.contains(key)) {\\r\\n+        return key.getValues();\\r\\n     }\\r\\n     return null;\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"roxspring@apache.org","authorName":"Robert James Oxspring","commitYear":"2005","diff":"\"@@ -1,12 +1,11 @@\\n public String[] getOptionValues(String opt) {\\r\\n-    List values = new java.util.ArrayList();\\r\\n     opt = Util.stripLeadingHyphens(opt);\\r\\n     String key = opt;\\r\\n     if (names.containsKey(opt)) {\\r\\n         key = (String) names.get(opt);\\r\\n     }\\r\\n     if (options.containsKey(key)) {\\r\\n         return ((Option) options.get(key)).getValues();\\r\\n     }\\r\\n     return null;\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"roxspring@apache.org","authorName":"Robert James Oxspring","commitYear":"2004","diff":"\"\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -1,16 +1,12 @@\\n public String[] getOptionValues(String opt) {\\r\\n     List values = new java.util.ArrayList();\\r\\n+    opt = Util.stripLeadingHyphens(opt);\\r\\n     String key = opt;\\r\\n     if (names.containsKey(opt)) {\\r\\n         key = (String) names.get(opt);\\r\\n     }\\r\\n     if (options.containsKey(key)) {\\r\\n-        List opts = (List) options.get(key);\\r\\n-        Iterator iter = opts.iterator();\\r\\n-        while (iter.hasNext()) {\\r\\n-            Option optt = (Option) iter.next();\\r\\n-            values.addAll(optt.getValuesList());\\r\\n-        }\\r\\n+        return ((Option) options.get(key)).getValues();\\r\\n     }\\r\\n-    return (values.size() == 0) ? null : (String[]) values.toArray(new String[] {});\\r\\n+    return null;\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -1,12 +1,16 @@\\n public String[] getOptionValues(String opt) {\\r\\n     List values = new java.util.ArrayList();\\r\\n-    if (options.containsKey(opt)) {\\r\\n-        List opts = (List) options.get(opt);\\r\\n+    String key = opt;\\r\\n+    if (names.containsKey(opt)) {\\r\\n+        key = (String) names.get(opt);\\r\\n+    }\\r\\n+    if (options.containsKey(key)) {\\r\\n+        List opts = (List) options.get(key);\\r\\n         Iterator iter = opts.iterator();\\r\\n         while (iter.hasNext()) {\\r\\n             Option optt = (Option) iter.next();\\r\\n             values.addAll(optt.getValuesList());\\r\\n         }\\r\\n     }\\r\\n     return (values.size() == 0) ? null : (String[]) values.toArray(new String[] {});\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -1,10 +1,12 @@\\n public String[] getOptionValues(String opt) {\\r\\n     List values = new java.util.ArrayList();\\r\\n-    List opts = (List) options.get(opt);\\r\\n-    Iterator iter = opts.iterator();\\r\\n-    while (iter.hasNext()) {\\r\\n-        Option optt = (Option) iter.next();\\r\\n-        values.addAll(optt.getValuesList());\\r\\n+    if (options.containsKey(opt)) {\\r\\n+        List opts = (List) options.get(opt);\\r\\n+        Iterator iter = opts.iterator();\\r\\n+        while (iter.hasNext()) {\\r\\n+            Option optt = (Option) iter.next();\\r\\n+            values.addAll(optt.getValuesList());\\r\\n+        }\\r\\n     }\\r\\n     return (values.size() == 0) ? null : (String[]) values.toArray(new String[] {});\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -1,3 +1,10 @@\\n public String[] getOptionValues(String opt) {\\r\\n-    return (String[]) ((Option) options.get(opt)).getValues();\\r\\n+    List values = new java.util.ArrayList();\\r\\n+    List opts = (List) options.get(opt);\\r\\n+    Iterator iter = opts.iterator();\\r\\n+    while (iter.hasNext()) {\\r\\n+        Option optt = (Option) iter.next();\\r\\n+        values.addAll(optt.getValuesList());\\r\\n+    }\\r\\n+    return (values.size() == 0) ? null : (String[]) values.toArray(new String[] {});\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -1,4 +1,3 @@\\n public String[] getOptionValues(String opt) {\\r\\n-    String[] result = (String[]) options.get(opt);\\r\\n-    return result == null ? null : result;\\r\\n+    return (String[]) ((Option) options.get(opt)).getValues();\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -1,4 +1,4 @@\\n-public String[] getOptionValues(char opt) {\\r\\n-    String[] result = (String[]) options.get(new Character(opt));\\r\\n+public String[] getOptionValues(String opt) {\\r\\n+    String[] result = (String[]) options.get(opt);\\r\\n     return result == null ? null : result;\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jstrachan@apache.org","authorName":"James Strachan","commitYear":"2002","diff":"\"@@ -0,0 +1,4 @@\\n+public String[] getOptionValues(char opt) {\\r\\n+    String[] result = (String[]) options.get(new Character(opt));\\r\\n+    return result == null ? null : result;\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\main\java\org\apache\commons\cli\CommandLine.java	getParsedOptionValue	org.apache.commons.cli.CommandLine.getParsedOptionValue(char)	355	357	1	[{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2023","diff":"\"\""},{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"\""},{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"\""},{"authorEmail":"Krishna.Mohan@capitalone.com","authorName":"Krishna Mohan","commitYear":"2017","diff":"\"\""},{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,3 +1,3 @@\\n-public Object getParsedOptionValue(char opt) throws ParseException {\\r\\n+public Object getParsedOptionValue(final char opt) throws ParseException {\\r\\n     return getParsedOptionValue(String.valueOf(opt));\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"britter@apache.org","authorName":"Benedikt Ritter","commitYear":"2017","diff":"\"\""},{"authorEmail":"britter@apache.org","authorName":"Benedikt Ritter","commitYear":"2017","diff":"\"@@ -0,0 +1,3 @@\\n+public Object getParsedOptionValue(char opt) throws ParseException {\\r\\n+    return getParsedOptionValue(String.valueOf(opt));\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\main\java\org\apache\commons\cli\CommandLine.java	getParsedOptionValue	org.apache.commons.cli.CommandLine.getParsedOptionValue(Option)	368	377	5	[{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2023","diff":"\"\""},{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"\""},{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"\""},{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"\""},{"authorEmail":"Krishna.Mohan@capitalone.com","authorName":"Krishna Mohan","commitYear":"2017","diff":"\"\""},{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,10 +1,10 @@\\n-public Object getParsedOptionValue(Option option) throws ParseException {\\r\\n+public Object getParsedOptionValue(final Option option) throws ParseException {\\r\\n     if (option == null) {\\r\\n         return null;\\r\\n     }\\r\\n     final String res = getOptionValue(option);\\r\\n     if (res == null) {\\r\\n         return null;\\r\\n     }\\r\\n     return TypeHandler.createValue(res, option.getType());\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,10 +1,10 @@\\n public Object getParsedOptionValue(Option option) throws ParseException {\\r\\n     if (option == null) {\\r\\n         return null;\\r\\n     }\\r\\n-    String res = getOptionValue(option);\\r\\n+    final String res = getOptionValue(option);\\r\\n     if (res == null) {\\r\\n         return null;\\r\\n     }\\r\\n     return TypeHandler.createValue(res, option.getType());\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"britter@apache.org","authorName":"Benedikt Ritter","commitYear":"2017","diff":"\"\""},{"authorEmail":"britter@apache.org","authorName":"Benedikt Ritter","commitYear":"2017","diff":"\"@@ -0,0 +1,10 @@\\n+public Object getParsedOptionValue(Option option) throws ParseException {\\r\\n+    if (option == null) {\\r\\n+        return null;\\r\\n+    }\\r\\n+    String res = getOptionValue(option);\\r\\n+    if (res == null) {\\r\\n+        return null;\\r\\n+    }\\r\\n+    return TypeHandler.createValue(res, option.getType());\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\main\java\org\apache\commons\cli\CommandLine.java	getParsedOptionValue	org.apache.commons.cli.CommandLine.getParsedOptionValue(String)	388	390	1	[{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2023","diff":"\"\""},{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"\""},{"authorEmail":"Krishna.Mohan@capitalone.com","authorName":"Krishna Mohan","commitYear":"2017","diff":"\"\""},{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,3 +1,3 @@\\n-public Object getParsedOptionValue(String opt) throws ParseException {\\r\\n+public Object getParsedOptionValue(final String opt) throws ParseException {\\r\\n     return getParsedOptionValue(resolveOption(opt));\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"britter@apache.org","authorName":"Benedikt Ritter","commitYear":"2017","diff":"\"@@ -1,8 +1,3 @@\\n public Object getParsedOptionValue(String opt) throws ParseException {\\r\\n-    String res = getOptionValue(opt);\\r\\n-    Option option = resolveOption(opt);\\r\\n-    if (option == null || res == null) {\\r\\n-        return null;\\r\\n-    }\\r\\n-    return TypeHandler.createValue(res, option.getType());\\r\\n+    return getParsedOptionValue(resolveOption(opt));\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2011","diff":"\"@@ -1,9 +1,8 @@\\n public Object getParsedOptionValue(String opt) throws ParseException {\\r\\n     String res = getOptionValue(opt);\\r\\n     Option option = resolveOption(opt);\\r\\n-    if (option == null) {\\r\\n+    if (option == null || res == null) {\\r\\n         return null;\\r\\n     }\\r\\n-    Object type = option.getType();\\r\\n-    return (res == null) ? null : TypeHandler.createValue(res, type);\\r\\n+    return TypeHandler.createValue(res, option.getType());\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2010","diff":"\"\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2009","diff":"\"\""},{"authorEmail":"bayard@apache.org","authorName":"Henri Yandell","commitYear":"2009","diff":"\"@@ -0,0 +1,9 @@\\n+public Object getParsedOptionValue(String opt) throws ParseException {\\r\\n+    String res = getOptionValue(opt);\\r\\n+    Option option = resolveOption(opt);\\r\\n+    if (option == null) {\\r\\n+        return null;\\r\\n+    }\\r\\n+    Object type = option.getType();\\r\\n+    return (res == null) ? null : TypeHandler.createValue(res, type);\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\main\java\org\apache\commons\cli\CommandLine.java	hasOption	org.apache.commons.cli.CommandLine.hasOption(char)	416	418	1	[{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"\""},{"authorEmail":"Krishna.Mohan@capitalone.com","authorName":"Krishna Mohan","commitYear":"2017","diff":"\"\""},{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,3 +1,3 @@\\n-public boolean hasOption(char opt) {\\r\\n+public boolean hasOption(final char opt) {\\r\\n     return hasOption(String.valueOf(opt));\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"roxspring@apache.org","authorName":"Robert James Oxspring","commitYear":"2004","diff":"\"\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -0,0 +1,3 @@\\n+public boolean hasOption(char opt) {\\r\\n+    return hasOption(String.valueOf(opt));\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\main\java\org\apache\commons\cli\CommandLine.java	hasOption	org.apache.commons.cli.CommandLine.hasOption(Option)	427	429	1	[{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"\""},{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"\""},{"authorEmail":"Krishna.Mohan@capitalone.com","authorName":"Krishna Mohan","commitYear":"2017","diff":"\"\""},{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,3 +1,3 @@\\n-public boolean hasOption(Option opt) {\\r\\n+public boolean hasOption(final Option opt) {\\r\\n     return options.contains(opt);\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"britter@apache.org","authorName":"Benedikt Ritter","commitYear":"2017","diff":"\"\""},{"authorEmail":"britter@apache.org","authorName":"Benedikt Ritter","commitYear":"2017","diff":"\"@@ -0,0 +1,3 @@\\n+public boolean hasOption(Option opt) {\\r\\n+    return options.contains(opt);\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\main\java\org\apache\commons\cli\CommandLine.java	hasOption	org.apache.commons.cli.CommandLine.hasOption(String)	437	439	1	[{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"\""},{"authorEmail":"Krishna.Mohan@capitalone.com","authorName":"Krishna Mohan","commitYear":"2017","diff":"\"\""},{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,3 +1,3 @@\\n-public boolean hasOption(String opt) {\\r\\n+public boolean hasOption(final String opt) {\\r\\n     return hasOption(resolveOption(opt));\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"britter@apache.org","authorName":"Benedikt Ritter","commitYear":"2017","diff":"\"@@ -1,3 +1,3 @@\\n public boolean hasOption(String opt) {\\r\\n-    return options.contains(resolveOption(opt));\\r\\n+    return hasOption(resolveOption(opt));\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2008","diff":"\"\""},{"authorEmail":"bayard@apache.org","authorName":"Henri Yandell","commitYear":"2007","diff":"\"@@ -1,3 +1,3 @@\\n public boolean hasOption(String opt) {\\r\\n-    return options.containsKey(opt);\\r\\n+    return options.contains(resolveOption(opt));\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"roxspring@apache.org","authorName":"Robert James Oxspring","commitYear":"2004","diff":"\"\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -1,3 +1,3 @@\\n-public boolean hasOption(char opt) {\\r\\n-    return options.containsKey(new Character(opt));\\r\\n+public boolean hasOption(String opt) {\\r\\n+    return options.containsKey(opt);\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jstrachan@apache.org","authorName":"James Strachan","commitYear":"2002","diff":"\"@@ -0,0 +1,3 @@\\n+public boolean hasOption(char opt) {\\r\\n+    return options.containsKey(new Character(opt));\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\main\java\org\apache\commons\cli\CommandLine.java	iterator	org.apache.commons.cli.CommandLine.iterator()	446	448	1	[{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"\""},{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"\""},{"authorEmail":"Krishna.Mohan@capitalone.com","authorName":"Krishna Mohan","commitYear":"2017","diff":"\"\""},{"authorEmail":"simonetripodi@apache.org","authorName":"Simone Tripodi","commitYear":"2011","diff":"\"@@ -1,3 +1,3 @@\\n-public Iterator iterator() {\\r\\n+public Iterator<Option> iterator() {\\r\\n     return options.iterator();\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2008","diff":"\"\""},{"authorEmail":"bayard@apache.org","authorName":"Henri Yandell","commitYear":"2007","diff":"\"@@ -1,3 +1,3 @@\\n public Iterator iterator() {\\r\\n-    return hashcodeMap.values().iterator();\\r\\n+    return options.iterator();\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"roxspring@apache.org","authorName":"Robert James Oxspring","commitYear":"2004","diff":"\"\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -1,3 +1,3 @@\\n public Iterator iterator() {\\r\\n-    return options.values().iterator();\\r\\n+    return hashcodeMap.values().iterator();\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -0,0 +1,3 @@\\n+public Iterator iterator() {\\r\\n+    return options.values().iterator();\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\main\java\org\apache\commons\cli\CommandLine.java	resolveOption	org.apache.commons.cli.CommandLine.resolveOption(String)	456	466	6	[{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2023","diff":"\"@@ -1,9 +1,11 @@\\n-private Option resolveOption(String opt) {\\r\\n-    opt = Util.stripLeadingHyphens(opt);\\r\\n-    for (final Option option : options) {\\r\\n-        if (opt.equals(option.getOpt()) || opt.equals(option.getLongOpt())) {\\r\\n-            return option;\\r\\n+private Option resolveOption(final String opt) {\\r\\n+    final String actual = Util.stripLeadingHyphens(opt);\\r\\n+    if (actual != null) {\\r\\n+        for (final Option option : options) {\\r\\n+            if (actual.equals(option.getOpt()) || actual.equals(option.getLongOpt())) {\\r\\n+                return option;\\r\\n+            }\\r\\n         }\\r\\n     }\\r\\n     return null;\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"@@ -1,12 +1,9 @@\\n private Option resolveOption(String opt) {\\r\\n     opt = Util.stripLeadingHyphens(opt);\\r\\n     for (final Option option : options) {\\r\\n-        if (opt.equals(option.getOpt())) {\\r\\n-            return option;\\r\\n-        }\\r\\n-        if (opt.equals(option.getLongOpt())) {\\r\\n+        if (opt.equals(option.getOpt()) || opt.equals(option.getLongOpt())) {\\r\\n             return option;\\r\\n         }\\r\\n     }\\r\\n     return null;\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"\""},{"authorEmail":"Krishna.Mohan@capitalone.com","authorName":"Krishna Mohan","commitYear":"2017","diff":"\"\""},{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,12 +1,12 @@\\n private Option resolveOption(String opt) {\\r\\n     opt = Util.stripLeadingHyphens(opt);\\r\\n-    for (Option option : options) {\\r\\n+    for (final Option option : options) {\\r\\n         if (opt.equals(option.getOpt())) {\\r\\n             return option;\\r\\n         }\\r\\n         if (opt.equals(option.getLongOpt())) {\\r\\n             return option;\\r\\n         }\\r\\n     }\\r\\n     return null;\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2011","diff":"\"\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2011","diff":"\"@@ -1,13 +1,12 @@\\n private Option resolveOption(String opt) {\\r\\n     opt = Util.stripLeadingHyphens(opt);\\r\\n-    for (Iterator it = options.iterator(); it.hasNext(); ) {\\r\\n-        Option option = (Option) it.next();\\r\\n+    for (Option option : options) {\\r\\n         if (opt.equals(option.getOpt())) {\\r\\n             return option;\\r\\n         }\\r\\n         if (opt.equals(option.getLongOpt())) {\\r\\n             return option;\\r\\n         }\\r\\n     }\\r\\n     return null;\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2008","diff":"\"\""},{"authorEmail":"bayard@apache.org","authorName":"Henri Yandell","commitYear":"2007","diff":"\"@@ -0,0 +1,13 @@\\n+private Option resolveOption(String opt) {\\r\\n+    opt = Util.stripLeadingHyphens(opt);\\r\\n+    for (Iterator it = options.iterator(); it.hasNext(); ) {\\r\\n+        Option option = (Option) it.next();\\r\\n+        if (opt.equals(option.getOpt())) {\\r\\n+            return option;\\r\\n+        }\\r\\n+        if (opt.equals(option.getLongOpt())) {\\r\\n+            return option;\\r\\n+        }\\r\\n+    }\\r\\n+    return null;\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\main\java\org\apache\commons\cli\CommandLineParser.java	parse	org.apache.commons.cli.CommandLineParser.parse(Options, String[])	35	35	1	[]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\main\java\org\apache\commons\cli\CommandLineParser.java	parse	org.apache.commons.cli.CommandLineParser.parse(Options, String[], boolean)	65	65	1	[]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\main\java\org\apache\commons\cli\DefaultParser.java	build	org.apache.commons.cli.Builder.build()	69	71	1	[{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"\""},{"authorEmail":"stoty@apache.org","authorName":"Istvan Toth","commitYear":"2021","diff":"\"@@ -0,0 +1,3 @@\\n+public DefaultParser build() {\\r\\n+    return new DefaultParser(allowPartialMatching, stripLeadingAndTrailingQuotes);\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\main\java\org\apache\commons\cli\DefaultParser.java	setAllowPartialMatching	org.apache.commons.cli.Builder.setAllowPartialMatching(boolean)	95	98	1	[{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"\""},{"authorEmail":"stoty@apache.org","authorName":"Istvan Toth","commitYear":"2021","diff":"\"@@ -0,0 +1,4 @@\\n+public Builder setAllowPartialMatching(final boolean allowPartialMatching) {\\r\\n+    this.allowPartialMatching = allowPartialMatching;\\r\\n+    return this;\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\main\java\org\apache\commons\cli\DefaultParser.java	setStripLeadingAndTrailingQuotes	org.apache.commons.cli.Builder.setStripLeadingAndTrailingQuotes(Boolean)	115	118	1	[{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2022","diff":"\"\""},{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"\""},{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"\""},{"authorEmail":"stoty@apache.org","authorName":"Istvan Toth","commitYear":"2021","diff":"\"@@ -0,0 +1,4 @@\\n+public Builder setStripLeadingAndTrailingQuotes(final Boolean stripLeadingAndTrailingQuotes) {\\r\\n+    this.stripLeadingAndTrailingQuotes = stripLeadingAndTrailingQuotes;\\r\\n+    return this;\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\main\java\org\apache\commons\cli\DefaultParser.java	builder	org.apache.commons.cli.DefaultParser.builder()	128	130	1	[{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"\""},{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"\""},{"authorEmail":"stoty@apache.org","authorName":"Istvan Toth","commitYear":"2021","diff":"\"@@ -0,0 +1,3 @@\\n+public static Builder builder() {\\r\\n+    return new Builder();\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\main\java\org\apache\commons\cli\DefaultParser.java	checkRequiredArgs	org.apache.commons.cli.DefaultParser.checkRequiredArgs()	229	233	4	[{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"\""},{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2009","diff":"\"@@ -0,0 +1,5 @@\\n+private void checkRequiredArgs() throws ParseException {\\r\\n+    if (currentOption != null && currentOption.requiresArg()) {\\r\\n+        throw new MissingArgumentException(currentOption);\\r\\n+    }\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\main\java\org\apache\commons\cli\DefaultParser.java	checkRequiredOptions	org.apache.commons.cli.DefaultParser.checkRequiredOptions()	240	245	3	[{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"\""},{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,5 +1,5 @@\\n-private void checkRequiredOptions() throws MissingOptionException {\\r\\n+protected void checkRequiredOptions() throws MissingOptionException {\\r\\n     if (!expectedOpts.isEmpty()) {\\r\\n         throw new MissingOptionException(expectedOpts);\\r\\n     }\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2012","diff":"\"\""},{"authorEmail":"simonetripodi@apache.org","authorName":"Simone Tripodi","commitYear":"2011","diff":"\"\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2009","diff":"\"@@ -0,0 +1,5 @@\\n+private void checkRequiredOptions() throws MissingOptionException {\\r\\n+    if (!expectedOpts.isEmpty()) {\\r\\n+        throw new MissingOptionException(expectedOpts);\\r\\n+    }\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\main\java\org\apache\commons\cli\DefaultParser.java	getLongPrefix	org.apache.commons.cli.DefaultParser.getLongPrefix(String)	252	266	4	[{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"\""},{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"\""},{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2019","diff":"\"\""},{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,13 +1,13 @@\\n-private String getLongPrefix(String token) {\\r\\n+private String getLongPrefix(final String token) {\\r\\n     final String t = Util.stripLeadingHyphens(token);\\r\\n     int i;\\r\\n     String opt = null;\\r\\n     for (i = t.length() - 2; i > 1; i--) {\\r\\n         final String prefix = t.substring(0, i);\\r\\n         if (options.hasLongOption(prefix)) {\\r\\n             opt = prefix;\\r\\n             break;\\r\\n         }\\r\\n     }\\r\\n     return opt;\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,13 +1,13 @@\\n private String getLongPrefix(String token) {\\r\\n-    String t = Util.stripLeadingHyphens(token);\\r\\n+    final String t = Util.stripLeadingHyphens(token);\\r\\n     int i;\\r\\n     String opt = null;\\r\\n     for (i = t.length() - 2; i > 1; i--) {\\r\\n-        String prefix = t.substring(0, i);\\r\\n+        final String prefix = t.substring(0, i);\\r\\n         if (options.hasLongOption(prefix)) {\\r\\n             opt = prefix;\\r\\n             break;\\r\\n         }\\r\\n     }\\r\\n     return opt;\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"simonetripodi@apache.org","authorName":"Simone Tripodi","commitYear":"2011","diff":"\"\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2009","diff":"\"@@ -0,0 +1,13 @@\\n+private String getLongPrefix(String token) {\\r\\n+    String t = Util.stripLeadingHyphens(token);\\r\\n+    int i;\\r\\n+    String opt = null;\\r\\n+    for (i = t.length() - 2; i > 1; i--) {\\r\\n+        String prefix = t.substring(0, i);\\r\\n+        if (options.hasLongOption(prefix)) {\\r\\n+            opt = prefix;\\r\\n+            break;\\r\\n+        }\\r\\n+    }\\r\\n+    return opt;\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\main\java\org\apache\commons\cli\DefaultParser.java	getMatchingLongOptions	org.apache.commons.cli.DefaultParser.getMatchingLongOptions(String)	274	285	4	[{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"\""},{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"\""},{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2020","diff":"\"@@ -1,12 +1,11 @@\\n private List<String> getMatchingLongOptions(final String token) {\\r\\n     if (allowPartialMatching) {\\r\\n         return options.getMatchingOptions(token);\\r\\n-    } else {\\r\\n-        final List<String> matches = new ArrayList<>(1);\\r\\n-        if (options.hasLongOption(token)) {\\r\\n-            final Option option = options.getOption(token);\\r\\n-            matches.add(option.getLongOpt());\\r\\n-        }\\r\\n-        return matches;\\r\\n     }\\r\\n+    final List<String> matches = new ArrayList<>(1);\\r\\n+    if (options.hasLongOption(token)) {\\r\\n+        final Option option = options.getOption(token);\\r\\n+        matches.add(option.getLongOpt());\\r\\n+    }\\r\\n+    return matches;\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2020","diff":"\"@@ -1,12 +1,12 @@\\n private List<String> getMatchingLongOptions(final String token) {\\r\\n     if (allowPartialMatching) {\\r\\n         return options.getMatchingOptions(token);\\r\\n     } else {\\r\\n-        List<String> matches = new ArrayList<>(1);\\r\\n+        final List<String> matches = new ArrayList<>(1);\\r\\n         if (options.hasLongOption(token)) {\\r\\n-            Option option = options.getOption(token);\\r\\n+            final Option option = options.getOption(token);\\r\\n             matches.add(option.getLongOpt());\\r\\n         }\\r\\n         return matches;\\r\\n     }\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2020","diff":"\"@@ -1,12 +1,12 @@\\n private List<String> getMatchingLongOptions(final String token) {\\r\\n     if (allowPartialMatching) {\\r\\n         return options.getMatchingOptions(token);\\r\\n     } else {\\r\\n-        List<String> matches = new ArrayList<String>(1);\\r\\n+        List<String> matches = new ArrayList<>(1);\\r\\n         if (options.hasLongOption(token)) {\\r\\n             Option option = options.getOption(token);\\r\\n             matches.add(option.getLongOpt());\\r\\n         }\\r\\n         return matches;\\r\\n     }\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"rubin@raaftech.com","authorName":"Rubin Simons","commitYear":"2017","diff":"\"@@ -0,0 +1,12 @@\\n+private List<String> getMatchingLongOptions(final String token) {\\r\\n+    if (allowPartialMatching) {\\r\\n+        return options.getMatchingOptions(token);\\r\\n+    } else {\\r\\n+        List<String> matches = new ArrayList<String>(1);\\r\\n+        if (options.hasLongOption(token)) {\\r\\n+            Option option = options.getOption(token);\\r\\n+            matches.add(option.getLongOpt());\\r\\n+        }\\r\\n+        return matches;\\r\\n+    }\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\main\java\org\apache\commons\cli\DefaultParser.java	handleConcatenatedOptions	org.apache.commons.cli.DefaultParser.handleConcatenatedOptions(String)	307	323	9	[{"authorEmail":"stoty@apache.org","authorName":"Istvan Toth","commitYear":"2021","diff":"\"@@ -1,14 +1,14 @@\\n protected void handleConcatenatedOptions(final String token) throws ParseException {\\r\\n     for (int i = 1; i < token.length(); i++) {\\r\\n         final String ch = String.valueOf(token.charAt(i));\\r\\n         if (!options.hasOption(ch)) {\\r\\n             handleUnknownToken(stopAtNonOption && i > 1 ? token.substring(i) : token);\\r\\n             break;\\r\\n         }\\r\\n         handleOption(options.getOption(ch));\\r\\n         if (currentOption != null && token.length() != i + 1) {\\r\\n-            currentOption.addValueForProcessing(token.substring(i + 1));\\r\\n+            currentOption.addValueForProcessing(stripLeadingAndTrailingQuotesDefaultOff(token.substring(i + 1)));\\r\\n             break;\\r\\n         }\\r\\n     }\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"\""},{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"\""},{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"@@ -1,15 +1,14 @@\\n protected void handleConcatenatedOptions(final String token) throws ParseException {\\r\\n     for (int i = 1; i < token.length(); i++) {\\r\\n         final String ch = String.valueOf(token.charAt(i));\\r\\n-        if (options.hasOption(ch)) {\\r\\n-            handleOption(options.getOption(ch));\\r\\n-            if (currentOption != null && token.length() != i + 1) {\\r\\n-                currentOption.addValueForProcessing(token.substring(i + 1));\\r\\n-                break;\\r\\n-            }\\r\\n-        } else {\\r\\n+        if (!options.hasOption(ch)) {\\r\\n             handleUnknownToken(stopAtNonOption && i > 1 ? token.substring(i) : token);\\r\\n             break;\\r\\n         }\\r\\n+        handleOption(options.getOption(ch));\\r\\n+        if (currentOption != null && token.length() != i + 1) {\\r\\n+            currentOption.addValueForProcessing(token.substring(i + 1));\\r\\n+            break;\\r\\n+        }\\r\\n     }\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,15 +1,15 @@\\n-protected void handleConcatenatedOptions(String token) throws ParseException {\\r\\n+protected void handleConcatenatedOptions(final String token) throws ParseException {\\r\\n     for (int i = 1; i < token.length(); i++) {\\r\\n         final String ch = String.valueOf(token.charAt(i));\\r\\n         if (options.hasOption(ch)) {\\r\\n             handleOption(options.getOption(ch));\\r\\n             if (currentOption != null && token.length() != i + 1) {\\r\\n                 currentOption.addValueForProcessing(token.substring(i + 1));\\r\\n                 break;\\r\\n             }\\r\\n         } else {\\r\\n             handleUnknownToken(stopAtNonOption && i > 1 ? token.substring(i) : token);\\r\\n             break;\\r\\n         }\\r\\n     }\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,15 +1,15 @@\\n protected void handleConcatenatedOptions(String token) throws ParseException {\\r\\n     for (int i = 1; i < token.length(); i++) {\\r\\n-        String ch = String.valueOf(token.charAt(i));\\r\\n+        final String ch = String.valueOf(token.charAt(i));\\r\\n         if (options.hasOption(ch)) {\\r\\n             handleOption(options.getOption(ch));\\r\\n             if (currentOption != null && token.length() != i + 1) {\\r\\n                 currentOption.addValueForProcessing(token.substring(i + 1));\\r\\n                 break;\\r\\n             }\\r\\n         } else {\\r\\n             handleUnknownToken(stopAtNonOption && i > 1 ? token.substring(i) : token);\\r\\n             break;\\r\\n         }\\r\\n     }\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"britter@apache.org","authorName":"Benedikt Ritter","commitYear":"2017","diff":"\"\""},{"authorEmail":"britter@apache.org","authorName":"Benedikt Ritter","commitYear":"2015","diff":"\"\""},{"authorEmail":"britter@apache.org","authorName":"Benedikt Ritter","commitYear":"2015","diff":"\"@@ -1,15 +1,15 @@\\n protected void handleConcatenatedOptions(String token) throws ParseException {\\r\\n     for (int i = 1; i < token.length(); i++) {\\r\\n         String ch = String.valueOf(token.charAt(i));\\r\\n         if (options.hasOption(ch)) {\\r\\n             handleOption(options.getOption(ch));\\r\\n-            if (currentOption != null && (token.length() != (i + 1))) {\\r\\n+            if (currentOption != null && token.length() != i + 1) {\\r\\n                 currentOption.addValueForProcessing(token.substring(i + 1));\\r\\n                 break;\\r\\n             }\\r\\n         } else {\\r\\n             handleUnknownToken(stopAtNonOption && i > 1 ? token.substring(i) : token);\\r\\n             break;\\r\\n         }\\r\\n     }\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"simonetripodi@apache.org","authorName":"Simone Tripodi","commitYear":"2011","diff":"\"\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2009","diff":"\"@@ -0,0 +1,15 @@\\n+protected void handleConcatenatedOptions(String token) throws ParseException {\\r\\n+    for (int i = 1; i < token.length(); i++) {\\r\\n+        String ch = String.valueOf(token.charAt(i));\\r\\n+        if (options.hasOption(ch)) {\\r\\n+            handleOption(options.getOption(ch));\\r\\n+            if (currentOption != null && (token.length() != (i + 1))) {\\r\\n+                currentOption.addValueForProcessing(token.substring(i + 1));\\r\\n+                break;\\r\\n+            }\\r\\n+        } else {\\r\\n+            handleUnknownToken(stopAtNonOption && i > 1 ? token.substring(i) : token);\\r\\n+            break;\\r\\n+        }\\r\\n+    }\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\main\java\org\apache\commons\cli\DefaultParser.java	handleLongOption	org.apache.commons.cli.DefaultParser.handleLongOption(String)	332	338	3	[{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"\""},{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,7 +1,7 @@\\n-private void handleLongOption(String token) throws ParseException {\\r\\n+private void handleLongOption(final String token) throws ParseException {\\r\\n     if (token.indexOf('=') == -1) {\\r\\n         handleLongOptionWithoutEqual(token);\\r\\n     } else {\\r\\n         handleLongOptionWithEqual(token);\\r\\n     }\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"simonetripodi@apache.org","authorName":"Simone Tripodi","commitYear":"2011","diff":"\"\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2009","diff":"\"@@ -0,0 +1,7 @@\\n+private void handleLongOption(String token) throws ParseException {\\r\\n+    if (token.indexOf('=') == -1) {\\r\\n+        handleLongOptionWithoutEqual(token);\\r\\n+    } else {\\r\\n+        handleLongOptionWithEqual(token);\\r\\n+    }\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\main\java\org\apache\commons\cli\DefaultParser.java	handleLongOptionWithEqual	org.apache.commons.cli.DefaultParser.handleLongOptionWithEqual(String)	347	371	10	[{"authorEmail":"stoty@apache.org","authorName":"Istvan Toth","commitYear":"2021","diff":"\"@@ -1,21 +1,21 @@\\n private void handleLongOptionWithEqual(final String token) throws ParseException {\\r\\n     final int pos = token.indexOf('=');\\r\\n     final String value = token.substring(pos + 1);\\r\\n     final String opt = token.substring(0, pos);\\r\\n     final List<String> matchingOpts = getMatchingLongOptions(opt);\\r\\n     if (matchingOpts.isEmpty()) {\\r\\n         handleUnknownToken(currentToken);\\r\\n     } else if (matchingOpts.size() > 1 && !options.hasLongOption(opt)) {\\r\\n         throw new AmbiguousOptionException(opt, matchingOpts);\\r\\n     } else {\\r\\n         final String key = options.hasLongOption(opt) ? opt : matchingOpts.get(0);\\r\\n         final Option option = options.getOption(key);\\r\\n         if (option.acceptsArg()) {\\r\\n             handleOption(option);\\r\\n-            currentOption.addValueForProcessing(value);\\r\\n+            currentOption.addValueForProcessing(stripLeadingAndTrailingQuotesDefaultOff(value));\\r\\n             currentOption = null;\\r\\n         } else {\\r\\n             handleUnknownToken(currentToken);\\r\\n         }\\r\\n     }\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"\""},{"authorEmail":"rubin@raaftech.com","authorName":"Rubin Simons","commitYear":"2017","diff":"\"@@ -1,20 +1,21 @@\\n private void handleLongOptionWithEqual(final String token) throws ParseException {\\r\\n     final int pos = token.indexOf('=');\\r\\n     final String value = token.substring(pos + 1);\\r\\n     final String opt = token.substring(0, pos);\\r\\n-    final List<String> matchingOpts = options.getMatchingOptions(opt);\\r\\n+    final List<String> matchingOpts = getMatchingLongOptions(opt);\\r\\n     if (matchingOpts.isEmpty()) {\\r\\n         handleUnknownToken(currentToken);\\r\\n-    } else if (matchingOpts.size() > 1) {\\r\\n+    } else if (matchingOpts.size() > 1 && !options.hasLongOption(opt)) {\\r\\n         throw new AmbiguousOptionException(opt, matchingOpts);\\r\\n     } else {\\r\\n-        final Option option = options.getOption(matchingOpts.get(0));\\r\\n+        final String key = options.hasLongOption(opt) ? opt : matchingOpts.get(0);\\r\\n+        final Option option = options.getOption(key);\\r\\n         if (option.acceptsArg()) {\\r\\n             handleOption(option);\\r\\n             currentOption.addValueForProcessing(value);\\r\\n             currentOption = null;\\r\\n         } else {\\r\\n             handleUnknownToken(currentToken);\\r\\n         }\\r\\n     }\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,20 +1,20 @@\\n-private void handleLongOptionWithEqual(String token) throws ParseException {\\r\\n+private void handleLongOptionWithEqual(final String token) throws ParseException {\\r\\n     final int pos = token.indexOf('=');\\r\\n     final String value = token.substring(pos + 1);\\r\\n     final String opt = token.substring(0, pos);\\r\\n     final List<String> matchingOpts = options.getMatchingOptions(opt);\\r\\n     if (matchingOpts.isEmpty()) {\\r\\n         handleUnknownToken(currentToken);\\r\\n     } else if (matchingOpts.size() > 1) {\\r\\n         throw new AmbiguousOptionException(opt, matchingOpts);\\r\\n     } else {\\r\\n         final Option option = options.getOption(matchingOpts.get(0));\\r\\n         if (option.acceptsArg()) {\\r\\n             handleOption(option);\\r\\n             currentOption.addValueForProcessing(value);\\r\\n             currentOption = null;\\r\\n         } else {\\r\\n             handleUnknownToken(currentToken);\\r\\n         }\\r\\n     }\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,20 +1,20 @@\\n private void handleLongOptionWithEqual(String token) throws ParseException {\\r\\n-    int pos = token.indexOf('=');\\r\\n-    String value = token.substring(pos + 1);\\r\\n-    String opt = token.substring(0, pos);\\r\\n-    List<String> matchingOpts = options.getMatchingOptions(opt);\\r\\n+    final int pos = token.indexOf('=');\\r\\n+    final String value = token.substring(pos + 1);\\r\\n+    final String opt = token.substring(0, pos);\\r\\n+    final List<String> matchingOpts = options.getMatchingOptions(opt);\\r\\n     if (matchingOpts.isEmpty()) {\\r\\n         handleUnknownToken(currentToken);\\r\\n     } else if (matchingOpts.size() > 1) {\\r\\n         throw new AmbiguousOptionException(opt, matchingOpts);\\r\\n     } else {\\r\\n-        Option option = options.getOption(matchingOpts.get(0));\\r\\n+        final Option option = options.getOption(matchingOpts.get(0));\\r\\n         if (option.acceptsArg()) {\\r\\n             handleOption(option);\\r\\n             currentOption.addValueForProcessing(value);\\r\\n             currentOption = null;\\r\\n         } else {\\r\\n             handleUnknownToken(currentToken);\\r\\n         }\\r\\n     }\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"simonetripodi@apache.org","authorName":"Simone Tripodi","commitYear":"2011","diff":"\"\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2011","diff":"\"@@ -1,20 +1,20 @@\\n private void handleLongOptionWithEqual(String token) throws ParseException {\\r\\n     int pos = token.indexOf('=');\\r\\n     String value = token.substring(pos + 1);\\r\\n     String opt = token.substring(0, pos);\\r\\n-    List matchingOpts = options.getMatchingOptions(opt);\\r\\n+    List<String> matchingOpts = options.getMatchingOptions(opt);\\r\\n     if (matchingOpts.isEmpty()) {\\r\\n         handleUnknownToken(currentToken);\\r\\n     } else if (matchingOpts.size() > 1) {\\r\\n         throw new AmbiguousOptionException(opt, matchingOpts);\\r\\n     } else {\\r\\n-        Option option = options.getOption((String) matchingOpts.get(0));\\r\\n+        Option option = options.getOption(matchingOpts.get(0));\\r\\n         if (option.acceptsArg()) {\\r\\n             handleOption(option);\\r\\n             currentOption.addValueForProcessing(value);\\r\\n             currentOption = null;\\r\\n         } else {\\r\\n             handleUnknownToken(currentToken);\\r\\n         }\\r\\n     }\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2009","diff":"\"@@ -0,0 +1,20 @@\\n+private void handleLongOptionWithEqual(String token) throws ParseException {\\r\\n+    int pos = token.indexOf('=');\\r\\n+    String value = token.substring(pos + 1);\\r\\n+    String opt = token.substring(0, pos);\\r\\n+    List matchingOpts = options.getMatchingOptions(opt);\\r\\n+    if (matchingOpts.isEmpty()) {\\r\\n+        handleUnknownToken(currentToken);\\r\\n+    } else if (matchingOpts.size() > 1) {\\r\\n+        throw new AmbiguousOptionException(opt, matchingOpts);\\r\\n+    } else {\\r\\n+        Option option = options.getOption((String) matchingOpts.get(0));\\r\\n+        if (option.acceptsArg()) {\\r\\n+            handleOption(option);\\r\\n+            currentOption.addValueForProcessing(value);\\r\\n+            currentOption = null;\\r\\n+        } else {\\r\\n+            handleUnknownToken(currentToken);\\r\\n+        }\\r\\n+    }\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\main\java\org\apache\commons\cli\DefaultParser.java	handleLongOptionWithoutEqual	org.apache.commons.cli.DefaultParser.handleLongOptionWithoutEqual(String)	380	390	8	[{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"\""},{"authorEmail":"rubin@raaftech.com","authorName":"Rubin Simons","commitYear":"2017","diff":"\"@@ -1,10 +1,11 @@\\n private void handleLongOptionWithoutEqual(final String token) throws ParseException {\\r\\n-    final List<String> matchingOpts = options.getMatchingOptions(token);\\r\\n+    final List<String> matchingOpts = getMatchingLongOptions(token);\\r\\n     if (matchingOpts.isEmpty()) {\\r\\n         handleUnknownToken(currentToken);\\r\\n-    } else if (matchingOpts.size() > 1) {\\r\\n+    } else if (matchingOpts.size() > 1 && !options.hasLongOption(token)) {\\r\\n         throw new AmbiguousOptionException(token, matchingOpts);\\r\\n     } else {\\r\\n-        handleOption(options.getOption(matchingOpts.get(0)));\\r\\n+        final String key = options.hasLongOption(token) ? token : matchingOpts.get(0);\\r\\n+        handleOption(options.getOption(key));\\r\\n     }\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,10 +1,10 @@\\n-private void handleLongOptionWithoutEqual(String token) throws ParseException {\\r\\n+private void handleLongOptionWithoutEqual(final String token) throws ParseException {\\r\\n     final List<String> matchingOpts = options.getMatchingOptions(token);\\r\\n     if (matchingOpts.isEmpty()) {\\r\\n         handleUnknownToken(currentToken);\\r\\n     } else if (matchingOpts.size() > 1) {\\r\\n         throw new AmbiguousOptionException(token, matchingOpts);\\r\\n     } else {\\r\\n         handleOption(options.getOption(matchingOpts.get(0)));\\r\\n     }\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,10 +1,10 @@\\n private void handleLongOptionWithoutEqual(String token) throws ParseException {\\r\\n-    List<String> matchingOpts = options.getMatchingOptions(token);\\r\\n+    final List<String> matchingOpts = options.getMatchingOptions(token);\\r\\n     if (matchingOpts.isEmpty()) {\\r\\n         handleUnknownToken(currentToken);\\r\\n     } else if (matchingOpts.size() > 1) {\\r\\n         throw new AmbiguousOptionException(token, matchingOpts);\\r\\n     } else {\\r\\n         handleOption(options.getOption(matchingOpts.get(0)));\\r\\n     }\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2011","diff":"\"@@ -1,10 +1,10 @@\\n private void handleLongOptionWithoutEqual(String token) throws ParseException {\\r\\n-    List matchingOpts = options.getMatchingOptions(token);\\r\\n+    List<String> matchingOpts = options.getMatchingOptions(token);\\r\\n     if (matchingOpts.isEmpty()) {\\r\\n         handleUnknownToken(currentToken);\\r\\n     } else if (matchingOpts.size() > 1) {\\r\\n         throw new AmbiguousOptionException(token, matchingOpts);\\r\\n     } else {\\r\\n-        handleOption(options.getOption((String) matchingOpts.get(0)));\\r\\n+        handleOption(options.getOption(matchingOpts.get(0)));\\r\\n     }\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2009","diff":"\"@@ -0,0 +1,10 @@\\n+private void handleLongOptionWithoutEqual(String token) throws ParseException {\\r\\n+    List matchingOpts = options.getMatchingOptions(token);\\r\\n+    if (matchingOpts.isEmpty()) {\\r\\n+        handleUnknownToken(currentToken);\\r\\n+    } else if (matchingOpts.size() > 1) {\\r\\n+        throw new AmbiguousOptionException(token, matchingOpts);\\r\\n+    } else {\\r\\n+        handleOption(options.getOption((String) matchingOpts.get(0)));\\r\\n+    }\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\main\java\org\apache\commons\cli\DefaultParser.java	handleOption	org.apache.commons.cli.DefaultParser.handleOption(Option)	392	407	3	[{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"\""},{"authorEmail":"tn@apache.org","authorName":"Thomas Neidhart","commitYear":"2013","diff":"\"@@ -1,11 +1,11 @@\\n private void handleOption(Option option) throws ParseException {\\r\\n     checkRequiredArgs();\\r\\n-    option = option.clone();\\r\\n+    option = (Option) option.clone();\\r\\n     updateRequiredOptions(option);\\r\\n     cmd.addOption(option);\\r\\n     if (option.hasArg()) {\\r\\n         currentOption = option;\\r\\n     } else {\\r\\n         currentOption = null;\\r\\n     }\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"simonetripodi@apache.org","authorName":"Simone Tripodi","commitYear":"2011","diff":"\"\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2011","diff":"\"@@ -1,11 +1,11 @@\\n private void handleOption(Option option) throws ParseException {\\r\\n     checkRequiredArgs();\\r\\n-    option = (Option) option.clone();\\r\\n+    option = option.clone();\\r\\n     updateRequiredOptions(option);\\r\\n     cmd.addOption(option);\\r\\n     if (option.hasArg()) {\\r\\n         currentOption = option;\\r\\n     } else {\\r\\n         currentOption = null;\\r\\n     }\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2009","diff":"\"@@ -0,0 +1,11 @@\\n+private void handleOption(Option option) throws ParseException {\\r\\n+    checkRequiredArgs();\\r\\n+    option = (Option) option.clone();\\r\\n+    updateRequiredOptions(option);\\r\\n+    cmd.addOption(option);\\r\\n+    if (option.hasArg()) {\\r\\n+        currentOption = option;\\r\\n+    } else {\\r\\n+        currentOption = null;\\r\\n+    }\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\main\java\org\apache\commons\cli\DefaultParser.java	handleProperties	org.apache.commons.cli.DefaultParser.handleProperties(Properties)	414	448	17	[{"authorEmail":"stoty@apache.org","authorName":"Istvan Toth","commitYear":"2021","diff":"\"@@ -1,26 +1,26 @@\\n private void handleProperties(final Properties properties) throws ParseException {\\r\\n     if (properties == null) {\\r\\n         return;\\r\\n     }\\r\\n     for (final Enumeration<?> e = properties.propertyNames(); e.hasMoreElements(); ) {\\r\\n         final String option = e.nextElement().toString();\\r\\n         final Option opt = options.getOption(option);\\r\\n         if (opt == null) {\\r\\n             throw new UnrecognizedOptionException(\\\"Default option wasn't defined\\\", option);\\r\\n         }\\r\\n         final OptionGroup group = options.getOptionGroup(opt);\\r\\n         final boolean selected = group != null && group.getSelected() != null;\\r\\n         if (!cmd.hasOption(option) && !selected) {\\r\\n             final String value = properties.getProperty(option);\\r\\n             if (opt.hasArg()) {\\r\\n                 if (opt.getValues() == null || opt.getValues().length == 0) {\\r\\n-                    opt.addValueForProcessing(value);\\r\\n+                    opt.addValueForProcessing(stripLeadingAndTrailingQuotesDefaultOff(value));\\r\\n                 }\\r\\n             } else if (!(\\\"yes\\\".equalsIgnoreCase(value) || \\\"true\\\".equalsIgnoreCase(value) || \\\"1\\\".equalsIgnoreCase(value))) {\\r\\n                 continue;\\r\\n             }\\r\\n             handleOption(opt);\\r\\n             currentOption = null;\\r\\n         }\\r\\n     }\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"\""},{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"\""},{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,26 +1,26 @@\\n-private void handleProperties(Properties properties) throws ParseException {\\r\\n+private void handleProperties(final Properties properties) throws ParseException {\\r\\n     if (properties == null) {\\r\\n         return;\\r\\n     }\\r\\n     for (final Enumeration<?> e = properties.propertyNames(); e.hasMoreElements(); ) {\\r\\n         final String option = e.nextElement().toString();\\r\\n         final Option opt = options.getOption(option);\\r\\n         if (opt == null) {\\r\\n             throw new UnrecognizedOptionException(\\\"Default option wasn't defined\\\", option);\\r\\n         }\\r\\n         final OptionGroup group = options.getOptionGroup(opt);\\r\\n         final boolean selected = group != null && group.getSelected() != null;\\r\\n         if (!cmd.hasOption(option) && !selected) {\\r\\n             final String value = properties.getProperty(option);\\r\\n             if (opt.hasArg()) {\\r\\n                 if (opt.getValues() == null || opt.getValues().length == 0) {\\r\\n                     opt.addValueForProcessing(value);\\r\\n                 }\\r\\n             } else if (!(\\\"yes\\\".equalsIgnoreCase(value) || \\\"true\\\".equalsIgnoreCase(value) || \\\"1\\\".equalsIgnoreCase(value))) {\\r\\n                 continue;\\r\\n             }\\r\\n             handleOption(opt);\\r\\n             currentOption = null;\\r\\n         }\\r\\n     }\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,26 +1,26 @@\\n private void handleProperties(Properties properties) throws ParseException {\\r\\n     if (properties == null) {\\r\\n         return;\\r\\n     }\\r\\n-    for (Enumeration<?> e = properties.propertyNames(); e.hasMoreElements(); ) {\\r\\n-        String option = e.nextElement().toString();\\r\\n-        Option opt = options.getOption(option);\\r\\n+    for (final Enumeration<?> e = properties.propertyNames(); e.hasMoreElements(); ) {\\r\\n+        final String option = e.nextElement().toString();\\r\\n+        final Option opt = options.getOption(option);\\r\\n         if (opt == null) {\\r\\n             throw new UnrecognizedOptionException(\\\"Default option wasn't defined\\\", option);\\r\\n         }\\r\\n-        OptionGroup group = options.getOptionGroup(opt);\\r\\n-        boolean selected = group != null && group.getSelected() != null;\\r\\n+        final OptionGroup group = options.getOptionGroup(opt);\\r\\n+        final boolean selected = group != null && group.getSelected() != null;\\r\\n         if (!cmd.hasOption(option) && !selected) {\\r\\n-            String value = properties.getProperty(option);\\r\\n+            final String value = properties.getProperty(option);\\r\\n             if (opt.hasArg()) {\\r\\n                 if (opt.getValues() == null || opt.getValues().length == 0) {\\r\\n                     opt.addValueForProcessing(value);\\r\\n                 }\\r\\n             } else if (!(\\\"yes\\\".equalsIgnoreCase(value) || \\\"true\\\".equalsIgnoreCase(value) || \\\"1\\\".equalsIgnoreCase(value))) {\\r\\n                 continue;\\r\\n             }\\r\\n             handleOption(opt);\\r\\n             currentOption = null;\\r\\n         }\\r\\n     }\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"tn@apache.org","authorName":"Thomas Neidhart","commitYear":"2013","diff":"\"@@ -1,26 +1,26 @@\\n private void handleProperties(Properties properties) throws ParseException {\\r\\n     if (properties == null) {\\r\\n         return;\\r\\n     }\\r\\n-    for (Enumeration e = properties.propertyNames(); e.hasMoreElements(); ) {\\r\\n+    for (Enumeration<?> e = properties.propertyNames(); e.hasMoreElements(); ) {\\r\\n         String option = e.nextElement().toString();\\r\\n         Option opt = options.getOption(option);\\r\\n         if (opt == null) {\\r\\n             throw new UnrecognizedOptionException(\\\"Default option wasn't defined\\\", option);\\r\\n         }\\r\\n         OptionGroup group = options.getOptionGroup(opt);\\r\\n         boolean selected = group != null && group.getSelected() != null;\\r\\n         if (!cmd.hasOption(option) && !selected) {\\r\\n             String value = properties.getProperty(option);\\r\\n             if (opt.hasArg()) {\\r\\n                 if (opt.getValues() == null || opt.getValues().length == 0) {\\r\\n                     opt.addValueForProcessing(value);\\r\\n                 }\\r\\n             } else if (!(\\\"yes\\\".equalsIgnoreCase(value) || \\\"true\\\".equalsIgnoreCase(value) || \\\"1\\\".equalsIgnoreCase(value))) {\\r\\n                 continue;\\r\\n             }\\r\\n             handleOption(opt);\\r\\n             currentOption = null;\\r\\n         }\\r\\n     }\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"simonetripodi@apache.org","authorName":"Simone Tripodi","commitYear":"2011","diff":"\"\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2010","diff":"\"@@ -1,21 +1,26 @@\\n private void handleProperties(Properties properties) throws ParseException {\\r\\n     if (properties == null) {\\r\\n         return;\\r\\n     }\\r\\n     for (Enumeration e = properties.propertyNames(); e.hasMoreElements(); ) {\\r\\n         String option = e.nextElement().toString();\\r\\n-        if (!cmd.hasOption(option)) {\\r\\n-            Option opt = options.getOption(option);\\r\\n+        Option opt = options.getOption(option);\\r\\n+        if (opt == null) {\\r\\n+            throw new UnrecognizedOptionException(\\\"Default option wasn't defined\\\", option);\\r\\n+        }\\r\\n+        OptionGroup group = options.getOptionGroup(opt);\\r\\n+        boolean selected = group != null && group.getSelected() != null;\\r\\n+        if (!cmd.hasOption(option) && !selected) {\\r\\n             String value = properties.getProperty(option);\\r\\n             if (opt.hasArg()) {\\r\\n                 if (opt.getValues() == null || opt.getValues().length == 0) {\\r\\n                     opt.addValueForProcessing(value);\\r\\n                 }\\r\\n             } else if (!(\\\"yes\\\".equalsIgnoreCase(value) || \\\"true\\\".equalsIgnoreCase(value) || \\\"1\\\".equalsIgnoreCase(value))) {\\r\\n                 continue;\\r\\n             }\\r\\n             handleOption(opt);\\r\\n             currentOption = null;\\r\\n         }\\r\\n     }\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2010","diff":"\"@@ -1,20 +1,21 @@\\n-private void handleProperties(Properties properties) {\\r\\n+private void handleProperties(Properties properties) throws ParseException {\\r\\n     if (properties == null) {\\r\\n         return;\\r\\n     }\\r\\n     for (Enumeration e = properties.propertyNames(); e.hasMoreElements(); ) {\\r\\n         String option = e.nextElement().toString();\\r\\n         if (!cmd.hasOption(option)) {\\r\\n             Option opt = options.getOption(option);\\r\\n             String value = properties.getProperty(option);\\r\\n             if (opt.hasArg()) {\\r\\n                 if (opt.getValues() == null || opt.getValues().length == 0) {\\r\\n                     opt.addValueForProcessing(value);\\r\\n                 }\\r\\n             } else if (!(\\\"yes\\\".equalsIgnoreCase(value) || \\\"true\\\".equalsIgnoreCase(value) || \\\"1\\\".equalsIgnoreCase(value))) {\\r\\n                 continue;\\r\\n             }\\r\\n-            cmd.addOption(opt);\\r\\n+            handleOption(opt);\\r\\n+            currentOption = null;\\r\\n         }\\r\\n     }\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2010","diff":"\"@@ -0,0 +1,20 @@\\n+private void handleProperties(Properties properties) {\\r\\n+    if (properties == null) {\\r\\n+        return;\\r\\n+    }\\r\\n+    for (Enumeration e = properties.propertyNames(); e.hasMoreElements(); ) {\\r\\n+        String option = e.nextElement().toString();\\r\\n+        if (!cmd.hasOption(option)) {\\r\\n+            Option opt = options.getOption(option);\\r\\n+            String value = properties.getProperty(option);\\r\\n+            if (opt.hasArg()) {\\r\\n+                if (opt.getValues() == null || opt.getValues().length == 0) {\\r\\n+                    opt.addValueForProcessing(value);\\r\\n+                }\\r\\n+            } else if (!(\\\"yes\\\".equalsIgnoreCase(value) || \\\"true\\\".equalsIgnoreCase(value) || \\\"1\\\".equalsIgnoreCase(value))) {\\r\\n+                continue;\\r\\n+            }\\r\\n+            cmd.addOption(opt);\\r\\n+        }\\r\\n+    }\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\main\java\org\apache\commons\cli\DefaultParser.java	handleShortAndLongOption	org.apache.commons.cli.DefaultParser.handleShortAndLongOption(String)	459	522	23	[{"authorEmail":"stoty@apache.org","authorName":"Istvan Toth","commitYear":"2021","diff":"\"@@ -1,50 +1,50 @@\\n private void handleShortAndLongOption(final String token) throws ParseException {\\r\\n     final String t = Util.stripLeadingHyphens(token);\\r\\n     final int pos = t.indexOf('=');\\r\\n     if (t.length() == 1) {\\r\\n         if (options.hasShortOption(t)) {\\r\\n             handleOption(options.getOption(t));\\r\\n         } else {\\r\\n             handleUnknownToken(token);\\r\\n         }\\r\\n     } else if (pos == -1) {\\r\\n         if (options.hasShortOption(t)) {\\r\\n             handleOption(options.getOption(t));\\r\\n         } else if (!getMatchingLongOptions(t).isEmpty()) {\\r\\n             handleLongOptionWithoutEqual(token);\\r\\n         } else {\\r\\n             final String opt = getLongPrefix(t);\\r\\n             if (opt != null && options.getOption(opt).acceptsArg()) {\\r\\n                 handleOption(options.getOption(opt));\\r\\n-                currentOption.addValueForProcessing(t.substring(opt.length()));\\r\\n+                currentOption.addValueForProcessing(stripLeadingAndTrailingQuotesDefaultOff(t.substring(opt.length())));\\r\\n                 currentOption = null;\\r\\n             } else if (isJavaProperty(t)) {\\r\\n                 handleOption(options.getOption(t.substring(0, 1)));\\r\\n-                currentOption.addValueForProcessing(t.substring(1));\\r\\n+                currentOption.addValueForProcessing(stripLeadingAndTrailingQuotesDefaultOff(t.substring(1)));\\r\\n                 currentOption = null;\\r\\n             } else {\\r\\n                 handleConcatenatedOptions(token);\\r\\n             }\\r\\n         }\\r\\n     } else {\\r\\n         final String opt = t.substring(0, pos);\\r\\n         final String value = t.substring(pos + 1);\\r\\n         if (opt.length() == 1) {\\r\\n             final Option option = options.getOption(opt);\\r\\n             if (option != null && option.acceptsArg()) {\\r\\n                 handleOption(option);\\r\\n                 currentOption.addValueForProcessing(value);\\r\\n                 currentOption = null;\\r\\n             } else {\\r\\n                 handleUnknownToken(token);\\r\\n             }\\r\\n         } else if (isJavaProperty(opt)) {\\r\\n             handleOption(options.getOption(opt.substring(0, 1)));\\r\\n             currentOption.addValueForProcessing(opt.substring(1));\\r\\n             currentOption.addValueForProcessing(value);\\r\\n             currentOption = null;\\r\\n         } else {\\r\\n             handleLongOptionWithEqual(token);\\r\\n         }\\r\\n     }\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"\""},{"authorEmail":"rubin@raaftech.com","authorName":"Rubin Simons","commitYear":"2017","diff":"\"@@ -1,50 +1,50 @@\\n private void handleShortAndLongOption(final String token) throws ParseException {\\r\\n     final String t = Util.stripLeadingHyphens(token);\\r\\n     final int pos = t.indexOf('=');\\r\\n     if (t.length() == 1) {\\r\\n         if (options.hasShortOption(t)) {\\r\\n             handleOption(options.getOption(t));\\r\\n         } else {\\r\\n             handleUnknownToken(token);\\r\\n         }\\r\\n     } else if (pos == -1) {\\r\\n         if (options.hasShortOption(t)) {\\r\\n             handleOption(options.getOption(t));\\r\\n-        } else if (!options.getMatchingOptions(t).isEmpty()) {\\r\\n+        } else if (!getMatchingLongOptions(t).isEmpty()) {\\r\\n             handleLongOptionWithoutEqual(token);\\r\\n         } else {\\r\\n             final String opt = getLongPrefix(t);\\r\\n             if (opt != null && options.getOption(opt).acceptsArg()) {\\r\\n                 handleOption(options.getOption(opt));\\r\\n                 currentOption.addValueForProcessing(t.substring(opt.length()));\\r\\n                 currentOption = null;\\r\\n             } else if (isJavaProperty(t)) {\\r\\n                 handleOption(options.getOption(t.substring(0, 1)));\\r\\n                 currentOption.addValueForProcessing(t.substring(1));\\r\\n                 currentOption = null;\\r\\n             } else {\\r\\n                 handleConcatenatedOptions(token);\\r\\n             }\\r\\n         }\\r\\n     } else {\\r\\n         final String opt = t.substring(0, pos);\\r\\n         final String value = t.substring(pos + 1);\\r\\n         if (opt.length() == 1) {\\r\\n             final Option option = options.getOption(opt);\\r\\n             if (option != null && option.acceptsArg()) {\\r\\n                 handleOption(option);\\r\\n                 currentOption.addValueForProcessing(value);\\r\\n                 currentOption = null;\\r\\n             } else {\\r\\n                 handleUnknownToken(token);\\r\\n             }\\r\\n         } else if (isJavaProperty(opt)) {\\r\\n             handleOption(options.getOption(opt.substring(0, 1)));\\r\\n             currentOption.addValueForProcessing(opt.substring(1));\\r\\n             currentOption.addValueForProcessing(value);\\r\\n             currentOption = null;\\r\\n         } else {\\r\\n             handleLongOptionWithEqual(token);\\r\\n         }\\r\\n     }\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,50 +1,50 @@\\n-private void handleShortAndLongOption(String token) throws ParseException {\\r\\n+private void handleShortAndLongOption(final String token) throws ParseException {\\r\\n     final String t = Util.stripLeadingHyphens(token);\\r\\n     final int pos = t.indexOf('=');\\r\\n     if (t.length() == 1) {\\r\\n         if (options.hasShortOption(t)) {\\r\\n             handleOption(options.getOption(t));\\r\\n         } else {\\r\\n             handleUnknownToken(token);\\r\\n         }\\r\\n     } else if (pos == -1) {\\r\\n         if (options.hasShortOption(t)) {\\r\\n             handleOption(options.getOption(t));\\r\\n         } else if (!options.getMatchingOptions(t).isEmpty()) {\\r\\n             handleLongOptionWithoutEqual(token);\\r\\n         } else {\\r\\n             final String opt = getLongPrefix(t);\\r\\n             if (opt != null && options.getOption(opt).acceptsArg()) {\\r\\n                 handleOption(options.getOption(opt));\\r\\n                 currentOption.addValueForProcessing(t.substring(opt.length()));\\r\\n                 currentOption = null;\\r\\n             } else if (isJavaProperty(t)) {\\r\\n                 handleOption(options.getOption(t.substring(0, 1)));\\r\\n                 currentOption.addValueForProcessing(t.substring(1));\\r\\n                 currentOption = null;\\r\\n             } else {\\r\\n                 handleConcatenatedOptions(token);\\r\\n             }\\r\\n         }\\r\\n     } else {\\r\\n         final String opt = t.substring(0, pos);\\r\\n         final String value = t.substring(pos + 1);\\r\\n         if (opt.length() == 1) {\\r\\n             final Option option = options.getOption(opt);\\r\\n             if (option != null && option.acceptsArg()) {\\r\\n                 handleOption(option);\\r\\n                 currentOption.addValueForProcessing(value);\\r\\n                 currentOption = null;\\r\\n             } else {\\r\\n                 handleUnknownToken(token);\\r\\n             }\\r\\n         } else if (isJavaProperty(opt)) {\\r\\n             handleOption(options.getOption(opt.substring(0, 1)));\\r\\n             currentOption.addValueForProcessing(opt.substring(1));\\r\\n             currentOption.addValueForProcessing(value);\\r\\n             currentOption = null;\\r\\n         } else {\\r\\n             handleLongOptionWithEqual(token);\\r\\n         }\\r\\n     }\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,50 +1,50 @@\\n private void handleShortAndLongOption(String token) throws ParseException {\\r\\n-    String t = Util.stripLeadingHyphens(token);\\r\\n-    int pos = t.indexOf('=');\\r\\n+    final String t = Util.stripLeadingHyphens(token);\\r\\n+    final int pos = t.indexOf('=');\\r\\n     if (t.length() == 1) {\\r\\n         if (options.hasShortOption(t)) {\\r\\n             handleOption(options.getOption(t));\\r\\n         } else {\\r\\n             handleUnknownToken(token);\\r\\n         }\\r\\n     } else if (pos == -1) {\\r\\n         if (options.hasShortOption(t)) {\\r\\n             handleOption(options.getOption(t));\\r\\n         } else if (!options.getMatchingOptions(t).isEmpty()) {\\r\\n             handleLongOptionWithoutEqual(token);\\r\\n         } else {\\r\\n-            String opt = getLongPrefix(t);\\r\\n+            final String opt = getLongPrefix(t);\\r\\n             if (opt != null && options.getOption(opt).acceptsArg()) {\\r\\n                 handleOption(options.getOption(opt));\\r\\n                 currentOption.addValueForProcessing(t.substring(opt.length()));\\r\\n                 currentOption = null;\\r\\n             } else if (isJavaProperty(t)) {\\r\\n                 handleOption(options.getOption(t.substring(0, 1)));\\r\\n                 currentOption.addValueForProcessing(t.substring(1));\\r\\n                 currentOption = null;\\r\\n             } else {\\r\\n                 handleConcatenatedOptions(token);\\r\\n             }\\r\\n         }\\r\\n     } else {\\r\\n-        String opt = t.substring(0, pos);\\r\\n-        String value = t.substring(pos + 1);\\r\\n+        final String opt = t.substring(0, pos);\\r\\n+        final String value = t.substring(pos + 1);\\r\\n         if (opt.length() == 1) {\\r\\n-            Option option = options.getOption(opt);\\r\\n+            final Option option = options.getOption(opt);\\r\\n             if (option != null && option.acceptsArg()) {\\r\\n                 handleOption(option);\\r\\n                 currentOption.addValueForProcessing(value);\\r\\n                 currentOption = null;\\r\\n             } else {\\r\\n                 handleUnknownToken(token);\\r\\n             }\\r\\n         } else if (isJavaProperty(opt)) {\\r\\n             handleOption(options.getOption(opt.substring(0, 1)));\\r\\n             currentOption.addValueForProcessing(opt.substring(1));\\r\\n             currentOption.addValueForProcessing(value);\\r\\n             currentOption = null;\\r\\n         } else {\\r\\n             handleLongOptionWithEqual(token);\\r\\n         }\\r\\n     }\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"simonetripodi@apache.org","authorName":"Simone Tripodi","commitYear":"2011","diff":"\"\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2011","diff":"\"\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2009","diff":"\"@@ -0,0 +1,50 @@\\n+private void handleShortAndLongOption(String token) throws ParseException {\\r\\n+    String t = Util.stripLeadingHyphens(token);\\r\\n+    int pos = t.indexOf('=');\\r\\n+    if (t.length() == 1) {\\r\\n+        if (options.hasShortOption(t)) {\\r\\n+            handleOption(options.getOption(t));\\r\\n+        } else {\\r\\n+            handleUnknownToken(token);\\r\\n+        }\\r\\n+    } else if (pos == -1) {\\r\\n+        if (options.hasShortOption(t)) {\\r\\n+            handleOption(options.getOption(t));\\r\\n+        } else if (!options.getMatchingOptions(t).isEmpty()) {\\r\\n+            handleLongOptionWithoutEqual(token);\\r\\n+        } else {\\r\\n+            String opt = getLongPrefix(t);\\r\\n+            if (opt != null && options.getOption(opt).acceptsArg()) {\\r\\n+                handleOption(options.getOption(opt));\\r\\n+                currentOption.addValueForProcessing(t.substring(opt.length()));\\r\\n+                currentOption = null;\\r\\n+            } else if (isJavaProperty(t)) {\\r\\n+                handleOption(options.getOption(t.substring(0, 1)));\\r\\n+                currentOption.addValueForProcessing(t.substring(1));\\r\\n+                currentOption = null;\\r\\n+            } else {\\r\\n+                handleConcatenatedOptions(token);\\r\\n+            }\\r\\n+        }\\r\\n+    } else {\\r\\n+        String opt = t.substring(0, pos);\\r\\n+        String value = t.substring(pos + 1);\\r\\n+        if (opt.length() == 1) {\\r\\n+            Option option = options.getOption(opt);\\r\\n+            if (option != null && option.acceptsArg()) {\\r\\n+                handleOption(option);\\r\\n+                currentOption.addValueForProcessing(value);\\r\\n+                currentOption = null;\\r\\n+            } else {\\r\\n+                handleUnknownToken(token);\\r\\n+            }\\r\\n+        } else if (isJavaProperty(opt)) {\\r\\n+            handleOption(options.getOption(opt.substring(0, 1)));\\r\\n+            currentOption.addValueForProcessing(opt.substring(1));\\r\\n+            currentOption.addValueForProcessing(value);\\r\\n+            currentOption = null;\\r\\n+        } else {\\r\\n+            handleLongOptionWithEqual(token);\\r\\n+        }\\r\\n+    }\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\main\java\org\apache\commons\cli\DefaultParser.java	handleToken	org.apache.commons.cli.DefaultParser.handleToken(String)	530	550	16	[{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"\""},{"authorEmail":"stoty@apache.org","authorName":"Istvan Toth","commitYear":"2021","diff":"\"@@ -1,19 +1,19 @@\\n private void handleToken(final String token) throws ParseException {\\r\\n     currentToken = token;\\r\\n     if (skipParsing) {\\r\\n         cmd.addArg(token);\\r\\n     } else if (\\\"--\\\".equals(token)) {\\r\\n         skipParsing = true;\\r\\n     } else if (currentOption != null && currentOption.acceptsArg() && isArgument(token)) {\\r\\n-        currentOption.addValueForProcessing(Util.stripLeadingAndTrailingQuotes(token));\\r\\n+        currentOption.addValueForProcessing(stripLeadingAndTrailingQuotesDefaultOn(token));\\r\\n     } else if (token.startsWith(\\\"--\\\")) {\\r\\n         handleLongOption(token);\\r\\n     } else if (token.startsWith(\\\"-\\\") && !\\\"-\\\".equals(token)) {\\r\\n         handleShortAndLongOption(token);\\r\\n     } else {\\r\\n         handleUnknownToken(token);\\r\\n     }\\r\\n     if (currentOption != null && !currentOption.acceptsArg()) {\\r\\n         currentOption = null;\\r\\n     }\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"\""},{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,19 +1,19 @@\\n-private void handleToken(String token) throws ParseException {\\r\\n+private void handleToken(final String token) throws ParseException {\\r\\n     currentToken = token;\\r\\n     if (skipParsing) {\\r\\n         cmd.addArg(token);\\r\\n     } else if (\\\"--\\\".equals(token)) {\\r\\n         skipParsing = true;\\r\\n     } else if (currentOption != null && currentOption.acceptsArg() && isArgument(token)) {\\r\\n         currentOption.addValueForProcessing(Util.stripLeadingAndTrailingQuotes(token));\\r\\n     } else if (token.startsWith(\\\"--\\\")) {\\r\\n         handleLongOption(token);\\r\\n     } else if (token.startsWith(\\\"-\\\") && !\\\"-\\\".equals(token)) {\\r\\n         handleShortAndLongOption(token);\\r\\n     } else {\\r\\n         handleUnknownToken(token);\\r\\n     }\\r\\n     if (currentOption != null && !currentOption.acceptsArg()) {\\r\\n         currentOption = null;\\r\\n     }\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"simonetripodi@apache.org","authorName":"Simone Tripodi","commitYear":"2011","diff":"\"\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2009","diff":"\"@@ -0,0 +1,19 @@\\n+private void handleToken(String token) throws ParseException {\\r\\n+    currentToken = token;\\r\\n+    if (skipParsing) {\\r\\n+        cmd.addArg(token);\\r\\n+    } else if (\\\"--\\\".equals(token)) {\\r\\n+        skipParsing = true;\\r\\n+    } else if (currentOption != null && currentOption.acceptsArg() && isArgument(token)) {\\r\\n+        currentOption.addValueForProcessing(Util.stripLeadingAndTrailingQuotes(token));\\r\\n+    } else if (token.startsWith(\\\"--\\\")) {\\r\\n+        handleLongOption(token);\\r\\n+    } else if (token.startsWith(\\\"-\\\") && !\\\"-\\\".equals(token)) {\\r\\n+        handleShortAndLongOption(token);\\r\\n+    } else {\\r\\n+        handleUnknownToken(token);\\r\\n+    }\\r\\n+    if (currentOption != null && !currentOption.acceptsArg()) {\\r\\n+        currentOption = null;\\r\\n+    }\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\main\java\org\apache\commons\cli\DefaultParser.java	handleUnknownToken	org.apache.commons.cli.DefaultParser.handleUnknownToken(String)	559	568	6	[{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"\""},{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2019","diff":"\"\""},{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,9 +1,9 @@\\n-private void handleUnknownToken(String token) throws ParseException {\\r\\n+private void handleUnknownToken(final String token) throws ParseException {\\r\\n     if (token.startsWith(\\\"-\\\") && token.length() > 1 && !stopAtNonOption) {\\r\\n         throw new UnrecognizedOptionException(\\\"Unrecognized option: \\\" + token, token);\\r\\n     }\\r\\n     cmd.addArg(token);\\r\\n     if (stopAtNonOption) {\\r\\n         skipParsing = true;\\r\\n     }\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"simonetripodi@apache.org","authorName":"Simone Tripodi","commitYear":"2011","diff":"\"\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2010","diff":"\"\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2009","diff":"\"@@ -0,0 +1,9 @@\\n+private void handleUnknownToken(String token) throws ParseException {\\r\\n+    if (token.startsWith(\\\"-\\\") && token.length() > 1 && !stopAtNonOption) {\\r\\n+        throw new UnrecognizedOptionException(\\\"Unrecognized option: \\\" + token, token);\\r\\n+    }\\r\\n+    cmd.addArg(token);\\r\\n+    if (stopAtNonOption) {\\r\\n+        skipParsing = true;\\r\\n+    }\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\main\java\org\apache\commons\cli\DefaultParser.java	isArgument	org.apache.commons.cli.DefaultParser.isArgument(String)	575	577	2	[{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"\""},{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,3 +1,3 @@\\n-private boolean isArgument(String token) {\\r\\n+private boolean isArgument(final String token) {\\r\\n     return !isOption(token) || isNegativeNumber(token);\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2009","diff":"\"@@ -0,0 +1,3 @@\\n+private boolean isArgument(String token) {\\r\\n+    return !isOption(token) || isNegativeNumber(token);\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\main\java\org\apache\commons\cli\DefaultParser.java	isJavaProperty	org.apache.commons.cli.DefaultParser.isJavaProperty(String)	582	587	4	[{"authorEmail":"psurya1967@iitkgp.ac.in","authorName":"Sruteesh","commitYear":"2023","diff":"\"@@ -1,5 +1,5 @@\\n private boolean isJavaProperty(final String token) {\\r\\n-    final String opt = token.substring(0, 1);\\r\\n+    final String opt = token.isEmpty() ? null : token.substring(0, 1);\\r\\n     final Option option = options.getOption(opt);\\r\\n     return option != null && (option.getArgs() >= 2 || option.getArgs() == Option.UNLIMITED_VALUES);\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"\""},{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,5 +1,5 @@\\n-private boolean isJavaProperty(String token) {\\r\\n+private boolean isJavaProperty(final String token) {\\r\\n     final String opt = token.substring(0, 1);\\r\\n     final Option option = options.getOption(opt);\\r\\n     return option != null && (option.getArgs() >= 2 || option.getArgs() == Option.UNLIMITED_VALUES);\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,5 +1,5 @@\\n private boolean isJavaProperty(String token) {\\r\\n-    String opt = token.substring(0, 1);\\r\\n-    Option option = options.getOption(opt);\\r\\n+    final String opt = token.substring(0, 1);\\r\\n+    final Option option = options.getOption(opt);\\r\\n     return option != null && (option.getArgs() >= 2 || option.getArgs() == Option.UNLIMITED_VALUES);\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"simonetripodi@apache.org","authorName":"Simone Tripodi","commitYear":"2011","diff":"\"\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2009","diff":"\"@@ -0,0 +1,5 @@\\n+private boolean isJavaProperty(String token) {\\r\\n+    String opt = token.substring(0, 1);\\r\\n+    Option option = options.getOption(opt);\\r\\n+    return option != null && (option.getArgs() >= 2 || option.getArgs() == Option.UNLIMITED_VALUES);\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\main\java\org\apache\commons\cli\DefaultParser.java	isLongOption	org.apache.commons.cli.DefaultParser.isLongOption(String)	594	612	10	[{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"\""},{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"\""},{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"@@ -1,14 +1,14 @@\\n private boolean isLongOption(final String token) {\\r\\n-    if (!token.startsWith(\\\"-\\\") || token.length() == 1) {\\r\\n+    if (token == null || !token.startsWith(\\\"-\\\") || token.length() == 1) {\\r\\n         return false;\\r\\n     }\\r\\n     final int pos = token.indexOf(\\\"=\\\");\\r\\n     final String t = pos == -1 ? token : token.substring(0, pos);\\r\\n     if (!getMatchingLongOptions(t).isEmpty()) {\\r\\n         return true;\\r\\n     }\\r\\n     if (getLongPrefix(token) != null && !token.startsWith(\\\"--\\\")) {\\r\\n         return true;\\r\\n     }\\r\\n     return false;\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"@@ -1,13 +1,14 @@\\n private boolean isLongOption(final String token) {\\r\\n     if (!token.startsWith(\\\"-\\\") || token.length() == 1) {\\r\\n         return false;\\r\\n     }\\r\\n     final int pos = token.indexOf(\\\"=\\\");\\r\\n     final String t = pos == -1 ? token : token.substring(0, pos);\\r\\n     if (!getMatchingLongOptions(t).isEmpty()) {\\r\\n         return true;\\r\\n-    } else if (getLongPrefix(token) != null && !token.startsWith(\\\"--\\\")) {\\r\\n+    }\\r\\n+    if (getLongPrefix(token) != null && !token.startsWith(\\\"--\\\")) {\\r\\n         return true;\\r\\n     }\\r\\n     return false;\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"rubin@raaftech.com","authorName":"Rubin Simons","commitYear":"2017","diff":"\"@@ -1,13 +1,13 @@\\n private boolean isLongOption(final String token) {\\r\\n     if (!token.startsWith(\\\"-\\\") || token.length() == 1) {\\r\\n         return false;\\r\\n     }\\r\\n     final int pos = token.indexOf(\\\"=\\\");\\r\\n     final String t = pos == -1 ? token : token.substring(0, pos);\\r\\n-    if (!options.getMatchingOptions(t).isEmpty()) {\\r\\n+    if (!getMatchingLongOptions(t).isEmpty()) {\\r\\n         return true;\\r\\n     } else if (getLongPrefix(token) != null && !token.startsWith(\\\"--\\\")) {\\r\\n         return true;\\r\\n     }\\r\\n     return false;\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,13 +1,13 @@\\n-private boolean isLongOption(String token) {\\r\\n+private boolean isLongOption(final String token) {\\r\\n     if (!token.startsWith(\\\"-\\\") || token.length() == 1) {\\r\\n         return false;\\r\\n     }\\r\\n     final int pos = token.indexOf(\\\"=\\\");\\r\\n     final String t = pos == -1 ? token : token.substring(0, pos);\\r\\n     if (!options.getMatchingOptions(t).isEmpty()) {\\r\\n         return true;\\r\\n     } else if (getLongPrefix(token) != null && !token.startsWith(\\\"--\\\")) {\\r\\n         return true;\\r\\n     }\\r\\n     return false;\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,13 +1,13 @@\\n private boolean isLongOption(String token) {\\r\\n     if (!token.startsWith(\\\"-\\\") || token.length() == 1) {\\r\\n         return false;\\r\\n     }\\r\\n-    int pos = token.indexOf(\\\"=\\\");\\r\\n-    String t = pos == -1 ? token : token.substring(0, pos);\\r\\n+    final int pos = token.indexOf(\\\"=\\\");\\r\\n+    final String t = pos == -1 ? token : token.substring(0, pos);\\r\\n     if (!options.getMatchingOptions(t).isEmpty()) {\\r\\n         return true;\\r\\n     } else if (getLongPrefix(token) != null && !token.startsWith(\\\"--\\\")) {\\r\\n         return true;\\r\\n     }\\r\\n     return false;\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"simonetripodi@apache.org","authorName":"Simone Tripodi","commitYear":"2011","diff":"\"\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2009","diff":"\"@@ -0,0 +1,13 @@\\n+private boolean isLongOption(String token) {\\r\\n+    if (!token.startsWith(\\\"-\\\") || token.length() == 1) {\\r\\n+        return false;\\r\\n+    }\\r\\n+    int pos = token.indexOf(\\\"=\\\");\\r\\n+    String t = pos == -1 ? token : token.substring(0, pos);\\r\\n+    if (!options.getMatchingOptions(t).isEmpty()) {\\r\\n+        return true;\\r\\n+    } else if (getLongPrefix(token) != null && !token.startsWith(\\\"--\\\")) {\\r\\n+        return true;\\r\\n+    }\\r\\n+    return false;\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\main\java\org\apache\commons\cli\DefaultParser.java	isNegativeNumber	org.apache.commons.cli.DefaultParser.isNegativeNumber(String)	619	626	4	[{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"\""},{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"\""},{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,8 +1,8 @@\\n-private boolean isNegativeNumber(String token) {\\r\\n+private boolean isNegativeNumber(final String token) {\\r\\n     try {\\r\\n         Double.parseDouble(token);\\r\\n         return true;\\r\\n     } catch (final NumberFormatException e) {\\r\\n         return false;\\r\\n     }\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,8 +1,8 @@\\n private boolean isNegativeNumber(String token) {\\r\\n     try {\\r\\n         Double.parseDouble(token);\\r\\n         return true;\\r\\n-    } catch (NumberFormatException e) {\\r\\n+    } catch (final NumberFormatException e) {\\r\\n         return false;\\r\\n     }\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2009","diff":"\"@@ -0,0 +1,8 @@\\n+private boolean isNegativeNumber(String token) {\\r\\n+    try {\\r\\n+        Double.parseDouble(token);\\r\\n+        return true;\\r\\n+    } catch (NumberFormatException e) {\\r\\n+        return false;\\r\\n+    }\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\main\java\org\apache\commons\cli\DefaultParser.java	isOption	org.apache.commons.cli.DefaultParser.isOption(String)	633	635	2	[{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"\""},{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,3 +1,3 @@\\n-private boolean isOption(String token) {\\r\\n+private boolean isOption(final String token) {\\r\\n     return isLongOption(token) || isShortOption(token);\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2009","diff":"\"@@ -0,0 +1,3 @@\\n+private boolean isOption(String token) {\\r\\n+    return isLongOption(token) || isShortOption(token);\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\main\java\org\apache\commons\cli\DefaultParser.java	isShortOption	org.apache.commons.cli.DefaultParser.isShortOption(String)	642	656	9	[{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"\""},{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"\""},{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"@@ -1,11 +1,11 @@\\n private boolean isShortOption(final String token) {\\r\\n-    if (!token.startsWith(\\\"-\\\") || token.length() == 1) {\\r\\n+    if (token == null || !token.startsWith(\\\"-\\\") || token.length() == 1) {\\r\\n         return false;\\r\\n     }\\r\\n     final int pos = token.indexOf(\\\"=\\\");\\r\\n     final String optName = pos == -1 ? token.substring(1) : token.substring(1, pos);\\r\\n     if (options.hasShortOption(optName)) {\\r\\n         return true;\\r\\n     }\\r\\n     return !optName.isEmpty() && options.hasShortOption(String.valueOf(optName.charAt(0)));\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"@@ -1,11 +1,11 @@\\n private boolean isShortOption(final String token) {\\r\\n     if (!token.startsWith(\\\"-\\\") || token.length() == 1) {\\r\\n         return false;\\r\\n     }\\r\\n     final int pos = token.indexOf(\\\"=\\\");\\r\\n     final String optName = pos == -1 ? token.substring(1) : token.substring(1, pos);\\r\\n     if (options.hasShortOption(optName)) {\\r\\n         return true;\\r\\n     }\\r\\n-    return optName.length() > 0 && options.hasShortOption(String.valueOf(optName.charAt(0)));\\r\\n+    return !optName.isEmpty() && options.hasShortOption(String.valueOf(optName.charAt(0)));\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,11 +1,11 @@\\n-private boolean isShortOption(String token) {\\r\\n+private boolean isShortOption(final String token) {\\r\\n     if (!token.startsWith(\\\"-\\\") || token.length() == 1) {\\r\\n         return false;\\r\\n     }\\r\\n     final int pos = token.indexOf(\\\"=\\\");\\r\\n     final String optName = pos == -1 ? token.substring(1) : token.substring(1, pos);\\r\\n     if (options.hasShortOption(optName)) {\\r\\n         return true;\\r\\n     }\\r\\n     return optName.length() > 0 && options.hasShortOption(String.valueOf(optName.charAt(0)));\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,11 +1,11 @@\\n private boolean isShortOption(String token) {\\r\\n     if (!token.startsWith(\\\"-\\\") || token.length() == 1) {\\r\\n         return false;\\r\\n     }\\r\\n-    int pos = token.indexOf(\\\"=\\\");\\r\\n-    String optName = pos == -1 ? token.substring(1) : token.substring(1, pos);\\r\\n+    final int pos = token.indexOf(\\\"=\\\");\\r\\n+    final String optName = pos == -1 ? token.substring(1) : token.substring(1, pos);\\r\\n     if (options.hasShortOption(optName)) {\\r\\n         return true;\\r\\n     }\\r\\n     return optName.length() > 0 && options.hasShortOption(String.valueOf(optName.charAt(0)));\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"britter@apache.org","authorName":"Benedikt Ritter","commitYear":"2016","diff":"\"@@ -1,8 +1,11 @@\\n private boolean isShortOption(String token) {\\r\\n     if (!token.startsWith(\\\"-\\\") || token.length() == 1) {\\r\\n         return false;\\r\\n     }\\r\\n     int pos = token.indexOf(\\\"=\\\");\\r\\n     String optName = pos == -1 ? token.substring(1) : token.substring(1, pos);\\r\\n-    return options.hasShortOption(optName);\\r\\n+    if (options.hasShortOption(optName)) {\\r\\n+        return true;\\r\\n+    }\\r\\n+    return optName.length() > 0 && options.hasShortOption(String.valueOf(optName.charAt(0)));\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"britter@apache.org","authorName":"Benedikt Ritter","commitYear":"2016","diff":"\"@@ -1,3 +1,8 @@\\n private boolean isShortOption(String token) {\\r\\n-    return token.startsWith(\\\"-\\\") && token.length() >= 2 && options.hasShortOption(token.substring(1, 2));\\r\\n+    if (!token.startsWith(\\\"-\\\") || token.length() == 1) {\\r\\n+        return false;\\r\\n+    }\\r\\n+    int pos = token.indexOf(\\\"=\\\");\\r\\n+    String optName = pos == -1 ? token.substring(1) : token.substring(1, pos);\\r\\n+    return options.hasShortOption(optName);\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2009","diff":"\"@@ -0,0 +1,3 @@\\n+private boolean isShortOption(String token) {\\r\\n+    return token.startsWith(\\\"-\\\") && token.length() >= 2 && options.hasShortOption(token.substring(1, 2));\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\main\java\org\apache\commons\cli\DefaultParser.java	parse	org.apache.commons.cli.DefaultParser.parse(Options, String[])	659	661	1	[{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2020","diff":"\"@@ -1,3 +1,4 @@\\n+@Override\\r\\n public CommandLine parse(final Options options, final String[] arguments) throws ParseException {\\r\\n     return parse(options, arguments, null);\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,3 +1,3 @@\\n-public CommandLine parse(Options options, String[] arguments) throws ParseException {\\r\\n+public CommandLine parse(final Options options, final String[] arguments) throws ParseException {\\r\\n     return parse(options, arguments, null);\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2010","diff":"\"@@ -1,3 +1,3 @@\\n public CommandLine parse(Options options, String[] arguments) throws ParseException {\\r\\n-    return parse(options, arguments, false);\\r\\n+    return parse(options, arguments, null);\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2009","diff":"\"@@ -0,0 +1,3 @@\\n+public CommandLine parse(Options options, String[] arguments) throws ParseException {\\r\\n+    return parse(options, arguments, false);\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\main\java\org\apache\commons\cli\DefaultParser.java	parse	org.apache.commons.cli.DefaultParser.parse(Options, String[], boolean)	664	666	1	[{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2020","diff":"\"@@ -1,3 +1,4 @@\\n+@Override\\r\\n public CommandLine parse(final Options options, final String[] arguments, final boolean stopAtNonOption) throws ParseException {\\r\\n     return parse(options, arguments, null, stopAtNonOption);\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,3 +1,3 @@\\n-public CommandLine parse(Options options, String[] arguments, boolean stopAtNonOption) throws ParseException {\\r\\n+public CommandLine parse(final Options options, final String[] arguments, final boolean stopAtNonOption) throws ParseException {\\r\\n     return parse(options, arguments, null, stopAtNonOption);\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2010","diff":"\"@@ -1,20 +1,3 @@\\n public CommandLine parse(Options options, String[] arguments, boolean stopAtNonOption) throws ParseException {\\r\\n-    this.options = options;\\r\\n-    this.stopAtNonOption = stopAtNonOption;\\r\\n-    skipParsing = false;\\r\\n-    currentOption = null;\\r\\n-    expectedOpts = new ArrayList(options.getRequiredOptions());\\r\\n-    for (Iterator it = options.getOptionGroups().iterator(); it.hasNext(); ) {\\r\\n-        OptionGroup group = (OptionGroup) it.next();\\r\\n-        group.setSelected(null);\\r\\n-    }\\r\\n-    cmd = new CommandLine();\\r\\n-    if (arguments != null) {\\r\\n-        for (int i = 0; i < arguments.length; i++) {\\r\\n-            handleToken(arguments[i]);\\r\\n-        }\\r\\n-    }\\r\\n-    checkRequiredArgs();\\r\\n-    checkRequiredOptions();\\r\\n-    return cmd;\\r\\n+    return parse(options, arguments, null, stopAtNonOption);\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2009","diff":"\"@@ -0,0 +1,20 @@\\n+public CommandLine parse(Options options, String[] arguments, boolean stopAtNonOption) throws ParseException {\\r\\n+    this.options = options;\\r\\n+    this.stopAtNonOption = stopAtNonOption;\\r\\n+    skipParsing = false;\\r\\n+    currentOption = null;\\r\\n+    expectedOpts = new ArrayList(options.getRequiredOptions());\\r\\n+    for (Iterator it = options.getOptionGroups().iterator(); it.hasNext(); ) {\\r\\n+        OptionGroup group = (OptionGroup) it.next();\\r\\n+        group.setSelected(null);\\r\\n+    }\\r\\n+    cmd = new CommandLine();\\r\\n+    if (arguments != null) {\\r\\n+        for (int i = 0; i < arguments.length; i++) {\\r\\n+            handleToken(arguments[i]);\\r\\n+        }\\r\\n+    }\\r\\n+    checkRequiredArgs();\\r\\n+    checkRequiredOptions();\\r\\n+    return cmd;\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\main\java\org\apache\commons\cli\DefaultParser.java	parse	org.apache.commons.cli.DefaultParser.parse(Options, String[], Properties)	678	680	1	[{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"\""},{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"\""},{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,3 +1,3 @@\\n-public CommandLine parse(Options options, String[] arguments, Properties properties) throws ParseException {\\r\\n+public CommandLine parse(final Options options, final String[] arguments, final Properties properties) throws ParseException {\\r\\n     return parse(options, arguments, properties, false);\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2010","diff":"\"@@ -0,0 +1,3 @@\\n+public CommandLine parse(Options options, String[] arguments, Properties properties) throws ParseException {\\r\\n+    return parse(options, arguments, properties, false);\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\main\java\org\apache\commons\cli\DefaultParser.java	parse	org.apache.commons.cli.DefaultParser.parse(Options, String[], Properties, boolean)	695	725	4	[{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"\""},{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"\""},{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"@@ -1,20 +1,20 @@\\n public CommandLine parse(final Options options, final String[] arguments, final Properties properties, final boolean stopAtNonOption) throws ParseException {\\r\\n     this.options = options;\\r\\n     this.stopAtNonOption = stopAtNonOption;\\r\\n     skipParsing = false;\\r\\n     currentOption = null;\\r\\n-    expectedOpts = new ArrayList(options.getRequiredOptions());\\r\\n+    expectedOpts = new ArrayList<>(options.getRequiredOptions());\\r\\n     for (final OptionGroup group : options.getOptionGroups()) {\\r\\n         group.setSelected(null);\\r\\n     }\\r\\n     cmd = new CommandLine();\\r\\n     if (arguments != null) {\\r\\n         for (final String argument : arguments) {\\r\\n             handleToken(argument);\\r\\n         }\\r\\n     }\\r\\n     checkRequiredArgs();\\r\\n     handleProperties(properties);\\r\\n     checkRequiredOptions();\\r\\n     return cmd;\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"\""},{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2019","diff":"\"\""},{"authorEmail":"britter@apache.org","authorName":"Benedikt Ritter","commitYear":"2019","diff":"\"\""},{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,20 +1,20 @@\\n-public CommandLine parse(Options options, String[] arguments, Properties properties, boolean stopAtNonOption) throws ParseException {\\r\\n+public CommandLine parse(final Options options, final String[] arguments, final Properties properties, final boolean stopAtNonOption) throws ParseException {\\r\\n     this.options = options;\\r\\n     this.stopAtNonOption = stopAtNonOption;\\r\\n     skipParsing = false;\\r\\n     currentOption = null;\\r\\n     expectedOpts = new ArrayList(options.getRequiredOptions());\\r\\n     for (final OptionGroup group : options.getOptionGroups()) {\\r\\n         group.setSelected(null);\\r\\n     }\\r\\n     cmd = new CommandLine();\\r\\n     if (arguments != null) {\\r\\n         for (final String argument : arguments) {\\r\\n             handleToken(argument);\\r\\n         }\\r\\n     }\\r\\n     checkRequiredArgs();\\r\\n     handleProperties(properties);\\r\\n     checkRequiredOptions();\\r\\n     return cmd;\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,20 +1,20 @@\\n public CommandLine parse(Options options, String[] arguments, Properties properties, boolean stopAtNonOption) throws ParseException {\\r\\n     this.options = options;\\r\\n     this.stopAtNonOption = stopAtNonOption;\\r\\n     skipParsing = false;\\r\\n     currentOption = null;\\r\\n     expectedOpts = new ArrayList(options.getRequiredOptions());\\r\\n-    for (OptionGroup group : options.getOptionGroups()) {\\r\\n+    for (final OptionGroup group : options.getOptionGroups()) {\\r\\n         group.setSelected(null);\\r\\n     }\\r\\n     cmd = new CommandLine();\\r\\n     if (arguments != null) {\\r\\n-        for (String argument : arguments) {\\r\\n+        for (final String argument : arguments) {\\r\\n             handleToken(argument);\\r\\n         }\\r\\n     }\\r\\n     checkRequiredArgs();\\r\\n     handleProperties(properties);\\r\\n     checkRequiredOptions();\\r\\n     return cmd;\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"simonetripodi@apache.org","authorName":"Simone Tripodi","commitYear":"2011","diff":"\"\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2011","diff":"\"@@ -1,21 +1,20 @@\\n public CommandLine parse(Options options, String[] arguments, Properties properties, boolean stopAtNonOption) throws ParseException {\\r\\n     this.options = options;\\r\\n     this.stopAtNonOption = stopAtNonOption;\\r\\n     skipParsing = false;\\r\\n     currentOption = null;\\r\\n     expectedOpts = new ArrayList(options.getRequiredOptions());\\r\\n-    for (Iterator it = options.getOptionGroups().iterator(); it.hasNext(); ) {\\r\\n-        OptionGroup group = (OptionGroup) it.next();\\r\\n+    for (OptionGroup group : options.getOptionGroups()) {\\r\\n         group.setSelected(null);\\r\\n     }\\r\\n     cmd = new CommandLine();\\r\\n     if (arguments != null) {\\r\\n-        for (int i = 0; i < arguments.length; i++) {\\r\\n-            handleToken(arguments[i]);\\r\\n+        for (String argument : arguments) {\\r\\n+            handleToken(argument);\\r\\n         }\\r\\n     }\\r\\n     checkRequiredArgs();\\r\\n     handleProperties(properties);\\r\\n     checkRequiredOptions();\\r\\n     return cmd;\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2010","diff":"\"@@ -0,0 +1,21 @@\\n+public CommandLine parse(Options options, String[] arguments, Properties properties, boolean stopAtNonOption) throws ParseException {\\r\\n+    this.options = options;\\r\\n+    this.stopAtNonOption = stopAtNonOption;\\r\\n+    skipParsing = false;\\r\\n+    currentOption = null;\\r\\n+    expectedOpts = new ArrayList(options.getRequiredOptions());\\r\\n+    for (Iterator it = options.getOptionGroups().iterator(); it.hasNext(); ) {\\r\\n+        OptionGroup group = (OptionGroup) it.next();\\r\\n+        group.setSelected(null);\\r\\n+    }\\r\\n+    cmd = new CommandLine();\\r\\n+    if (arguments != null) {\\r\\n+        for (int i = 0; i < arguments.length; i++) {\\r\\n+            handleToken(arguments[i]);\\r\\n+        }\\r\\n+    }\\r\\n+    checkRequiredArgs();\\r\\n+    handleProperties(properties);\\r\\n+    checkRequiredOptions();\\r\\n+    return cmd;\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\main\java\org\apache\commons\cli\DefaultParser.java	stripLeadingAndTrailingQuotesDefaultOff	org.apache.commons.cli.DefaultParser.stripLeadingAndTrailingQuotesDefaultOff(String)	734	739	4	[{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"@@ -1,7 +1,6 @@\\n private String stripLeadingAndTrailingQuotesDefaultOff(final String token) {\\r\\n     if (stripLeadingAndTrailingQuotes != null && stripLeadingAndTrailingQuotes) {\\r\\n         return Util.stripLeadingAndTrailingQuotes(token);\\r\\n-    } else {\\r\\n-        return token;\\r\\n     }\\r\\n+    return token;\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"\""},{"authorEmail":"stoty@apache.org","authorName":"Istvan Toth","commitYear":"2021","diff":"\"@@ -0,0 +1,7 @@\\n+private String stripLeadingAndTrailingQuotesDefaultOff(final String token) {\\r\\n+    if (stripLeadingAndTrailingQuotes != null && stripLeadingAndTrailingQuotes) {\\r\\n+        return Util.stripLeadingAndTrailingQuotes(token);\\r\\n+    } else {\\r\\n+        return token;\\r\\n+    }\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\main\java\org\apache\commons\cli\DefaultParser.java	stripLeadingAndTrailingQuotesDefaultOn	org.apache.commons.cli.DefaultParser.stripLeadingAndTrailingQuotesDefaultOn(String)	748	753	4	[{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"@@ -1,7 +1,6 @@\\n private String stripLeadingAndTrailingQuotesDefaultOn(final String token) {\\r\\n     if (stripLeadingAndTrailingQuotes == null || stripLeadingAndTrailingQuotes) {\\r\\n         return Util.stripLeadingAndTrailingQuotes(token);\\r\\n-    } else {\\r\\n-        return token;\\r\\n     }\\r\\n+    return token;\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"\""},{"authorEmail":"stoty@apache.org","authorName":"Istvan Toth","commitYear":"2021","diff":"\"@@ -0,0 +1,7 @@\\n+private String stripLeadingAndTrailingQuotesDefaultOn(final String token) {\\r\\n+    if (stripLeadingAndTrailingQuotes == null || stripLeadingAndTrailingQuotes) {\\r\\n+        return Util.stripLeadingAndTrailingQuotes(token);\\r\\n+    } else {\\r\\n+        return token;\\r\\n+    }\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\main\java\org\apache\commons\cli\DefaultParser.java	updateRequiredOptions	org.apache.commons.cli.DefaultParser.updateRequiredOptions(Option)	760	775	4	[{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"\""},{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,12 +1,12 @@\\n-private void updateRequiredOptions(Option option) throws AlreadySelectedException {\\r\\n+private void updateRequiredOptions(final Option option) throws AlreadySelectedException {\\r\\n     if (option.isRequired()) {\\r\\n         expectedOpts.remove(option.getKey());\\r\\n     }\\r\\n     if (options.getOptionGroup(option) != null) {\\r\\n         final OptionGroup group = options.getOptionGroup(option);\\r\\n         if (group.isRequired()) {\\r\\n             expectedOpts.remove(group);\\r\\n         }\\r\\n         group.setSelected(option);\\r\\n     }\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,12 +1,12 @@\\n private void updateRequiredOptions(Option option) throws AlreadySelectedException {\\r\\n     if (option.isRequired()) {\\r\\n         expectedOpts.remove(option.getKey());\\r\\n     }\\r\\n     if (options.getOptionGroup(option) != null) {\\r\\n-        OptionGroup group = options.getOptionGroup(option);\\r\\n+        final OptionGroup group = options.getOptionGroup(option);\\r\\n         if (group.isRequired()) {\\r\\n             expectedOpts.remove(group);\\r\\n         }\\r\\n         group.setSelected(option);\\r\\n     }\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2009","diff":"\"@@ -0,0 +1,12 @@\\n+private void updateRequiredOptions(Option option) throws AlreadySelectedException {\\r\\n+    if (option.isRequired()) {\\r\\n+        expectedOpts.remove(option.getKey());\\r\\n+    }\\r\\n+    if (options.getOptionGroup(option) != null) {\\r\\n+        OptionGroup group = options.getOptionGroup(option);\\r\\n+        if (group.isRequired()) {\\r\\n+            expectedOpts.remove(group);\\r\\n+        }\\r\\n+        group.setSelected(option);\\r\\n+    }\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\main\java\org\apache\commons\cli\GnuParser.java	flatten	org.apache.commons.cli.GnuParser.flatten(Options, String[], boolean)	46	88	17	[{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"\""},{"authorEmail":"arturobernalg@gmail.com","authorName":"Arturo Bernal","commitYear":"2021","diff":"\"@@ -1,36 +1,36 @@\\n @Override\\r\\n protected String[] flatten(final Options options, final String[] arguments, final boolean stopAtNonOption) {\\r\\n     final List<String> tokens = new ArrayList<>();\\r\\n     boolean eatTheRest = false;\\r\\n     for (int i = 0; i < arguments.length; i++) {\\r\\n         final String arg = arguments[i];\\r\\n         if (\\\"--\\\".equals(arg)) {\\r\\n             eatTheRest = true;\\r\\n             tokens.add(\\\"--\\\");\\r\\n         } else if (\\\"-\\\".equals(arg)) {\\r\\n             tokens.add(\\\"-\\\");\\r\\n         } else if (arg.startsWith(\\\"-\\\")) {\\r\\n             final String opt = Util.stripLeadingHyphens(arg);\\r\\n             if (options.hasOption(opt)) {\\r\\n                 tokens.add(arg);\\r\\n             } else if (opt.indexOf('=') != -1 && options.hasOption(opt.substring(0, opt.indexOf('=')))) {\\r\\n                 tokens.add(arg.substring(0, arg.indexOf('=')));\\r\\n                 tokens.add(arg.substring(arg.indexOf('=') + 1));\\r\\n             } else if (options.hasOption(arg.substring(0, 2))) {\\r\\n                 tokens.add(arg.substring(0, 2));\\r\\n                 tokens.add(arg.substring(2));\\r\\n             } else {\\r\\n                 eatTheRest = stopAtNonOption;\\r\\n                 tokens.add(arg);\\r\\n             }\\r\\n         } else {\\r\\n             tokens.add(arg);\\r\\n         }\\r\\n         if (eatTheRest) {\\r\\n             for (i++; i < arguments.length; i++) {\\r\\n                 tokens.add(arguments[i]);\\r\\n             }\\r\\n         }\\r\\n     }\\r\\n-    return tokens.toArray(new String[tokens.size()]);\\r\\n+    return tokens.toArray(Util.EMPTY_STRING_ARRAY);\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"\""},{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"@@ -1,38 +1,36 @@\\n @Override\\r\\n protected String[] flatten(final Options options, final String[] arguments, final boolean stopAtNonOption) {\\r\\n     final List<String> tokens = new ArrayList<>();\\r\\n     boolean eatTheRest = false;\\r\\n     for (int i = 0; i < arguments.length; i++) {\\r\\n         final String arg = arguments[i];\\r\\n         if (\\\"--\\\".equals(arg)) {\\r\\n             eatTheRest = true;\\r\\n             tokens.add(\\\"--\\\");\\r\\n         } else if (\\\"-\\\".equals(arg)) {\\r\\n             tokens.add(\\\"-\\\");\\r\\n         } else if (arg.startsWith(\\\"-\\\")) {\\r\\n             final String opt = Util.stripLeadingHyphens(arg);\\r\\n             if (options.hasOption(opt)) {\\r\\n                 tokens.add(arg);\\r\\n+            } else if (opt.indexOf('=') != -1 && options.hasOption(opt.substring(0, opt.indexOf('=')))) {\\r\\n+                tokens.add(arg.substring(0, arg.indexOf('=')));\\r\\n+                tokens.add(arg.substring(arg.indexOf('=') + 1));\\r\\n+            } else if (options.hasOption(arg.substring(0, 2))) {\\r\\n+                tokens.add(arg.substring(0, 2));\\r\\n+                tokens.add(arg.substring(2));\\r\\n             } else {\\r\\n-                if (opt.indexOf('=') != -1 && options.hasOption(opt.substring(0, opt.indexOf('=')))) {\\r\\n-                    tokens.add(arg.substring(0, arg.indexOf('=')));\\r\\n-                    tokens.add(arg.substring(arg.indexOf('=') + 1));\\r\\n-                } else if (options.hasOption(arg.substring(0, 2))) {\\r\\n-                    tokens.add(arg.substring(0, 2));\\r\\n-                    tokens.add(arg.substring(2));\\r\\n-                } else {\\r\\n-                    eatTheRest = stopAtNonOption;\\r\\n-                    tokens.add(arg);\\r\\n-                }\\r\\n+                eatTheRest = stopAtNonOption;\\r\\n+                tokens.add(arg);\\r\\n             }\\r\\n         } else {\\r\\n             tokens.add(arg);\\r\\n         }\\r\\n         if (eatTheRest) {\\r\\n             for (i++; i < arguments.length; i++) {\\r\\n                 tokens.add(arguments[i]);\\r\\n             }\\r\\n         }\\r\\n     }\\r\\n     return tokens.toArray(new String[tokens.size()]);\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2020","diff":"\"@@ -1,38 +1,38 @@\\n @Override\\r\\n protected String[] flatten(final Options options, final String[] arguments, final boolean stopAtNonOption) {\\r\\n-    final List<String> tokens = new ArrayList<String>();\\r\\n+    final List<String> tokens = new ArrayList<>();\\r\\n     boolean eatTheRest = false;\\r\\n     for (int i = 0; i < arguments.length; i++) {\\r\\n         final String arg = arguments[i];\\r\\n         if (\\\"--\\\".equals(arg)) {\\r\\n             eatTheRest = true;\\r\\n             tokens.add(\\\"--\\\");\\r\\n         } else if (\\\"-\\\".equals(arg)) {\\r\\n             tokens.add(\\\"-\\\");\\r\\n         } else if (arg.startsWith(\\\"-\\\")) {\\r\\n             final String opt = Util.stripLeadingHyphens(arg);\\r\\n             if (options.hasOption(opt)) {\\r\\n                 tokens.add(arg);\\r\\n             } else {\\r\\n                 if (opt.indexOf('=') != -1 && options.hasOption(opt.substring(0, opt.indexOf('=')))) {\\r\\n                     tokens.add(arg.substring(0, arg.indexOf('=')));\\r\\n                     tokens.add(arg.substring(arg.indexOf('=') + 1));\\r\\n                 } else if (options.hasOption(arg.substring(0, 2))) {\\r\\n                     tokens.add(arg.substring(0, 2));\\r\\n                     tokens.add(arg.substring(2));\\r\\n                 } else {\\r\\n                     eatTheRest = stopAtNonOption;\\r\\n                     tokens.add(arg);\\r\\n                 }\\r\\n             }\\r\\n         } else {\\r\\n             tokens.add(arg);\\r\\n         }\\r\\n         if (eatTheRest) {\\r\\n             for (i++; i < arguments.length; i++) {\\r\\n                 tokens.add(arguments[i]);\\r\\n             }\\r\\n         }\\r\\n     }\\r\\n     return tokens.toArray(new String[tokens.size()]);\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,38 +1,38 @@\\n @Override\\r\\n-protected String[] flatten(Options options, String[] arguments, boolean stopAtNonOption) {\\r\\n+protected String[] flatten(final Options options, final String[] arguments, final boolean stopAtNonOption) {\\r\\n     final List<String> tokens = new ArrayList<String>();\\r\\n     boolean eatTheRest = false;\\r\\n     for (int i = 0; i < arguments.length; i++) {\\r\\n         final String arg = arguments[i];\\r\\n         if (\\\"--\\\".equals(arg)) {\\r\\n             eatTheRest = true;\\r\\n             tokens.add(\\\"--\\\");\\r\\n         } else if (\\\"-\\\".equals(arg)) {\\r\\n             tokens.add(\\\"-\\\");\\r\\n         } else if (arg.startsWith(\\\"-\\\")) {\\r\\n             final String opt = Util.stripLeadingHyphens(arg);\\r\\n             if (options.hasOption(opt)) {\\r\\n                 tokens.add(arg);\\r\\n             } else {\\r\\n                 if (opt.indexOf('=') != -1 && options.hasOption(opt.substring(0, opt.indexOf('=')))) {\\r\\n                     tokens.add(arg.substring(0, arg.indexOf('=')));\\r\\n                     tokens.add(arg.substring(arg.indexOf('=') + 1));\\r\\n                 } else if (options.hasOption(arg.substring(0, 2))) {\\r\\n                     tokens.add(arg.substring(0, 2));\\r\\n                     tokens.add(arg.substring(2));\\r\\n                 } else {\\r\\n                     eatTheRest = stopAtNonOption;\\r\\n                     tokens.add(arg);\\r\\n                 }\\r\\n             }\\r\\n         } else {\\r\\n             tokens.add(arg);\\r\\n         }\\r\\n         if (eatTheRest) {\\r\\n             for (i++; i < arguments.length; i++) {\\r\\n                 tokens.add(arguments[i]);\\r\\n             }\\r\\n         }\\r\\n     }\\r\\n     return tokens.toArray(new String[tokens.size()]);\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,38 +1,38 @@\\n @Override\\r\\n protected String[] flatten(Options options, String[] arguments, boolean stopAtNonOption) {\\r\\n-    List<String> tokens = new ArrayList<String>();\\r\\n+    final List<String> tokens = new ArrayList<String>();\\r\\n     boolean eatTheRest = false;\\r\\n     for (int i = 0; i < arguments.length; i++) {\\r\\n-        String arg = arguments[i];\\r\\n+        final String arg = arguments[i];\\r\\n         if (\\\"--\\\".equals(arg)) {\\r\\n             eatTheRest = true;\\r\\n             tokens.add(\\\"--\\\");\\r\\n         } else if (\\\"-\\\".equals(arg)) {\\r\\n             tokens.add(\\\"-\\\");\\r\\n         } else if (arg.startsWith(\\\"-\\\")) {\\r\\n-            String opt = Util.stripLeadingHyphens(arg);\\r\\n+            final String opt = Util.stripLeadingHyphens(arg);\\r\\n             if (options.hasOption(opt)) {\\r\\n                 tokens.add(arg);\\r\\n             } else {\\r\\n                 if (opt.indexOf('=') != -1 && options.hasOption(opt.substring(0, opt.indexOf('=')))) {\\r\\n                     tokens.add(arg.substring(0, arg.indexOf('=')));\\r\\n                     tokens.add(arg.substring(arg.indexOf('=') + 1));\\r\\n                 } else if (options.hasOption(arg.substring(0, 2))) {\\r\\n                     tokens.add(arg.substring(0, 2));\\r\\n                     tokens.add(arg.substring(2));\\r\\n                 } else {\\r\\n                     eatTheRest = stopAtNonOption;\\r\\n                     tokens.add(arg);\\r\\n                 }\\r\\n             }\\r\\n         } else {\\r\\n             tokens.add(arg);\\r\\n         }\\r\\n         if (eatTheRest) {\\r\\n             for (i++; i < arguments.length; i++) {\\r\\n                 tokens.add(arguments[i]);\\r\\n             }\\r\\n         }\\r\\n     }\\r\\n     return tokens.toArray(new String[tokens.size()]);\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"tn@apache.org","authorName":"Thomas Neidhart","commitYear":"2013","diff":"\"\""},{"authorEmail":"sebb@apache.org","authorName":"Sebastian Bazley","commitYear":"2013","diff":"\"@@ -1,37 +1,38 @@\\n+@Override\\r\\n protected String[] flatten(Options options, String[] arguments, boolean stopAtNonOption) {\\r\\n     List<String> tokens = new ArrayList<String>();\\r\\n     boolean eatTheRest = false;\\r\\n     for (int i = 0; i < arguments.length; i++) {\\r\\n         String arg = arguments[i];\\r\\n         if (\\\"--\\\".equals(arg)) {\\r\\n             eatTheRest = true;\\r\\n             tokens.add(\\\"--\\\");\\r\\n         } else if (\\\"-\\\".equals(arg)) {\\r\\n             tokens.add(\\\"-\\\");\\r\\n         } else if (arg.startsWith(\\\"-\\\")) {\\r\\n             String opt = Util.stripLeadingHyphens(arg);\\r\\n             if (options.hasOption(opt)) {\\r\\n                 tokens.add(arg);\\r\\n             } else {\\r\\n                 if (opt.indexOf('=') != -1 && options.hasOption(opt.substring(0, opt.indexOf('=')))) {\\r\\n                     tokens.add(arg.substring(0, arg.indexOf('=')));\\r\\n                     tokens.add(arg.substring(arg.indexOf('=') + 1));\\r\\n                 } else if (options.hasOption(arg.substring(0, 2))) {\\r\\n                     tokens.add(arg.substring(0, 2));\\r\\n                     tokens.add(arg.substring(2));\\r\\n                 } else {\\r\\n                     eatTheRest = stopAtNonOption;\\r\\n                     tokens.add(arg);\\r\\n                 }\\r\\n             }\\r\\n         } else {\\r\\n             tokens.add(arg);\\r\\n         }\\r\\n         if (eatTheRest) {\\r\\n             for (i++; i < arguments.length; i++) {\\r\\n                 tokens.add(arguments[i]);\\r\\n             }\\r\\n         }\\r\\n     }\\r\\n     return tokens.toArray(new String[tokens.size()]);\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2012","diff":"\"@@ -1,37 +1,37 @@\\n protected String[] flatten(Options options, String[] arguments, boolean stopAtNonOption) {\\r\\n-    List tokens = new ArrayList();\\r\\n+    List<String> tokens = new ArrayList<String>();\\r\\n     boolean eatTheRest = false;\\r\\n     for (int i = 0; i < arguments.length; i++) {\\r\\n         String arg = arguments[i];\\r\\n         if (\\\"--\\\".equals(arg)) {\\r\\n             eatTheRest = true;\\r\\n             tokens.add(\\\"--\\\");\\r\\n         } else if (\\\"-\\\".equals(arg)) {\\r\\n             tokens.add(\\\"-\\\");\\r\\n         } else if (arg.startsWith(\\\"-\\\")) {\\r\\n             String opt = Util.stripLeadingHyphens(arg);\\r\\n             if (options.hasOption(opt)) {\\r\\n                 tokens.add(arg);\\r\\n             } else {\\r\\n                 if (opt.indexOf('=') != -1 && options.hasOption(opt.substring(0, opt.indexOf('=')))) {\\r\\n                     tokens.add(arg.substring(0, arg.indexOf('=')));\\r\\n                     tokens.add(arg.substring(arg.indexOf('=') + 1));\\r\\n                 } else if (options.hasOption(arg.substring(0, 2))) {\\r\\n                     tokens.add(arg.substring(0, 2));\\r\\n                     tokens.add(arg.substring(2));\\r\\n                 } else {\\r\\n                     eatTheRest = stopAtNonOption;\\r\\n                     tokens.add(arg);\\r\\n                 }\\r\\n             }\\r\\n         } else {\\r\\n             tokens.add(arg);\\r\\n         }\\r\\n         if (eatTheRest) {\\r\\n             for (i++; i < arguments.length; i++) {\\r\\n                 tokens.add(arguments[i]);\\r\\n             }\\r\\n         }\\r\\n     }\\r\\n-    return (String[]) tokens.toArray(new String[tokens.size()]);\\r\\n+    return tokens.toArray(new String[tokens.size()]);\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2008","diff":"\"\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2008","diff":"\"@@ -1,37 +1,37 @@\\n protected String[] flatten(Options options, String[] arguments, boolean stopAtNonOption) {\\r\\n     List tokens = new ArrayList();\\r\\n     boolean eatTheRest = false;\\r\\n     for (int i = 0; i < arguments.length; i++) {\\r\\n         String arg = arguments[i];\\r\\n         if (\\\"--\\\".equals(arg)) {\\r\\n             eatTheRest = true;\\r\\n             tokens.add(\\\"--\\\");\\r\\n         } else if (\\\"-\\\".equals(arg)) {\\r\\n             tokens.add(\\\"-\\\");\\r\\n         } else if (arg.startsWith(\\\"-\\\")) {\\r\\n-            Option option = options.getOption(arg);\\r\\n-            String head = arg.substring(0, 2);\\r\\n-            String tail = arg.substring(2);\\r\\n-            if (option == null) {\\r\\n-                Option specialOption = options.getOption(head);\\r\\n-                if (specialOption != null) {\\r\\n-                    tokens.add(head);\\r\\n-                    tokens.add(tail);\\r\\n+            String opt = Util.stripLeadingHyphens(arg);\\r\\n+            if (options.hasOption(opt)) {\\r\\n+                tokens.add(arg);\\r\\n+            } else {\\r\\n+                if (opt.indexOf('=') != -1 && options.hasOption(opt.substring(0, opt.indexOf('=')))) {\\r\\n+                    tokens.add(arg.substring(0, arg.indexOf('=')));\\r\\n+                    tokens.add(arg.substring(arg.indexOf('=') + 1));\\r\\n+                } else if (options.hasOption(arg.substring(0, 2))) {\\r\\n+                    tokens.add(arg.substring(0, 2));\\r\\n+                    tokens.add(arg.substring(2));\\r\\n                 } else {\\r\\n                     eatTheRest = stopAtNonOption;\\r\\n                     tokens.add(arg);\\r\\n                 }\\r\\n-            } else {\\r\\n-                tokens.add(arg);\\r\\n             }\\r\\n         } else {\\r\\n             tokens.add(arg);\\r\\n         }\\r\\n         if (eatTheRest) {\\r\\n             for (i++; i < arguments.length; i++) {\\r\\n                 tokens.add(arguments[i]);\\r\\n             }\\r\\n         }\\r\\n     }\\r\\n     return (String[]) tokens.toArray(new String[tokens.size()]);\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2008","diff":"\"@@ -1,63 +1,37 @@\\n protected String[] flatten(Options options, String[] arguments, boolean stopAtNonOption) {\\r\\n     List tokens = new ArrayList();\\r\\n     boolean eatTheRest = false;\\r\\n-    Option currentOption = null;\\r\\n     for (int i = 0; i < arguments.length; i++) {\\r\\n-        if (\\\"--\\\".equals(arguments[i])) {\\r\\n+        String arg = arguments[i];\\r\\n+        if (\\\"--\\\".equals(arg)) {\\r\\n             eatTheRest = true;\\r\\n             tokens.add(\\\"--\\\");\\r\\n-        } else if (\\\"-\\\".equals(arguments[i])) {\\r\\n+        } else if (\\\"-\\\".equals(arg)) {\\r\\n             tokens.add(\\\"-\\\");\\r\\n-        } else if (arguments[i].startsWith(\\\"-\\\")) {\\r\\n-            Option option = options.getOption(arguments[i]);\\r\\n+        } else if (arg.startsWith(\\\"-\\\")) {\\r\\n+            Option option = options.getOption(arg);\\r\\n+            String head = arg.substring(0, 2);\\r\\n+            String tail = arg.substring(2);\\r\\n             if (option == null) {\\r\\n-                Option specialOption = options.getOption(arguments[i].substring(0, 2));\\r\\n+                Option specialOption = options.getOption(head);\\r\\n                 if (specialOption != null) {\\r\\n-                    tokens.add(arguments[i].substring(0, 2));\\r\\n-                    tokens.add(arguments[i].substring(2));\\r\\n-                } else if (stopAtNonOption) {\\r\\n-                    eatTheRest = true;\\r\\n-                    tokens.add(arguments[i]);\\r\\n+                    tokens.add(head);\\r\\n+                    tokens.add(tail);\\r\\n                 } else {\\r\\n-                    tokens.add(arguments[i]);\\r\\n+                    eatTheRest = stopAtNonOption;\\r\\n+                    tokens.add(arg);\\r\\n                 }\\r\\n             } else {\\r\\n-                currentOption = option;\\r\\n-                Option specialOption = options.getOption(arguments[i].substring(0, 2));\\r\\n-                if ((specialOption != null) && (option == null)) {\\r\\n-                    tokens.add(arguments[i].substring(0, 2));\\r\\n-                    tokens.add(arguments[i].substring(2));\\r\\n-                } else if ((currentOption != null) && currentOption.hasArg()) {\\r\\n-                    if (currentOption.hasArg()) {\\r\\n-                        tokens.add(arguments[i]);\\r\\n-                        currentOption = null;\\r\\n-                    } else if (currentOption.hasArgs()) {\\r\\n-                        tokens.add(arguments[i]);\\r\\n-                    } else if (stopAtNonOption) {\\r\\n-                        eatTheRest = true;\\r\\n-                        tokens.add(\\\"--\\\");\\r\\n-                        tokens.add(arguments[i]);\\r\\n-                    } else {\\r\\n-                        tokens.add(arguments[i]);\\r\\n-                    }\\r\\n-                } else if (currentOption != null) {\\r\\n-                    tokens.add(arguments[i]);\\r\\n-                } else if (stopAtNonOption) {\\r\\n-                    eatTheRest = true;\\r\\n-                    tokens.add(\\\"--\\\");\\r\\n-                    tokens.add(arguments[i]);\\r\\n-                } else {\\r\\n-                    tokens.add(arguments[i]);\\r\\n-                }\\r\\n+                tokens.add(arg);\\r\\n             }\\r\\n         } else {\\r\\n-            tokens.add(arguments[i]);\\r\\n+            tokens.add(arg);\\r\\n         }\\r\\n         if (eatTheRest) {\\r\\n             for (i++; i < arguments.length; i++) {\\r\\n                 tokens.add(arguments[i]);\\r\\n             }\\r\\n         }\\r\\n     }\\r\\n     return (String[]) tokens.toArray(new String[tokens.size()]);\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2008","diff":"\"@@ -1,63 +1,63 @@\\n protected String[] flatten(Options options, String[] arguments, boolean stopAtNonOption) {\\r\\n-    init();\\r\\n+    List tokens = new ArrayList();\\r\\n     boolean eatTheRest = false;\\r\\n     Option currentOption = null;\\r\\n     for (int i = 0; i < arguments.length; i++) {\\r\\n         if (\\\"--\\\".equals(arguments[i])) {\\r\\n             eatTheRest = true;\\r\\n             tokens.add(\\\"--\\\");\\r\\n         } else if (\\\"-\\\".equals(arguments[i])) {\\r\\n             tokens.add(\\\"-\\\");\\r\\n         } else if (arguments[i].startsWith(\\\"-\\\")) {\\r\\n             Option option = options.getOption(arguments[i]);\\r\\n             if (option == null) {\\r\\n                 Option specialOption = options.getOption(arguments[i].substring(0, 2));\\r\\n                 if (specialOption != null) {\\r\\n                     tokens.add(arguments[i].substring(0, 2));\\r\\n                     tokens.add(arguments[i].substring(2));\\r\\n                 } else if (stopAtNonOption) {\\r\\n                     eatTheRest = true;\\r\\n                     tokens.add(arguments[i]);\\r\\n                 } else {\\r\\n                     tokens.add(arguments[i]);\\r\\n                 }\\r\\n             } else {\\r\\n                 currentOption = option;\\r\\n                 Option specialOption = options.getOption(arguments[i].substring(0, 2));\\r\\n                 if ((specialOption != null) && (option == null)) {\\r\\n                     tokens.add(arguments[i].substring(0, 2));\\r\\n                     tokens.add(arguments[i].substring(2));\\r\\n                 } else if ((currentOption != null) && currentOption.hasArg()) {\\r\\n                     if (currentOption.hasArg()) {\\r\\n                         tokens.add(arguments[i]);\\r\\n                         currentOption = null;\\r\\n                     } else if (currentOption.hasArgs()) {\\r\\n                         tokens.add(arguments[i]);\\r\\n                     } else if (stopAtNonOption) {\\r\\n                         eatTheRest = true;\\r\\n                         tokens.add(\\\"--\\\");\\r\\n                         tokens.add(arguments[i]);\\r\\n                     } else {\\r\\n                         tokens.add(arguments[i]);\\r\\n                     }\\r\\n                 } else if (currentOption != null) {\\r\\n                     tokens.add(arguments[i]);\\r\\n                 } else if (stopAtNonOption) {\\r\\n                     eatTheRest = true;\\r\\n                     tokens.add(\\\"--\\\");\\r\\n                     tokens.add(arguments[i]);\\r\\n                 } else {\\r\\n                     tokens.add(arguments[i]);\\r\\n                 }\\r\\n             }\\r\\n         } else {\\r\\n             tokens.add(arguments[i]);\\r\\n         }\\r\\n         if (eatTheRest) {\\r\\n             for (i++; i < arguments.length; i++) {\\r\\n                 tokens.add(arguments[i]);\\r\\n             }\\r\\n         }\\r\\n     }\\r\\n     return (String[]) tokens.toArray(new String[tokens.size()]);\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"bayard@apache.org","authorName":"Henri Yandell","commitYear":"2007","diff":"\"@@ -1,63 +1,63 @@\\n protected String[] flatten(Options options, String[] arguments, boolean stopAtNonOption) {\\r\\n     init();\\r\\n     boolean eatTheRest = false;\\r\\n     Option currentOption = null;\\r\\n     for (int i = 0; i < arguments.length; i++) {\\r\\n         if (\\\"--\\\".equals(arguments[i])) {\\r\\n             eatTheRest = true;\\r\\n             tokens.add(\\\"--\\\");\\r\\n         } else if (\\\"-\\\".equals(arguments[i])) {\\r\\n             tokens.add(\\\"-\\\");\\r\\n         } else if (arguments[i].startsWith(\\\"-\\\")) {\\r\\n             Option option = options.getOption(arguments[i]);\\r\\n             if (option == null) {\\r\\n                 Option specialOption = options.getOption(arguments[i].substring(0, 2));\\r\\n                 if (specialOption != null) {\\r\\n                     tokens.add(arguments[i].substring(0, 2));\\r\\n                     tokens.add(arguments[i].substring(2));\\r\\n                 } else if (stopAtNonOption) {\\r\\n                     eatTheRest = true;\\r\\n                     tokens.add(arguments[i]);\\r\\n                 } else {\\r\\n                     tokens.add(arguments[i]);\\r\\n                 }\\r\\n             } else {\\r\\n                 currentOption = option;\\r\\n                 Option specialOption = options.getOption(arguments[i].substring(0, 2));\\r\\n                 if ((specialOption != null) && (option == null)) {\\r\\n                     tokens.add(arguments[i].substring(0, 2));\\r\\n                     tokens.add(arguments[i].substring(2));\\r\\n                 } else if ((currentOption != null) && currentOption.hasArg()) {\\r\\n                     if (currentOption.hasArg()) {\\r\\n                         tokens.add(arguments[i]);\\r\\n                         currentOption = null;\\r\\n                     } else if (currentOption.hasArgs()) {\\r\\n                         tokens.add(arguments[i]);\\r\\n                     } else if (stopAtNonOption) {\\r\\n                         eatTheRest = true;\\r\\n                         tokens.add(\\\"--\\\");\\r\\n                         tokens.add(arguments[i]);\\r\\n                     } else {\\r\\n                         tokens.add(arguments[i]);\\r\\n                     }\\r\\n                 } else if (currentOption != null) {\\r\\n                     tokens.add(arguments[i]);\\r\\n                 } else if (stopAtNonOption) {\\r\\n                     eatTheRest = true;\\r\\n                     tokens.add(\\\"--\\\");\\r\\n                     tokens.add(arguments[i]);\\r\\n                 } else {\\r\\n                     tokens.add(arguments[i]);\\r\\n                 }\\r\\n             }\\r\\n         } else {\\r\\n             tokens.add(arguments[i]);\\r\\n         }\\r\\n         if (eatTheRest) {\\r\\n             for (i++; i < arguments.length; i++) {\\r\\n                 tokens.add(arguments[i]);\\r\\n             }\\r\\n         }\\r\\n     }\\r\\n-    return (String[]) tokens.toArray(new String[] {});\\r\\n+    return (String[]) tokens.toArray(new String[tokens.size()]);\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -1,63 +1,63 @@\\n protected String[] flatten(Options options, String[] arguments, boolean stopAtNonOption) {\\r\\n     init();\\r\\n     boolean eatTheRest = false;\\r\\n     Option currentOption = null;\\r\\n     for (int i = 0; i < arguments.length; i++) {\\r\\n         if (\\\"--\\\".equals(arguments[i])) {\\r\\n             eatTheRest = true;\\r\\n             tokens.add(\\\"--\\\");\\r\\n         } else if (\\\"-\\\".equals(arguments[i])) {\\r\\n             tokens.add(\\\"-\\\");\\r\\n         } else if (arguments[i].startsWith(\\\"-\\\")) {\\r\\n             Option option = options.getOption(arguments[i]);\\r\\n             if (option == null) {\\r\\n                 Option specialOption = options.getOption(arguments[i].substring(0, 2));\\r\\n                 if (specialOption != null) {\\r\\n                     tokens.add(arguments[i].substring(0, 2));\\r\\n                     tokens.add(arguments[i].substring(2));\\r\\n                 } else if (stopAtNonOption) {\\r\\n                     eatTheRest = true;\\r\\n                     tokens.add(arguments[i]);\\r\\n                 } else {\\r\\n                     tokens.add(arguments[i]);\\r\\n                 }\\r\\n             } else {\\r\\n                 currentOption = option;\\r\\n                 Option specialOption = options.getOption(arguments[i].substring(0, 2));\\r\\n-                if (specialOption != null && option == null) {\\r\\n+                if ((specialOption != null) && (option == null)) {\\r\\n                     tokens.add(arguments[i].substring(0, 2));\\r\\n                     tokens.add(arguments[i].substring(2));\\r\\n-                } else if (currentOption != null && currentOption.hasArg()) {\\r\\n+                } else if ((currentOption != null) && currentOption.hasArg()) {\\r\\n                     if (currentOption.hasArg()) {\\r\\n                         tokens.add(arguments[i]);\\r\\n                         currentOption = null;\\r\\n                     } else if (currentOption.hasArgs()) {\\r\\n                         tokens.add(arguments[i]);\\r\\n                     } else if (stopAtNonOption) {\\r\\n                         eatTheRest = true;\\r\\n                         tokens.add(\\\"--\\\");\\r\\n                         tokens.add(arguments[i]);\\r\\n                     } else {\\r\\n                         tokens.add(arguments[i]);\\r\\n                     }\\r\\n                 } else if (currentOption != null) {\\r\\n                     tokens.add(arguments[i]);\\r\\n                 } else if (stopAtNonOption) {\\r\\n                     eatTheRest = true;\\r\\n                     tokens.add(\\\"--\\\");\\r\\n                     tokens.add(arguments[i]);\\r\\n                 } else {\\r\\n                     tokens.add(arguments[i]);\\r\\n                 }\\r\\n             }\\r\\n         } else {\\r\\n             tokens.add(arguments[i]);\\r\\n         }\\r\\n         if (eatTheRest) {\\r\\n             for (i++; i < arguments.length; i++) {\\r\\n                 tokens.add(arguments[i]);\\r\\n             }\\r\\n         }\\r\\n     }\\r\\n     return (String[]) tokens.toArray(new String[] {});\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -1,18 +1,63 @@\\n protected String[] flatten(Options options, String[] arguments, boolean stopAtNonOption) {\\r\\n     init();\\r\\n+    boolean eatTheRest = false;\\r\\n+    Option currentOption = null;\\r\\n     for (int i = 0; i < arguments.length; i++) {\\r\\n-        Option option = options.getOption(arguments[i]);\\r\\n-        try {\\r\\n-            Option specialOption = options.getOption(arguments[i].substring(0, 2));\\r\\n-            if (specialOption != null && option == null) {\\r\\n-                tokens.add(arguments[i].substring(0, 2));\\r\\n-                tokens.add(arguments[i].substring(2));\\r\\n+        if (\\\"--\\\".equals(arguments[i])) {\\r\\n+            eatTheRest = true;\\r\\n+            tokens.add(\\\"--\\\");\\r\\n+        } else if (\\\"-\\\".equals(arguments[i])) {\\r\\n+            tokens.add(\\\"-\\\");\\r\\n+        } else if (arguments[i].startsWith(\\\"-\\\")) {\\r\\n+            Option option = options.getOption(arguments[i]);\\r\\n+            if (option == null) {\\r\\n+                Option specialOption = options.getOption(arguments[i].substring(0, 2));\\r\\n+                if (specialOption != null) {\\r\\n+                    tokens.add(arguments[i].substring(0, 2));\\r\\n+                    tokens.add(arguments[i].substring(2));\\r\\n+                } else if (stopAtNonOption) {\\r\\n+                    eatTheRest = true;\\r\\n+                    tokens.add(arguments[i]);\\r\\n+                } else {\\r\\n+                    tokens.add(arguments[i]);\\r\\n+                }\\r\\n             } else {\\r\\n+                currentOption = option;\\r\\n+                Option specialOption = options.getOption(arguments[i].substring(0, 2));\\r\\n+                if (specialOption != null && option == null) {\\r\\n+                    tokens.add(arguments[i].substring(0, 2));\\r\\n+                    tokens.add(arguments[i].substring(2));\\r\\n+                } else if (currentOption != null && currentOption.hasArg()) {\\r\\n+                    if (currentOption.hasArg()) {\\r\\n+                        tokens.add(arguments[i]);\\r\\n+                        currentOption = null;\\r\\n+                    } else if (currentOption.hasArgs()) {\\r\\n+                        tokens.add(arguments[i]);\\r\\n+                    } else if (stopAtNonOption) {\\r\\n+                        eatTheRest = true;\\r\\n+                        tokens.add(\\\"--\\\");\\r\\n+                        tokens.add(arguments[i]);\\r\\n+                    } else {\\r\\n+                        tokens.add(arguments[i]);\\r\\n+                    }\\r\\n+                } else if (currentOption != null) {\\r\\n+                    tokens.add(arguments[i]);\\r\\n+                } else if (stopAtNonOption) {\\r\\n+                    eatTheRest = true;\\r\\n+                    tokens.add(\\\"--\\\");\\r\\n+                    tokens.add(arguments[i]);\\r\\n+                } else {\\r\\n+                    tokens.add(arguments[i]);\\r\\n+                }\\r\\n+            }\\r\\n+        } else {\\r\\n+            tokens.add(arguments[i]);\\r\\n+        }\\r\\n+        if (eatTheRest) {\\r\\n+            for (i++; i < arguments.length; i++) {\\r\\n                 tokens.add(arguments[i]);\\r\\n             }\\r\\n-        } catch (IndexOutOfBoundsException exp) {\\r\\n-            tokens.add(arguments[i]);\\r\\n         }\\r\\n     }\\r\\n     return (String[]) tokens.toArray(new String[] {});\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -0,0 +1,18 @@\\n+protected String[] flatten(Options options, String[] arguments, boolean stopAtNonOption) {\\r\\n+    init();\\r\\n+    for (int i = 0; i < arguments.length; i++) {\\r\\n+        Option option = options.getOption(arguments[i]);\\r\\n+        try {\\r\\n+            Option specialOption = options.getOption(arguments[i].substring(0, 2));\\r\\n+            if (specialOption != null && option == null) {\\r\\n+                tokens.add(arguments[i].substring(0, 2));\\r\\n+                tokens.add(arguments[i].substring(2));\\r\\n+            } else {\\r\\n+                tokens.add(arguments[i]);\\r\\n+            }\\r\\n+        } catch (IndexOutOfBoundsException exp) {\\r\\n+            tokens.add(arguments[i]);\\r\\n+        }\\r\\n+    }\\r\\n+    return (String[]) tokens.toArray(new String[] {});\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\main\java\org\apache\commons\cli\HelpFormatter.java	compare	org.apache.commons.cli.OptionComparator.compare(Option, Option)	85	87	1	[{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"\""},{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2020","diff":"\"@@ -1,3 +1,4 @@\\n+@Override\\r\\n public int compare(final Option opt1, final Option opt2) {\\r\\n     return opt1.getKey().compareToIgnoreCase(opt2.getKey());\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,3 +1,3 @@\\n-public int compare(Option opt1, Option opt2) {\\r\\n+public int compare(final Option opt1, final Option opt2) {\\r\\n     return opt1.getKey().compareToIgnoreCase(opt2.getKey());\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2011","diff":"\"@@ -1,5 +1,3 @@\\n-public int compare(Object o1, Object o2) {\\r\\n-    Option opt1 = (Option) o1;\\r\\n-    Option opt2 = (Option) o2;\\r\\n+public int compare(Option opt1, Option opt2) {\\r\\n     return opt1.getKey().compareToIgnoreCase(opt2.getKey());\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2008","diff":"\"\""},{"authorEmail":"roxspring@apache.org","authorName":"Robert James Oxspring","commitYear":"2004","diff":"\"@@ -1,5 +1,5 @@\\n public int compare(Object o1, Object o2) {\\r\\n-    String str1 = stripPrefix(o1.toString());\\r\\n-    String str2 = stripPrefix(o2.toString());\\r\\n-    return (str1.compareTo(str2));\\r\\n+    Option opt1 = (Option) o1;\\r\\n+    Option opt2 = (Option) o2;\\r\\n+    return opt1.getKey().compareToIgnoreCase(opt2.getKey());\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -1,3 +1,5 @@\\n public int compare(Object o1, Object o2) {\\r\\n-    return ((StringBuffer) o1).toString().compareTo(((StringBuffer) o2).toString());\\r\\n+    String str1 = stripPrefix(o1.toString());\\r\\n+    String str2 = stripPrefix(o2.toString());\\r\\n+    return (str1.compareTo(str2));\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jstrachan@apache.org","authorName":"James Strachan","commitYear":"2002","diff":"\"@@ -0,0 +1,3 @@\\n+public int compare(Object o1, Object o2) {\\r\\n+    return ((StringBuffer) o1).toString().compareTo(((StringBuffer) o2).toString());\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\main\java\org\apache\commons\cli\HelpFormatter.java	appendOption	org.apache.commons.cli.HelpFormatter.appendOption(StringBuffer, Option, boolean)	199	220	10	[{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"\""},{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"@@ -1,17 +1,17 @@\\n private void appendOption(final StringBuffer buff, final Option option, final boolean required) {\\r\\n     if (!required) {\\r\\n         buff.append(\\\"[\\\");\\r\\n     }\\r\\n     if (option.getOpt() != null) {\\r\\n         buff.append(\\\"-\\\").append(option.getOpt());\\r\\n     } else {\\r\\n         buff.append(\\\"--\\\").append(option.getLongOpt());\\r\\n     }\\r\\n-    if (option.hasArg() && (option.getArgName() == null || option.getArgName().length() != 0)) {\\r\\n+    if (option.hasArg() && (option.getArgName() == null || !option.getArgName().isEmpty())) {\\r\\n         buff.append(option.getOpt() == null ? longOptSeparator : \\\" \\\");\\r\\n         buff.append(\\\"<\\\").append(option.getArgName() != null ? option.getArgName() : getArgName()).append(\\\">\\\");\\r\\n     }\\r\\n     if (!required) {\\r\\n         buff.append(\\\"]\\\");\\r\\n     }\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2019","diff":"\"\""},{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,17 +1,17 @@\\n-private void appendOption(StringBuffer buff, Option option, boolean required) {\\r\\n+private void appendOption(final StringBuffer buff, final Option option, final boolean required) {\\r\\n     if (!required) {\\r\\n         buff.append(\\\"[\\\");\\r\\n     }\\r\\n     if (option.getOpt() != null) {\\r\\n         buff.append(\\\"-\\\").append(option.getOpt());\\r\\n     } else {\\r\\n         buff.append(\\\"--\\\").append(option.getLongOpt());\\r\\n     }\\r\\n     if (option.hasArg() && (option.getArgName() == null || option.getArgName().length() != 0)) {\\r\\n         buff.append(option.getOpt() == null ? longOptSeparator : \\\" \\\");\\r\\n         buff.append(\\\"<\\\").append(option.getArgName() != null ? option.getArgName() : getArgName()).append(\\\">\\\");\\r\\n     }\\r\\n     if (!required) {\\r\\n         buff.append(\\\"]\\\");\\r\\n     }\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2011","diff":"\"@@ -1,17 +1,17 @@\\n-private void appendOption(final StringBuffer buff, final Option option, final boolean required) {\\r\\n+private void appendOption(StringBuffer buff, Option option, boolean required) {\\r\\n     if (!required) {\\r\\n         buff.append(\\\"[\\\");\\r\\n     }\\r\\n     if (option.getOpt() != null) {\\r\\n         buff.append(\\\"-\\\").append(option.getOpt());\\r\\n     } else {\\r\\n         buff.append(\\\"--\\\").append(option.getLongOpt());\\r\\n     }\\r\\n     if (option.hasArg() && (option.getArgName() == null || option.getArgName().length() != 0)) {\\r\\n         buff.append(option.getOpt() == null ? longOptSeparator : \\\" \\\");\\r\\n         buff.append(\\\"<\\\").append(option.getArgName() != null ? option.getArgName() : getArgName()).append(\\\">\\\");\\r\\n     }\\r\\n     if (!required) {\\r\\n         buff.append(\\\"]\\\");\\r\\n     }\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2010","diff":"\"@@ -1,17 +1,17 @@\\n private void appendOption(final StringBuffer buff, final Option option, final boolean required) {\\r\\n     if (!required) {\\r\\n         buff.append(\\\"[\\\");\\r\\n     }\\r\\n     if (option.getOpt() != null) {\\r\\n         buff.append(\\\"-\\\").append(option.getOpt());\\r\\n     } else {\\r\\n         buff.append(\\\"--\\\").append(option.getLongOpt());\\r\\n     }\\r\\n-    if (option.hasArg() && option.hasArgName()) {\\r\\n+    if (option.hasArg() && (option.getArgName() == null || option.getArgName().length() != 0)) {\\r\\n         buff.append(option.getOpt() == null ? longOptSeparator : \\\" \\\");\\r\\n-        buff.append(\\\"<\\\").append(option.getArgName()).append(\\\">\\\");\\r\\n+        buff.append(\\\"<\\\").append(option.getArgName() != null ? option.getArgName() : getArgName()).append(\\\">\\\");\\r\\n     }\\r\\n     if (!required) {\\r\\n         buff.append(\\\"]\\\");\\r\\n     }\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2010","diff":"\"@@ -1,16 +1,17 @@\\n-private static void appendOption(final StringBuffer buff, final Option option, final boolean required) {\\r\\n+private void appendOption(final StringBuffer buff, final Option option, final boolean required) {\\r\\n     if (!required) {\\r\\n         buff.append(\\\"[\\\");\\r\\n     }\\r\\n     if (option.getOpt() != null) {\\r\\n         buff.append(\\\"-\\\").append(option.getOpt());\\r\\n     } else {\\r\\n         buff.append(\\\"--\\\").append(option.getLongOpt());\\r\\n     }\\r\\n     if (option.hasArg() && option.hasArgName()) {\\r\\n-        buff.append(\\\" <\\\").append(option.getArgName()).append(\\\">\\\");\\r\\n+        buff.append(option.getOpt() == null ? longOptSeparator : \\\" \\\");\\r\\n+        buff.append(\\\"<\\\").append(option.getArgName()).append(\\\">\\\");\\r\\n     }\\r\\n     if (!required) {\\r\\n         buff.append(\\\"]\\\");\\r\\n     }\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2008","diff":"\"@@ -1,16 +1,16 @@\\n private static void appendOption(final StringBuffer buff, final Option option, final boolean required) {\\r\\n     if (!required) {\\r\\n         buff.append(\\\"[\\\");\\r\\n     }\\r\\n     if (option.getOpt() != null) {\\r\\n         buff.append(\\\"-\\\").append(option.getOpt());\\r\\n     } else {\\r\\n         buff.append(\\\"--\\\").append(option.getLongOpt());\\r\\n     }\\r\\n-    if (option.hasArg() && (option.getArgName() != null)) {\\r\\n+    if (option.hasArg() && option.hasArgName()) {\\r\\n         buff.append(\\\" <\\\").append(option.getArgName()).append(\\\">\\\");\\r\\n     }\\r\\n     if (!required) {\\r\\n         buff.append(\\\"]\\\");\\r\\n     }\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -1,16 +1,16 @@\\n private static void appendOption(final StringBuffer buff, final Option option, final boolean required) {\\r\\n     if (!required) {\\r\\n         buff.append(\\\"[\\\");\\r\\n     }\\r\\n     if (option.getOpt() != null) {\\r\\n         buff.append(\\\"-\\\").append(option.getOpt());\\r\\n     } else {\\r\\n         buff.append(\\\"--\\\").append(option.getLongOpt());\\r\\n     }\\r\\n-    if (option.hasArg() && option.getArgName() != null) {\\r\\n+    if (option.hasArg() && (option.getArgName() != null)) {\\r\\n         buff.append(\\\" <\\\").append(option.getArgName()).append(\\\">\\\");\\r\\n     }\\r\\n     if (!required) {\\r\\n         buff.append(\\\"]\\\");\\r\\n     }\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -0,0 +1,16 @@\\n+private static void appendOption(final StringBuffer buff, final Option option, final boolean required) {\\r\\n+    if (!required) {\\r\\n+        buff.append(\\\"[\\\");\\r\\n+    }\\r\\n+    if (option.getOpt() != null) {\\r\\n+        buff.append(\\\"-\\\").append(option.getOpt());\\r\\n+    } else {\\r\\n+        buff.append(\\\"--\\\").append(option.getLongOpt());\\r\\n+    }\\r\\n+    if (option.hasArg() && option.getArgName() != null) {\\r\\n+        buff.append(\\\" <\\\").append(option.getArgName()).append(\\\">\\\");\\r\\n+    }\\r\\n+    if (!required) {\\r\\n+        buff.append(\\\"]\\\");\\r\\n+    }\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\main\java\org\apache\commons\cli\HelpFormatter.java	appendOptionGroup	org.apache.commons.cli.HelpFormatter.appendOptionGroup(StringBuffer, OptionGroup)	230	252	6	[{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"\""},{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2020","diff":"\"@@ -1,18 +1,18 @@\\n private void appendOptionGroup(final StringBuffer buff, final OptionGroup group) {\\r\\n     if (!group.isRequired()) {\\r\\n         buff.append(\\\"[\\\");\\r\\n     }\\r\\n-    final List<Option> optList = new ArrayList<Option>(group.getOptions());\\r\\n+    final List<Option> optList = new ArrayList<>(group.getOptions());\\r\\n     if (getOptionComparator() != null) {\\r\\n         Collections.sort(optList, getOptionComparator());\\r\\n     }\\r\\n     for (final Iterator<Option> it = optList.iterator(); it.hasNext(); ) {\\r\\n         appendOption(buff, it.next(), true);\\r\\n         if (it.hasNext()) {\\r\\n             buff.append(\\\" | \\\");\\r\\n         }\\r\\n     }\\r\\n     if (!group.isRequired()) {\\r\\n         buff.append(\\\"]\\\");\\r\\n     }\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2019","diff":"\"\""},{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,18 +1,18 @@\\n-private void appendOptionGroup(StringBuffer buff, OptionGroup group) {\\r\\n+private void appendOptionGroup(final StringBuffer buff, final OptionGroup group) {\\r\\n     if (!group.isRequired()) {\\r\\n         buff.append(\\\"[\\\");\\r\\n     }\\r\\n     final List<Option> optList = new ArrayList<Option>(group.getOptions());\\r\\n     if (getOptionComparator() != null) {\\r\\n         Collections.sort(optList, getOptionComparator());\\r\\n     }\\r\\n     for (final Iterator<Option> it = optList.iterator(); it.hasNext(); ) {\\r\\n         appendOption(buff, it.next(), true);\\r\\n         if (it.hasNext()) {\\r\\n             buff.append(\\\" | \\\");\\r\\n         }\\r\\n     }\\r\\n     if (!group.isRequired()) {\\r\\n         buff.append(\\\"]\\\");\\r\\n     }\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,18 +1,18 @@\\n private void appendOptionGroup(StringBuffer buff, OptionGroup group) {\\r\\n     if (!group.isRequired()) {\\r\\n         buff.append(\\\"[\\\");\\r\\n     }\\r\\n-    List<Option> optList = new ArrayList<Option>(group.getOptions());\\r\\n+    final List<Option> optList = new ArrayList<Option>(group.getOptions());\\r\\n     if (getOptionComparator() != null) {\\r\\n         Collections.sort(optList, getOptionComparator());\\r\\n     }\\r\\n-    for (Iterator<Option> it = optList.iterator(); it.hasNext(); ) {\\r\\n+    for (final Iterator<Option> it = optList.iterator(); it.hasNext(); ) {\\r\\n         appendOption(buff, it.next(), true);\\r\\n         if (it.hasNext()) {\\r\\n             buff.append(\\\" | \\\");\\r\\n         }\\r\\n     }\\r\\n     if (!group.isRequired()) {\\r\\n         buff.append(\\\"]\\\");\\r\\n     }\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2012","diff":"\"@@ -1,18 +1,18 @@\\n private void appendOptionGroup(StringBuffer buff, OptionGroup group) {\\r\\n     if (!group.isRequired()) {\\r\\n         buff.append(\\\"[\\\");\\r\\n     }\\r\\n     List<Option> optList = new ArrayList<Option>(group.getOptions());\\r\\n     if (getOptionComparator() != null) {\\r\\n         Collections.sort(optList, getOptionComparator());\\r\\n     }\\r\\n-    for (Iterator i = optList.iterator(); i.hasNext(); ) {\\r\\n-        appendOption(buff, (Option) i.next(), true);\\r\\n-        if (i.hasNext()) {\\r\\n+    for (Iterator<Option> it = optList.iterator(); it.hasNext(); ) {\\r\\n+        appendOption(buff, it.next(), true);\\r\\n+        if (it.hasNext()) {\\r\\n             buff.append(\\\" | \\\");\\r\\n         }\\r\\n     }\\r\\n     if (!group.isRequired()) {\\r\\n         buff.append(\\\"]\\\");\\r\\n     }\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2011","diff":"\"@@ -1,18 +1,18 @@\\n-private void appendOptionGroup(final StringBuffer buff, final OptionGroup group) {\\r\\n+private void appendOptionGroup(StringBuffer buff, OptionGroup group) {\\r\\n     if (!group.isRequired()) {\\r\\n         buff.append(\\\"[\\\");\\r\\n     }\\r\\n     List<Option> optList = new ArrayList<Option>(group.getOptions());\\r\\n     if (getOptionComparator() != null) {\\r\\n         Collections.sort(optList, getOptionComparator());\\r\\n     }\\r\\n     for (Iterator i = optList.iterator(); i.hasNext(); ) {\\r\\n         appendOption(buff, (Option) i.next(), true);\\r\\n         if (i.hasNext()) {\\r\\n             buff.append(\\\" | \\\");\\r\\n         }\\r\\n     }\\r\\n     if (!group.isRequired()) {\\r\\n         buff.append(\\\"]\\\");\\r\\n     }\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2011","diff":"\"@@ -1,16 +1,18 @@\\n private void appendOptionGroup(final StringBuffer buff, final OptionGroup group) {\\r\\n     if (!group.isRequired()) {\\r\\n         buff.append(\\\"[\\\");\\r\\n     }\\r\\n     List<Option> optList = new ArrayList<Option>(group.getOptions());\\r\\n-    Collections.sort(optList, getOptionComparator());\\r\\n+    if (getOptionComparator() != null) {\\r\\n+        Collections.sort(optList, getOptionComparator());\\r\\n+    }\\r\\n     for (Iterator i = optList.iterator(); i.hasNext(); ) {\\r\\n         appendOption(buff, (Option) i.next(), true);\\r\\n         if (i.hasNext()) {\\r\\n             buff.append(\\\" | \\\");\\r\\n         }\\r\\n     }\\r\\n     if (!group.isRequired()) {\\r\\n         buff.append(\\\"]\\\");\\r\\n     }\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2011","diff":"\"@@ -1,16 +1,16 @@\\n private void appendOptionGroup(final StringBuffer buff, final OptionGroup group) {\\r\\n     if (!group.isRequired()) {\\r\\n         buff.append(\\\"[\\\");\\r\\n     }\\r\\n-    List optList = new ArrayList(group.getOptions());\\r\\n+    List<Option> optList = new ArrayList<Option>(group.getOptions());\\r\\n     Collections.sort(optList, getOptionComparator());\\r\\n     for (Iterator i = optList.iterator(); i.hasNext(); ) {\\r\\n         appendOption(buff, (Option) i.next(), true);\\r\\n         if (i.hasNext()) {\\r\\n             buff.append(\\\" | \\\");\\r\\n         }\\r\\n     }\\r\\n     if (!group.isRequired()) {\\r\\n         buff.append(\\\"]\\\");\\r\\n     }\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2008","diff":"\"\""},{"authorEmail":"bayard@apache.org","authorName":"Henri Yandell","commitYear":"2008","diff":"\"@@ -1,16 +1,16 @@\\n-private static void appendOptionGroup(final StringBuffer buff, final OptionGroup group) {\\r\\n+private void appendOptionGroup(final StringBuffer buff, final OptionGroup group) {\\r\\n     if (!group.isRequired()) {\\r\\n         buff.append(\\\"[\\\");\\r\\n     }\\r\\n     List optList = new ArrayList(group.getOptions());\\r\\n-    Collections.sort(optList, new OptionComparator());\\r\\n+    Collections.sort(optList, getOptionComparator());\\r\\n     for (Iterator i = optList.iterator(); i.hasNext(); ) {\\r\\n         appendOption(buff, (Option) i.next(), true);\\r\\n         if (i.hasNext()) {\\r\\n             buff.append(\\\" | \\\");\\r\\n         }\\r\\n     }\\r\\n     if (!group.isRequired()) {\\r\\n         buff.append(\\\"]\\\");\\r\\n     }\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"bayard@apache.org","authorName":"Henri Yandell","commitYear":"2007","diff":"\"@@ -1,14 +1,16 @@\\n private static void appendOptionGroup(final StringBuffer buff, final OptionGroup group) {\\r\\n     if (!group.isRequired()) {\\r\\n         buff.append(\\\"[\\\");\\r\\n     }\\r\\n-    for (Iterator i = group.getOptions().iterator(); i.hasNext(); ) {\\r\\n+    List optList = new ArrayList(group.getOptions());\\r\\n+    Collections.sort(optList, new OptionComparator());\\r\\n+    for (Iterator i = optList.iterator(); i.hasNext(); ) {\\r\\n         appendOption(buff, (Option) i.next(), true);\\r\\n         if (i.hasNext()) {\\r\\n             buff.append(\\\" | \\\");\\r\\n         }\\r\\n     }\\r\\n     if (!group.isRequired()) {\\r\\n         buff.append(\\\"]\\\");\\r\\n     }\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -0,0 +1,14 @@\\n+private static void appendOptionGroup(final StringBuffer buff, final OptionGroup group) {\\r\\n+    if (!group.isRequired()) {\\r\\n+        buff.append(\\\"[\\\");\\r\\n+    }\\r\\n+    for (Iterator i = group.getOptions().iterator(); i.hasNext(); ) {\\r\\n+        appendOption(buff, (Option) i.next(), true);\\r\\n+        if (i.hasNext()) {\\r\\n+            buff.append(\\\" | \\\");\\r\\n+        }\\r\\n+    }\\r\\n+    if (!group.isRequired()) {\\r\\n+        buff.append(\\\"]\\\");\\r\\n+    }\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\main\java\org\apache\commons\cli\HelpFormatter.java	createPadding	org.apache.commons.cli.HelpFormatter.createPadding(int)	261	266	1	[{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"\""},{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,5 +1,5 @@\\n-protected String createPadding(int len) {\\r\\n+protected String createPadding(final int len) {\\r\\n     final char[] padding = new char[len];\\r\\n     Arrays.fill(padding, ' ');\\r\\n     return new String(padding);\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,5 +1,5 @@\\n protected String createPadding(int len) {\\r\\n-    char[] padding = new char[len];\\r\\n+    final char[] padding = new char[len];\\r\\n     Arrays.fill(padding, ' ');\\r\\n     return new String(padding);\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"simonetripodi@apache.org","authorName":"Simone Tripodi","commitYear":"2011","diff":"\"\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2010","diff":"\"@@ -1,7 +1,5 @@\\n protected String createPadding(int len) {\\r\\n-    StringBuffer sb = new StringBuffer(len);\\r\\n-    for (int i = 0; i < len; ++i) {\\r\\n-        sb.append(' ');\\r\\n-    }\\r\\n-    return sb.toString();\\r\\n+    char[] padding = new char[len];\\r\\n+    Arrays.fill(padding, ' ');\\r\\n+    return new String(padding);\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2008","diff":"\"\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"\""},{"authorEmail":"jstrachan@apache.org","authorName":"James Strachan","commitYear":"2002","diff":"\"@@ -0,0 +1,7 @@\\n+protected String createPadding(int len) {\\r\\n+    StringBuffer sb = new StringBuffer(len);\\r\\n+    for (int i = 0; i < len; ++i) {\\r\\n+        sb.append(' ');\\r\\n+    }\\r\\n+    return sb.toString();\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\main\java\org\apache\commons\cli\HelpFormatter.java	findWrapPos	org.apache.commons.cli.HelpFormatter.findWrapPos(String, int, int)	278	311	17	[{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"\""},{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"\""},{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2019","diff":"\"\""},{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,24 +1,24 @@\\n-protected int findWrapPos(String text, int width, int startPos) {\\r\\n+protected int findWrapPos(final String text, final int width, final int startPos) {\\r\\n     int pos = text.indexOf('\\\\n', startPos);\\r\\n     if (pos != -1 && pos <= width) {\\r\\n         return pos + 1;\\r\\n     }\\r\\n     pos = text.indexOf('\\\\t', startPos);\\r\\n     if (pos != -1 && pos <= width) {\\r\\n         return pos + 1;\\r\\n     }\\r\\n     if (startPos + width >= text.length()) {\\r\\n         return -1;\\r\\n     }\\r\\n     for (pos = startPos + width; pos >= startPos; --pos) {\\r\\n         final char c = text.charAt(pos);\\r\\n         if (c == ' ' || c == '\\\\n' || c == '\\\\r') {\\r\\n             break;\\r\\n         }\\r\\n     }\\r\\n     if (pos > startPos) {\\r\\n         return pos;\\r\\n     }\\r\\n     pos = startPos + width;\\r\\n     return pos == text.length() ? -1 : pos;\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"tn@apache.org","authorName":"Thomas Neidhart","commitYear":"2013","diff":"\"@@ -1,18 +1,24 @@\\n protected int findWrapPos(String text, int width, int startPos) {\\r\\n-    int pos;\\r\\n-    if (((pos = text.indexOf('\\\\n', startPos)) != -1 && pos <= width) || ((pos = text.indexOf('\\\\t', startPos)) != -1 && pos <= width)) {\\r\\n+    int pos = text.indexOf('\\\\n', startPos);\\r\\n+    if (pos != -1 && pos <= width) {\\r\\n         return pos + 1;\\r\\n-    } else if (startPos + width >= text.length()) {\\r\\n+    }\\r\\n+    pos = text.indexOf('\\\\t', startPos);\\r\\n+    if (pos != -1 && pos <= width) {\\r\\n+        return pos + 1;\\r\\n+    }\\r\\n+    if (startPos + width >= text.length()) {\\r\\n         return -1;\\r\\n     }\\r\\n-    pos = startPos + width;\\r\\n-    char c;\\r\\n-    while ((pos >= startPos) && ((c = text.charAt(pos)) != ' ') && (c != '\\\\n') && (c != '\\\\r')) {\\r\\n-        --pos;\\r\\n+    for (pos = startPos + width; pos >= startPos; --pos) {\\r\\n+        final char c = text.charAt(pos);\\r\\n+        if (c == ' ' || c == '\\\\n' || c == '\\\\r') {\\r\\n+            break;\\r\\n+        }\\r\\n     }\\r\\n     if (pos > startPos) {\\r\\n         return pos;\\r\\n     }\\r\\n     pos = startPos + width;\\r\\n     return pos == text.length() ? -1 : pos;\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"tn@apache.org","authorName":"Thomas Neidhart","commitYear":"2013","diff":"\"\""},{"authorEmail":"simonetripodi@apache.org","authorName":"Simone Tripodi","commitYear":"2011","diff":"\"\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2010","diff":"\"@@ -1,21 +1,18 @@\\n protected int findWrapPos(String text, int width, int startPos) {\\r\\n-    int pos = -1;\\r\\n+    int pos;\\r\\n     if (((pos = text.indexOf('\\\\n', startPos)) != -1 && pos <= width) || ((pos = text.indexOf('\\\\t', startPos)) != -1 && pos <= width)) {\\r\\n         return pos + 1;\\r\\n     } else if (startPos + width >= text.length()) {\\r\\n         return -1;\\r\\n     }\\r\\n     pos = startPos + width;\\r\\n     char c;\\r\\n     while ((pos >= startPos) && ((c = text.charAt(pos)) != ' ') && (c != '\\\\n') && (c != '\\\\r')) {\\r\\n         --pos;\\r\\n     }\\r\\n     if (pos > startPos) {\\r\\n         return pos;\\r\\n     }\\r\\n     pos = startPos + width;\\r\\n-    while ((pos <= text.length()) && ((c = text.charAt(pos)) != ' ') && (c != '\\\\n') && (c != '\\\\r')) {\\r\\n-        ++pos;\\r\\n-    }\\r\\n-    return (pos == text.length()) ? (-1) : pos;\\r\\n+    return pos == text.length() ? -1 : pos;\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2010","diff":"\"\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2008","diff":"\"@@ -1,21 +1,21 @@\\n protected int findWrapPos(String text, int width, int startPos) {\\r\\n     int pos = -1;\\r\\n     if (((pos = text.indexOf('\\\\n', startPos)) != -1 && pos <= width) || ((pos = text.indexOf('\\\\t', startPos)) != -1 && pos <= width)) {\\r\\n         return pos + 1;\\r\\n-    } else if ((startPos + width) >= text.length()) {\\r\\n+    } else if (startPos + width >= text.length()) {\\r\\n         return -1;\\r\\n     }\\r\\n     pos = startPos + width;\\r\\n     char c;\\r\\n     while ((pos >= startPos) && ((c = text.charAt(pos)) != ' ') && (c != '\\\\n') && (c != '\\\\r')) {\\r\\n         --pos;\\r\\n     }\\r\\n     if (pos > startPos) {\\r\\n         return pos;\\r\\n     }\\r\\n     pos = startPos + width;\\r\\n     while ((pos <= text.length()) && ((c = text.charAt(pos)) != ' ') && (c != '\\\\n') && (c != '\\\\r')) {\\r\\n         ++pos;\\r\\n     }\\r\\n     return (pos == text.length()) ? (-1) : pos;\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"roxspring@apache.org","authorName":"Robert James Oxspring","commitYear":"2005","diff":"\"@@ -1,22 +1,21 @@\\n protected int findWrapPos(String text, int width, int startPos) {\\r\\n     int pos = -1;\\r\\n     if (((pos = text.indexOf('\\\\n', startPos)) != -1 && pos <= width) || ((pos = text.indexOf('\\\\t', startPos)) != -1 && pos <= width)) {\\r\\n         return pos + 1;\\r\\n     } else if ((startPos + width) >= text.length()) {\\r\\n         return -1;\\r\\n     }\\r\\n     pos = startPos + width;\\r\\n     char c;\\r\\n     while ((pos >= startPos) && ((c = text.charAt(pos)) != ' ') && (c != '\\\\n') && (c != '\\\\r')) {\\r\\n         --pos;\\r\\n     }\\r\\n     if (pos > startPos) {\\r\\n         return pos;\\r\\n-    } else {\\r\\n-        pos = startPos + width;\\r\\n-        while ((pos <= text.length()) && ((c = text.charAt(pos)) != ' ') && (c != '\\\\n') && (c != '\\\\r')) {\\r\\n-            ++pos;\\r\\n-        }\\r\\n-        return (pos == text.length()) ? (-1) : pos;\\r\\n     }\\r\\n+    pos = startPos + width;\\r\\n+    while ((pos <= text.length()) && ((c = text.charAt(pos)) != ' ') && (c != '\\\\n') && (c != '\\\\r')) {\\r\\n+        ++pos;\\r\\n+    }\\r\\n+    return (pos == text.length()) ? (-1) : pos;\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"roxspring@apache.org","authorName":"Robert James Oxspring","commitYear":"2004","diff":"\"@@ -1,22 +1,22 @@\\n protected int findWrapPos(String text, int width, int startPos) {\\r\\n     int pos = -1;\\r\\n     if (((pos = text.indexOf('\\\\n', startPos)) != -1 && pos <= width) || ((pos = text.indexOf('\\\\t', startPos)) != -1 && pos <= width)) {\\r\\n-        return pos;\\r\\n+        return pos + 1;\\r\\n     } else if ((startPos + width) >= text.length()) {\\r\\n         return -1;\\r\\n     }\\r\\n     pos = startPos + width;\\r\\n     char c;\\r\\n     while ((pos >= startPos) && ((c = text.charAt(pos)) != ' ') && (c != '\\\\n') && (c != '\\\\r')) {\\r\\n         --pos;\\r\\n     }\\r\\n     if (pos > startPos) {\\r\\n         return pos;\\r\\n     } else {\\r\\n         pos = startPos + width;\\r\\n         while ((pos <= text.length()) && ((c = text.charAt(pos)) != ' ') && (c != '\\\\n') && (c != '\\\\r')) {\\r\\n             ++pos;\\r\\n         }\\r\\n         return (pos == text.length()) ? (-1) : pos;\\r\\n     }\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -1,22 +1,22 @@\\n protected int findWrapPos(String text, int width, int startPos) {\\r\\n     int pos = -1;\\r\\n     if (((pos = text.indexOf('\\\\n', startPos)) != -1 && pos <= width) || ((pos = text.indexOf('\\\\t', startPos)) != -1 && pos <= width)) {\\r\\n         return pos;\\r\\n     } else if ((startPos + width) >= text.length()) {\\r\\n         return -1;\\r\\n     }\\r\\n     pos = startPos + width;\\r\\n     char c;\\r\\n-    while (pos >= startPos && (c = text.charAt(pos)) != ' ' && c != '\\\\n' && c != '\\\\r') {\\r\\n+    while ((pos >= startPos) && ((c = text.charAt(pos)) != ' ') && (c != '\\\\n') && (c != '\\\\r')) {\\r\\n         --pos;\\r\\n     }\\r\\n     if (pos > startPos) {\\r\\n         return pos;\\r\\n     } else {\\r\\n         pos = startPos + width;\\r\\n-        while (pos <= text.length() && (c = text.charAt(pos)) != ' ' && c != '\\\\n' && c != '\\\\r') {\\r\\n+        while ((pos <= text.length()) && ((c = text.charAt(pos)) != ' ') && (c != '\\\\n') && (c != '\\\\r')) {\\r\\n             ++pos;\\r\\n         }\\r\\n-        return pos == text.length() ? -1 : pos;\\r\\n+        return (pos == text.length()) ? (-1) : pos;\\r\\n     }\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jstrachan@apache.org","authorName":"James Strachan","commitYear":"2002","diff":"\"@@ -0,0 +1,22 @@\\n+protected int findWrapPos(String text, int width, int startPos) {\\r\\n+    int pos = -1;\\r\\n+    if (((pos = text.indexOf('\\\\n', startPos)) != -1 && pos <= width) || ((pos = text.indexOf('\\\\t', startPos)) != -1 && pos <= width)) {\\r\\n+        return pos;\\r\\n+    } else if ((startPos + width) >= text.length()) {\\r\\n+        return -1;\\r\\n+    }\\r\\n+    pos = startPos + width;\\r\\n+    char c;\\r\\n+    while (pos >= startPos && (c = text.charAt(pos)) != ' ' && c != '\\\\n' && c != '\\\\r') {\\r\\n+        --pos;\\r\\n+    }\\r\\n+    if (pos > startPos) {\\r\\n+        return pos;\\r\\n+    } else {\\r\\n+        pos = startPos + width;\\r\\n+        while (pos <= text.length() && (c = text.charAt(pos)) != ' ' && c != '\\\\n' && c != '\\\\r') {\\r\\n+            ++pos;\\r\\n+        }\\r\\n+        return pos == text.length() ? -1 : pos;\\r\\n+    }\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\main\java\org\apache\commons\cli\HelpFormatter.java	getArgName	org.apache.commons.cli.HelpFormatter.getArgName()	318	320	1	[{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2008","diff":"\"@@ -1,3 +1,3 @@\\n public String getArgName() {\\r\\n-    return this.defaultArgName;\\r\\n+    return defaultArgName;\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -0,0 +1,3 @@\\n+public String getArgName() {\\r\\n+    return this.defaultArgName;\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\main\java\org\apache\commons\cli\HelpFormatter.java	getDescPadding	org.apache.commons.cli.HelpFormatter.getDescPadding()	327	329	1	[{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2008","diff":"\"@@ -1,3 +1,3 @@\\n public int getDescPadding() {\\r\\n-    return this.defaultDescPad;\\r\\n+    return defaultDescPad;\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -0,0 +1,3 @@\\n+public int getDescPadding() {\\r\\n+    return this.defaultDescPad;\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\main\java\org\apache\commons\cli\HelpFormatter.java	getLeftPadding	org.apache.commons.cli.HelpFormatter.getLeftPadding()	336	338	1	[{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2008","diff":"\"@@ -1,3 +1,3 @@\\n public int getLeftPadding() {\\r\\n-    return this.defaultLeftPad;\\r\\n+    return defaultLeftPad;\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -0,0 +1,3 @@\\n+public int getLeftPadding() {\\r\\n+    return this.defaultLeftPad;\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\main\java\org\apache\commons\cli\HelpFormatter.java	getLongOptPrefix	org.apache.commons.cli.HelpFormatter.getLongOptPrefix()	345	347	1	[{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2008","diff":"\"@@ -1,3 +1,3 @@\\n public String getLongOptPrefix() {\\r\\n-    return this.defaultLongOptPrefix;\\r\\n+    return defaultLongOptPrefix;\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -0,0 +1,3 @@\\n+public String getLongOptPrefix() {\\r\\n+    return this.defaultLongOptPrefix;\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\main\java\org\apache\commons\cli\HelpFormatter.java	getLongOptSeparator	org.apache.commons.cli.HelpFormatter.getLongOptSeparator()	355	357	1	[{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2010","diff":"\"@@ -0,0 +1,3 @@\\n+public String getLongOptSeparator() {\\r\\n+    return longOptSeparator;\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\main\java\org\apache\commons\cli\HelpFormatter.java	getNewLine	org.apache.commons.cli.HelpFormatter.getNewLine()	364	366	1	[{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2008","diff":"\"@@ -1,3 +1,3 @@\\n public String getNewLine() {\\r\\n-    return this.defaultNewLine;\\r\\n+    return defaultNewLine;\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -0,0 +1,3 @@\\n+public String getNewLine() {\\r\\n+    return this.defaultNewLine;\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\main\java\org\apache\commons\cli\HelpFormatter.java	getOptionComparator	org.apache.commons.cli.HelpFormatter.getOptionComparator()	375	377	1	[{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"\""},{"authorEmail":"tn@apache.org","authorName":"Thomas Neidhart","commitYear":"2013","diff":"\"\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2011","diff":"\"@@ -1,3 +1,3 @@\\n-public Comparator getOptionComparator() {\\r\\n+public Comparator<Option> getOptionComparator() {\\r\\n     return optionComparator;\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2009","diff":"\"\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2008","diff":"\"@@ -1,3 +1,3 @@\\n public Comparator getOptionComparator() {\\r\\n-    return this.optionComparator;\\r\\n+    return optionComparator;\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"bayard@apache.org","authorName":"Henri Yandell","commitYear":"2008","diff":"\"@@ -0,0 +1,3 @@\\n+public Comparator getOptionComparator() {\\r\\n+    return this.optionComparator;\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\main\java\org\apache\commons\cli\HelpFormatter.java	getOptPrefix	org.apache.commons.cli.HelpFormatter.getOptPrefix()	384	386	1	[{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2008","diff":"\"@@ -1,3 +1,3 @@\\n public String getOptPrefix() {\\r\\n-    return this.defaultOptPrefix;\\r\\n+    return defaultOptPrefix;\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -0,0 +1,3 @@\\n+public String getOptPrefix() {\\r\\n+    return this.defaultOptPrefix;\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\main\java\org\apache\commons\cli\HelpFormatter.java	getSyntaxPrefix	org.apache.commons.cli.HelpFormatter.getSyntaxPrefix()	393	395	1	[{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2008","diff":"\"@@ -1,3 +1,3 @@\\n public String getSyntaxPrefix() {\\r\\n-    return this.defaultSyntaxPrefix;\\r\\n+    return defaultSyntaxPrefix;\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -0,0 +1,3 @@\\n+public String getSyntaxPrefix() {\\r\\n+    return this.defaultSyntaxPrefix;\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\main\java\org\apache\commons\cli\HelpFormatter.java	getWidth	org.apache.commons.cli.HelpFormatter.getWidth()	402	404	1	[{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2008","diff":"\"@@ -1,3 +1,3 @@\\n public int getWidth() {\\r\\n-    return this.defaultWidth;\\r\\n+    return defaultWidth;\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -0,0 +1,3 @@\\n+public int getWidth() {\\r\\n+    return this.defaultWidth;\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\main\java\org\apache\commons\cli\HelpFormatter.java	printHelp	org.apache.commons.cli.HelpFormatter.printHelp(int, String, String, Options, String)	416	418	1	[{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"\""},{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"\""},{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,3 +1,3 @@\\n-public void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer) {\\r\\n+public void printHelp(final int width, final String cmdLineSyntax, final String header, final Options options, final String footer) {\\r\\n     printHelp(width, cmdLineSyntax, header, options, footer, false);\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"joehni@apache.org","authorName":"Joerg Schaible","commitYear":"2009","diff":"\"\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2008","diff":"\"\""},{"authorEmail":"tobrien@apache.org","authorName":"Timothy O'Brien","commitYear":"2003","diff":"\"\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -1,5 +1,3 @@\\n public void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer) {\\r\\n-    PrintWriter pw = new PrintWriter(System.out);\\r\\n-    printHelp(pw, width, cmdLineSyntax, header, options, defaultLeftPad, defaultDescPad, footer);\\r\\n-    pw.flush();\\r\\n+    printHelp(width, cmdLineSyntax, header, options, footer, false);\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jstrachan@apache.org","authorName":"James Strachan","commitYear":"2002","diff":"\"@@ -0,0 +1,5 @@\\n+public void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer) {\\r\\n+    PrintWriter pw = new PrintWriter(System.out);\\r\\n+    printHelp(pw, width, cmdLineSyntax, header, options, defaultLeftPad, defaultDescPad, footer);\\r\\n+    pw.flush();\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\main\java\org\apache\commons\cli\HelpFormatter.java	printHelp	org.apache.commons.cli.HelpFormatter.printHelp(int, String, String, Options, String, boolean)	431	437	1	[{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"\""},{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"\""},{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2019","diff":"\"\""},{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,5 +1,5 @@\\n-public void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage) {\\r\\n+public void printHelp(final int width, final String cmdLineSyntax, final String header, final Options options, final String footer, final boolean autoUsage) {\\r\\n     final PrintWriter pw = new PrintWriter(System.out);\\r\\n     printHelp(pw, width, cmdLineSyntax, header, options, getLeftPadding(), getDescPadding(), footer, autoUsage);\\r\\n     pw.flush();\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,5 +1,5 @@\\n public void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage) {\\r\\n-    PrintWriter pw = new PrintWriter(System.out);\\r\\n+    final PrintWriter pw = new PrintWriter(System.out);\\r\\n     printHelp(pw, width, cmdLineSyntax, header, options, getLeftPadding(), getDescPadding(), footer, autoUsage);\\r\\n     pw.flush();\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"tn@apache.org","authorName":"Thomas Neidhart","commitYear":"2013","diff":"\"\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2010","diff":"\"@@ -1,5 +1,5 @@\\n public void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage) {\\r\\n     PrintWriter pw = new PrintWriter(System.out);\\r\\n-    printHelp(pw, width, cmdLineSyntax, header, options, defaultLeftPad, defaultDescPad, footer, autoUsage);\\r\\n+    printHelp(pw, width, cmdLineSyntax, header, options, getLeftPadding(), getDescPadding(), footer, autoUsage);\\r\\n     pw.flush();\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2008","diff":"\"\""},{"authorEmail":"tobrien@apache.org","authorName":"Timothy O'Brien","commitYear":"2003","diff":"\"\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -0,0 +1,5 @@\\n+public void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage) {\\r\\n+    PrintWriter pw = new PrintWriter(System.out);\\r\\n+    printHelp(pw, width, cmdLineSyntax, header, options, defaultLeftPad, defaultDescPad, footer, autoUsage);\\r\\n+    pw.flush();\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\main\java\org\apache\commons\cli\HelpFormatter.java	printHelp	org.apache.commons.cli.HelpFormatter.printHelp(PrintWriter, int, String, String, Options, int, int, String)	453	456	1	[{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"\""},{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"\""},{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,3 +1,3 @@\\n-public void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer) {\\r\\n+public void printHelp(final PrintWriter pw, final int width, final String cmdLineSyntax, final String header, final Options options, final int leftPad, final int descPad, final String footer) {\\r\\n     printHelp(pw, width, cmdLineSyntax, header, options, leftPad, descPad, footer, false);\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"tn@apache.org","authorName":"Thomas Neidhart","commitYear":"2013","diff":"\"\""},{"authorEmail":"bayard@apache.org","authorName":"Henri Yandell","commitYear":"2009","diff":"\"\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2008","diff":"\"\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -1,3 +1,3 @@\\n-public void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer) throws IllegalArgumentException {\\r\\n+public void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer) {\\r\\n     printHelp(pw, width, cmdLineSyntax, header, options, leftPad, descPad, footer, false);\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -1,13 +1,3 @@\\n public void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer) throws IllegalArgumentException {\\r\\n-    if (cmdLineSyntax == null || cmdLineSyntax.length() == 0) {\\r\\n-        throw new IllegalArgumentException(\\\"cmdLineSyntax not provided\\\");\\r\\n-    }\\r\\n-    printUsage(pw, width, cmdLineSyntax);\\r\\n-    if (header != null && header.trim().length() > 0) {\\r\\n-        printWrapped(pw, width, header);\\r\\n-    }\\r\\n-    printOptions(pw, width, options, leftPad, descPad);\\r\\n-    if (footer != null && footer.trim().length() > 0) {\\r\\n-        printWrapped(pw, width, footer);\\r\\n-    }\\r\\n+    printHelp(pw, width, cmdLineSyntax, header, options, leftPad, descPad, footer, false);\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jstrachan@apache.org","authorName":"James Strachan","commitYear":"2002","diff":"\"@@ -0,0 +1,13 @@\\n+public void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer) throws IllegalArgumentException {\\r\\n+    if (cmdLineSyntax == null || cmdLineSyntax.length() == 0) {\\r\\n+        throw new IllegalArgumentException(\\\"cmdLineSyntax not provided\\\");\\r\\n+    }\\r\\n+    printUsage(pw, width, cmdLineSyntax);\\r\\n+    if (header != null && header.trim().length() > 0) {\\r\\n+        printWrapped(pw, width, header);\\r\\n+    }\\r\\n+    printOptions(pw, width, options, leftPad, descPad);\\r\\n+    if (footer != null && footer.trim().length() > 0) {\\r\\n+        printWrapped(pw, width, footer);\\r\\n+    }\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\main\java\org\apache\commons\cli\HelpFormatter.java	printHelp	org.apache.commons.cli.HelpFormatter.printHelp(PrintWriter, int, String, String, Options, int, int, String, boolean)	473	494	10	[{"authorEmail":"jakub.jakub.nowak@gmail.com","authorName":"Jakub Nowak","commitYear":"2021","diff":"\"@@ -1,17 +1,17 @@\\n public void printHelp(final PrintWriter pw, final int width, final String cmdLineSyntax, final String header, final Options options, final int leftPad, final int descPad, final String footer, final boolean autoUsage) {\\r\\n     if (cmdLineSyntax == null || cmdLineSyntax.isEmpty()) {\\r\\n         throw new IllegalArgumentException(\\\"cmdLineSyntax not provided\\\");\\r\\n     }\\r\\n     if (autoUsage) {\\r\\n         printUsage(pw, width, cmdLineSyntax, options);\\r\\n     } else {\\r\\n         printUsage(pw, width, cmdLineSyntax);\\r\\n     }\\r\\n-    if (header != null && !header.trim().isEmpty()) {\\r\\n+    if (header != null && !header.isEmpty()) {\\r\\n         printWrapped(pw, width, header);\\r\\n     }\\r\\n     printOptions(pw, width, options, leftPad, descPad);\\r\\n-    if (footer != null && !footer.trim().isEmpty()) {\\r\\n+    if (footer != null && !footer.isEmpty()) {\\r\\n         printWrapped(pw, width, footer);\\r\\n     }\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"\""},{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"\""},{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"@@ -1,17 +1,17 @@\\n public void printHelp(final PrintWriter pw, final int width, final String cmdLineSyntax, final String header, final Options options, final int leftPad, final int descPad, final String footer, final boolean autoUsage) {\\r\\n     if (cmdLineSyntax == null || cmdLineSyntax.isEmpty()) {\\r\\n         throw new IllegalArgumentException(\\\"cmdLineSyntax not provided\\\");\\r\\n     }\\r\\n     if (autoUsage) {\\r\\n         printUsage(pw, width, cmdLineSyntax, options);\\r\\n     } else {\\r\\n         printUsage(pw, width, cmdLineSyntax);\\r\\n     }\\r\\n-    if (header != null && header.trim().length() > 0) {\\r\\n+    if (header != null && !header.trim().isEmpty()) {\\r\\n         printWrapped(pw, width, header);\\r\\n     }\\r\\n     printOptions(pw, width, options, leftPad, descPad);\\r\\n-    if (footer != null && footer.trim().length() > 0) {\\r\\n+    if (footer != null && !footer.trim().isEmpty()) {\\r\\n         printWrapped(pw, width, footer);\\r\\n     }\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"@@ -1,17 +1,17 @@\\n public void printHelp(final PrintWriter pw, final int width, final String cmdLineSyntax, final String header, final Options options, final int leftPad, final int descPad, final String footer, final boolean autoUsage) {\\r\\n-    if (cmdLineSyntax == null || cmdLineSyntax.length() == 0) {\\r\\n+    if (cmdLineSyntax == null || cmdLineSyntax.isEmpty()) {\\r\\n         throw new IllegalArgumentException(\\\"cmdLineSyntax not provided\\\");\\r\\n     }\\r\\n     if (autoUsage) {\\r\\n         printUsage(pw, width, cmdLineSyntax, options);\\r\\n     } else {\\r\\n         printUsage(pw, width, cmdLineSyntax);\\r\\n     }\\r\\n     if (header != null && header.trim().length() > 0) {\\r\\n         printWrapped(pw, width, header);\\r\\n     }\\r\\n     printOptions(pw, width, options, leftPad, descPad);\\r\\n     if (footer != null && footer.trim().length() > 0) {\\r\\n         printWrapped(pw, width, footer);\\r\\n     }\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,17 +1,17 @@\\n-public void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer, boolean autoUsage) {\\r\\n+public void printHelp(final PrintWriter pw, final int width, final String cmdLineSyntax, final String header, final Options options, final int leftPad, final int descPad, final String footer, final boolean autoUsage) {\\r\\n     if (cmdLineSyntax == null || cmdLineSyntax.length() == 0) {\\r\\n         throw new IllegalArgumentException(\\\"cmdLineSyntax not provided\\\");\\r\\n     }\\r\\n     if (autoUsage) {\\r\\n         printUsage(pw, width, cmdLineSyntax, options);\\r\\n     } else {\\r\\n         printUsage(pw, width, cmdLineSyntax);\\r\\n     }\\r\\n     if (header != null && header.trim().length() > 0) {\\r\\n         printWrapped(pw, width, header);\\r\\n     }\\r\\n     printOptions(pw, width, options, leftPad, descPad);\\r\\n     if (footer != null && footer.trim().length() > 0) {\\r\\n         printWrapped(pw, width, footer);\\r\\n     }\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"britter@apache.org","authorName":"Benedikt Ritter","commitYear":"2015","diff":"\"@@ -1,17 +1,17 @@\\n public void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer, boolean autoUsage) {\\r\\n-    if ((cmdLineSyntax == null) || (cmdLineSyntax.length() == 0)) {\\r\\n+    if (cmdLineSyntax == null || cmdLineSyntax.length() == 0) {\\r\\n         throw new IllegalArgumentException(\\\"cmdLineSyntax not provided\\\");\\r\\n     }\\r\\n     if (autoUsage) {\\r\\n         printUsage(pw, width, cmdLineSyntax, options);\\r\\n     } else {\\r\\n         printUsage(pw, width, cmdLineSyntax);\\r\\n     }\\r\\n-    if ((header != null) && (header.trim().length() > 0)) {\\r\\n+    if (header != null && header.trim().length() > 0) {\\r\\n         printWrapped(pw, width, header);\\r\\n     }\\r\\n     printOptions(pw, width, options, leftPad, descPad);\\r\\n-    if ((footer != null) && (footer.trim().length() > 0)) {\\r\\n+    if (footer != null && footer.trim().length() > 0) {\\r\\n         printWrapped(pw, width, footer);\\r\\n     }\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"tn@apache.org","authorName":"Thomas Neidhart","commitYear":"2013","diff":"\"\""},{"authorEmail":"bayard@apache.org","authorName":"Henri Yandell","commitYear":"2009","diff":"\"\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2008","diff":"\"\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -1,17 +1,17 @@\\n-public void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer, boolean autoUsage) throws IllegalArgumentException {\\r\\n-    if (cmdLineSyntax == null || cmdLineSyntax.length() == 0) {\\r\\n+public void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer, boolean autoUsage) {\\r\\n+    if ((cmdLineSyntax == null) || (cmdLineSyntax.length() == 0)) {\\r\\n         throw new IllegalArgumentException(\\\"cmdLineSyntax not provided\\\");\\r\\n     }\\r\\n     if (autoUsage) {\\r\\n         printUsage(pw, width, cmdLineSyntax, options);\\r\\n     } else {\\r\\n         printUsage(pw, width, cmdLineSyntax);\\r\\n     }\\r\\n-    if (header != null && header.trim().length() > 0) {\\r\\n+    if ((header != null) && (header.trim().length() > 0)) {\\r\\n         printWrapped(pw, width, header);\\r\\n     }\\r\\n     printOptions(pw, width, options, leftPad, descPad);\\r\\n-    if (footer != null && footer.trim().length() > 0) {\\r\\n+    if ((footer != null) && (footer.trim().length() > 0)) {\\r\\n         printWrapped(pw, width, footer);\\r\\n     }\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -0,0 +1,17 @@\\n+public void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer, boolean autoUsage) throws IllegalArgumentException {\\r\\n+    if (cmdLineSyntax == null || cmdLineSyntax.length() == 0) {\\r\\n+        throw new IllegalArgumentException(\\\"cmdLineSyntax not provided\\\");\\r\\n+    }\\r\\n+    if (autoUsage) {\\r\\n+        printUsage(pw, width, cmdLineSyntax, options);\\r\\n+    } else {\\r\\n+        printUsage(pw, width, cmdLineSyntax);\\r\\n+    }\\r\\n+    if (header != null && header.trim().length() > 0) {\\r\\n+        printWrapped(pw, width, header);\\r\\n+    }\\r\\n+    printOptions(pw, width, options, leftPad, descPad);\\r\\n+    if (footer != null && footer.trim().length() > 0) {\\r\\n+        printWrapped(pw, width, footer);\\r\\n+    }\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\main\java\org\apache\commons\cli\HelpFormatter.java	printHelp	org.apache.commons.cli.HelpFormatter.printHelp(String, Options)	503	505	1	[{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"\""},{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"\""},{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,3 +1,3 @@\\n-public void printHelp(String cmdLineSyntax, Options options) {\\r\\n+public void printHelp(final String cmdLineSyntax, final Options options) {\\r\\n     printHelp(getWidth(), cmdLineSyntax, null, options, null, false);\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2010","diff":"\"@@ -1,3 +1,3 @@\\n public void printHelp(String cmdLineSyntax, Options options) {\\r\\n-    printHelp(defaultWidth, cmdLineSyntax, null, options, null, false);\\r\\n+    printHelp(getWidth(), cmdLineSyntax, null, options, null, false);\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2008","diff":"\"\""},{"authorEmail":"tobrien@apache.org","authorName":"Timothy O'Brien","commitYear":"2003","diff":"\"\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -1,3 +1,3 @@\\n public void printHelp(String cmdLineSyntax, Options options) {\\r\\n-    printHelp(defaultWidth, cmdLineSyntax, null, options, null);\\r\\n+    printHelp(defaultWidth, cmdLineSyntax, null, options, null, false);\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jstrachan@apache.org","authorName":"James Strachan","commitYear":"2002","diff":"\"@@ -0,0 +1,3 @@\\n+public void printHelp(String cmdLineSyntax, Options options) {\\r\\n+    printHelp(defaultWidth, cmdLineSyntax, null, options, null);\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\main\java\org\apache\commons\cli\HelpFormatter.java	printHelp	org.apache.commons.cli.HelpFormatter.printHelp(String, Options, boolean)	515	517	1	[{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"\""},{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"\""},{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2019","diff":"\"\""},{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,3 +1,3 @@\\n-public void printHelp(String cmdLineSyntax, Options options, boolean autoUsage) {\\r\\n+public void printHelp(final String cmdLineSyntax, final Options options, final boolean autoUsage) {\\r\\n     printHelp(getWidth(), cmdLineSyntax, null, options, null, autoUsage);\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2010","diff":"\"@@ -1,3 +1,3 @@\\n public void printHelp(String cmdLineSyntax, Options options, boolean autoUsage) {\\r\\n-    printHelp(defaultWidth, cmdLineSyntax, null, options, null, autoUsage);\\r\\n+    printHelp(getWidth(), cmdLineSyntax, null, options, null, autoUsage);\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2008","diff":"\"\""},{"authorEmail":"tobrien@apache.org","authorName":"Timothy O'Brien","commitYear":"2003","diff":"\"\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -0,0 +1,3 @@\\n+public void printHelp(String cmdLineSyntax, Options options, boolean autoUsage) {\\r\\n+    printHelp(defaultWidth, cmdLineSyntax, null, options, null, autoUsage);\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\main\java\org\apache\commons\cli\HelpFormatter.java	printHelp	org.apache.commons.cli.HelpFormatter.printHelp(String, String, Options, String)	528	530	1	[{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"\""},{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"\""},{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,3 +1,3 @@\\n-public void printHelp(String cmdLineSyntax, String header, Options options, String footer) {\\r\\n+public void printHelp(final String cmdLineSyntax, final String header, final Options options, final String footer) {\\r\\n     printHelp(cmdLineSyntax, header, options, footer, false);\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"tn@apache.org","authorName":"Thomas Neidhart","commitYear":"2013","diff":"\"\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2008","diff":"\"\""},{"authorEmail":"tobrien@apache.org","authorName":"Timothy O'Brien","commitYear":"2003","diff":"\"\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -1,3 +1,3 @@\\n public void printHelp(String cmdLineSyntax, String header, Options options, String footer) {\\r\\n-    printHelp(defaultWidth, cmdLineSyntax, header, options, footer);\\r\\n+    printHelp(cmdLineSyntax, header, options, footer, false);\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jstrachan@apache.org","authorName":"James Strachan","commitYear":"2002","diff":"\"@@ -0,0 +1,3 @@\\n+public void printHelp(String cmdLineSyntax, String header, Options options, String footer) {\\r\\n+    printHelp(defaultWidth, cmdLineSyntax, header, options, footer);\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\main\java\org\apache\commons\cli\HelpFormatter.java	printHelp	org.apache.commons.cli.HelpFormatter.printHelp(String, String, Options, String, boolean)	542	544	1	[{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"\""},{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"\""},{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2019","diff":"\"\""},{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,3 +1,3 @@\\n-public void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage) {\\r\\n+public void printHelp(final String cmdLineSyntax, final String header, final Options options, final String footer, final boolean autoUsage) {\\r\\n     printHelp(getWidth(), cmdLineSyntax, header, options, footer, autoUsage);\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"tn@apache.org","authorName":"Thomas Neidhart","commitYear":"2013","diff":"\"\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2010","diff":"\"@@ -1,3 +1,3 @@\\n public void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage) {\\r\\n-    printHelp(defaultWidth, cmdLineSyntax, header, options, footer, autoUsage);\\r\\n+    printHelp(getWidth(), cmdLineSyntax, header, options, footer, autoUsage);\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2008","diff":"\"\""},{"authorEmail":"tobrien@apache.org","authorName":"Timothy O'Brien","commitYear":"2003","diff":"\"\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -0,0 +1,3 @@\\n+public void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage) {\\r\\n+    printHelp(defaultWidth, cmdLineSyntax, header, options, footer, autoUsage);\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\main\java\org\apache\commons\cli\HelpFormatter.java	printOptions	org.apache.commons.cli.HelpFormatter.printOptions(PrintWriter, int, Options, int, int)	556	561	1	[{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"\""},{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2019","diff":"\"\""},{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,5 +1,5 @@\\n-public void printOptions(PrintWriter pw, int width, Options options, int leftPad, int descPad) {\\r\\n+public void printOptions(final PrintWriter pw, final int width, final Options options, final int leftPad, final int descPad) {\\r\\n     final StringBuffer sb = new StringBuffer();\\r\\n     renderOptions(sb, width, options, leftPad, descPad);\\r\\n     pw.println(sb.toString());\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,5 +1,5 @@\\n public void printOptions(PrintWriter pw, int width, Options options, int leftPad, int descPad) {\\r\\n-    StringBuffer sb = new StringBuffer();\\r\\n+    final StringBuffer sb = new StringBuffer();\\r\\n     renderOptions(sb, width, options, leftPad, descPad);\\r\\n     pw.println(sb.toString());\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2010","diff":"\"\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"\""},{"authorEmail":"jstrachan@apache.org","authorName":"James Strachan","commitYear":"2002","diff":"\"@@ -0,0 +1,5 @@\\n+public void printOptions(PrintWriter pw, int width, Options options, int leftPad, int descPad) {\\r\\n+    StringBuffer sb = new StringBuffer();\\r\\n+    renderOptions(sb, width, options, leftPad, descPad);\\r\\n+    pw.println(sb.toString());\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\main\java\org\apache\commons\cli\HelpFormatter.java	printUsage	org.apache.commons.cli.HelpFormatter.printUsage(PrintWriter, int, String)	570	574	1	[{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"\""},{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,4 +1,4 @@\\n-public void printUsage(PrintWriter pw, int width, String cmdLineSyntax) {\\r\\n+public void printUsage(final PrintWriter pw, final int width, final String cmdLineSyntax) {\\r\\n     final int argPos = cmdLineSyntax.indexOf(' ') + 1;\\r\\n     printWrapped(pw, width, getSyntaxPrefix().length() + argPos, getSyntaxPrefix() + cmdLineSyntax);\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,4 +1,4 @@\\n public void printUsage(PrintWriter pw, int width, String cmdLineSyntax) {\\r\\n-    int argPos = cmdLineSyntax.indexOf(' ') + 1;\\r\\n+    final int argPos = cmdLineSyntax.indexOf(' ') + 1;\\r\\n     printWrapped(pw, width, getSyntaxPrefix().length() + argPos, getSyntaxPrefix() + cmdLineSyntax);\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2010","diff":"\"@@ -1,4 +1,4 @@\\n public void printUsage(PrintWriter pw, int width, String cmdLineSyntax) {\\r\\n     int argPos = cmdLineSyntax.indexOf(' ') + 1;\\r\\n-    printWrapped(pw, width, defaultSyntaxPrefix.length() + argPos, defaultSyntaxPrefix + cmdLineSyntax);\\r\\n+    printWrapped(pw, width, getSyntaxPrefix().length() + argPos, getSyntaxPrefix() + cmdLineSyntax);\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2008","diff":"\"\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"\""},{"authorEmail":"jstrachan@apache.org","authorName":"James Strachan","commitYear":"2002","diff":"\"@@ -0,0 +1,4 @@\\n+public void printUsage(PrintWriter pw, int width, String cmdLineSyntax) {\\r\\n+    int argPos = cmdLineSyntax.indexOf(' ') + 1;\\r\\n+    printWrapped(pw, width, defaultSyntaxPrefix.length() + argPos, defaultSyntaxPrefix + cmdLineSyntax);\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\main\java\org\apache\commons\cli\HelpFormatter.java	printUsage	org.apache.commons.cli.HelpFormatter.printUsage(PrintWriter, int, String, Options)	584	630	7	[{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"\""},{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"\""},{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2020","diff":"\"@@ -1,24 +1,24 @@\\n public void printUsage(final PrintWriter pw, final int width, final String app, final Options options) {\\r\\n     final StringBuffer buff = new StringBuffer(getSyntaxPrefix()).append(app).append(\\\" \\\");\\r\\n-    final Collection<OptionGroup> processedGroups = new ArrayList<OptionGroup>();\\r\\n-    final List<Option> optList = new ArrayList<Option>(options.getOptions());\\r\\n+    final Collection<OptionGroup> processedGroups = new ArrayList<>();\\r\\n+    final List<Option> optList = new ArrayList<>(options.getOptions());\\r\\n     if (getOptionComparator() != null) {\\r\\n         Collections.sort(optList, getOptionComparator());\\r\\n     }\\r\\n     for (final Iterator<Option> it = optList.iterator(); it.hasNext(); ) {\\r\\n         final Option option = it.next();\\r\\n         final OptionGroup group = options.getOptionGroup(option);\\r\\n         if (group != null) {\\r\\n             if (!processedGroups.contains(group)) {\\r\\n                 processedGroups.add(group);\\r\\n                 appendOptionGroup(buff, group);\\r\\n             }\\r\\n         } else {\\r\\n             appendOption(buff, option, option.isRequired());\\r\\n         }\\r\\n         if (it.hasNext()) {\\r\\n             buff.append(\\\" \\\");\\r\\n         }\\r\\n     }\\r\\n     printWrapped(pw, width, buff.toString().indexOf(' ') + 1, buff.toString());\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2019","diff":"\"\""},{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,24 +1,24 @@\\n-public void printUsage(PrintWriter pw, int width, String app, Options options) {\\r\\n+public void printUsage(final PrintWriter pw, final int width, final String app, final Options options) {\\r\\n     final StringBuffer buff = new StringBuffer(getSyntaxPrefix()).append(app).append(\\\" \\\");\\r\\n     final Collection<OptionGroup> processedGroups = new ArrayList<OptionGroup>();\\r\\n     final List<Option> optList = new ArrayList<Option>(options.getOptions());\\r\\n     if (getOptionComparator() != null) {\\r\\n         Collections.sort(optList, getOptionComparator());\\r\\n     }\\r\\n     for (final Iterator<Option> it = optList.iterator(); it.hasNext(); ) {\\r\\n         final Option option = it.next();\\r\\n         final OptionGroup group = options.getOptionGroup(option);\\r\\n         if (group != null) {\\r\\n             if (!processedGroups.contains(group)) {\\r\\n                 processedGroups.add(group);\\r\\n                 appendOptionGroup(buff, group);\\r\\n             }\\r\\n         } else {\\r\\n             appendOption(buff, option, option.isRequired());\\r\\n         }\\r\\n         if (it.hasNext()) {\\r\\n             buff.append(\\\" \\\");\\r\\n         }\\r\\n     }\\r\\n     printWrapped(pw, width, buff.toString().indexOf(' ') + 1, buff.toString());\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,24 +1,24 @@\\n public void printUsage(PrintWriter pw, int width, String app, Options options) {\\r\\n-    StringBuffer buff = new StringBuffer(getSyntaxPrefix()).append(app).append(\\\" \\\");\\r\\n-    Collection<OptionGroup> processedGroups = new ArrayList<OptionGroup>();\\r\\n-    List<Option> optList = new ArrayList<Option>(options.getOptions());\\r\\n+    final StringBuffer buff = new StringBuffer(getSyntaxPrefix()).append(app).append(\\\" \\\");\\r\\n+    final Collection<OptionGroup> processedGroups = new ArrayList<OptionGroup>();\\r\\n+    final List<Option> optList = new ArrayList<Option>(options.getOptions());\\r\\n     if (getOptionComparator() != null) {\\r\\n         Collections.sort(optList, getOptionComparator());\\r\\n     }\\r\\n-    for (Iterator<Option> it = optList.iterator(); it.hasNext(); ) {\\r\\n-        Option option = it.next();\\r\\n-        OptionGroup group = options.getOptionGroup(option);\\r\\n+    for (final Iterator<Option> it = optList.iterator(); it.hasNext(); ) {\\r\\n+        final Option option = it.next();\\r\\n+        final OptionGroup group = options.getOptionGroup(option);\\r\\n         if (group != null) {\\r\\n             if (!processedGroups.contains(group)) {\\r\\n                 processedGroups.add(group);\\r\\n                 appendOptionGroup(buff, group);\\r\\n             }\\r\\n         } else {\\r\\n             appendOption(buff, option, option.isRequired());\\r\\n         }\\r\\n         if (it.hasNext()) {\\r\\n             buff.append(\\\" \\\");\\r\\n         }\\r\\n     }\\r\\n     printWrapped(pw, width, buff.toString().indexOf(' ') + 1, buff.toString());\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2012","diff":"\"@@ -1,24 +1,24 @@\\n public void printUsage(PrintWriter pw, int width, String app, Options options) {\\r\\n     StringBuffer buff = new StringBuffer(getSyntaxPrefix()).append(app).append(\\\" \\\");\\r\\n     Collection<OptionGroup> processedGroups = new ArrayList<OptionGroup>();\\r\\n     List<Option> optList = new ArrayList<Option>(options.getOptions());\\r\\n     if (getOptionComparator() != null) {\\r\\n         Collections.sort(optList, getOptionComparator());\\r\\n     }\\r\\n-    for (Iterator i = optList.iterator(); i.hasNext(); ) {\\r\\n-        Option option = (Option) i.next();\\r\\n+    for (Iterator<Option> it = optList.iterator(); it.hasNext(); ) {\\r\\n+        Option option = it.next();\\r\\n         OptionGroup group = options.getOptionGroup(option);\\r\\n         if (group != null) {\\r\\n             if (!processedGroups.contains(group)) {\\r\\n                 processedGroups.add(group);\\r\\n                 appendOptionGroup(buff, group);\\r\\n             }\\r\\n         } else {\\r\\n             appendOption(buff, option, option.isRequired());\\r\\n         }\\r\\n-        if (i.hasNext()) {\\r\\n+        if (it.hasNext()) {\\r\\n             buff.append(\\\" \\\");\\r\\n         }\\r\\n     }\\r\\n     printWrapped(pw, width, buff.toString().indexOf(' ') + 1, buff.toString());\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2011","diff":"\"@@ -1,24 +1,24 @@\\n public void printUsage(PrintWriter pw, int width, String app, Options options) {\\r\\n     StringBuffer buff = new StringBuffer(getSyntaxPrefix()).append(app).append(\\\" \\\");\\r\\n-    final Collection<OptionGroup> processedGroups = new ArrayList<OptionGroup>();\\r\\n+    Collection<OptionGroup> processedGroups = new ArrayList<OptionGroup>();\\r\\n     List<Option> optList = new ArrayList<Option>(options.getOptions());\\r\\n     if (getOptionComparator() != null) {\\r\\n         Collections.sort(optList, getOptionComparator());\\r\\n     }\\r\\n     for (Iterator i = optList.iterator(); i.hasNext(); ) {\\r\\n         Option option = (Option) i.next();\\r\\n         OptionGroup group = options.getOptionGroup(option);\\r\\n         if (group != null) {\\r\\n             if (!processedGroups.contains(group)) {\\r\\n                 processedGroups.add(group);\\r\\n                 appendOptionGroup(buff, group);\\r\\n             }\\r\\n         } else {\\r\\n             appendOption(buff, option, option.isRequired());\\r\\n         }\\r\\n         if (i.hasNext()) {\\r\\n             buff.append(\\\" \\\");\\r\\n         }\\r\\n     }\\r\\n     printWrapped(pw, width, buff.toString().indexOf(' ') + 1, buff.toString());\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"simonetripodi@apache.org","authorName":"Simone Tripodi","commitYear":"2011","diff":"\"\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2011","diff":"\"@@ -1,23 +1,24 @@\\n public void printUsage(PrintWriter pw, int width, String app, Options options) {\\r\\n     StringBuffer buff = new StringBuffer(getSyntaxPrefix()).append(app).append(\\\" \\\");\\r\\n     final Collection<OptionGroup> processedGroups = new ArrayList<OptionGroup>();\\r\\n-    Option option;\\r\\n     List<Option> optList = new ArrayList<Option>(options.getOptions());\\r\\n-    Collections.sort(optList, getOptionComparator());\\r\\n+    if (getOptionComparator() != null) {\\r\\n+        Collections.sort(optList, getOptionComparator());\\r\\n+    }\\r\\n     for (Iterator i = optList.iterator(); i.hasNext(); ) {\\r\\n-        option = (Option) i.next();\\r\\n+        Option option = (Option) i.next();\\r\\n         OptionGroup group = options.getOptionGroup(option);\\r\\n         if (group != null) {\\r\\n             if (!processedGroups.contains(group)) {\\r\\n                 processedGroups.add(group);\\r\\n                 appendOptionGroup(buff, group);\\r\\n             }\\r\\n         } else {\\r\\n             appendOption(buff, option, option.isRequired());\\r\\n         }\\r\\n         if (i.hasNext()) {\\r\\n             buff.append(\\\" \\\");\\r\\n         }\\r\\n     }\\r\\n     printWrapped(pw, width, buff.toString().indexOf(' ') + 1, buff.toString());\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2011","diff":"\"@@ -1,23 +1,23 @@\\n public void printUsage(PrintWriter pw, int width, String app, Options options) {\\r\\n     StringBuffer buff = new StringBuffer(getSyntaxPrefix()).append(app).append(\\\" \\\");\\r\\n-    final Collection processedGroups = new ArrayList();\\r\\n+    final Collection<OptionGroup> processedGroups = new ArrayList<OptionGroup>();\\r\\n     Option option;\\r\\n-    List optList = new ArrayList(options.getOptions());\\r\\n+    List<Option> optList = new ArrayList<Option>(options.getOptions());\\r\\n     Collections.sort(optList, getOptionComparator());\\r\\n     for (Iterator i = optList.iterator(); i.hasNext(); ) {\\r\\n         option = (Option) i.next();\\r\\n         OptionGroup group = options.getOptionGroup(option);\\r\\n         if (group != null) {\\r\\n             if (!processedGroups.contains(group)) {\\r\\n                 processedGroups.add(group);\\r\\n                 appendOptionGroup(buff, group);\\r\\n             }\\r\\n         } else {\\r\\n             appendOption(buff, option, option.isRequired());\\r\\n         }\\r\\n         if (i.hasNext()) {\\r\\n             buff.append(\\\" \\\");\\r\\n         }\\r\\n     }\\r\\n     printWrapped(pw, width, buff.toString().indexOf(' ') + 1, buff.toString());\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2010","diff":"\"@@ -1,23 +1,23 @@\\n public void printUsage(PrintWriter pw, int width, String app, Options options) {\\r\\n-    StringBuffer buff = new StringBuffer(defaultSyntaxPrefix).append(app).append(\\\" \\\");\\r\\n+    StringBuffer buff = new StringBuffer(getSyntaxPrefix()).append(app).append(\\\" \\\");\\r\\n     final Collection processedGroups = new ArrayList();\\r\\n     Option option;\\r\\n     List optList = new ArrayList(options.getOptions());\\r\\n     Collections.sort(optList, getOptionComparator());\\r\\n     for (Iterator i = optList.iterator(); i.hasNext(); ) {\\r\\n         option = (Option) i.next();\\r\\n         OptionGroup group = options.getOptionGroup(option);\\r\\n         if (group != null) {\\r\\n             if (!processedGroups.contains(group)) {\\r\\n                 processedGroups.add(group);\\r\\n                 appendOptionGroup(buff, group);\\r\\n             }\\r\\n         } else {\\r\\n             appendOption(buff, option, option.isRequired());\\r\\n         }\\r\\n         if (i.hasNext()) {\\r\\n             buff.append(\\\" \\\");\\r\\n         }\\r\\n     }\\r\\n     printWrapped(pw, width, buff.toString().indexOf(' ') + 1, buff.toString());\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2010","diff":"\"\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2008","diff":"\"\""},{"authorEmail":"bayard@apache.org","authorName":"Henri Yandell","commitYear":"2008","diff":"\"@@ -1,23 +1,23 @@\\n public void printUsage(PrintWriter pw, int width, String app, Options options) {\\r\\n     StringBuffer buff = new StringBuffer(defaultSyntaxPrefix).append(app).append(\\\" \\\");\\r\\n     final Collection processedGroups = new ArrayList();\\r\\n     Option option;\\r\\n     List optList = new ArrayList(options.getOptions());\\r\\n-    Collections.sort(optList, new OptionComparator());\\r\\n+    Collections.sort(optList, getOptionComparator());\\r\\n     for (Iterator i = optList.iterator(); i.hasNext(); ) {\\r\\n         option = (Option) i.next();\\r\\n         OptionGroup group = options.getOptionGroup(option);\\r\\n         if (group != null) {\\r\\n             if (!processedGroups.contains(group)) {\\r\\n                 processedGroups.add(group);\\r\\n                 appendOptionGroup(buff, group);\\r\\n             }\\r\\n         } else {\\r\\n             appendOption(buff, option, option.isRequired());\\r\\n         }\\r\\n         if (i.hasNext()) {\\r\\n             buff.append(\\\" \\\");\\r\\n         }\\r\\n     }\\r\\n     printWrapped(pw, width, buff.toString().indexOf(' ') + 1, buff.toString());\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"bayard@apache.org","authorName":"Henri Yandell","commitYear":"2007","diff":"\"@@ -1,21 +1,23 @@\\n public void printUsage(PrintWriter pw, int width, String app, Options options) {\\r\\n     StringBuffer buff = new StringBuffer(defaultSyntaxPrefix).append(app).append(\\\" \\\");\\r\\n     final Collection processedGroups = new ArrayList();\\r\\n     Option option;\\r\\n-    for (Iterator i = options.getOptions().iterator(); i.hasNext(); ) {\\r\\n+    List optList = new ArrayList(options.getOptions());\\r\\n+    Collections.sort(optList, new OptionComparator());\\r\\n+    for (Iterator i = optList.iterator(); i.hasNext(); ) {\\r\\n         option = (Option) i.next();\\r\\n         OptionGroup group = options.getOptionGroup(option);\\r\\n         if (group != null) {\\r\\n             if (!processedGroups.contains(group)) {\\r\\n                 processedGroups.add(group);\\r\\n                 appendOptionGroup(buff, group);\\r\\n             }\\r\\n         } else {\\r\\n             appendOption(buff, option, option.isRequired());\\r\\n         }\\r\\n         if (i.hasNext()) {\\r\\n             buff.append(\\\" \\\");\\r\\n         }\\r\\n     }\\r\\n     printWrapped(pw, width, buff.toString().indexOf(' ') + 1, buff.toString());\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -1,38 +1,21 @@\\n public void printUsage(PrintWriter pw, int width, String app, Options options) {\\r\\n     StringBuffer buff = new StringBuffer(defaultSyntaxPrefix).append(app).append(\\\" \\\");\\r\\n-    ArrayList list = new ArrayList();\\r\\n+    final Collection processedGroups = new ArrayList();\\r\\n     Option option;\\r\\n     for (Iterator i = options.getOptions().iterator(); i.hasNext(); ) {\\r\\n         option = (Option) i.next();\\r\\n         OptionGroup group = options.getOptionGroup(option);\\r\\n-        if (group != null && !list.contains(group)) {\\r\\n-            list.add(group);\\r\\n-            Collection names = group.getNames();\\r\\n-            buff.append(\\\"[\\\");\\r\\n-            for (Iterator iter = names.iterator(); iter.hasNext(); ) {\\r\\n-                buff.append(iter.next());\\r\\n-                if (iter.hasNext()) {\\r\\n-                    buff.append(\\\" | \\\");\\r\\n-                }\\r\\n+        if (group != null) {\\r\\n+            if (!processedGroups.contains(group)) {\\r\\n+                processedGroups.add(group);\\r\\n+                appendOptionGroup(buff, group);\\r\\n             }\\r\\n-            buff.append(\\\"]\\\");\\r\\n         } else {\\r\\n-            if (!option.isRequired()) {\\r\\n-                buff.append(\\\"[\\\");\\r\\n-            }\\r\\n-            if (!\\\" \\\".equals(option.getOpt())) {\\r\\n-                buff.append(\\\"-\\\").append(option.getOpt());\\r\\n-            } else {\\r\\n-                buff.append(\\\"--\\\").append(option.getLongOpt());\\r\\n-            }\\r\\n-            if (option.hasArg() && option.getArgName() != null) {\\r\\n-                buff.append(\\\" \\\").append(option.getArgName());\\r\\n-            }\\r\\n-            if (!option.isRequired()) {\\r\\n-                buff.append(\\\"]\\\");\\r\\n-            }\\r\\n+            appendOption(buff, option, option.isRequired());\\r\\n+        }\\r\\n+        if (i.hasNext()) {\\r\\n             buff.append(\\\" \\\");\\r\\n         }\\r\\n     }\\r\\n     printWrapped(pw, width, buff.toString().indexOf(' ') + 1, buff.toString());\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -1,41 +1,38 @@\\n public void printUsage(PrintWriter pw, int width, String app, Options options) {\\r\\n     StringBuffer buff = new StringBuffer(defaultSyntaxPrefix).append(app).append(\\\" \\\");\\r\\n     ArrayList list = new ArrayList();\\r\\n     Option option;\\r\\n     for (Iterator i = options.getOptions().iterator(); i.hasNext(); ) {\\r\\n         option = (Option) i.next();\\r\\n         OptionGroup group = options.getOptionGroup(option);\\r\\n         if (group != null && !list.contains(group)) {\\r\\n             list.add(group);\\r\\n             Collection names = group.getNames();\\r\\n             buff.append(\\\"[\\\");\\r\\n             for (Iterator iter = names.iterator(); iter.hasNext(); ) {\\r\\n                 buff.append(iter.next());\\r\\n                 if (iter.hasNext()) {\\r\\n                     buff.append(\\\" | \\\");\\r\\n                 }\\r\\n             }\\r\\n             buff.append(\\\"]\\\");\\r\\n         } else {\\r\\n             if (!option.isRequired()) {\\r\\n                 buff.append(\\\"[\\\");\\r\\n             }\\r\\n             if (!\\\" \\\".equals(option.getOpt())) {\\r\\n                 buff.append(\\\"-\\\").append(option.getOpt());\\r\\n             } else {\\r\\n                 buff.append(\\\"--\\\").append(option.getLongOpt());\\r\\n             }\\r\\n-            if (option.hasArg()) {\\r\\n-                buff.append(\\\" \\\");\\r\\n-            }\\r\\n-            if (option.hasArg()) {\\r\\n-                buff.append(option.getArgName());\\r\\n+            if (option.hasArg() && option.getArgName() != null) {\\r\\n+                buff.append(\\\" \\\").append(option.getArgName());\\r\\n             }\\r\\n             if (!option.isRequired()) {\\r\\n                 buff.append(\\\"]\\\");\\r\\n             }\\r\\n             buff.append(\\\" \\\");\\r\\n         }\\r\\n     }\\r\\n     printWrapped(pw, width, buff.toString().indexOf(' ') + 1, buff.toString());\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -1,43 +1,41 @@\\n public void printUsage(PrintWriter pw, int width, String app, Options options) {\\r\\n     StringBuffer buff = new StringBuffer(defaultSyntaxPrefix).append(app).append(\\\" \\\");\\r\\n     ArrayList list = new ArrayList();\\r\\n     Option option;\\r\\n     for (Iterator i = options.getOptions().iterator(); i.hasNext(); ) {\\r\\n         option = (Option) i.next();\\r\\n         OptionGroup group = options.getOptionGroup(option);\\r\\n         if (group != null && !list.contains(group)) {\\r\\n             list.add(group);\\r\\n             Collection names = group.getNames();\\r\\n             buff.append(\\\"[\\\");\\r\\n             for (Iterator iter = names.iterator(); iter.hasNext(); ) {\\r\\n                 buff.append(iter.next());\\r\\n                 if (iter.hasNext()) {\\r\\n                     buff.append(\\\" | \\\");\\r\\n                 }\\r\\n             }\\r\\n             buff.append(\\\"]\\\");\\r\\n         } else {\\r\\n             if (!option.isRequired()) {\\r\\n                 buff.append(\\\"[\\\");\\r\\n             }\\r\\n             if (!\\\" \\\".equals(option.getOpt())) {\\r\\n                 buff.append(\\\"-\\\").append(option.getOpt());\\r\\n             } else {\\r\\n                 buff.append(\\\"--\\\").append(option.getLongOpt());\\r\\n             }\\r\\n-            if (option.getValueSeparator() != (char) 0) {\\r\\n-                buff.append(option.getValueSeparator());\\r\\n-            } else if (option.hasArg()) {\\r\\n+            if (option.hasArg()) {\\r\\n                 buff.append(\\\" \\\");\\r\\n             }\\r\\n             if (option.hasArg()) {\\r\\n                 buff.append(option.getArgName());\\r\\n             }\\r\\n             if (!option.isRequired()) {\\r\\n                 buff.append(\\\"]\\\");\\r\\n             }\\r\\n             buff.append(\\\" \\\");\\r\\n         }\\r\\n     }\\r\\n     printWrapped(pw, width, buff.toString().indexOf(' ') + 1, buff.toString());\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -1,35 +1,43 @@\\n public void printUsage(PrintWriter pw, int width, String app, Options options) {\\r\\n     StringBuffer buff = new StringBuffer(defaultSyntaxPrefix).append(app).append(\\\" \\\");\\r\\n     ArrayList list = new ArrayList();\\r\\n     Option option;\\r\\n     for (Iterator i = options.getOptions().iterator(); i.hasNext(); ) {\\r\\n         option = (Option) i.next();\\r\\n         OptionGroup group = options.getOptionGroup(option);\\r\\n         if (group != null && !list.contains(group)) {\\r\\n             list.add(group);\\r\\n             Collection names = group.getNames();\\r\\n             buff.append(\\\"[\\\");\\r\\n             for (Iterator iter = names.iterator(); iter.hasNext(); ) {\\r\\n                 buff.append(iter.next());\\r\\n                 if (iter.hasNext()) {\\r\\n                     buff.append(\\\" | \\\");\\r\\n                 }\\r\\n             }\\r\\n             buff.append(\\\"]\\\");\\r\\n         } else {\\r\\n             if (!option.isRequired()) {\\r\\n                 buff.append(\\\"[\\\");\\r\\n             }\\r\\n-            buff.append(\\\"-\\\").append(option.getOpt());\\r\\n+            if (!\\\" \\\".equals(option.getOpt())) {\\r\\n+                buff.append(\\\"-\\\").append(option.getOpt());\\r\\n+            } else {\\r\\n+                buff.append(\\\"--\\\").append(option.getLongOpt());\\r\\n+            }\\r\\n+            if (option.getValueSeparator() != (char) 0) {\\r\\n+                buff.append(option.getValueSeparator());\\r\\n+            } else if (option.hasArg()) {\\r\\n+                buff.append(\\\" \\\");\\r\\n+            }\\r\\n             if (option.hasArg()) {\\r\\n-                buff.append(\\\" arg\\\");\\r\\n+                buff.append(option.getArgName());\\r\\n             }\\r\\n             if (!option.isRequired()) {\\r\\n                 buff.append(\\\"]\\\");\\r\\n             }\\r\\n             buff.append(\\\" \\\");\\r\\n         }\\r\\n     }\\r\\n-    System.out.println(\\\"->\\\" + buff.toString());\\r\\n     printWrapped(pw, width, buff.toString().indexOf(' ') + 1, buff.toString());\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -0,0 +1,35 @@\\n+public void printUsage(PrintWriter pw, int width, String app, Options options) {\\r\\n+    StringBuffer buff = new StringBuffer(defaultSyntaxPrefix).append(app).append(\\\" \\\");\\r\\n+    ArrayList list = new ArrayList();\\r\\n+    Option option;\\r\\n+    for (Iterator i = options.getOptions().iterator(); i.hasNext(); ) {\\r\\n+        option = (Option) i.next();\\r\\n+        OptionGroup group = options.getOptionGroup(option);\\r\\n+        if (group != null && !list.contains(group)) {\\r\\n+            list.add(group);\\r\\n+            Collection names = group.getNames();\\r\\n+            buff.append(\\\"[\\\");\\r\\n+            for (Iterator iter = names.iterator(); iter.hasNext(); ) {\\r\\n+                buff.append(iter.next());\\r\\n+                if (iter.hasNext()) {\\r\\n+                    buff.append(\\\" | \\\");\\r\\n+                }\\r\\n+            }\\r\\n+            buff.append(\\\"]\\\");\\r\\n+        } else {\\r\\n+            if (!option.isRequired()) {\\r\\n+                buff.append(\\\"[\\\");\\r\\n+            }\\r\\n+            buff.append(\\\"-\\\").append(option.getOpt());\\r\\n+            if (option.hasArg()) {\\r\\n+                buff.append(\\\" arg\\\");\\r\\n+            }\\r\\n+            if (!option.isRequired()) {\\r\\n+                buff.append(\\\"]\\\");\\r\\n+            }\\r\\n+            buff.append(\\\" \\\");\\r\\n+        }\\r\\n+    }\\r\\n+    System.out.println(\\\"->\\\" + buff.toString());\\r\\n+    printWrapped(pw, width, buff.toString().indexOf(' ') + 1, buff.toString());\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\main\java\org\apache\commons\cli\HelpFormatter.java	printWrapped	org.apache.commons.cli.HelpFormatter.printWrapped(PrintWriter, int, int, String)	640	645	1	[{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,5 +1,5 @@\\n-public void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text) {\\r\\n+public void printWrapped(final PrintWriter pw, final int width, final int nextLineTabStop, final String text) {\\r\\n     final StringBuffer sb = new StringBuffer(text.length());\\r\\n     renderWrappedTextBlock(sb, width, nextLineTabStop, text);\\r\\n     pw.println(sb.toString());\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,5 +1,5 @@\\n public void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text) {\\r\\n-    StringBuffer sb = new StringBuffer(text.length());\\r\\n+    final StringBuffer sb = new StringBuffer(text.length());\\r\\n     renderWrappedTextBlock(sb, width, nextLineTabStop, text);\\r\\n     pw.println(sb.toString());\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2010","diff":"\"@@ -1,5 +1,5 @@\\n public void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text) {\\r\\n     StringBuffer sb = new StringBuffer(text.length());\\r\\n-    renderWrappedText(sb, width, nextLineTabStop, text);\\r\\n+    renderWrappedTextBlock(sb, width, nextLineTabStop, text);\\r\\n     pw.println(sb.toString());\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2008","diff":"\"\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"\""},{"authorEmail":"jstrachan@apache.org","authorName":"James Strachan","commitYear":"2002","diff":"\"@@ -0,0 +1,5 @@\\n+public void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text) {\\r\\n+    StringBuffer sb = new StringBuffer(text.length());\\r\\n+    renderWrappedText(sb, width, nextLineTabStop, text);\\r\\n+    pw.println(sb.toString());\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\main\java\org\apache\commons\cli\HelpFormatter.java	printWrapped	org.apache.commons.cli.HelpFormatter.printWrapped(PrintWriter, int, String)	654	656	1	[{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,3 +1,3 @@\\n-public void printWrapped(PrintWriter pw, int width, String text) {\\r\\n+public void printWrapped(final PrintWriter pw, final int width, final String text) {\\r\\n     printWrapped(pw, width, 0, text);\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2008","diff":"\"\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"\""},{"authorEmail":"jstrachan@apache.org","authorName":"James Strachan","commitYear":"2002","diff":"\"@@ -0,0 +1,3 @@\\n+public void printWrapped(PrintWriter pw, int width, String text) {\\r\\n+    printWrapped(pw, width, 0, text);\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\main\java\org\apache\commons\cli\HelpFormatter.java	renderOptions	org.apache.commons.cli.HelpFormatter.renderOptions(StringBuffer, int, Options, int, int)	669	740	16	[{"authorEmail":"arturobernalg@gmail.com","authorName":"Arturo Bernal","commitYear":"2023","diff":"\"@@ -1,50 +1,50 @@\\n protected StringBuffer renderOptions(final StringBuffer sb, final int width, final Options options, final int leftPad, final int descPad) {\\r\\n     final String lpad = createPadding(leftPad);\\r\\n     final String dpad = createPadding(descPad);\\r\\n     int max = 0;\\r\\n     final List<StringBuffer> prefixList = new ArrayList<>();\\r\\n     final List<Option> optList = options.helpOptions();\\r\\n     if (getOptionComparator() != null) {\\r\\n         Collections.sort(optList, getOptionComparator());\\r\\n     }\\r\\n     for (final Option option : optList) {\\r\\n         final StringBuffer optBuf = new StringBuffer();\\r\\n         if (option.getOpt() == null) {\\r\\n             optBuf.append(lpad).append(\\\"   \\\").append(getLongOptPrefix()).append(option.getLongOpt());\\r\\n         } else {\\r\\n             optBuf.append(lpad).append(getOptPrefix()).append(option.getOpt());\\r\\n             if (option.hasLongOpt()) {\\r\\n                 optBuf.append(',').append(getLongOptPrefix()).append(option.getLongOpt());\\r\\n             }\\r\\n         }\\r\\n         if (option.hasArg()) {\\r\\n             final String argName = option.getArgName();\\r\\n             if (argName != null && argName.isEmpty()) {\\r\\n                 optBuf.append(' ');\\r\\n             } else {\\r\\n                 optBuf.append(option.hasLongOpt() ? longOptSeparator : \\\" \\\");\\r\\n                 optBuf.append(\\\"<\\\").append(argName != null ? option.getArgName() : getArgName()).append(\\\">\\\");\\r\\n             }\\r\\n         }\\r\\n         prefixList.add(optBuf);\\r\\n-        max = optBuf.length() > max ? optBuf.length() : max;\\r\\n+        max = Math.max(optBuf.length(), max);\\r\\n     }\\r\\n     int x = 0;\\r\\n     for (final Iterator<Option> it = optList.iterator(); it.hasNext(); ) {\\r\\n         final Option option = it.next();\\r\\n         final StringBuilder optBuf = new StringBuilder(prefixList.get(x++).toString());\\r\\n         if (optBuf.length() < max) {\\r\\n             optBuf.append(createPadding(max - optBuf.length()));\\r\\n         }\\r\\n         optBuf.append(dpad);\\r\\n         final int nextLineTabStop = max + descPad;\\r\\n         if (option.getDescription() != null) {\\r\\n             optBuf.append(option.getDescription());\\r\\n         }\\r\\n         renderWrappedText(sb, width, nextLineTabStop, optBuf.toString());\\r\\n         if (it.hasNext()) {\\r\\n             sb.append(getNewLine());\\r\\n         }\\r\\n     }\\r\\n     return sb;\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"\""},{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"@@ -1,50 +1,50 @@\\n protected StringBuffer renderOptions(final StringBuffer sb, final int width, final Options options, final int leftPad, final int descPad) {\\r\\n     final String lpad = createPadding(leftPad);\\r\\n     final String dpad = createPadding(descPad);\\r\\n     int max = 0;\\r\\n     final List<StringBuffer> prefixList = new ArrayList<>();\\r\\n     final List<Option> optList = options.helpOptions();\\r\\n     if (getOptionComparator() != null) {\\r\\n         Collections.sort(optList, getOptionComparator());\\r\\n     }\\r\\n     for (final Option option : optList) {\\r\\n         final StringBuffer optBuf = new StringBuffer();\\r\\n         if (option.getOpt() == null) {\\r\\n             optBuf.append(lpad).append(\\\"   \\\").append(getLongOptPrefix()).append(option.getLongOpt());\\r\\n         } else {\\r\\n             optBuf.append(lpad).append(getOptPrefix()).append(option.getOpt());\\r\\n             if (option.hasLongOpt()) {\\r\\n                 optBuf.append(',').append(getLongOptPrefix()).append(option.getLongOpt());\\r\\n             }\\r\\n         }\\r\\n         if (option.hasArg()) {\\r\\n             final String argName = option.getArgName();\\r\\n-            if (argName != null && argName.length() == 0) {\\r\\n+            if (argName != null && argName.isEmpty()) {\\r\\n                 optBuf.append(' ');\\r\\n             } else {\\r\\n                 optBuf.append(option.hasLongOpt() ? longOptSeparator : \\\" \\\");\\r\\n                 optBuf.append(\\\"<\\\").append(argName != null ? option.getArgName() : getArgName()).append(\\\">\\\");\\r\\n             }\\r\\n         }\\r\\n         prefixList.add(optBuf);\\r\\n         max = optBuf.length() > max ? optBuf.length() : max;\\r\\n     }\\r\\n     int x = 0;\\r\\n     for (final Iterator<Option> it = optList.iterator(); it.hasNext(); ) {\\r\\n         final Option option = it.next();\\r\\n         final StringBuilder optBuf = new StringBuilder(prefixList.get(x++).toString());\\r\\n         if (optBuf.length() < max) {\\r\\n             optBuf.append(createPadding(max - optBuf.length()));\\r\\n         }\\r\\n         optBuf.append(dpad);\\r\\n         final int nextLineTabStop = max + descPad;\\r\\n         if (option.getDescription() != null) {\\r\\n             optBuf.append(option.getDescription());\\r\\n         }\\r\\n         renderWrappedText(sb, width, nextLineTabStop, optBuf.toString());\\r\\n         if (it.hasNext()) {\\r\\n             sb.append(getNewLine());\\r\\n         }\\r\\n     }\\r\\n     return sb;\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2020","diff":"\"@@ -1,50 +1,50 @@\\n protected StringBuffer renderOptions(final StringBuffer sb, final int width, final Options options, final int leftPad, final int descPad) {\\r\\n     final String lpad = createPadding(leftPad);\\r\\n     final String dpad = createPadding(descPad);\\r\\n     int max = 0;\\r\\n-    final List<StringBuffer> prefixList = new ArrayList<StringBuffer>();\\r\\n+    final List<StringBuffer> prefixList = new ArrayList<>();\\r\\n     final List<Option> optList = options.helpOptions();\\r\\n     if (getOptionComparator() != null) {\\r\\n         Collections.sort(optList, getOptionComparator());\\r\\n     }\\r\\n     for (final Option option : optList) {\\r\\n         final StringBuffer optBuf = new StringBuffer();\\r\\n         if (option.getOpt() == null) {\\r\\n             optBuf.append(lpad).append(\\\"   \\\").append(getLongOptPrefix()).append(option.getLongOpt());\\r\\n         } else {\\r\\n             optBuf.append(lpad).append(getOptPrefix()).append(option.getOpt());\\r\\n             if (option.hasLongOpt()) {\\r\\n                 optBuf.append(',').append(getLongOptPrefix()).append(option.getLongOpt());\\r\\n             }\\r\\n         }\\r\\n         if (option.hasArg()) {\\r\\n             final String argName = option.getArgName();\\r\\n             if (argName != null && argName.length() == 0) {\\r\\n                 optBuf.append(' ');\\r\\n             } else {\\r\\n                 optBuf.append(option.hasLongOpt() ? longOptSeparator : \\\" \\\");\\r\\n                 optBuf.append(\\\"<\\\").append(argName != null ? option.getArgName() : getArgName()).append(\\\">\\\");\\r\\n             }\\r\\n         }\\r\\n         prefixList.add(optBuf);\\r\\n         max = optBuf.length() > max ? optBuf.length() : max;\\r\\n     }\\r\\n     int x = 0;\\r\\n     for (final Iterator<Option> it = optList.iterator(); it.hasNext(); ) {\\r\\n         final Option option = it.next();\\r\\n         final StringBuilder optBuf = new StringBuilder(prefixList.get(x++).toString());\\r\\n         if (optBuf.length() < max) {\\r\\n             optBuf.append(createPadding(max - optBuf.length()));\\r\\n         }\\r\\n         optBuf.append(dpad);\\r\\n         final int nextLineTabStop = max + descPad;\\r\\n         if (option.getDescription() != null) {\\r\\n             optBuf.append(option.getDescription());\\r\\n         }\\r\\n         renderWrappedText(sb, width, nextLineTabStop, optBuf.toString());\\r\\n         if (it.hasNext()) {\\r\\n             sb.append(getNewLine());\\r\\n         }\\r\\n     }\\r\\n     return sb;\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2019","diff":"\"\""},{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,50 +1,50 @@\\n-protected StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad) {\\r\\n+protected StringBuffer renderOptions(final StringBuffer sb, final int width, final Options options, final int leftPad, final int descPad) {\\r\\n     final String lpad = createPadding(leftPad);\\r\\n     final String dpad = createPadding(descPad);\\r\\n     int max = 0;\\r\\n     final List<StringBuffer> prefixList = new ArrayList<StringBuffer>();\\r\\n     final List<Option> optList = options.helpOptions();\\r\\n     if (getOptionComparator() != null) {\\r\\n         Collections.sort(optList, getOptionComparator());\\r\\n     }\\r\\n     for (final Option option : optList) {\\r\\n         final StringBuffer optBuf = new StringBuffer();\\r\\n         if (option.getOpt() == null) {\\r\\n             optBuf.append(lpad).append(\\\"   \\\").append(getLongOptPrefix()).append(option.getLongOpt());\\r\\n         } else {\\r\\n             optBuf.append(lpad).append(getOptPrefix()).append(option.getOpt());\\r\\n             if (option.hasLongOpt()) {\\r\\n                 optBuf.append(',').append(getLongOptPrefix()).append(option.getLongOpt());\\r\\n             }\\r\\n         }\\r\\n         if (option.hasArg()) {\\r\\n             final String argName = option.getArgName();\\r\\n             if (argName != null && argName.length() == 0) {\\r\\n                 optBuf.append(' ');\\r\\n             } else {\\r\\n                 optBuf.append(option.hasLongOpt() ? longOptSeparator : \\\" \\\");\\r\\n                 optBuf.append(\\\"<\\\").append(argName != null ? option.getArgName() : getArgName()).append(\\\">\\\");\\r\\n             }\\r\\n         }\\r\\n         prefixList.add(optBuf);\\r\\n         max = optBuf.length() > max ? optBuf.length() : max;\\r\\n     }\\r\\n     int x = 0;\\r\\n     for (final Iterator<Option> it = optList.iterator(); it.hasNext(); ) {\\r\\n         final Option option = it.next();\\r\\n         final StringBuilder optBuf = new StringBuilder(prefixList.get(x++).toString());\\r\\n         if (optBuf.length() < max) {\\r\\n             optBuf.append(createPadding(max - optBuf.length()));\\r\\n         }\\r\\n         optBuf.append(dpad);\\r\\n         final int nextLineTabStop = max + descPad;\\r\\n         if (option.getDescription() != null) {\\r\\n             optBuf.append(option.getDescription());\\r\\n         }\\r\\n         renderWrappedText(sb, width, nextLineTabStop, optBuf.toString());\\r\\n         if (it.hasNext()) {\\r\\n             sb.append(getNewLine());\\r\\n         }\\r\\n     }\\r\\n     return sb;\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,50 +1,50 @@\\n protected StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad) {\\r\\n     final String lpad = createPadding(leftPad);\\r\\n     final String dpad = createPadding(descPad);\\r\\n     int max = 0;\\r\\n-    List<StringBuffer> prefixList = new ArrayList<StringBuffer>();\\r\\n-    List<Option> optList = options.helpOptions();\\r\\n+    final List<StringBuffer> prefixList = new ArrayList<StringBuffer>();\\r\\n+    final List<Option> optList = options.helpOptions();\\r\\n     if (getOptionComparator() != null) {\\r\\n         Collections.sort(optList, getOptionComparator());\\r\\n     }\\r\\n-    for (Option option : optList) {\\r\\n-        StringBuffer optBuf = new StringBuffer();\\r\\n+    for (final Option option : optList) {\\r\\n+        final StringBuffer optBuf = new StringBuffer();\\r\\n         if (option.getOpt() == null) {\\r\\n             optBuf.append(lpad).append(\\\"   \\\").append(getLongOptPrefix()).append(option.getLongOpt());\\r\\n         } else {\\r\\n             optBuf.append(lpad).append(getOptPrefix()).append(option.getOpt());\\r\\n             if (option.hasLongOpt()) {\\r\\n                 optBuf.append(',').append(getLongOptPrefix()).append(option.getLongOpt());\\r\\n             }\\r\\n         }\\r\\n         if (option.hasArg()) {\\r\\n-            String argName = option.getArgName();\\r\\n+            final String argName = option.getArgName();\\r\\n             if (argName != null && argName.length() == 0) {\\r\\n                 optBuf.append(' ');\\r\\n             } else {\\r\\n                 optBuf.append(option.hasLongOpt() ? longOptSeparator : \\\" \\\");\\r\\n                 optBuf.append(\\\"<\\\").append(argName != null ? option.getArgName() : getArgName()).append(\\\">\\\");\\r\\n             }\\r\\n         }\\r\\n         prefixList.add(optBuf);\\r\\n         max = optBuf.length() > max ? optBuf.length() : max;\\r\\n     }\\r\\n     int x = 0;\\r\\n-    for (Iterator<Option> it = optList.iterator(); it.hasNext(); ) {\\r\\n-        Option option = it.next();\\r\\n-        StringBuilder optBuf = new StringBuilder(prefixList.get(x++).toString());\\r\\n+    for (final Iterator<Option> it = optList.iterator(); it.hasNext(); ) {\\r\\n+        final Option option = it.next();\\r\\n+        final StringBuilder optBuf = new StringBuilder(prefixList.get(x++).toString());\\r\\n         if (optBuf.length() < max) {\\r\\n             optBuf.append(createPadding(max - optBuf.length()));\\r\\n         }\\r\\n         optBuf.append(dpad);\\r\\n-        int nextLineTabStop = max + descPad;\\r\\n+        final int nextLineTabStop = max + descPad;\\r\\n         if (option.getDescription() != null) {\\r\\n             optBuf.append(option.getDescription());\\r\\n         }\\r\\n         renderWrappedText(sb, width, nextLineTabStop, optBuf.toString());\\r\\n         if (it.hasNext()) {\\r\\n             sb.append(getNewLine());\\r\\n         }\\r\\n     }\\r\\n     return sb;\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"britter@apache.org","authorName":"Benedikt Ritter","commitYear":"2015","diff":"\"@@ -1,50 +1,50 @@\\n protected StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad) {\\r\\n     final String lpad = createPadding(leftPad);\\r\\n     final String dpad = createPadding(descPad);\\r\\n     int max = 0;\\r\\n     List<StringBuffer> prefixList = new ArrayList<StringBuffer>();\\r\\n     List<Option> optList = options.helpOptions();\\r\\n     if (getOptionComparator() != null) {\\r\\n         Collections.sort(optList, getOptionComparator());\\r\\n     }\\r\\n     for (Option option : optList) {\\r\\n         StringBuffer optBuf = new StringBuffer();\\r\\n         if (option.getOpt() == null) {\\r\\n             optBuf.append(lpad).append(\\\"   \\\").append(getLongOptPrefix()).append(option.getLongOpt());\\r\\n         } else {\\r\\n             optBuf.append(lpad).append(getOptPrefix()).append(option.getOpt());\\r\\n             if (option.hasLongOpt()) {\\r\\n                 optBuf.append(',').append(getLongOptPrefix()).append(option.getLongOpt());\\r\\n             }\\r\\n         }\\r\\n         if (option.hasArg()) {\\r\\n             String argName = option.getArgName();\\r\\n             if (argName != null && argName.length() == 0) {\\r\\n                 optBuf.append(' ');\\r\\n             } else {\\r\\n                 optBuf.append(option.hasLongOpt() ? longOptSeparator : \\\" \\\");\\r\\n                 optBuf.append(\\\"<\\\").append(argName != null ? option.getArgName() : getArgName()).append(\\\">\\\");\\r\\n             }\\r\\n         }\\r\\n         prefixList.add(optBuf);\\r\\n-        max = (optBuf.length() > max) ? optBuf.length() : max;\\r\\n+        max = optBuf.length() > max ? optBuf.length() : max;\\r\\n     }\\r\\n     int x = 0;\\r\\n     for (Iterator<Option> it = optList.iterator(); it.hasNext(); ) {\\r\\n         Option option = it.next();\\r\\n         StringBuilder optBuf = new StringBuilder(prefixList.get(x++).toString());\\r\\n         if (optBuf.length() < max) {\\r\\n             optBuf.append(createPadding(max - optBuf.length()));\\r\\n         }\\r\\n         optBuf.append(dpad);\\r\\n         int nextLineTabStop = max + descPad;\\r\\n         if (option.getDescription() != null) {\\r\\n             optBuf.append(option.getDescription());\\r\\n         }\\r\\n         renderWrappedText(sb, width, nextLineTabStop, optBuf.toString());\\r\\n         if (it.hasNext()) {\\r\\n             sb.append(getNewLine());\\r\\n         }\\r\\n     }\\r\\n     return sb;\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2012","diff":"\"@@ -1,50 +1,50 @@\\n protected StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad) {\\r\\n     final String lpad = createPadding(leftPad);\\r\\n     final String dpad = createPadding(descPad);\\r\\n     int max = 0;\\r\\n     List<StringBuffer> prefixList = new ArrayList<StringBuffer>();\\r\\n     List<Option> optList = options.helpOptions();\\r\\n     if (getOptionComparator() != null) {\\r\\n         Collections.sort(optList, getOptionComparator());\\r\\n     }\\r\\n     for (Option option : optList) {\\r\\n         StringBuffer optBuf = new StringBuffer();\\r\\n         if (option.getOpt() == null) {\\r\\n             optBuf.append(lpad).append(\\\"   \\\").append(getLongOptPrefix()).append(option.getLongOpt());\\r\\n         } else {\\r\\n             optBuf.append(lpad).append(getOptPrefix()).append(option.getOpt());\\r\\n             if (option.hasLongOpt()) {\\r\\n                 optBuf.append(',').append(getLongOptPrefix()).append(option.getLongOpt());\\r\\n             }\\r\\n         }\\r\\n         if (option.hasArg()) {\\r\\n             String argName = option.getArgName();\\r\\n             if (argName != null && argName.length() == 0) {\\r\\n                 optBuf.append(' ');\\r\\n             } else {\\r\\n                 optBuf.append(option.hasLongOpt() ? longOptSeparator : \\\" \\\");\\r\\n                 optBuf.append(\\\"<\\\").append(argName != null ? option.getArgName() : getArgName()).append(\\\">\\\");\\r\\n             }\\r\\n         }\\r\\n         prefixList.add(optBuf);\\r\\n         max = (optBuf.length() > max) ? optBuf.length() : max;\\r\\n     }\\r\\n     int x = 0;\\r\\n-    for (Iterator i = optList.iterator(); i.hasNext(); ) {\\r\\n-        Option option = (Option) i.next();\\r\\n+    for (Iterator<Option> it = optList.iterator(); it.hasNext(); ) {\\r\\n+        Option option = it.next();\\r\\n         StringBuilder optBuf = new StringBuilder(prefixList.get(x++).toString());\\r\\n         if (optBuf.length() < max) {\\r\\n             optBuf.append(createPadding(max - optBuf.length()));\\r\\n         }\\r\\n         optBuf.append(dpad);\\r\\n         int nextLineTabStop = max + descPad;\\r\\n         if (option.getDescription() != null) {\\r\\n             optBuf.append(option.getDescription());\\r\\n         }\\r\\n         renderWrappedText(sb, width, nextLineTabStop, optBuf.toString());\\r\\n-        if (i.hasNext()) {\\r\\n+        if (it.hasNext()) {\\r\\n             sb.append(getNewLine());\\r\\n         }\\r\\n     }\\r\\n     return sb;\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2011","diff":"\"@@ -1,50 +1,50 @@\\n protected StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad) {\\r\\n     final String lpad = createPadding(leftPad);\\r\\n     final String dpad = createPadding(descPad);\\r\\n     int max = 0;\\r\\n     List<StringBuffer> prefixList = new ArrayList<StringBuffer>();\\r\\n     List<Option> optList = options.helpOptions();\\r\\n     if (getOptionComparator() != null) {\\r\\n         Collections.sort(optList, getOptionComparator());\\r\\n     }\\r\\n     for (Option option : optList) {\\r\\n         StringBuffer optBuf = new StringBuffer();\\r\\n         if (option.getOpt() == null) {\\r\\n             optBuf.append(lpad).append(\\\"   \\\").append(getLongOptPrefix()).append(option.getLongOpt());\\r\\n         } else {\\r\\n             optBuf.append(lpad).append(getOptPrefix()).append(option.getOpt());\\r\\n             if (option.hasLongOpt()) {\\r\\n                 optBuf.append(',').append(getLongOptPrefix()).append(option.getLongOpt());\\r\\n             }\\r\\n         }\\r\\n         if (option.hasArg()) {\\r\\n             String argName = option.getArgName();\\r\\n             if (argName != null && argName.length() == 0) {\\r\\n                 optBuf.append(' ');\\r\\n             } else {\\r\\n                 optBuf.append(option.hasLongOpt() ? longOptSeparator : \\\" \\\");\\r\\n                 optBuf.append(\\\"<\\\").append(argName != null ? option.getArgName() : getArgName()).append(\\\">\\\");\\r\\n             }\\r\\n         }\\r\\n         prefixList.add(optBuf);\\r\\n         max = (optBuf.length() > max) ? optBuf.length() : max;\\r\\n     }\\r\\n     int x = 0;\\r\\n     for (Iterator i = optList.iterator(); i.hasNext(); ) {\\r\\n         Option option = (Option) i.next();\\r\\n-        StringBuffer optBuf = new StringBuffer(prefixList.get(x++).toString());\\r\\n+        StringBuilder optBuf = new StringBuilder(prefixList.get(x++).toString());\\r\\n         if (optBuf.length() < max) {\\r\\n             optBuf.append(createPadding(max - optBuf.length()));\\r\\n         }\\r\\n         optBuf.append(dpad);\\r\\n         int nextLineTabStop = max + descPad;\\r\\n         if (option.getDescription() != null) {\\r\\n             optBuf.append(option.getDescription());\\r\\n         }\\r\\n         renderWrappedText(sb, width, nextLineTabStop, optBuf.toString());\\r\\n         if (i.hasNext()) {\\r\\n             sb.append(getNewLine());\\r\\n         }\\r\\n     }\\r\\n     return sb;\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"simonetripodi@apache.org","authorName":"Simone Tripodi","commitYear":"2011","diff":"\"\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2011","diff":"\"@@ -1,49 +1,50 @@\\n protected StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad) {\\r\\n     final String lpad = createPadding(leftPad);\\r\\n     final String dpad = createPadding(descPad);\\r\\n     int max = 0;\\r\\n-    StringBuffer optBuf;\\r\\n     List<StringBuffer> prefixList = new ArrayList<StringBuffer>();\\r\\n     List<Option> optList = options.helpOptions();\\r\\n-    Collections.sort(optList, getOptionComparator());\\r\\n+    if (getOptionComparator() != null) {\\r\\n+        Collections.sort(optList, getOptionComparator());\\r\\n+    }\\r\\n     for (Option option : optList) {\\r\\n-        optBuf = new StringBuffer();\\r\\n+        StringBuffer optBuf = new StringBuffer();\\r\\n         if (option.getOpt() == null) {\\r\\n             optBuf.append(lpad).append(\\\"   \\\").append(getLongOptPrefix()).append(option.getLongOpt());\\r\\n         } else {\\r\\n             optBuf.append(lpad).append(getOptPrefix()).append(option.getOpt());\\r\\n             if (option.hasLongOpt()) {\\r\\n                 optBuf.append(',').append(getLongOptPrefix()).append(option.getLongOpt());\\r\\n             }\\r\\n         }\\r\\n         if (option.hasArg()) {\\r\\n             String argName = option.getArgName();\\r\\n             if (argName != null && argName.length() == 0) {\\r\\n                 optBuf.append(' ');\\r\\n             } else {\\r\\n                 optBuf.append(option.hasLongOpt() ? longOptSeparator : \\\" \\\");\\r\\n                 optBuf.append(\\\"<\\\").append(argName != null ? option.getArgName() : getArgName()).append(\\\">\\\");\\r\\n             }\\r\\n         }\\r\\n         prefixList.add(optBuf);\\r\\n         max = (optBuf.length() > max) ? optBuf.length() : max;\\r\\n     }\\r\\n     int x = 0;\\r\\n     for (Iterator i = optList.iterator(); i.hasNext(); ) {\\r\\n         Option option = (Option) i.next();\\r\\n-        optBuf = new StringBuffer(prefixList.get(x++).toString());\\r\\n+        StringBuffer optBuf = new StringBuffer(prefixList.get(x++).toString());\\r\\n         if (optBuf.length() < max) {\\r\\n             optBuf.append(createPadding(max - optBuf.length()));\\r\\n         }\\r\\n         optBuf.append(dpad);\\r\\n         int nextLineTabStop = max + descPad;\\r\\n         if (option.getDescription() != null) {\\r\\n             optBuf.append(option.getDescription());\\r\\n         }\\r\\n         renderWrappedText(sb, width, nextLineTabStop, optBuf.toString());\\r\\n         if (i.hasNext()) {\\r\\n             sb.append(getNewLine());\\r\\n         }\\r\\n     }\\r\\n     return sb;\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2011","diff":"\"@@ -1,50 +1,49 @@\\n protected StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad) {\\r\\n     final String lpad = createPadding(leftPad);\\r\\n     final String dpad = createPadding(descPad);\\r\\n     int max = 0;\\r\\n     StringBuffer optBuf;\\r\\n-    List prefixList = new ArrayList();\\r\\n-    List optList = options.helpOptions();\\r\\n+    List<StringBuffer> prefixList = new ArrayList<StringBuffer>();\\r\\n+    List<Option> optList = options.helpOptions();\\r\\n     Collections.sort(optList, getOptionComparator());\\r\\n-    for (Iterator i = optList.iterator(); i.hasNext(); ) {\\r\\n-        Option option = (Option) i.next();\\r\\n+    for (Option option : optList) {\\r\\n         optBuf = new StringBuffer();\\r\\n         if (option.getOpt() == null) {\\r\\n             optBuf.append(lpad).append(\\\"   \\\").append(getLongOptPrefix()).append(option.getLongOpt());\\r\\n         } else {\\r\\n             optBuf.append(lpad).append(getOptPrefix()).append(option.getOpt());\\r\\n             if (option.hasLongOpt()) {\\r\\n                 optBuf.append(',').append(getLongOptPrefix()).append(option.getLongOpt());\\r\\n             }\\r\\n         }\\r\\n         if (option.hasArg()) {\\r\\n             String argName = option.getArgName();\\r\\n             if (argName != null && argName.length() == 0) {\\r\\n                 optBuf.append(' ');\\r\\n             } else {\\r\\n                 optBuf.append(option.hasLongOpt() ? longOptSeparator : \\\" \\\");\\r\\n                 optBuf.append(\\\"<\\\").append(argName != null ? option.getArgName() : getArgName()).append(\\\">\\\");\\r\\n             }\\r\\n         }\\r\\n         prefixList.add(optBuf);\\r\\n         max = (optBuf.length() > max) ? optBuf.length() : max;\\r\\n     }\\r\\n     int x = 0;\\r\\n     for (Iterator i = optList.iterator(); i.hasNext(); ) {\\r\\n         Option option = (Option) i.next();\\r\\n         optBuf = new StringBuffer(prefixList.get(x++).toString());\\r\\n         if (optBuf.length() < max) {\\r\\n             optBuf.append(createPadding(max - optBuf.length()));\\r\\n         }\\r\\n         optBuf.append(dpad);\\r\\n         int nextLineTabStop = max + descPad;\\r\\n         if (option.getDescription() != null) {\\r\\n             optBuf.append(option.getDescription());\\r\\n         }\\r\\n         renderWrappedText(sb, width, nextLineTabStop, optBuf.toString());\\r\\n         if (i.hasNext()) {\\r\\n             sb.append(getNewLine());\\r\\n         }\\r\\n     }\\r\\n     return sb;\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2010","diff":"\"@@ -1,50 +1,50 @@\\n protected StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad) {\\r\\n     final String lpad = createPadding(leftPad);\\r\\n     final String dpad = createPadding(descPad);\\r\\n     int max = 0;\\r\\n     StringBuffer optBuf;\\r\\n     List prefixList = new ArrayList();\\r\\n     List optList = options.helpOptions();\\r\\n     Collections.sort(optList, getOptionComparator());\\r\\n     for (Iterator i = optList.iterator(); i.hasNext(); ) {\\r\\n         Option option = (Option) i.next();\\r\\n         optBuf = new StringBuffer();\\r\\n         if (option.getOpt() == null) {\\r\\n-            optBuf.append(lpad).append(\\\"   \\\" + defaultLongOptPrefix).append(option.getLongOpt());\\r\\n+            optBuf.append(lpad).append(\\\"   \\\").append(getLongOptPrefix()).append(option.getLongOpt());\\r\\n         } else {\\r\\n-            optBuf.append(lpad).append(defaultOptPrefix).append(option.getOpt());\\r\\n+            optBuf.append(lpad).append(getOptPrefix()).append(option.getOpt());\\r\\n             if (option.hasLongOpt()) {\\r\\n-                optBuf.append(',').append(defaultLongOptPrefix).append(option.getLongOpt());\\r\\n+                optBuf.append(',').append(getLongOptPrefix()).append(option.getLongOpt());\\r\\n             }\\r\\n         }\\r\\n         if (option.hasArg()) {\\r\\n             String argName = option.getArgName();\\r\\n             if (argName != null && argName.length() == 0) {\\r\\n                 optBuf.append(' ');\\r\\n             } else {\\r\\n                 optBuf.append(option.hasLongOpt() ? longOptSeparator : \\\" \\\");\\r\\n                 optBuf.append(\\\"<\\\").append(argName != null ? option.getArgName() : getArgName()).append(\\\">\\\");\\r\\n             }\\r\\n         }\\r\\n         prefixList.add(optBuf);\\r\\n         max = (optBuf.length() > max) ? optBuf.length() : max;\\r\\n     }\\r\\n     int x = 0;\\r\\n     for (Iterator i = optList.iterator(); i.hasNext(); ) {\\r\\n         Option option = (Option) i.next();\\r\\n         optBuf = new StringBuffer(prefixList.get(x++).toString());\\r\\n         if (optBuf.length() < max) {\\r\\n             optBuf.append(createPadding(max - optBuf.length()));\\r\\n         }\\r\\n         optBuf.append(dpad);\\r\\n         int nextLineTabStop = max + descPad;\\r\\n         if (option.getDescription() != null) {\\r\\n             optBuf.append(option.getDescription());\\r\\n         }\\r\\n         renderWrappedText(sb, width, nextLineTabStop, optBuf.toString());\\r\\n         if (i.hasNext()) {\\r\\n-            sb.append(defaultNewLine);\\r\\n+            sb.append(getNewLine());\\r\\n         }\\r\\n     }\\r\\n     return sb;\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2010","diff":"\"@@ -1,49 +1,50 @@\\n protected StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad) {\\r\\n     final String lpad = createPadding(leftPad);\\r\\n     final String dpad = createPadding(descPad);\\r\\n     int max = 0;\\r\\n     StringBuffer optBuf;\\r\\n     List prefixList = new ArrayList();\\r\\n     List optList = options.helpOptions();\\r\\n     Collections.sort(optList, getOptionComparator());\\r\\n     for (Iterator i = optList.iterator(); i.hasNext(); ) {\\r\\n         Option option = (Option) i.next();\\r\\n         optBuf = new StringBuffer();\\r\\n         if (option.getOpt() == null) {\\r\\n             optBuf.append(lpad).append(\\\"   \\\" + defaultLongOptPrefix).append(option.getLongOpt());\\r\\n         } else {\\r\\n             optBuf.append(lpad).append(defaultOptPrefix).append(option.getOpt());\\r\\n             if (option.hasLongOpt()) {\\r\\n                 optBuf.append(',').append(defaultLongOptPrefix).append(option.getLongOpt());\\r\\n             }\\r\\n         }\\r\\n         if (option.hasArg()) {\\r\\n-            if (option.hasArgName()) {\\r\\n-                optBuf.append(option.hasLongOpt() ? longOptSeparator : \\\" \\\");\\r\\n-                optBuf.append(\\\"<\\\").append(option.getArgName()).append(\\\">\\\");\\r\\n-            } else {\\r\\n+            String argName = option.getArgName();\\r\\n+            if (argName != null && argName.length() == 0) {\\r\\n                 optBuf.append(' ');\\r\\n+            } else {\\r\\n+                optBuf.append(option.hasLongOpt() ? longOptSeparator : \\\" \\\");\\r\\n+                optBuf.append(\\\"<\\\").append(argName != null ? option.getArgName() : getArgName()).append(\\\">\\\");\\r\\n             }\\r\\n         }\\r\\n         prefixList.add(optBuf);\\r\\n         max = (optBuf.length() > max) ? optBuf.length() : max;\\r\\n     }\\r\\n     int x = 0;\\r\\n     for (Iterator i = optList.iterator(); i.hasNext(); ) {\\r\\n         Option option = (Option) i.next();\\r\\n         optBuf = new StringBuffer(prefixList.get(x++).toString());\\r\\n         if (optBuf.length() < max) {\\r\\n             optBuf.append(createPadding(max - optBuf.length()));\\r\\n         }\\r\\n         optBuf.append(dpad);\\r\\n         int nextLineTabStop = max + descPad;\\r\\n         if (option.getDescription() != null) {\\r\\n             optBuf.append(option.getDescription());\\r\\n         }\\r\\n         renderWrappedText(sb, width, nextLineTabStop, optBuf.toString());\\r\\n         if (i.hasNext()) {\\r\\n             sb.append(defaultNewLine);\\r\\n         }\\r\\n     }\\r\\n     return sb;\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2010","diff":"\"@@ -1,49 +1,49 @@\\n protected StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad) {\\r\\n     final String lpad = createPadding(leftPad);\\r\\n     final String dpad = createPadding(descPad);\\r\\n     int max = 0;\\r\\n     StringBuffer optBuf;\\r\\n     List prefixList = new ArrayList();\\r\\n     List optList = options.helpOptions();\\r\\n     Collections.sort(optList, getOptionComparator());\\r\\n     for (Iterator i = optList.iterator(); i.hasNext(); ) {\\r\\n         Option option = (Option) i.next();\\r\\n-        optBuf = new StringBuffer(8);\\r\\n+        optBuf = new StringBuffer();\\r\\n         if (option.getOpt() == null) {\\r\\n             optBuf.append(lpad).append(\\\"   \\\" + defaultLongOptPrefix).append(option.getLongOpt());\\r\\n         } else {\\r\\n             optBuf.append(lpad).append(defaultOptPrefix).append(option.getOpt());\\r\\n             if (option.hasLongOpt()) {\\r\\n                 optBuf.append(',').append(defaultLongOptPrefix).append(option.getLongOpt());\\r\\n             }\\r\\n         }\\r\\n         if (option.hasArg()) {\\r\\n             if (option.hasArgName()) {\\r\\n                 optBuf.append(option.hasLongOpt() ? longOptSeparator : \\\" \\\");\\r\\n                 optBuf.append(\\\"<\\\").append(option.getArgName()).append(\\\">\\\");\\r\\n             } else {\\r\\n                 optBuf.append(' ');\\r\\n             }\\r\\n         }\\r\\n         prefixList.add(optBuf);\\r\\n         max = (optBuf.length() > max) ? optBuf.length() : max;\\r\\n     }\\r\\n     int x = 0;\\r\\n     for (Iterator i = optList.iterator(); i.hasNext(); ) {\\r\\n         Option option = (Option) i.next();\\r\\n         optBuf = new StringBuffer(prefixList.get(x++).toString());\\r\\n         if (optBuf.length() < max) {\\r\\n             optBuf.append(createPadding(max - optBuf.length()));\\r\\n         }\\r\\n         optBuf.append(dpad);\\r\\n         int nextLineTabStop = max + descPad;\\r\\n         if (option.getDescription() != null) {\\r\\n             optBuf.append(option.getDescription());\\r\\n         }\\r\\n         renderWrappedText(sb, width, nextLineTabStop, optBuf.toString());\\r\\n         if (i.hasNext()) {\\r\\n             sb.append(defaultNewLine);\\r\\n         }\\r\\n     }\\r\\n     return sb;\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2010","diff":"\"@@ -1,48 +1,49 @@\\n protected StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad) {\\r\\n     final String lpad = createPadding(leftPad);\\r\\n     final String dpad = createPadding(descPad);\\r\\n     int max = 0;\\r\\n     StringBuffer optBuf;\\r\\n     List prefixList = new ArrayList();\\r\\n     List optList = options.helpOptions();\\r\\n     Collections.sort(optList, getOptionComparator());\\r\\n     for (Iterator i = optList.iterator(); i.hasNext(); ) {\\r\\n         Option option = (Option) i.next();\\r\\n         optBuf = new StringBuffer(8);\\r\\n         if (option.getOpt() == null) {\\r\\n             optBuf.append(lpad).append(\\\"   \\\" + defaultLongOptPrefix).append(option.getLongOpt());\\r\\n         } else {\\r\\n             optBuf.append(lpad).append(defaultOptPrefix).append(option.getOpt());\\r\\n             if (option.hasLongOpt()) {\\r\\n                 optBuf.append(',').append(defaultLongOptPrefix).append(option.getLongOpt());\\r\\n             }\\r\\n         }\\r\\n         if (option.hasArg()) {\\r\\n             if (option.hasArgName()) {\\r\\n-                optBuf.append(\\\" <\\\").append(option.getArgName()).append(\\\">\\\");\\r\\n+                optBuf.append(option.hasLongOpt() ? longOptSeparator : \\\" \\\");\\r\\n+                optBuf.append(\\\"<\\\").append(option.getArgName()).append(\\\">\\\");\\r\\n             } else {\\r\\n                 optBuf.append(' ');\\r\\n             }\\r\\n         }\\r\\n         prefixList.add(optBuf);\\r\\n         max = (optBuf.length() > max) ? optBuf.length() : max;\\r\\n     }\\r\\n     int x = 0;\\r\\n     for (Iterator i = optList.iterator(); i.hasNext(); ) {\\r\\n         Option option = (Option) i.next();\\r\\n         optBuf = new StringBuffer(prefixList.get(x++).toString());\\r\\n         if (optBuf.length() < max) {\\r\\n             optBuf.append(createPadding(max - optBuf.length()));\\r\\n         }\\r\\n         optBuf.append(dpad);\\r\\n         int nextLineTabStop = max + descPad;\\r\\n         if (option.getDescription() != null) {\\r\\n             optBuf.append(option.getDescription());\\r\\n         }\\r\\n         renderWrappedText(sb, width, nextLineTabStop, optBuf.toString());\\r\\n         if (i.hasNext()) {\\r\\n             sb.append(defaultNewLine);\\r\\n         }\\r\\n     }\\r\\n     return sb;\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2008","diff":"\"@@ -1,49 +1,48 @@\\n protected StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad) {\\r\\n     final String lpad = createPadding(leftPad);\\r\\n     final String dpad = createPadding(descPad);\\r\\n     int max = 0;\\r\\n     StringBuffer optBuf;\\r\\n     List prefixList = new ArrayList();\\r\\n-    Option option;\\r\\n     List optList = options.helpOptions();\\r\\n     Collections.sort(optList, getOptionComparator());\\r\\n     for (Iterator i = optList.iterator(); i.hasNext(); ) {\\r\\n-        option = (Option) i.next();\\r\\n+        Option option = (Option) i.next();\\r\\n         optBuf = new StringBuffer(8);\\r\\n         if (option.getOpt() == null) {\\r\\n             optBuf.append(lpad).append(\\\"   \\\" + defaultLongOptPrefix).append(option.getLongOpt());\\r\\n         } else {\\r\\n             optBuf.append(lpad).append(defaultOptPrefix).append(option.getOpt());\\r\\n             if (option.hasLongOpt()) {\\r\\n                 optBuf.append(',').append(defaultLongOptPrefix).append(option.getLongOpt());\\r\\n             }\\r\\n         }\\r\\n         if (option.hasArg()) {\\r\\n             if (option.hasArgName()) {\\r\\n                 optBuf.append(\\\" <\\\").append(option.getArgName()).append(\\\">\\\");\\r\\n             } else {\\r\\n                 optBuf.append(' ');\\r\\n             }\\r\\n         }\\r\\n         prefixList.add(optBuf);\\r\\n         max = (optBuf.length() > max) ? optBuf.length() : max;\\r\\n     }\\r\\n     int x = 0;\\r\\n     for (Iterator i = optList.iterator(); i.hasNext(); ) {\\r\\n-        option = (Option) i.next();\\r\\n+        Option option = (Option) i.next();\\r\\n         optBuf = new StringBuffer(prefixList.get(x++).toString());\\r\\n         if (optBuf.length() < max) {\\r\\n             optBuf.append(createPadding(max - optBuf.length()));\\r\\n         }\\r\\n         optBuf.append(dpad);\\r\\n         int nextLineTabStop = max + descPad;\\r\\n         if (option.getDescription() != null) {\\r\\n             optBuf.append(option.getDescription());\\r\\n         }\\r\\n         renderWrappedText(sb, width, nextLineTabStop, optBuf.toString());\\r\\n         if (i.hasNext()) {\\r\\n             sb.append(defaultNewLine);\\r\\n         }\\r\\n     }\\r\\n     return sb;\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"bayard@apache.org","authorName":"Henri Yandell","commitYear":"2008","diff":"\"@@ -1,49 +1,49 @@\\n protected StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad) {\\r\\n     final String lpad = createPadding(leftPad);\\r\\n     final String dpad = createPadding(descPad);\\r\\n     int max = 0;\\r\\n     StringBuffer optBuf;\\r\\n     List prefixList = new ArrayList();\\r\\n     Option option;\\r\\n     List optList = options.helpOptions();\\r\\n-    Collections.sort(optList, new OptionComparator());\\r\\n+    Collections.sort(optList, getOptionComparator());\\r\\n     for (Iterator i = optList.iterator(); i.hasNext(); ) {\\r\\n         option = (Option) i.next();\\r\\n         optBuf = new StringBuffer(8);\\r\\n         if (option.getOpt() == null) {\\r\\n             optBuf.append(lpad).append(\\\"   \\\" + defaultLongOptPrefix).append(option.getLongOpt());\\r\\n         } else {\\r\\n             optBuf.append(lpad).append(defaultOptPrefix).append(option.getOpt());\\r\\n             if (option.hasLongOpt()) {\\r\\n                 optBuf.append(',').append(defaultLongOptPrefix).append(option.getLongOpt());\\r\\n             }\\r\\n         }\\r\\n         if (option.hasArg()) {\\r\\n             if (option.hasArgName()) {\\r\\n                 optBuf.append(\\\" <\\\").append(option.getArgName()).append(\\\">\\\");\\r\\n             } else {\\r\\n                 optBuf.append(' ');\\r\\n             }\\r\\n         }\\r\\n         prefixList.add(optBuf);\\r\\n         max = (optBuf.length() > max) ? optBuf.length() : max;\\r\\n     }\\r\\n     int x = 0;\\r\\n     for (Iterator i = optList.iterator(); i.hasNext(); ) {\\r\\n         option = (Option) i.next();\\r\\n         optBuf = new StringBuffer(prefixList.get(x++).toString());\\r\\n         if (optBuf.length() < max) {\\r\\n             optBuf.append(createPadding(max - optBuf.length()));\\r\\n         }\\r\\n         optBuf.append(dpad);\\r\\n         int nextLineTabStop = max + descPad;\\r\\n         if (option.getDescription() != null) {\\r\\n             optBuf.append(option.getDescription());\\r\\n         }\\r\\n         renderWrappedText(sb, width, nextLineTabStop, optBuf.toString());\\r\\n         if (i.hasNext()) {\\r\\n             sb.append(defaultNewLine);\\r\\n         }\\r\\n     }\\r\\n     return sb;\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"roxspring@apache.org","authorName":"Robert James Oxspring","commitYear":"2004","diff":"\"@@ -1,49 +1,49 @@\\n protected StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad) {\\r\\n     final String lpad = createPadding(leftPad);\\r\\n     final String dpad = createPadding(descPad);\\r\\n     int max = 0;\\r\\n     StringBuffer optBuf;\\r\\n     List prefixList = new ArrayList();\\r\\n     Option option;\\r\\n     List optList = options.helpOptions();\\r\\n-    Collections.sort(optList, new StringBufferComparator());\\r\\n+    Collections.sort(optList, new OptionComparator());\\r\\n     for (Iterator i = optList.iterator(); i.hasNext(); ) {\\r\\n         option = (Option) i.next();\\r\\n         optBuf = new StringBuffer(8);\\r\\n         if (option.getOpt() == null) {\\r\\n             optBuf.append(lpad).append(\\\"   \\\" + defaultLongOptPrefix).append(option.getLongOpt());\\r\\n         } else {\\r\\n             optBuf.append(lpad).append(defaultOptPrefix).append(option.getOpt());\\r\\n             if (option.hasLongOpt()) {\\r\\n                 optBuf.append(',').append(defaultLongOptPrefix).append(option.getLongOpt());\\r\\n             }\\r\\n         }\\r\\n         if (option.hasArg()) {\\r\\n             if (option.hasArgName()) {\\r\\n                 optBuf.append(\\\" <\\\").append(option.getArgName()).append(\\\">\\\");\\r\\n             } else {\\r\\n                 optBuf.append(' ');\\r\\n             }\\r\\n         }\\r\\n         prefixList.add(optBuf);\\r\\n         max = (optBuf.length() > max) ? optBuf.length() : max;\\r\\n     }\\r\\n     int x = 0;\\r\\n     for (Iterator i = optList.iterator(); i.hasNext(); ) {\\r\\n         option = (Option) i.next();\\r\\n         optBuf = new StringBuffer(prefixList.get(x++).toString());\\r\\n         if (optBuf.length() < max) {\\r\\n             optBuf.append(createPadding(max - optBuf.length()));\\r\\n         }\\r\\n         optBuf.append(dpad);\\r\\n         int nextLineTabStop = max + descPad;\\r\\n         if (option.getDescription() != null) {\\r\\n             optBuf.append(option.getDescription());\\r\\n         }\\r\\n         renderWrappedText(sb, width, nextLineTabStop, optBuf.toString());\\r\\n         if (i.hasNext()) {\\r\\n             sb.append(defaultNewLine);\\r\\n         }\\r\\n     }\\r\\n     return sb;\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -1,49 +1,49 @@\\n protected StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad) {\\r\\n     final String lpad = createPadding(leftPad);\\r\\n     final String dpad = createPadding(descPad);\\r\\n     int max = 0;\\r\\n     StringBuffer optBuf;\\r\\n     List prefixList = new ArrayList();\\r\\n     Option option;\\r\\n     List optList = options.helpOptions();\\r\\n     Collections.sort(optList, new StringBufferComparator());\\r\\n     for (Iterator i = optList.iterator(); i.hasNext(); ) {\\r\\n         option = (Option) i.next();\\r\\n         optBuf = new StringBuffer(8);\\r\\n         if (option.getOpt() == null) {\\r\\n             optBuf.append(lpad).append(\\\"   \\\" + defaultLongOptPrefix).append(option.getLongOpt());\\r\\n         } else {\\r\\n             optBuf.append(lpad).append(defaultOptPrefix).append(option.getOpt());\\r\\n             if (option.hasLongOpt()) {\\r\\n                 optBuf.append(',').append(defaultLongOptPrefix).append(option.getLongOpt());\\r\\n             }\\r\\n         }\\r\\n         if (option.hasArg()) {\\r\\n             if (option.hasArgName()) {\\r\\n                 optBuf.append(\\\" <\\\").append(option.getArgName()).append(\\\">\\\");\\r\\n             } else {\\r\\n                 optBuf.append(' ');\\r\\n             }\\r\\n         }\\r\\n         prefixList.add(optBuf);\\r\\n-        max = optBuf.length() > max ? optBuf.length() : max;\\r\\n+        max = (optBuf.length() > max) ? optBuf.length() : max;\\r\\n     }\\r\\n     int x = 0;\\r\\n     for (Iterator i = optList.iterator(); i.hasNext(); ) {\\r\\n         option = (Option) i.next();\\r\\n         optBuf = new StringBuffer(prefixList.get(x++).toString());\\r\\n         if (optBuf.length() < max) {\\r\\n             optBuf.append(createPadding(max - optBuf.length()));\\r\\n         }\\r\\n         optBuf.append(dpad);\\r\\n         int nextLineTabStop = max + descPad;\\r\\n         if (option.getDescription() != null) {\\r\\n             optBuf.append(option.getDescription());\\r\\n         }\\r\\n         renderWrappedText(sb, width, nextLineTabStop, optBuf.toString());\\r\\n         if (i.hasNext()) {\\r\\n             sb.append(defaultNewLine);\\r\\n         }\\r\\n     }\\r\\n     return sb;\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -1,49 +1,49 @@\\n protected StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad) {\\r\\n     final String lpad = createPadding(leftPad);\\r\\n     final String dpad = createPadding(descPad);\\r\\n     int max = 0;\\r\\n     StringBuffer optBuf;\\r\\n     List prefixList = new ArrayList();\\r\\n     Option option;\\r\\n     List optList = options.helpOptions();\\r\\n     Collections.sort(optList, new StringBufferComparator());\\r\\n     for (Iterator i = optList.iterator(); i.hasNext(); ) {\\r\\n         option = (Option) i.next();\\r\\n         optBuf = new StringBuffer(8);\\r\\n-        if (option.getOpt().equals(\\\" \\\")) {\\r\\n+        if (option.getOpt() == null) {\\r\\n             optBuf.append(lpad).append(\\\"   \\\" + defaultLongOptPrefix).append(option.getLongOpt());\\r\\n         } else {\\r\\n             optBuf.append(lpad).append(defaultOptPrefix).append(option.getOpt());\\r\\n             if (option.hasLongOpt()) {\\r\\n                 optBuf.append(',').append(defaultLongOptPrefix).append(option.getLongOpt());\\r\\n             }\\r\\n         }\\r\\n         if (option.hasArg()) {\\r\\n             if (option.hasArgName()) {\\r\\n-                optBuf.append(\\\" <\\\").append(option.getArgName()).append('>');\\r\\n+                optBuf.append(\\\" <\\\").append(option.getArgName()).append(\\\">\\\");\\r\\n             } else {\\r\\n                 optBuf.append(' ');\\r\\n             }\\r\\n         }\\r\\n         prefixList.add(optBuf);\\r\\n         max = optBuf.length() > max ? optBuf.length() : max;\\r\\n     }\\r\\n     int x = 0;\\r\\n     for (Iterator i = optList.iterator(); i.hasNext(); ) {\\r\\n         option = (Option) i.next();\\r\\n         optBuf = new StringBuffer(prefixList.get(x++).toString());\\r\\n         if (optBuf.length() < max) {\\r\\n             optBuf.append(createPadding(max - optBuf.length()));\\r\\n         }\\r\\n         optBuf.append(dpad);\\r\\n         int nextLineTabStop = max + descPad;\\r\\n         if (option.getDescription() != null) {\\r\\n             optBuf.append(option.getDescription());\\r\\n         }\\r\\n         renderWrappedText(sb, width, nextLineTabStop, optBuf.toString());\\r\\n         if (i.hasNext()) {\\r\\n             sb.append(defaultNewLine);\\r\\n         }\\r\\n     }\\r\\n     return sb;\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -1,46 +1,49 @@\\n protected StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad) {\\r\\n     final String lpad = createPadding(leftPad);\\r\\n     final String dpad = createPadding(descPad);\\r\\n     int max = 0;\\r\\n     StringBuffer optBuf;\\r\\n     List prefixList = new ArrayList();\\r\\n     Option option;\\r\\n     List optList = options.helpOptions();\\r\\n     Collections.sort(optList, new StringBufferComparator());\\r\\n     for (Iterator i = optList.iterator(); i.hasNext(); ) {\\r\\n         option = (Option) i.next();\\r\\n         optBuf = new StringBuffer(8);\\r\\n         if (option.getOpt().equals(\\\" \\\")) {\\r\\n             optBuf.append(lpad).append(\\\"   \\\" + defaultLongOptPrefix).append(option.getLongOpt());\\r\\n         } else {\\r\\n             optBuf.append(lpad).append(defaultOptPrefix).append(option.getOpt());\\r\\n             if (option.hasLongOpt()) {\\r\\n                 optBuf.append(',').append(defaultLongOptPrefix).append(option.getLongOpt());\\r\\n             }\\r\\n         }\\r\\n         if (option.hasArg()) {\\r\\n             if (option.hasArgName()) {\\r\\n                 optBuf.append(\\\" <\\\").append(option.getArgName()).append('>');\\r\\n             } else {\\r\\n                 optBuf.append(' ');\\r\\n             }\\r\\n         }\\r\\n         prefixList.add(optBuf);\\r\\n         max = optBuf.length() > max ? optBuf.length() : max;\\r\\n     }\\r\\n     int x = 0;\\r\\n     for (Iterator i = optList.iterator(); i.hasNext(); ) {\\r\\n         option = (Option) i.next();\\r\\n         optBuf = new StringBuffer(prefixList.get(x++).toString());\\r\\n         if (optBuf.length() < max) {\\r\\n             optBuf.append(createPadding(max - optBuf.length()));\\r\\n         }\\r\\n         optBuf.append(dpad);\\r\\n         int nextLineTabStop = max + descPad;\\r\\n-        renderWrappedText(sb, width, nextLineTabStop, optBuf.append(option.getDescription()).toString());\\r\\n+        if (option.getDescription() != null) {\\r\\n+            optBuf.append(option.getDescription());\\r\\n+        }\\r\\n+        renderWrappedText(sb, width, nextLineTabStop, optBuf.toString());\\r\\n         if (i.hasNext()) {\\r\\n             sb.append(defaultNewLine);\\r\\n         }\\r\\n     }\\r\\n     return sb;\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -1,41 +1,46 @@\\n protected StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad) {\\r\\n     final String lpad = createPadding(leftPad);\\r\\n     final String dpad = createPadding(descPad);\\r\\n     int max = 0;\\r\\n     StringBuffer optBuf;\\r\\n     List prefixList = new ArrayList();\\r\\n     Option option;\\r\\n     List optList = options.helpOptions();\\r\\n     Collections.sort(optList, new StringBufferComparator());\\r\\n     for (Iterator i = optList.iterator(); i.hasNext(); ) {\\r\\n         option = (Option) i.next();\\r\\n         optBuf = new StringBuffer(8);\\r\\n         if (option.getOpt().equals(\\\" \\\")) {\\r\\n             optBuf.append(lpad).append(\\\"   \\\" + defaultLongOptPrefix).append(option.getLongOpt());\\r\\n         } else {\\r\\n             optBuf.append(lpad).append(defaultOptPrefix).append(option.getOpt());\\r\\n             if (option.hasLongOpt()) {\\r\\n                 optBuf.append(',').append(defaultLongOptPrefix).append(option.getLongOpt());\\r\\n             }\\r\\n         }\\r\\n         if (option.hasArg()) {\\r\\n             if (option.hasArgName()) {\\r\\n-                optBuf.append(option.getArgName());\\r\\n+                optBuf.append(\\\" <\\\").append(option.getArgName()).append('>');\\r\\n             } else {\\r\\n                 optBuf.append(' ');\\r\\n             }\\r\\n         }\\r\\n         prefixList.add(optBuf);\\r\\n         max = optBuf.length() > max ? optBuf.length() : max;\\r\\n+    }\\r\\n+    int x = 0;\\r\\n+    for (Iterator i = optList.iterator(); i.hasNext(); ) {\\r\\n+        option = (Option) i.next();\\r\\n+        optBuf = new StringBuffer(prefixList.get(x++).toString());\\r\\n         if (optBuf.length() < max) {\\r\\n             optBuf.append(createPadding(max - optBuf.length()));\\r\\n         }\\r\\n         optBuf.append(dpad);\\r\\n         int nextLineTabStop = max + descPad;\\r\\n         renderWrappedText(sb, width, nextLineTabStop, optBuf.append(option.getDescription()).toString());\\r\\n         if (i.hasNext()) {\\r\\n             sb.append(defaultNewLine);\\r\\n         }\\r\\n     }\\r\\n     return sb;\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -1,49 +1,41 @@\\n protected StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad) {\\r\\n     final String lpad = createPadding(leftPad);\\r\\n     final String dpad = createPadding(descPad);\\r\\n     int max = 0;\\r\\n     StringBuffer optBuf;\\r\\n     List prefixList = new ArrayList();\\r\\n     Option option;\\r\\n-    for (Iterator i = options.getOptions().iterator(); i.hasNext(); ) {\\r\\n+    List optList = options.helpOptions();\\r\\n+    Collections.sort(optList, new StringBufferComparator());\\r\\n+    for (Iterator i = optList.iterator(); i.hasNext(); ) {\\r\\n         option = (Option) i.next();\\r\\n         optBuf = new StringBuffer(8);\\r\\n         if (option.getOpt().equals(\\\" \\\")) {\\r\\n             optBuf.append(lpad).append(\\\"   \\\" + defaultLongOptPrefix).append(option.getLongOpt());\\r\\n         } else {\\r\\n             optBuf.append(lpad).append(defaultOptPrefix).append(option.getOpt());\\r\\n             if (option.hasLongOpt()) {\\r\\n                 optBuf.append(',').append(defaultLongOptPrefix).append(option.getLongOpt());\\r\\n             }\\r\\n         }\\r\\n         if (option.hasArg()) {\\r\\n-            optBuf.append(' ').append(defaultArgName);\\r\\n+            if (option.hasArgName()) {\\r\\n+                optBuf.append(option.getArgName());\\r\\n+            } else {\\r\\n+                optBuf.append(' ');\\r\\n+            }\\r\\n         }\\r\\n         prefixList.add(optBuf);\\r\\n         max = optBuf.length() > max ? optBuf.length() : max;\\r\\n-    }\\r\\n-    for (Iterator i = prefixList.iterator(); i.hasNext(); ) {\\r\\n-        optBuf = (StringBuffer) i.next();\\r\\n         if (optBuf.length() < max) {\\r\\n             optBuf.append(createPadding(max - optBuf.length()));\\r\\n         }\\r\\n         optBuf.append(dpad);\\r\\n-    }\\r\\n-    Collections.sort(prefixList, new StringBufferComparator());\\r\\n-    int nextLineTabStop = max + descPad;\\r\\n-    String opt;\\r\\n-    int optOffset = leftPad + defaultOptPrefix.length();\\r\\n-    for (Iterator i = prefixList.iterator(); i.hasNext(); ) {\\r\\n-        optBuf = (StringBuffer) i.next();\\r\\n-        opt = optBuf.toString().trim();\\r\\n-        if (opt.indexOf(',') != -1) {\\r\\n-            opt = opt.substring(0, opt.indexOf(',', optOffset));\\r\\n-        }\\r\\n-        option = options.getOption(opt);\\r\\n+        int nextLineTabStop = max + descPad;\\r\\n         renderWrappedText(sb, width, nextLineTabStop, optBuf.append(option.getDescription()).toString());\\r\\n         if (i.hasNext()) {\\r\\n             sb.append(defaultNewLine);\\r\\n         }\\r\\n     }\\r\\n     return sb;\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -1,47 +1,49 @@\\n protected StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad) {\\r\\n     final String lpad = createPadding(leftPad);\\r\\n     final String dpad = createPadding(descPad);\\r\\n     int max = 0;\\r\\n     StringBuffer optBuf;\\r\\n     List prefixList = new ArrayList();\\r\\n     Option option;\\r\\n     for (Iterator i = options.getOptions().iterator(); i.hasNext(); ) {\\r\\n         option = (Option) i.next();\\r\\n         optBuf = new StringBuffer(8);\\r\\n-        optBuf.append(lpad).append(defaultOptPrefix).append(option.getOpt());\\r\\n-        if (option.hasLongOpt()) {\\r\\n-            optBuf.append(',').append(defaultLongOptPrefix).append(option.getLongOpt());\\r\\n+        if (option.getOpt().equals(\\\" \\\")) {\\r\\n+            optBuf.append(lpad).append(\\\"   \\\" + defaultLongOptPrefix).append(option.getLongOpt());\\r\\n+        } else {\\r\\n+            optBuf.append(lpad).append(defaultOptPrefix).append(option.getOpt());\\r\\n+            if (option.hasLongOpt()) {\\r\\n+                optBuf.append(',').append(defaultLongOptPrefix).append(option.getLongOpt());\\r\\n+            }\\r\\n         }\\r\\n         if (option.hasArg()) {\\r\\n             optBuf.append(' ').append(defaultArgName);\\r\\n         }\\r\\n         prefixList.add(optBuf);\\r\\n         max = optBuf.length() > max ? optBuf.length() : max;\\r\\n     }\\r\\n     for (Iterator i = prefixList.iterator(); i.hasNext(); ) {\\r\\n         optBuf = (StringBuffer) i.next();\\r\\n         if (optBuf.length() < max) {\\r\\n             optBuf.append(createPadding(max - optBuf.length()));\\r\\n         }\\r\\n         optBuf.append(dpad);\\r\\n     }\\r\\n     Collections.sort(prefixList, new StringBufferComparator());\\r\\n     int nextLineTabStop = max + descPad;\\r\\n     String opt;\\r\\n     int optOffset = leftPad + defaultOptPrefix.length();\\r\\n     for (Iterator i = prefixList.iterator(); i.hasNext(); ) {\\r\\n         optBuf = (StringBuffer) i.next();\\r\\n-        opt = optBuf.toString();\\r\\n+        opt = optBuf.toString().trim();\\r\\n         if (opt.indexOf(',') != -1) {\\r\\n-            opt = opt.substring(optOffset, opt.indexOf(',', optOffset));\\r\\n-        } else {\\r\\n-            opt = opt.substring(optOffset, opt.indexOf(' ', optOffset));\\r\\n+            opt = opt.substring(0, opt.indexOf(',', optOffset));\\r\\n         }\\r\\n-        option = options.getOption(\\\"-\\\" + opt);\\r\\n+        option = options.getOption(opt);\\r\\n         renderWrappedText(sb, width, nextLineTabStop, optBuf.append(option.getDescription()).toString());\\r\\n         if (i.hasNext()) {\\r\\n             sb.append(defaultNewLine);\\r\\n         }\\r\\n     }\\r\\n     return sb;\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -1,42 +1,47 @@\\n protected StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad) {\\r\\n     final String lpad = createPadding(leftPad);\\r\\n     final String dpad = createPadding(descPad);\\r\\n     int max = 0;\\r\\n     StringBuffer optBuf;\\r\\n     List prefixList = new ArrayList();\\r\\n     Option option;\\r\\n     for (Iterator i = options.getOptions().iterator(); i.hasNext(); ) {\\r\\n         option = (Option) i.next();\\r\\n         optBuf = new StringBuffer(8);\\r\\n         optBuf.append(lpad).append(defaultOptPrefix).append(option.getOpt());\\r\\n         if (option.hasLongOpt()) {\\r\\n             optBuf.append(',').append(defaultLongOptPrefix).append(option.getLongOpt());\\r\\n         }\\r\\n         if (option.hasArg()) {\\r\\n             optBuf.append(' ').append(defaultArgName);\\r\\n         }\\r\\n         prefixList.add(optBuf);\\r\\n         max = optBuf.length() > max ? optBuf.length() : max;\\r\\n     }\\r\\n     for (Iterator i = prefixList.iterator(); i.hasNext(); ) {\\r\\n         optBuf = (StringBuffer) i.next();\\r\\n         if (optBuf.length() < max) {\\r\\n             optBuf.append(createPadding(max - optBuf.length()));\\r\\n         }\\r\\n         optBuf.append(dpad);\\r\\n     }\\r\\n     Collections.sort(prefixList, new StringBufferComparator());\\r\\n     int nextLineTabStop = max + descPad;\\r\\n-    char opt;\\r\\n+    String opt;\\r\\n     int optOffset = leftPad + defaultOptPrefix.length();\\r\\n     for (Iterator i = prefixList.iterator(); i.hasNext(); ) {\\r\\n         optBuf = (StringBuffer) i.next();\\r\\n-        opt = optBuf.charAt(optOffset);\\r\\n-        option = options.getOption(\\\"\\\" + opt);\\r\\n+        opt = optBuf.toString();\\r\\n+        if (opt.indexOf(',') != -1) {\\r\\n+            opt = opt.substring(optOffset, opt.indexOf(',', optOffset));\\r\\n+        } else {\\r\\n+            opt = opt.substring(optOffset, opt.indexOf(' ', optOffset));\\r\\n+        }\\r\\n+        option = options.getOption(\\\"-\\\" + opt);\\r\\n         renderWrappedText(sb, width, nextLineTabStop, optBuf.append(option.getDescription()).toString());\\r\\n         if (i.hasNext()) {\\r\\n             sb.append(defaultNewLine);\\r\\n         }\\r\\n     }\\r\\n     return sb;\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -1,42 +1,42 @@\\n protected StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad) {\\r\\n     final String lpad = createPadding(leftPad);\\r\\n     final String dpad = createPadding(descPad);\\r\\n     int max = 0;\\r\\n     StringBuffer optBuf;\\r\\n     List prefixList = new ArrayList();\\r\\n     Option option;\\r\\n     for (Iterator i = options.getOptions().iterator(); i.hasNext(); ) {\\r\\n         option = (Option) i.next();\\r\\n         optBuf = new StringBuffer(8);\\r\\n         optBuf.append(lpad).append(defaultOptPrefix).append(option.getOpt());\\r\\n         if (option.hasLongOpt()) {\\r\\n             optBuf.append(',').append(defaultLongOptPrefix).append(option.getLongOpt());\\r\\n         }\\r\\n         if (option.hasArg()) {\\r\\n             optBuf.append(' ').append(defaultArgName);\\r\\n         }\\r\\n         prefixList.add(optBuf);\\r\\n         max = optBuf.length() > max ? optBuf.length() : max;\\r\\n     }\\r\\n     for (Iterator i = prefixList.iterator(); i.hasNext(); ) {\\r\\n         optBuf = (StringBuffer) i.next();\\r\\n         if (optBuf.length() < max) {\\r\\n             optBuf.append(createPadding(max - optBuf.length()));\\r\\n         }\\r\\n         optBuf.append(dpad);\\r\\n     }\\r\\n     Collections.sort(prefixList, new StringBufferComparator());\\r\\n     int nextLineTabStop = max + descPad;\\r\\n     char opt;\\r\\n     int optOffset = leftPad + defaultOptPrefix.length();\\r\\n     for (Iterator i = prefixList.iterator(); i.hasNext(); ) {\\r\\n         optBuf = (StringBuffer) i.next();\\r\\n         opt = optBuf.charAt(optOffset);\\r\\n-        option = options.getOption(opt);\\r\\n+        option = options.getOption(\\\"\\\" + opt);\\r\\n         renderWrappedText(sb, width, nextLineTabStop, optBuf.append(option.getDescription()).toString());\\r\\n         if (i.hasNext()) {\\r\\n             sb.append(defaultNewLine);\\r\\n         }\\r\\n     }\\r\\n     return sb;\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jstrachan@apache.org","authorName":"James Strachan","commitYear":"2002","diff":"\"@@ -0,0 +1,42 @@\\n+protected StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad) {\\r\\n+    final String lpad = createPadding(leftPad);\\r\\n+    final String dpad = createPadding(descPad);\\r\\n+    int max = 0;\\r\\n+    StringBuffer optBuf;\\r\\n+    List prefixList = new ArrayList();\\r\\n+    Option option;\\r\\n+    for (Iterator i = options.getOptions().iterator(); i.hasNext(); ) {\\r\\n+        option = (Option) i.next();\\r\\n+        optBuf = new StringBuffer(8);\\r\\n+        optBuf.append(lpad).append(defaultOptPrefix).append(option.getOpt());\\r\\n+        if (option.hasLongOpt()) {\\r\\n+            optBuf.append(',').append(defaultLongOptPrefix).append(option.getLongOpt());\\r\\n+        }\\r\\n+        if (option.hasArg()) {\\r\\n+            optBuf.append(' ').append(defaultArgName);\\r\\n+        }\\r\\n+        prefixList.add(optBuf);\\r\\n+        max = optBuf.length() > max ? optBuf.length() : max;\\r\\n+    }\\r\\n+    for (Iterator i = prefixList.iterator(); i.hasNext(); ) {\\r\\n+        optBuf = (StringBuffer) i.next();\\r\\n+        if (optBuf.length() < max) {\\r\\n+            optBuf.append(createPadding(max - optBuf.length()));\\r\\n+        }\\r\\n+        optBuf.append(dpad);\\r\\n+    }\\r\\n+    Collections.sort(prefixList, new StringBufferComparator());\\r\\n+    int nextLineTabStop = max + descPad;\\r\\n+    char opt;\\r\\n+    int optOffset = leftPad + defaultOptPrefix.length();\\r\\n+    for (Iterator i = prefixList.iterator(); i.hasNext(); ) {\\r\\n+        optBuf = (StringBuffer) i.next();\\r\\n+        opt = optBuf.charAt(optOffset);\\r\\n+        option = options.getOption(opt);\\r\\n+        renderWrappedText(sb, width, nextLineTabStop, optBuf.append(option.getDescription()).toString());\\r\\n+        if (i.hasNext()) {\\r\\n+            sb.append(defaultNewLine);\\r\\n+        }\\r\\n+    }\\r\\n+    return sb;\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\main\java\org\apache\commons\cli\HelpFormatter.java	renderWrappedText	org.apache.commons.cli.HelpFormatter.renderWrappedText(StringBuffer, int, int, String)	752	786	9	[{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"\""},{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,24 +1,24 @@\\n-protected StringBuffer renderWrappedText(StringBuffer sb, int width, int nextLineTabStop, String text) {\\r\\n+protected StringBuffer renderWrappedText(final StringBuffer sb, final int width, int nextLineTabStop, String text) {\\r\\n     int pos = findWrapPos(text, width, 0);\\r\\n     if (pos == -1) {\\r\\n         sb.append(rtrim(text));\\r\\n         return sb;\\r\\n     }\\r\\n     sb.append(rtrim(text.substring(0, pos))).append(getNewLine());\\r\\n     if (nextLineTabStop >= width) {\\r\\n         nextLineTabStop = 1;\\r\\n     }\\r\\n     final String padding = createPadding(nextLineTabStop);\\r\\n     while (true) {\\r\\n         text = padding + text.substring(pos).trim();\\r\\n         pos = findWrapPos(text, width, 0);\\r\\n         if (pos == -1) {\\r\\n             sb.append(text);\\r\\n             return sb;\\r\\n         }\\r\\n         if (text.length() > width && pos == nextLineTabStop - 1) {\\r\\n             pos = width;\\r\\n         }\\r\\n         sb.append(rtrim(text.substring(0, pos))).append(getNewLine());\\r\\n     }\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"britter@apache.org","authorName":"Benedikt Ritter","commitYear":"2015","diff":"\"@@ -1,24 +1,24 @@\\n protected StringBuffer renderWrappedText(StringBuffer sb, int width, int nextLineTabStop, String text) {\\r\\n     int pos = findWrapPos(text, width, 0);\\r\\n     if (pos == -1) {\\r\\n         sb.append(rtrim(text));\\r\\n         return sb;\\r\\n     }\\r\\n     sb.append(rtrim(text.substring(0, pos))).append(getNewLine());\\r\\n     if (nextLineTabStop >= width) {\\r\\n         nextLineTabStop = 1;\\r\\n     }\\r\\n     final String padding = createPadding(nextLineTabStop);\\r\\n     while (true) {\\r\\n         text = padding + text.substring(pos).trim();\\r\\n         pos = findWrapPos(text, width, 0);\\r\\n         if (pos == -1) {\\r\\n             sb.append(text);\\r\\n             return sb;\\r\\n         }\\r\\n-        if ((text.length() > width) && (pos == nextLineTabStop - 1)) {\\r\\n+        if (text.length() > width && pos == nextLineTabStop - 1) {\\r\\n             pos = width;\\r\\n         }\\r\\n         sb.append(rtrim(text.substring(0, pos))).append(getNewLine());\\r\\n     }\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"simonetripodi@apache.org","authorName":"Simone Tripodi","commitYear":"2011","diff":"\"\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2010","diff":"\"@@ -1,24 +1,24 @@\\n protected StringBuffer renderWrappedText(StringBuffer sb, int width, int nextLineTabStop, String text) {\\r\\n     int pos = findWrapPos(text, width, 0);\\r\\n     if (pos == -1) {\\r\\n         sb.append(rtrim(text));\\r\\n         return sb;\\r\\n     }\\r\\n-    sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\\r\\n+    sb.append(rtrim(text.substring(0, pos))).append(getNewLine());\\r\\n     if (nextLineTabStop >= width) {\\r\\n         nextLineTabStop = 1;\\r\\n     }\\r\\n     final String padding = createPadding(nextLineTabStop);\\r\\n     while (true) {\\r\\n         text = padding + text.substring(pos).trim();\\r\\n         pos = findWrapPos(text, width, 0);\\r\\n         if (pos == -1) {\\r\\n             sb.append(text);\\r\\n             return sb;\\r\\n         }\\r\\n         if ((text.length() > width) && (pos == nextLineTabStop - 1)) {\\r\\n             pos = width;\\r\\n         }\\r\\n-        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\\r\\n+        sb.append(rtrim(text.substring(0, pos))).append(getNewLine());\\r\\n     }\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2010","diff":"\"\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2010","diff":"\"\""},{"authorEmail":"bayard@apache.org","authorName":"Henri Yandell","commitYear":"2009","diff":"\"@@ -1,24 +1,24 @@\\n protected StringBuffer renderWrappedText(StringBuffer sb, int width, int nextLineTabStop, String text) {\\r\\n     int pos = findWrapPos(text, width, 0);\\r\\n     if (pos == -1) {\\r\\n         sb.append(rtrim(text));\\r\\n         return sb;\\r\\n     }\\r\\n     sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\\r\\n     if (nextLineTabStop >= width) {\\r\\n-        nextLineTabStop = width - 1;\\r\\n+        nextLineTabStop = 1;\\r\\n     }\\r\\n     final String padding = createPadding(nextLineTabStop);\\r\\n     while (true) {\\r\\n         text = padding + text.substring(pos).trim();\\r\\n         pos = findWrapPos(text, width, 0);\\r\\n         if (pos == -1) {\\r\\n             sb.append(text);\\r\\n             return sb;\\r\\n         }\\r\\n         if ((text.length() > width) && (pos == nextLineTabStop - 1)) {\\r\\n             pos = width;\\r\\n         }\\r\\n         sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\\r\\n     }\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"bayard@apache.org","authorName":"Henri Yandell","commitYear":"2009","diff":"\"@@ -1,24 +1,24 @@\\n protected StringBuffer renderWrappedText(StringBuffer sb, int width, int nextLineTabStop, String text) {\\r\\n     int pos = findWrapPos(text, width, 0);\\r\\n     if (pos == -1) {\\r\\n         sb.append(rtrim(text));\\r\\n         return sb;\\r\\n     }\\r\\n     sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\\r\\n     if (nextLineTabStop >= width) {\\r\\n-        throw new IllegalStateException(\\\"Total width is less than the width of the argument and indent \\\" + \\\"- no room for the description\\\");\\r\\n+        nextLineTabStop = width - 1;\\r\\n     }\\r\\n     final String padding = createPadding(nextLineTabStop);\\r\\n     while (true) {\\r\\n         text = padding + text.substring(pos).trim();\\r\\n         pos = findWrapPos(text, width, 0);\\r\\n         if (pos == -1) {\\r\\n             sb.append(text);\\r\\n             return sb;\\r\\n         }\\r\\n         if ((text.length() > width) && (pos == nextLineTabStop - 1)) {\\r\\n             pos = width;\\r\\n         }\\r\\n         sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\\r\\n     }\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"bayard@apache.org","authorName":"Henri Yandell","commitYear":"2009","diff":"\"@@ -1,24 +1,24 @@\\n protected StringBuffer renderWrappedText(StringBuffer sb, int width, int nextLineTabStop, String text) {\\r\\n     int pos = findWrapPos(text, width, 0);\\r\\n     if (pos == -1) {\\r\\n         sb.append(rtrim(text));\\r\\n         return sb;\\r\\n     }\\r\\n     sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\\r\\n-    final String padding = createPadding(nextLineTabStop);\\r\\n     if (nextLineTabStop >= width) {\\r\\n         throw new IllegalStateException(\\\"Total width is less than the width of the argument and indent \\\" + \\\"- no room for the description\\\");\\r\\n     }\\r\\n+    final String padding = createPadding(nextLineTabStop);\\r\\n     while (true) {\\r\\n         text = padding + text.substring(pos).trim();\\r\\n         pos = findWrapPos(text, width, 0);\\r\\n         if (pos == -1) {\\r\\n             sb.append(text);\\r\\n             return sb;\\r\\n         }\\r\\n         if ((text.length() > width) && (pos == nextLineTabStop - 1)) {\\r\\n             pos = width;\\r\\n         }\\r\\n         sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\\r\\n     }\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"bayard@apache.org","authorName":"Henri Yandell","commitYear":"2009","diff":"\"@@ -1,21 +1,24 @@\\n protected StringBuffer renderWrappedText(StringBuffer sb, int width, int nextLineTabStop, String text) {\\r\\n     int pos = findWrapPos(text, width, 0);\\r\\n     if (pos == -1) {\\r\\n         sb.append(rtrim(text));\\r\\n         return sb;\\r\\n     }\\r\\n     sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\\r\\n     final String padding = createPadding(nextLineTabStop);\\r\\n+    if (nextLineTabStop >= width) {\\r\\n+        throw new IllegalStateException(\\\"Total width is less than the width of the argument and indent \\\" + \\\"- no room for the description\\\");\\r\\n+    }\\r\\n     while (true) {\\r\\n         text = padding + text.substring(pos).trim();\\r\\n         pos = findWrapPos(text, width, 0);\\r\\n         if (pos == -1) {\\r\\n             sb.append(text);\\r\\n             return sb;\\r\\n         }\\r\\n         if ((text.length() > width) && (pos == nextLineTabStop - 1)) {\\r\\n             pos = width;\\r\\n         }\\r\\n         sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\\r\\n     }\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"bayard@apache.org","authorName":"Henri Yandell","commitYear":"2009","diff":"\"\""},{"authorEmail":"bayard@apache.org","authorName":"Henri Yandell","commitYear":"2009","diff":"\"@@ -1,22 +1,21 @@\\n protected StringBuffer renderWrappedText(StringBuffer sb, int width, int nextLineTabStop, String text) {\\r\\n     int pos = findWrapPos(text, width, 0);\\r\\n     if (pos == -1) {\\r\\n         sb.append(rtrim(text));\\r\\n         return sb;\\r\\n     }\\r\\n     sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\\r\\n     final String padding = createPadding(nextLineTabStop);\\r\\n     while (true) {\\r\\n         text = padding + text.substring(pos).trim();\\r\\n         pos = findWrapPos(text, width, 0);\\r\\n         if (pos == -1) {\\r\\n             sb.append(text);\\r\\n             return sb;\\r\\n         }\\r\\n         if ((text.length() > width) && (pos == nextLineTabStop - 1)) {\\r\\n-            sb.append(text);\\r\\n-            return sb;\\r\\n+            pos = width;\\r\\n         }\\r\\n         sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\\r\\n     }\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"bayard@apache.org","authorName":"Henri Yandell","commitYear":"2009","diff":"\"@@ -1,21 +1,22 @@\\n protected StringBuffer renderWrappedText(StringBuffer sb, int width, int nextLineTabStop, String text) {\\r\\n     int pos = findWrapPos(text, width, 0);\\r\\n     if (pos == -1) {\\r\\n         sb.append(rtrim(text));\\r\\n         return sb;\\r\\n     }\\r\\n     sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\\r\\n     final String padding = createPadding(nextLineTabStop);\\r\\n     while (true) {\\r\\n-        int lastPos = pos;\\r\\n         text = padding + text.substring(pos).trim();\\r\\n         pos = findWrapPos(text, width, 0);\\r\\n         if (pos == -1) {\\r\\n             sb.append(text);\\r\\n             return sb;\\r\\n-        } else if (pos == lastPos) {\\r\\n-            throw new RuntimeException(\\\"Text too long for line - throwing exception to avoid infinite loop [CLI-162]: \\\" + text);\\r\\n+        }\\r\\n+        if ((text.length() > width) && (pos == nextLineTabStop - 1)) {\\r\\n+            sb.append(text);\\r\\n+            return sb;\\r\\n         }\\r\\n         sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\\r\\n     }\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"bayard@apache.org","authorName":"Henri Yandell","commitYear":"2009","diff":"\"@@ -1,18 +1,21 @@\\n protected StringBuffer renderWrappedText(StringBuffer sb, int width, int nextLineTabStop, String text) {\\r\\n     int pos = findWrapPos(text, width, 0);\\r\\n     if (pos == -1) {\\r\\n         sb.append(rtrim(text));\\r\\n         return sb;\\r\\n     }\\r\\n     sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\\r\\n     final String padding = createPadding(nextLineTabStop);\\r\\n     while (true) {\\r\\n+        int lastPos = pos;\\r\\n         text = padding + text.substring(pos).trim();\\r\\n         pos = findWrapPos(text, width, 0);\\r\\n         if (pos == -1) {\\r\\n             sb.append(text);\\r\\n             return sb;\\r\\n+        } else if (pos == lastPos) {\\r\\n+            throw new RuntimeException(\\\"Text too long for line - throwing exception to avoid infinite loop [CLI-162]: \\\" + text);\\r\\n         }\\r\\n         sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\\r\\n     }\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2008","diff":"\"\""},{"authorEmail":"bayard@apache.org","authorName":"Henri Yandell","commitYear":"2008","diff":"\"@@ -1,18 +1,18 @@\\n protected StringBuffer renderWrappedText(StringBuffer sb, int width, int nextLineTabStop, String text) {\\r\\n     int pos = findWrapPos(text, width, 0);\\r\\n     if (pos == -1) {\\r\\n         sb.append(rtrim(text));\\r\\n         return sb;\\r\\n     }\\r\\n     sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\\r\\n     final String padding = createPadding(nextLineTabStop);\\r\\n     while (true) {\\r\\n         text = padding + text.substring(pos).trim();\\r\\n-        pos = findWrapPos(text, width, nextLineTabStop);\\r\\n+        pos = findWrapPos(text, width, 0);\\r\\n         if (pos == -1) {\\r\\n             sb.append(text);\\r\\n             return sb;\\r\\n         }\\r\\n         sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\\r\\n     }\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"roxspring@apache.org","authorName":"Robert James Oxspring","commitYear":"2005","diff":"\"@@ -1,19 +1,18 @@\\n protected StringBuffer renderWrappedText(StringBuffer sb, int width, int nextLineTabStop, String text) {\\r\\n     int pos = findWrapPos(text, width, 0);\\r\\n     if (pos == -1) {\\r\\n         sb.append(rtrim(text));\\r\\n         return sb;\\r\\n-    } else {\\r\\n-        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\\r\\n     }\\r\\n+    sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\\r\\n     final String padding = createPadding(nextLineTabStop);\\r\\n     while (true) {\\r\\n         text = padding + text.substring(pos).trim();\\r\\n         pos = findWrapPos(text, width, nextLineTabStop);\\r\\n         if (pos == -1) {\\r\\n             sb.append(text);\\r\\n             return sb;\\r\\n         }\\r\\n         sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\\r\\n     }\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"\""},{"authorEmail":"jstrachan@apache.org","authorName":"James Strachan","commitYear":"2002","diff":"\"@@ -0,0 +1,19 @@\\n+protected StringBuffer renderWrappedText(StringBuffer sb, int width, int nextLineTabStop, String text) {\\r\\n+    int pos = findWrapPos(text, width, 0);\\r\\n+    if (pos == -1) {\\r\\n+        sb.append(rtrim(text));\\r\\n+        return sb;\\r\\n+    } else {\\r\\n+        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\\r\\n+    }\\r\\n+    final String padding = createPadding(nextLineTabStop);\\r\\n+    while (true) {\\r\\n+        text = padding + text.substring(pos).trim();\\r\\n+        pos = findWrapPos(text, width, nextLineTabStop);\\r\\n+        if (pos == -1) {\\r\\n+            sb.append(text);\\r\\n+            return sb;\\r\\n+        }\\r\\n+        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\\r\\n+    }\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\main\java\org\apache\commons\cli\HelpFormatter.java	renderWrappedTextBlock	org.apache.commons.cli.HelpFormatter.renderWrappedTextBlock(StringBuffer, int, int, String)	797	815	3	[{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"\""},{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"\""},{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,17 +1,17 @@\\n-private Appendable renderWrappedTextBlock(StringBuffer sb, int width, int nextLineTabStop, String text) {\\r\\n+private Appendable renderWrappedTextBlock(final StringBuffer sb, final int width, final int nextLineTabStop, final String text) {\\r\\n     try {\\r\\n         final BufferedReader in = new BufferedReader(new StringReader(text));\\r\\n         String line;\\r\\n         boolean firstLine = true;\\r\\n         while ((line = in.readLine()) != null) {\\r\\n             if (!firstLine) {\\r\\n                 sb.append(getNewLine());\\r\\n             } else {\\r\\n                 firstLine = false;\\r\\n             }\\r\\n             renderWrappedText(sb, width, nextLineTabStop, line);\\r\\n         }\\r\\n     } catch (final IOException e) {\\r\\n     }\\r\\n     return sb;\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,17 +1,17 @@\\n private Appendable renderWrappedTextBlock(StringBuffer sb, int width, int nextLineTabStop, String text) {\\r\\n     try {\\r\\n-        BufferedReader in = new BufferedReader(new StringReader(text));\\r\\n+        final BufferedReader in = new BufferedReader(new StringReader(text));\\r\\n         String line;\\r\\n         boolean firstLine = true;\\r\\n         while ((line = in.readLine()) != null) {\\r\\n             if (!firstLine) {\\r\\n                 sb.append(getNewLine());\\r\\n             } else {\\r\\n                 firstLine = false;\\r\\n             }\\r\\n             renderWrappedText(sb, width, nextLineTabStop, line);\\r\\n         }\\r\\n-    } catch (IOException e) {\\r\\n+    } catch (final IOException e) {\\r\\n     }\\r\\n     return sb;\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"tn@apache.org","authorName":"Thomas Neidhart","commitYear":"2013","diff":"\"\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2011","diff":"\"@@ -1,17 +1,17 @@\\n-private StringBuffer renderWrappedTextBlock(StringBuffer sb, int width, int nextLineTabStop, String text) {\\r\\n+private Appendable renderWrappedTextBlock(StringBuffer sb, int width, int nextLineTabStop, String text) {\\r\\n     try {\\r\\n         BufferedReader in = new BufferedReader(new StringReader(text));\\r\\n         String line;\\r\\n         boolean firstLine = true;\\r\\n         while ((line = in.readLine()) != null) {\\r\\n             if (!firstLine) {\\r\\n                 sb.append(getNewLine());\\r\\n             } else {\\r\\n                 firstLine = false;\\r\\n             }\\r\\n             renderWrappedText(sb, width, nextLineTabStop, line);\\r\\n         }\\r\\n     } catch (IOException e) {\\r\\n     }\\r\\n     return sb;\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2011","diff":"\"\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2010","diff":"\"@@ -0,0 +1,17 @@\\n+private StringBuffer renderWrappedTextBlock(StringBuffer sb, int width, int nextLineTabStop, String text) {\\r\\n+    try {\\r\\n+        BufferedReader in = new BufferedReader(new StringReader(text));\\r\\n+        String line;\\r\\n+        boolean firstLine = true;\\r\\n+        while ((line = in.readLine()) != null) {\\r\\n+            if (!firstLine) {\\r\\n+                sb.append(getNewLine());\\r\\n+            } else {\\r\\n+                firstLine = false;\\r\\n+            }\\r\\n+            renderWrappedText(sb, width, nextLineTabStop, line);\\r\\n+        }\\r\\n+    } catch (IOException e) {\\r\\n+    }\\r\\n+    return sb;\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\main\java\org\apache\commons\cli\HelpFormatter.java	rtrim	org.apache.commons.cli.HelpFormatter.rtrim(String)	824	836	6	[{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"\""},{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"@@ -1,10 +1,10 @@\\n protected String rtrim(final String s) {\\r\\n-    if (s == null || s.length() == 0) {\\r\\n+    if (s == null || s.isEmpty()) {\\r\\n         return s;\\r\\n     }\\r\\n     int pos = s.length();\\r\\n     while (pos > 0 && Character.isWhitespace(s.charAt(pos - 1))) {\\r\\n         --pos;\\r\\n     }\\r\\n     return s.substring(0, pos);\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,10 +1,10 @@\\n-protected String rtrim(String s) {\\r\\n+protected String rtrim(final String s) {\\r\\n     if (s == null || s.length() == 0) {\\r\\n         return s;\\r\\n     }\\r\\n     int pos = s.length();\\r\\n     while (pos > 0 && Character.isWhitespace(s.charAt(pos - 1))) {\\r\\n         --pos;\\r\\n     }\\r\\n     return s.substring(0, pos);\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"britter@apache.org","authorName":"Benedikt Ritter","commitYear":"2015","diff":"\"@@ -1,10 +1,10 @@\\n protected String rtrim(String s) {\\r\\n-    if ((s == null) || (s.length() == 0)) {\\r\\n+    if (s == null || s.length() == 0) {\\r\\n         return s;\\r\\n     }\\r\\n     int pos = s.length();\\r\\n-    while ((pos > 0) && Character.isWhitespace(s.charAt(pos - 1))) {\\r\\n+    while (pos > 0 && Character.isWhitespace(s.charAt(pos - 1))) {\\r\\n         --pos;\\r\\n     }\\r\\n     return s.substring(0, pos);\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2008","diff":"\"\""},{"authorEmail":"roxspring@apache.org","authorName":"Robert James Oxspring","commitYear":"2004","diff":"\"@@ -1,10 +1,10 @@\\n protected String rtrim(String s) {\\r\\n     if ((s == null) || (s.length() == 0)) {\\r\\n         return s;\\r\\n     }\\r\\n     int pos = s.length();\\r\\n-    while ((pos >= 0) && Character.isWhitespace(s.charAt(pos - 1))) {\\r\\n+    while ((pos > 0) && Character.isWhitespace(s.charAt(pos - 1))) {\\r\\n         --pos;\\r\\n     }\\r\\n     return s.substring(0, pos);\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -1,10 +1,10 @@\\n protected String rtrim(String s) {\\r\\n-    if (s == null || s.length() == 0) {\\r\\n+    if ((s == null) || (s.length() == 0)) {\\r\\n         return s;\\r\\n     }\\r\\n     int pos = s.length();\\r\\n-    while (pos >= 0 && Character.isWhitespace(s.charAt(pos - 1))) {\\r\\n+    while ((pos >= 0) && Character.isWhitespace(s.charAt(pos - 1))) {\\r\\n         --pos;\\r\\n     }\\r\\n     return s.substring(0, pos);\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jstrachan@apache.org","authorName":"James Strachan","commitYear":"2002","diff":"\"@@ -0,0 +1,10 @@\\n+protected String rtrim(String s) {\\r\\n+    if (s == null || s.length() == 0) {\\r\\n+        return s;\\r\\n+    }\\r\\n+    int pos = s.length();\\r\\n+    while (pos >= 0 && Character.isWhitespace(s.charAt(pos - 1))) {\\r\\n+        --pos;\\r\\n+    }\\r\\n+    return s.substring(0, pos);\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\main\java\org\apache\commons\cli\HelpFormatter.java	setArgName	org.apache.commons.cli.HelpFormatter.setArgName(String)	843	845	1	[{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,3 +1,3 @@\\n-public void setArgName(String name) {\\r\\n+public void setArgName(final String name) {\\r\\n     this.defaultArgName = name;\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -0,0 +1,3 @@\\n+public void setArgName(String name) {\\r\\n+    this.defaultArgName = name;\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\main\java\org\apache\commons\cli\HelpFormatter.java	setDescPadding	org.apache.commons.cli.HelpFormatter.setDescPadding(int)	852	854	1	[{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,3 +1,3 @@\\n-public void setDescPadding(int padding) {\\r\\n+public void setDescPadding(final int padding) {\\r\\n     this.defaultDescPad = padding;\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -0,0 +1,3 @@\\n+public void setDescPadding(int padding) {\\r\\n+    this.defaultDescPad = padding;\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\main\java\org\apache\commons\cli\HelpFormatter.java	setLeftPadding	org.apache.commons.cli.HelpFormatter.setLeftPadding(int)	861	863	1	[{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,3 +1,3 @@\\n-public void setLeftPadding(int padding) {\\r\\n+public void setLeftPadding(final int padding) {\\r\\n     this.defaultLeftPad = padding;\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -0,0 +1,3 @@\\n+public void setLeftPadding(int padding) {\\r\\n+    this.defaultLeftPad = padding;\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\main\java\org\apache\commons\cli\HelpFormatter.java	setLongOptPrefix	org.apache.commons.cli.HelpFormatter.setLongOptPrefix(String)	870	872	1	[{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,3 +1,3 @@\\n-public void setLongOptPrefix(String prefix) {\\r\\n+public void setLongOptPrefix(final String prefix) {\\r\\n     this.defaultLongOptPrefix = prefix;\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -0,0 +1,3 @@\\n+public void setLongOptPrefix(String prefix) {\\r\\n+    this.defaultLongOptPrefix = prefix;\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\main\java\org\apache\commons\cli\HelpFormatter.java	setLongOptSeparator	org.apache.commons.cli.HelpFormatter.setLongOptSeparator(String)	881	883	1	[{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2023","diff":"\"\""},{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"\""},{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,3 +1,3 @@\\n-public void setLongOptSeparator(String longOptSeparator) {\\r\\n+public void setLongOptSeparator(final String longOptSeparator) {\\r\\n     this.longOptSeparator = longOptSeparator;\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2010","diff":"\"@@ -0,0 +1,3 @@\\n+public void setLongOptSeparator(String longOptSeparator) {\\r\\n+    this.longOptSeparator = longOptSeparator;\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\main\java\org\apache\commons\cli\HelpFormatter.java	setNewLine	org.apache.commons.cli.HelpFormatter.setNewLine(String)	890	892	1	[{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,3 +1,3 @@\\n-public void setNewLine(String newline) {\\r\\n+public void setNewLine(final String newline) {\\r\\n     this.defaultNewLine = newline;\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -0,0 +1,3 @@\\n+public void setNewLine(String newline) {\\r\\n+    this.defaultNewLine = newline;\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\main\java\org\apache\commons\cli\HelpFormatter.java	setOptionComparator	org.apache.commons.cli.HelpFormatter.setOptionComparator(Comparator<Option>)	901	903	1	[{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2023","diff":"\"\""},{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"\""},{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,3 +1,3 @@\\n-public void setOptionComparator(Comparator<Option> comparator) {\\r\\n+public void setOptionComparator(final Comparator<Option> comparator) {\\r\\n     this.optionComparator = comparator;\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"tn@apache.org","authorName":"Thomas Neidhart","commitYear":"2013","diff":"\"\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2011","diff":"\"@@ -1,7 +1,3 @@\\n public void setOptionComparator(Comparator<Option> comparator) {\\r\\n-    if (comparator == null) {\\r\\n-        this.optionComparator = new OptionComparator();\\r\\n-    } else {\\r\\n-        this.optionComparator = comparator;\\r\\n-    }\\r\\n+    this.optionComparator = comparator;\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2011","diff":"\"@@ -1,7 +1,7 @@\\n-public void setOptionComparator(Comparator comparator) {\\r\\n+public void setOptionComparator(Comparator<Option> comparator) {\\r\\n     if (comparator == null) {\\r\\n         this.optionComparator = new OptionComparator();\\r\\n     } else {\\r\\n         this.optionComparator = comparator;\\r\\n     }\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2009","diff":"\"\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2008","diff":"\"\""},{"authorEmail":"bayard@apache.org","authorName":"Henri Yandell","commitYear":"2008","diff":"\"@@ -0,0 +1,7 @@\\n+public void setOptionComparator(Comparator comparator) {\\r\\n+    if (comparator == null) {\\r\\n+        this.optionComparator = new OptionComparator();\\r\\n+    } else {\\r\\n+        this.optionComparator = comparator;\\r\\n+    }\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\main\java\org\apache\commons\cli\HelpFormatter.java	setOptPrefix	org.apache.commons.cli.HelpFormatter.setOptPrefix(String)	910	912	1	[{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,3 +1,3 @@\\n-public void setOptPrefix(String prefix) {\\r\\n+public void setOptPrefix(final String prefix) {\\r\\n     this.defaultOptPrefix = prefix;\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -0,0 +1,3 @@\\n+public void setOptPrefix(String prefix) {\\r\\n+    this.defaultOptPrefix = prefix;\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\main\java\org\apache\commons\cli\HelpFormatter.java	setSyntaxPrefix	org.apache.commons.cli.HelpFormatter.setSyntaxPrefix(String)	919	921	1	[{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,3 +1,3 @@\\n-public void setSyntaxPrefix(String prefix) {\\r\\n+public void setSyntaxPrefix(final String prefix) {\\r\\n     this.defaultSyntaxPrefix = prefix;\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -0,0 +1,3 @@\\n+public void setSyntaxPrefix(String prefix) {\\r\\n+    this.defaultSyntaxPrefix = prefix;\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\main\java\org\apache\commons\cli\HelpFormatter.java	setWidth	org.apache.commons.cli.HelpFormatter.setWidth(int)	928	930	1	[{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,3 +1,3 @@\\n-public void setWidth(int width) {\\r\\n+public void setWidth(final int width) {\\r\\n     this.defaultWidth = width;\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -0,0 +1,3 @@\\n+public void setWidth(int width) {\\r\\n+    this.defaultWidth = width;\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\main\java\org\apache\commons\cli\MissingArgumentException.java	getOption	org.apache.commons.cli.MissingArgumentException.getOption()	58	60	1	[{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2008","diff":"\"\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2008","diff":"\"@@ -0,0 +1,3 @@\\n+public Option getOption() {\\r\\n+    return option;\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\main\java\org\apache\commons\cli\MissingOptionException.java	createMessage	org.apache.commons.cli.MissingOptionException.createMessage(List<?>)	36	50	4	[{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"\""},{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,13 +1,13 @@\\n-private static String createMessage(List<?> missingOptions) {\\r\\n+private static String createMessage(final List<?> missingOptions) {\\r\\n     final StringBuilder buf = new StringBuilder(\\\"Missing required option\\\");\\r\\n     buf.append(missingOptions.size() == 1 ? \\\"\\\" : \\\"s\\\");\\r\\n     buf.append(\\\": \\\");\\r\\n     final Iterator<?> it = missingOptions.iterator();\\r\\n     while (it.hasNext()) {\\r\\n         buf.append(it.next());\\r\\n         if (it.hasNext()) {\\r\\n             buf.append(\\\", \\\");\\r\\n         }\\r\\n     }\\r\\n     return buf.toString();\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,13 +1,13 @@\\n private static String createMessage(List<?> missingOptions) {\\r\\n-    StringBuilder buf = new StringBuilder(\\\"Missing required option\\\");\\r\\n+    final StringBuilder buf = new StringBuilder(\\\"Missing required option\\\");\\r\\n     buf.append(missingOptions.size() == 1 ? \\\"\\\" : \\\"s\\\");\\r\\n     buf.append(\\\": \\\");\\r\\n-    Iterator<?> it = missingOptions.iterator();\\r\\n+    final Iterator<?> it = missingOptions.iterator();\\r\\n     while (it.hasNext()) {\\r\\n         buf.append(it.next());\\r\\n         if (it.hasNext()) {\\r\\n             buf.append(\\\", \\\");\\r\\n         }\\r\\n     }\\r\\n     return buf.toString();\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"sebb@apache.org","authorName":"Sebastian Bazley","commitYear":"2013","diff":"\"@@ -1,13 +1,13 @@\\n-private static String createMessage(List missingOptions) {\\r\\n+private static String createMessage(List<?> missingOptions) {\\r\\n     StringBuilder buf = new StringBuilder(\\\"Missing required option\\\");\\r\\n     buf.append(missingOptions.size() == 1 ? \\\"\\\" : \\\"s\\\");\\r\\n     buf.append(\\\": \\\");\\r\\n-    Iterator it = missingOptions.iterator();\\r\\n+    Iterator<?> it = missingOptions.iterator();\\r\\n     while (it.hasNext()) {\\r\\n         buf.append(it.next());\\r\\n         if (it.hasNext()) {\\r\\n             buf.append(\\\", \\\");\\r\\n         }\\r\\n     }\\r\\n     return buf.toString();\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2011","diff":"\"@@ -1,13 +1,13 @@\\n private static String createMessage(List missingOptions) {\\r\\n-    StringBuffer buff = new StringBuffer(\\\"Missing required option\\\");\\r\\n-    buff.append(missingOptions.size() == 1 ? \\\"\\\" : \\\"s\\\");\\r\\n-    buff.append(\\\": \\\");\\r\\n+    StringBuilder buf = new StringBuilder(\\\"Missing required option\\\");\\r\\n+    buf.append(missingOptions.size() == 1 ? \\\"\\\" : \\\"s\\\");\\r\\n+    buf.append(\\\": \\\");\\r\\n     Iterator it = missingOptions.iterator();\\r\\n     while (it.hasNext()) {\\r\\n-        buff.append(it.next());\\r\\n+        buf.append(it.next());\\r\\n         if (it.hasNext()) {\\r\\n-            buff.append(\\\", \\\");\\r\\n+            buf.append(\\\", \\\");\\r\\n         }\\r\\n     }\\r\\n-    return buff.toString();\\r\\n+    return buf.toString();\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2011","diff":"\"\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2008","diff":"\"@@ -0,0 +1,13 @@\\n+private static String createMessage(List missingOptions) {\\r\\n+    StringBuffer buff = new StringBuffer(\\\"Missing required option\\\");\\r\\n+    buff.append(missingOptions.size() == 1 ? \\\"\\\" : \\\"s\\\");\\r\\n+    buff.append(\\\": \\\");\\r\\n+    Iterator it = missingOptions.iterator();\\r\\n+    while (it.hasNext()) {\\r\\n+        buff.append(it.next());\\r\\n+        if (it.hasNext()) {\\r\\n+            buff.append(\\\", \\\");\\r\\n+        }\\r\\n+    }\\r\\n+    return buff.toString();\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\main\java\org\apache\commons\cli\MissingOptionException.java	getMissingOptions	org.apache.commons.cli.MissingOptionException.getMissingOptions()	82	84	1	[{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"\""},{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2011","diff":"\"\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2008","diff":"\"\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2008","diff":"\"@@ -0,0 +1,3 @@\\n+public List getMissingOptions() {\\r\\n+    return missingOptions;\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\main\java\org\apache\commons\cli\Option.java	argName	org.apache.commons.cli.Builder.argName(String)	102	105	1	[{"authorEmail":"tn@apache.org","authorName":"Thomas Neidhart","commitYear":"2013","diff":"\"@@ -0,0 +1,4 @@\\n+public Builder argName(final String argName) {\\r\\n+    this.argName = argName;\\r\\n+    return this;\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\main\java\org\apache\commons\cli\Option.java	build	org.apache.commons.cli.Builder.build()	113	118	4	[{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"@@ -1,6 +1,6 @@\\n public Option build() {\\r\\n-    if (opt == null && longOpt == null) {\\r\\n+    if (option == null && longOption == null) {\\r\\n         throw new IllegalArgumentException(\\\"Either opt or longOpt must be specified\\\");\\r\\n     }\\r\\n     return new Option(this);\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"\""},{"authorEmail":"tn@apache.org","authorName":"Thomas Neidhart","commitYear":"2013","diff":"\"@@ -1,3 +1,6 @@\\n public Option build() {\\r\\n+    if (opt == null && longOpt == null) {\\r\\n+        throw new IllegalArgumentException(\\\"Either opt or longOpt must be specified\\\");\\r\\n+    }\\r\\n     return new Option(this);\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"tn@apache.org","authorName":"Thomas Neidhart","commitYear":"2013","diff":"\"@@ -0,0 +1,3 @@\\n+public Option build() {\\r\\n+    return new Option(this);\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\main\java\org\apache\commons\cli\Option.java	desc	org.apache.commons.cli.Builder.desc(String)	126	129	1	[{"authorEmail":"tn@apache.org","authorName":"Thomas Neidhart","commitYear":"2013","diff":"\"@@ -0,0 +1,4 @@\\n+public Builder desc(final String description) {\\r\\n+    this.description = description;\\r\\n+    return this;\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\main\java\org\apache\commons\cli\Option.java	hasArg	org.apache.commons.cli.Builder.hasArg()	136	138	1	[{"authorEmail":"tn@apache.org","authorName":"Thomas Neidhart","commitYear":"2013","diff":"\"@@ -1,3 +1,3 @@\\n-public boolean hasArg() {\\r\\n-    return numberOfArgs > 0 || numberOfArgs == UNLIMITED_VALUES;\\r\\n+public Builder hasArg() {\\r\\n+    return hasArg(true);\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2008","diff":"\"@@ -1,3 +1,3 @@\\n public boolean hasArg() {\\r\\n-    return (this.numberOfArgs > 0) || (numberOfArgs == UNLIMITED_VALUES);\\r\\n+    return numberOfArgs > 0 || numberOfArgs == UNLIMITED_VALUES;\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"roxspring@apache.org","authorName":"Robert James Oxspring","commitYear":"2004","diff":"\"\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -1,3 +1,3 @@\\n public boolean hasArg() {\\r\\n-    return this.numberOfArgs > 0 || numberOfArgs == UNLIMITED_VALUES;\\r\\n+    return (this.numberOfArgs > 0) || (numberOfArgs == UNLIMITED_VALUES);\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -1,3 +1,3 @@\\n public boolean hasArg() {\\r\\n-    return this.hasArg;\\r\\n+    return this.numberOfArgs > 0 || numberOfArgs == UNLIMITED_VALUES;\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jstrachan@apache.org","authorName":"James Strachan","commitYear":"2002","diff":"\"@@ -0,0 +1,3 @@\\n+public boolean hasArg() {\\r\\n+    return this.hasArg;\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\main\java\org\apache\commons\cli\Option.java	hasArg	org.apache.commons.cli.Builder.hasArg(boolean)	146	150	2	[{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"@@ -1,4 +1,4 @@\\n public Builder hasArg(final boolean hasArg) {\\r\\n-    numberOfArgs = hasArg ? 1 : Option.UNINITIALIZED;\\r\\n+    argCount = hasArg ? 1 : Option.UNINITIALIZED;\\r\\n     return this;\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"tn@apache.org","authorName":"Thomas Neidhart","commitYear":"2013","diff":"\"@@ -0,0 +1,4 @@\\n+public Builder hasArg(final boolean hasArg) {\\r\\n+    numberOfArgs = hasArg ? 1 : Option.UNINITIALIZED;\\r\\n+    return this;\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\main\java\org\apache\commons\cli\Option.java	hasArgs	org.apache.commons.cli.Builder.hasArgs()	157	160	1	[{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"@@ -1,4 +1,4 @@\\n public Builder hasArgs() {\\r\\n-    numberOfArgs = Option.UNLIMITED_VALUES;\\r\\n+    argCount = Option.UNLIMITED_VALUES;\\r\\n     return this;\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"tn@apache.org","authorName":"Thomas Neidhart","commitYear":"2013","diff":"\"@@ -1,3 +1,4 @@\\n-public boolean hasArgs() {\\r\\n-    return numberOfArgs > 1 || numberOfArgs == UNLIMITED_VALUES;\\r\\n+public Builder hasArgs() {\\r\\n+    numberOfArgs = Option.UNLIMITED_VALUES;\\r\\n+    return this;\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2008","diff":"\"@@ -1,3 +1,3 @@\\n public boolean hasArgs() {\\r\\n-    return (this.numberOfArgs > 1) || (this.numberOfArgs == UNLIMITED_VALUES);\\r\\n+    return numberOfArgs > 1 || numberOfArgs == UNLIMITED_VALUES;\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2008","diff":"\"\""},{"authorEmail":"roxspring@apache.org","authorName":"Robert James Oxspring","commitYear":"2004","diff":"\"\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -1,3 +1,3 @@\\n public boolean hasArgs() {\\r\\n-    return this.numberOfArgs > 1 || this.numberOfArgs == UNLIMITED_VALUES;\\r\\n+    return (this.numberOfArgs > 1) || (this.numberOfArgs == UNLIMITED_VALUES);\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -1,3 +1,3 @@\\n public boolean hasArgs() {\\r\\n-    return (this.numberOfArgs > 1 || this.numberOfArgs == UNLIMITED_VALUES);\\r\\n+    return this.numberOfArgs > 1 || this.numberOfArgs == UNLIMITED_VALUES;\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -0,0 +1,3 @@\\n+public boolean hasArgs() {\\r\\n+    return (this.numberOfArgs > 1 || this.numberOfArgs == UNLIMITED_VALUES);\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\main\java\org\apache\commons\cli\Option.java	longOpt	org.apache.commons.cli.Builder.longOpt(String)	168	171	1	[{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"@@ -1,4 +1,4 @@\\n public Builder longOpt(final String longOpt) {\\r\\n-    this.longOpt = longOpt;\\r\\n+    this.longOption = longOpt;\\r\\n     return this;\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"tn@apache.org","authorName":"Thomas Neidhart","commitYear":"2013","diff":"\"@@ -0,0 +1,4 @@\\n+public Builder longOpt(final String longOpt) {\\r\\n+    this.longOpt = longOpt;\\r\\n+    return this;\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\main\java\org\apache\commons\cli\Option.java	numberOfArgs	org.apache.commons.cli.Builder.numberOfArgs(int)	179	182	1	[{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2023","diff":"\"@@ -1,4 +1,4 @@\\n-public Builder numberOfArgs(final int numberOfArgs) {\\r\\n-    this.argCount = numberOfArgs;\\r\\n+public Builder numberOfArgs(final int argCount) {\\r\\n+    this.argCount = argCount;\\r\\n     return this;\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"@@ -1,4 +1,4 @@\\n public Builder numberOfArgs(final int numberOfArgs) {\\r\\n-    this.numberOfArgs = numberOfArgs;\\r\\n+    this.argCount = numberOfArgs;\\r\\n     return this;\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"tn@apache.org","authorName":"Thomas Neidhart","commitYear":"2013","diff":"\"@@ -0,0 +1,4 @@\\n+public Builder numberOfArgs(final int numberOfArgs) {\\r\\n+    this.numberOfArgs = numberOfArgs;\\r\\n+    return this;\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\main\java\org\apache\commons\cli\Option.java	option	org.apache.commons.cli.Builder.option(String)	192	195	1	[{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"@@ -1,4 +1,4 @@\\n-public Builder option(String option) throws IllegalArgumentException {\\r\\n+public Builder option(final String option) throws IllegalArgumentException {\\r\\n     this.option = OptionValidator.validate(option);\\r\\n     return this;\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"\""},{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"@@ -1,4 +1,4 @@\\n-public Builder opt(String opt) throws IllegalArgumentException {\\r\\n-    this.option = OptionValidator.validate(opt);\\r\\n+public Builder option(String option) throws IllegalArgumentException {\\r\\n+    this.option = OptionValidator.validate(option);\\r\\n     return this;\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"waldemar.sojka@gmail.com","authorName":"Waldemar Sojka","commitYear":"2021","diff":"\"@@ -0,0 +1,4 @@\\n+public Builder opt(String opt) throws IllegalArgumentException {\\r\\n+    this.option = OptionValidator.validate(opt);\\r\\n+    return this;\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\main\java\org\apache\commons\cli\Option.java	optionalArg	org.apache.commons.cli.Builder.optionalArg(boolean)	203	207	2	[{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2023","diff":"\"@@ -1,4 +1,5 @@\\n public Builder optionalArg(final boolean optionalArg) {\\r\\n+    this.argCount = optionalArg ? 1 : UNINITIALIZED;\\r\\n     this.optionalArg = optionalArg;\\r\\n     return this;\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2023","diff":"\"@@ -1,4 +1,4 @@\\n-public Builder optionalArg(final boolean isOptional) {\\r\\n-    this.optionalArg = isOptional;\\r\\n+public Builder optionalArg(final boolean optionalArg) {\\r\\n+    this.optionalArg = optionalArg;\\r\\n     return this;\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"\""},{"authorEmail":"tn@apache.org","authorName":"Thomas Neidhart","commitYear":"2013","diff":"\"@@ -0,0 +1,4 @@\\n+public Builder optionalArg(final boolean isOptional) {\\r\\n+    this.optionalArg = isOptional;\\r\\n+    return this;\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\main\java\org\apache\commons\cli\Option.java	required	org.apache.commons.cli.Builder.required()	214	216	1	[{"authorEmail":"tn@apache.org","authorName":"Thomas Neidhart","commitYear":"2013","diff":"\"@@ -0,0 +1,3 @@\\n+public Builder required() {\\r\\n+    return required(true);\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\main\java\org\apache\commons\cli\Option.java	required	org.apache.commons.cli.Builder.required(boolean)	224	227	1	[{"authorEmail":"tn@apache.org","authorName":"Thomas Neidhart","commitYear":"2013","diff":"\"@@ -0,0 +1,4 @@\\n+public Builder required(final boolean required) {\\r\\n+    this.required = required;\\r\\n+    return this;\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\main\java\org\apache\commons\cli\Option.java	type	org.apache.commons.cli.Builder.type(Class<?>)	235	238	1	[{"authorEmail":"tn@apache.org","authorName":"Thomas Neidhart","commitYear":"2013","diff":"\"@@ -0,0 +1,4 @@\\n+public Builder type(final Class<?> type) {\\r\\n+    this.type = type;\\r\\n+    return this;\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\main\java\org\apache\commons\cli\Option.java	valueSeparator	org.apache.commons.cli.Builder.valueSeparator()	245	247	1	[{"authorEmail":"tn@apache.org","authorName":"Thomas Neidhart","commitYear":"2013","diff":"\"@@ -0,0 +1,3 @@\\n+public Builder valueSeparator() {\\r\\n+    return valueSeparator('=');\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\main\java\org\apache\commons\cli\Option.java	valueSeparator	org.apache.commons.cli.Builder.valueSeparator(char)	269	272	1	[{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2023","diff":"\"@@ -1,4 +1,4 @@\\n-public Builder valueSeparator(final char sep) {\\r\\n-    valueSeparator = sep;\\r\\n+public Builder valueSeparator(final char valueSeparator) {\\r\\n+    this.valueSeparator = valueSeparator;\\r\\n     return this;\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"\""},{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"@@ -1,4 +1,4 @@\\n public Builder valueSeparator(final char sep) {\\r\\n-    valuesep = sep;\\r\\n+    valueSeparator = sep;\\r\\n     return this;\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"\""},{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"\""},{"authorEmail":"tn@apache.org","authorName":"Thomas Neidhart","commitYear":"2013","diff":"\"\""},{"authorEmail":"tn@apache.org","authorName":"Thomas Neidhart","commitYear":"2013","diff":"\"\""},{"authorEmail":"tn@apache.org","authorName":"Thomas Neidhart","commitYear":"2013","diff":"\"@@ -0,0 +1,4 @@\\n+public Builder valueSeparator(final char sep) {\\r\\n+    valuesep = sep;\\r\\n+    return this;\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\main\java\org\apache\commons\cli\Option.java	builder	org.apache.commons.cli.Option.builder()	293	295	1	[{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"\""},{"authorEmail":"tn@apache.org","authorName":"Thomas Neidhart","commitYear":"2013","diff":"\"@@ -0,0 +1,3 @@\\n+public static Builder builder() {\\r\\n+    return builder(null);\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\main\java\org\apache\commons\cli\Option.java	builder	org.apache.commons.cli.Option.builder(String)	305	307	1	[{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"@@ -1,3 +1,3 @@\\n-public static Builder builder(final String opt) {\\r\\n-    return new Builder(opt);\\r\\n+public static Builder builder(final String option) {\\r\\n+    return new Builder(option);\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"\""},{"authorEmail":"tn@apache.org","authorName":"Thomas Neidhart","commitYear":"2013","diff":"\"@@ -0,0 +1,3 @@\\n+public static Builder builder(final String opt) {\\r\\n+    return new Builder(opt);\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\main\java\org\apache\commons\cli\Option.java	acceptsArg	org.apache.commons.cli.Option.acceptsArg()	410	412	5	[{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"@@ -1,3 +1,3 @@\\n boolean acceptsArg() {\\r\\n-    return (hasArg() || hasArgs() || hasOptionalArg()) && (numberOfArgs <= 0 || values.size() < numberOfArgs);\\r\\n+    return (hasArg() || hasArgs() || hasOptionalArg()) && (argCount <= 0 || values.size() < argCount);\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2009","diff":"\"@@ -0,0 +1,3 @@\\n+boolean acceptsArg() {\\r\\n+    return (hasArg() || hasArgs() || hasOptionalArg()) && (numberOfArgs <= 0 || values.size() < numberOfArgs);\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\main\java\org\apache\commons\cli\Option.java	add	org.apache.commons.cli.Option.add(String)	422	429	3	[{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2022","diff":"\"@@ -1,6 +1,6 @@\\n private void add(final String value) {\\r\\n     if (!acceptsArg()) {\\r\\n-        throw new RuntimeException(\\\"Cannot add value, list full.\\\");\\r\\n+        throw new IllegalArgumentException(\\\"Cannot add value, list full.\\\");\\r\\n     }\\r\\n     values.add(value);\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"\""},{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,6 +1,6 @@\\n-private void add(String value) {\\r\\n+private void add(final String value) {\\r\\n     if (!acceptsArg()) {\\r\\n         throw new RuntimeException(\\\"Cannot add value, list full.\\\");\\r\\n     }\\r\\n     values.add(value);\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2009","diff":"\"@@ -1,6 +1,6 @@\\n private void add(String value) {\\r\\n-    if ((numberOfArgs > 0) && (values.size() > (numberOfArgs - 1))) {\\r\\n+    if (!acceptsArg()) {\\r\\n         throw new RuntimeException(\\\"Cannot add value, list full.\\\");\\r\\n     }\\r\\n     values.add(value);\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2008","diff":"\"@@ -1,6 +1,6 @@\\n private void add(String value) {\\r\\n     if ((numberOfArgs > 0) && (values.size() > (numberOfArgs - 1))) {\\r\\n         throw new RuntimeException(\\\"Cannot add value, list full.\\\");\\r\\n     }\\r\\n-    this.values.add(value);\\r\\n+    values.add(value);\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"roxspring@apache.org","authorName":"Robert James Oxspring","commitYear":"2004","diff":"\"\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -1,6 +1,6 @@\\n private void add(String value) {\\r\\n-    if (numberOfArgs > 0 && values.size() > numberOfArgs - 1) {\\r\\n+    if ((numberOfArgs > 0) && (values.size() > (numberOfArgs - 1))) {\\r\\n         throw new RuntimeException(\\\"Cannot add value, list full.\\\");\\r\\n     }\\r\\n     this.values.add(value);\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -0,0 +1,6 @@\\n+private void add(String value) {\\r\\n+    if (numberOfArgs > 0 && values.size() > numberOfArgs - 1) {\\r\\n+        throw new RuntimeException(\\\"Cannot add value, list full.\\\");\\r\\n+    }\\r\\n+    this.values.add(value);\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\main\java\org\apache\commons\cli\Option.java	addValue	org.apache.commons.cli.Option.addValue(String)	441	444	2	[{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"\""},{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"\""},{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2019","diff":"\"\""},{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,4 +1,4 @@\\n @Deprecated\\r\\n-public boolean addValue(String value) {\\r\\n+public boolean addValue(final String value) {\\r\\n     throw new UnsupportedOperationException(\\\"The addValue method is not intended for client use. \\\" + \\\"Subclasses should use the addValueForProcessing method instead. \\\");\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"tn@apache.org","authorName":"Thomas Neidhart","commitYear":"2013","diff":"\"@@ -1,3 +1,4 @@\\n+@Deprecated\\r\\n public boolean addValue(String value) {\\r\\n     throw new UnsupportedOperationException(\\\"The addValue method is not intended for client use. \\\" + \\\"Subclasses should use the addValueForProcessing method instead. \\\");\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2008","diff":"\"\""},{"authorEmail":"bayard@apache.org","authorName":"Henri Yandell","commitYear":"2007","diff":"\"\""},{"authorEmail":"bayard@apache.org","authorName":"Henri Yandell","commitYear":"2007","diff":"\"@@ -1,3 +1,3 @@\\n-public boolean addValue(Object object) {\\r\\n+public boolean addValue(String value) {\\r\\n     throw new UnsupportedOperationException(\\\"The addValue method is not intended for client use. \\\" + \\\"Subclasses should use the addValueForProcessing method instead. \\\");\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"bayard@apache.org","authorName":"Henri Yandell","commitYear":"2007","diff":"\"@@ -1,8 +1,3 @@\\n-void addValue(String value) {\\r\\n-    switch(numberOfArgs) {\\r\\n-        case UNINITIALIZED:\\r\\n-            throw new RuntimeException(\\\"NO_ARGS_ALLOWED\\\");\\r\\n-        default:\\r\\n-            processValue(value);\\r\\n-    }\\r\\n+public boolean addValue(Object object) {\\r\\n+    throw new UnsupportedOperationException(\\\"The addValue method is not intended for client use. \\\" + \\\"Subclasses should use the addValueForProcessing method instead. \\\");\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"roxspring@apache.org","authorName":"Robert James Oxspring","commitYear":"2004","diff":"\"\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -1,8 +1,8 @@\\n void addValue(String value) {\\r\\n     switch(numberOfArgs) {\\r\\n         case UNINITIALIZED:\\r\\n-            throw new RuntimeException(\\\"Cannot add value, no arguments allowed.\\\");\\r\\n+            throw new RuntimeException(\\\"NO_ARGS_ALLOWED\\\");\\r\\n         default:\\r\\n             processValue(value);\\r\\n     }\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -1,8 +1,8 @@\\n void addValue(String value) {\\r\\n     switch(numberOfArgs) {\\r\\n         case UNINITIALIZED:\\r\\n-            break;\\r\\n+            throw new RuntimeException(\\\"Cannot add value, no arguments allowed.\\\");\\r\\n         default:\\r\\n             processValue(value);\\r\\n     }\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -1,32 +1,8 @@\\n-public boolean addValue(String value) {\\r\\n+void addValue(String value) {\\r\\n     switch(numberOfArgs) {\\r\\n         case UNINITIALIZED:\\r\\n-            return false;\\r\\n-        case UNLIMITED_VALUES:\\r\\n-            if (getValueSeparator() > 0) {\\r\\n-                int index = 0;\\r\\n-                while ((index = value.indexOf(getValueSeparator())) != -1) {\\r\\n-                    this.values.add(value.substring(0, index));\\r\\n-                    value = value.substring(index + 1);\\r\\n-                }\\r\\n-            }\\r\\n-            this.values.add(value);\\r\\n-            return true;\\r\\n+            break;\\r\\n         default:\\r\\n-            if (getValueSeparator() > 0) {\\r\\n-                int index = 0;\\r\\n-                while ((index = value.indexOf(getValueSeparator())) != -1) {\\r\\n-                    if (values.size() > numberOfArgs - 1) {\\r\\n-                        return false;\\r\\n-                    }\\r\\n-                    this.values.add(value.substring(0, index));\\r\\n-                    value = value.substring(index + 1);\\r\\n-                }\\r\\n-            }\\r\\n-            if (values.size() > numberOfArgs - 1) {\\r\\n-                return false;\\r\\n-            }\\r\\n-            this.values.add(value);\\r\\n-            return true;\\r\\n+            processValue(value);\\r\\n     }\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -1,15 +1,32 @@\\n public boolean addValue(String value) {\\r\\n     switch(numberOfArgs) {\\r\\n         case UNINITIALIZED:\\r\\n             return false;\\r\\n         case UNLIMITED_VALUES:\\r\\n+            if (getValueSeparator() > 0) {\\r\\n+                int index = 0;\\r\\n+                while ((index = value.indexOf(getValueSeparator())) != -1) {\\r\\n+                    this.values.add(value.substring(0, index));\\r\\n+                    value = value.substring(index + 1);\\r\\n+                }\\r\\n+            }\\r\\n             this.values.add(value);\\r\\n             return true;\\r\\n         default:\\r\\n+            if (getValueSeparator() > 0) {\\r\\n+                int index = 0;\\r\\n+                while ((index = value.indexOf(getValueSeparator())) != -1) {\\r\\n+                    if (values.size() > numberOfArgs - 1) {\\r\\n+                        return false;\\r\\n+                    }\\r\\n+                    this.values.add(value.substring(0, index));\\r\\n+                    value = value.substring(index + 1);\\r\\n+                }\\r\\n+            }\\r\\n             if (values.size() > numberOfArgs - 1) {\\r\\n                 return false;\\r\\n             }\\r\\n             this.values.add(value);\\r\\n             return true;\\r\\n     }\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -1,3 +1,15 @@\\n-public void addValue(String value) {\\r\\n-    this.values.add(value);\\r\\n+public boolean addValue(String value) {\\r\\n+    switch(numberOfArgs) {\\r\\n+        case UNINITIALIZED:\\r\\n+            return false;\\r\\n+        case UNLIMITED_VALUES:\\r\\n+            this.values.add(value);\\r\\n+            return true;\\r\\n+        default:\\r\\n+            if (values.size() > numberOfArgs - 1) {\\r\\n+                return false;\\r\\n+            }\\r\\n+            this.values.add(value);\\r\\n+            return true;\\r\\n+    }\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jstrachan@apache.org","authorName":"James Strachan","commitYear":"2002","diff":"\"@@ -0,0 +1,3 @@\\n+public void addValue(String value) {\\r\\n+    this.values.add(value);\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\main\java\org\apache\commons\cli\Option.java	addValueForProcessing	org.apache.commons.cli.Option.addValueForProcessing(String)	451	456	3	[{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2022","diff":"\"@@ -1,6 +1,6 @@\\n void addValueForProcessing(final String value) {\\r\\n     if (argCount == UNINITIALIZED) {\\r\\n-        throw new RuntimeException(\\\"NO_ARGS_ALLOWED\\\");\\r\\n+        throw new IllegalArgumentException(\\\"NO_ARGS_ALLOWED\\\");\\r\\n     }\\r\\n     processValue(value);\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"@@ -1,6 +1,6 @@\\n void addValueForProcessing(final String value) {\\r\\n-    if (numberOfArgs == UNINITIALIZED) {\\r\\n+    if (argCount == UNINITIALIZED) {\\r\\n         throw new RuntimeException(\\\"NO_ARGS_ALLOWED\\\");\\r\\n     }\\r\\n     processValue(value);\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"\""},{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,6 +1,6 @@\\n-void addValueForProcessing(String value) {\\r\\n+void addValueForProcessing(final String value) {\\r\\n     if (numberOfArgs == UNINITIALIZED) {\\r\\n         throw new RuntimeException(\\\"NO_ARGS_ALLOWED\\\");\\r\\n     }\\r\\n     processValue(value);\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"tn@apache.org","authorName":"Thomas Neidhart","commitYear":"2013","diff":"\"@@ -1,8 +1,6 @@\\n void addValueForProcessing(String value) {\\r\\n-    switch(numberOfArgs) {\\r\\n-        case UNINITIALIZED:\\r\\n-            throw new RuntimeException(\\\"NO_ARGS_ALLOWED\\\");\\r\\n-        default:\\r\\n-            processValue(value);\\r\\n+    if (numberOfArgs == UNINITIALIZED) {\\r\\n+        throw new RuntimeException(\\\"NO_ARGS_ALLOWED\\\");\\r\\n     }\\r\\n+    processValue(value);\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2008","diff":"\"\""},{"authorEmail":"bayard@apache.org","authorName":"Henri Yandell","commitYear":"2007","diff":"\"@@ -1,8 +1,8 @@\\n-void addValue(String value) {\\r\\n+void addValueForProcessing(String value) {\\r\\n     switch(numberOfArgs) {\\r\\n         case UNINITIALIZED:\\r\\n             throw new RuntimeException(\\\"NO_ARGS_ALLOWED\\\");\\r\\n         default:\\r\\n             processValue(value);\\r\\n     }\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"roxspring@apache.org","authorName":"Robert James Oxspring","commitYear":"2004","diff":"\"\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -1,8 +1,8 @@\\n void addValue(String value) {\\r\\n     switch(numberOfArgs) {\\r\\n         case UNINITIALIZED:\\r\\n-            throw new RuntimeException(\\\"Cannot add value, no arguments allowed.\\\");\\r\\n+            throw new RuntimeException(\\\"NO_ARGS_ALLOWED\\\");\\r\\n         default:\\r\\n             processValue(value);\\r\\n     }\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -1,8 +1,8 @@\\n void addValue(String value) {\\r\\n     switch(numberOfArgs) {\\r\\n         case UNINITIALIZED:\\r\\n-            break;\\r\\n+            throw new RuntimeException(\\\"Cannot add value, no arguments allowed.\\\");\\r\\n         default:\\r\\n             processValue(value);\\r\\n     }\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -1,32 +1,8 @@\\n-public boolean addValue(String value) {\\r\\n+void addValue(String value) {\\r\\n     switch(numberOfArgs) {\\r\\n         case UNINITIALIZED:\\r\\n-            return false;\\r\\n-        case UNLIMITED_VALUES:\\r\\n-            if (getValueSeparator() > 0) {\\r\\n-                int index = 0;\\r\\n-                while ((index = value.indexOf(getValueSeparator())) != -1) {\\r\\n-                    this.values.add(value.substring(0, index));\\r\\n-                    value = value.substring(index + 1);\\r\\n-                }\\r\\n-            }\\r\\n-            this.values.add(value);\\r\\n-            return true;\\r\\n+            break;\\r\\n         default:\\r\\n-            if (getValueSeparator() > 0) {\\r\\n-                int index = 0;\\r\\n-                while ((index = value.indexOf(getValueSeparator())) != -1) {\\r\\n-                    if (values.size() > numberOfArgs - 1) {\\r\\n-                        return false;\\r\\n-                    }\\r\\n-                    this.values.add(value.substring(0, index));\\r\\n-                    value = value.substring(index + 1);\\r\\n-                }\\r\\n-            }\\r\\n-            if (values.size() > numberOfArgs - 1) {\\r\\n-                return false;\\r\\n-            }\\r\\n-            this.values.add(value);\\r\\n-            return true;\\r\\n+            processValue(value);\\r\\n     }\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -1,15 +1,32 @@\\n public boolean addValue(String value) {\\r\\n     switch(numberOfArgs) {\\r\\n         case UNINITIALIZED:\\r\\n             return false;\\r\\n         case UNLIMITED_VALUES:\\r\\n+            if (getValueSeparator() > 0) {\\r\\n+                int index = 0;\\r\\n+                while ((index = value.indexOf(getValueSeparator())) != -1) {\\r\\n+                    this.values.add(value.substring(0, index));\\r\\n+                    value = value.substring(index + 1);\\r\\n+                }\\r\\n+            }\\r\\n             this.values.add(value);\\r\\n             return true;\\r\\n         default:\\r\\n+            if (getValueSeparator() > 0) {\\r\\n+                int index = 0;\\r\\n+                while ((index = value.indexOf(getValueSeparator())) != -1) {\\r\\n+                    if (values.size() > numberOfArgs - 1) {\\r\\n+                        return false;\\r\\n+                    }\\r\\n+                    this.values.add(value.substring(0, index));\\r\\n+                    value = value.substring(index + 1);\\r\\n+                }\\r\\n+            }\\r\\n             if (values.size() > numberOfArgs - 1) {\\r\\n                 return false;\\r\\n             }\\r\\n             this.values.add(value);\\r\\n             return true;\\r\\n     }\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -1,3 +1,15 @@\\n-public void addValue(String value) {\\r\\n-    this.values.add(value);\\r\\n+public boolean addValue(String value) {\\r\\n+    switch(numberOfArgs) {\\r\\n+        case UNINITIALIZED:\\r\\n+            return false;\\r\\n+        case UNLIMITED_VALUES:\\r\\n+            this.values.add(value);\\r\\n+            return true;\\r\\n+        default:\\r\\n+            if (values.size() > numberOfArgs - 1) {\\r\\n+                return false;\\r\\n+            }\\r\\n+            this.values.add(value);\\r\\n+            return true;\\r\\n+    }\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jstrachan@apache.org","authorName":"James Strachan","commitYear":"2002","diff":"\"@@ -0,0 +1,3 @@\\n+public void addValue(String value) {\\r\\n+    this.values.add(value);\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\main\java\org\apache\commons\cli\Option.java	clearValues	org.apache.commons.cli.Option.clearValues()	464	466	1	[{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2008","diff":"\"@@ -1,3 +1,3 @@\\n void clearValues() {\\r\\n-    this.values.clear();\\r\\n+    values.clear();\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"bayard@apache.org","authorName":"Henri Yandell","commitYear":"2007","diff":"\"@@ -0,0 +1,3 @@\\n+void clearValues() {\\r\\n+    this.values.clear();\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\main\java\org\apache\commons\cli\Option.java	clone	org.apache.commons.cli.Option.clone()	478	486	4	[{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2023","diff":"\"@@ -1,10 +1,10 @@\\n @Override\\r\\n public Object clone() {\\r\\n     try {\\r\\n         final Option option = (Option) super.clone();\\r\\n         option.values = new ArrayList<>(values);\\r\\n         return option;\\r\\n-    } catch (final CloneNotSupportedException cnse) {\\r\\n-        throw new IllegalStateException(\\\"A CloneNotSupportedException was thrown: \\\" + cnse.getMessage());\\r\\n+    } catch (final CloneNotSupportedException e) {\\r\\n+        throw new UnsupportedOperationException(e.getMessage(), e);\\r\\n     }\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2022","diff":"\"@@ -1,10 +1,10 @@\\n @Override\\r\\n public Object clone() {\\r\\n     try {\\r\\n         final Option option = (Option) super.clone();\\r\\n         option.values = new ArrayList<>(values);\\r\\n         return option;\\r\\n     } catch (final CloneNotSupportedException cnse) {\\r\\n-        throw new RuntimeException(\\\"A CloneNotSupportedException was thrown: \\\" + cnse.getMessage());\\r\\n+        throw new IllegalStateException(\\\"A CloneNotSupportedException was thrown: \\\" + cnse.getMessage());\\r\\n     }\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"\""},{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2020","diff":"\"@@ -1,10 +1,10 @@\\n @Override\\r\\n public Object clone() {\\r\\n     try {\\r\\n         final Option option = (Option) super.clone();\\r\\n-        option.values = new ArrayList<String>(values);\\r\\n+        option.values = new ArrayList<>(values);\\r\\n         return option;\\r\\n     } catch (final CloneNotSupportedException cnse) {\\r\\n         throw new RuntimeException(\\\"A CloneNotSupportedException was thrown: \\\" + cnse.getMessage());\\r\\n     }\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2019","diff":"\"\""},{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,10 +1,10 @@\\n @Override\\r\\n public Object clone() {\\r\\n     try {\\r\\n-        Option option = (Option) super.clone();\\r\\n+        final Option option = (Option) super.clone();\\r\\n         option.values = new ArrayList<String>(values);\\r\\n         return option;\\r\\n-    } catch (CloneNotSupportedException cnse) {\\r\\n+    } catch (final CloneNotSupportedException cnse) {\\r\\n         throw new RuntimeException(\\\"A CloneNotSupportedException was thrown: \\\" + cnse.getMessage());\\r\\n     }\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"britter@apache.org","authorName":"Benedikt Ritter","commitYear":"2015","diff":"\"\""},{"authorEmail":"sebb@apache.org","authorName":"Sebastian Bazley","commitYear":"2013","diff":"\"@@ -1,9 +1,10 @@\\n+@Override\\r\\n public Object clone() {\\r\\n     try {\\r\\n         Option option = (Option) super.clone();\\r\\n         option.values = new ArrayList<String>(values);\\r\\n         return option;\\r\\n     } catch (CloneNotSupportedException cnse) {\\r\\n         throw new RuntimeException(\\\"A CloneNotSupportedException was thrown: \\\" + cnse.getMessage());\\r\\n     }\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"tn@apache.org","authorName":"Thomas Neidhart","commitYear":"2013","diff":"\"@@ -1,9 +1,9 @@\\n-public Option clone() {\\r\\n+public Object clone() {\\r\\n     try {\\r\\n         Option option = (Option) super.clone();\\r\\n         option.values = new ArrayList<String>(values);\\r\\n         return option;\\r\\n     } catch (CloneNotSupportedException cnse) {\\r\\n         throw new RuntimeException(\\\"A CloneNotSupportedException was thrown: \\\" + cnse.getMessage());\\r\\n     }\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2011","diff":"\"@@ -1,9 +1,9 @@\\n-public Object clone() {\\r\\n+public Option clone() {\\r\\n     try {\\r\\n         Option option = (Option) super.clone();\\r\\n-        option.values = new ArrayList(values);\\r\\n+        option.values = new ArrayList<String>(values);\\r\\n         return option;\\r\\n     } catch (CloneNotSupportedException cnse) {\\r\\n         throw new RuntimeException(\\\"A CloneNotSupportedException was thrown: \\\" + cnse.getMessage());\\r\\n     }\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2008","diff":"\"\""},{"authorEmail":"bayard@apache.org","authorName":"Henri Yandell","commitYear":"2007","diff":"\"\""},{"authorEmail":"bayard@apache.org","authorName":"Henri Yandell","commitYear":"2007","diff":"\"@@ -1,5 +1,9 @@\\n-protected Object clone() throws CloneNotSupportedException {\\r\\n-    Option option = (Option) super.clone();\\r\\n-    option.values = new ArrayList(values);\\r\\n-    return option;\\r\\n+public Object clone() {\\r\\n+    try {\\r\\n+        Option option = (Option) super.clone();\\r\\n+        option.values = new ArrayList(values);\\r\\n+        return option;\\r\\n+    } catch (CloneNotSupportedException cnse) {\\r\\n+        throw new RuntimeException(\\\"A CloneNotSupportedException was thrown: \\\" + cnse.getMessage());\\r\\n+    }\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"bayard@apache.org","authorName":"Henri Yandell","commitYear":"2007","diff":"\"@@ -0,0 +1,5 @@\\n+protected Object clone() throws CloneNotSupportedException {\\r\\n+    Option option = (Option) super.clone();\\r\\n+    option.values = new ArrayList(values);\\r\\n+    return option;\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\main\java\org\apache\commons\cli\Option.java	equals	org.apache.commons.cli.Option.equals(Object)	489	498	6	[{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"@@ -1,11 +1,11 @@\\n @Override\\r\\n-public boolean equals(Object obj) {\\r\\n+public boolean equals(final Object obj) {\\r\\n     if (this == obj) {\\r\\n         return true;\\r\\n     }\\r\\n     if (!(obj instanceof Option)) {\\r\\n         return false;\\r\\n     }\\r\\n-    Option other = (Option) obj;\\r\\n+    final Option other = (Option) obj;\\r\\n     return Objects.equals(longOption, other.longOption) && Objects.equals(option, other.option);\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"@@ -1,14 +1,11 @@\\n @Override\\r\\n-public boolean equals(final Object o) {\\r\\n-    if (this == o) {\\r\\n+public boolean equals(Object obj) {\\r\\n+    if (this == obj) {\\r\\n         return true;\\r\\n     }\\r\\n-    if (o == null || getClass() != o.getClass()) {\\r\\n+    if (!(obj instanceof Option)) {\\r\\n         return false;\\r\\n     }\\r\\n-    final Option option = (Option) o;\\r\\n-    if ((this.option != null ? !this.option.equals(option.option) : option.option != null) || (longOption != null ? !longOption.equals(option.longOption) : option.longOption != null)) {\\r\\n-        return false;\\r\\n-    }\\r\\n-    return true;\\r\\n+    Option other = (Option) obj;\\r\\n+    return Objects.equals(longOption, other.longOption) && Objects.equals(option, other.option);\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"@@ -1,14 +1,14 @@\\n @Override\\r\\n public boolean equals(final Object o) {\\r\\n     if (this == o) {\\r\\n         return true;\\r\\n     }\\r\\n     if (o == null || getClass() != o.getClass()) {\\r\\n         return false;\\r\\n     }\\r\\n     final Option option = (Option) o;\\r\\n-    if ((opt != null ? !opt.equals(option.opt) : option.opt != null) || (longOpt != null ? !longOpt.equals(option.longOpt) : option.longOpt != null)) {\\r\\n+    if ((this.option != null ? !this.option.equals(option.option) : option.option != null) || (longOption != null ? !longOption.equals(option.longOption) : option.longOption != null)) {\\r\\n         return false;\\r\\n     }\\r\\n     return true;\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"@@ -1,17 +1,14 @@\\n @Override\\r\\n public boolean equals(final Object o) {\\r\\n     if (this == o) {\\r\\n         return true;\\r\\n     }\\r\\n     if (o == null || getClass() != o.getClass()) {\\r\\n         return false;\\r\\n     }\\r\\n     final Option option = (Option) o;\\r\\n-    if (opt != null ? !opt.equals(option.opt) : option.opt != null) {\\r\\n-        return false;\\r\\n-    }\\r\\n-    if (longOpt != null ? !longOpt.equals(option.longOpt) : option.longOpt != null) {\\r\\n+    if ((opt != null ? !opt.equals(option.opt) : option.opt != null) || (longOpt != null ? !longOpt.equals(option.longOpt) : option.longOpt != null)) {\\r\\n         return false;\\r\\n     }\\r\\n     return true;\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"\""},{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,17 +1,17 @@\\n @Override\\r\\n-public boolean equals(Object o) {\\r\\n+public boolean equals(final Object o) {\\r\\n     if (this == o) {\\r\\n         return true;\\r\\n     }\\r\\n     if (o == null || getClass() != o.getClass()) {\\r\\n         return false;\\r\\n     }\\r\\n     final Option option = (Option) o;\\r\\n     if (opt != null ? !opt.equals(option.opt) : option.opt != null) {\\r\\n         return false;\\r\\n     }\\r\\n     if (longOpt != null ? !longOpt.equals(option.longOpt) : option.longOpt != null) {\\r\\n         return false;\\r\\n     }\\r\\n     return true;\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"britter@apache.org","authorName":"Benedikt Ritter","commitYear":"2017","diff":"\"@@ -1,17 +1,17 @@\\n @Override\\r\\n public boolean equals(Object o) {\\r\\n     if (this == o) {\\r\\n         return true;\\r\\n     }\\r\\n     if (o == null || getClass() != o.getClass()) {\\r\\n         return false;\\r\\n     }\\r\\n-    Option option = (Option) o;\\r\\n+    final Option option = (Option) o;\\r\\n     if (opt != null ? !opt.equals(option.opt) : option.opt != null) {\\r\\n         return false;\\r\\n     }\\r\\n     if (longOpt != null ? !longOpt.equals(option.longOpt) : option.longOpt != null) {\\r\\n         return false;\\r\\n     }\\r\\n     return true;\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"sebb@apache.org","authorName":"Sebastian Bazley","commitYear":"2013","diff":"\"@@ -1,16 +1,17 @@\\n+@Override\\r\\n public boolean equals(Object o) {\\r\\n     if (this == o) {\\r\\n         return true;\\r\\n     }\\r\\n     if (o == null || getClass() != o.getClass()) {\\r\\n         return false;\\r\\n     }\\r\\n     Option option = (Option) o;\\r\\n     if (opt != null ? !opt.equals(option.opt) : option.opt != null) {\\r\\n         return false;\\r\\n     }\\r\\n     if (longOpt != null ? !longOpt.equals(option.longOpt) : option.longOpt != null) {\\r\\n         return false;\\r\\n     }\\r\\n     return true;\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2008","diff":"\"\""},{"authorEmail":"bayard@apache.org","authorName":"Henri Yandell","commitYear":"2007","diff":"\"@@ -0,0 +1,16 @@\\n+public boolean equals(Object o) {\\r\\n+    if (this == o) {\\r\\n+        return true;\\r\\n+    }\\r\\n+    if (o == null || getClass() != o.getClass()) {\\r\\n+        return false;\\r\\n+    }\\r\\n+    Option option = (Option) o;\\r\\n+    if (opt != null ? !opt.equals(option.opt) : option.opt != null) {\\r\\n+        return false;\\r\\n+    }\\r\\n+    if (longOpt != null ? !longOpt.equals(option.longOpt) : option.longOpt != null) {\\r\\n+        return false;\\r\\n+    }\\r\\n+    return true;\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\main\java\org\apache\commons\cli\Option.java	getArgName	org.apache.commons.cli.Option.getArgName()	505	507	1	[{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2008","diff":"\"@@ -1,3 +1,3 @@\\n public String getArgName() {\\r\\n-    return this.argName;\\r\\n+    return argName;\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"roxspring@apache.org","authorName":"Robert James Oxspring","commitYear":"2004","diff":"\"\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -0,0 +1,3 @@\\n+public String getArgName() {\\r\\n+    return this.argName;\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\main\java\org\apache\commons\cli\Option.java	getArgs	org.apache.commons.cli.Option.getArgs()	522	524	1	[{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"@@ -1,3 +1,3 @@\\n public int getArgs() {\\r\\n-    return numberOfArgs;\\r\\n+    return argCount;\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"\""},{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"\""},{"authorEmail":"britter@apache.org","authorName":"Benedikt Ritter","commitYear":"2016","diff":"\"\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2008","diff":"\"@@ -1,3 +1,3 @@\\n public int getArgs() {\\r\\n-    return this.numberOfArgs;\\r\\n+    return numberOfArgs;\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"roxspring@apache.org","authorName":"Robert James Oxspring","commitYear":"2004","diff":"\"\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -0,0 +1,3 @@\\n+public int getArgs() {\\r\\n+    return this.numberOfArgs;\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\main\java\org\apache\commons\cli\Option.java	getDescription	org.apache.commons.cli.Option.getDescription()	531	533	1	[{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2008","diff":"\"@@ -1,3 +1,3 @@\\n public String getDescription() {\\r\\n-    return this.description;\\r\\n+    return description;\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"roxspring@apache.org","authorName":"Robert James Oxspring","commitYear":"2004","diff":"\"\""},{"authorEmail":"jstrachan@apache.org","authorName":"James Strachan","commitYear":"2002","diff":"\"@@ -0,0 +1,3 @@\\n+public String getDescription() {\\r\\n+    return this.description;\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\main\java\org\apache\commons\cli\Option.java	getId	org.apache.commons.cli.Option.getId()	541	543	1	[{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"\""},{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"\""},{"authorEmail":"roxspring@apache.org","authorName":"Robert James Oxspring","commitYear":"2004","diff":"\"\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -1,3 +1,3 @@\\n public int getId() {\\r\\n-    return id;\\r\\n+    return getKey().charAt(0);\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -0,0 +1,3 @@\\n+public int getId() {\\r\\n+    return id;\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\main\java\org\apache\commons\cli\Option.java	getKey	org.apache.commons.cli.Option.getKey()	550	553	2	[{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"@@ -1,3 +1,3 @@\\n String getKey() {\\r\\n-    return opt == null ? longOpt : opt;\\r\\n+    return option == null ? longOption : option;\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"@@ -1,3 +1,3 @@\\n String getKey() {\\r\\n-    return (opt == null) ? longOpt : opt;\\r\\n+    return opt == null ? longOpt : opt;\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"\""},{"authorEmail":"tn@apache.org","authorName":"Thomas Neidhart","commitYear":"2013","diff":"\"@@ -1,6 +1,3 @@\\n String getKey() {\\r\\n-    if (opt == null) {\\r\\n-        return longOpt;\\r\\n-    }\\r\\n-    return opt;\\r\\n+    return (opt == null) ? longOpt : opt;\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2008","diff":"\"@@ -1,6 +1,6 @@\\n String getKey() {\\r\\n     if (opt == null) {\\r\\n-        return this.longOpt;\\r\\n+        return longOpt;\\r\\n     }\\r\\n-    return this.opt;\\r\\n+    return opt;\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"roxspring@apache.org","authorName":"Robert James Oxspring","commitYear":"2004","diff":"\"\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -0,0 +1,6 @@\\n+String getKey() {\\r\\n+    if (opt == null) {\\r\\n+        return this.longOpt;\\r\\n+    }\\r\\n+    return this.opt;\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\main\java\org\apache\commons\cli\Option.java	getLongOpt	org.apache.commons.cli.Option.getLongOpt()	560	562	1	[{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"@@ -1,3 +1,3 @@\\n public String getLongOpt() {\\r\\n-    return longOpt;\\r\\n+    return longOption;\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2008","diff":"\"@@ -1,3 +1,3 @@\\n public String getLongOpt() {\\r\\n-    return this.longOpt;\\r\\n+    return longOpt;\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"roxspring@apache.org","authorName":"Robert James Oxspring","commitYear":"2004","diff":"\"\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"\""},{"authorEmail":"jstrachan@apache.org","authorName":"James Strachan","commitYear":"2002","diff":"\"@@ -0,0 +1,3 @@\\n+public String getLongOpt() {\\r\\n+    return this.longOpt;\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\main\java\org\apache\commons\cli\Option.java	getOpt	org.apache.commons.cli.Option.getOpt()	572	574	1	[{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"@@ -1,3 +1,3 @@\\n public String getOpt() {\\r\\n-    return opt;\\r\\n+    return option;\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"\""},{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2008","diff":"\"@@ -1,3 +1,3 @@\\n public String getOpt() {\\r\\n-    return this.opt;\\r\\n+    return opt;\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"roxspring@apache.org","authorName":"Robert James Oxspring","commitYear":"2004","diff":"\"\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -1,3 +1,3 @@\\n-public char getOpt() {\\r\\n-    return this.opt.charValue();\\r\\n+public String getOpt() {\\r\\n+    return this.opt;\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jstrachan@apache.org","authorName":"James Strachan","commitYear":"2002","diff":"\"@@ -0,0 +1,3 @@\\n+public char getOpt() {\\r\\n+    return this.opt.charValue();\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\main\java\org\apache\commons\cli\Option.java	getType	org.apache.commons.cli.Option.getType()	581	583	1	[{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2008","diff":"\"@@ -1,3 +1,3 @@\\n public Object getType() {\\r\\n-    return this.type;\\r\\n+    return type;\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"roxspring@apache.org","authorName":"Robert James Oxspring","commitYear":"2004","diff":"\"\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"\""},{"authorEmail":"jstrachan@apache.org","authorName":"James Strachan","commitYear":"2002","diff":"\"@@ -0,0 +1,3 @@\\n+public Object getType() {\\r\\n+    return this.type;\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\main\java\org\apache\commons\cli\Option.java	getValue	org.apache.commons.cli.Option.getValue()	590	592	2	[{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"\""},{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"\""},{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"\""},{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2019","diff":"\"\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2011","diff":"\"@@ -1,3 +1,3 @@\\n public String getValue() {\\r\\n-    return hasNoValues() ? null : (String) values.get(0);\\r\\n+    return hasNoValues() ? null : values.get(0);\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2008","diff":"\"@@ -1,3 +1,3 @@\\n public String getValue() {\\r\\n-    return hasNoValues() ? null : (String) this.values.get(0);\\r\\n+    return hasNoValues() ? null : (String) values.get(0);\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -1,3 +1,3 @@\\n public String getValue() {\\r\\n-    return this.values.size() == 0 ? null : (String) this.values.get(0);\\r\\n+    return hasNoValues() ? null : (String) this.values.get(0);\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"\""},{"authorEmail":"jstrachan@apache.org","authorName":"James Strachan","commitYear":"2002","diff":"\"@@ -0,0 +1,3 @@\\n+public String getValue() {\\r\\n+    return this.values.size() == 0 ? null : (String) this.values.get(0);\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\main\java\org\apache\commons\cli\Option.java	getValue	org.apache.commons.cli.Option.getValue(int)	603	605	2	[{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"\""},{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"\""},{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"\""},{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2019","diff":"\"\""},{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,3 +1,3 @@\\n-public String getValue(int index) throws IndexOutOfBoundsException {\\r\\n+public String getValue(final int index) throws IndexOutOfBoundsException {\\r\\n     return hasNoValues() ? null : values.get(index);\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2011","diff":"\"@@ -1,3 +1,3 @@\\n public String getValue(int index) throws IndexOutOfBoundsException {\\r\\n-    return hasNoValues() ? null : (String) values.get(index);\\r\\n+    return hasNoValues() ? null : values.get(index);\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2008","diff":"\"@@ -1,3 +1,3 @@\\n public String getValue(int index) throws IndexOutOfBoundsException {\\r\\n-    return hasNoValues() ? null : (String) this.values.get(index);\\r\\n+    return hasNoValues() ? null : (String) values.get(index);\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -1,3 +1,3 @@\\n public String getValue(int index) throws IndexOutOfBoundsException {\\r\\n-    return (this.values.size() == 0) ? null : (String) this.values.get(index);\\r\\n+    return hasNoValues() ? null : (String) this.values.get(index);\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -0,0 +1,3 @@\\n+public String getValue(int index) throws IndexOutOfBoundsException {\\r\\n+    return (this.values.size() == 0) ? null : (String) this.values.get(index);\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\main\java\org\apache\commons\cli\Option.java	getValue	org.apache.commons.cli.Option.getValue(String)	614	618	2	[{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"@@ -1,4 +1,4 @@\\n public String getValue(final String defaultValue) {\\r\\n     final String value = getValue();\\r\\n-    return (value != null) ? value : defaultValue;\\r\\n+    return value != null ? value : defaultValue;\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"\""},{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"\""},{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"\""},{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2019","diff":"\"\""},{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,4 +1,4 @@\\n-public String getValue(String defaultValue) {\\r\\n+public String getValue(final String defaultValue) {\\r\\n     final String value = getValue();\\r\\n     return (value != null) ? value : defaultValue;\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,4 +1,4 @@\\n public String getValue(String defaultValue) {\\r\\n-    String value = getValue();\\r\\n+    final String value = getValue();\\r\\n     return (value != null) ? value : defaultValue;\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"britter@apache.org","authorName":"Benedikt Ritter","commitYear":"2015","diff":"\"\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -0,0 +1,4 @@\\n+public String getValue(String defaultValue) {\\r\\n+    String value = getValue();\\r\\n+    return (value != null) ? value : defaultValue;\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\main\java\org\apache\commons\cli\Option.java	getValues	org.apache.commons.cli.Option.getValues()	625	627	2	[{"authorEmail":"arturobernalg@gmail.com","authorName":"Arturo Bernal","commitYear":"2022","diff":"\"@@ -1,3 +1,3 @@\\n public String[] getValues() {\\r\\n-    return hasNoValues() ? null : values.toArray(new String[values.size()]);\\r\\n+    return hasNoValues() ? null : values.toArray(EMPTY_STRING_ARRAY);\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"\""},{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"\""},{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2019","diff":"\"\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2011","diff":"\"@@ -1,3 +1,3 @@\\n public String[] getValues() {\\r\\n-    return hasNoValues() ? null : (String[]) values.toArray(new String[values.size()]);\\r\\n+    return hasNoValues() ? null : values.toArray(new String[values.size()]);\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2008","diff":"\"@@ -1,3 +1,3 @@\\n public String[] getValues() {\\r\\n-    return hasNoValues() ? null : (String[]) this.values.toArray(new String[this.values.size()]);\\r\\n+    return hasNoValues() ? null : (String[]) values.toArray(new String[values.size()]);\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"bayard@apache.org","authorName":"Henri Yandell","commitYear":"2007","diff":"\"@@ -1,3 +1,3 @@\\n public String[] getValues() {\\r\\n-    return hasNoValues() ? null : (String[]) this.values.toArray(new String[] {});\\r\\n+    return hasNoValues() ? null : (String[]) this.values.toArray(new String[this.values.size()]);\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -1,3 +1,3 @@\\n public String[] getValues() {\\r\\n-    return this.values.size() == 0 ? null : (String[]) this.values.toArray(new String[] {});\\r\\n+    return hasNoValues() ? null : (String[]) this.values.toArray(new String[] {});\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"\""},{"authorEmail":"jstrachan@apache.org","authorName":"James Strachan","commitYear":"2002","diff":"\"@@ -0,0 +1,3 @@\\n+public String[] getValues() {\\r\\n+    return this.values.size() == 0 ? null : (String[]) this.values.toArray(new String[] {});\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\main\java\org\apache\commons\cli\Option.java	getValueSeparator	org.apache.commons.cli.Option.getValueSeparator()	634	636	1	[{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2008","diff":"\"@@ -1,3 +1,3 @@\\n public char getValueSeparator() {\\r\\n-    return this.valuesep;\\r\\n+    return valuesep;\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"roxspring@apache.org","authorName":"Robert James Oxspring","commitYear":"2004","diff":"\"\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -0,0 +1,3 @@\\n+public char getValueSeparator() {\\r\\n+    return this.valuesep;\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\main\java\org\apache\commons\cli\Option.java	getValuesList	org.apache.commons.cli.Option.getValuesList()	643	645	1	[{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"\""},{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2011","diff":"\"@@ -1,3 +1,3 @@\\n-public List getValuesList() {\\r\\n+public List<String> getValuesList() {\\r\\n     return values;\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2008","diff":"\"@@ -1,3 +1,3 @@\\n-public java.util.List getValuesList() {\\r\\n-    return this.values;\\r\\n+public List getValuesList() {\\r\\n+    return values;\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -0,0 +1,3 @@\\n+public java.util.List getValuesList() {\\r\\n+    return this.values;\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\main\java\org\apache\commons\cli\Option.java	hasArg	org.apache.commons.cli.Option.hasArg()	652	654	2	[{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"@@ -1,3 +1,3 @@\\n public boolean hasArg() {\\r\\n-    return numberOfArgs > 0 || numberOfArgs == UNLIMITED_VALUES;\\r\\n+    return argCount > 0 || argCount == UNLIMITED_VALUES;\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2008","diff":"\"@@ -1,3 +1,3 @@\\n public boolean hasArg() {\\r\\n-    return (this.numberOfArgs > 0) || (numberOfArgs == UNLIMITED_VALUES);\\r\\n+    return numberOfArgs > 0 || numberOfArgs == UNLIMITED_VALUES;\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"roxspring@apache.org","authorName":"Robert James Oxspring","commitYear":"2004","diff":"\"\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -1,3 +1,3 @@\\n public boolean hasArg() {\\r\\n-    return this.numberOfArgs > 0 || numberOfArgs == UNLIMITED_VALUES;\\r\\n+    return (this.numberOfArgs > 0) || (numberOfArgs == UNLIMITED_VALUES);\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -1,3 +1,3 @@\\n public boolean hasArg() {\\r\\n-    return this.hasArg;\\r\\n+    return this.numberOfArgs > 0 || numberOfArgs == UNLIMITED_VALUES;\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jstrachan@apache.org","authorName":"James Strachan","commitYear":"2002","diff":"\"@@ -0,0 +1,3 @@\\n+public boolean hasArg() {\\r\\n+    return this.hasArg;\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\main\java\org\apache\commons\cli\Option.java	hasArgName	org.apache.commons.cli.Option.hasArgName()	661	663	2	[{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"@@ -1,3 +1,3 @@\\n public boolean hasArgName() {\\r\\n-    return argName != null && argName.length() > 0;\\r\\n+    return argName != null && !argName.isEmpty();\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2010","diff":"\"\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2008","diff":"\"@@ -1,3 +1,3 @@\\n public boolean hasArgName() {\\r\\n-    return (this.argName != null && this.argName.length() > 0);\\r\\n+    return argName != null && argName.length() > 0;\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"roxspring@apache.org","authorName":"Robert James Oxspring","commitYear":"2004","diff":"\"\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -1,3 +1,3 @@\\n public boolean hasArgName() {\\r\\n-    return (this.argName != null || this.argName.length() > 0);\\r\\n+    return (this.argName != null && this.argName.length() > 0);\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -0,0 +1,3 @@\\n+public boolean hasArgName() {\\r\\n+    return (this.argName != null || this.argName.length() > 0);\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\main\java\org\apache\commons\cli\Option.java	hasArgs	org.apache.commons.cli.Option.hasArgs()	670	672	2	[{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"@@ -1,3 +1,3 @@\\n public boolean hasArgs() {\\r\\n-    return numberOfArgs > 1 || numberOfArgs == UNLIMITED_VALUES;\\r\\n+    return argCount > 1 || argCount == UNLIMITED_VALUES;\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2008","diff":"\"@@ -1,3 +1,3 @@\\n public boolean hasArgs() {\\r\\n-    return (this.numberOfArgs > 1) || (this.numberOfArgs == UNLIMITED_VALUES);\\r\\n+    return numberOfArgs > 1 || numberOfArgs == UNLIMITED_VALUES;\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2008","diff":"\"\""},{"authorEmail":"roxspring@apache.org","authorName":"Robert James Oxspring","commitYear":"2004","diff":"\"\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -1,3 +1,3 @@\\n public boolean hasArgs() {\\r\\n-    return this.numberOfArgs > 1 || this.numberOfArgs == UNLIMITED_VALUES;\\r\\n+    return (this.numberOfArgs > 1) || (this.numberOfArgs == UNLIMITED_VALUES);\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -1,3 +1,3 @@\\n public boolean hasArgs() {\\r\\n-    return (this.numberOfArgs > 1 || this.numberOfArgs == UNLIMITED_VALUES);\\r\\n+    return this.numberOfArgs > 1 || this.numberOfArgs == UNLIMITED_VALUES;\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -0,0 +1,3 @@\\n+public boolean hasArgs() {\\r\\n+    return (this.numberOfArgs > 1 || this.numberOfArgs == UNLIMITED_VALUES);\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\main\java\org\apache\commons\cli\Option.java	hashCode	org.apache.commons.cli.Option.hashCode()	675	677	1	[{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"@@ -1,7 +1,4 @@\\n @Override\\r\\n public int hashCode() {\\r\\n-    int result;\\r\\n-    result = option != null ? option.hashCode() : 0;\\r\\n-    result = 31 * result + (longOption != null ? longOption.hashCode() : 0);\\r\\n-    return result;\\r\\n+    return Objects.hash(longOption, option);\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"@@ -1,7 +1,7 @@\\n @Override\\r\\n public int hashCode() {\\r\\n     int result;\\r\\n-    result = opt != null ? opt.hashCode() : 0;\\r\\n-    result = 31 * result + (longOpt != null ? longOpt.hashCode() : 0);\\r\\n+    result = option != null ? option.hashCode() : 0;\\r\\n+    result = 31 * result + (longOption != null ? longOption.hashCode() : 0);\\r\\n     return result;\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"sebb@apache.org","authorName":"Sebastian Bazley","commitYear":"2013","diff":"\"@@ -1,6 +1,7 @@\\n+@Override\\r\\n public int hashCode() {\\r\\n     int result;\\r\\n     result = opt != null ? opt.hashCode() : 0;\\r\\n     result = 31 * result + (longOpt != null ? longOpt.hashCode() : 0);\\r\\n     return result;\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2010","diff":"\"@@ -1,6 +1,6 @@\\n public int hashCode() {\\r\\n     int result;\\r\\n-    result = (opt != null ? opt.hashCode() : 0);\\r\\n+    result = opt != null ? opt.hashCode() : 0;\\r\\n     result = 31 * result + (longOpt != null ? longOpt.hashCode() : 0);\\r\\n     return result;\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2008","diff":"\"\""},{"authorEmail":"bayard@apache.org","authorName":"Henri Yandell","commitYear":"2007","diff":"\"@@ -0,0 +1,6 @@\\n+public int hashCode() {\\r\\n+    int result;\\r\\n+    result = (opt != null ? opt.hashCode() : 0);\\r\\n+    result = 31 * result + (longOpt != null ? longOpt.hashCode() : 0);\\r\\n+    return result;\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\main\java\org\apache\commons\cli\Option.java	hasLongOpt	org.apache.commons.cli.Option.hasLongOpt()	684	686	1	[{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"@@ -1,3 +1,3 @@\\n public boolean hasLongOpt() {\\r\\n-    return longOpt != null;\\r\\n+    return longOption != null;\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2008","diff":"\"@@ -1,3 +1,3 @@\\n public boolean hasLongOpt() {\\r\\n-    return (this.longOpt != null);\\r\\n+    return longOpt != null;\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"roxspring@apache.org","authorName":"Robert James Oxspring","commitYear":"2004","diff":"\"\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"\""},{"authorEmail":"jstrachan@apache.org","authorName":"James Strachan","commitYear":"2002","diff":"\"@@ -0,0 +1,3 @@\\n+public boolean hasLongOpt() {\\r\\n+    return (this.longOpt != null);\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\main\java\org\apache\commons\cli\Option.java	hasNoValues	org.apache.commons.cli.Option.hasNoValues()	693	695	1	[{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2008","diff":"\"@@ -1,3 +1,3 @@\\n private boolean hasNoValues() {\\r\\n-    return this.values.size() == 0;\\r\\n+    return values.isEmpty();\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -0,0 +1,3 @@\\n+private boolean hasNoValues() {\\r\\n+    return this.values.size() == 0;\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\main\java\org\apache\commons\cli\Option.java	hasOptionalArg	org.apache.commons.cli.Option.hasOptionalArg()	700	702	1	[{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2008","diff":"\"@@ -1,3 +1,3 @@\\n public boolean hasOptionalArg() {\\r\\n-    return this.optionalArg;\\r\\n+    return optionalArg;\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -0,0 +1,3 @@\\n+public boolean hasOptionalArg() {\\r\\n+    return this.optionalArg;\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\main\java\org\apache\commons\cli\Option.java	hasValueSeparator	org.apache.commons.cli.Option.hasValueSeparator()	710	712	1	[{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2008","diff":"\"@@ -1,3 +1,3 @@\\n public boolean hasValueSeparator() {\\r\\n-    return (this.valuesep > 0);\\r\\n+    return valuesep > 0;\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2008","diff":"\"\""},{"authorEmail":"roxspring@apache.org","authorName":"Robert James Oxspring","commitYear":"2004","diff":"\"\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -0,0 +1,3 @@\\n+public boolean hasValueSeparator() {\\r\\n+    return (this.valuesep > 0);\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\main\java\org\apache\commons\cli\Option.java	isRequired	org.apache.commons.cli.Option.isRequired()	719	721	1	[{"authorEmail":"bayard@apache.org","authorName":"Henri Yandell","commitYear":"2010","diff":"\"\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2008","diff":"\"@@ -1,3 +1,3 @@\\n public boolean isRequired() {\\r\\n-    return this.required;\\r\\n+    return required;\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"roxspring@apache.org","authorName":"Robert James Oxspring","commitYear":"2004","diff":"\"\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"\""},{"authorEmail":"jstrachan@apache.org","authorName":"James Strachan","commitYear":"2002","diff":"\"@@ -0,0 +1,3 @@\\n+public boolean isRequired() {\\r\\n+    return this.required;\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\main\java\org\apache\commons\cli\Option.java	processValue	org.apache.commons.cli.Option.processValue(String)	732	761	5	[{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"@@ -1,15 +1,15 @@\\n private void processValue(String value) {\\r\\n     if (hasValueSeparator()) {\\r\\n         final char sep = getValueSeparator();\\r\\n         int index = value.indexOf(sep);\\r\\n         while (index != -1) {\\r\\n-            if (values.size() == numberOfArgs - 1) {\\r\\n+            if (values.size() == argCount - 1) {\\r\\n                 break;\\r\\n             }\\r\\n             add(value.substring(0, index));\\r\\n             value = value.substring(index + 1);\\r\\n             index = value.indexOf(sep);\\r\\n         }\\r\\n     }\\r\\n     add(value);\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"\""},{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2019","diff":"\"\""},{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,15 +1,15 @@\\n private void processValue(String value) {\\r\\n     if (hasValueSeparator()) {\\r\\n-        char sep = getValueSeparator();\\r\\n+        final char sep = getValueSeparator();\\r\\n         int index = value.indexOf(sep);\\r\\n         while (index != -1) {\\r\\n             if (values.size() == numberOfArgs - 1) {\\r\\n                 break;\\r\\n             }\\r\\n             add(value.substring(0, index));\\r\\n             value = value.substring(index + 1);\\r\\n             index = value.indexOf(sep);\\r\\n         }\\r\\n     }\\r\\n     add(value);\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"britter@apache.org","authorName":"Benedikt Ritter","commitYear":"2015","diff":"\"@@ -1,15 +1,15 @@\\n private void processValue(String value) {\\r\\n     if (hasValueSeparator()) {\\r\\n         char sep = getValueSeparator();\\r\\n         int index = value.indexOf(sep);\\r\\n         while (index != -1) {\\r\\n-            if (values.size() == (numberOfArgs - 1)) {\\r\\n+            if (values.size() == numberOfArgs - 1) {\\r\\n                 break;\\r\\n             }\\r\\n             add(value.substring(0, index));\\r\\n             value = value.substring(index + 1);\\r\\n             index = value.indexOf(sep);\\r\\n         }\\r\\n     }\\r\\n     add(value);\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2008","diff":"\"\""},{"authorEmail":"roxspring@apache.org","authorName":"Robert James Oxspring","commitYear":"2004","diff":"\"\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -1,15 +1,15 @@\\n private void processValue(String value) {\\r\\n     if (hasValueSeparator()) {\\r\\n         char sep = getValueSeparator();\\r\\n         int index = value.indexOf(sep);\\r\\n         while (index != -1) {\\r\\n-            if (values.size() == numberOfArgs - 1) {\\r\\n+            if (values.size() == (numberOfArgs - 1)) {\\r\\n                 break;\\r\\n             }\\r\\n             add(value.substring(0, index));\\r\\n             value = value.substring(index + 1);\\r\\n             index = value.indexOf(sep);\\r\\n         }\\r\\n     }\\r\\n     add(value);\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -0,0 +1,15 @@\\n+private void processValue(String value) {\\r\\n+    if (hasValueSeparator()) {\\r\\n+        char sep = getValueSeparator();\\r\\n+        int index = value.indexOf(sep);\\r\\n+        while (index != -1) {\\r\\n+            if (values.size() == numberOfArgs - 1) {\\r\\n+                break;\\r\\n+            }\\r\\n+            add(value.substring(0, index));\\r\\n+            value = value.substring(index + 1);\\r\\n+            index = value.indexOf(sep);\\r\\n+        }\\r\\n+    }\\r\\n+    add(value);\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\main\java\org\apache\commons\cli\Option.java	requiresArg	org.apache.commons.cli.Option.requiresArg()	769	777	5	[{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"@@ -1,9 +1,9 @@\\n boolean requiresArg() {\\r\\n     if (optionalArg) {\\r\\n         return false;\\r\\n     }\\r\\n-    if (numberOfArgs == UNLIMITED_VALUES) {\\r\\n+    if (argCount == UNLIMITED_VALUES) {\\r\\n         return values.isEmpty();\\r\\n     }\\r\\n     return acceptsArg();\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"\""},{"authorEmail":"tn@apache.org","authorName":"Thomas Neidhart","commitYear":"2013","diff":"\"@@ -1,10 +1,9 @@\\n boolean requiresArg() {\\r\\n     if (optionalArg) {\\r\\n         return false;\\r\\n     }\\r\\n     if (numberOfArgs == UNLIMITED_VALUES) {\\r\\n-        return values.size() < 1;\\r\\n-    } else {\\r\\n-        return acceptsArg();\\r\\n+        return values.isEmpty();\\r\\n     }\\r\\n+    return acceptsArg();\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2009","diff":"\"@@ -0,0 +1,10 @@\\n+boolean requiresArg() {\\r\\n+    if (optionalArg) {\\r\\n+        return false;\\r\\n+    }\\r\\n+    if (numberOfArgs == UNLIMITED_VALUES) {\\r\\n+        return values.size() < 1;\\r\\n+    } else {\\r\\n+        return acceptsArg();\\r\\n+    }\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\main\java\org\apache\commons\cli\Option.java	setArgName	org.apache.commons.cli.Option.setArgName(String)	784	786	1	[{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,3 +1,3 @@\\n-public void setArgName(String argName) {\\r\\n+public void setArgName(final String argName) {\\r\\n     this.argName = argName;\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"roxspring@apache.org","authorName":"Robert James Oxspring","commitYear":"2004","diff":"\"\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -0,0 +1,3 @@\\n+public void setArgName(String argName) {\\r\\n+    this.argName = argName;\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\main\java\org\apache\commons\cli\Option.java	setArgs	org.apache.commons.cli.Option.setArgs(int)	793	795	1	[{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"@@ -1,3 +1,3 @@\\n public void setArgs(final int num) {\\r\\n-    this.numberOfArgs = num;\\r\\n+    this.argCount = num;\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,3 +1,3 @@\\n-public void setArgs(int num) {\\r\\n+public void setArgs(final int num) {\\r\\n     this.numberOfArgs = num;\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"roxspring@apache.org","authorName":"Robert James Oxspring","commitYear":"2004","diff":"\"\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -0,0 +1,3 @@\\n+public void setArgs(int num) {\\r\\n+    this.numberOfArgs = num;\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\main\java\org\apache\commons\cli\Option.java	setDescription	org.apache.commons.cli.Option.setDescription(String)	803	805	1	[{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,3 +1,3 @@\\n-public void setDescription(String description) {\\r\\n+public void setDescription(final String description) {\\r\\n     this.description = description;\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2008","diff":"\"\""},{"authorEmail":"bayard@apache.org","authorName":"Henri Yandell","commitYear":"2006","diff":"\"@@ -0,0 +1,3 @@\\n+public void setDescription(String description) {\\r\\n+    this.description = description;\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\main\java\org\apache\commons\cli\Option.java	setLongOpt	org.apache.commons.cli.Option.setLongOpt(String)	812	814	1	[{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"@@ -1,3 +1,3 @@\\n public void setLongOpt(final String longOpt) {\\r\\n-    this.longOpt = longOpt;\\r\\n+    this.longOption = longOpt;\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,3 +1,3 @@\\n-public void setLongOpt(String longOpt) {\\r\\n+public void setLongOpt(final String longOpt) {\\r\\n     this.longOpt = longOpt;\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"roxspring@apache.org","authorName":"Robert James Oxspring","commitYear":"2004","diff":"\"\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -0,0 +1,3 @@\\n+public void setLongOpt(String longOpt) {\\r\\n+    this.longOpt = longOpt;\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\main\java\org\apache\commons\cli\Option.java	setOptionalArg	org.apache.commons.cli.Option.setOptionalArg(boolean)	821	823	1	[{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"\""},{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,3 +1,3 @@\\n-public void setOptionalArg(boolean optionalArg) {\\r\\n+public void setOptionalArg(final boolean optionalArg) {\\r\\n     this.optionalArg = optionalArg;\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"roxspring@apache.org","authorName":"Robert James Oxspring","commitYear":"2004","diff":"\"\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -1,6 +1,3 @@\\n public void setOptionalArg(boolean optionalArg) {\\r\\n-    if (optionalArg) {\\r\\n-        this.numberOfArgs = 1;\\r\\n-    }\\r\\n     this.optionalArg = optionalArg;\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -0,0 +1,6 @@\\n+public void setOptionalArg(boolean optionalArg) {\\r\\n+    if (optionalArg) {\\r\\n+        this.numberOfArgs = 1;\\r\\n+    }\\r\\n+    this.optionalArg = optionalArg;\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\main\java\org\apache\commons\cli\Option.java	setRequired	org.apache.commons.cli.Option.setRequired(boolean)	830	832	1	[{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,3 +1,3 @@\\n-public void setRequired(boolean required) {\\r\\n+public void setRequired(final boolean required) {\\r\\n     this.required = required;\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"roxspring@apache.org","authorName":"Robert James Oxspring","commitYear":"2004","diff":"\"\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -0,0 +1,3 @@\\n+public void setRequired(boolean required) {\\r\\n+    this.required = required;\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\main\java\org\apache\commons\cli\Option.java	setType	org.apache.commons.cli.Option.setType(Class<?>)	840	842	1	[{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,3 +1,3 @@\\n-public void setType(Class<?> type) {\\r\\n+public void setType(final Class<?> type) {\\r\\n     this.type = type;\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"tn@apache.org","authorName":"Thomas Neidhart","commitYear":"2013","diff":"\"\""},{"authorEmail":"sebb@apache.org","authorName":"Sebastian Bazley","commitYear":"2013","diff":"\"@@ -1,3 +1,3 @@\\n-public void setType(Class type) {\\r\\n+public void setType(Class<?> type) {\\r\\n     this.type = type;\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2011","diff":"\"@@ -1,3 +1,3 @@\\n-public void setType(Object type) {\\r\\n+public void setType(Class type) {\\r\\n     this.type = type;\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"roxspring@apache.org","authorName":"Robert James Oxspring","commitYear":"2004","diff":"\"\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -0,0 +1,3 @@\\n+public void setType(Object type) {\\r\\n+    this.type = type;\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\main\java\org\apache\commons\cli\Option.java	setType	org.apache.commons.cli.Option.setType(Object)	855	857	1	[{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"\""},{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"\""},{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,4 +1,4 @@\\n @Deprecated\\r\\n-public void setType(Object type) {\\r\\n+public void setType(final Object type) {\\r\\n     setType((Class<?>) type);\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"sebb@apache.org","authorName":"Sebastian Bazley","commitYear":"2013","diff":"\"@@ -1,4 +1,4 @@\\n @Deprecated\\r\\n public void setType(Object type) {\\r\\n-    setType((Class) type);\\r\\n+    setType((Class<?>) type);\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"tn@apache.org","authorName":"Thomas Neidhart","commitYear":"2013","diff":"\"@@ -0,0 +1,4 @@\\n+@Deprecated\\r\\n+public void setType(Object type) {\\r\\n+    setType((Class) type);\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\main\java\org\apache\commons\cli\Option.java	setValueSeparator	org.apache.commons.cli.Option.setValueSeparator(char)	864	866	1	[{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"\""},{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,3 +1,3 @@\\n-public void setValueSeparator(char sep) {\\r\\n+public void setValueSeparator(final char sep) {\\r\\n     this.valuesep = sep;\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"roxspring@apache.org","authorName":"Robert James Oxspring","commitYear":"2004","diff":"\"\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -0,0 +1,3 @@\\n+public void setValueSeparator(char sep) {\\r\\n+    this.valuesep = sep;\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\main\java\org\apache\commons\cli\Option.java	toString	org.apache.commons.cli.Option.toString()	874	900	6	[{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"@@ -1,20 +1,20 @@\\n @Override\\r\\n public String toString() {\\r\\n     final StringBuilder buf = new StringBuilder().append(\\\"[ option: \\\");\\r\\n-    buf.append(opt);\\r\\n-    if (longOpt != null) {\\r\\n-        buf.append(\\\" \\\").append(longOpt);\\r\\n+    buf.append(option);\\r\\n+    if (longOption != null) {\\r\\n+        buf.append(\\\" \\\").append(longOption);\\r\\n     }\\r\\n     buf.append(\\\" \\\");\\r\\n     if (hasArgs()) {\\r\\n         buf.append(\\\"[ARG...]\\\");\\r\\n     } else if (hasArg()) {\\r\\n         buf.append(\\\" [ARG]\\\");\\r\\n     }\\r\\n     buf.append(\\\" :: \\\").append(description);\\r\\n     if (type != null) {\\r\\n         buf.append(\\\" :: \\\").append(type);\\r\\n     }\\r\\n     buf.append(\\\" ]\\\");\\r\\n     return buf.toString();\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"\""},{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,20 +1,20 @@\\n @Override\\r\\n public String toString() {\\r\\n-    StringBuilder buf = new StringBuilder().append(\\\"[ option: \\\");\\r\\n+    final StringBuilder buf = new StringBuilder().append(\\\"[ option: \\\");\\r\\n     buf.append(opt);\\r\\n     if (longOpt != null) {\\r\\n         buf.append(\\\" \\\").append(longOpt);\\r\\n     }\\r\\n     buf.append(\\\" \\\");\\r\\n     if (hasArgs()) {\\r\\n         buf.append(\\\"[ARG...]\\\");\\r\\n     } else if (hasArg()) {\\r\\n         buf.append(\\\" [ARG]\\\");\\r\\n     }\\r\\n     buf.append(\\\" :: \\\").append(description);\\r\\n     if (type != null) {\\r\\n         buf.append(\\\" :: \\\").append(type);\\r\\n     }\\r\\n     buf.append(\\\" ]\\\");\\r\\n     return buf.toString();\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"sebb@apache.org","authorName":"Sebastian Bazley","commitYear":"2013","diff":"\"@@ -1,19 +1,20 @@\\n+@Override\\r\\n public String toString() {\\r\\n     StringBuilder buf = new StringBuilder().append(\\\"[ option: \\\");\\r\\n     buf.append(opt);\\r\\n     if (longOpt != null) {\\r\\n         buf.append(\\\" \\\").append(longOpt);\\r\\n     }\\r\\n     buf.append(\\\" \\\");\\r\\n     if (hasArgs()) {\\r\\n         buf.append(\\\"[ARG...]\\\");\\r\\n     } else if (hasArg()) {\\r\\n         buf.append(\\\" [ARG]\\\");\\r\\n     }\\r\\n     buf.append(\\\" :: \\\").append(description);\\r\\n     if (type != null) {\\r\\n         buf.append(\\\" :: \\\").append(type);\\r\\n     }\\r\\n     buf.append(\\\" ]\\\");\\r\\n     return buf.toString();\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2011","diff":"\"@@ -1,19 +1,19 @@\\n public String toString() {\\r\\n-    StringBuffer buf = new StringBuffer().append(\\\"[ option: \\\");\\r\\n+    StringBuilder buf = new StringBuilder().append(\\\"[ option: \\\");\\r\\n     buf.append(opt);\\r\\n     if (longOpt != null) {\\r\\n         buf.append(\\\" \\\").append(longOpt);\\r\\n     }\\r\\n     buf.append(\\\" \\\");\\r\\n     if (hasArgs()) {\\r\\n         buf.append(\\\"[ARG...]\\\");\\r\\n     } else if (hasArg()) {\\r\\n         buf.append(\\\" [ARG]\\\");\\r\\n     }\\r\\n     buf.append(\\\" :: \\\").append(description);\\r\\n     if (type != null) {\\r\\n         buf.append(\\\" :: \\\").append(type);\\r\\n     }\\r\\n     buf.append(\\\" ]\\\");\\r\\n     return buf.toString();\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2008","diff":"\"@@ -1,19 +1,19 @@\\n public String toString() {\\r\\n     StringBuffer buf = new StringBuffer().append(\\\"[ option: \\\");\\r\\n-    buf.append(this.opt);\\r\\n-    if (this.longOpt != null) {\\r\\n-        buf.append(\\\" \\\").append(this.longOpt);\\r\\n+    buf.append(opt);\\r\\n+    if (longOpt != null) {\\r\\n+        buf.append(\\\" \\\").append(longOpt);\\r\\n     }\\r\\n     buf.append(\\\" \\\");\\r\\n     if (hasArgs()) {\\r\\n         buf.append(\\\"[ARG...]\\\");\\r\\n     } else if (hasArg()) {\\r\\n         buf.append(\\\" [ARG]\\\");\\r\\n     }\\r\\n-    buf.append(\\\" :: \\\").append(this.description);\\r\\n-    if (this.type != null) {\\r\\n-        buf.append(\\\" :: \\\").append(this.type);\\r\\n+    buf.append(\\\" :: \\\").append(description);\\r\\n+    if (type != null) {\\r\\n+        buf.append(\\\" :: \\\").append(type);\\r\\n     }\\r\\n     buf.append(\\\" ]\\\");\\r\\n     return buf.toString();\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"bayard@apache.org","authorName":"Henri Yandell","commitYear":"2007","diff":"\"@@ -1,17 +1,19 @@\\n public String toString() {\\r\\n     StringBuffer buf = new StringBuffer().append(\\\"[ option: \\\");\\r\\n     buf.append(this.opt);\\r\\n     if (this.longOpt != null) {\\r\\n         buf.append(\\\" \\\").append(this.longOpt);\\r\\n     }\\r\\n     buf.append(\\\" \\\");\\r\\n-    if (hasArg) {\\r\\n-        buf.append(\\\"+ARG\\\");\\r\\n+    if (hasArgs()) {\\r\\n+        buf.append(\\\"[ARG...]\\\");\\r\\n+    } else if (hasArg()) {\\r\\n+        buf.append(\\\" [ARG]\\\");\\r\\n     }\\r\\n     buf.append(\\\" :: \\\").append(this.description);\\r\\n     if (this.type != null) {\\r\\n         buf.append(\\\" :: \\\").append(this.type);\\r\\n     }\\r\\n     buf.append(\\\" ]\\\");\\r\\n     return buf.toString();\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"roxspring@apache.org","authorName":"Robert James Oxspring","commitYear":"2004","diff":"\"\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"\""},{"authorEmail":"jstrachan@apache.org","authorName":"James Strachan","commitYear":"2002","diff":"\"@@ -0,0 +1,17 @@\\n+public String toString() {\\r\\n+    StringBuffer buf = new StringBuffer().append(\\\"[ option: \\\");\\r\\n+    buf.append(this.opt);\\r\\n+    if (this.longOpt != null) {\\r\\n+        buf.append(\\\" \\\").append(this.longOpt);\\r\\n+    }\\r\\n+    buf.append(\\\" \\\");\\r\\n+    if (hasArg) {\\r\\n+        buf.append(\\\"+ARG\\\");\\r\\n+    }\\r\\n+    buf.append(\\\" :: \\\").append(this.description);\\r\\n+    if (this.type != null) {\\r\\n+        buf.append(\\\" :: \\\").append(this.type);\\r\\n+    }\\r\\n+    buf.append(\\\" ]\\\");\\r\\n+    return buf.toString();\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\main\java\org\apache\commons\cli\OptionBuilder.java	create	org.apache.commons.cli.OptionBuilder.create()	72	79	3	[{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"@@ -1,7 +1,7 @@\\n public static Option create() throws IllegalArgumentException {\\r\\n-    if (longopt == null) {\\r\\n+    if (longOption == null) {\\r\\n         OptionBuilder.reset();\\r\\n         throw new IllegalArgumentException(\\\"must specify longopt\\\");\\r\\n     }\\r\\n     return create(null);\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"\""},{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"\""},{"authorEmail":"bayard@apache.org","authorName":"Henri Yandell","commitYear":"2009","diff":"\"@@ -1,6 +1,7 @@\\n public static Option create() throws IllegalArgumentException {\\r\\n     if (longopt == null) {\\r\\n+        OptionBuilder.reset();\\r\\n         throw new IllegalArgumentException(\\\"must specify longopt\\\");\\r\\n     }\\r\\n     return create(null);\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2008","diff":"\"\""},{"authorEmail":"roxspring@apache.org","authorName":"Robert James Oxspring","commitYear":"2004","diff":"\"\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -1,6 +1,6 @@\\n public static Option create() throws IllegalArgumentException {\\r\\n     if (longopt == null) {\\r\\n         throw new IllegalArgumentException(\\\"must specify longopt\\\");\\r\\n     }\\r\\n-    return create(\\\" \\\");\\r\\n+    return create(null);\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -0,0 +1,6 @@\\n+public static Option create() throws IllegalArgumentException {\\r\\n+    if (longopt == null) {\\r\\n+        throw new IllegalArgumentException(\\\"must specify longopt\\\");\\r\\n+    }\\r\\n+    return create(\\\" \\\");\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\main\java\org\apache\commons\cli\OptionBuilder.java	create	org.apache.commons.cli.OptionBuilder.create(char)	88	90	1	[{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"\""},{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"\""},{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"\""},{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,3 +1,3 @@\\n-public static Option create(char opt) throws IllegalArgumentException {\\r\\n+public static Option create(final char opt) throws IllegalArgumentException {\\r\\n     return create(String.valueOf(opt));\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2008","diff":"\"\""},{"authorEmail":"roxspring@apache.org","authorName":"Robert James Oxspring","commitYear":"2004","diff":"\"\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -0,0 +1,3 @@\\n+public static Option create(char opt) throws IllegalArgumentException {\\r\\n+    return create(String.valueOf(opt));\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\main\java\org\apache\commons\cli\OptionBuilder.java	create	org.apache.commons.cli.OptionBuilder.create(String)	99	120	3	[{"authorEmail":"arturobernalg@gmail.com","authorName":"Arturo Bernal","commitYear":"2023","diff":"\"@@ -1,16 +1,16 @@\\n public static Option create(final String opt) throws IllegalArgumentException {\\r\\n-    Option option = null;\\r\\n+    Option option;\\r\\n     try {\\r\\n         option = new Option(opt, description);\\r\\n         option.setLongOpt(longOption);\\r\\n         option.setRequired(required);\\r\\n         option.setOptionalArg(optionalArg);\\r\\n         option.setArgs(argCount);\\r\\n         option.setType(type);\\r\\n         option.setValueSeparator(valueSeparator);\\r\\n         option.setArgName(argName);\\r\\n     } finally {\\r\\n         OptionBuilder.reset();\\r\\n     }\\r\\n     return option;\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"@@ -1,16 +1,16 @@\\n public static Option create(final String opt) throws IllegalArgumentException {\\r\\n     Option option = null;\\r\\n     try {\\r\\n         option = new Option(opt, description);\\r\\n-        option.setLongOpt(longopt);\\r\\n+        option.setLongOpt(longOption);\\r\\n         option.setRequired(required);\\r\\n         option.setOptionalArg(optionalArg);\\r\\n-        option.setArgs(numberOfArgs);\\r\\n+        option.setArgs(argCount);\\r\\n         option.setType(type);\\r\\n-        option.setValueSeparator(valuesep);\\r\\n+        option.setValueSeparator(valueSeparator);\\r\\n         option.setArgName(argName);\\r\\n     } finally {\\r\\n         OptionBuilder.reset();\\r\\n     }\\r\\n     return option;\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"\""},{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"\""},{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,16 +1,16 @@\\n-public static Option create(String opt) throws IllegalArgumentException {\\r\\n+public static Option create(final String opt) throws IllegalArgumentException {\\r\\n     Option option = null;\\r\\n     try {\\r\\n         option = new Option(opt, description);\\r\\n         option.setLongOpt(longopt);\\r\\n         option.setRequired(required);\\r\\n         option.setOptionalArg(optionalArg);\\r\\n         option.setArgs(numberOfArgs);\\r\\n         option.setType(type);\\r\\n         option.setValueSeparator(valuesep);\\r\\n         option.setArgName(argName);\\r\\n     } finally {\\r\\n         OptionBuilder.reset();\\r\\n     }\\r\\n     return option;\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2010","diff":"\"\""},{"authorEmail":"bayard@apache.org","authorName":"Henri Yandell","commitYear":"2009","diff":"\"@@ -1,12 +1,16 @@\\n public static Option create(String opt) throws IllegalArgumentException {\\r\\n-    Option option = new Option(opt, description);\\r\\n-    option.setLongOpt(longopt);\\r\\n-    option.setRequired(required);\\r\\n-    option.setOptionalArg(optionalArg);\\r\\n-    option.setArgs(numberOfArgs);\\r\\n-    option.setType(type);\\r\\n-    option.setValueSeparator(valuesep);\\r\\n-    option.setArgName(argName);\\r\\n-    OptionBuilder.reset();\\r\\n+    Option option = null;\\r\\n+    try {\\r\\n+        option = new Option(opt, description);\\r\\n+        option.setLongOpt(longopt);\\r\\n+        option.setRequired(required);\\r\\n+        option.setOptionalArg(optionalArg);\\r\\n+        option.setArgs(numberOfArgs);\\r\\n+        option.setType(type);\\r\\n+        option.setValueSeparator(valuesep);\\r\\n+        option.setArgName(argName);\\r\\n+    } finally {\\r\\n+        OptionBuilder.reset();\\r\\n+    }\\r\\n     return option;\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2008","diff":"\"\""},{"authorEmail":"roxspring@apache.org","authorName":"Robert James Oxspring","commitYear":"2005","diff":"\"@@ -1,12 +1,12 @@\\n public static Option create(String opt) throws IllegalArgumentException {\\r\\n     Option option = new Option(opt, description);\\r\\n     option.setLongOpt(longopt);\\r\\n     option.setRequired(required);\\r\\n     option.setOptionalArg(optionalArg);\\r\\n     option.setArgs(numberOfArgs);\\r\\n     option.setType(type);\\r\\n     option.setValueSeparator(valuesep);\\r\\n     option.setArgName(argName);\\r\\n-    instance.reset();\\r\\n+    OptionBuilder.reset();\\r\\n     return option;\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"roxspring@apache.org","authorName":"Robert James Oxspring","commitYear":"2004","diff":"\"\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -1,11 +1,12 @@\\n public static Option create(String opt) throws IllegalArgumentException {\\r\\n     Option option = new Option(opt, description);\\r\\n     option.setLongOpt(longopt);\\r\\n     option.setRequired(required);\\r\\n     option.setOptionalArg(optionalArg);\\r\\n     option.setArgs(numberOfArgs);\\r\\n     option.setType(type);\\r\\n     option.setValueSeparator(valuesep);\\r\\n+    option.setArgName(argName);\\r\\n     instance.reset();\\r\\n     return option;\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -1,10 +1,11 @@\\n public static Option create(String opt) throws IllegalArgumentException {\\r\\n     Option option = new Option(opt, description);\\r\\n     option.setLongOpt(longopt);\\r\\n     option.setRequired(required);\\r\\n+    option.setOptionalArg(optionalArg);\\r\\n     option.setArgs(numberOfArgs);\\r\\n     option.setType(type);\\r\\n     option.setValueSeparator(valuesep);\\r\\n     instance.reset();\\r\\n     return option;\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -1,9 +1,10 @@\\n public static Option create(String opt) throws IllegalArgumentException {\\r\\n     Option option = new Option(opt, description);\\r\\n     option.setLongOpt(longopt);\\r\\n     option.setRequired(required);\\r\\n     option.setArgs(numberOfArgs);\\r\\n     option.setType(type);\\r\\n+    option.setValueSeparator(valuesep);\\r\\n     instance.reset();\\r\\n     return option;\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -1,9 +1,9 @@\\n public static Option create(String opt) throws IllegalArgumentException {\\r\\n-    Option option = new Option(opt, arg, description);\\r\\n+    Option option = new Option(opt, description);\\r\\n     option.setLongOpt(longopt);\\r\\n     option.setRequired(required);\\r\\n-    option.setMultipleArgs(multipleArgs);\\r\\n+    option.setArgs(numberOfArgs);\\r\\n     option.setType(type);\\r\\n     instance.reset();\\r\\n     return option;\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -0,0 +1,9 @@\\n+public static Option create(String opt) throws IllegalArgumentException {\\r\\n+    Option option = new Option(opt, arg, description);\\r\\n+    option.setLongOpt(longopt);\\r\\n+    option.setRequired(required);\\r\\n+    option.setMultipleArgs(multipleArgs);\\r\\n+    option.setType(type);\\r\\n+    instance.reset();\\r\\n+    return option;\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\main\java\org\apache\commons\cli\OptionBuilder.java	hasArg	org.apache.commons.cli.OptionBuilder.hasArg()	127	131	1	[{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"@@ -1,4 +1,4 @@\\n public static OptionBuilder hasArg() {\\r\\n-    OptionBuilder.numberOfArgs = 1;\\r\\n+    OptionBuilder.argCount = 1;\\r\\n     return INSTANCE;\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"britter@apache.org","authorName":"Benedikt Ritter","commitYear":"2015","diff":"\"@@ -1,4 +1,4 @@\\n public static OptionBuilder hasArg() {\\r\\n     OptionBuilder.numberOfArgs = 1;\\r\\n-    return instance;\\r\\n+    return INSTANCE;\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"roxspring@apache.org","authorName":"Robert James Oxspring","commitYear":"2005","diff":"\"@@ -1,4 +1,4 @@\\n public static OptionBuilder hasArg() {\\r\\n-    instance.numberOfArgs = 1;\\r\\n+    OptionBuilder.numberOfArgs = 1;\\r\\n     return instance;\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"roxspring@apache.org","authorName":"Robert James Oxspring","commitYear":"2004","diff":"\"\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -1,4 +1,4 @@\\n public static OptionBuilder hasArg() {\\r\\n-    instance.arg = true;\\r\\n+    instance.numberOfArgs = 1;\\r\\n     return instance;\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -0,0 +1,4 @@\\n+public static OptionBuilder hasArg() {\\r\\n+    instance.arg = true;\\r\\n+    return instance;\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\main\java\org\apache\commons\cli\OptionBuilder.java	hasArg	org.apache.commons.cli.OptionBuilder.hasArg(boolean)	139	143	2	[{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"@@ -1,4 +1,4 @@\\n public static OptionBuilder hasArg(final boolean hasArg) {\\r\\n-    OptionBuilder.numberOfArgs = hasArg ? 1 : Option.UNINITIALIZED;\\r\\n+    OptionBuilder.argCount = hasArg ? 1 : Option.UNINITIALIZED;\\r\\n     return INSTANCE;\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"\""},{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"\""},{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,4 +1,4 @@\\n-public static OptionBuilder hasArg(boolean hasArg) {\\r\\n+public static OptionBuilder hasArg(final boolean hasArg) {\\r\\n     OptionBuilder.numberOfArgs = hasArg ? 1 : Option.UNINITIALIZED;\\r\\n     return INSTANCE;\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"britter@apache.org","authorName":"Benedikt Ritter","commitYear":"2015","diff":"\"@@ -1,4 +1,4 @@\\n public static OptionBuilder hasArg(boolean hasArg) {\\r\\n     OptionBuilder.numberOfArgs = hasArg ? 1 : Option.UNINITIALIZED;\\r\\n-    return instance;\\r\\n+    return INSTANCE;\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2008","diff":"\"@@ -1,4 +1,4 @@\\n public static OptionBuilder hasArg(boolean hasArg) {\\r\\n-    OptionBuilder.numberOfArgs = (hasArg == true) ? 1 : Option.UNINITIALIZED;\\r\\n+    OptionBuilder.numberOfArgs = hasArg ? 1 : Option.UNINITIALIZED;\\r\\n     return instance;\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"roxspring@apache.org","authorName":"Robert James Oxspring","commitYear":"2005","diff":"\"@@ -1,4 +1,4 @@\\n public static OptionBuilder hasArg(boolean hasArg) {\\r\\n-    instance.numberOfArgs = (hasArg == true) ? 1 : Option.UNINITIALIZED;\\r\\n+    OptionBuilder.numberOfArgs = (hasArg == true) ? 1 : Option.UNINITIALIZED;\\r\\n     return instance;\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"roxspring@apache.org","authorName":"Robert James Oxspring","commitYear":"2004","diff":"\"\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -1,4 +1,4 @@\\n public static OptionBuilder hasArg(boolean hasArg) {\\r\\n-    instance.arg = hasArg;\\r\\n+    instance.numberOfArgs = (hasArg == true) ? 1 : Option.UNINITIALIZED;\\r\\n     return instance;\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -0,0 +1,4 @@\\n+public static OptionBuilder hasArg(boolean hasArg) {\\r\\n+    instance.arg = hasArg;\\r\\n+    return instance;\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\main\java\org\apache\commons\cli\OptionBuilder.java	hasArgs	org.apache.commons.cli.OptionBuilder.hasArgs()	150	154	1	[{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"@@ -1,4 +1,4 @@\\n public static OptionBuilder hasArgs() {\\r\\n-    OptionBuilder.numberOfArgs = Option.UNLIMITED_VALUES;\\r\\n+    OptionBuilder.argCount = Option.UNLIMITED_VALUES;\\r\\n     return INSTANCE;\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"britter@apache.org","authorName":"Benedikt Ritter","commitYear":"2015","diff":"\"@@ -1,4 +1,4 @@\\n public static OptionBuilder hasArgs() {\\r\\n     OptionBuilder.numberOfArgs = Option.UNLIMITED_VALUES;\\r\\n-    return instance;\\r\\n+    return INSTANCE;\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"roxspring@apache.org","authorName":"Robert James Oxspring","commitYear":"2005","diff":"\"@@ -1,4 +1,4 @@\\n public static OptionBuilder hasArgs() {\\r\\n-    instance.numberOfArgs = Option.UNLIMITED_VALUES;\\r\\n+    OptionBuilder.numberOfArgs = Option.UNLIMITED_VALUES;\\r\\n     return instance;\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"roxspring@apache.org","authorName":"Robert James Oxspring","commitYear":"2004","diff":"\"\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -0,0 +1,4 @@\\n+public static OptionBuilder hasArgs() {\\r\\n+    instance.numberOfArgs = Option.UNLIMITED_VALUES;\\r\\n+    return instance;\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\main\java\org\apache\commons\cli\OptionBuilder.java	hasArgs	org.apache.commons.cli.OptionBuilder.hasArgs(int)	162	166	1	[{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"@@ -1,4 +1,4 @@\\n public static OptionBuilder hasArgs(final int num) {\\r\\n-    OptionBuilder.numberOfArgs = num;\\r\\n+    OptionBuilder.argCount = num;\\r\\n     return INSTANCE;\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"\""},{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,4 +1,4 @@\\n-public static OptionBuilder hasArgs(int num) {\\r\\n+public static OptionBuilder hasArgs(final int num) {\\r\\n     OptionBuilder.numberOfArgs = num;\\r\\n     return INSTANCE;\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"britter@apache.org","authorName":"Benedikt Ritter","commitYear":"2015","diff":"\"@@ -1,4 +1,4 @@\\n public static OptionBuilder hasArgs(int num) {\\r\\n     OptionBuilder.numberOfArgs = num;\\r\\n-    return instance;\\r\\n+    return INSTANCE;\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2008","diff":"\"\""},{"authorEmail":"roxspring@apache.org","authorName":"Robert James Oxspring","commitYear":"2005","diff":"\"@@ -1,4 +1,4 @@\\n public static OptionBuilder hasArgs(int num) {\\r\\n-    instance.numberOfArgs = num;\\r\\n+    OptionBuilder.numberOfArgs = num;\\r\\n     return instance;\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"roxspring@apache.org","authorName":"Robert James Oxspring","commitYear":"2004","diff":"\"\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -0,0 +1,4 @@\\n+public static OptionBuilder hasArgs(int num) {\\r\\n+    instance.numberOfArgs = num;\\r\\n+    return instance;\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\main\java\org\apache\commons\cli\OptionBuilder.java	hasOptionalArg	org.apache.commons.cli.OptionBuilder.hasOptionalArg()	173	178	1	[{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"@@ -1,5 +1,5 @@\\n public static OptionBuilder hasOptionalArg() {\\r\\n-    OptionBuilder.numberOfArgs = 1;\\r\\n+    OptionBuilder.argCount = 1;\\r\\n     OptionBuilder.optionalArg = true;\\r\\n     return INSTANCE;\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"britter@apache.org","authorName":"Benedikt Ritter","commitYear":"2015","diff":"\"@@ -1,5 +1,5 @@\\n public static OptionBuilder hasOptionalArg() {\\r\\n     OptionBuilder.numberOfArgs = 1;\\r\\n     OptionBuilder.optionalArg = true;\\r\\n-    return instance;\\r\\n+    return INSTANCE;\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"roxspring@apache.org","authorName":"Robert James Oxspring","commitYear":"2005","diff":"\"@@ -1,5 +1,5 @@\\n public static OptionBuilder hasOptionalArg() {\\r\\n-    instance.numberOfArgs = 1;\\r\\n-    instance.optionalArg = true;\\r\\n+    OptionBuilder.numberOfArgs = 1;\\r\\n+    OptionBuilder.optionalArg = true;\\r\\n     return instance;\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"roxspring@apache.org","authorName":"Robert James Oxspring","commitYear":"2004","diff":"\"\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -1,4 +1,5 @@\\n public static OptionBuilder hasOptionalArg() {\\r\\n+    instance.numberOfArgs = 1;\\r\\n     instance.optionalArg = true;\\r\\n     return instance;\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -0,0 +1,4 @@\\n+public static OptionBuilder hasOptionalArg() {\\r\\n+    instance.optionalArg = true;\\r\\n+    return instance;\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\main\java\org\apache\commons\cli\OptionBuilder.java	hasOptionalArgs	org.apache.commons.cli.OptionBuilder.hasOptionalArgs()	185	190	1	[{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"@@ -1,5 +1,5 @@\\n public static OptionBuilder hasOptionalArgs() {\\r\\n-    OptionBuilder.numberOfArgs = Option.UNLIMITED_VALUES;\\r\\n+    OptionBuilder.argCount = Option.UNLIMITED_VALUES;\\r\\n     OptionBuilder.optionalArg = true;\\r\\n     return INSTANCE;\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"britter@apache.org","authorName":"Benedikt Ritter","commitYear":"2015","diff":"\"@@ -1,5 +1,5 @@\\n public static OptionBuilder hasOptionalArgs() {\\r\\n     OptionBuilder.numberOfArgs = Option.UNLIMITED_VALUES;\\r\\n     OptionBuilder.optionalArg = true;\\r\\n-    return instance;\\r\\n+    return INSTANCE;\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2008","diff":"\"\""},{"authorEmail":"roxspring@apache.org","authorName":"Robert James Oxspring","commitYear":"2005","diff":"\"@@ -1,5 +1,5 @@\\n public static OptionBuilder hasOptionalArgs() {\\r\\n-    instance.numberOfArgs = Option.UNLIMITED_VALUES;\\r\\n-    instance.optionalArg = true;\\r\\n+    OptionBuilder.numberOfArgs = Option.UNLIMITED_VALUES;\\r\\n+    OptionBuilder.optionalArg = true;\\r\\n     return instance;\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"roxspring@apache.org","authorName":"Robert James Oxspring","commitYear":"2004","diff":"\"\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -1,4 +1,5 @@\\n-public static OptionBuilder hasOptionalArg() {\\r\\n+public static OptionBuilder hasOptionalArgs() {\\r\\n+    instance.numberOfArgs = Option.UNLIMITED_VALUES;\\r\\n     instance.optionalArg = true;\\r\\n     return instance;\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -0,0 +1,4 @@\\n+public static OptionBuilder hasOptionalArg() {\\r\\n+    instance.optionalArg = true;\\r\\n+    return instance;\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\main\java\org\apache\commons\cli\OptionBuilder.java	hasOptionalArgs	org.apache.commons.cli.OptionBuilder.hasOptionalArgs(int)	198	203	1	[{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"@@ -1,5 +1,5 @@\\n public static OptionBuilder hasOptionalArgs(final int numArgs) {\\r\\n-    OptionBuilder.numberOfArgs = numArgs;\\r\\n+    OptionBuilder.argCount = numArgs;\\r\\n     OptionBuilder.optionalArg = true;\\r\\n     return INSTANCE;\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"\""},{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,5 +1,5 @@\\n-public static OptionBuilder hasOptionalArgs(int numArgs) {\\r\\n+public static OptionBuilder hasOptionalArgs(final int numArgs) {\\r\\n     OptionBuilder.numberOfArgs = numArgs;\\r\\n     OptionBuilder.optionalArg = true;\\r\\n     return INSTANCE;\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"britter@apache.org","authorName":"Benedikt Ritter","commitYear":"2015","diff":"\"@@ -1,5 +1,5 @@\\n public static OptionBuilder hasOptionalArgs(int numArgs) {\\r\\n     OptionBuilder.numberOfArgs = numArgs;\\r\\n     OptionBuilder.optionalArg = true;\\r\\n-    return instance;\\r\\n+    return INSTANCE;\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2008","diff":"\"\""},{"authorEmail":"roxspring@apache.org","authorName":"Robert James Oxspring","commitYear":"2005","diff":"\"@@ -1,5 +1,5 @@\\n public static OptionBuilder hasOptionalArgs(int numArgs) {\\r\\n-    instance.numberOfArgs = numArgs;\\r\\n-    instance.optionalArg = true;\\r\\n+    OptionBuilder.numberOfArgs = numArgs;\\r\\n+    OptionBuilder.optionalArg = true;\\r\\n     return instance;\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"roxspring@apache.org","authorName":"Robert James Oxspring","commitYear":"2004","diff":"\"\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -1,4 +1,5 @@\\n-public static OptionBuilder hasOptionalArg() {\\r\\n+public static OptionBuilder hasOptionalArgs(int numArgs) {\\r\\n+    instance.numberOfArgs = numArgs;\\r\\n     instance.optionalArg = true;\\r\\n     return instance;\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -0,0 +1,4 @@\\n+public static OptionBuilder hasOptionalArg() {\\r\\n+    instance.optionalArg = true;\\r\\n+    return instance;\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\main\java\org\apache\commons\cli\OptionBuilder.java	isRequired	org.apache.commons.cli.OptionBuilder.isRequired()	210	214	1	[{"authorEmail":"britter@apache.org","authorName":"Benedikt Ritter","commitYear":"2015","diff":"\"@@ -1,4 +1,4 @@\\n public static OptionBuilder isRequired() {\\r\\n     OptionBuilder.required = true;\\r\\n-    return instance;\\r\\n+    return INSTANCE;\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"roxspring@apache.org","authorName":"Robert James Oxspring","commitYear":"2005","diff":"\"@@ -1,4 +1,4 @@\\n public static OptionBuilder isRequired() {\\r\\n-    instance.required = true;\\r\\n+    OptionBuilder.required = true;\\r\\n     return instance;\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"roxspring@apache.org","authorName":"Robert James Oxspring","commitYear":"2004","diff":"\"\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -0,0 +1,4 @@\\n+public static OptionBuilder isRequired() {\\r\\n+    instance.required = true;\\r\\n+    return instance;\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\main\java\org\apache\commons\cli\OptionBuilder.java	isRequired	org.apache.commons.cli.OptionBuilder.isRequired(boolean)	222	226	1	[{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"\""},{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"\""},{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,4 +1,4 @@\\n-public static OptionBuilder isRequired(boolean newRequired) {\\r\\n+public static OptionBuilder isRequired(final boolean newRequired) {\\r\\n     OptionBuilder.required = newRequired;\\r\\n     return INSTANCE;\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"britter@apache.org","authorName":"Benedikt Ritter","commitYear":"2015","diff":"\"@@ -1,4 +1,4 @@\\n public static OptionBuilder isRequired(boolean newRequired) {\\r\\n     OptionBuilder.required = newRequired;\\r\\n-    return instance;\\r\\n+    return INSTANCE;\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"roxspring@apache.org","authorName":"Robert James Oxspring","commitYear":"2005","diff":"\"@@ -1,4 +1,4 @@\\n-public static OptionBuilder isRequired(boolean required) {\\r\\n-    instance.required = required;\\r\\n+public static OptionBuilder isRequired(boolean newRequired) {\\r\\n+    OptionBuilder.required = newRequired;\\r\\n     return instance;\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"roxspring@apache.org","authorName":"Robert James Oxspring","commitYear":"2004","diff":"\"\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -0,0 +1,4 @@\\n+public static OptionBuilder isRequired(boolean required) {\\r\\n+    instance.required = required;\\r\\n+    return instance;\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\main\java\org\apache\commons\cli\OptionBuilder.java	reset	org.apache.commons.cli.OptionBuilder.reset()	231	240	1	[{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"@@ -1,10 +1,10 @@\\n private static void reset() {\\r\\n     description = null;\\r\\n     argName = null;\\r\\n-    longopt = null;\\r\\n+    longOption = null;\\r\\n     type = String.class;\\r\\n     required = false;\\r\\n-    numberOfArgs = Option.UNINITIALIZED;\\r\\n+    argCount = Option.UNINITIALIZED;\\r\\n     optionalArg = false;\\r\\n-    valuesep = (char) 0;\\r\\n+    valueSeparator = (char) 0;\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2011","diff":"\"@@ -1,10 +1,10 @@\\n private static void reset() {\\r\\n     description = null;\\r\\n     argName = null;\\r\\n     longopt = null;\\r\\n-    type = null;\\r\\n+    type = String.class;\\r\\n     required = false;\\r\\n     numberOfArgs = Option.UNINITIALIZED;\\r\\n     optionalArg = false;\\r\\n     valuesep = (char) 0;\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2010","diff":"\"@@ -1,10 +1,10 @@\\n private static void reset() {\\r\\n     description = null;\\r\\n-    argName = \\\"arg\\\";\\r\\n+    argName = null;\\r\\n     longopt = null;\\r\\n     type = null;\\r\\n     required = false;\\r\\n     numberOfArgs = Option.UNINITIALIZED;\\r\\n     optionalArg = false;\\r\\n     valuesep = (char) 0;\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2010","diff":"\"\""},{"authorEmail":"roxspring@apache.org","authorName":"Robert James Oxspring","commitYear":"2004","diff":"\"\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -1,10 +1,10 @@\\n private static void reset() {\\r\\n     description = null;\\r\\n-    argName = null;\\r\\n+    argName = \\\"arg\\\";\\r\\n     longopt = null;\\r\\n     type = null;\\r\\n     required = false;\\r\\n     numberOfArgs = Option.UNINITIALIZED;\\r\\n     optionalArg = false;\\r\\n     valuesep = (char) 0;\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -1,9 +1,10 @@\\n private static void reset() {\\r\\n     description = null;\\r\\n+    argName = null;\\r\\n     longopt = null;\\r\\n     type = null;\\r\\n     required = false;\\r\\n     numberOfArgs = Option.UNINITIALIZED;\\r\\n     optionalArg = false;\\r\\n     valuesep = (char) 0;\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -1,7 +1,9 @@\\n private static void reset() {\\r\\n     description = null;\\r\\n     longopt = null;\\r\\n     type = null;\\r\\n     required = false;\\r\\n     numberOfArgs = Option.UNINITIALIZED;\\r\\n+    optionalArg = false;\\r\\n+    valuesep = (char) 0;\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -1,8 +1,7 @@\\n private static void reset() {\\r\\n     description = null;\\r\\n     longopt = null;\\r\\n     type = null;\\r\\n-    arg = false;\\r\\n     required = false;\\r\\n-    multipleArgs = false;\\r\\n+    numberOfArgs = Option.UNINITIALIZED;\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -0,0 +1,8 @@\\n+private static void reset() {\\r\\n+    description = null;\\r\\n+    longopt = null;\\r\\n+    type = null;\\r\\n+    arg = false;\\r\\n+    required = false;\\r\\n+    multipleArgs = false;\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\main\java\org\apache\commons\cli\OptionBuilder.java	withArgName	org.apache.commons.cli.OptionBuilder.withArgName(String)	248	252	1	[{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,4 +1,4 @@\\n-public static OptionBuilder withArgName(String name) {\\r\\n+public static OptionBuilder withArgName(final String name) {\\r\\n     OptionBuilder.argName = name;\\r\\n     return INSTANCE;\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"britter@apache.org","authorName":"Benedikt Ritter","commitYear":"2015","diff":"\"@@ -1,4 +1,4 @@\\n public static OptionBuilder withArgName(String name) {\\r\\n     OptionBuilder.argName = name;\\r\\n-    return instance;\\r\\n+    return INSTANCE;\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2008","diff":"\"\""},{"authorEmail":"roxspring@apache.org","authorName":"Robert James Oxspring","commitYear":"2005","diff":"\"@@ -1,4 +1,4 @@\\n public static OptionBuilder withArgName(String name) {\\r\\n-    instance.argName = name;\\r\\n+    OptionBuilder.argName = name;\\r\\n     return instance;\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"roxspring@apache.org","authorName":"Robert James Oxspring","commitYear":"2004","diff":"\"\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -0,0 +1,4 @@\\n+public static OptionBuilder withArgName(String name) {\\r\\n+    instance.argName = name;\\r\\n+    return instance;\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\main\java\org\apache\commons\cli\OptionBuilder.java	withDescription	org.apache.commons.cli.OptionBuilder.withDescription(String)	260	264	1	[{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,4 +1,4 @@\\n-public static OptionBuilder withDescription(String newDescription) {\\r\\n+public static OptionBuilder withDescription(final String newDescription) {\\r\\n     OptionBuilder.description = newDescription;\\r\\n     return INSTANCE;\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"britter@apache.org","authorName":"Benedikt Ritter","commitYear":"2015","diff":"\"@@ -1,4 +1,4 @@\\n public static OptionBuilder withDescription(String newDescription) {\\r\\n     OptionBuilder.description = newDescription;\\r\\n-    return instance;\\r\\n+    return INSTANCE;\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"roxspring@apache.org","authorName":"Robert James Oxspring","commitYear":"2005","diff":"\"@@ -1,4 +1,4 @@\\n-public static OptionBuilder withDescription(String description) {\\r\\n-    instance.description = description;\\r\\n+public static OptionBuilder withDescription(String newDescription) {\\r\\n+    OptionBuilder.description = newDescription;\\r\\n     return instance;\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"roxspring@apache.org","authorName":"Robert James Oxspring","commitYear":"2004","diff":"\"\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -0,0 +1,4 @@\\n+public static OptionBuilder withDescription(String description) {\\r\\n+    instance.description = description;\\r\\n+    return instance;\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\main\java\org\apache\commons\cli\OptionBuilder.java	withLongOpt	org.apache.commons.cli.OptionBuilder.withLongOpt(String)	272	276	1	[{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"@@ -1,4 +1,4 @@\\n public static OptionBuilder withLongOpt(final String newLongopt) {\\r\\n-    OptionBuilder.longopt = newLongopt;\\r\\n+    OptionBuilder.longOption = newLongopt;\\r\\n     return INSTANCE;\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,4 +1,4 @@\\n-public static OptionBuilder withLongOpt(String newLongopt) {\\r\\n+public static OptionBuilder withLongOpt(final String newLongopt) {\\r\\n     OptionBuilder.longopt = newLongopt;\\r\\n     return INSTANCE;\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"britter@apache.org","authorName":"Benedikt Ritter","commitYear":"2015","diff":"\"@@ -1,4 +1,4 @@\\n public static OptionBuilder withLongOpt(String newLongopt) {\\r\\n     OptionBuilder.longopt = newLongopt;\\r\\n-    return instance;\\r\\n+    return INSTANCE;\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"roxspring@apache.org","authorName":"Robert James Oxspring","commitYear":"2005","diff":"\"@@ -1,4 +1,4 @@\\n-public static OptionBuilder withLongOpt(String longopt) {\\r\\n-    instance.longopt = longopt;\\r\\n+public static OptionBuilder withLongOpt(String newLongopt) {\\r\\n+    OptionBuilder.longopt = newLongopt;\\r\\n     return instance;\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"roxspring@apache.org","authorName":"Robert James Oxspring","commitYear":"2004","diff":"\"\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -0,0 +1,4 @@\\n+public static OptionBuilder withLongOpt(String longopt) {\\r\\n+    instance.longopt = longopt;\\r\\n+    return instance;\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\main\java\org\apache\commons\cli\OptionBuilder.java	withType	org.apache.commons.cli.OptionBuilder.withType(Class<?>)	285	289	1	[{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"\""},{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"\""},{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,4 +1,4 @@\\n-public static OptionBuilder withType(Class<?> newType) {\\r\\n+public static OptionBuilder withType(final Class<?> newType) {\\r\\n     OptionBuilder.type = newType;\\r\\n     return INSTANCE;\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"britter@apache.org","authorName":"Benedikt Ritter","commitYear":"2015","diff":"\"@@ -1,4 +1,4 @@\\n public static OptionBuilder withType(Class<?> newType) {\\r\\n     OptionBuilder.type = newType;\\r\\n-    return instance;\\r\\n+    return INSTANCE;\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"tn@apache.org","authorName":"Thomas Neidhart","commitYear":"2013","diff":"\"\""},{"authorEmail":"sebb@apache.org","authorName":"Sebastian Bazley","commitYear":"2013","diff":"\"@@ -1,4 +1,4 @@\\n-public static OptionBuilder withType(Class newType) {\\r\\n+public static OptionBuilder withType(Class<?> newType) {\\r\\n     OptionBuilder.type = newType;\\r\\n     return instance;\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2011","diff":"\"@@ -1,4 +1,4 @@\\n-public static OptionBuilder withType(Object newType) {\\r\\n+public static OptionBuilder withType(Class newType) {\\r\\n     OptionBuilder.type = newType;\\r\\n     return instance;\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2008","diff":"\"\""},{"authorEmail":"roxspring@apache.org","authorName":"Robert James Oxspring","commitYear":"2005","diff":"\"@@ -1,4 +1,4 @@\\n-public static OptionBuilder withType(Object type) {\\r\\n-    instance.type = type;\\r\\n+public static OptionBuilder withType(Object newType) {\\r\\n+    OptionBuilder.type = newType;\\r\\n     return instance;\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"roxspring@apache.org","authorName":"Robert James Oxspring","commitYear":"2004","diff":"\"\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -0,0 +1,4 @@\\n+public static OptionBuilder withType(Object type) {\\r\\n+    instance.type = type;\\r\\n+    return instance;\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\main\java\org\apache\commons\cli\OptionBuilder.java	withType	org.apache.commons.cli.OptionBuilder.withType(Object)	302	304	1	[{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"\""},{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"\""},{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,4 +1,4 @@\\n @Deprecated\\r\\n-public static OptionBuilder withType(Object newType) {\\r\\n+public static OptionBuilder withType(final Object newType) {\\r\\n     return withType((Class<?>) newType);\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"sebb@apache.org","authorName":"Sebastian Bazley","commitYear":"2013","diff":"\"@@ -1,4 +1,4 @@\\n @Deprecated\\r\\n public static OptionBuilder withType(Object newType) {\\r\\n-    return withType((Class) newType);\\r\\n+    return withType((Class<?>) newType);\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"tn@apache.org","authorName":"Thomas Neidhart","commitYear":"2013","diff":"\"@@ -0,0 +1,4 @@\\n+@Deprecated\\r\\n+public static OptionBuilder withType(Object newType) {\\r\\n+    return withType((Class) newType);\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\main\java\org\apache\commons\cli\OptionBuilder.java	withValueSeparator	org.apache.commons.cli.OptionBuilder.withValueSeparator()	321	325	1	[{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"@@ -1,4 +1,4 @@\\n public static OptionBuilder withValueSeparator() {\\r\\n-    OptionBuilder.valuesep = '=';\\r\\n+    OptionBuilder.valueSeparator = '=';\\r\\n     return INSTANCE;\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"\""},{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"\""},{"authorEmail":"britter@apache.org","authorName":"Benedikt Ritter","commitYear":"2015","diff":"\"@@ -1,4 +1,4 @@\\n public static OptionBuilder withValueSeparator() {\\r\\n     OptionBuilder.valuesep = '=';\\r\\n-    return instance;\\r\\n+    return INSTANCE;\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"roxspring@apache.org","authorName":"Robert James Oxspring","commitYear":"2005","diff":"\"@@ -1,4 +1,4 @@\\n public static OptionBuilder withValueSeparator() {\\r\\n-    instance.valuesep = '=';\\r\\n+    OptionBuilder.valuesep = '=';\\r\\n     return instance;\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"roxspring@apache.org","authorName":"Robert James Oxspring","commitYear":"2004","diff":"\"\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -0,0 +1,4 @@\\n+public static OptionBuilder withValueSeparator() {\\r\\n+    instance.valuesep = '=';\\r\\n+    return instance;\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\main\java\org\apache\commons\cli\OptionBuilder.java	withValueSeparator	org.apache.commons.cli.OptionBuilder.withValueSeparator(char)	345	349	1	[{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"@@ -1,4 +1,4 @@\\n public static OptionBuilder withValueSeparator(final char sep) {\\r\\n-    OptionBuilder.valuesep = sep;\\r\\n+    OptionBuilder.valueSeparator = sep;\\r\\n     return INSTANCE;\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"\""},{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"\""},{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,4 +1,4 @@\\n-public static OptionBuilder withValueSeparator(char sep) {\\r\\n+public static OptionBuilder withValueSeparator(final char sep) {\\r\\n     OptionBuilder.valuesep = sep;\\r\\n     return INSTANCE;\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"britter@apache.org","authorName":"Benedikt Ritter","commitYear":"2015","diff":"\"@@ -1,4 +1,4 @@\\n public static OptionBuilder withValueSeparator(char sep) {\\r\\n     OptionBuilder.valuesep = sep;\\r\\n-    return instance;\\r\\n+    return INSTANCE;\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"tn@apache.org","authorName":"Thomas Neidhart","commitYear":"2013","diff":"\"\""},{"authorEmail":"roxspring@apache.org","authorName":"Robert James Oxspring","commitYear":"2005","diff":"\"@@ -1,4 +1,4 @@\\n public static OptionBuilder withValueSeparator(char sep) {\\r\\n-    instance.valuesep = sep;\\r\\n+    OptionBuilder.valuesep = sep;\\r\\n     return instance;\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"roxspring@apache.org","authorName":"Robert James Oxspring","commitYear":"2004","diff":"\"\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -0,0 +1,4 @@\\n+public static OptionBuilder withValueSeparator(char sep) {\\r\\n+    instance.valuesep = sep;\\r\\n+    return instance;\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\main\java\org\apache\commons\cli\OptionGroup.java	addOption	org.apache.commons.cli.OptionGroup.addOption(Option)	48	54	1	[{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"\""},{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"\""},{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,4 +1,4 @@\\n-public OptionGroup addOption(Option option) {\\r\\n+public OptionGroup addOption(final Option option) {\\r\\n     optionMap.put(option.getKey(), option);\\r\\n     return this;\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2008","diff":"\"@@ -1,4 +1,4 @@\\n-public OptionGroup addOption(Option opt) {\\r\\n-    optionMap.put(opt.getKey(), opt);\\r\\n+public OptionGroup addOption(Option option) {\\r\\n+    optionMap.put(option.getKey(), option);\\r\\n     return this;\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -1,4 +1,4 @@\\n public OptionGroup addOption(Option opt) {\\r\\n-    optionMap.put(\\\"-\\\" + opt.getOpt(), opt);\\r\\n+    optionMap.put(opt.getKey(), opt);\\r\\n     return this;\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jstrachan@apache.org","authorName":"James Strachan","commitYear":"2002","diff":"\"@@ -0,0 +1,4 @@\\n+public OptionGroup addOption(Option opt) {\\r\\n+    optionMap.put(\\\"-\\\" + opt.getOpt(), opt);\\r\\n+    return this;\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\main\java\org\apache\commons\cli\OptionGroup.java	getNames	org.apache.commons.cli.OptionGroup.getNames()	59	62	1	[{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"\""},{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"\""},{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2019","diff":"\"\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2011","diff":"\"@@ -1,3 +1,3 @@\\n-public Collection getNames() {\\r\\n+public Collection<String> getNames() {\\r\\n     return optionMap.keySet();\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -1,3 +1,3 @@\\n-private Collection getNames() {\\r\\n+public Collection getNames() {\\r\\n     return optionMap.keySet();\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jstrachan@apache.org","authorName":"James Strachan","commitYear":"2002","diff":"\"@@ -0,0 +1,3 @@\\n+private Collection getNames() {\\r\\n+    return optionMap.keySet();\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\main\java\org\apache\commons\cli\OptionGroup.java	getOptions	org.apache.commons.cli.OptionGroup.getOptions()	67	70	1	[{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2011","diff":"\"@@ -1,3 +1,3 @@\\n-public Collection getOptions() {\\r\\n+public Collection<Option> getOptions() {\\r\\n     return optionMap.values();\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jstrachan@apache.org","authorName":"James Strachan","commitYear":"2002","diff":"\"@@ -0,0 +1,3 @@\\n+public Collection getOptions() {\\r\\n+    return optionMap.values();\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\main\java\org\apache\commons\cli\OptionGroup.java	getSelected	org.apache.commons.cli.OptionGroup.getSelected()	75	77	1	[{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -1,3 +1,3 @@\\n-public Option getSelected() {\\r\\n+public String getSelected() {\\r\\n     return selected;\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jstrachan@apache.org","authorName":"James Strachan","commitYear":"2002","diff":"\"@@ -0,0 +1,3 @@\\n+public Option getSelected() {\\r\\n+    return selected;\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\main\java\org\apache\commons\cli\OptionGroup.java	isRequired	org.apache.commons.cli.OptionGroup.isRequired()	84	86	1	[{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2008","diff":"\"@@ -1,3 +1,3 @@\\n public boolean isRequired() {\\r\\n-    return this.required;\\r\\n+    return required;\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -0,0 +1,3 @@\\n+public boolean isRequired() {\\r\\n+    return this.required;\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\main\java\org\apache\commons\cli\OptionGroup.java	setRequired	org.apache.commons.cli.OptionGroup.setRequired(boolean)	91	93	1	[{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,3 +1,3 @@\\n-public void setRequired(boolean required) {\\r\\n+public void setRequired(final boolean required) {\\r\\n     this.required = required;\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -0,0 +1,3 @@\\n+public void setRequired(boolean required) {\\r\\n+    this.required = required;\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\main\java\org\apache\commons\cli\OptionGroup.java	setSelected	org.apache.commons.cli.OptionGroup.setSelected(Option)	101	115	6	[{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2023","diff":"\"\""},{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"\""},{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"@@ -1,10 +1,10 @@\\n public void setSelected(final Option option) throws AlreadySelectedException {\\r\\n     if (option == null) {\\r\\n         selected = null;\\r\\n         return;\\r\\n     }\\r\\n-    if ((selected != null) && !selected.equals(option.getKey())) {\\r\\n+    if (selected != null && !selected.equals(option.getKey())) {\\r\\n         throw new AlreadySelectedException(this, option);\\r\\n     }\\r\\n     selected = option.getKey();\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"@@ -1,11 +1,10 @@\\n public void setSelected(final Option option) throws AlreadySelectedException {\\r\\n     if (option == null) {\\r\\n         selected = null;\\r\\n         return;\\r\\n     }\\r\\n-    if (selected == null || selected.equals(option.getKey())) {\\r\\n-        selected = option.getKey();\\r\\n-    } else {\\r\\n+    if ((selected != null) && !selected.equals(option.getKey())) {\\r\\n         throw new AlreadySelectedException(this, option);\\r\\n     }\\r\\n+    selected = option.getKey();\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2019","diff":"\"\""},{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,11 +1,11 @@\\n-public void setSelected(Option option) throws AlreadySelectedException {\\r\\n+public void setSelected(final Option option) throws AlreadySelectedException {\\r\\n     if (option == null) {\\r\\n         selected = null;\\r\\n         return;\\r\\n     }\\r\\n     if (selected == null || selected.equals(option.getKey())) {\\r\\n         selected = option.getKey();\\r\\n     } else {\\r\\n         throw new AlreadySelectedException(this, option);\\r\\n     }\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2009","diff":"\"@@ -1,7 +1,11 @@\\n public void setSelected(Option option) throws AlreadySelectedException {\\r\\n-    if (selected == null || selected.equals(option.getOpt())) {\\r\\n-        selected = option.getOpt();\\r\\n+    if (option == null) {\\r\\n+        selected = null;\\r\\n+        return;\\r\\n+    }\\r\\n+    if (selected == null || selected.equals(option.getKey())) {\\r\\n+        selected = option.getKey();\\r\\n     } else {\\r\\n         throw new AlreadySelectedException(this, option);\\r\\n     }\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2008","diff":"\"@@ -1,7 +1,7 @@\\n public void setSelected(Option option) throws AlreadySelectedException {\\r\\n-    if ((this.selected == null) || this.selected.equals(option.getOpt())) {\\r\\n-        this.selected = option.getOpt();\\r\\n+    if (selected == null || selected.equals(option.getOpt())) {\\r\\n+        selected = option.getOpt();\\r\\n     } else {\\r\\n         throw new AlreadySelectedException(this, option);\\r\\n     }\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2008","diff":"\"@@ -1,7 +1,7 @@\\n-public void setSelected(Option opt) throws AlreadySelectedException {\\r\\n-    if ((this.selected == null) || this.selected.equals(opt.getOpt())) {\\r\\n-        this.selected = opt.getOpt();\\r\\n+public void setSelected(Option option) throws AlreadySelectedException {\\r\\n+    if ((this.selected == null) || this.selected.equals(option.getOpt())) {\\r\\n+        this.selected = option.getOpt();\\r\\n     } else {\\r\\n-        throw new AlreadySelectedException(\\\"an option from this group has \\\" + \\\"already been selected: '\\\" + selected + \\\"'\\\");\\r\\n+        throw new AlreadySelectedException(this, option);\\r\\n     }\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -1,7 +1,7 @@\\n public void setSelected(Option opt) throws AlreadySelectedException {\\r\\n-    if (this.selected == null || this.selected.equals(opt.getOpt())) {\\r\\n+    if ((this.selected == null) || this.selected.equals(opt.getOpt())) {\\r\\n         this.selected = opt.getOpt();\\r\\n     } else {\\r\\n         throw new AlreadySelectedException(\\\"an option from this group has \\\" + \\\"already been selected: '\\\" + selected + \\\"'\\\");\\r\\n     }\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -1,7 +1,7 @@\\n public void setSelected(Option opt) throws AlreadySelectedException {\\r\\n-    if (this.selected == null || this.selected.equals(opt)) {\\r\\n-        this.selected = opt;\\r\\n+    if (this.selected == null || this.selected.equals(opt.getOpt())) {\\r\\n+        this.selected = opt.getOpt();\\r\\n     } else {\\r\\n         throw new AlreadySelectedException(\\\"an option from this group has \\\" + \\\"already been selected: '\\\" + selected + \\\"'\\\");\\r\\n     }\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jstrachan@apache.org","authorName":"James Strachan","commitYear":"2002","diff":"\"@@ -0,0 +1,7 @@\\n+public void setSelected(Option opt) throws AlreadySelectedException {\\r\\n+    if (this.selected == null || this.selected.equals(opt)) {\\r\\n+        this.selected = opt;\\r\\n+    } else {\\r\\n+        throw new AlreadySelectedException(\\\"an option from this group has \\\" + \\\"already been selected: '\\\" + selected + \\\"'\\\");\\r\\n+    }\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\main\java\org\apache\commons\cli\OptionGroup.java	toString	org.apache.commons.cli.OptionGroup.toString()	123	154	6	[{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"\""},{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2019","diff":"\"\""},{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,25 +1,25 @@\\n @Override\\r\\n public String toString() {\\r\\n-    StringBuilder buff = new StringBuilder();\\r\\n-    Iterator<Option> iter = getOptions().iterator();\\r\\n+    final StringBuilder buff = new StringBuilder();\\r\\n+    final Iterator<Option> iter = getOptions().iterator();\\r\\n     buff.append(\\\"[\\\");\\r\\n     while (iter.hasNext()) {\\r\\n-        Option option = iter.next();\\r\\n+        final Option option = iter.next();\\r\\n         if (option.getOpt() != null) {\\r\\n             buff.append(\\\"-\\\");\\r\\n             buff.append(option.getOpt());\\r\\n         } else {\\r\\n             buff.append(\\\"--\\\");\\r\\n             buff.append(option.getLongOpt());\\r\\n         }\\r\\n         if (option.getDescription() != null) {\\r\\n             buff.append(\\\" \\\");\\r\\n             buff.append(option.getDescription());\\r\\n         }\\r\\n         if (iter.hasNext()) {\\r\\n             buff.append(\\\", \\\");\\r\\n         }\\r\\n     }\\r\\n     buff.append(\\\"]\\\");\\r\\n     return buff.toString();\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"sebb@apache.org","authorName":"Sebastian Bazley","commitYear":"2013","diff":"\"@@ -1,24 +1,25 @@\\n+@Override\\r\\n public String toString() {\\r\\n     StringBuilder buff = new StringBuilder();\\r\\n     Iterator<Option> iter = getOptions().iterator();\\r\\n     buff.append(\\\"[\\\");\\r\\n     while (iter.hasNext()) {\\r\\n         Option option = iter.next();\\r\\n         if (option.getOpt() != null) {\\r\\n             buff.append(\\\"-\\\");\\r\\n             buff.append(option.getOpt());\\r\\n         } else {\\r\\n             buff.append(\\\"--\\\");\\r\\n             buff.append(option.getLongOpt());\\r\\n         }\\r\\n         if (option.getDescription() != null) {\\r\\n             buff.append(\\\" \\\");\\r\\n             buff.append(option.getDescription());\\r\\n         }\\r\\n         if (iter.hasNext()) {\\r\\n             buff.append(\\\", \\\");\\r\\n         }\\r\\n     }\\r\\n     buff.append(\\\"]\\\");\\r\\n     return buff.toString();\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2011","diff":"\"@@ -1,24 +1,24 @@\\n public String toString() {\\r\\n-    StringBuffer buff = new StringBuffer();\\r\\n-    Iterator iter = getOptions().iterator();\\r\\n+    StringBuilder buff = new StringBuilder();\\r\\n+    Iterator<Option> iter = getOptions().iterator();\\r\\n     buff.append(\\\"[\\\");\\r\\n     while (iter.hasNext()) {\\r\\n-        Option option = (Option) iter.next();\\r\\n+        Option option = iter.next();\\r\\n         if (option.getOpt() != null) {\\r\\n             buff.append(\\\"-\\\");\\r\\n             buff.append(option.getOpt());\\r\\n         } else {\\r\\n             buff.append(\\\"--\\\");\\r\\n             buff.append(option.getLongOpt());\\r\\n         }\\r\\n         if (option.getDescription() != null) {\\r\\n             buff.append(\\\" \\\");\\r\\n             buff.append(option.getDescription());\\r\\n         }\\r\\n         if (iter.hasNext()) {\\r\\n             buff.append(\\\", \\\");\\r\\n         }\\r\\n     }\\r\\n     buff.append(\\\"]\\\");\\r\\n     return buff.toString();\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2011","diff":"\"@@ -1,22 +1,24 @@\\n public String toString() {\\r\\n     StringBuffer buff = new StringBuffer();\\r\\n     Iterator iter = getOptions().iterator();\\r\\n     buff.append(\\\"[\\\");\\r\\n     while (iter.hasNext()) {\\r\\n         Option option = (Option) iter.next();\\r\\n         if (option.getOpt() != null) {\\r\\n             buff.append(\\\"-\\\");\\r\\n             buff.append(option.getOpt());\\r\\n         } else {\\r\\n             buff.append(\\\"--\\\");\\r\\n             buff.append(option.getLongOpt());\\r\\n         }\\r\\n-        buff.append(\\\" \\\");\\r\\n-        buff.append(option.getDescription());\\r\\n+        if (option.getDescription() != null) {\\r\\n+            buff.append(\\\" \\\");\\r\\n+            buff.append(option.getDescription());\\r\\n+        }\\r\\n         if (iter.hasNext()) {\\r\\n             buff.append(\\\", \\\");\\r\\n         }\\r\\n     }\\r\\n     buff.append(\\\"]\\\");\\r\\n     return buff.toString();\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2008","diff":"\"\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -1,17 +1,22 @@\\n public String toString() {\\r\\n     StringBuffer buff = new StringBuffer();\\r\\n     Iterator iter = getOptions().iterator();\\r\\n     buff.append(\\\"[\\\");\\r\\n     while (iter.hasNext()) {\\r\\n         Option option = (Option) iter.next();\\r\\n-        buff.append(\\\"-\\\");\\r\\n-        buff.append(option.getOpt());\\r\\n+        if (option.getOpt() != null) {\\r\\n+            buff.append(\\\"-\\\");\\r\\n+            buff.append(option.getOpt());\\r\\n+        } else {\\r\\n+            buff.append(\\\"--\\\");\\r\\n+            buff.append(option.getLongOpt());\\r\\n+        }\\r\\n         buff.append(\\\" \\\");\\r\\n         buff.append(option.getDescription());\\r\\n         if (iter.hasNext()) {\\r\\n             buff.append(\\\", \\\");\\r\\n         }\\r\\n     }\\r\\n     buff.append(\\\"]\\\");\\r\\n     return buff.toString();\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jstrachan@apache.org","authorName":"James Strachan","commitYear":"2002","diff":"\"@@ -0,0 +1,17 @@\\n+public String toString() {\\r\\n+    StringBuffer buff = new StringBuffer();\\r\\n+    Iterator iter = getOptions().iterator();\\r\\n+    buff.append(\\\"[\\\");\\r\\n+    while (iter.hasNext()) {\\r\\n+        Option option = (Option) iter.next();\\r\\n+        buff.append(\\\"-\\\");\\r\\n+        buff.append(option.getOpt());\\r\\n+        buff.append(\\\" \\\");\\r\\n+        buff.append(option.getDescription());\\r\\n+        if (iter.hasNext()) {\\r\\n+            buff.append(\\\", \\\");\\r\\n+        }\\r\\n+    }\\r\\n+    buff.append(\\\"]\\\");\\r\\n+    return buff.toString();\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\main\java\org\apache\commons\cli\Options.java	addOption	org.apache.commons.cli.Options.addOption(Option)	63	82	4	[{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"\""},{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,14 +1,14 @@\\n-public Options addOption(Option opt) {\\r\\n+public Options addOption(final Option opt) {\\r\\n     final String key = opt.getKey();\\r\\n     if (opt.hasLongOpt()) {\\r\\n         longOpts.put(opt.getLongOpt(), opt);\\r\\n     }\\r\\n     if (opt.isRequired()) {\\r\\n         if (requiredOpts.contains(key)) {\\r\\n             requiredOpts.remove(requiredOpts.indexOf(key));\\r\\n         }\\r\\n         requiredOpts.add(key);\\r\\n     }\\r\\n     shortOpts.put(key, opt);\\r\\n     return this;\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,14 +1,14 @@\\n public Options addOption(Option opt) {\\r\\n-    String key = opt.getKey();\\r\\n+    final String key = opt.getKey();\\r\\n     if (opt.hasLongOpt()) {\\r\\n         longOpts.put(opt.getLongOpt(), opt);\\r\\n     }\\r\\n     if (opt.isRequired()) {\\r\\n         if (requiredOpts.contains(key)) {\\r\\n             requiredOpts.remove(requiredOpts.indexOf(key));\\r\\n         }\\r\\n         requiredOpts.add(key);\\r\\n     }\\r\\n     shortOpts.put(key, opt);\\r\\n     return this;\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2008","diff":"\"\""},{"authorEmail":"roxspring@apache.org","authorName":"Robert James Oxspring","commitYear":"2004","diff":"\"\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2003","diff":"\"@@ -1,11 +1,14 @@\\n public Options addOption(Option opt) {\\r\\n     String key = opt.getKey();\\r\\n     if (opt.hasLongOpt()) {\\r\\n         longOpts.put(opt.getLongOpt(), opt);\\r\\n     }\\r\\n-    if (opt.isRequired() && !requiredOpts.contains(key)) {\\r\\n+    if (opt.isRequired()) {\\r\\n+        if (requiredOpts.contains(key)) {\\r\\n+            requiredOpts.remove(requiredOpts.indexOf(key));\\r\\n+        }\\r\\n         requiredOpts.add(key);\\r\\n     }\\r\\n     shortOpts.put(key, opt);\\r\\n     return this;\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -1,11 +1,11 @@\\n public Options addOption(Option opt) {\\r\\n-    String shortOpt = opt.getOpt();\\r\\n+    String key = opt.getKey();\\r\\n     if (opt.hasLongOpt()) {\\r\\n         longOpts.put(opt.getLongOpt(), opt);\\r\\n     }\\r\\n-    if (opt.isRequired()) {\\r\\n-        requiredOpts.add(opt.getKey());\\r\\n+    if (opt.isRequired() && !requiredOpts.contains(key)) {\\r\\n+        requiredOpts.add(key);\\r\\n     }\\r\\n-    shortOpts.put(shortOpt, opt);\\r\\n+    shortOpts.put(key, opt);\\r\\n     return this;\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -1,11 +1,11 @@\\n public Options addOption(Option opt) {\\r\\n-    String shortOpt = \\\"-\\\" + opt.getOpt();\\r\\n+    String shortOpt = opt.getOpt();\\r\\n     if (opt.hasLongOpt()) {\\r\\n-        longOpts.put(\\\"--\\\" + opt.getLongOpt(), opt);\\r\\n+        longOpts.put(opt.getLongOpt(), opt);\\r\\n     }\\r\\n     if (opt.isRequired()) {\\r\\n-        requiredOpts.add(shortOpt);\\r\\n+        requiredOpts.add(opt.getKey());\\r\\n     }\\r\\n     shortOpts.put(shortOpt, opt);\\r\\n     return this;\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -1,11 +1,11 @@\\n public Options addOption(Option opt) {\\r\\n     String shortOpt = \\\"-\\\" + opt.getOpt();\\r\\n     if (opt.hasLongOpt()) {\\r\\n         longOpts.put(\\\"--\\\" + opt.getLongOpt(), opt);\\r\\n     }\\r\\n     if (opt.isRequired()) {\\r\\n-        requiredOpts.put(shortOpt, opt);\\r\\n+        requiredOpts.add(shortOpt);\\r\\n     }\\r\\n     shortOpts.put(shortOpt, opt);\\r\\n     return this;\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -1,12 +1,11 @@\\n public Options addOption(Option opt) {\\r\\n-    String shortOptStr = \\\"-\\\" + opt.getOpt();\\r\\n+    String shortOpt = \\\"-\\\" + opt.getOpt();\\r\\n     if (opt.hasLongOpt()) {\\r\\n         longOpts.put(\\\"--\\\" + opt.getLongOpt(), opt);\\r\\n     }\\r\\n     if (opt.isRequired()) {\\r\\n-        requiredOpts.put(\\\"-\\\" + opt.getOpt(), opt);\\r\\n+        requiredOpts.put(shortOpt, opt);\\r\\n     }\\r\\n-    shortOpts.put(\\\"-\\\" + opt.getOpt(), opt);\\r\\n-    options.add(opt);\\r\\n+    shortOpts.put(shortOpt, opt);\\r\\n     return this;\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -1,11 +1,12 @@\\n-private void addOption(Option opt) {\\r\\n+public Options addOption(Option opt) {\\r\\n     String shortOptStr = \\\"-\\\" + opt.getOpt();\\r\\n     if (opt.hasLongOpt()) {\\r\\n         longOpts.put(\\\"--\\\" + opt.getLongOpt(), opt);\\r\\n     }\\r\\n     if (opt.isRequired()) {\\r\\n         requiredOpts.put(\\\"-\\\" + opt.getOpt(), opt);\\r\\n     }\\r\\n     shortOpts.put(\\\"-\\\" + opt.getOpt(), opt);\\r\\n     options.add(opt);\\r\\n+    return this;\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jstrachan@apache.org","authorName":"James Strachan","commitYear":"2002","diff":"\"@@ -0,0 +1,11 @@\\n+private void addOption(Option opt) {\\r\\n+    String shortOptStr = \\\"-\\\" + opt.getOpt();\\r\\n+    if (opt.hasLongOpt()) {\\r\\n+        longOpts.put(\\\"--\\\" + opt.getLongOpt(), opt);\\r\\n+    }\\r\\n+    if (opt.isRequired()) {\\r\\n+        requiredOpts.put(\\\"-\\\" + opt.getOpt(), opt);\\r\\n+    }\\r\\n+    shortOpts.put(\\\"-\\\" + opt.getOpt(), opt);\\r\\n+    options.add(opt);\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\main\java\org\apache\commons\cli\Options.java	addOption	org.apache.commons.cli.Options.addOption(String, boolean, String)	96	99	1	[{"authorEmail":"codyrank@gmail.com","authorName":"Cody Rank","commitYear":"2017","diff":"\"\""},{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,4 +1,4 @@\\n-public Options addOption(String opt, boolean hasArg, String description) {\\r\\n+public Options addOption(final String opt, final boolean hasArg, final String description) {\\r\\n     addOption(opt, null, hasArg, description);\\r\\n     return this;\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"britter@apache.org","authorName":"Benedikt Ritter","commitYear":"2016","diff":"\"\""},{"authorEmail":"tn@apache.org","authorName":"Thomas Neidhart","commitYear":"2013","diff":"\"\""},{"authorEmail":"roxspring@apache.org","authorName":"Robert James Oxspring","commitYear":"2004","diff":"\"\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -1,4 +1,4 @@\\n public Options addOption(String opt, boolean hasArg, String description) {\\r\\n-    addOption(opt, null, hasArg, description, false);\\r\\n+    addOption(opt, null, hasArg, description);\\r\\n     return this;\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -1,4 +1,4 @@\\n-public Options addOption(char opt, boolean hasArg, String description) {\\r\\n+public Options addOption(String opt, boolean hasArg, String description) {\\r\\n     addOption(opt, null, hasArg, description, false);\\r\\n     return this;\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jstrachan@apache.org","authorName":"James Strachan","commitYear":"2002","diff":"\"@@ -0,0 +1,4 @@\\n+public Options addOption(char opt, boolean hasArg, String description) {\\r\\n+    addOption(opt, null, hasArg, description, false);\\r\\n+    return this;\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\main\java\org\apache\commons\cli\Options.java	addOption	org.apache.commons.cli.Options.addOption(String, String)	113	116	1	[{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,4 +1,4 @@\\n-public Options addOption(String opt, String description) {\\r\\n+public Options addOption(final String opt, final String description) {\\r\\n     addOption(opt, null, false, description);\\r\\n     return this;\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"britter@apache.org","authorName":"Benedikt Ritter","commitYear":"2016","diff":"\"\""},{"authorEmail":"tn@apache.org","authorName":"Thomas Neidhart","commitYear":"2013","diff":"\"@@ -0,0 +1,4 @@\\n+public Options addOption(String opt, String description) {\\r\\n+    addOption(opt, null, false, description);\\r\\n+    return this;\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\main\java\org\apache\commons\cli\Options.java	addOption	org.apache.commons.cli.Options.addOption(String, String, boolean, String)	131	134	1	[{"authorEmail":"codyrank@gmail.com","authorName":"Cody Rank","commitYear":"2017","diff":"\"\""},{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,4 +1,4 @@\\n-public Options addOption(String opt, String longOpt, boolean hasArg, String description) {\\r\\n+public Options addOption(final String opt, final String longOpt, final boolean hasArg, final String description) {\\r\\n     addOption(new Option(opt, longOpt, hasArg, description));\\r\\n     return this;\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"britter@apache.org","authorName":"Benedikt Ritter","commitYear":"2016","diff":"\"\""},{"authorEmail":"tn@apache.org","authorName":"Thomas Neidhart","commitYear":"2013","diff":"\"\""},{"authorEmail":"roxspring@apache.org","authorName":"Robert James Oxspring","commitYear":"2004","diff":"\"\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -1,4 +1,4 @@\\n public Options addOption(String opt, String longOpt, boolean hasArg, String description) {\\r\\n-    addOption(opt, longOpt, hasArg, description, false);\\r\\n+    addOption(new Option(opt, longOpt, hasArg, description));\\r\\n     return this;\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -1,4 +1,4 @@\\n-public Options addOption(char opt, String longOpt, boolean hasArg, String description) {\\r\\n+public Options addOption(String opt, String longOpt, boolean hasArg, String description) {\\r\\n     addOption(opt, longOpt, hasArg, description, false);\\r\\n     return this;\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jstrachan@apache.org","authorName":"James Strachan","commitYear":"2002","diff":"\"@@ -0,0 +1,4 @@\\n+public Options addOption(char opt, String longOpt, boolean hasArg, String description) {\\r\\n+    addOption(opt, longOpt, hasArg, description, false);\\r\\n+    return this;\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\main\java\org\apache\commons\cli\Options.java	addOptionGroup	org.apache.commons.cli.Options.addOptionGroup(OptionGroup)	142	158	3	[{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"\""},{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,11 +1,11 @@\\n-public Options addOptionGroup(OptionGroup group) {\\r\\n+public Options addOptionGroup(final OptionGroup group) {\\r\\n     if (group.isRequired()) {\\r\\n         requiredOpts.add(group);\\r\\n     }\\r\\n     for (final Option option : group.getOptions()) {\\r\\n         option.setRequired(false);\\r\\n         addOption(option);\\r\\n         optionGroups.put(option.getKey(), group);\\r\\n     }\\r\\n     return this;\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,11 +1,11 @@\\n public Options addOptionGroup(OptionGroup group) {\\r\\n     if (group.isRequired()) {\\r\\n         requiredOpts.add(group);\\r\\n     }\\r\\n-    for (Option option : group.getOptions()) {\\r\\n+    for (final Option option : group.getOptions()) {\\r\\n         option.setRequired(false);\\r\\n         addOption(option);\\r\\n         optionGroups.put(option.getKey(), group);\\r\\n     }\\r\\n     return this;\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"simonetripodi@apache.org","authorName":"Simone Tripodi","commitYear":"2011","diff":"\"@@ -1,13 +1,11 @@\\n public Options addOptionGroup(OptionGroup group) {\\r\\n-    Iterator<Option> options = group.getOptions().iterator();\\r\\n     if (group.isRequired()) {\\r\\n         requiredOpts.add(group);\\r\\n     }\\r\\n-    while (options.hasNext()) {\\r\\n-        Option option = options.next();\\r\\n+    for (Option option : group.getOptions()) {\\r\\n         option.setRequired(false);\\r\\n         addOption(option);\\r\\n         optionGroups.put(option.getKey(), group);\\r\\n     }\\r\\n     return this;\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"simonetripodi@apache.org","authorName":"Simone Tripodi","commitYear":"2011","diff":"\"@@ -1,13 +1,13 @@\\n public Options addOptionGroup(OptionGroup group) {\\r\\n-    Iterator options = group.getOptions().iterator();\\r\\n+    Iterator<Option> options = group.getOptions().iterator();\\r\\n     if (group.isRequired()) {\\r\\n         requiredOpts.add(group);\\r\\n     }\\r\\n     while (options.hasNext()) {\\r\\n-        Option option = (Option) options.next();\\r\\n+        Option option = options.next();\\r\\n         option.setRequired(false);\\r\\n         addOption(option);\\r\\n         optionGroups.put(option.getKey(), group);\\r\\n     }\\r\\n     return this;\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2008","diff":"\"\""},{"authorEmail":"roxspring@apache.org","authorName":"Robert James Oxspring","commitYear":"2004","diff":"\"\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -1,13 +1,13 @@\\n public Options addOptionGroup(OptionGroup group) {\\r\\n     Iterator options = group.getOptions().iterator();\\r\\n     if (group.isRequired()) {\\r\\n         requiredOpts.add(group);\\r\\n     }\\r\\n     while (options.hasNext()) {\\r\\n         Option option = (Option) options.next();\\r\\n         option.setRequired(false);\\r\\n         addOption(option);\\r\\n-        optionGroups.put(option.getOpt(), group);\\r\\n+        optionGroups.put(option.getKey(), group);\\r\\n     }\\r\\n     return this;\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -1,9 +1,13 @@\\n public Options addOptionGroup(OptionGroup group) {\\r\\n     Iterator options = group.getOptions().iterator();\\r\\n+    if (group.isRequired()) {\\r\\n+        requiredOpts.add(group);\\r\\n+    }\\r\\n     while (options.hasNext()) {\\r\\n         Option option = (Option) options.next();\\r\\n+        option.setRequired(false);\\r\\n         addOption(option);\\r\\n         optionGroups.put(option.getOpt(), group);\\r\\n     }\\r\\n     return this;\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -1,9 +1,9 @@\\n public Options addOptionGroup(OptionGroup group) {\\r\\n     Iterator options = group.getOptions().iterator();\\r\\n     while (options.hasNext()) {\\r\\n         Option option = (Option) options.next();\\r\\n         addOption(option);\\r\\n-        optionGroups.put(option, group);\\r\\n+        optionGroups.put(option.getOpt(), group);\\r\\n     }\\r\\n     return this;\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jstrachan@apache.org","authorName":"James Strachan","commitYear":"2002","diff":"\"@@ -0,0 +1,9 @@\\n+public Options addOptionGroup(OptionGroup group) {\\r\\n+    Iterator options = group.getOptions().iterator();\\r\\n+    while (options.hasNext()) {\\r\\n+        Option option = (Option) options.next();\\r\\n+        addOption(option);\\r\\n+        optionGroups.put(option, group);\\r\\n+    }\\r\\n+    return this;\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\main\java\org\apache\commons\cli\Options.java	addRequiredOption	org.apache.commons.cli.Options.addRequiredOption(String, String, boolean, String)	182	187	1	[{"authorEmail":"codyrank@gmail.com","authorName":"Cody Rank","commitYear":"2017","diff":"\"\""},{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,6 +1,6 @@\\n-public Options addRequiredOption(String opt, String longOpt, boolean hasArg, String description) {\\r\\n+public Options addRequiredOption(final String opt, final String longOpt, final boolean hasArg, final String description) {\\r\\n     final Option option = new Option(opt, longOpt, hasArg, description);\\r\\n     option.setRequired(true);\\r\\n     addOption(option);\\r\\n     return this;\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,6 +1,6 @@\\n public Options addRequiredOption(String opt, String longOpt, boolean hasArg, String description) {\\r\\n-    Option option = new Option(opt, longOpt, hasArg, description);\\r\\n+    final Option option = new Option(opt, longOpt, hasArg, description);\\r\\n     option.setRequired(true);\\r\\n     addOption(option);\\r\\n     return this;\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"britter@apache.org","authorName":"Benedikt Ritter","commitYear":"2016","diff":"\"\""},{"authorEmail":"britter@apache.org","authorName":"Benedikt Ritter","commitYear":"2016","diff":"\"\""},{"authorEmail":"britter@apache.org","authorName":"Benedikt Ritter","commitYear":"2016","diff":"\"@@ -0,0 +1,6 @@\\n+public Options addRequiredOption(String opt, String longOpt, boolean hasArg, String description) {\\r\\n+    Option option = new Option(opt, longOpt, hasArg, description);\\r\\n+    option.setRequired(true);\\r\\n+    addOption(option);\\r\\n+    return this;\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\main\java\org\apache\commons\cli\Options.java	getMatchingOptions	org.apache.commons.cli.Options.getMatchingOptions(String)	196	213	5	[{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"\""},{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"\""},{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2020","diff":"\"@@ -1,13 +1,13 @@\\n public List<String> getMatchingOptions(String opt) {\\r\\n     opt = Util.stripLeadingHyphens(opt);\\r\\n     final List<String> matchingOpts = new ArrayList<>();\\r\\n-    if (longOpts.keySet().contains(opt)) {\\r\\n+    if (longOpts.containsKey(opt)) {\\r\\n         return Collections.singletonList(opt);\\r\\n     }\\r\\n     for (final String longOpt : longOpts.keySet()) {\\r\\n         if (longOpt.startsWith(opt)) {\\r\\n             matchingOpts.add(longOpt);\\r\\n         }\\r\\n     }\\r\\n     return matchingOpts;\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2020","diff":"\"@@ -1,13 +1,13 @@\\n public List<String> getMatchingOptions(String opt) {\\r\\n     opt = Util.stripLeadingHyphens(opt);\\r\\n-    final List<String> matchingOpts = new ArrayList<String>();\\r\\n+    final List<String> matchingOpts = new ArrayList<>();\\r\\n     if (longOpts.keySet().contains(opt)) {\\r\\n         return Collections.singletonList(opt);\\r\\n     }\\r\\n     for (final String longOpt : longOpts.keySet()) {\\r\\n         if (longOpt.startsWith(opt)) {\\r\\n             matchingOpts.add(longOpt);\\r\\n         }\\r\\n     }\\r\\n     return matchingOpts;\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2019","diff":"\"\""},{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,13 +1,13 @@\\n public List<String> getMatchingOptions(String opt) {\\r\\n     opt = Util.stripLeadingHyphens(opt);\\r\\n-    List<String> matchingOpts = new ArrayList<String>();\\r\\n+    final List<String> matchingOpts = new ArrayList<String>();\\r\\n     if (longOpts.keySet().contains(opt)) {\\r\\n         return Collections.singletonList(opt);\\r\\n     }\\r\\n-    for (String longOpt : longOpts.keySet()) {\\r\\n+    for (final String longOpt : longOpts.keySet()) {\\r\\n         if (longOpt.startsWith(opt)) {\\r\\n             matchingOpts.add(longOpt);\\r\\n         }\\r\\n     }\\r\\n     return matchingOpts;\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"britter@apache.org","authorName":"Benedikt Ritter","commitYear":"2015","diff":"\"\""},{"authorEmail":"britter@apache.org","authorName":"Benedikt Ritter","commitYear":"2015","diff":"\"@@ -1,10 +1,13 @@\\n public List<String> getMatchingOptions(String opt) {\\r\\n     opt = Util.stripLeadingHyphens(opt);\\r\\n     List<String> matchingOpts = new ArrayList<String>();\\r\\n+    if (longOpts.keySet().contains(opt)) {\\r\\n+        return Collections.singletonList(opt);\\r\\n+    }\\r\\n     for (String longOpt : longOpts.keySet()) {\\r\\n         if (longOpt.startsWith(opt)) {\\r\\n             matchingOpts.add(longOpt);\\r\\n         }\\r\\n     }\\r\\n     return matchingOpts;\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2011","diff":"\"\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2011","diff":"\"@@ -1,12 +1,10 @@\\n-public List getMatchingOptions(String opt) {\\r\\n+public List<String> getMatchingOptions(String opt) {\\r\\n     opt = Util.stripLeadingHyphens(opt);\\r\\n-    List matchingOpts = new ArrayList();\\r\\n-    Iterator it = longOpts.keySet().iterator();\\r\\n-    while (it.hasNext()) {\\r\\n-        String longOpt = (String) it.next();\\r\\n+    List<String> matchingOpts = new ArrayList<String>();\\r\\n+    for (String longOpt : longOpts.keySet()) {\\r\\n         if (longOpt.startsWith(opt)) {\\r\\n             matchingOpts.add(longOpt);\\r\\n         }\\r\\n     }\\r\\n     return matchingOpts;\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2009","diff":"\"@@ -0,0 +1,12 @@\\n+public List getMatchingOptions(String opt) {\\r\\n+    opt = Util.stripLeadingHyphens(opt);\\r\\n+    List matchingOpts = new ArrayList();\\r\\n+    Iterator it = longOpts.keySet().iterator();\\r\\n+    while (it.hasNext()) {\\r\\n+        String longOpt = (String) it.next();\\r\\n+        if (longOpt.startsWith(opt)) {\\r\\n+            matchingOpts.add(longOpt);\\r\\n+        }\\r\\n+    }\\r\\n+    return matchingOpts;\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\main\java\org\apache\commons\cli\Options.java	getOption	org.apache.commons.cli.Options.getOption(String)	225	230	2	[{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2022","diff":"\"@@ -1,7 +1,5 @@\\n public Option getOption(String opt) {\\r\\n     opt = Util.stripLeadingHyphens(opt);\\r\\n-    if (shortOpts.containsKey(opt)) {\\r\\n-        return shortOpts.get(opt);\\r\\n-    }\\r\\n-    return longOpts.get(opt);\\r\\n+    final Option option = shortOpts.get(opt);\\r\\n+    return option != null ? option : longOpts.get(opt);\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"\""},{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"\""},{"authorEmail":"britter@apache.org","authorName":"Benedikt Ritter","commitYear":"2016","diff":"\"\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2011","diff":"\"@@ -1,7 +1,7 @@\\n public Option getOption(String opt) {\\r\\n     opt = Util.stripLeadingHyphens(opt);\\r\\n     if (shortOpts.containsKey(opt)) {\\r\\n-        return (Option) shortOpts.get(opt);\\r\\n+        return shortOpts.get(opt);\\r\\n     }\\r\\n-    return (Option) longOpts.get(opt);\\r\\n+    return longOpts.get(opt);\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2008","diff":"\"\""},{"authorEmail":"roxspring@apache.org","authorName":"Robert James Oxspring","commitYear":"2004","diff":"\"\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -1,11 +1,7 @@\\n public Option getOption(String opt) {\\r\\n-    Option option = null;\\r\\n-    if (opt.length() == 1) {\\r\\n-        option = (Option) shortOpts.get(\\\"-\\\" + opt);\\r\\n-    } else if (opt.startsWith(\\\"--\\\")) {\\r\\n-        option = (Option) longOpts.get(opt);\\r\\n-    } else {\\r\\n-        option = (Option) shortOpts.get(opt);\\r\\n+    opt = Util.stripLeadingHyphens(opt);\\r\\n+    if (shortOpts.containsKey(opt)) {\\r\\n+        return (Option) shortOpts.get(opt);\\r\\n     }\\r\\n-    return (option == null) ? null : (Option) option.clone();\\r\\n+    return (Option) longOpts.get(opt);\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -1,9 +1,11 @@\\n public Option getOption(String opt) {\\r\\n+    Option option = null;\\r\\n     if (opt.length() == 1) {\\r\\n-        return (Option) shortOpts.get(\\\"-\\\" + opt);\\r\\n+        option = (Option) shortOpts.get(\\\"-\\\" + opt);\\r\\n     } else if (opt.startsWith(\\\"--\\\")) {\\r\\n-        return (Option) longOpts.get(opt);\\r\\n+        option = (Option) longOpts.get(opt);\\r\\n     } else {\\r\\n-        return (Option) shortOpts.get(opt);\\r\\n+        option = (Option) shortOpts.get(opt);\\r\\n     }\\r\\n+    return (option == null) ? null : (Option) option.clone();\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -1,6 +1,9 @@\\n public Option getOption(String opt) {\\r\\n-    if (opt.startsWith(\\\"--\\\")) {\\r\\n+    if (opt.length() == 1) {\\r\\n+        return (Option) shortOpts.get(\\\"-\\\" + opt);\\r\\n+    } else if (opt.startsWith(\\\"--\\\")) {\\r\\n         return (Option) longOpts.get(opt);\\r\\n+    } else {\\r\\n+        return (Option) shortOpts.get(opt);\\r\\n     }\\r\\n-    return (Option) shortOpts.get(\\\"-\\\" + opt);\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -1,3 +1,6 @@\\n-public Option getOption(char opt) {\\r\\n+public Option getOption(String opt) {\\r\\n+    if (opt.startsWith(\\\"--\\\")) {\\r\\n+        return (Option) longOpts.get(opt);\\r\\n+    }\\r\\n     return (Option) shortOpts.get(\\\"-\\\" + opt);\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jstrachan@apache.org","authorName":"James Strachan","commitYear":"2002","diff":"\"@@ -0,0 +1,3 @@\\n+public Option getOption(char opt) {\\r\\n+    return (Option) shortOpts.get(\\\"-\\\" + opt);\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\main\java\org\apache\commons\cli\Options.java	getOptionGroup	org.apache.commons.cli.Options.getOptionGroup(Option)	238	240	1	[{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"\""},{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"\""},{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,3 +1,3 @@\\n-public OptionGroup getOptionGroup(Option opt) {\\r\\n+public OptionGroup getOptionGroup(final Option opt) {\\r\\n     return optionGroups.get(opt.getKey());\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"britter@apache.org","authorName":"Benedikt Ritter","commitYear":"2016","diff":"\"\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2011","diff":"\"@@ -1,3 +1,3 @@\\n public OptionGroup getOptionGroup(Option opt) {\\r\\n-    return (OptionGroup) optionGroups.get(opt.getKey());\\r\\n+    return optionGroups.get(opt.getKey());\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2008","diff":"\"\""},{"authorEmail":"roxspring@apache.org","authorName":"Robert James Oxspring","commitYear":"2004","diff":"\"\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -1,3 +1,3 @@\\n public OptionGroup getOptionGroup(Option opt) {\\r\\n-    return (OptionGroup) optionGroups.get(opt.getOpt());\\r\\n+    return (OptionGroup) optionGroups.get(opt.getKey());\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -1,3 +1,3 @@\\n public OptionGroup getOptionGroup(Option opt) {\\r\\n-    return (OptionGroup) optionGroups.get(opt);\\r\\n+    return (OptionGroup) optionGroups.get(opt.getOpt());\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -0,0 +1,3 @@\\n+public OptionGroup getOptionGroup(Option opt) {\\r\\n+    return (OptionGroup) optionGroups.get(opt);\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\main\java\org\apache\commons\cli\Options.java	getOptionGroups	org.apache.commons.cli.Options.getOptionGroups()	247	249	1	[{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"\""},{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2020","diff":"\"@@ -1,3 +1,3 @@\\n Collection<OptionGroup> getOptionGroups() {\\r\\n-    return new HashSet<OptionGroup>(optionGroups.values());\\r\\n+    return new HashSet<>(optionGroups.values());\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2011","diff":"\"@@ -1,3 +1,3 @@\\n-Collection getOptionGroups() {\\r\\n-    return new HashSet(optionGroups.values());\\r\\n+Collection<OptionGroup> getOptionGroups() {\\r\\n+    return new HashSet<OptionGroup>(optionGroups.values());\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2008","diff":"\"\""},{"authorEmail":"roxspring@apache.org","authorName":"Robert James Oxspring","commitYear":"2004","diff":"\"@@ -0,0 +1,3 @@\\n+Collection getOptionGroups() {\\r\\n+    return new HashSet(optionGroups.values());\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\main\java\org\apache\commons\cli\Options.java	getOptions	org.apache.commons.cli.Options.getOptions()	256	258	1	[{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2011","diff":"\"@@ -1,3 +1,3 @@\\n-public Collection getOptions() {\\r\\n+public Collection<Option> getOptions() {\\r\\n     return Collections.unmodifiableCollection(helpOptions());\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"roxspring@apache.org","authorName":"Robert James Oxspring","commitYear":"2004","diff":"\"\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -1,11 +1,3 @@\\n public Collection getOptions() {\\r\\n-    List opts = new ArrayList(shortOpts.values());\\r\\n-    Iterator iter = longOpts.values().iterator();\\r\\n-    while (iter.hasNext()) {\\r\\n-        Object item = iter.next();\\r\\n-        if (!opts.contains(item)) {\\r\\n-            opts.add(item);\\r\\n-        }\\r\\n-    }\\r\\n-    return Collections.unmodifiableCollection(opts);\\r\\n+    return Collections.unmodifiableCollection(helpOptions());\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -1,3 +1,11 @@\\n public Collection getOptions() {\\r\\n-    return Collections.unmodifiableCollection(shortOpts.values());\\r\\n+    List opts = new ArrayList(shortOpts.values());\\r\\n+    Iterator iter = longOpts.values().iterator();\\r\\n+    while (iter.hasNext()) {\\r\\n+        Object item = iter.next();\\r\\n+        if (!opts.contains(item)) {\\r\\n+            opts.add(item);\\r\\n+        }\\r\\n+    }\\r\\n+    return Collections.unmodifiableCollection(opts);\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -1,3 +1,3 @@\\n-public List getOptions() {\\r\\n-    return Collections.unmodifiableList(options);\\r\\n+public Collection getOptions() {\\r\\n+    return Collections.unmodifiableCollection(shortOpts.values());\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jstrachan@apache.org","authorName":"James Strachan","commitYear":"2002","diff":"\"@@ -0,0 +1,3 @@\\n+public List getOptions() {\\r\\n+    return Collections.unmodifiableList(options);\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\main\java\org\apache\commons\cli\Options.java	getRequiredOptions	org.apache.commons.cli.Options.getRequiredOptions()	265	267	1	[{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"\""},{"authorEmail":"tn@apache.org","authorName":"Thomas Neidhart","commitYear":"2013","diff":"\"@@ -1,3 +1,3 @@\\n public List getRequiredOptions() {\\r\\n-    return requiredOpts;\\r\\n+    return Collections.unmodifiableList(requiredOpts);\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2008","diff":"\"\""},{"authorEmail":"roxspring@apache.org","authorName":"Robert James Oxspring","commitYear":"2004","diff":"\"\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -1,3 +1,3 @@\\n-public Map getRequiredOptions() {\\r\\n+public List getRequiredOptions() {\\r\\n     return requiredOpts;\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -1,3 +1,3 @@\\n-public Collection getRequiredOptions() {\\r\\n-    return requiredOpts.values();\\r\\n+public Map getRequiredOptions() {\\r\\n+    return requiredOpts;\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -0,0 +1,3 @@\\n+public Collection getRequiredOptions() {\\r\\n+    return requiredOpts.values();\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\main\java\org\apache\commons\cli\Options.java	hasLongOption	org.apache.commons.cli.Options.hasLongOption(String)	276	280	1	[{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2009","diff":"\"@@ -0,0 +1,4 @@\\n+public boolean hasLongOption(String opt) {\\r\\n+    opt = Util.stripLeadingHyphens(opt);\\r\\n+    return longOpts.containsKey(opt);\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\main\java\org\apache\commons\cli\Options.java	hasOption	org.apache.commons.cli.Options.hasOption(String)	288	292	2	[{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2009","diff":"\"\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2008","diff":"\"\""},{"authorEmail":"roxspring@apache.org","authorName":"Robert James Oxspring","commitYear":"2004","diff":"\"\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -1,9 +1,4 @@\\n public boolean hasOption(String opt) {\\r\\n-    if (opt.length() == 1) {\\r\\n-        return shortOpts.containsKey(\\\"-\\\" + opt);\\r\\n-    } else if (opt.startsWith(\\\"--\\\")) {\\r\\n-        return longOpts.containsKey(opt);\\r\\n-    } else {\\r\\n-        return shortOpts.containsKey(opt);\\r\\n-    }\\r\\n+    opt = Util.stripLeadingHyphens(opt);\\r\\n+    return shortOpts.containsKey(opt) || longOpts.containsKey(opt);\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -1,9 +1,9 @@\\n-boolean hasOption(String opt) {\\r\\n+public boolean hasOption(String opt) {\\r\\n     if (opt.length() == 1) {\\r\\n         return shortOpts.containsKey(\\\"-\\\" + opt);\\r\\n     } else if (opt.startsWith(\\\"--\\\")) {\\r\\n         return longOpts.containsKey(opt);\\r\\n     } else {\\r\\n         return shortOpts.containsKey(opt);\\r\\n     }\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -0,0 +1,9 @@\\n+boolean hasOption(String opt) {\\r\\n+    if (opt.length() == 1) {\\r\\n+        return shortOpts.containsKey(\\\"-\\\" + opt);\\r\\n+    } else if (opt.startsWith(\\\"--\\\")) {\\r\\n+        return longOpts.containsKey(opt);\\r\\n+    } else {\\r\\n+        return shortOpts.containsKey(opt);\\r\\n+    }\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\main\java\org\apache\commons\cli\Options.java	hasShortOption	org.apache.commons.cli.Options.hasShortOption(String)	301	305	1	[{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2009","diff":"\"@@ -0,0 +1,4 @@\\n+public boolean hasShortOption(String opt) {\\r\\n+    opt = Util.stripLeadingHyphens(opt);\\r\\n+    return shortOpts.containsKey(opt);\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\main\java\org\apache\commons\cli\Options.java	helpOptions	org.apache.commons.cli.Options.helpOptions()	312	314	1	[{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2020","diff":"\"@@ -1,3 +1,3 @@\\n List<Option> helpOptions() {\\r\\n-    return new ArrayList<Option>(shortOpts.values());\\r\\n+    return new ArrayList<>(shortOpts.values());\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2011","diff":"\"@@ -1,3 +1,3 @@\\n-List helpOptions() {\\r\\n-    return new ArrayList(shortOpts.values());\\r\\n+List<Option> helpOptions() {\\r\\n+    return new ArrayList<Option>(shortOpts.values());\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2008","diff":"\"@@ -1,11 +1,3 @@\\n List helpOptions() {\\r\\n-    List opts = new ArrayList(shortOpts.values());\\r\\n-    Iterator iter = longOpts.values().iterator();\\r\\n-    while (iter.hasNext()) {\\r\\n-        Object item = iter.next();\\r\\n-        if (!opts.contains(item)) {\\r\\n-            opts.add(item);\\r\\n-        }\\r\\n-    }\\r\\n-    return new ArrayList(opts);\\r\\n+    return new ArrayList(shortOpts.values());\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"roxspring@apache.org","authorName":"Robert James Oxspring","commitYear":"2004","diff":"\"\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -1,3 +1,11 @@\\n List helpOptions() {\\r\\n-    return new ArrayList(shortOpts.values());\\r\\n+    List opts = new ArrayList(shortOpts.values());\\r\\n+    Iterator iter = longOpts.values().iterator();\\r\\n+    while (iter.hasNext()) {\\r\\n+        Object item = iter.next();\\r\\n+        if (!opts.contains(item)) {\\r\\n+            opts.add(item);\\r\\n+        }\\r\\n+    }\\r\\n+    return new ArrayList(opts);\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -0,0 +1,3 @@\\n+List helpOptions() {\\r\\n+    return new ArrayList(shortOpts.values());\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\main\java\org\apache\commons\cli\Options.java	toString	org.apache.commons.cli.Options.toString()	322	332	1	[{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,10 +1,10 @@\\n @Override\\r\\n public String toString() {\\r\\n-    StringBuilder buf = new StringBuilder();\\r\\n+    final StringBuilder buf = new StringBuilder();\\r\\n     buf.append(\\\"[ Options: [ short \\\");\\r\\n     buf.append(shortOpts.toString());\\r\\n     buf.append(\\\" ] [ long \\\");\\r\\n     buf.append(longOpts);\\r\\n     buf.append(\\\" ]\\\");\\r\\n     return buf.toString();\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"sebb@apache.org","authorName":"Sebastian Bazley","commitYear":"2013","diff":"\"@@ -1,9 +1,10 @@\\n+@Override\\r\\n public String toString() {\\r\\n     StringBuilder buf = new StringBuilder();\\r\\n     buf.append(\\\"[ Options: [ short \\\");\\r\\n     buf.append(shortOpts.toString());\\r\\n     buf.append(\\\" ] [ long \\\");\\r\\n     buf.append(longOpts);\\r\\n     buf.append(\\\" ]\\\");\\r\\n     return buf.toString();\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2011","diff":"\"@@ -1,9 +1,9 @@\\n public String toString() {\\r\\n-    StringBuffer buf = new StringBuffer();\\r\\n+    StringBuilder buf = new StringBuilder();\\r\\n     buf.append(\\\"[ Options: [ short \\\");\\r\\n     buf.append(shortOpts.toString());\\r\\n     buf.append(\\\" ] [ long \\\");\\r\\n     buf.append(longOpts);\\r\\n     buf.append(\\\" ]\\\");\\r\\n     return buf.toString();\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"roxspring@apache.org","authorName":"Robert James Oxspring","commitYear":"2004","diff":"\"\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"\""},{"authorEmail":"jstrachan@apache.org","authorName":"James Strachan","commitYear":"2002","diff":"\"@@ -0,0 +1,9 @@\\n+public String toString() {\\r\\n+    StringBuffer buf = new StringBuffer();\\r\\n+    buf.append(\\\"[ Options: [ short \\\");\\r\\n+    buf.append(shortOpts.toString());\\r\\n+    buf.append(\\\" ] [ long \\\");\\r\\n+    buf.append(longOpts);\\r\\n+    buf.append(\\\" ]\\\");\\r\\n+    return buf.toString();\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\main\java\org\apache\commons\cli\OptionValidator.java	isValidChar	org.apache.commons.cli.OptionValidator.isValidChar(char)	32	34	1	[{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"\""},{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,3 +1,3 @@\\n-private static boolean isValidChar(char c) {\\r\\n+private static boolean isValidChar(final char c) {\\r\\n     return Character.isJavaIdentifierPart(c);\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2008","diff":"\"\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -1,3 +1,3 @@\\n-private boolean isValidChar(char c) {\\r\\n+private static boolean isValidChar(char c) {\\r\\n     return Character.isJavaIdentifierPart(c);\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -1,3 +1,3 @@\\n private boolean isValidChar(char c) {\\r\\n-    return Character.isLetter(c);\\r\\n+    return Character.isJavaIdentifierPart(c);\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -1,6 +1,3 @@\\n private boolean isValidChar(char c) {\\r\\n-    if (!(Character.isLetter(c))) {\\r\\n-        return false;\\r\\n-    }\\r\\n-    return true;\\r\\n+    return Character.isLetter(c);\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -0,0 +1,6 @@\\n+private boolean isValidChar(char c) {\\r\\n+    if (!(Character.isLetter(c))) {\\r\\n+        return false;\\r\\n+    }\\r\\n+    return true;\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\main\java\org\apache\commons\cli\OptionValidator.java	isValidOpt	org.apache.commons.cli.OptionValidator.isValidOpt(char)	42	44	3	[{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"\""},{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,3 +1,3 @@\\n-private static boolean isValidOpt(char c) {\\r\\n+private static boolean isValidOpt(final char c) {\\r\\n     return isValidChar(c) || c == '?' || c == '@';\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2010","diff":"\"@@ -1,3 +1,3 @@\\n private static boolean isValidOpt(char c) {\\r\\n-    return isValidChar(c) || c == ' ' || c == '?' || c == '@';\\r\\n+    return isValidChar(c) || c == '?' || c == '@';\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2008","diff":"\"@@ -1,3 +1,3 @@\\n private static boolean isValidOpt(char c) {\\r\\n-    return (isValidChar(c) || (c == ' ') || (c == '?') || c == '@');\\r\\n+    return isValidChar(c) || c == ' ' || c == '?' || c == '@';\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -1,3 +1,3 @@\\n private static boolean isValidOpt(char c) {\\r\\n-    return (isValidChar(c) || c == ' ' || c == '?' || c == '@');\\r\\n+    return (isValidChar(c) || (c == ' ') || (c == '?') || c == '@');\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -1,3 +1,3 @@\\n-private boolean isValidOpt(char c) {\\r\\n+private static boolean isValidOpt(char c) {\\r\\n     return (isValidChar(c) || c == ' ' || c == '?' || c == '@');\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -1,6 +1,3 @@\\n private boolean isValidOpt(char c) {\\r\\n-    if (!(isValidChar(c) || c == '?' || c == '@')) {\\r\\n-        return false;\\r\\n-    }\\r\\n-    return true;\\r\\n+    return (isValidChar(c) || c == ' ' || c == '?' || c == '@');\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -0,0 +1,6 @@\\n+private boolean isValidOpt(char c) {\\r\\n+    if (!(isValidChar(c) || c == '?' || c == '@')) {\\r\\n+        return false;\\r\\n+    }\\r\\n+    return true;\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\main\java\org\apache\commons\cli\OptionValidator.java	validate	org.apache.commons.cli.OptionValidator.validate(String)	60	82	10	[{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"@@ -1,18 +1,18 @@\\n static String validate(final String option) throws IllegalArgumentException {\\r\\n     if (option == null) {\\r\\n-        return option;\\r\\n+        return null;\\r\\n     }\\r\\n     if (option.length() == 1) {\\r\\n         final char ch = option.charAt(0);\\r\\n         if (!isValidOpt(ch)) {\\r\\n             throw new IllegalArgumentException(\\\"Illegal option name '\\\" + ch + \\\"'\\\");\\r\\n         }\\r\\n     } else {\\r\\n         for (final char ch : option.toCharArray()) {\\r\\n             if (!isValidChar(ch)) {\\r\\n                 throw new IllegalArgumentException(\\\"The option '\\\" + option + \\\"' contains an illegal \\\" + \\\"character : '\\\" + ch + \\\"'\\\");\\r\\n             }\\r\\n         }\\r\\n     }\\r\\n     return option;\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"@@ -1,17 +1,18 @@\\n-static void validateOption(final String opt) throws IllegalArgumentException {\\r\\n-    if (opt == null) {\\r\\n-        return;\\r\\n+static String validate(final String option) throws IllegalArgumentException {\\r\\n+    if (option == null) {\\r\\n+        return option;\\r\\n     }\\r\\n-    if (opt.length() == 1) {\\r\\n-        final char ch = opt.charAt(0);\\r\\n+    if (option.length() == 1) {\\r\\n+        final char ch = option.charAt(0);\\r\\n         if (!isValidOpt(ch)) {\\r\\n             throw new IllegalArgumentException(\\\"Illegal option name '\\\" + ch + \\\"'\\\");\\r\\n         }\\r\\n     } else {\\r\\n-        for (final char ch : opt.toCharArray()) {\\r\\n+        for (final char ch : option.toCharArray()) {\\r\\n             if (!isValidChar(ch)) {\\r\\n-                throw new IllegalArgumentException(\\\"The option '\\\" + opt + \\\"' contains an illegal \\\" + \\\"character : '\\\" + ch + \\\"'\\\");\\r\\n+                throw new IllegalArgumentException(\\\"The option '\\\" + option + \\\"' contains an illegal \\\" + \\\"character : '\\\" + ch + \\\"'\\\");\\r\\n             }\\r\\n         }\\r\\n     }\\r\\n+    return option;\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"\""},{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"\""},{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2019","diff":"\"\""},{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,17 +1,17 @@\\n-static void validateOption(String opt) throws IllegalArgumentException {\\r\\n+static void validateOption(final String opt) throws IllegalArgumentException {\\r\\n     if (opt == null) {\\r\\n         return;\\r\\n     }\\r\\n     if (opt.length() == 1) {\\r\\n         final char ch = opt.charAt(0);\\r\\n         if (!isValidOpt(ch)) {\\r\\n             throw new IllegalArgumentException(\\\"Illegal option name '\\\" + ch + \\\"'\\\");\\r\\n         }\\r\\n     } else {\\r\\n         for (final char ch : opt.toCharArray()) {\\r\\n             if (!isValidChar(ch)) {\\r\\n                 throw new IllegalArgumentException(\\\"The option '\\\" + opt + \\\"' contains an illegal \\\" + \\\"character : '\\\" + ch + \\\"'\\\");\\r\\n             }\\r\\n         }\\r\\n     }\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,17 +1,17 @@\\n static void validateOption(String opt) throws IllegalArgumentException {\\r\\n     if (opt == null) {\\r\\n         return;\\r\\n     }\\r\\n     if (opt.length() == 1) {\\r\\n-        char ch = opt.charAt(0);\\r\\n+        final char ch = opt.charAt(0);\\r\\n         if (!isValidOpt(ch)) {\\r\\n             throw new IllegalArgumentException(\\\"Illegal option name '\\\" + ch + \\\"'\\\");\\r\\n         }\\r\\n     } else {\\r\\n-        for (char ch : opt.toCharArray()) {\\r\\n+        for (final char ch : opt.toCharArray()) {\\r\\n             if (!isValidChar(ch)) {\\r\\n                 throw new IllegalArgumentException(\\\"The option '\\\" + opt + \\\"' contains an illegal \\\" + \\\"character : '\\\" + ch + \\\"'\\\");\\r\\n             }\\r\\n         }\\r\\n     }\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"tn@apache.org","authorName":"Thomas Neidhart","commitYear":"2013","diff":"\"\""},{"authorEmail":"tn@apache.org","authorName":"Thomas Neidhart","commitYear":"2013","diff":"\"\""},{"authorEmail":"tn@apache.org","authorName":"Thomas Neidhart","commitYear":"2013","diff":"\"@@ -1,17 +1,17 @@\\n static void validateOption(String opt) throws IllegalArgumentException {\\r\\n     if (opt == null) {\\r\\n         return;\\r\\n     }\\r\\n     if (opt.length() == 1) {\\r\\n         char ch = opt.charAt(0);\\r\\n         if (!isValidOpt(ch)) {\\r\\n             throw new IllegalArgumentException(\\\"Illegal option name '\\\" + ch + \\\"'\\\");\\r\\n         }\\r\\n     } else {\\r\\n         for (char ch : opt.toCharArray()) {\\r\\n             if (!isValidChar(ch)) {\\r\\n-                throw new IllegalArgumentException(\\\"The option '\\\" + opt + \\\"' contains an illegal character : '\\\" + ch + \\\"'\\\");\\r\\n+                throw new IllegalArgumentException(\\\"The option '\\\" + opt + \\\"' contains an illegal \\\" + \\\"character : '\\\" + ch + \\\"'\\\");\\r\\n             }\\r\\n         }\\r\\n     }\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2011","diff":"\"@@ -1,18 +1,17 @@\\n static void validateOption(String opt) throws IllegalArgumentException {\\r\\n     if (opt == null) {\\r\\n         return;\\r\\n     }\\r\\n     if (opt.length() == 1) {\\r\\n         char ch = opt.charAt(0);\\r\\n         if (!isValidOpt(ch)) {\\r\\n             throw new IllegalArgumentException(\\\"Illegal option name '\\\" + ch + \\\"'\\\");\\r\\n         }\\r\\n     } else {\\r\\n-        char[] chars = opt.toCharArray();\\r\\n-        for (int i = 0; i < chars.length; i++) {\\r\\n-            if (!isValidChar(chars[i])) {\\r\\n-                throw new IllegalArgumentException(\\\"The option '\\\" + opt + \\\"' contains an illegal character : '\\\" + chars[i] + \\\"'\\\");\\r\\n+        for (char ch : opt.toCharArray()) {\\r\\n+            if (!isValidChar(ch)) {\\r\\n+                throw new IllegalArgumentException(\\\"The option '\\\" + opt + \\\"' contains an illegal character : '\\\" + ch + \\\"'\\\");\\r\\n             }\\r\\n         }\\r\\n     }\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2010","diff":"\"@@ -1,17 +1,18 @@\\n static void validateOption(String opt) throws IllegalArgumentException {\\r\\n     if (opt == null) {\\r\\n         return;\\r\\n-    } else if (opt.length() == 1) {\\r\\n+    }\\r\\n+    if (opt.length() == 1) {\\r\\n         char ch = opt.charAt(0);\\r\\n         if (!isValidOpt(ch)) {\\r\\n-            throw new IllegalArgumentException(\\\"illegal option value '\\\" + ch + \\\"'\\\");\\r\\n+            throw new IllegalArgumentException(\\\"Illegal option name '\\\" + ch + \\\"'\\\");\\r\\n         }\\r\\n     } else {\\r\\n         char[] chars = opt.toCharArray();\\r\\n         for (int i = 0; i < chars.length; i++) {\\r\\n             if (!isValidChar(chars[i])) {\\r\\n-                throw new IllegalArgumentException(\\\"opt contains illegal character value '\\\" + chars[i] + \\\"'\\\");\\r\\n+                throw new IllegalArgumentException(\\\"The option '\\\" + opt + \\\"' contains an illegal character : '\\\" + chars[i] + \\\"'\\\");\\r\\n             }\\r\\n         }\\r\\n     }\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2008","diff":"\"\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2008","diff":"\"\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -1,18 +1,17 @@\\n-private void validateOption(String opt) throws IllegalArgumentException {\\r\\n+static void validateOption(String opt) throws IllegalArgumentException {\\r\\n     if (opt == null) {\\r\\n-        throw new IllegalArgumentException(\\\"opt is null\\\");\\r\\n+        return;\\r\\n     } else if (opt.length() == 1) {\\r\\n         char ch = opt.charAt(0);\\r\\n         if (!isValidOpt(ch)) {\\r\\n             throw new IllegalArgumentException(\\\"illegal option value '\\\" + ch + \\\"'\\\");\\r\\n         }\\r\\n-        id = ch;\\r\\n     } else {\\r\\n         char[] chars = opt.toCharArray();\\r\\n         for (int i = 0; i < chars.length; i++) {\\r\\n             if (!isValidChar(chars[i])) {\\r\\n                 throw new IllegalArgumentException(\\\"opt contains illegal character value '\\\" + chars[i] + \\\"'\\\");\\r\\n             }\\r\\n         }\\r\\n     }\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -1,17 +1,18 @@\\n private void validateOption(String opt) throws IllegalArgumentException {\\r\\n     if (opt == null) {\\r\\n         throw new IllegalArgumentException(\\\"opt is null\\\");\\r\\n     } else if (opt.length() == 1) {\\r\\n-        if (!isValidOpt(opt.charAt(0))) {\\r\\n-            throw new IllegalArgumentException(\\\"illegal option value '\\\" + opt.charAt(0) + \\\"'\\\");\\r\\n+        char ch = opt.charAt(0);\\r\\n+        if (!isValidOpt(ch)) {\\r\\n+            throw new IllegalArgumentException(\\\"illegal option value '\\\" + ch + \\\"'\\\");\\r\\n         }\\r\\n-        id = opt.charAt(0);\\r\\n+        id = ch;\\r\\n     } else {\\r\\n         char[] chars = opt.toCharArray();\\r\\n         for (int i = 0; i < chars.length; i++) {\\r\\n             if (!isValidChar(chars[i])) {\\r\\n                 throw new IllegalArgumentException(\\\"opt contains illegal character value '\\\" + chars[i] + \\\"'\\\");\\r\\n             }\\r\\n         }\\r\\n     }\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -1,16 +1,17 @@\\n private void validateOption(String opt) throws IllegalArgumentException {\\r\\n     if (opt == null) {\\r\\n         throw new IllegalArgumentException(\\\"opt is null\\\");\\r\\n     } else if (opt.length() == 1) {\\r\\n         if (!isValidOpt(opt.charAt(0))) {\\r\\n             throw new IllegalArgumentException(\\\"illegal option value '\\\" + opt.charAt(0) + \\\"'\\\");\\r\\n         }\\r\\n+        id = opt.charAt(0);\\r\\n     } else {\\r\\n         char[] chars = opt.toCharArray();\\r\\n         for (int i = 0; i < chars.length; i++) {\\r\\n             if (!isValidChar(chars[i])) {\\r\\n                 throw new IllegalArgumentException(\\\"opt contains illegal character value '\\\" + chars[i] + \\\"'\\\");\\r\\n             }\\r\\n         }\\r\\n     }\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -0,0 +1,16 @@\\n+private void validateOption(String opt) throws IllegalArgumentException {\\r\\n+    if (opt == null) {\\r\\n+        throw new IllegalArgumentException(\\\"opt is null\\\");\\r\\n+    } else if (opt.length() == 1) {\\r\\n+        if (!isValidOpt(opt.charAt(0))) {\\r\\n+            throw new IllegalArgumentException(\\\"illegal option value '\\\" + opt.charAt(0) + \\\"'\\\");\\r\\n+        }\\r\\n+    } else {\\r\\n+        char[] chars = opt.toCharArray();\\r\\n+        for (int i = 0; i < chars.length; i++) {\\r\\n+            if (!isValidChar(chars[i])) {\\r\\n+                throw new IllegalArgumentException(\\\"opt contains illegal character value '\\\" + chars[i] + \\\"'\\\");\\r\\n+            }\\r\\n+        }\\r\\n+    }\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\main\java\org\apache\commons\cli\Parser.java	checkRequiredOptions	org.apache.commons.cli.Parser.checkRequiredOptions()	48	53	3	[{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"\""},{"authorEmail":"tn@apache.org","authorName":"Thomas Neidhart","commitYear":"2013","diff":"\"\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2012","diff":"\"\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2008","diff":"\"@@ -1,13 +1,5 @@\\n protected void checkRequiredOptions() throws MissingOptionException {\\r\\n-    if (getRequiredOptions().size() > 0) {\\r\\n-        Iterator iter = getRequiredOptions().iterator();\\r\\n-        StringBuffer buff = new StringBuffer(\\\"Missing required option\\\");\\r\\n-        buff.append(getRequiredOptions().size() == 1 ? \\\"\\\" : \\\"s\\\");\\r\\n-        buff.append(\\\": \\\");\\r\\n-        while (iter.hasNext()) {\\r\\n-            buff.append(iter.next());\\r\\n-            buff.append(\\\", \\\");\\r\\n-        }\\r\\n-        throw new MissingOptionException(buff.substring(0, buff.length() - 2));\\r\\n+    if (!getRequiredOptions().isEmpty()) {\\r\\n+        throw new MissingOptionException(getRequiredOptions());\\r\\n     }\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"bayard@apache.org","authorName":"Henri Yandell","commitYear":"2008","diff":"\"@@ -1,12 +1,13 @@\\n protected void checkRequiredOptions() throws MissingOptionException {\\r\\n     if (getRequiredOptions().size() > 0) {\\r\\n         Iterator iter = getRequiredOptions().iterator();\\r\\n         StringBuffer buff = new StringBuffer(\\\"Missing required option\\\");\\r\\n         buff.append(getRequiredOptions().size() == 1 ? \\\"\\\" : \\\"s\\\");\\r\\n         buff.append(\\\": \\\");\\r\\n         while (iter.hasNext()) {\\r\\n             buff.append(iter.next());\\r\\n+            buff.append(\\\", \\\");\\r\\n         }\\r\\n-        throw new MissingOptionException(buff.toString());\\r\\n+        throw new MissingOptionException(buff.substring(0, buff.length() - 2));\\r\\n     }\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"bayard@apache.org","authorName":"Henri Yandell","commitYear":"2008","diff":"\"@@ -1,12 +1,12 @@\\n-private void checkRequiredOptions() throws MissingOptionException {\\r\\n-    if (requiredOptions.size() > 0) {\\r\\n-        Iterator iter = requiredOptions.iterator();\\r\\n+protected void checkRequiredOptions() throws MissingOptionException {\\r\\n+    if (getRequiredOptions().size() > 0) {\\r\\n+        Iterator iter = getRequiredOptions().iterator();\\r\\n         StringBuffer buff = new StringBuffer(\\\"Missing required option\\\");\\r\\n-        buff.append(requiredOptions.size() == 1 ? \\\"\\\" : \\\"s\\\");\\r\\n+        buff.append(getRequiredOptions().size() == 1 ? \\\"\\\" : \\\"s\\\");\\r\\n         buff.append(\\\": \\\");\\r\\n         while (iter.hasNext()) {\\r\\n             buff.append(iter.next());\\r\\n         }\\r\\n         throw new MissingOptionException(buff.toString());\\r\\n     }\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"bayard@apache.org","authorName":"Henri Yandell","commitYear":"2007","diff":"\"@@ -1,10 +1,12 @@\\n private void checkRequiredOptions() throws MissingOptionException {\\r\\n     if (requiredOptions.size() > 0) {\\r\\n         Iterator iter = requiredOptions.iterator();\\r\\n-        StringBuffer buff = new StringBuffer();\\r\\n+        StringBuffer buff = new StringBuffer(\\\"Missing required option\\\");\\r\\n+        buff.append(requiredOptions.size() == 1 ? \\\"\\\" : \\\"s\\\");\\r\\n+        buff.append(\\\": \\\");\\r\\n         while (iter.hasNext()) {\\r\\n             buff.append(iter.next());\\r\\n         }\\r\\n         throw new MissingOptionException(buff.toString());\\r\\n     }\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -1,14 +1,10 @@\\n-private void checkRequiredOptions() throws ParseException {\\r\\n+private void checkRequiredOptions() throws MissingOptionException {\\r\\n     if (requiredOptions.size() > 0) {\\r\\n-        Iterator iter = requiredOptions.values().iterator();\\r\\n+        Iterator iter = requiredOptions.iterator();\\r\\n         StringBuffer buff = new StringBuffer();\\r\\n         while (iter.hasNext()) {\\r\\n-            Option missing = (Option) iter.next();\\r\\n-            buff.append(\\\"-\\\");\\r\\n-            buff.append(missing.getOpt());\\r\\n-            buff.append(\\\" \\\");\\r\\n-            buff.append(missing.getDescription());\\r\\n+            buff.append(iter.next());\\r\\n         }\\r\\n         throw new MissingOptionException(buff.toString());\\r\\n     }\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -1,14 +1,14 @@\\n private void checkRequiredOptions() throws ParseException {\\r\\n     if (requiredOptions.size() > 0) {\\r\\n-        Iterator iter = requiredOptions.iterator();\\r\\n+        Iterator iter = requiredOptions.values().iterator();\\r\\n         StringBuffer buff = new StringBuffer();\\r\\n         while (iter.hasNext()) {\\r\\n             Option missing = (Option) iter.next();\\r\\n             buff.append(\\\"-\\\");\\r\\n             buff.append(missing.getOpt());\\r\\n             buff.append(\\\" \\\");\\r\\n             buff.append(missing.getDescription());\\r\\n         }\\r\\n         throw new MissingOptionException(buff.toString());\\r\\n     }\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -1,15 +1,14 @@\\n-private void checkRequiredOptions() throws MissingOptionException {\\r\\n-    if (requiredOpts.size() > 0) {\\r\\n-        Set optKeys = requiredOpts.keySet();\\r\\n-        Iterator iter = optKeys.iterator();\\r\\n+private void checkRequiredOptions() throws ParseException {\\r\\n+    if (requiredOptions.size() > 0) {\\r\\n+        Iterator iter = requiredOptions.iterator();\\r\\n         StringBuffer buff = new StringBuffer();\\r\\n         while (iter.hasNext()) {\\r\\n-            Option missing = (Option) requiredOpts.get(iter.next());\\r\\n+            Option missing = (Option) iter.next();\\r\\n             buff.append(\\\"-\\\");\\r\\n             buff.append(missing.getOpt());\\r\\n             buff.append(\\\" \\\");\\r\\n             buff.append(missing.getDescription());\\r\\n         }\\r\\n         throw new MissingOptionException(buff.toString());\\r\\n     }\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jstrachan@apache.org","authorName":"James Strachan","commitYear":"2002","diff":"\"@@ -0,0 +1,15 @@\\n+private void checkRequiredOptions() throws MissingOptionException {\\r\\n+    if (requiredOpts.size() > 0) {\\r\\n+        Set optKeys = requiredOpts.keySet();\\r\\n+        Iterator iter = optKeys.iterator();\\r\\n+        StringBuffer buff = new StringBuffer();\\r\\n+        while (iter.hasNext()) {\\r\\n+            Option missing = (Option) requiredOpts.get(iter.next());\\r\\n+            buff.append(\\\"-\\\");\\r\\n+            buff.append(missing.getOpt());\\r\\n+            buff.append(\\\" \\\");\\r\\n+            buff.append(missing.getDescription());\\r\\n+        }\\r\\n+        throw new MissingOptionException(buff.toString());\\r\\n+    }\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\main\java\org\apache\commons\cli\Parser.java	flatten	org.apache.commons.cli.Parser.flatten(Options, String[], boolean)	64	64	1	[]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\main\java\org\apache\commons\cli\Parser.java	getOptions	org.apache.commons.cli.Parser.getOptions()	71	73	1	[{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2023","diff":"\"\""},{"authorEmail":"bayard@apache.org","authorName":"Henri Yandell","commitYear":"2008","diff":"\"@@ -0,0 +1,3 @@\\n+protected Options getOptions() {\\r\\n+    return options;\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\main\java\org\apache\commons\cli\Parser.java	getRequiredOptions	org.apache.commons.cli.Parser.getRequiredOptions()	80	82	1	[{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2023","diff":"\"\""},{"authorEmail":"bayard@apache.org","authorName":"Henri Yandell","commitYear":"2008","diff":"\"@@ -0,0 +1,3 @@\\n+protected List getRequiredOptions() {\\r\\n+    return requiredOptions;\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\main\java\org\apache\commons\cli\Parser.java	parse	org.apache.commons.cli.Parser.parse(Options, String[])	93	95	1	[{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"\""},{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"\""},{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2020","diff":"\"@@ -1,3 +1,4 @@\\n+@Override\\r\\n public CommandLine parse(final Options options, final String[] arguments) throws ParseException {\\r\\n     return parse(options, arguments, null, false);\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,3 +1,3 @@\\n-public CommandLine parse(Options options, String[] arguments) throws ParseException {\\r\\n+public CommandLine parse(final Options options, final String[] arguments) throws ParseException {\\r\\n     return parse(options, arguments, null, false);\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"britter@apache.org","authorName":"Benedikt Ritter","commitYear":"2015","diff":"\"\""},{"authorEmail":"tn@apache.org","authorName":"Thomas Neidhart","commitYear":"2013","diff":"\"\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2008","diff":"\"\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -1,3 +1,3 @@\\n public CommandLine parse(Options options, String[] arguments) throws ParseException {\\r\\n-    return parse(options, arguments, false);\\r\\n+    return parse(options, arguments, null, false);\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -1,3 +1,3 @@\\n-public CommandLine parse(Options opts, String[] args) throws ParseException {\\r\\n-    return parse(opts, args, false);\\r\\n+public CommandLine parse(Options options, String[] arguments) throws ParseException {\\r\\n+    return parse(options, arguments, false);\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -1,3 +1,3 @@\\n-public CommandLine parse(Options options, String[] arguments) throws ParseException {\\r\\n-    return parse(options, arguments, false);\\r\\n+public CommandLine parse(Options opts, String[] args) throws ParseException {\\r\\n+    return parse(opts, args, false);\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -1,3 +1,3 @@\\n-public List parse(Options options, List arguments) {\\r\\n+public CommandLine parse(Options options, String[] arguments) throws ParseException {\\r\\n     return parse(options, arguments, false);\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -0,0 +1,3 @@\\n+public List parse(Options options, List arguments) {\\r\\n+    return parse(options, arguments, false);\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\main\java\org\apache\commons\cli\Parser.java	parse	org.apache.commons.cli.Parser.parse(Options, String[], boolean)	109	111	1	[{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"\""},{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"\""},{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2020","diff":"\"@@ -1,3 +1,4 @@\\n+@Override\\r\\n public CommandLine parse(final Options options, final String[] arguments, final boolean stopAtNonOption) throws ParseException {\\r\\n     return parse(options, arguments, null, stopAtNonOption);\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2019","diff":"\"\""},{"authorEmail":"britter@apache.org","authorName":"Benedikt Ritter","commitYear":"2019","diff":"\"\""},{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,3 +1,3 @@\\n-public CommandLine parse(Options options, String[] arguments, boolean stopAtNonOption) throws ParseException {\\r\\n+public CommandLine parse(final Options options, final String[] arguments, final boolean stopAtNonOption) throws ParseException {\\r\\n     return parse(options, arguments, null, stopAtNonOption);\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"tn@apache.org","authorName":"Thomas Neidhart","commitYear":"2013","diff":"\"\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2010","diff":"\"\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2008","diff":"\"\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -1,42 +1,3 @@\\n-public CommandLine parse(Options opts, String[] arguments, boolean stopAtNonOption) throws ParseException {\\r\\n-    options = opts;\\r\\n-    requiredOptions = options.getRequiredOptions();\\r\\n-    cmd = new CommandLine();\\r\\n-    boolean eatTheRest = false;\\r\\n-    List tokenList = Arrays.asList(flatten(opts, arguments, stopAtNonOption));\\r\\n-    ListIterator iterator = tokenList.listIterator();\\r\\n-    while (iterator.hasNext()) {\\r\\n-        String t = (String) iterator.next();\\r\\n-        if (\\\"--\\\".equals(t)) {\\r\\n-            eatTheRest = true;\\r\\n-        } else if (\\\"-\\\".equals(t)) {\\r\\n-            if (stopAtNonOption) {\\r\\n-                eatTheRest = true;\\r\\n-            } else {\\r\\n-                cmd.addArg(t);\\r\\n-            }\\r\\n-        } else if (t.startsWith(\\\"-\\\")) {\\r\\n-            if (stopAtNonOption && !options.hasOption(t)) {\\r\\n-                eatTheRest = true;\\r\\n-                cmd.addArg(t);\\r\\n-            } else {\\r\\n-                processOption(t, iterator);\\r\\n-            }\\r\\n-        } else {\\r\\n-            cmd.addArg(t);\\r\\n-            if (stopAtNonOption) {\\r\\n-                eatTheRest = true;\\r\\n-            }\\r\\n-        }\\r\\n-        if (eatTheRest) {\\r\\n-            while (iterator.hasNext()) {\\r\\n-                String str = (String) iterator.next();\\r\\n-                if (!\\\"--\\\".equals(str)) {\\r\\n-                    cmd.addArg(str);\\r\\n-                }\\r\\n-            }\\r\\n-        }\\r\\n-    }\\r\\n-    checkRequiredOptions();\\r\\n-    return cmd;\\r\\n+public CommandLine parse(Options options, String[] arguments, boolean stopAtNonOption) throws ParseException {\\r\\n+    return parse(options, arguments, null, stopAtNonOption);\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -1,43 +1,42 @@\\n-public CommandLine parse(Options opts, String[] args, boolean stopAtNonOption) throws ParseException {\\r\\n+public CommandLine parse(Options opts, String[] arguments, boolean stopAtNonOption) throws ParseException {\\r\\n     options = opts;\\r\\n     requiredOptions = options.getRequiredOptions();\\r\\n-    String[] tokens = flatten(opts, args, stopAtNonOption);\\r\\n-    List tokenList = Arrays.asList(tokens);\\r\\n-    ListIterator iterator = tokenList.listIterator();\\r\\n     cmd = new CommandLine();\\r\\n     boolean eatTheRest = false;\\r\\n+    List tokenList = Arrays.asList(flatten(opts, arguments, stopAtNonOption));\\r\\n+    ListIterator iterator = tokenList.listIterator();\\r\\n     while (iterator.hasNext()) {\\r\\n         String t = (String) iterator.next();\\r\\n         if (\\\"--\\\".equals(t)) {\\r\\n             eatTheRest = true;\\r\\n+        } else if (\\\"-\\\".equals(t)) {\\r\\n+            if (stopAtNonOption) {\\r\\n+                eatTheRest = true;\\r\\n+            } else {\\r\\n+                cmd.addArg(t);\\r\\n+            }\\r\\n         } else if (t.startsWith(\\\"-\\\")) {\\r\\n-            if (t.length() == 1) {\\r\\n-                if (stopAtNonOption) {\\r\\n-                    eatTheRest = true;\\r\\n-                } else {\\r\\n-                    cmd.addArg(t);\\r\\n-                }\\r\\n-            } else if (stopAtNonOption && !options.hasOption(t)) {\\r\\n+            if (stopAtNonOption && !options.hasOption(t)) {\\r\\n                 eatTheRest = true;\\r\\n                 cmd.addArg(t);\\r\\n             } else {\\r\\n                 processOption(t, iterator);\\r\\n             }\\r\\n         } else {\\r\\n             cmd.addArg(t);\\r\\n             if (stopAtNonOption) {\\r\\n                 eatTheRest = true;\\r\\n             }\\r\\n         }\\r\\n         if (eatTheRest) {\\r\\n             while (iterator.hasNext()) {\\r\\n                 String str = (String) iterator.next();\\r\\n                 if (!\\\"--\\\".equals(str)) {\\r\\n                     cmd.addArg(str);\\r\\n                 }\\r\\n             }\\r\\n         }\\r\\n     }\\r\\n     checkRequiredOptions();\\r\\n     return cmd;\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -1,37 +1,43 @@\\n public CommandLine parse(Options opts, String[] args, boolean stopAtNonOption) throws ParseException {\\r\\n     options = opts;\\r\\n     requiredOptions = options.getRequiredOptions();\\r\\n     String[] tokens = flatten(opts, args, stopAtNonOption);\\r\\n     List tokenList = Arrays.asList(tokens);\\r\\n     ListIterator iterator = tokenList.listIterator();\\r\\n     cmd = new CommandLine();\\r\\n     boolean eatTheRest = false;\\r\\n     while (iterator.hasNext()) {\\r\\n         String t = (String) iterator.next();\\r\\n         if (\\\"--\\\".equals(t)) {\\r\\n             eatTheRest = true;\\r\\n         } else if (t.startsWith(\\\"-\\\")) {\\r\\n             if (t.length() == 1) {\\r\\n                 if (stopAtNonOption) {\\r\\n                     eatTheRest = true;\\r\\n                 } else {\\r\\n                     cmd.addArg(t);\\r\\n                 }\\r\\n+            } else if (stopAtNonOption && !options.hasOption(t)) {\\r\\n+                eatTheRest = true;\\r\\n+                cmd.addArg(t);\\r\\n             } else {\\r\\n                 processOption(t, iterator);\\r\\n             }\\r\\n         } else {\\r\\n             cmd.addArg(t);\\r\\n             if (stopAtNonOption) {\\r\\n                 eatTheRest = true;\\r\\n             }\\r\\n         }\\r\\n         if (eatTheRest) {\\r\\n             while (iterator.hasNext()) {\\r\\n-                cmd.addArg((String) iterator.next());\\r\\n+                String str = (String) iterator.next();\\r\\n+                if (!\\\"--\\\".equals(str)) {\\r\\n+                    cmd.addArg(str);\\r\\n+                }\\r\\n             }\\r\\n         }\\r\\n     }\\r\\n     checkRequiredOptions();\\r\\n     return cmd;\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -1,38 +1,37 @@\\n-public CommandLine parse(Options opts, String[] arguments, boolean stopAtNonOption) throws ParseException {\\r\\n+public CommandLine parse(Options opts, String[] args, boolean stopAtNonOption) throws ParseException {\\r\\n     options = opts;\\r\\n-    cmd = new CommandLine();\\r\\n     requiredOptions = options.getRequiredOptions();\\r\\n-    ListIterator iter = Arrays.asList(arguments).listIterator();\\r\\n-    String token = null;\\r\\n+    String[] tokens = flatten(opts, args, stopAtNonOption);\\r\\n+    List tokenList = Arrays.asList(tokens);\\r\\n+    ListIterator iterator = tokenList.listIterator();\\r\\n+    cmd = new CommandLine();\\r\\n     boolean eatTheRest = false;\\r\\n-    while (iter.hasNext()) {\\r\\n-        token = (String) iter.next();\\r\\n-        if (token.equals(\\\"--\\\")) {\\r\\n+    while (iterator.hasNext()) {\\r\\n+        String t = (String) iterator.next();\\r\\n+        if (\\\"--\\\".equals(t)) {\\r\\n             eatTheRest = true;\\r\\n-        } else if (token.startsWith(\\\"--\\\")) {\\r\\n-            processOption(token, iter);\\r\\n-        } else if (token.startsWith(\\\"-\\\")) {\\r\\n-            if (token.length() == 1) {\\r\\n+        } else if (t.startsWith(\\\"-\\\")) {\\r\\n+            if (t.length() == 1) {\\r\\n                 if (stopAtNonOption) {\\r\\n                     eatTheRest = true;\\r\\n                 } else {\\r\\n-                    cmd.addArg(token);\\r\\n+                    cmd.addArg(t);\\r\\n                 }\\r\\n             } else {\\r\\n-                processOption(token, iter);\\r\\n+                processOption(t, iterator);\\r\\n             }\\r\\n         } else {\\r\\n-            cmd.addArg(token);\\r\\n+            cmd.addArg(t);\\r\\n             if (stopAtNonOption) {\\r\\n                 eatTheRest = true;\\r\\n             }\\r\\n         }\\r\\n         if (eatTheRest) {\\r\\n-            while (iter.hasNext()) {\\r\\n-                cmd.addArg((String) iter.next());\\r\\n+            while (iterator.hasNext()) {\\r\\n+                cmd.addArg((String) iterator.next());\\r\\n             }\\r\\n         }\\r\\n     }\\r\\n     checkRequiredOptions();\\r\\n     return cmd;\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -1,44 +1,38 @@\\n-public List parse(Options options, List arguments, boolean stopAtNonOption) {\\r\\n-    List args = new LinkedList();\\r\\n-    Iterator argIter = arguments.iterator();\\r\\n-    String eachArg = null;\\r\\n+public CommandLine parse(Options opts, String[] arguments, boolean stopAtNonOption) throws ParseException {\\r\\n+    options = opts;\\r\\n+    cmd = new CommandLine();\\r\\n+    requiredOptions = options.getRequiredOptions();\\r\\n+    ListIterator iter = Arrays.asList(arguments).listIterator();\\r\\n+    String token = null;\\r\\n     boolean eatTheRest = false;\\r\\n-    while (argIter.hasNext()) {\\r\\n-        eachArg = (String) argIter.next();\\r\\n-        if (eachArg.equals(\\\"--\\\")) {\\r\\n-            args.add(eachArg);\\r\\n+    while (iter.hasNext()) {\\r\\n+        token = (String) iter.next();\\r\\n+        if (token.equals(\\\"--\\\")) {\\r\\n             eatTheRest = true;\\r\\n-        } else if (eachArg.startsWith(\\\"--\\\")) {\\r\\n-            args.add(eachArg);\\r\\n-        } else if (eachArg.startsWith(\\\"-\\\")) {\\r\\n-            if (eachArg.length() == 1) {\\r\\n+        } else if (token.startsWith(\\\"--\\\")) {\\r\\n+            processOption(token, iter);\\r\\n+        } else if (token.startsWith(\\\"-\\\")) {\\r\\n+            if (token.length() == 1) {\\r\\n                 if (stopAtNonOption) {\\r\\n                     eatTheRest = true;\\r\\n                 } else {\\r\\n-                    args.add(eachArg);\\r\\n+                    cmd.addArg(token);\\r\\n                 }\\r\\n-            } else if (eachArg.length() == 2) {\\r\\n-                args.add(eachArg);\\r\\n             } else {\\r\\n-                String charOpt = eachArg.substring(1, 2);\\r\\n-                if (options.getOption(charOpt) != null && options.getOption(eachArg) == null) {\\r\\n-                    args.add(\\\"-\\\" + charOpt);\\r\\n-                    args.add(eachArg.substring(2, eachArg.length()));\\r\\n-                } else {\\r\\n-                    args.add(eachArg);\\r\\n-                }\\r\\n+                processOption(token, iter);\\r\\n             }\\r\\n         } else {\\r\\n-            args.add(eachArg);\\r\\n+            cmd.addArg(token);\\r\\n             if (stopAtNonOption) {\\r\\n                 eatTheRest = true;\\r\\n             }\\r\\n         }\\r\\n         if (eatTheRest) {\\r\\n-            while (argIter.hasNext()) {\\r\\n-                args.add(argIter.next());\\r\\n+            while (iter.hasNext()) {\\r\\n+                cmd.addArg((String) iter.next());\\r\\n             }\\r\\n         }\\r\\n     }\\r\\n-    return args;\\r\\n+    checkRequiredOptions();\\r\\n+    return cmd;\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -0,0 +1,44 @@\\n+public List parse(Options options, List arguments, boolean stopAtNonOption) {\\r\\n+    List args = new LinkedList();\\r\\n+    Iterator argIter = arguments.iterator();\\r\\n+    String eachArg = null;\\r\\n+    boolean eatTheRest = false;\\r\\n+    while (argIter.hasNext()) {\\r\\n+        eachArg = (String) argIter.next();\\r\\n+        if (eachArg.equals(\\\"--\\\")) {\\r\\n+            args.add(eachArg);\\r\\n+            eatTheRest = true;\\r\\n+        } else if (eachArg.startsWith(\\\"--\\\")) {\\r\\n+            args.add(eachArg);\\r\\n+        } else if (eachArg.startsWith(\\\"-\\\")) {\\r\\n+            if (eachArg.length() == 1) {\\r\\n+                if (stopAtNonOption) {\\r\\n+                    eatTheRest = true;\\r\\n+                } else {\\r\\n+                    args.add(eachArg);\\r\\n+                }\\r\\n+            } else if (eachArg.length() == 2) {\\r\\n+                args.add(eachArg);\\r\\n+            } else {\\r\\n+                String charOpt = eachArg.substring(1, 2);\\r\\n+                if (options.getOption(charOpt) != null && options.getOption(eachArg) == null) {\\r\\n+                    args.add(\\\"-\\\" + charOpt);\\r\\n+                    args.add(eachArg.substring(2, eachArg.length()));\\r\\n+                } else {\\r\\n+                    args.add(eachArg);\\r\\n+                }\\r\\n+            }\\r\\n+        } else {\\r\\n+            args.add(eachArg);\\r\\n+            if (stopAtNonOption) {\\r\\n+                eatTheRest = true;\\r\\n+            }\\r\\n+        }\\r\\n+        if (eatTheRest) {\\r\\n+            while (argIter.hasNext()) {\\r\\n+                args.add(argIter.next());\\r\\n+            }\\r\\n+        }\\r\\n+    }\\r\\n+    return args;\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\main\java\org\apache\commons\cli\Parser.java	parse	org.apache.commons.cli.Parser.parse(Options, String[], Properties)	124	126	1	[{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"\""},{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,3 +1,3 @@\\n-public CommandLine parse(Options options, String[] arguments, Properties properties) throws ParseException {\\r\\n+public CommandLine parse(final Options options, final String[] arguments, final Properties properties) throws ParseException {\\r\\n     return parse(options, arguments, properties, false);\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2008","diff":"\"\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2008","diff":"\"\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -1,42 +1,3 @@\\n-public CommandLine parse(Options opts, String[] arguments, boolean stopAtNonOption) throws ParseException {\\r\\n-    options = opts;\\r\\n-    requiredOptions = options.getRequiredOptions();\\r\\n-    cmd = new CommandLine();\\r\\n-    boolean eatTheRest = false;\\r\\n-    List tokenList = Arrays.asList(flatten(opts, arguments, stopAtNonOption));\\r\\n-    ListIterator iterator = tokenList.listIterator();\\r\\n-    while (iterator.hasNext()) {\\r\\n-        String t = (String) iterator.next();\\r\\n-        if (\\\"--\\\".equals(t)) {\\r\\n-            eatTheRest = true;\\r\\n-        } else if (\\\"-\\\".equals(t)) {\\r\\n-            if (stopAtNonOption) {\\r\\n-                eatTheRest = true;\\r\\n-            } else {\\r\\n-                cmd.addArg(t);\\r\\n-            }\\r\\n-        } else if (t.startsWith(\\\"-\\\")) {\\r\\n-            if (stopAtNonOption && !options.hasOption(t)) {\\r\\n-                eatTheRest = true;\\r\\n-                cmd.addArg(t);\\r\\n-            } else {\\r\\n-                processOption(t, iterator);\\r\\n-            }\\r\\n-        } else {\\r\\n-            cmd.addArg(t);\\r\\n-            if (stopAtNonOption) {\\r\\n-                eatTheRest = true;\\r\\n-            }\\r\\n-        }\\r\\n-        if (eatTheRest) {\\r\\n-            while (iterator.hasNext()) {\\r\\n-                String str = (String) iterator.next();\\r\\n-                if (!\\\"--\\\".equals(str)) {\\r\\n-                    cmd.addArg(str);\\r\\n-                }\\r\\n-            }\\r\\n-        }\\r\\n-    }\\r\\n-    checkRequiredOptions();\\r\\n-    return cmd;\\r\\n+public CommandLine parse(Options options, String[] arguments, Properties properties) throws ParseException {\\r\\n+    return parse(options, arguments, properties, false);\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -1,43 +1,42 @@\\n-public CommandLine parse(Options opts, String[] args, boolean stopAtNonOption) throws ParseException {\\r\\n+public CommandLine parse(Options opts, String[] arguments, boolean stopAtNonOption) throws ParseException {\\r\\n     options = opts;\\r\\n     requiredOptions = options.getRequiredOptions();\\r\\n-    String[] tokens = flatten(opts, args, stopAtNonOption);\\r\\n-    List tokenList = Arrays.asList(tokens);\\r\\n-    ListIterator iterator = tokenList.listIterator();\\r\\n     cmd = new CommandLine();\\r\\n     boolean eatTheRest = false;\\r\\n+    List tokenList = Arrays.asList(flatten(opts, arguments, stopAtNonOption));\\r\\n+    ListIterator iterator = tokenList.listIterator();\\r\\n     while (iterator.hasNext()) {\\r\\n         String t = (String) iterator.next();\\r\\n         if (\\\"--\\\".equals(t)) {\\r\\n             eatTheRest = true;\\r\\n+        } else if (\\\"-\\\".equals(t)) {\\r\\n+            if (stopAtNonOption) {\\r\\n+                eatTheRest = true;\\r\\n+            } else {\\r\\n+                cmd.addArg(t);\\r\\n+            }\\r\\n         } else if (t.startsWith(\\\"-\\\")) {\\r\\n-            if (t.length() == 1) {\\r\\n-                if (stopAtNonOption) {\\r\\n-                    eatTheRest = true;\\r\\n-                } else {\\r\\n-                    cmd.addArg(t);\\r\\n-                }\\r\\n-            } else if (stopAtNonOption && !options.hasOption(t)) {\\r\\n+            if (stopAtNonOption && !options.hasOption(t)) {\\r\\n                 eatTheRest = true;\\r\\n                 cmd.addArg(t);\\r\\n             } else {\\r\\n                 processOption(t, iterator);\\r\\n             }\\r\\n         } else {\\r\\n             cmd.addArg(t);\\r\\n             if (stopAtNonOption) {\\r\\n                 eatTheRest = true;\\r\\n             }\\r\\n         }\\r\\n         if (eatTheRest) {\\r\\n             while (iterator.hasNext()) {\\r\\n                 String str = (String) iterator.next();\\r\\n                 if (!\\\"--\\\".equals(str)) {\\r\\n                     cmd.addArg(str);\\r\\n                 }\\r\\n             }\\r\\n         }\\r\\n     }\\r\\n     checkRequiredOptions();\\r\\n     return cmd;\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -1,37 +1,43 @@\\n public CommandLine parse(Options opts, String[] args, boolean stopAtNonOption) throws ParseException {\\r\\n     options = opts;\\r\\n     requiredOptions = options.getRequiredOptions();\\r\\n     String[] tokens = flatten(opts, args, stopAtNonOption);\\r\\n     List tokenList = Arrays.asList(tokens);\\r\\n     ListIterator iterator = tokenList.listIterator();\\r\\n     cmd = new CommandLine();\\r\\n     boolean eatTheRest = false;\\r\\n     while (iterator.hasNext()) {\\r\\n         String t = (String) iterator.next();\\r\\n         if (\\\"--\\\".equals(t)) {\\r\\n             eatTheRest = true;\\r\\n         } else if (t.startsWith(\\\"-\\\")) {\\r\\n             if (t.length() == 1) {\\r\\n                 if (stopAtNonOption) {\\r\\n                     eatTheRest = true;\\r\\n                 } else {\\r\\n                     cmd.addArg(t);\\r\\n                 }\\r\\n+            } else if (stopAtNonOption && !options.hasOption(t)) {\\r\\n+                eatTheRest = true;\\r\\n+                cmd.addArg(t);\\r\\n             } else {\\r\\n                 processOption(t, iterator);\\r\\n             }\\r\\n         } else {\\r\\n             cmd.addArg(t);\\r\\n             if (stopAtNonOption) {\\r\\n                 eatTheRest = true;\\r\\n             }\\r\\n         }\\r\\n         if (eatTheRest) {\\r\\n             while (iterator.hasNext()) {\\r\\n-                cmd.addArg((String) iterator.next());\\r\\n+                String str = (String) iterator.next();\\r\\n+                if (!\\\"--\\\".equals(str)) {\\r\\n+                    cmd.addArg(str);\\r\\n+                }\\r\\n             }\\r\\n         }\\r\\n     }\\r\\n     checkRequiredOptions();\\r\\n     return cmd;\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -1,38 +1,37 @@\\n-public CommandLine parse(Options opts, String[] arguments, boolean stopAtNonOption) throws ParseException {\\r\\n+public CommandLine parse(Options opts, String[] args, boolean stopAtNonOption) throws ParseException {\\r\\n     options = opts;\\r\\n-    cmd = new CommandLine();\\r\\n     requiredOptions = options.getRequiredOptions();\\r\\n-    ListIterator iter = Arrays.asList(arguments).listIterator();\\r\\n-    String token = null;\\r\\n+    String[] tokens = flatten(opts, args, stopAtNonOption);\\r\\n+    List tokenList = Arrays.asList(tokens);\\r\\n+    ListIterator iterator = tokenList.listIterator();\\r\\n+    cmd = new CommandLine();\\r\\n     boolean eatTheRest = false;\\r\\n-    while (iter.hasNext()) {\\r\\n-        token = (String) iter.next();\\r\\n-        if (token.equals(\\\"--\\\")) {\\r\\n+    while (iterator.hasNext()) {\\r\\n+        String t = (String) iterator.next();\\r\\n+        if (\\\"--\\\".equals(t)) {\\r\\n             eatTheRest = true;\\r\\n-        } else if (token.startsWith(\\\"--\\\")) {\\r\\n-            processOption(token, iter);\\r\\n-        } else if (token.startsWith(\\\"-\\\")) {\\r\\n-            if (token.length() == 1) {\\r\\n+        } else if (t.startsWith(\\\"-\\\")) {\\r\\n+            if (t.length() == 1) {\\r\\n                 if (stopAtNonOption) {\\r\\n                     eatTheRest = true;\\r\\n                 } else {\\r\\n-                    cmd.addArg(token);\\r\\n+                    cmd.addArg(t);\\r\\n                 }\\r\\n             } else {\\r\\n-                processOption(token, iter);\\r\\n+                processOption(t, iterator);\\r\\n             }\\r\\n         } else {\\r\\n-            cmd.addArg(token);\\r\\n+            cmd.addArg(t);\\r\\n             if (stopAtNonOption) {\\r\\n                 eatTheRest = true;\\r\\n             }\\r\\n         }\\r\\n         if (eatTheRest) {\\r\\n-            while (iter.hasNext()) {\\r\\n-                cmd.addArg((String) iter.next());\\r\\n+            while (iterator.hasNext()) {\\r\\n+                cmd.addArg((String) iterator.next());\\r\\n             }\\r\\n         }\\r\\n     }\\r\\n     checkRequiredOptions();\\r\\n     return cmd;\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -1,44 +1,38 @@\\n-public List parse(Options options, List arguments, boolean stopAtNonOption) {\\r\\n-    List args = new LinkedList();\\r\\n-    Iterator argIter = arguments.iterator();\\r\\n-    String eachArg = null;\\r\\n+public CommandLine parse(Options opts, String[] arguments, boolean stopAtNonOption) throws ParseException {\\r\\n+    options = opts;\\r\\n+    cmd = new CommandLine();\\r\\n+    requiredOptions = options.getRequiredOptions();\\r\\n+    ListIterator iter = Arrays.asList(arguments).listIterator();\\r\\n+    String token = null;\\r\\n     boolean eatTheRest = false;\\r\\n-    while (argIter.hasNext()) {\\r\\n-        eachArg = (String) argIter.next();\\r\\n-        if (eachArg.equals(\\\"--\\\")) {\\r\\n-            args.add(eachArg);\\r\\n+    while (iter.hasNext()) {\\r\\n+        token = (String) iter.next();\\r\\n+        if (token.equals(\\\"--\\\")) {\\r\\n             eatTheRest = true;\\r\\n-        } else if (eachArg.startsWith(\\\"--\\\")) {\\r\\n-            args.add(eachArg);\\r\\n-        } else if (eachArg.startsWith(\\\"-\\\")) {\\r\\n-            if (eachArg.length() == 1) {\\r\\n+        } else if (token.startsWith(\\\"--\\\")) {\\r\\n+            processOption(token, iter);\\r\\n+        } else if (token.startsWith(\\\"-\\\")) {\\r\\n+            if (token.length() == 1) {\\r\\n                 if (stopAtNonOption) {\\r\\n                     eatTheRest = true;\\r\\n                 } else {\\r\\n-                    args.add(eachArg);\\r\\n+                    cmd.addArg(token);\\r\\n                 }\\r\\n-            } else if (eachArg.length() == 2) {\\r\\n-                args.add(eachArg);\\r\\n             } else {\\r\\n-                String charOpt = eachArg.substring(1, 2);\\r\\n-                if (options.getOption(charOpt) != null && options.getOption(eachArg) == null) {\\r\\n-                    args.add(\\\"-\\\" + charOpt);\\r\\n-                    args.add(eachArg.substring(2, eachArg.length()));\\r\\n-                } else {\\r\\n-                    args.add(eachArg);\\r\\n-                }\\r\\n+                processOption(token, iter);\\r\\n             }\\r\\n         } else {\\r\\n-            args.add(eachArg);\\r\\n+            cmd.addArg(token);\\r\\n             if (stopAtNonOption) {\\r\\n                 eatTheRest = true;\\r\\n             }\\r\\n         }\\r\\n         if (eatTheRest) {\\r\\n-            while (argIter.hasNext()) {\\r\\n-                args.add(argIter.next());\\r\\n+            while (iter.hasNext()) {\\r\\n+                cmd.addArg((String) iter.next());\\r\\n             }\\r\\n         }\\r\\n     }\\r\\n-    return args;\\r\\n+    checkRequiredOptions();\\r\\n+    return cmd;\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -0,0 +1,44 @@\\n+public List parse(Options options, List arguments, boolean stopAtNonOption) {\\r\\n+    List args = new LinkedList();\\r\\n+    Iterator argIter = arguments.iterator();\\r\\n+    String eachArg = null;\\r\\n+    boolean eatTheRest = false;\\r\\n+    while (argIter.hasNext()) {\\r\\n+        eachArg = (String) argIter.next();\\r\\n+        if (eachArg.equals(\\\"--\\\")) {\\r\\n+            args.add(eachArg);\\r\\n+            eatTheRest = true;\\r\\n+        } else if (eachArg.startsWith(\\\"--\\\")) {\\r\\n+            args.add(eachArg);\\r\\n+        } else if (eachArg.startsWith(\\\"-\\\")) {\\r\\n+            if (eachArg.length() == 1) {\\r\\n+                if (stopAtNonOption) {\\r\\n+                    eatTheRest = true;\\r\\n+                } else {\\r\\n+                    args.add(eachArg);\\r\\n+                }\\r\\n+            } else if (eachArg.length() == 2) {\\r\\n+                args.add(eachArg);\\r\\n+            } else {\\r\\n+                String charOpt = eachArg.substring(1, 2);\\r\\n+                if (options.getOption(charOpt) != null && options.getOption(eachArg) == null) {\\r\\n+                    args.add(\\\"-\\\" + charOpt);\\r\\n+                    args.add(eachArg.substring(2, eachArg.length()));\\r\\n+                } else {\\r\\n+                    args.add(eachArg);\\r\\n+                }\\r\\n+            }\\r\\n+        } else {\\r\\n+            args.add(eachArg);\\r\\n+            if (stopAtNonOption) {\\r\\n+                eatTheRest = true;\\r\\n+            }\\r\\n+        }\\r\\n+        if (eatTheRest) {\\r\\n+            while (argIter.hasNext()) {\\r\\n+                args.add(argIter.next());\\r\\n+            }\\r\\n+        }\\r\\n+    }\\r\\n+    return args;\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\main\java\org\apache\commons\cli\Parser.java	parse	org.apache.commons.cli.Parser.parse(Options, String[], Properties, boolean)	144	224	20	[{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"\""},{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"\""},{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"\""},{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2019","diff":"\"\""},{"authorEmail":"britter@apache.org","authorName":"Benedikt Ritter","commitYear":"2019","diff":"\"\""},{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,51 +1,51 @@\\n-public CommandLine parse(Options options, String[] arguments, Properties properties, boolean stopAtNonOption) throws ParseException {\\r\\n+public CommandLine parse(final Options options, String[] arguments, final Properties properties, final boolean stopAtNonOption) throws ParseException {\\r\\n     for (final Option opt : options.helpOptions()) {\\r\\n         opt.clearValues();\\r\\n     }\\r\\n     for (final OptionGroup group : options.getOptionGroups()) {\\r\\n         group.setSelected(null);\\r\\n     }\\r\\n     setOptions(options);\\r\\n     cmd = new CommandLine();\\r\\n     boolean eatTheRest = false;\\r\\n     if (arguments == null) {\\r\\n         arguments = new String[0];\\r\\n     }\\r\\n     final List<String> tokenList = Arrays.asList(flatten(getOptions(), arguments, stopAtNonOption));\\r\\n     final ListIterator<String> iterator = tokenList.listIterator();\\r\\n     while (iterator.hasNext()) {\\r\\n         final String t = iterator.next();\\r\\n         if (\\\"--\\\".equals(t)) {\\r\\n             eatTheRest = true;\\r\\n         } else if (\\\"-\\\".equals(t)) {\\r\\n             if (stopAtNonOption) {\\r\\n                 eatTheRest = true;\\r\\n             } else {\\r\\n                 cmd.addArg(t);\\r\\n             }\\r\\n         } else if (t.startsWith(\\\"-\\\")) {\\r\\n             if (stopAtNonOption && !getOptions().hasOption(t)) {\\r\\n                 eatTheRest = true;\\r\\n                 cmd.addArg(t);\\r\\n             } else {\\r\\n                 processOption(t, iterator);\\r\\n             }\\r\\n         } else {\\r\\n             cmd.addArg(t);\\r\\n             if (stopAtNonOption) {\\r\\n                 eatTheRest = true;\\r\\n             }\\r\\n         }\\r\\n         if (eatTheRest) {\\r\\n             while (iterator.hasNext()) {\\r\\n                 final String str = iterator.next();\\r\\n                 if (!\\\"--\\\".equals(str)) {\\r\\n                     cmd.addArg(str);\\r\\n                 }\\r\\n             }\\r\\n         }\\r\\n     }\\r\\n     processProperties(properties);\\r\\n     checkRequiredOptions();\\r\\n     return cmd;\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,51 +1,51 @@\\n public CommandLine parse(Options options, String[] arguments, Properties properties, boolean stopAtNonOption) throws ParseException {\\r\\n-    for (Option opt : options.helpOptions()) {\\r\\n+    for (final Option opt : options.helpOptions()) {\\r\\n         opt.clearValues();\\r\\n     }\\r\\n-    for (OptionGroup group : options.getOptionGroups()) {\\r\\n+    for (final OptionGroup group : options.getOptionGroups()) {\\r\\n         group.setSelected(null);\\r\\n     }\\r\\n     setOptions(options);\\r\\n     cmd = new CommandLine();\\r\\n     boolean eatTheRest = false;\\r\\n     if (arguments == null) {\\r\\n         arguments = new String[0];\\r\\n     }\\r\\n-    List<String> tokenList = Arrays.asList(flatten(getOptions(), arguments, stopAtNonOption));\\r\\n-    ListIterator<String> iterator = tokenList.listIterator();\\r\\n+    final List<String> tokenList = Arrays.asList(flatten(getOptions(), arguments, stopAtNonOption));\\r\\n+    final ListIterator<String> iterator = tokenList.listIterator();\\r\\n     while (iterator.hasNext()) {\\r\\n-        String t = iterator.next();\\r\\n+        final String t = iterator.next();\\r\\n         if (\\\"--\\\".equals(t)) {\\r\\n             eatTheRest = true;\\r\\n         } else if (\\\"-\\\".equals(t)) {\\r\\n             if (stopAtNonOption) {\\r\\n                 eatTheRest = true;\\r\\n             } else {\\r\\n                 cmd.addArg(t);\\r\\n             }\\r\\n         } else if (t.startsWith(\\\"-\\\")) {\\r\\n             if (stopAtNonOption && !getOptions().hasOption(t)) {\\r\\n                 eatTheRest = true;\\r\\n                 cmd.addArg(t);\\r\\n             } else {\\r\\n                 processOption(t, iterator);\\r\\n             }\\r\\n         } else {\\r\\n             cmd.addArg(t);\\r\\n             if (stopAtNonOption) {\\r\\n                 eatTheRest = true;\\r\\n             }\\r\\n         }\\r\\n         if (eatTheRest) {\\r\\n             while (iterator.hasNext()) {\\r\\n-                String str = iterator.next();\\r\\n+                final String str = iterator.next();\\r\\n                 if (!\\\"--\\\".equals(str)) {\\r\\n                     cmd.addArg(str);\\r\\n                 }\\r\\n             }\\r\\n         }\\r\\n     }\\r\\n     processProperties(properties);\\r\\n     checkRequiredOptions();\\r\\n     return cmd;\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"tn@apache.org","authorName":"Thomas Neidhart","commitYear":"2013","diff":"\"\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2012","diff":"\"@@ -1,53 +1,51 @@\\n public CommandLine parse(Options options, String[] arguments, Properties properties, boolean stopAtNonOption) throws ParseException {\\r\\n-    for (Iterator it = options.helpOptions().iterator(); it.hasNext(); ) {\\r\\n-        Option opt = (Option) it.next();\\r\\n+    for (Option opt : options.helpOptions()) {\\r\\n         opt.clearValues();\\r\\n     }\\r\\n-    for (Iterator it = options.getOptionGroups().iterator(); it.hasNext(); ) {\\r\\n-        OptionGroup group = (OptionGroup) it.next();\\r\\n+    for (OptionGroup group : options.getOptionGroups()) {\\r\\n         group.setSelected(null);\\r\\n     }\\r\\n     setOptions(options);\\r\\n     cmd = new CommandLine();\\r\\n     boolean eatTheRest = false;\\r\\n     if (arguments == null) {\\r\\n         arguments = new String[0];\\r\\n     }\\r\\n-    List tokenList = Arrays.asList(flatten(getOptions(), arguments, stopAtNonOption));\\r\\n-    ListIterator iterator = tokenList.listIterator();\\r\\n+    List<String> tokenList = Arrays.asList(flatten(getOptions(), arguments, stopAtNonOption));\\r\\n+    ListIterator<String> iterator = tokenList.listIterator();\\r\\n     while (iterator.hasNext()) {\\r\\n-        String t = (String) iterator.next();\\r\\n+        String t = iterator.next();\\r\\n         if (\\\"--\\\".equals(t)) {\\r\\n             eatTheRest = true;\\r\\n         } else if (\\\"-\\\".equals(t)) {\\r\\n             if (stopAtNonOption) {\\r\\n                 eatTheRest = true;\\r\\n             } else {\\r\\n                 cmd.addArg(t);\\r\\n             }\\r\\n         } else if (t.startsWith(\\\"-\\\")) {\\r\\n             if (stopAtNonOption && !getOptions().hasOption(t)) {\\r\\n                 eatTheRest = true;\\r\\n                 cmd.addArg(t);\\r\\n             } else {\\r\\n                 processOption(t, iterator);\\r\\n             }\\r\\n         } else {\\r\\n             cmd.addArg(t);\\r\\n             if (stopAtNonOption) {\\r\\n                 eatTheRest = true;\\r\\n             }\\r\\n         }\\r\\n         if (eatTheRest) {\\r\\n             while (iterator.hasNext()) {\\r\\n-                String str = (String) iterator.next();\\r\\n+                String str = iterator.next();\\r\\n                 if (!\\\"--\\\".equals(str)) {\\r\\n                     cmd.addArg(str);\\r\\n                 }\\r\\n             }\\r\\n         }\\r\\n     }\\r\\n     processProperties(properties);\\r\\n     checkRequiredOptions();\\r\\n     return cmd;\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2010","diff":"\"\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2009","diff":"\"@@ -1,49 +1,53 @@\\n public CommandLine parse(Options options, String[] arguments, Properties properties, boolean stopAtNonOption) throws ParseException {\\r\\n     for (Iterator it = options.helpOptions().iterator(); it.hasNext(); ) {\\r\\n         Option opt = (Option) it.next();\\r\\n         opt.clearValues();\\r\\n     }\\r\\n+    for (Iterator it = options.getOptionGroups().iterator(); it.hasNext(); ) {\\r\\n+        OptionGroup group = (OptionGroup) it.next();\\r\\n+        group.setSelected(null);\\r\\n+    }\\r\\n     setOptions(options);\\r\\n     cmd = new CommandLine();\\r\\n     boolean eatTheRest = false;\\r\\n     if (arguments == null) {\\r\\n         arguments = new String[0];\\r\\n     }\\r\\n     List tokenList = Arrays.asList(flatten(getOptions(), arguments, stopAtNonOption));\\r\\n     ListIterator iterator = tokenList.listIterator();\\r\\n     while (iterator.hasNext()) {\\r\\n         String t = (String) iterator.next();\\r\\n         if (\\\"--\\\".equals(t)) {\\r\\n             eatTheRest = true;\\r\\n         } else if (\\\"-\\\".equals(t)) {\\r\\n             if (stopAtNonOption) {\\r\\n                 eatTheRest = true;\\r\\n             } else {\\r\\n                 cmd.addArg(t);\\r\\n             }\\r\\n         } else if (t.startsWith(\\\"-\\\")) {\\r\\n             if (stopAtNonOption && !getOptions().hasOption(t)) {\\r\\n                 eatTheRest = true;\\r\\n                 cmd.addArg(t);\\r\\n             } else {\\r\\n                 processOption(t, iterator);\\r\\n             }\\r\\n         } else {\\r\\n             cmd.addArg(t);\\r\\n             if (stopAtNonOption) {\\r\\n                 eatTheRest = true;\\r\\n             }\\r\\n         }\\r\\n         if (eatTheRest) {\\r\\n             while (iterator.hasNext()) {\\r\\n                 String str = (String) iterator.next();\\r\\n                 if (!\\\"--\\\".equals(str)) {\\r\\n                     cmd.addArg(str);\\r\\n                 }\\r\\n             }\\r\\n         }\\r\\n     }\\r\\n     processProperties(properties);\\r\\n     checkRequiredOptions();\\r\\n     return cmd;\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2008","diff":"\"\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2008","diff":"\"\""},{"authorEmail":"bayard@apache.org","authorName":"Henri Yandell","commitYear":"2008","diff":"\"@@ -1,50 +1,49 @@\\n public CommandLine parse(Options options, String[] arguments, Properties properties, boolean stopAtNonOption) throws ParseException {\\r\\n-    this.options = options;\\r\\n     for (Iterator it = options.helpOptions().iterator(); it.hasNext(); ) {\\r\\n         Option opt = (Option) it.next();\\r\\n         opt.clearValues();\\r\\n     }\\r\\n-    requiredOptions = options.getRequiredOptions();\\r\\n+    setOptions(options);\\r\\n     cmd = new CommandLine();\\r\\n     boolean eatTheRest = false;\\r\\n     if (arguments == null) {\\r\\n         arguments = new String[0];\\r\\n     }\\r\\n-    List tokenList = Arrays.asList(flatten(this.options, arguments, stopAtNonOption));\\r\\n+    List tokenList = Arrays.asList(flatten(getOptions(), arguments, stopAtNonOption));\\r\\n     ListIterator iterator = tokenList.listIterator();\\r\\n     while (iterator.hasNext()) {\\r\\n         String t = (String) iterator.next();\\r\\n         if (\\\"--\\\".equals(t)) {\\r\\n             eatTheRest = true;\\r\\n         } else if (\\\"-\\\".equals(t)) {\\r\\n             if (stopAtNonOption) {\\r\\n                 eatTheRest = true;\\r\\n             } else {\\r\\n                 cmd.addArg(t);\\r\\n             }\\r\\n         } else if (t.startsWith(\\\"-\\\")) {\\r\\n-            if (stopAtNonOption && !options.hasOption(t)) {\\r\\n+            if (stopAtNonOption && !getOptions().hasOption(t)) {\\r\\n                 eatTheRest = true;\\r\\n                 cmd.addArg(t);\\r\\n             } else {\\r\\n                 processOption(t, iterator);\\r\\n             }\\r\\n         } else {\\r\\n             cmd.addArg(t);\\r\\n             if (stopAtNonOption) {\\r\\n                 eatTheRest = true;\\r\\n             }\\r\\n         }\\r\\n         if (eatTheRest) {\\r\\n             while (iterator.hasNext()) {\\r\\n                 String str = (String) iterator.next();\\r\\n                 if (!\\\"--\\\".equals(str)) {\\r\\n                     cmd.addArg(str);\\r\\n                 }\\r\\n             }\\r\\n         }\\r\\n     }\\r\\n     processProperties(properties);\\r\\n     checkRequiredOptions();\\r\\n     return cmd;\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"bayard@apache.org","authorName":"Henri Yandell","commitYear":"2007","diff":"\"@@ -1,46 +1,50 @@\\n public CommandLine parse(Options options, String[] arguments, Properties properties, boolean stopAtNonOption) throws ParseException {\\r\\n     this.options = options;\\r\\n+    for (Iterator it = options.helpOptions().iterator(); it.hasNext(); ) {\\r\\n+        Option opt = (Option) it.next();\\r\\n+        opt.clearValues();\\r\\n+    }\\r\\n     requiredOptions = options.getRequiredOptions();\\r\\n     cmd = new CommandLine();\\r\\n     boolean eatTheRest = false;\\r\\n     if (arguments == null) {\\r\\n         arguments = new String[0];\\r\\n     }\\r\\n     List tokenList = Arrays.asList(flatten(this.options, arguments, stopAtNonOption));\\r\\n     ListIterator iterator = tokenList.listIterator();\\r\\n     while (iterator.hasNext()) {\\r\\n         String t = (String) iterator.next();\\r\\n         if (\\\"--\\\".equals(t)) {\\r\\n             eatTheRest = true;\\r\\n         } else if (\\\"-\\\".equals(t)) {\\r\\n             if (stopAtNonOption) {\\r\\n                 eatTheRest = true;\\r\\n             } else {\\r\\n                 cmd.addArg(t);\\r\\n             }\\r\\n         } else if (t.startsWith(\\\"-\\\")) {\\r\\n             if (stopAtNonOption && !options.hasOption(t)) {\\r\\n                 eatTheRest = true;\\r\\n                 cmd.addArg(t);\\r\\n             } else {\\r\\n                 processOption(t, iterator);\\r\\n             }\\r\\n         } else {\\r\\n             cmd.addArg(t);\\r\\n             if (stopAtNonOption) {\\r\\n                 eatTheRest = true;\\r\\n             }\\r\\n         }\\r\\n         if (eatTheRest) {\\r\\n             while (iterator.hasNext()) {\\r\\n                 String str = (String) iterator.next();\\r\\n                 if (!\\\"--\\\".equals(str)) {\\r\\n                     cmd.addArg(str);\\r\\n                 }\\r\\n             }\\r\\n         }\\r\\n     }\\r\\n     processProperties(properties);\\r\\n     checkRequiredOptions();\\r\\n     return cmd;\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -1,46 +1,46 @@\\n-public CommandLine parse(Options opts, String[] arguments, Properties properties, boolean stopAtNonOption) throws ParseException {\\r\\n-    options = opts;\\r\\n+public CommandLine parse(Options options, String[] arguments, Properties properties, boolean stopAtNonOption) throws ParseException {\\r\\n+    this.options = options;\\r\\n     requiredOptions = options.getRequiredOptions();\\r\\n     cmd = new CommandLine();\\r\\n     boolean eatTheRest = false;\\r\\n     if (arguments == null) {\\r\\n         arguments = new String[0];\\r\\n     }\\r\\n-    List tokenList = Arrays.asList(flatten(opts, arguments, stopAtNonOption));\\r\\n+    List tokenList = Arrays.asList(flatten(this.options, arguments, stopAtNonOption));\\r\\n     ListIterator iterator = tokenList.listIterator();\\r\\n     while (iterator.hasNext()) {\\r\\n         String t = (String) iterator.next();\\r\\n         if (\\\"--\\\".equals(t)) {\\r\\n             eatTheRest = true;\\r\\n         } else if (\\\"-\\\".equals(t)) {\\r\\n             if (stopAtNonOption) {\\r\\n                 eatTheRest = true;\\r\\n             } else {\\r\\n                 cmd.addArg(t);\\r\\n             }\\r\\n         } else if (t.startsWith(\\\"-\\\")) {\\r\\n             if (stopAtNonOption && !options.hasOption(t)) {\\r\\n                 eatTheRest = true;\\r\\n                 cmd.addArg(t);\\r\\n             } else {\\r\\n                 processOption(t, iterator);\\r\\n             }\\r\\n         } else {\\r\\n             cmd.addArg(t);\\r\\n             if (stopAtNonOption) {\\r\\n                 eatTheRest = true;\\r\\n             }\\r\\n         }\\r\\n         if (eatTheRest) {\\r\\n             while (iterator.hasNext()) {\\r\\n                 String str = (String) iterator.next();\\r\\n                 if (!\\\"--\\\".equals(str)) {\\r\\n                     cmd.addArg(str);\\r\\n                 }\\r\\n             }\\r\\n         }\\r\\n     }\\r\\n     processProperties(properties);\\r\\n     checkRequiredOptions();\\r\\n     return cmd;\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -1,42 +1,46 @@\\n-public CommandLine parse(Options opts, String[] arguments, boolean stopAtNonOption) throws ParseException {\\r\\n+public CommandLine parse(Options opts, String[] arguments, Properties properties, boolean stopAtNonOption) throws ParseException {\\r\\n     options = opts;\\r\\n     requiredOptions = options.getRequiredOptions();\\r\\n     cmd = new CommandLine();\\r\\n     boolean eatTheRest = false;\\r\\n+    if (arguments == null) {\\r\\n+        arguments = new String[0];\\r\\n+    }\\r\\n     List tokenList = Arrays.asList(flatten(opts, arguments, stopAtNonOption));\\r\\n     ListIterator iterator = tokenList.listIterator();\\r\\n     while (iterator.hasNext()) {\\r\\n         String t = (String) iterator.next();\\r\\n         if (\\\"--\\\".equals(t)) {\\r\\n             eatTheRest = true;\\r\\n         } else if (\\\"-\\\".equals(t)) {\\r\\n             if (stopAtNonOption) {\\r\\n                 eatTheRest = true;\\r\\n             } else {\\r\\n                 cmd.addArg(t);\\r\\n             }\\r\\n         } else if (t.startsWith(\\\"-\\\")) {\\r\\n             if (stopAtNonOption && !options.hasOption(t)) {\\r\\n                 eatTheRest = true;\\r\\n                 cmd.addArg(t);\\r\\n             } else {\\r\\n                 processOption(t, iterator);\\r\\n             }\\r\\n         } else {\\r\\n             cmd.addArg(t);\\r\\n             if (stopAtNonOption) {\\r\\n                 eatTheRest = true;\\r\\n             }\\r\\n         }\\r\\n         if (eatTheRest) {\\r\\n             while (iterator.hasNext()) {\\r\\n                 String str = (String) iterator.next();\\r\\n                 if (!\\\"--\\\".equals(str)) {\\r\\n                     cmd.addArg(str);\\r\\n                 }\\r\\n             }\\r\\n         }\\r\\n     }\\r\\n+    processProperties(properties);\\r\\n     checkRequiredOptions();\\r\\n     return cmd;\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -1,43 +1,42 @@\\n-public CommandLine parse(Options opts, String[] args, boolean stopAtNonOption) throws ParseException {\\r\\n+public CommandLine parse(Options opts, String[] arguments, boolean stopAtNonOption) throws ParseException {\\r\\n     options = opts;\\r\\n     requiredOptions = options.getRequiredOptions();\\r\\n-    String[] tokens = flatten(opts, args, stopAtNonOption);\\r\\n-    List tokenList = Arrays.asList(tokens);\\r\\n-    ListIterator iterator = tokenList.listIterator();\\r\\n     cmd = new CommandLine();\\r\\n     boolean eatTheRest = false;\\r\\n+    List tokenList = Arrays.asList(flatten(opts, arguments, stopAtNonOption));\\r\\n+    ListIterator iterator = tokenList.listIterator();\\r\\n     while (iterator.hasNext()) {\\r\\n         String t = (String) iterator.next();\\r\\n         if (\\\"--\\\".equals(t)) {\\r\\n             eatTheRest = true;\\r\\n+        } else if (\\\"-\\\".equals(t)) {\\r\\n+            if (stopAtNonOption) {\\r\\n+                eatTheRest = true;\\r\\n+            } else {\\r\\n+                cmd.addArg(t);\\r\\n+            }\\r\\n         } else if (t.startsWith(\\\"-\\\")) {\\r\\n-            if (t.length() == 1) {\\r\\n-                if (stopAtNonOption) {\\r\\n-                    eatTheRest = true;\\r\\n-                } else {\\r\\n-                    cmd.addArg(t);\\r\\n-                }\\r\\n-            } else if (stopAtNonOption && !options.hasOption(t)) {\\r\\n+            if (stopAtNonOption && !options.hasOption(t)) {\\r\\n                 eatTheRest = true;\\r\\n                 cmd.addArg(t);\\r\\n             } else {\\r\\n                 processOption(t, iterator);\\r\\n             }\\r\\n         } else {\\r\\n             cmd.addArg(t);\\r\\n             if (stopAtNonOption) {\\r\\n                 eatTheRest = true;\\r\\n             }\\r\\n         }\\r\\n         if (eatTheRest) {\\r\\n             while (iterator.hasNext()) {\\r\\n                 String str = (String) iterator.next();\\r\\n                 if (!\\\"--\\\".equals(str)) {\\r\\n                     cmd.addArg(str);\\r\\n                 }\\r\\n             }\\r\\n         }\\r\\n     }\\r\\n     checkRequiredOptions();\\r\\n     return cmd;\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -1,37 +1,43 @@\\n public CommandLine parse(Options opts, String[] args, boolean stopAtNonOption) throws ParseException {\\r\\n     options = opts;\\r\\n     requiredOptions = options.getRequiredOptions();\\r\\n     String[] tokens = flatten(opts, args, stopAtNonOption);\\r\\n     List tokenList = Arrays.asList(tokens);\\r\\n     ListIterator iterator = tokenList.listIterator();\\r\\n     cmd = new CommandLine();\\r\\n     boolean eatTheRest = false;\\r\\n     while (iterator.hasNext()) {\\r\\n         String t = (String) iterator.next();\\r\\n         if (\\\"--\\\".equals(t)) {\\r\\n             eatTheRest = true;\\r\\n         } else if (t.startsWith(\\\"-\\\")) {\\r\\n             if (t.length() == 1) {\\r\\n                 if (stopAtNonOption) {\\r\\n                     eatTheRest = true;\\r\\n                 } else {\\r\\n                     cmd.addArg(t);\\r\\n                 }\\r\\n+            } else if (stopAtNonOption && !options.hasOption(t)) {\\r\\n+                eatTheRest = true;\\r\\n+                cmd.addArg(t);\\r\\n             } else {\\r\\n                 processOption(t, iterator);\\r\\n             }\\r\\n         } else {\\r\\n             cmd.addArg(t);\\r\\n             if (stopAtNonOption) {\\r\\n                 eatTheRest = true;\\r\\n             }\\r\\n         }\\r\\n         if (eatTheRest) {\\r\\n             while (iterator.hasNext()) {\\r\\n-                cmd.addArg((String) iterator.next());\\r\\n+                String str = (String) iterator.next();\\r\\n+                if (!\\\"--\\\".equals(str)) {\\r\\n+                    cmd.addArg(str);\\r\\n+                }\\r\\n             }\\r\\n         }\\r\\n     }\\r\\n     checkRequiredOptions();\\r\\n     return cmd;\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -1,38 +1,37 @@\\n-public CommandLine parse(Options opts, String[] arguments, boolean stopAtNonOption) throws ParseException {\\r\\n+public CommandLine parse(Options opts, String[] args, boolean stopAtNonOption) throws ParseException {\\r\\n     options = opts;\\r\\n-    cmd = new CommandLine();\\r\\n     requiredOptions = options.getRequiredOptions();\\r\\n-    ListIterator iter = Arrays.asList(arguments).listIterator();\\r\\n-    String token = null;\\r\\n+    String[] tokens = flatten(opts, args, stopAtNonOption);\\r\\n+    List tokenList = Arrays.asList(tokens);\\r\\n+    ListIterator iterator = tokenList.listIterator();\\r\\n+    cmd = new CommandLine();\\r\\n     boolean eatTheRest = false;\\r\\n-    while (iter.hasNext()) {\\r\\n-        token = (String) iter.next();\\r\\n-        if (token.equals(\\\"--\\\")) {\\r\\n+    while (iterator.hasNext()) {\\r\\n+        String t = (String) iterator.next();\\r\\n+        if (\\\"--\\\".equals(t)) {\\r\\n             eatTheRest = true;\\r\\n-        } else if (token.startsWith(\\\"--\\\")) {\\r\\n-            processOption(token, iter);\\r\\n-        } else if (token.startsWith(\\\"-\\\")) {\\r\\n-            if (token.length() == 1) {\\r\\n+        } else if (t.startsWith(\\\"-\\\")) {\\r\\n+            if (t.length() == 1) {\\r\\n                 if (stopAtNonOption) {\\r\\n                     eatTheRest = true;\\r\\n                 } else {\\r\\n-                    cmd.addArg(token);\\r\\n+                    cmd.addArg(t);\\r\\n                 }\\r\\n             } else {\\r\\n-                processOption(token, iter);\\r\\n+                processOption(t, iterator);\\r\\n             }\\r\\n         } else {\\r\\n-            cmd.addArg(token);\\r\\n+            cmd.addArg(t);\\r\\n             if (stopAtNonOption) {\\r\\n                 eatTheRest = true;\\r\\n             }\\r\\n         }\\r\\n         if (eatTheRest) {\\r\\n-            while (iter.hasNext()) {\\r\\n-                cmd.addArg((String) iter.next());\\r\\n+            while (iterator.hasNext()) {\\r\\n+                cmd.addArg((String) iterator.next());\\r\\n             }\\r\\n         }\\r\\n     }\\r\\n     checkRequiredOptions();\\r\\n     return cmd;\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -1,44 +1,38 @@\\n-public List parse(Options options, List arguments, boolean stopAtNonOption) {\\r\\n-    List args = new LinkedList();\\r\\n-    Iterator argIter = arguments.iterator();\\r\\n-    String eachArg = null;\\r\\n+public CommandLine parse(Options opts, String[] arguments, boolean stopAtNonOption) throws ParseException {\\r\\n+    options = opts;\\r\\n+    cmd = new CommandLine();\\r\\n+    requiredOptions = options.getRequiredOptions();\\r\\n+    ListIterator iter = Arrays.asList(arguments).listIterator();\\r\\n+    String token = null;\\r\\n     boolean eatTheRest = false;\\r\\n-    while (argIter.hasNext()) {\\r\\n-        eachArg = (String) argIter.next();\\r\\n-        if (eachArg.equals(\\\"--\\\")) {\\r\\n-            args.add(eachArg);\\r\\n+    while (iter.hasNext()) {\\r\\n+        token = (String) iter.next();\\r\\n+        if (token.equals(\\\"--\\\")) {\\r\\n             eatTheRest = true;\\r\\n-        } else if (eachArg.startsWith(\\\"--\\\")) {\\r\\n-            args.add(eachArg);\\r\\n-        } else if (eachArg.startsWith(\\\"-\\\")) {\\r\\n-            if (eachArg.length() == 1) {\\r\\n+        } else if (token.startsWith(\\\"--\\\")) {\\r\\n+            processOption(token, iter);\\r\\n+        } else if (token.startsWith(\\\"-\\\")) {\\r\\n+            if (token.length() == 1) {\\r\\n                 if (stopAtNonOption) {\\r\\n                     eatTheRest = true;\\r\\n                 } else {\\r\\n-                    args.add(eachArg);\\r\\n+                    cmd.addArg(token);\\r\\n                 }\\r\\n-            } else if (eachArg.length() == 2) {\\r\\n-                args.add(eachArg);\\r\\n             } else {\\r\\n-                String charOpt = eachArg.substring(1, 2);\\r\\n-                if (options.getOption(charOpt) != null && options.getOption(eachArg) == null) {\\r\\n-                    args.add(\\\"-\\\" + charOpt);\\r\\n-                    args.add(eachArg.substring(2, eachArg.length()));\\r\\n-                } else {\\r\\n-                    args.add(eachArg);\\r\\n-                }\\r\\n+                processOption(token, iter);\\r\\n             }\\r\\n         } else {\\r\\n-            args.add(eachArg);\\r\\n+            cmd.addArg(token);\\r\\n             if (stopAtNonOption) {\\r\\n                 eatTheRest = true;\\r\\n             }\\r\\n         }\\r\\n         if (eatTheRest) {\\r\\n-            while (argIter.hasNext()) {\\r\\n-                args.add(argIter.next());\\r\\n+            while (iter.hasNext()) {\\r\\n+                cmd.addArg((String) iter.next());\\r\\n             }\\r\\n         }\\r\\n     }\\r\\n-    return args;\\r\\n+    checkRequiredOptions();\\r\\n+    return cmd;\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -0,0 +1,44 @@\\n+public List parse(Options options, List arguments, boolean stopAtNonOption) {\\r\\n+    List args = new LinkedList();\\r\\n+    Iterator argIter = arguments.iterator();\\r\\n+    String eachArg = null;\\r\\n+    boolean eatTheRest = false;\\r\\n+    while (argIter.hasNext()) {\\r\\n+        eachArg = (String) argIter.next();\\r\\n+        if (eachArg.equals(\\\"--\\\")) {\\r\\n+            args.add(eachArg);\\r\\n+            eatTheRest = true;\\r\\n+        } else if (eachArg.startsWith(\\\"--\\\")) {\\r\\n+            args.add(eachArg);\\r\\n+        } else if (eachArg.startsWith(\\\"-\\\")) {\\r\\n+            if (eachArg.length() == 1) {\\r\\n+                if (stopAtNonOption) {\\r\\n+                    eatTheRest = true;\\r\\n+                } else {\\r\\n+                    args.add(eachArg);\\r\\n+                }\\r\\n+            } else if (eachArg.length() == 2) {\\r\\n+                args.add(eachArg);\\r\\n+            } else {\\r\\n+                String charOpt = eachArg.substring(1, 2);\\r\\n+                if (options.getOption(charOpt) != null && options.getOption(eachArg) == null) {\\r\\n+                    args.add(\\\"-\\\" + charOpt);\\r\\n+                    args.add(eachArg.substring(2, eachArg.length()));\\r\\n+                } else {\\r\\n+                    args.add(eachArg);\\r\\n+                }\\r\\n+            }\\r\\n+        } else {\\r\\n+            args.add(eachArg);\\r\\n+            if (stopAtNonOption) {\\r\\n+                eatTheRest = true;\\r\\n+            }\\r\\n+        }\\r\\n+        if (eatTheRest) {\\r\\n+            while (argIter.hasNext()) {\\r\\n+                args.add(argIter.next());\\r\\n+            }\\r\\n+        }\\r\\n+    }\\r\\n+    return args;\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\main\java\org\apache\commons\cli\Parser.java	processArgs	org.apache.commons.cli.Parser.processArgs(Option, ListIterator<String>)	235	258	11	[{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"\""},{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"\""},{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2019","diff":"\"\""},{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,18 +1,18 @@\\n-public void processArgs(Option opt, ListIterator<String> iter) throws ParseException {\\r\\n+public void processArgs(final Option opt, final ListIterator<String> iter) throws ParseException {\\r\\n     while (iter.hasNext()) {\\r\\n         final String str = iter.next();\\r\\n         if (getOptions().hasOption(str) && str.startsWith(\\\"-\\\")) {\\r\\n             iter.previous();\\r\\n             break;\\r\\n         }\\r\\n         try {\\r\\n             opt.addValueForProcessing(Util.stripLeadingAndTrailingQuotes(str));\\r\\n         } catch (final RuntimeException exp) {\\r\\n             iter.previous();\\r\\n             break;\\r\\n         }\\r\\n     }\\r\\n     if (opt.getValues() == null && !opt.hasOptionalArg()) {\\r\\n         throw new MissingArgumentException(opt);\\r\\n     }\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,18 +1,18 @@\\n public void processArgs(Option opt, ListIterator<String> iter) throws ParseException {\\r\\n     while (iter.hasNext()) {\\r\\n-        String str = iter.next();\\r\\n+        final String str = iter.next();\\r\\n         if (getOptions().hasOption(str) && str.startsWith(\\\"-\\\")) {\\r\\n             iter.previous();\\r\\n             break;\\r\\n         }\\r\\n         try {\\r\\n             opt.addValueForProcessing(Util.stripLeadingAndTrailingQuotes(str));\\r\\n-        } catch (RuntimeException exp) {\\r\\n+        } catch (final RuntimeException exp) {\\r\\n             iter.previous();\\r\\n             break;\\r\\n         }\\r\\n     }\\r\\n     if (opt.getValues() == null && !opt.hasOptionalArg()) {\\r\\n         throw new MissingArgumentException(opt);\\r\\n     }\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2012","diff":"\"@@ -1,18 +1,18 @@\\n-public void processArgs(Option opt, ListIterator iter) throws ParseException {\\r\\n+public void processArgs(Option opt, ListIterator<String> iter) throws ParseException {\\r\\n     while (iter.hasNext()) {\\r\\n-        String str = (String) iter.next();\\r\\n+        String str = iter.next();\\r\\n         if (getOptions().hasOption(str) && str.startsWith(\\\"-\\\")) {\\r\\n             iter.previous();\\r\\n             break;\\r\\n         }\\r\\n         try {\\r\\n             opt.addValueForProcessing(Util.stripLeadingAndTrailingQuotes(str));\\r\\n         } catch (RuntimeException exp) {\\r\\n             iter.previous();\\r\\n             break;\\r\\n         }\\r\\n     }\\r\\n     if (opt.getValues() == null && !opt.hasOptionalArg()) {\\r\\n         throw new MissingArgumentException(opt);\\r\\n     }\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2008","diff":"\"@@ -1,18 +1,18 @@\\n public void processArgs(Option opt, ListIterator iter) throws ParseException {\\r\\n     while (iter.hasNext()) {\\r\\n         String str = (String) iter.next();\\r\\n         if (getOptions().hasOption(str) && str.startsWith(\\\"-\\\")) {\\r\\n             iter.previous();\\r\\n             break;\\r\\n         }\\r\\n         try {\\r\\n             opt.addValueForProcessing(Util.stripLeadingAndTrailingQuotes(str));\\r\\n         } catch (RuntimeException exp) {\\r\\n             iter.previous();\\r\\n             break;\\r\\n         }\\r\\n     }\\r\\n-    if ((opt.getValues() == null) && !opt.hasOptionalArg()) {\\r\\n+    if (opt.getValues() == null && !opt.hasOptionalArg()) {\\r\\n         throw new MissingArgumentException(opt);\\r\\n     }\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2008","diff":"\"@@ -1,18 +1,18 @@\\n public void processArgs(Option opt, ListIterator iter) throws ParseException {\\r\\n     while (iter.hasNext()) {\\r\\n         String str = (String) iter.next();\\r\\n         if (getOptions().hasOption(str) && str.startsWith(\\\"-\\\")) {\\r\\n             iter.previous();\\r\\n             break;\\r\\n         }\\r\\n         try {\\r\\n             opt.addValueForProcessing(Util.stripLeadingAndTrailingQuotes(str));\\r\\n         } catch (RuntimeException exp) {\\r\\n             iter.previous();\\r\\n             break;\\r\\n         }\\r\\n     }\\r\\n     if ((opt.getValues() == null) && !opt.hasOptionalArg()) {\\r\\n-        throw new MissingArgumentException(\\\"Missing argument for option:\\\" + opt.getKey());\\r\\n+        throw new MissingArgumentException(opt);\\r\\n     }\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"bayard@apache.org","authorName":"Henri Yandell","commitYear":"2008","diff":"\"@@ -1,18 +1,18 @@\\n public void processArgs(Option opt, ListIterator iter) throws ParseException {\\r\\n     while (iter.hasNext()) {\\r\\n         String str = (String) iter.next();\\r\\n-        if (options.hasOption(str) && str.startsWith(\\\"-\\\")) {\\r\\n+        if (getOptions().hasOption(str) && str.startsWith(\\\"-\\\")) {\\r\\n             iter.previous();\\r\\n             break;\\r\\n         }\\r\\n         try {\\r\\n             opt.addValueForProcessing(Util.stripLeadingAndTrailingQuotes(str));\\r\\n         } catch (RuntimeException exp) {\\r\\n             iter.previous();\\r\\n             break;\\r\\n         }\\r\\n     }\\r\\n     if ((opt.getValues() == null) && !opt.hasOptionalArg()) {\\r\\n         throw new MissingArgumentException(\\\"Missing argument for option:\\\" + opt.getKey());\\r\\n     }\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"bayard@apache.org","authorName":"Henri Yandell","commitYear":"2007","diff":"\"@@ -1,18 +1,18 @@\\n public void processArgs(Option opt, ListIterator iter) throws ParseException {\\r\\n     while (iter.hasNext()) {\\r\\n         String str = (String) iter.next();\\r\\n         if (options.hasOption(str) && str.startsWith(\\\"-\\\")) {\\r\\n             iter.previous();\\r\\n             break;\\r\\n         }\\r\\n         try {\\r\\n-            opt.addValue(Util.stripLeadingAndTrailingQuotes(str));\\r\\n+            opt.addValueForProcessing(Util.stripLeadingAndTrailingQuotes(str));\\r\\n         } catch (RuntimeException exp) {\\r\\n             iter.previous();\\r\\n             break;\\r\\n         }\\r\\n     }\\r\\n     if ((opt.getValues() == null) && !opt.hasOptionalArg()) {\\r\\n         throw new MissingArgumentException(\\\"Missing argument for option:\\\" + opt.getKey());\\r\\n     }\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"roxspring@apache.org","authorName":"Robert James Oxspring","commitYear":"2005","diff":"\"@@ -1,19 +1,18 @@\\n public void processArgs(Option opt, ListIterator iter) throws ParseException {\\r\\n     while (iter.hasNext()) {\\r\\n         String str = (String) iter.next();\\r\\n         if (options.hasOption(str) && str.startsWith(\\\"-\\\")) {\\r\\n             iter.previous();\\r\\n             break;\\r\\n-        } else {\\r\\n-            try {\\r\\n-                opt.addValue(Util.stripLeadingAndTrailingQuotes(str));\\r\\n-            } catch (RuntimeException exp) {\\r\\n-                iter.previous();\\r\\n-                break;\\r\\n-            }\\r\\n+        }\\r\\n+        try {\\r\\n+            opt.addValue(Util.stripLeadingAndTrailingQuotes(str));\\r\\n+        } catch (RuntimeException exp) {\\r\\n+            iter.previous();\\r\\n+            break;\\r\\n         }\\r\\n     }\\r\\n     if ((opt.getValues() == null) && !opt.hasOptionalArg()) {\\r\\n         throw new MissingArgumentException(\\\"Missing argument for option:\\\" + opt.getKey());\\r\\n     }\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"roxspring@apache.org","authorName":"Robert James Oxspring","commitYear":"2004","diff":"\"@@ -1,19 +1,19 @@\\n public void processArgs(Option opt, ListIterator iter) throws ParseException {\\r\\n     while (iter.hasNext()) {\\r\\n         String str = (String) iter.next();\\r\\n-        if (options.hasOption(str)) {\\r\\n+        if (options.hasOption(str) && str.startsWith(\\\"-\\\")) {\\r\\n             iter.previous();\\r\\n             break;\\r\\n         } else {\\r\\n             try {\\r\\n                 opt.addValue(Util.stripLeadingAndTrailingQuotes(str));\\r\\n             } catch (RuntimeException exp) {\\r\\n                 iter.previous();\\r\\n                 break;\\r\\n             }\\r\\n         }\\r\\n     }\\r\\n     if ((opt.getValues() == null) && !opt.hasOptionalArg()) {\\r\\n         throw new MissingArgumentException(\\\"Missing argument for option:\\\" + opt.getKey());\\r\\n     }\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"roxspring@apache.org","authorName":"Robert James Oxspring","commitYear":"2004","diff":"\"\""},{"authorEmail":"roxspring@apache.org","authorName":"Robert James Oxspring","commitYear":"2004","diff":"\"@@ -1,19 +1,19 @@\\n public void processArgs(Option opt, ListIterator iter) throws ParseException {\\r\\n     while (iter.hasNext()) {\\r\\n         String str = (String) iter.next();\\r\\n         if (options.hasOption(str)) {\\r\\n             iter.previous();\\r\\n             break;\\r\\n         } else {\\r\\n             try {\\r\\n                 opt.addValue(Util.stripLeadingAndTrailingQuotes(str));\\r\\n             } catch (RuntimeException exp) {\\r\\n                 iter.previous();\\r\\n                 break;\\r\\n             }\\r\\n         }\\r\\n     }\\r\\n     if ((opt.getValues() == null) && !opt.hasOptionalArg()) {\\r\\n-        throw new MissingArgumentException(\\\"no argument for:\\\" + opt.getKey());\\r\\n+        throw new MissingArgumentException(\\\"Missing argument for option:\\\" + opt.getKey());\\r\\n     }\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2003","diff":"\"@@ -1,19 +1,19 @@\\n public void processArgs(Option opt, ListIterator iter) throws ParseException {\\r\\n     while (iter.hasNext()) {\\r\\n         String str = (String) iter.next();\\r\\n         if (options.hasOption(str)) {\\r\\n             iter.previous();\\r\\n             break;\\r\\n         } else {\\r\\n             try {\\r\\n-                opt.addValue(str);\\r\\n+                opt.addValue(Util.stripLeadingAndTrailingQuotes(str));\\r\\n             } catch (RuntimeException exp) {\\r\\n                 iter.previous();\\r\\n                 break;\\r\\n             }\\r\\n         }\\r\\n     }\\r\\n     if ((opt.getValues() == null) && !opt.hasOptionalArg()) {\\r\\n         throw new MissingArgumentException(\\\"no argument for:\\\" + opt.getKey());\\r\\n     }\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -1,19 +1,19 @@\\n public void processArgs(Option opt, ListIterator iter) throws ParseException {\\r\\n     while (iter.hasNext()) {\\r\\n         String str = (String) iter.next();\\r\\n         if (options.hasOption(str)) {\\r\\n             iter.previous();\\r\\n             break;\\r\\n         } else {\\r\\n             try {\\r\\n                 opt.addValue(str);\\r\\n             } catch (RuntimeException exp) {\\r\\n                 iter.previous();\\r\\n                 break;\\r\\n             }\\r\\n         }\\r\\n     }\\r\\n-    if (opt.getValues() == null && !opt.hasOptionalArg()) {\\r\\n+    if ((opt.getValues() == null) && !opt.hasOptionalArg()) {\\r\\n         throw new MissingArgumentException(\\\"no argument for:\\\" + opt.getKey());\\r\\n     }\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -1,15 +1,19 @@\\n public void processArgs(Option opt, ListIterator iter) throws ParseException {\\r\\n     while (iter.hasNext()) {\\r\\n         String str = (String) iter.next();\\r\\n         if (options.hasOption(str)) {\\r\\n             iter.previous();\\r\\n             break;\\r\\n-        } else if (!opt.addValue(str)) {\\r\\n-            iter.previous();\\r\\n-            break;\\r\\n+        } else {\\r\\n+            try {\\r\\n+                opt.addValue(str);\\r\\n+            } catch (RuntimeException exp) {\\r\\n+                iter.previous();\\r\\n+                break;\\r\\n+            }\\r\\n         }\\r\\n     }\\r\\n     if (opt.getValues() == null && !opt.hasOptionalArg()) {\\r\\n         throw new MissingArgumentException(\\\"no argument for:\\\" + opt.getKey());\\r\\n     }\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -1,15 +1,15 @@\\n public void processArgs(Option opt, ListIterator iter) throws ParseException {\\r\\n     while (iter.hasNext()) {\\r\\n-        String var = (String) iter.next();\\r\\n-        if (options.hasOption(var)) {\\r\\n+        String str = (String) iter.next();\\r\\n+        if (options.hasOption(str)) {\\r\\n             iter.previous();\\r\\n             break;\\r\\n-        } else if (!opt.addValue(var)) {\\r\\n+        } else if (!opt.addValue(str)) {\\r\\n             iter.previous();\\r\\n             break;\\r\\n         }\\r\\n     }\\r\\n     if (opt.getValues() == null && !opt.hasOptionalArg()) {\\r\\n-        throw new MissingArgumentException(\\\"no argument for:\\\" + opt.getOpt());\\r\\n+        throw new MissingArgumentException(\\\"no argument for:\\\" + opt.getKey());\\r\\n     }\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -1,17 +1,15 @@\\n public void processArgs(Option opt, ListIterator iter) throws ParseException {\\r\\n-    if (!iter.hasNext() && !opt.hasOptionalArg()) {\\r\\n-        throw new MissingArgumentException(\\\"no argument for:\\\" + opt.getOpt());\\r\\n-    }\\r\\n     while (iter.hasNext()) {\\r\\n         String var = (String) iter.next();\\r\\n         if (options.hasOption(var)) {\\r\\n             iter.previous();\\r\\n             break;\\r\\n-        } else {\\r\\n-            if (!opt.addValue(var)) {\\r\\n-                iter.previous();\\r\\n-                break;\\r\\n-            }\\r\\n+        } else if (!opt.addValue(var)) {\\r\\n+            iter.previous();\\r\\n+            break;\\r\\n         }\\r\\n     }\\r\\n+    if (opt.getValues() == null && !opt.hasOptionalArg()) {\\r\\n+        throw new MissingArgumentException(\\\"no argument for:\\\" + opt.getOpt());\\r\\n+    }\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -1,17 +1,17 @@\\n public void processArgs(Option opt, ListIterator iter) throws ParseException {\\r\\n     if (!iter.hasNext() && !opt.hasOptionalArg()) {\\r\\n         throw new MissingArgumentException(\\\"no argument for:\\\" + opt.getOpt());\\r\\n     }\\r\\n     while (iter.hasNext()) {\\r\\n         String var = (String) iter.next();\\r\\n-        if (!var.equals(\\\"-\\\") && var.startsWith(\\\"-\\\")) {\\r\\n+        if (options.hasOption(var)) {\\r\\n             iter.previous();\\r\\n             break;\\r\\n         } else {\\r\\n             if (!opt.addValue(var)) {\\r\\n                 iter.previous();\\r\\n                 break;\\r\\n             }\\r\\n         }\\r\\n     }\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -1,17 +1,17 @@\\n public void processArgs(Option opt, ListIterator iter) throws ParseException {\\r\\n-    if (!iter.hasNext()) {\\r\\n+    if (!iter.hasNext() && !opt.hasOptionalArg()) {\\r\\n         throw new MissingArgumentException(\\\"no argument for:\\\" + opt.getOpt());\\r\\n     }\\r\\n     while (iter.hasNext()) {\\r\\n         String var = (String) iter.next();\\r\\n         if (!var.equals(\\\"-\\\") && var.startsWith(\\\"-\\\")) {\\r\\n             iter.previous();\\r\\n             break;\\r\\n         } else {\\r\\n             if (!opt.addValue(var)) {\\r\\n                 iter.previous();\\r\\n                 break;\\r\\n             }\\r\\n         }\\r\\n     }\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -1,33 +1,17 @@\\n public void processArgs(Option opt, ListIterator iter) throws ParseException {\\r\\n     if (!iter.hasNext()) {\\r\\n         throw new MissingArgumentException(\\\"no argument for:\\\" + opt.getOpt());\\r\\n     }\\r\\n     while (iter.hasNext()) {\\r\\n         String var = (String) iter.next();\\r\\n         if (!var.equals(\\\"-\\\") && var.startsWith(\\\"-\\\")) {\\r\\n             iter.previous();\\r\\n             break;\\r\\n         } else {\\r\\n-            char sep = opt.getValueSeparator();\\r\\n-            if (sep > 0) {\\r\\n-                int findex;\\r\\n-                while ((findex = var.indexOf(sep)) != -1) {\\r\\n-                    String val = var.substring(0, findex);\\r\\n-                    var = var.substring(findex + 1);\\r\\n-                    if (!opt.addValue(val)) {\\r\\n-                        iter.previous();\\r\\n-                        return;\\r\\n-                    }\\r\\n-                }\\r\\n-                if (!opt.addValue(var)) {\\r\\n-                    iter.previous();\\r\\n-                    return;\\r\\n-                }\\r\\n-                ;\\r\\n-            } else if (!opt.addValue(var)) {\\r\\n+            if (!opt.addValue(var)) {\\r\\n                 iter.previous();\\r\\n-                return;\\r\\n+                break;\\r\\n             }\\r\\n         }\\r\\n     }\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -1,17 +1,33 @@\\n public void processArgs(Option opt, ListIterator iter) throws ParseException {\\r\\n     if (!iter.hasNext()) {\\r\\n         throw new MissingArgumentException(\\\"no argument for:\\\" + opt.getOpt());\\r\\n     }\\r\\n     while (iter.hasNext()) {\\r\\n         String var = (String) iter.next();\\r\\n         if (!var.equals(\\\"-\\\") && var.startsWith(\\\"-\\\")) {\\r\\n             iter.previous();\\r\\n             break;\\r\\n         } else {\\r\\n-            if (!opt.addValue(var)) {\\r\\n+            char sep = opt.getValueSeparator();\\r\\n+            if (sep > 0) {\\r\\n+                int findex;\\r\\n+                while ((findex = var.indexOf(sep)) != -1) {\\r\\n+                    String val = var.substring(0, findex);\\r\\n+                    var = var.substring(findex + 1);\\r\\n+                    if (!opt.addValue(val)) {\\r\\n+                        iter.previous();\\r\\n+                        return;\\r\\n+                    }\\r\\n+                }\\r\\n+                if (!opt.addValue(var)) {\\r\\n+                    iter.previous();\\r\\n+                    return;\\r\\n+                }\\r\\n+                ;\\r\\n+            } else if (!opt.addValue(var)) {\\r\\n                 iter.previous();\\r\\n-                break;\\r\\n+                return;\\r\\n             }\\r\\n         }\\r\\n     }\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -1,11 +1,17 @@\\n-public void processMultipleArgs(Option opt, ListIterator iter) {\\r\\n+public void processArgs(Option opt, ListIterator iter) throws ParseException {\\r\\n+    if (!iter.hasNext()) {\\r\\n+        throw new MissingArgumentException(\\\"no argument for:\\\" + opt.getOpt());\\r\\n+    }\\r\\n     while (iter.hasNext()) {\\r\\n         String var = (String) iter.next();\\r\\n-        if (var.startsWith(\\\"-\\\")) {\\r\\n+        if (!var.equals(\\\"-\\\") && var.startsWith(\\\"-\\\")) {\\r\\n             iter.previous();\\r\\n             break;\\r\\n         } else {\\r\\n-            opt.addValue(var);\\r\\n+            if (!opt.addValue(var)) {\\r\\n+                iter.previous();\\r\\n+                break;\\r\\n+            }\\r\\n         }\\r\\n     }\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -0,0 +1,11 @@\\n+public void processMultipleArgs(Option opt, ListIterator iter) {\\r\\n+    while (iter.hasNext()) {\\r\\n+        String var = (String) iter.next();\\r\\n+        if (var.startsWith(\\\"-\\\")) {\\r\\n+            iter.previous();\\r\\n+            break;\\r\\n+        } else {\\r\\n+            opt.addValue(var);\\r\\n+        }\\r\\n+    }\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\main\java\org\apache\commons\cli\Parser.java	processOption	org.apache.commons.cli.Parser.processOption(String, ListIterator<String>)	269	290	4	[{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"\""},{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"\""},{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2019","diff":"\"\""},{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,12 +1,12 @@\\n-protected void processOption(String arg, ListIterator<String> iter) throws ParseException {\\r\\n+protected void processOption(final String arg, final ListIterator<String> iter) throws ParseException {\\r\\n     final boolean hasOption = getOptions().hasOption(arg);\\r\\n     if (!hasOption) {\\r\\n         throw new UnrecognizedOptionException(\\\"Unrecognized option: \\\" + arg, arg);\\r\\n     }\\r\\n     final Option opt = (Option) getOptions().getOption(arg).clone();\\r\\n     updateRequiredOptions(opt);\\r\\n     if (opt.hasArg()) {\\r\\n         processArgs(opt, iter);\\r\\n     }\\r\\n     cmd.addOption(opt);\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,12 +1,12 @@\\n protected void processOption(String arg, ListIterator<String> iter) throws ParseException {\\r\\n-    boolean hasOption = getOptions().hasOption(arg);\\r\\n+    final boolean hasOption = getOptions().hasOption(arg);\\r\\n     if (!hasOption) {\\r\\n         throw new UnrecognizedOptionException(\\\"Unrecognized option: \\\" + arg, arg);\\r\\n     }\\r\\n-    Option opt = (Option) getOptions().getOption(arg).clone();\\r\\n+    final Option opt = (Option) getOptions().getOption(arg).clone();\\r\\n     updateRequiredOptions(opt);\\r\\n     if (opt.hasArg()) {\\r\\n         processArgs(opt, iter);\\r\\n     }\\r\\n     cmd.addOption(opt);\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2016","diff":"\"\""},{"authorEmail":"tn@apache.org","authorName":"Thomas Neidhart","commitYear":"2013","diff":"\"@@ -1,12 +1,12 @@\\n protected void processOption(String arg, ListIterator<String> iter) throws ParseException {\\r\\n     boolean hasOption = getOptions().hasOption(arg);\\r\\n     if (!hasOption) {\\r\\n         throw new UnrecognizedOptionException(\\\"Unrecognized option: \\\" + arg, arg);\\r\\n     }\\r\\n-    Option opt = getOptions().getOption(arg).clone();\\r\\n+    Option opt = (Option) getOptions().getOption(arg).clone();\\r\\n     updateRequiredOptions(opt);\\r\\n     if (opt.hasArg()) {\\r\\n         processArgs(opt, iter);\\r\\n     }\\r\\n     cmd.addOption(opt);\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"tn@apache.org","authorName":"Thomas Neidhart","commitYear":"2013","diff":"\"\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2012","diff":"\"@@ -1,12 +1,12 @@\\n-protected void processOption(String arg, ListIterator iter) throws ParseException {\\r\\n+protected void processOption(String arg, ListIterator<String> iter) throws ParseException {\\r\\n     boolean hasOption = getOptions().hasOption(arg);\\r\\n     if (!hasOption) {\\r\\n         throw new UnrecognizedOptionException(\\\"Unrecognized option: \\\" + arg, arg);\\r\\n     }\\r\\n-    Option opt = (Option) getOptions().getOption(arg).clone();\\r\\n+    Option opt = getOptions().getOption(arg).clone();\\r\\n     updateRequiredOptions(opt);\\r\\n     if (opt.hasArg()) {\\r\\n         processArgs(opt, iter);\\r\\n     }\\r\\n     cmd.addOption(opt);\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2010","diff":"\"@@ -1,21 +1,12 @@\\n protected void processOption(String arg, ListIterator iter) throws ParseException {\\r\\n     boolean hasOption = getOptions().hasOption(arg);\\r\\n     if (!hasOption) {\\r\\n         throw new UnrecognizedOptionException(\\\"Unrecognized option: \\\" + arg, arg);\\r\\n     }\\r\\n     Option opt = (Option) getOptions().getOption(arg).clone();\\r\\n-    if (opt.isRequired()) {\\r\\n-        getRequiredOptions().remove(opt.getKey());\\r\\n-    }\\r\\n-    if (getOptions().getOptionGroup(opt) != null) {\\r\\n-        OptionGroup group = getOptions().getOptionGroup(opt);\\r\\n-        if (group.isRequired()) {\\r\\n-            getRequiredOptions().remove(group);\\r\\n-        }\\r\\n-        group.setSelected(opt);\\r\\n-    }\\r\\n+    updateRequiredOptions(opt);\\r\\n     if (opt.hasArg()) {\\r\\n         processArgs(opt, iter);\\r\\n     }\\r\\n     cmd.addOption(opt);\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2008","diff":"\"\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2008","diff":"\"@@ -1,21 +1,21 @@\\n protected void processOption(String arg, ListIterator iter) throws ParseException {\\r\\n     boolean hasOption = getOptions().hasOption(arg);\\r\\n     if (!hasOption) {\\r\\n-        throw new UnrecognizedOptionException(\\\"Unrecognized option: \\\" + arg);\\r\\n+        throw new UnrecognizedOptionException(\\\"Unrecognized option: \\\" + arg, arg);\\r\\n     }\\r\\n     Option opt = (Option) getOptions().getOption(arg).clone();\\r\\n     if (opt.isRequired()) {\\r\\n         getRequiredOptions().remove(opt.getKey());\\r\\n     }\\r\\n     if (getOptions().getOptionGroup(opt) != null) {\\r\\n         OptionGroup group = getOptions().getOptionGroup(opt);\\r\\n         if (group.isRequired()) {\\r\\n             getRequiredOptions().remove(group);\\r\\n         }\\r\\n         group.setSelected(opt);\\r\\n     }\\r\\n     if (opt.hasArg()) {\\r\\n         processArgs(opt, iter);\\r\\n     }\\r\\n     cmd.addOption(opt);\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2008","diff":"\"@@ -1,21 +1,21 @@\\n protected void processOption(String arg, ListIterator iter) throws ParseException {\\r\\n     boolean hasOption = getOptions().hasOption(arg);\\r\\n     if (!hasOption) {\\r\\n         throw new UnrecognizedOptionException(\\\"Unrecognized option: \\\" + arg);\\r\\n     }\\r\\n-    final Option opt = getOptions().getOption(arg);\\r\\n+    Option opt = (Option) getOptions().getOption(arg).clone();\\r\\n     if (opt.isRequired()) {\\r\\n         getRequiredOptions().remove(opt.getKey());\\r\\n     }\\r\\n     if (getOptions().getOptionGroup(opt) != null) {\\r\\n         OptionGroup group = getOptions().getOptionGroup(opt);\\r\\n         if (group.isRequired()) {\\r\\n             getRequiredOptions().remove(group);\\r\\n         }\\r\\n         group.setSelected(opt);\\r\\n     }\\r\\n     if (opt.hasArg()) {\\r\\n         processArgs(opt, iter);\\r\\n     }\\r\\n     cmd.addOption(opt);\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"bayard@apache.org","authorName":"Henri Yandell","commitYear":"2008","diff":"\"@@ -1,21 +1,21 @@\\n-private void processOption(String arg, ListIterator iter) throws ParseException {\\r\\n-    boolean hasOption = options.hasOption(arg);\\r\\n+protected void processOption(String arg, ListIterator iter) throws ParseException {\\r\\n+    boolean hasOption = getOptions().hasOption(arg);\\r\\n     if (!hasOption) {\\r\\n         throw new UnrecognizedOptionException(\\\"Unrecognized option: \\\" + arg);\\r\\n     }\\r\\n-    final Option opt = options.getOption(arg);\\r\\n+    final Option opt = getOptions().getOption(arg);\\r\\n     if (opt.isRequired()) {\\r\\n-        requiredOptions.remove(opt.getKey());\\r\\n+        getRequiredOptions().remove(opt.getKey());\\r\\n     }\\r\\n-    if (options.getOptionGroup(opt) != null) {\\r\\n-        OptionGroup group = options.getOptionGroup(opt);\\r\\n+    if (getOptions().getOptionGroup(opt) != null) {\\r\\n+        OptionGroup group = getOptions().getOptionGroup(opt);\\r\\n         if (group.isRequired()) {\\r\\n-            requiredOptions.remove(group);\\r\\n+            getRequiredOptions().remove(group);\\r\\n         }\\r\\n         group.setSelected(opt);\\r\\n     }\\r\\n     if (opt.hasArg()) {\\r\\n         processArgs(opt, iter);\\r\\n     }\\r\\n     cmd.addOption(opt);\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"roxspring@apache.org","authorName":"Robert James Oxspring","commitYear":"2005","diff":"\"@@ -1,23 +1,21 @@\\n private void processOption(String arg, ListIterator iter) throws ParseException {\\r\\n-    Option opt = null;\\r\\n     boolean hasOption = options.hasOption(arg);\\r\\n     if (!hasOption) {\\r\\n         throw new UnrecognizedOptionException(\\\"Unrecognized option: \\\" + arg);\\r\\n-    } else {\\r\\n-        opt = (Option) options.getOption(arg);\\r\\n     }\\r\\n+    final Option opt = options.getOption(arg);\\r\\n     if (opt.isRequired()) {\\r\\n         requiredOptions.remove(opt.getKey());\\r\\n     }\\r\\n     if (options.getOptionGroup(opt) != null) {\\r\\n-        OptionGroup group = (OptionGroup) options.getOptionGroup(opt);\\r\\n+        OptionGroup group = options.getOptionGroup(opt);\\r\\n         if (group.isRequired()) {\\r\\n             requiredOptions.remove(group);\\r\\n         }\\r\\n         group.setSelected(opt);\\r\\n     }\\r\\n     if (opt.hasArg()) {\\r\\n         processArgs(opt, iter);\\r\\n     }\\r\\n     cmd.addOption(opt);\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -1,23 +1,23 @@\\n private void processOption(String arg, ListIterator iter) throws ParseException {\\r\\n     Option opt = null;\\r\\n     boolean hasOption = options.hasOption(arg);\\r\\n     if (!hasOption) {\\r\\n         throw new UnrecognizedOptionException(\\\"Unrecognized option: \\\" + arg);\\r\\n     } else {\\r\\n         opt = (Option) options.getOption(arg);\\r\\n     }\\r\\n     if (opt.isRequired()) {\\r\\n-        requiredOptions.remove(\\\"-\\\" + opt.getOpt());\\r\\n+        requiredOptions.remove(opt.getKey());\\r\\n     }\\r\\n     if (options.getOptionGroup(opt) != null) {\\r\\n         OptionGroup group = (OptionGroup) options.getOptionGroup(opt);\\r\\n         if (group.isRequired()) {\\r\\n             requiredOptions.remove(group);\\r\\n         }\\r\\n         group.setSelected(opt);\\r\\n     }\\r\\n     if (opt.hasArg()) {\\r\\n         processArgs(opt, iter);\\r\\n     }\\r\\n     cmd.addOption(opt);\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -1,19 +1,23 @@\\n private void processOption(String arg, ListIterator iter) throws ParseException {\\r\\n     Option opt = null;\\r\\n     boolean hasOption = options.hasOption(arg);\\r\\n     if (!hasOption) {\\r\\n         throw new UnrecognizedOptionException(\\\"Unrecognized option: \\\" + arg);\\r\\n     } else {\\r\\n         opt = (Option) options.getOption(arg);\\r\\n     }\\r\\n     if (opt.isRequired()) {\\r\\n         requiredOptions.remove(\\\"-\\\" + opt.getOpt());\\r\\n     }\\r\\n     if (options.getOptionGroup(opt) != null) {\\r\\n-        ((OptionGroup) (options.getOptionGroup(opt))).setSelected(opt);\\r\\n+        OptionGroup group = (OptionGroup) options.getOptionGroup(opt);\\r\\n+        if (group.isRequired()) {\\r\\n+            requiredOptions.remove(group);\\r\\n+        }\\r\\n+        group.setSelected(opt);\\r\\n     }\\r\\n     if (opt.hasArg()) {\\r\\n         processArgs(opt, iter);\\r\\n     }\\r\\n     cmd.addOption(opt);\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -1,19 +1,19 @@\\n private void processOption(String arg, ListIterator iter) throws ParseException {\\r\\n     Option opt = null;\\r\\n     boolean hasOption = options.hasOption(arg);\\r\\n     if (!hasOption) {\\r\\n         throw new UnrecognizedOptionException(\\\"Unrecognized option: \\\" + arg);\\r\\n     } else {\\r\\n         opt = (Option) options.getOption(arg);\\r\\n     }\\r\\n     if (opt.isRequired()) {\\r\\n         requiredOptions.remove(\\\"-\\\" + opt.getOpt());\\r\\n     }\\r\\n     if (options.getOptionGroup(opt) != null) {\\r\\n         ((OptionGroup) (options.getOptionGroup(opt))).setSelected(opt);\\r\\n     }\\r\\n     if (opt.hasArg()) {\\r\\n         processArgs(opt, iter);\\r\\n     }\\r\\n-    cmd.setOpt(opt);\\r\\n+    cmd.addOption(opt);\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -1,16 +1,19 @@\\n private void processOption(String arg, ListIterator iter) throws ParseException {\\r\\n-    Option opt = (Option) options.getOption(arg);\\r\\n-    if (opt == null) {\\r\\n+    Option opt = null;\\r\\n+    boolean hasOption = options.hasOption(arg);\\r\\n+    if (!hasOption) {\\r\\n         throw new UnrecognizedOptionException(\\\"Unrecognized option: \\\" + arg);\\r\\n+    } else {\\r\\n+        opt = (Option) options.getOption(arg);\\r\\n     }\\r\\n     if (opt.isRequired()) {\\r\\n-        requiredOptions.remove(opt);\\r\\n+        requiredOptions.remove(\\\"-\\\" + opt.getOpt());\\r\\n     }\\r\\n     if (options.getOptionGroup(opt) != null) {\\r\\n         ((OptionGroup) (options.getOptionGroup(opt))).setSelected(opt);\\r\\n     }\\r\\n     if (opt.hasArg()) {\\r\\n         processArgs(opt, iter);\\r\\n     }\\r\\n     cmd.setOpt(opt);\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -1,20 +1,16 @@\\n private void processOption(String arg, ListIterator iter) throws ParseException {\\r\\n     Option opt = (Option) options.getOption(arg);\\r\\n     if (opt == null) {\\r\\n         throw new UnrecognizedOptionException(\\\"Unrecognized option: \\\" + arg);\\r\\n     }\\r\\n     if (opt.isRequired()) {\\r\\n         requiredOptions.remove(opt);\\r\\n     }\\r\\n     if (options.getOptionGroup(opt) != null) {\\r\\n         ((OptionGroup) (options.getOptionGroup(opt))).setSelected(opt);\\r\\n     }\\r\\n     if (opt.hasArg()) {\\r\\n-        if (opt.hasMultipleArgs()) {\\r\\n-            processMultipleArgs(opt, iter);\\r\\n-        } else {\\r\\n-            opt.addValue((String) iter.next());\\r\\n-        }\\r\\n+        processArgs(opt, iter);\\r\\n     }\\r\\n     cmd.setOpt(opt);\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -1,40 +1,20 @@\\n-private void processOption(String eachArg, Option option, ListIterator argIter, CommandLine cl) throws UnrecognizedOptionException, AlreadySelectedException, MissingArgumentException {\\r\\n-    if (option == null) {\\r\\n-        throw new UnrecognizedOptionException(\\\"Unrecognized option: \\\" + eachArg);\\r\\n-    } else {\\r\\n-        if (optionGroups.get(option) != null) {\\r\\n-            ((OptionGroup) (optionGroups.get(option))).setSelected(option);\\r\\n-        }\\r\\n-        if (option.isRequired()) {\\r\\n-            requiredOpts.remove(\\\"-\\\" + option.getOpt());\\r\\n-        }\\r\\n-        if (option.hasArg()) {\\r\\n-            if (argIter.hasNext()) {\\r\\n-                eachArg = (String) argIter.next();\\r\\n-                option.addValue(eachArg);\\r\\n-                if (option.hasMultipleArgs()) {\\r\\n-                    while (argIter.hasNext()) {\\r\\n-                        eachArg = (String) argIter.next();\\r\\n-                        if (eachArg.startsWith(\\\"-\\\")) {\\r\\n-                            argIter.previous();\\r\\n-                            cl.setOpt(option);\\r\\n-                            break;\\r\\n-                        } else {\\r\\n-                            option.addValue(eachArg);\\r\\n-                        }\\r\\n-                    }\\r\\n-                } else {\\r\\n-                    cl.setOpt(option);\\r\\n-                    return;\\r\\n-                }\\r\\n-                if (!argIter.hasNext()) {\\r\\n-                    cl.setOpt(option);\\r\\n-                }\\r\\n-            } else {\\r\\n-                throw new MissingArgumentException(eachArg + \\\" requires an argument.\\\");\\r\\n-            }\\r\\n+private void processOption(String arg, ListIterator iter) throws ParseException {\\r\\n+    Option opt = (Option) options.getOption(arg);\\r\\n+    if (opt == null) {\\r\\n+        throw new UnrecognizedOptionException(\\\"Unrecognized option: \\\" + arg);\\r\\n+    }\\r\\n+    if (opt.isRequired()) {\\r\\n+        requiredOptions.remove(opt);\\r\\n+    }\\r\\n+    if (options.getOptionGroup(opt) != null) {\\r\\n+        ((OptionGroup) (options.getOptionGroup(opt))).setSelected(opt);\\r\\n+    }\\r\\n+    if (opt.hasArg()) {\\r\\n+        if (opt.hasMultipleArgs()) {\\r\\n+            processMultipleArgs(opt, iter);\\r\\n         } else {\\r\\n-            cl.setOpt(option);\\r\\n+            opt.addValue((String) iter.next());\\r\\n         }\\r\\n     }\\r\\n+    cmd.setOpt(opt);\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"\""},{"authorEmail":"jstrachan@apache.org","authorName":"James Strachan","commitYear":"2002","diff":"\"@@ -0,0 +1,40 @@\\n+private void processOption(String eachArg, Option option, ListIterator argIter, CommandLine cl) throws UnrecognizedOptionException, AlreadySelectedException, MissingArgumentException {\\r\\n+    if (option == null) {\\r\\n+        throw new UnrecognizedOptionException(\\\"Unrecognized option: \\\" + eachArg);\\r\\n+    } else {\\r\\n+        if (optionGroups.get(option) != null) {\\r\\n+            ((OptionGroup) (optionGroups.get(option))).setSelected(option);\\r\\n+        }\\r\\n+        if (option.isRequired()) {\\r\\n+            requiredOpts.remove(\\\"-\\\" + option.getOpt());\\r\\n+        }\\r\\n+        if (option.hasArg()) {\\r\\n+            if (argIter.hasNext()) {\\r\\n+                eachArg = (String) argIter.next();\\r\\n+                option.addValue(eachArg);\\r\\n+                if (option.hasMultipleArgs()) {\\r\\n+                    while (argIter.hasNext()) {\\r\\n+                        eachArg = (String) argIter.next();\\r\\n+                        if (eachArg.startsWith(\\\"-\\\")) {\\r\\n+                            argIter.previous();\\r\\n+                            cl.setOpt(option);\\r\\n+                            break;\\r\\n+                        } else {\\r\\n+                            option.addValue(eachArg);\\r\\n+                        }\\r\\n+                    }\\r\\n+                } else {\\r\\n+                    cl.setOpt(option);\\r\\n+                    return;\\r\\n+                }\\r\\n+                if (!argIter.hasNext()) {\\r\\n+                    cl.setOpt(option);\\r\\n+                }\\r\\n+            } else {\\r\\n+                throw new MissingArgumentException(eachArg + \\\" requires an argument.\\\");\\r\\n+            }\\r\\n+        } else {\\r\\n+            cl.setOpt(option);\\r\\n+        }\\r\\n+    }\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\main\java\org\apache\commons\cli\Parser.java	processProperties	org.apache.commons.cli.Parser.processProperties(Properties)	298	337	19	[{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"\""},{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"\""},{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"\""},{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2019","diff":"\"\""},{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,29 +1,29 @@\\n-protected void processProperties(Properties properties) throws ParseException {\\r\\n+protected void processProperties(final Properties properties) throws ParseException {\\r\\n     if (properties == null) {\\r\\n         return;\\r\\n     }\\r\\n     for (final Enumeration<?> e = properties.propertyNames(); e.hasMoreElements(); ) {\\r\\n         final String option = e.nextElement().toString();\\r\\n         final Option opt = options.getOption(option);\\r\\n         if (opt == null) {\\r\\n             throw new UnrecognizedOptionException(\\\"Default option wasn't defined\\\", option);\\r\\n         }\\r\\n         final OptionGroup group = options.getOptionGroup(opt);\\r\\n         final boolean selected = group != null && group.getSelected() != null;\\r\\n         if (!cmd.hasOption(option) && !selected) {\\r\\n             final String value = properties.getProperty(option);\\r\\n             if (opt.hasArg()) {\\r\\n                 if (opt.getValues() == null || opt.getValues().length == 0) {\\r\\n                     try {\\r\\n                         opt.addValueForProcessing(value);\\r\\n                     } catch (final RuntimeException exp) {\\r\\n                     }\\r\\n                 }\\r\\n             } else if (!(\\\"yes\\\".equalsIgnoreCase(value) || \\\"true\\\".equalsIgnoreCase(value) || \\\"1\\\".equalsIgnoreCase(value))) {\\r\\n                 continue;\\r\\n             }\\r\\n             cmd.addOption(opt);\\r\\n             updateRequiredOptions(opt);\\r\\n         }\\r\\n     }\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,29 +1,29 @@\\n protected void processProperties(Properties properties) throws ParseException {\\r\\n     if (properties == null) {\\r\\n         return;\\r\\n     }\\r\\n-    for (Enumeration<?> e = properties.propertyNames(); e.hasMoreElements(); ) {\\r\\n-        String option = e.nextElement().toString();\\r\\n-        Option opt = options.getOption(option);\\r\\n+    for (final Enumeration<?> e = properties.propertyNames(); e.hasMoreElements(); ) {\\r\\n+        final String option = e.nextElement().toString();\\r\\n+        final Option opt = options.getOption(option);\\r\\n         if (opt == null) {\\r\\n             throw new UnrecognizedOptionException(\\\"Default option wasn't defined\\\", option);\\r\\n         }\\r\\n-        OptionGroup group = options.getOptionGroup(opt);\\r\\n-        boolean selected = group != null && group.getSelected() != null;\\r\\n+        final OptionGroup group = options.getOptionGroup(opt);\\r\\n+        final boolean selected = group != null && group.getSelected() != null;\\r\\n         if (!cmd.hasOption(option) && !selected) {\\r\\n-            String value = properties.getProperty(option);\\r\\n+            final String value = properties.getProperty(option);\\r\\n             if (opt.hasArg()) {\\r\\n                 if (opt.getValues() == null || opt.getValues().length == 0) {\\r\\n                     try {\\r\\n                         opt.addValueForProcessing(value);\\r\\n-                    } catch (RuntimeException exp) {\\r\\n+                    } catch (final RuntimeException exp) {\\r\\n                     }\\r\\n                 }\\r\\n             } else if (!(\\\"yes\\\".equalsIgnoreCase(value) || \\\"true\\\".equalsIgnoreCase(value) || \\\"1\\\".equalsIgnoreCase(value))) {\\r\\n                 continue;\\r\\n             }\\r\\n             cmd.addOption(opt);\\r\\n             updateRequiredOptions(opt);\\r\\n         }\\r\\n     }\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"britter@apache.org","authorName":"Benedikt Ritter","commitYear":"2015","diff":"\"\""},{"authorEmail":"tn@apache.org","authorName":"Thomas Neidhart","commitYear":"2013","diff":"\"\""},{"authorEmail":"tn@apache.org","authorName":"Thomas Neidhart","commitYear":"2013","diff":"\"@@ -1,29 +1,29 @@\\n protected void processProperties(Properties properties) throws ParseException {\\r\\n     if (properties == null) {\\r\\n         return;\\r\\n     }\\r\\n-    for (Enumeration e = properties.propertyNames(); e.hasMoreElements(); ) {\\r\\n+    for (Enumeration<?> e = properties.propertyNames(); e.hasMoreElements(); ) {\\r\\n         String option = e.nextElement().toString();\\r\\n         Option opt = options.getOption(option);\\r\\n         if (opt == null) {\\r\\n             throw new UnrecognizedOptionException(\\\"Default option wasn't defined\\\", option);\\r\\n         }\\r\\n         OptionGroup group = options.getOptionGroup(opt);\\r\\n         boolean selected = group != null && group.getSelected() != null;\\r\\n         if (!cmd.hasOption(option) && !selected) {\\r\\n             String value = properties.getProperty(option);\\r\\n             if (opt.hasArg()) {\\r\\n                 if (opt.getValues() == null || opt.getValues().length == 0) {\\r\\n                     try {\\r\\n                         opt.addValueForProcessing(value);\\r\\n                     } catch (RuntimeException exp) {\\r\\n                     }\\r\\n                 }\\r\\n             } else if (!(\\\"yes\\\".equalsIgnoreCase(value) || \\\"true\\\".equalsIgnoreCase(value) || \\\"1\\\".equalsIgnoreCase(value))) {\\r\\n                 continue;\\r\\n             }\\r\\n             cmd.addOption(opt);\\r\\n             updateRequiredOptions(opt);\\r\\n         }\\r\\n     }\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2010","diff":"\"@@ -1,24 +1,29 @@\\n protected void processProperties(Properties properties) throws ParseException {\\r\\n     if (properties == null) {\\r\\n         return;\\r\\n     }\\r\\n     for (Enumeration e = properties.propertyNames(); e.hasMoreElements(); ) {\\r\\n         String option = e.nextElement().toString();\\r\\n-        if (!cmd.hasOption(option)) {\\r\\n-            Option opt = getOptions().getOption(option);\\r\\n+        Option opt = options.getOption(option);\\r\\n+        if (opt == null) {\\r\\n+            throw new UnrecognizedOptionException(\\\"Default option wasn't defined\\\", option);\\r\\n+        }\\r\\n+        OptionGroup group = options.getOptionGroup(opt);\\r\\n+        boolean selected = group != null && group.getSelected() != null;\\r\\n+        if (!cmd.hasOption(option) && !selected) {\\r\\n             String value = properties.getProperty(option);\\r\\n             if (opt.hasArg()) {\\r\\n                 if (opt.getValues() == null || opt.getValues().length == 0) {\\r\\n                     try {\\r\\n                         opt.addValueForProcessing(value);\\r\\n                     } catch (RuntimeException exp) {\\r\\n                     }\\r\\n                 }\\r\\n             } else if (!(\\\"yes\\\".equalsIgnoreCase(value) || \\\"true\\\".equalsIgnoreCase(value) || \\\"1\\\".equalsIgnoreCase(value))) {\\r\\n                 continue;\\r\\n             }\\r\\n             cmd.addOption(opt);\\r\\n             updateRequiredOptions(opt);\\r\\n         }\\r\\n     }\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2010","diff":"\"@@ -1,23 +1,24 @@\\n-protected void processProperties(Properties properties) {\\r\\n+protected void processProperties(Properties properties) throws ParseException {\\r\\n     if (properties == null) {\\r\\n         return;\\r\\n     }\\r\\n     for (Enumeration e = properties.propertyNames(); e.hasMoreElements(); ) {\\r\\n         String option = e.nextElement().toString();\\r\\n         if (!cmd.hasOption(option)) {\\r\\n             Option opt = getOptions().getOption(option);\\r\\n             String value = properties.getProperty(option);\\r\\n             if (opt.hasArg()) {\\r\\n                 if (opt.getValues() == null || opt.getValues().length == 0) {\\r\\n                     try {\\r\\n                         opt.addValueForProcessing(value);\\r\\n                     } catch (RuntimeException exp) {\\r\\n                     }\\r\\n                 }\\r\\n             } else if (!(\\\"yes\\\".equalsIgnoreCase(value) || \\\"true\\\".equalsIgnoreCase(value) || \\\"1\\\".equalsIgnoreCase(value))) {\\r\\n                 continue;\\r\\n             }\\r\\n             cmd.addOption(opt);\\r\\n+            updateRequiredOptions(opt);\\r\\n         }\\r\\n     }\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2010","diff":"\"@@ -1,23 +1,23 @@\\n protected void processProperties(Properties properties) {\\r\\n     if (properties == null) {\\r\\n         return;\\r\\n     }\\r\\n     for (Enumeration e = properties.propertyNames(); e.hasMoreElements(); ) {\\r\\n         String option = e.nextElement().toString();\\r\\n         if (!cmd.hasOption(option)) {\\r\\n             Option opt = getOptions().getOption(option);\\r\\n             String value = properties.getProperty(option);\\r\\n             if (opt.hasArg()) {\\r\\n                 if (opt.getValues() == null || opt.getValues().length == 0) {\\r\\n                     try {\\r\\n                         opt.addValueForProcessing(value);\\r\\n                     } catch (RuntimeException exp) {\\r\\n                     }\\r\\n                 }\\r\\n             } else if (!(\\\"yes\\\".equalsIgnoreCase(value) || \\\"true\\\".equalsIgnoreCase(value) || \\\"1\\\".equalsIgnoreCase(value))) {\\r\\n-                break;\\r\\n+                continue;\\r\\n             }\\r\\n             cmd.addOption(opt);\\r\\n         }\\r\\n     }\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2008","diff":"\"@@ -1,23 +1,23 @@\\n protected void processProperties(Properties properties) {\\r\\n     if (properties == null) {\\r\\n         return;\\r\\n     }\\r\\n     for (Enumeration e = properties.propertyNames(); e.hasMoreElements(); ) {\\r\\n         String option = e.nextElement().toString();\\r\\n         if (!cmd.hasOption(option)) {\\r\\n             Option opt = getOptions().getOption(option);\\r\\n             String value = properties.getProperty(option);\\r\\n             if (opt.hasArg()) {\\r\\n-                if ((opt.getValues() == null) || (opt.getValues().length == 0)) {\\r\\n+                if (opt.getValues() == null || opt.getValues().length == 0) {\\r\\n                     try {\\r\\n                         opt.addValueForProcessing(value);\\r\\n                     } catch (RuntimeException exp) {\\r\\n                     }\\r\\n                 }\\r\\n             } else if (!(\\\"yes\\\".equalsIgnoreCase(value) || \\\"true\\\".equalsIgnoreCase(value) || \\\"1\\\".equalsIgnoreCase(value))) {\\r\\n                 break;\\r\\n             }\\r\\n             cmd.addOption(opt);\\r\\n         }\\r\\n     }\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"bayard@apache.org","authorName":"Henri Yandell","commitYear":"2008","diff":"\"@@ -1,23 +1,23 @@\\n-private void processProperties(Properties properties) {\\r\\n+protected void processProperties(Properties properties) {\\r\\n     if (properties == null) {\\r\\n         return;\\r\\n     }\\r\\n     for (Enumeration e = properties.propertyNames(); e.hasMoreElements(); ) {\\r\\n         String option = e.nextElement().toString();\\r\\n         if (!cmd.hasOption(option)) {\\r\\n-            Option opt = options.getOption(option);\\r\\n+            Option opt = getOptions().getOption(option);\\r\\n             String value = properties.getProperty(option);\\r\\n             if (opt.hasArg()) {\\r\\n                 if ((opt.getValues() == null) || (opt.getValues().length == 0)) {\\r\\n                     try {\\r\\n                         opt.addValueForProcessing(value);\\r\\n                     } catch (RuntimeException exp) {\\r\\n                     }\\r\\n                 }\\r\\n             } else if (!(\\\"yes\\\".equalsIgnoreCase(value) || \\\"true\\\".equalsIgnoreCase(value) || \\\"1\\\".equalsIgnoreCase(value))) {\\r\\n                 break;\\r\\n             }\\r\\n             cmd.addOption(opt);\\r\\n         }\\r\\n     }\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"bayard@apache.org","authorName":"Henri Yandell","commitYear":"2007","diff":"\"@@ -1,23 +1,23 @@\\n private void processProperties(Properties properties) {\\r\\n     if (properties == null) {\\r\\n         return;\\r\\n     }\\r\\n     for (Enumeration e = properties.propertyNames(); e.hasMoreElements(); ) {\\r\\n         String option = e.nextElement().toString();\\r\\n         if (!cmd.hasOption(option)) {\\r\\n             Option opt = options.getOption(option);\\r\\n             String value = properties.getProperty(option);\\r\\n             if (opt.hasArg()) {\\r\\n                 if ((opt.getValues() == null) || (opt.getValues().length == 0)) {\\r\\n                     try {\\r\\n-                        opt.addValue(value);\\r\\n+                        opt.addValueForProcessing(value);\\r\\n                     } catch (RuntimeException exp) {\\r\\n                     }\\r\\n                 }\\r\\n             } else if (!(\\\"yes\\\".equalsIgnoreCase(value) || \\\"true\\\".equalsIgnoreCase(value) || \\\"1\\\".equalsIgnoreCase(value))) {\\r\\n                 break;\\r\\n             }\\r\\n             cmd.addOption(opt);\\r\\n         }\\r\\n     }\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"roxspring@apache.org","authorName":"Robert James Oxspring","commitYear":"2004","diff":"\"@@ -1,23 +1,23 @@\\n private void processProperties(Properties properties) {\\r\\n     if (properties == null) {\\r\\n         return;\\r\\n     }\\r\\n     for (Enumeration e = properties.propertyNames(); e.hasMoreElements(); ) {\\r\\n         String option = e.nextElement().toString();\\r\\n         if (!cmd.hasOption(option)) {\\r\\n             Option opt = options.getOption(option);\\r\\n             String value = properties.getProperty(option);\\r\\n-            if (opt.hasArgs()) {\\r\\n+            if (opt.hasArg()) {\\r\\n                 if ((opt.getValues() == null) || (opt.getValues().length == 0)) {\\r\\n                     try {\\r\\n                         opt.addValue(value);\\r\\n                     } catch (RuntimeException exp) {\\r\\n                     }\\r\\n                 }\\r\\n             } else if (!(\\\"yes\\\".equalsIgnoreCase(value) || \\\"true\\\".equalsIgnoreCase(value) || \\\"1\\\".equalsIgnoreCase(value))) {\\r\\n                 break;\\r\\n             }\\r\\n             cmd.addOption(opt);\\r\\n         }\\r\\n     }\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -1,23 +1,23 @@\\n private void processProperties(Properties properties) {\\r\\n     if (properties == null) {\\r\\n         return;\\r\\n     }\\r\\n     for (Enumeration e = properties.propertyNames(); e.hasMoreElements(); ) {\\r\\n         String option = e.nextElement().toString();\\r\\n         if (!cmd.hasOption(option)) {\\r\\n             Option opt = options.getOption(option);\\r\\n             String value = properties.getProperty(option);\\r\\n             if (opt.hasArgs()) {\\r\\n-                if (opt.getValues() == null || opt.getValues().length == 0) {\\r\\n+                if ((opt.getValues() == null) || (opt.getValues().length == 0)) {\\r\\n                     try {\\r\\n                         opt.addValue(value);\\r\\n                     } catch (RuntimeException exp) {\\r\\n                     }\\r\\n                 }\\r\\n             } else if (!(\\\"yes\\\".equalsIgnoreCase(value) || \\\"true\\\".equalsIgnoreCase(value) || \\\"1\\\".equalsIgnoreCase(value))) {\\r\\n                 break;\\r\\n             }\\r\\n             cmd.addOption(opt);\\r\\n         }\\r\\n     }\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -1,15 +1,23 @@\\n private void processProperties(Properties properties) {\\r\\n     if (properties == null) {\\r\\n         return;\\r\\n     }\\r\\n     for (Enumeration e = properties.propertyNames(); e.hasMoreElements(); ) {\\r\\n         String option = e.nextElement().toString();\\r\\n         if (!cmd.hasOption(option)) {\\r\\n             Option opt = options.getOption(option);\\r\\n-            if (opt.getValues() == null || opt.getValues().length == 0) {\\r\\n-                opt.addValue(properties.getProperty(option));\\r\\n+            String value = properties.getProperty(option);\\r\\n+            if (opt.hasArgs()) {\\r\\n+                if (opt.getValues() == null || opt.getValues().length == 0) {\\r\\n+                    try {\\r\\n+                        opt.addValue(value);\\r\\n+                    } catch (RuntimeException exp) {\\r\\n+                    }\\r\\n+                }\\r\\n+            } else if (!(\\\"yes\\\".equalsIgnoreCase(value) || \\\"true\\\".equalsIgnoreCase(value) || \\\"1\\\".equalsIgnoreCase(value))) {\\r\\n+                break;\\r\\n             }\\r\\n             cmd.addOption(opt);\\r\\n         }\\r\\n     }\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -0,0 +1,15 @@\\n+private void processProperties(Properties properties) {\\r\\n+    if (properties == null) {\\r\\n+        return;\\r\\n+    }\\r\\n+    for (Enumeration e = properties.propertyNames(); e.hasMoreElements(); ) {\\r\\n+        String option = e.nextElement().toString();\\r\\n+        if (!cmd.hasOption(option)) {\\r\\n+            Option opt = options.getOption(option);\\r\\n+            if (opt.getValues() == null || opt.getValues().length == 0) {\\r\\n+                opt.addValue(properties.getProperty(option));\\r\\n+            }\\r\\n+            cmd.addOption(opt);\\r\\n+        }\\r\\n+    }\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\main\java\org\apache\commons\cli\Parser.java	setOptions	org.apache.commons.cli.Parser.setOptions(Options)	344	347	1	[{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2023","diff":"\"\""},{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"@@ -1,4 +1,4 @@\\n protected void setOptions(final Options options) {\\r\\n     this.options = options;\\r\\n-    this.requiredOptions = new ArrayList(options.getRequiredOptions());\\r\\n+    this.requiredOptions = new ArrayList<>(options.getRequiredOptions());\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,4 +1,4 @@\\n-protected void setOptions(Options options) {\\r\\n+protected void setOptions(final Options options) {\\r\\n     this.options = options;\\r\\n     this.requiredOptions = new ArrayList(options.getRequiredOptions());\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2011","diff":"\"@@ -1,4 +1,4 @@\\n-protected void setOptions(final Options options) {\\r\\n+protected void setOptions(Options options) {\\r\\n     this.options = options;\\r\\n     this.requiredOptions = new ArrayList(options.getRequiredOptions());\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2008","diff":"\"@@ -1,4 +1,4 @@\\n protected void setOptions(final Options options) {\\r\\n     this.options = options;\\r\\n-    this.requiredOptions = options.getRequiredOptions();\\r\\n+    this.requiredOptions = new ArrayList(options.getRequiredOptions());\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"bayard@apache.org","authorName":"Henri Yandell","commitYear":"2008","diff":"\"@@ -0,0 +1,4 @@\\n+protected void setOptions(final Options options) {\\r\\n+    this.options = options;\\r\\n+    this.requiredOptions = options.getRequiredOptions();\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\main\java\org\apache\commons\cli\Parser.java	updateRequiredOptions	org.apache.commons.cli.Parser.updateRequiredOptions(Option)	354	372	4	[{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"\""},{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,12 +1,12 @@\\n-private void updateRequiredOptions(Option opt) throws ParseException {\\r\\n+private void updateRequiredOptions(final Option opt) throws ParseException {\\r\\n     if (opt.isRequired()) {\\r\\n         getRequiredOptions().remove(opt.getKey());\\r\\n     }\\r\\n     if (getOptions().getOptionGroup(opt) != null) {\\r\\n         final OptionGroup group = getOptions().getOptionGroup(opt);\\r\\n         if (group.isRequired()) {\\r\\n             getRequiredOptions().remove(group);\\r\\n         }\\r\\n         group.setSelected(opt);\\r\\n     }\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,12 +1,12 @@\\n private void updateRequiredOptions(Option opt) throws ParseException {\\r\\n     if (opt.isRequired()) {\\r\\n         getRequiredOptions().remove(opt.getKey());\\r\\n     }\\r\\n     if (getOptions().getOptionGroup(opt) != null) {\\r\\n-        OptionGroup group = getOptions().getOptionGroup(opt);\\r\\n+        final OptionGroup group = getOptions().getOptionGroup(opt);\\r\\n         if (group.isRequired()) {\\r\\n             getRequiredOptions().remove(group);\\r\\n         }\\r\\n         group.setSelected(opt);\\r\\n     }\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2010","diff":"\"@@ -0,0 +1,12 @@\\n+private void updateRequiredOptions(Option opt) throws ParseException {\\r\\n+    if (opt.isRequired()) {\\r\\n+        getRequiredOptions().remove(opt.getKey());\\r\\n+    }\\r\\n+    if (getOptions().getOptionGroup(opt) != null) {\\r\\n+        OptionGroup group = getOptions().getOptionGroup(opt);\\r\\n+        if (group.isRequired()) {\\r\\n+            getRequiredOptions().remove(group);\\r\\n+        }\\r\\n+        group.setSelected(opt);\\r\\n+    }\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\main\java\org\apache\commons\cli\PatternOptionBuilder.java	getValueClass	org.apache.commons.cli.PatternOptionBuilder.getValueClass(char)	112	135	19	[{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"\""},{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"\""},{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,23 +1,23 @@\\n-public static Object getValueClass(char ch) {\\r\\n+public static Object getValueClass(final char ch) {\\r\\n     switch(ch) {\\r\\n         case '@':\\r\\n             return PatternOptionBuilder.OBJECT_VALUE;\\r\\n         case ':':\\r\\n             return PatternOptionBuilder.STRING_VALUE;\\r\\n         case '%':\\r\\n             return PatternOptionBuilder.NUMBER_VALUE;\\r\\n         case '+':\\r\\n             return PatternOptionBuilder.CLASS_VALUE;\\r\\n         case '#':\\r\\n             return PatternOptionBuilder.DATE_VALUE;\\r\\n         case '<':\\r\\n             return PatternOptionBuilder.EXISTING_FILE_VALUE;\\r\\n         case '>':\\r\\n             return PatternOptionBuilder.FILE_VALUE;\\r\\n         case '*':\\r\\n             return PatternOptionBuilder.FILES_VALUE;\\r\\n         case '/':\\r\\n             return PatternOptionBuilder.URL_VALUE;\\r\\n     }\\r\\n     return null;\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"tn@apache.org","authorName":"Thomas Neidhart","commitYear":"2013","diff":"\"@@ -1,23 +1,23 @@\\n-public static Class getValueClass(char ch) {\\r\\n+public static Object getValueClass(char ch) {\\r\\n     switch(ch) {\\r\\n         case '@':\\r\\n             return PatternOptionBuilder.OBJECT_VALUE;\\r\\n         case ':':\\r\\n             return PatternOptionBuilder.STRING_VALUE;\\r\\n         case '%':\\r\\n             return PatternOptionBuilder.NUMBER_VALUE;\\r\\n         case '+':\\r\\n             return PatternOptionBuilder.CLASS_VALUE;\\r\\n         case '#':\\r\\n             return PatternOptionBuilder.DATE_VALUE;\\r\\n         case '<':\\r\\n             return PatternOptionBuilder.EXISTING_FILE_VALUE;\\r\\n         case '>':\\r\\n             return PatternOptionBuilder.FILE_VALUE;\\r\\n         case '*':\\r\\n             return PatternOptionBuilder.FILES_VALUE;\\r\\n         case '/':\\r\\n             return PatternOptionBuilder.URL_VALUE;\\r\\n     }\\r\\n     return null;\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2011","diff":"\"@@ -1,23 +1,23 @@\\n-public static Object getValueClass(char ch) {\\r\\n+public static Class getValueClass(char ch) {\\r\\n     switch(ch) {\\r\\n         case '@':\\r\\n             return PatternOptionBuilder.OBJECT_VALUE;\\r\\n         case ':':\\r\\n             return PatternOptionBuilder.STRING_VALUE;\\r\\n         case '%':\\r\\n             return PatternOptionBuilder.NUMBER_VALUE;\\r\\n         case '+':\\r\\n             return PatternOptionBuilder.CLASS_VALUE;\\r\\n         case '#':\\r\\n             return PatternOptionBuilder.DATE_VALUE;\\r\\n         case '<':\\r\\n             return PatternOptionBuilder.EXISTING_FILE_VALUE;\\r\\n         case '>':\\r\\n             return PatternOptionBuilder.FILE_VALUE;\\r\\n         case '*':\\r\\n             return PatternOptionBuilder.FILES_VALUE;\\r\\n         case '/':\\r\\n             return PatternOptionBuilder.URL_VALUE;\\r\\n     }\\r\\n     return null;\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2008","diff":"\"@@ -1,22 +1,23 @@\\n public static Object getValueClass(char ch) {\\r\\n-    if (ch == '@') {\\r\\n-        return PatternOptionBuilder.OBJECT_VALUE;\\r\\n-    } else if (ch == ':') {\\r\\n-        return PatternOptionBuilder.STRING_VALUE;\\r\\n-    } else if (ch == '%') {\\r\\n-        return PatternOptionBuilder.NUMBER_VALUE;\\r\\n-    } else if (ch == '+') {\\r\\n-        return PatternOptionBuilder.CLASS_VALUE;\\r\\n-    } else if (ch == '#') {\\r\\n-        return PatternOptionBuilder.DATE_VALUE;\\r\\n-    } else if (ch == '<') {\\r\\n-        return PatternOptionBuilder.EXISTING_FILE_VALUE;\\r\\n-    } else if (ch == '>') {\\r\\n-        return PatternOptionBuilder.FILE_VALUE;\\r\\n-    } else if (ch == '*') {\\r\\n-        return PatternOptionBuilder.FILES_VALUE;\\r\\n-    } else if (ch == '/') {\\r\\n-        return PatternOptionBuilder.URL_VALUE;\\r\\n+    switch(ch) {\\r\\n+        case '@':\\r\\n+            return PatternOptionBuilder.OBJECT_VALUE;\\r\\n+        case ':':\\r\\n+            return PatternOptionBuilder.STRING_VALUE;\\r\\n+        case '%':\\r\\n+            return PatternOptionBuilder.NUMBER_VALUE;\\r\\n+        case '+':\\r\\n+            return PatternOptionBuilder.CLASS_VALUE;\\r\\n+        case '#':\\r\\n+            return PatternOptionBuilder.DATE_VALUE;\\r\\n+        case '<':\\r\\n+            return PatternOptionBuilder.EXISTING_FILE_VALUE;\\r\\n+        case '>':\\r\\n+            return PatternOptionBuilder.FILE_VALUE;\\r\\n+        case '*':\\r\\n+            return PatternOptionBuilder.FILES_VALUE;\\r\\n+        case '/':\\r\\n+            return PatternOptionBuilder.URL_VALUE;\\r\\n     }\\r\\n     return null;\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"\""},{"authorEmail":"jstrachan@apache.org","authorName":"James Strachan","commitYear":"2002","diff":"\"@@ -0,0 +1,22 @@\\n+public static Object getValueClass(char ch) {\\r\\n+    if (ch == '@') {\\r\\n+        return PatternOptionBuilder.OBJECT_VALUE;\\r\\n+    } else if (ch == ':') {\\r\\n+        return PatternOptionBuilder.STRING_VALUE;\\r\\n+    } else if (ch == '%') {\\r\\n+        return PatternOptionBuilder.NUMBER_VALUE;\\r\\n+    } else if (ch == '+') {\\r\\n+        return PatternOptionBuilder.CLASS_VALUE;\\r\\n+    } else if (ch == '#') {\\r\\n+        return PatternOptionBuilder.DATE_VALUE;\\r\\n+    } else if (ch == '<') {\\r\\n+        return PatternOptionBuilder.EXISTING_FILE_VALUE;\\r\\n+    } else if (ch == '>') {\\r\\n+        return PatternOptionBuilder.FILE_VALUE;\\r\\n+    } else if (ch == '*') {\\r\\n+        return PatternOptionBuilder.FILES_VALUE;\\r\\n+    } else if (ch == '/') {\\r\\n+        return PatternOptionBuilder.URL_VALUE;\\r\\n+    }\\r\\n+    return null;\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\main\java\org\apache\commons\cli\PatternOptionBuilder.java	isValueCode	org.apache.commons.cli.PatternOptionBuilder.isValueCode(char)	143	145	10	[{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"\""},{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"\""},{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,3 +1,3 @@\\n-public static boolean isValueCode(char ch) {\\r\\n+public static boolean isValueCode(final char ch) {\\r\\n     return ch == '@' || ch == ':' || ch == '%' || ch == '+' || ch == '#' || ch == '<' || ch == '>' || ch == '*' || ch == '/' || ch == '!';\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2008","diff":"\"@@ -1,6 +1,3 @@\\n public static boolean isValueCode(char ch) {\\r\\n-    if ((ch != '@') && (ch != ':') && (ch != '%') && (ch != '+') && (ch != '#') && (ch != '<') && (ch != '>') && (ch != '*') && (ch != '/') && (ch != '!')) {\\r\\n-        return false;\\r\\n-    }\\r\\n-    return true;\\r\\n+    return ch == '@' || ch == ':' || ch == '%' || ch == '+' || ch == '#' || ch == '<' || ch == '>' || ch == '*' || ch == '/' || ch == '!';\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"roxspring@apache.org","authorName":"Robert James Oxspring","commitYear":"2004","diff":"\"@@ -1,6 +1,6 @@\\n public static boolean isValueCode(char ch) {\\r\\n-    if ((ch != '@') && (ch != ':') && (ch != '%') && (ch != '+') && (ch != '#') && (ch != '<') && (ch != '>') && (ch != '*') && (ch != '/')) {\\r\\n+    if ((ch != '@') && (ch != ':') && (ch != '%') && (ch != '+') && (ch != '#') && (ch != '<') && (ch != '>') && (ch != '*') && (ch != '/') && (ch != '!')) {\\r\\n         return false;\\r\\n     }\\r\\n     return true;\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"\""},{"authorEmail":"jstrachan@apache.org","authorName":"James Strachan","commitYear":"2002","diff":"\"@@ -0,0 +1,6 @@\\n+public static boolean isValueCode(char ch) {\\r\\n+    if ((ch != '@') && (ch != ':') && (ch != '%') && (ch != '+') && (ch != '#') && (ch != '<') && (ch != '>') && (ch != '*') && (ch != '/')) {\\r\\n+        return false;\\r\\n+    }\\r\\n+    return true;\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\main\java\org\apache\commons\cli\PatternOptionBuilder.java	parsePattern	org.apache.commons.cli.PatternOptionBuilder.parsePattern(String)	153	191	8	[{"authorEmail":"arturobernalg@gmail.com","authorName":"Arturo Bernal","commitYear":"2023","diff":"\"@@ -1,28 +1,27 @@\\n public static Options parsePattern(final String pattern) {\\r\\n     char opt = ' ';\\r\\n     boolean required = false;\\r\\n     Class<?> type = null;\\r\\n     final Options options = new Options();\\r\\n     for (int i = 0; i < pattern.length(); i++) {\\r\\n         final char ch = pattern.charAt(i);\\r\\n         if (!isValueCode(ch)) {\\r\\n             if (opt != ' ') {\\r\\n                 final Option option = Option.builder(String.valueOf(opt)).hasArg(type != null).required(required).type(type).build();\\r\\n                 options.addOption(option);\\r\\n                 required = false;\\r\\n                 type = null;\\r\\n-                opt = ' ';\\r\\n             }\\r\\n             opt = ch;\\r\\n         } else if (ch == '!') {\\r\\n             required = true;\\r\\n         } else {\\r\\n             type = (Class<?>) getValueClass(ch);\\r\\n         }\\r\\n     }\\r\\n     if (opt != ' ') {\\r\\n         final Option option = Option.builder(String.valueOf(opt)).hasArg(type != null).required(required).type(type).build();\\r\\n         options.addOption(option);\\r\\n     }\\r\\n     return options;\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"\""},{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"\""},{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2019","diff":"\"\""},{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,28 +1,28 @@\\n-public static Options parsePattern(String pattern) {\\r\\n+public static Options parsePattern(final String pattern) {\\r\\n     char opt = ' ';\\r\\n     boolean required = false;\\r\\n     Class<?> type = null;\\r\\n     final Options options = new Options();\\r\\n     for (int i = 0; i < pattern.length(); i++) {\\r\\n         final char ch = pattern.charAt(i);\\r\\n         if (!isValueCode(ch)) {\\r\\n             if (opt != ' ') {\\r\\n                 final Option option = Option.builder(String.valueOf(opt)).hasArg(type != null).required(required).type(type).build();\\r\\n                 options.addOption(option);\\r\\n                 required = false;\\r\\n                 type = null;\\r\\n                 opt = ' ';\\r\\n             }\\r\\n             opt = ch;\\r\\n         } else if (ch == '!') {\\r\\n             required = true;\\r\\n         } else {\\r\\n             type = (Class<?>) getValueClass(ch);\\r\\n         }\\r\\n     }\\r\\n     if (opt != ' ') {\\r\\n         final Option option = Option.builder(String.valueOf(opt)).hasArg(type != null).required(required).type(type).build();\\r\\n         options.addOption(option);\\r\\n     }\\r\\n     return options;\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,28 +1,28 @@\\n public static Options parsePattern(String pattern) {\\r\\n     char opt = ' ';\\r\\n     boolean required = false;\\r\\n     Class<?> type = null;\\r\\n-    Options options = new Options();\\r\\n+    final Options options = new Options();\\r\\n     for (int i = 0; i < pattern.length(); i++) {\\r\\n-        char ch = pattern.charAt(i);\\r\\n+        final char ch = pattern.charAt(i);\\r\\n         if (!isValueCode(ch)) {\\r\\n             if (opt != ' ') {\\r\\n                 final Option option = Option.builder(String.valueOf(opt)).hasArg(type != null).required(required).type(type).build();\\r\\n                 options.addOption(option);\\r\\n                 required = false;\\r\\n                 type = null;\\r\\n                 opt = ' ';\\r\\n             }\\r\\n             opt = ch;\\r\\n         } else if (ch == '!') {\\r\\n             required = true;\\r\\n         } else {\\r\\n             type = (Class<?>) getValueClass(ch);\\r\\n         }\\r\\n     }\\r\\n     if (opt != ' ') {\\r\\n         final Option option = Option.builder(String.valueOf(opt)).hasArg(type != null).required(required).type(type).build();\\r\\n         options.addOption(option);\\r\\n     }\\r\\n     return options;\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"tn@apache.org","authorName":"Thomas Neidhart","commitYear":"2013","diff":"\"@@ -1,28 +1,28 @@\\n public static Options parsePattern(String pattern) {\\r\\n     char opt = ' ';\\r\\n     boolean required = false;\\r\\n     Class<?> type = null;\\r\\n     Options options = new Options();\\r\\n     for (int i = 0; i < pattern.length(); i++) {\\r\\n         char ch = pattern.charAt(i);\\r\\n         if (!isValueCode(ch)) {\\r\\n             if (opt != ' ') {\\r\\n-                final Option option = new Option.Builder(String.valueOf(opt), null).hasArg(type != null).required(required).type(type).build();\\r\\n+                final Option option = Option.builder(String.valueOf(opt)).hasArg(type != null).required(required).type(type).build();\\r\\n                 options.addOption(option);\\r\\n                 required = false;\\r\\n                 type = null;\\r\\n                 opt = ' ';\\r\\n             }\\r\\n             opt = ch;\\r\\n         } else if (ch == '!') {\\r\\n             required = true;\\r\\n         } else {\\r\\n             type = (Class<?>) getValueClass(ch);\\r\\n         }\\r\\n     }\\r\\n     if (opt != ' ') {\\r\\n-        final Option option = new Option.Builder(String.valueOf(opt), null).hasArg(type != null).required(required).type(type).build();\\r\\n+        final Option option = Option.builder(String.valueOf(opt)).hasArg(type != null).required(required).type(type).build();\\r\\n         options.addOption(option);\\r\\n     }\\r\\n     return options;\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"tn@apache.org","authorName":"Thomas Neidhart","commitYear":"2013","diff":"\"@@ -1,32 +1,28 @@\\n public static Options parsePattern(String pattern) {\\r\\n     char opt = ' ';\\r\\n     boolean required = false;\\r\\n     Class<?> type = null;\\r\\n     Options options = new Options();\\r\\n     for (int i = 0; i < pattern.length(); i++) {\\r\\n         char ch = pattern.charAt(i);\\r\\n         if (!isValueCode(ch)) {\\r\\n             if (opt != ' ') {\\r\\n-                OptionBuilder.hasArg(type != null);\\r\\n-                OptionBuilder.isRequired(required);\\r\\n-                OptionBuilder.withType(type);\\r\\n-                options.addOption(OptionBuilder.create(opt));\\r\\n+                final Option option = new Option.Builder(String.valueOf(opt), null).hasArg(type != null).required(required).type(type).build();\\r\\n+                options.addOption(option);\\r\\n                 required = false;\\r\\n                 type = null;\\r\\n                 opt = ' ';\\r\\n             }\\r\\n             opt = ch;\\r\\n         } else if (ch == '!') {\\r\\n             required = true;\\r\\n         } else {\\r\\n             type = (Class<?>) getValueClass(ch);\\r\\n         }\\r\\n     }\\r\\n     if (opt != ' ') {\\r\\n-        OptionBuilder.hasArg(type != null);\\r\\n-        OptionBuilder.isRequired(required);\\r\\n-        OptionBuilder.withType(type);\\r\\n-        options.addOption(OptionBuilder.create(opt));\\r\\n+        final Option option = new Option.Builder(String.valueOf(opt), null).hasArg(type != null).required(required).type(type).build();\\r\\n+        options.addOption(option);\\r\\n     }\\r\\n     return options;\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"tn@apache.org","authorName":"Thomas Neidhart","commitYear":"2013","diff":"\"@@ -1,32 +1,32 @@\\n public static Options parsePattern(String pattern) {\\r\\n     char opt = ' ';\\r\\n     boolean required = false;\\r\\n-    Class type = null;\\r\\n+    Class<?> type = null;\\r\\n     Options options = new Options();\\r\\n     for (int i = 0; i < pattern.length(); i++) {\\r\\n         char ch = pattern.charAt(i);\\r\\n         if (!isValueCode(ch)) {\\r\\n             if (opt != ' ') {\\r\\n                 OptionBuilder.hasArg(type != null);\\r\\n                 OptionBuilder.isRequired(required);\\r\\n                 OptionBuilder.withType(type);\\r\\n                 options.addOption(OptionBuilder.create(opt));\\r\\n                 required = false;\\r\\n                 type = null;\\r\\n                 opt = ' ';\\r\\n             }\\r\\n             opt = ch;\\r\\n         } else if (ch == '!') {\\r\\n             required = true;\\r\\n         } else {\\r\\n-            type = getValueClass(ch);\\r\\n+            type = (Class<?>) getValueClass(ch);\\r\\n         }\\r\\n     }\\r\\n     if (opt != ' ') {\\r\\n         OptionBuilder.hasArg(type != null);\\r\\n         OptionBuilder.isRequired(required);\\r\\n         OptionBuilder.withType(type);\\r\\n         options.addOption(OptionBuilder.create(opt));\\r\\n     }\\r\\n     return options;\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2011","diff":"\"@@ -1,32 +1,32 @@\\n public static Options parsePattern(String pattern) {\\r\\n     char opt = ' ';\\r\\n     boolean required = false;\\r\\n-    Object type = null;\\r\\n+    Class type = null;\\r\\n     Options options = new Options();\\r\\n     for (int i = 0; i < pattern.length(); i++) {\\r\\n         char ch = pattern.charAt(i);\\r\\n         if (!isValueCode(ch)) {\\r\\n             if (opt != ' ') {\\r\\n                 OptionBuilder.hasArg(type != null);\\r\\n                 OptionBuilder.isRequired(required);\\r\\n                 OptionBuilder.withType(type);\\r\\n                 options.addOption(OptionBuilder.create(opt));\\r\\n                 required = false;\\r\\n                 type = null;\\r\\n                 opt = ' ';\\r\\n             }\\r\\n             opt = ch;\\r\\n         } else if (ch == '!') {\\r\\n             required = true;\\r\\n         } else {\\r\\n             type = getValueClass(ch);\\r\\n         }\\r\\n     }\\r\\n     if (opt != ' ') {\\r\\n         OptionBuilder.hasArg(type != null);\\r\\n         OptionBuilder.isRequired(required);\\r\\n         OptionBuilder.withType(type);\\r\\n         options.addOption(OptionBuilder.create(opt));\\r\\n     }\\r\\n     return options;\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2008","diff":"\"\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2008","diff":"\"@@ -1,34 +1,32 @@\\n public static Options parsePattern(String pattern) {\\r\\n-    int sz = pattern.length();\\r\\n     char opt = ' ';\\r\\n-    char ch = ' ';\\r\\n     boolean required = false;\\r\\n     Object type = null;\\r\\n     Options options = new Options();\\r\\n-    for (int i = 0; i < sz; i++) {\\r\\n-        ch = pattern.charAt(i);\\r\\n+    for (int i = 0; i < pattern.length(); i++) {\\r\\n+        char ch = pattern.charAt(i);\\r\\n         if (!isValueCode(ch)) {\\r\\n             if (opt != ' ') {\\r\\n                 OptionBuilder.hasArg(type != null);\\r\\n                 OptionBuilder.isRequired(required);\\r\\n                 OptionBuilder.withType(type);\\r\\n                 options.addOption(OptionBuilder.create(opt));\\r\\n                 required = false;\\r\\n                 type = null;\\r\\n                 opt = ' ';\\r\\n             }\\r\\n             opt = ch;\\r\\n         } else if (ch == '!') {\\r\\n             required = true;\\r\\n         } else {\\r\\n             type = getValueClass(ch);\\r\\n         }\\r\\n     }\\r\\n     if (opt != ' ') {\\r\\n         OptionBuilder.hasArg(type != null);\\r\\n         OptionBuilder.isRequired(required);\\r\\n         OptionBuilder.withType(type);\\r\\n         options.addOption(OptionBuilder.create(opt));\\r\\n     }\\r\\n     return options;\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"roxspring@apache.org","authorName":"Robert James Oxspring","commitYear":"2005","diff":"\"@@ -1,28 +1,34 @@\\n public static Options parsePattern(String pattern) {\\r\\n     int sz = pattern.length();\\r\\n     char opt = ' ';\\r\\n     char ch = ' ';\\r\\n     boolean required = false;\\r\\n     Object type = null;\\r\\n     Options options = new Options();\\r\\n     for (int i = 0; i < sz; i++) {\\r\\n         ch = pattern.charAt(i);\\r\\n         if (!isValueCode(ch)) {\\r\\n             if (opt != ' ') {\\r\\n-                options.addOption(OptionBuilder.hasArg(type != null).isRequired(required).withType(type).create(opt));\\r\\n+                OptionBuilder.hasArg(type != null);\\r\\n+                OptionBuilder.isRequired(required);\\r\\n+                OptionBuilder.withType(type);\\r\\n+                options.addOption(OptionBuilder.create(opt));\\r\\n                 required = false;\\r\\n                 type = null;\\r\\n                 opt = ' ';\\r\\n             }\\r\\n             opt = ch;\\r\\n         } else if (ch == '!') {\\r\\n             required = true;\\r\\n         } else {\\r\\n             type = getValueClass(ch);\\r\\n         }\\r\\n     }\\r\\n     if (opt != ' ') {\\r\\n-        options.addOption(OptionBuilder.hasArg(type != null).isRequired(required).withType(type).create(opt));\\r\\n+        OptionBuilder.hasArg(type != null);\\r\\n+        OptionBuilder.isRequired(required);\\r\\n+        OptionBuilder.withType(type);\\r\\n+        options.addOption(OptionBuilder.create(opt));\\r\\n     }\\r\\n     return options;\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -1,28 +1,28 @@\\n public static Options parsePattern(String pattern) {\\r\\n     int sz = pattern.length();\\r\\n     char opt = ' ';\\r\\n     char ch = ' ';\\r\\n     boolean required = false;\\r\\n     Object type = null;\\r\\n     Options options = new Options();\\r\\n     for (int i = 0; i < sz; i++) {\\r\\n         ch = pattern.charAt(i);\\r\\n         if (!isValueCode(ch)) {\\r\\n             if (opt != ' ') {\\r\\n-                options.addOption(\\\"\\\" + opt, null, (type != null), \\\"\\\", required, false, type);\\r\\n+                options.addOption(OptionBuilder.hasArg(type != null).isRequired(required).withType(type).create(opt));\\r\\n                 required = false;\\r\\n                 type = null;\\r\\n                 opt = ' ';\\r\\n             }\\r\\n             opt = ch;\\r\\n         } else if (ch == '!') {\\r\\n             required = true;\\r\\n         } else {\\r\\n             type = getValueClass(ch);\\r\\n         }\\r\\n     }\\r\\n     if (opt != ' ') {\\r\\n-        options.addOption(\\\"\\\" + opt, null, (type != null), \\\"\\\", required, false, type);\\r\\n+        options.addOption(OptionBuilder.hasArg(type != null).isRequired(required).withType(type).create(opt));\\r\\n     }\\r\\n     return options;\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -1,28 +1,28 @@\\n public static Options parsePattern(String pattern) {\\r\\n     int sz = pattern.length();\\r\\n     char opt = ' ';\\r\\n     char ch = ' ';\\r\\n     boolean required = false;\\r\\n     Object type = null;\\r\\n     Options options = new Options();\\r\\n     for (int i = 0; i < sz; i++) {\\r\\n         ch = pattern.charAt(i);\\r\\n         if (!isValueCode(ch)) {\\r\\n             if (opt != ' ') {\\r\\n-                options.addOption(opt, null, (type != null), \\\"\\\", required, false, type);\\r\\n+                options.addOption(\\\"\\\" + opt, null, (type != null), \\\"\\\", required, false, type);\\r\\n                 required = false;\\r\\n                 type = null;\\r\\n                 opt = ' ';\\r\\n             }\\r\\n             opt = ch;\\r\\n         } else if (ch == '!') {\\r\\n             required = true;\\r\\n         } else {\\r\\n             type = getValueClass(ch);\\r\\n         }\\r\\n     }\\r\\n     if (opt != ' ') {\\r\\n-        options.addOption(opt, null, (type != null), \\\"\\\", required, false, type);\\r\\n+        options.addOption(\\\"\\\" + opt, null, (type != null), \\\"\\\", required, false, type);\\r\\n     }\\r\\n     return options;\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jstrachan@apache.org","authorName":"James Strachan","commitYear":"2002","diff":"\"@@ -0,0 +1,28 @@\\n+public static Options parsePattern(String pattern) {\\r\\n+    int sz = pattern.length();\\r\\n+    char opt = ' ';\\r\\n+    char ch = ' ';\\r\\n+    boolean required = false;\\r\\n+    Object type = null;\\r\\n+    Options options = new Options();\\r\\n+    for (int i = 0; i < sz; i++) {\\r\\n+        ch = pattern.charAt(i);\\r\\n+        if (!isValueCode(ch)) {\\r\\n+            if (opt != ' ') {\\r\\n+                options.addOption(opt, null, (type != null), \\\"\\\", required, false, type);\\r\\n+                required = false;\\r\\n+                type = null;\\r\\n+                opt = ' ';\\r\\n+            }\\r\\n+            opt = ch;\\r\\n+        } else if (ch == '!') {\\r\\n+            required = true;\\r\\n+        } else {\\r\\n+            type = getValueClass(ch);\\r\\n+        }\\r\\n+    }\\r\\n+    if (opt != ' ') {\\r\\n+        options.addOption(opt, null, (type != null), \\\"\\\", required, false, type);\\r\\n+    }\\r\\n+    return options;\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\main\java\org\apache\commons\cli\PosixParser.java	burstToken	org.apache.commons.cli.PosixParser.burstToken(String, boolean)	65	86	9	[{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"@@ -1,19 +1,19 @@\\n protected void burstToken(final String token, final boolean stopAtNonOption) {\\r\\n     for (int i = 1; i < token.length(); i++) {\\r\\n         final String ch = String.valueOf(token.charAt(i));\\r\\n-        if (options.hasOption(ch)) {\\r\\n-            tokens.add(\\\"-\\\" + ch);\\r\\n-            currentOption = options.getOption(ch);\\r\\n-            if (currentOption.hasArg() && token.length() != i + 1) {\\r\\n-                tokens.add(token.substring(i + 1));\\r\\n-                break;\\r\\n+        if (!options.hasOption(ch)) {\\r\\n+            if (stopAtNonOption) {\\r\\n+                processNonOptionToken(token.substring(i), true);\\r\\n+            } else {\\r\\n+                tokens.add(token);\\r\\n             }\\r\\n-        } else if (stopAtNonOption) {\\r\\n-            processNonOptionToken(token.substring(i), true);\\r\\n             break;\\r\\n-        } else {\\r\\n-            tokens.add(token);\\r\\n+        }\\r\\n+        tokens.add(\\\"-\\\" + ch);\\r\\n+        currentOption = options.getOption(ch);\\r\\n+        if (currentOption.hasArg() && token.length() != i + 1) {\\r\\n+            tokens.add(token.substring(i + 1));\\r\\n             break;\\r\\n         }\\r\\n     }\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"\""},{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"\""},{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,19 +1,19 @@\\n-protected void burstToken(String token, boolean stopAtNonOption) {\\r\\n+protected void burstToken(final String token, final boolean stopAtNonOption) {\\r\\n     for (int i = 1; i < token.length(); i++) {\\r\\n         final String ch = String.valueOf(token.charAt(i));\\r\\n         if (options.hasOption(ch)) {\\r\\n             tokens.add(\\\"-\\\" + ch);\\r\\n             currentOption = options.getOption(ch);\\r\\n             if (currentOption.hasArg() && token.length() != i + 1) {\\r\\n                 tokens.add(token.substring(i + 1));\\r\\n                 break;\\r\\n             }\\r\\n         } else if (stopAtNonOption) {\\r\\n             processNonOptionToken(token.substring(i), true);\\r\\n             break;\\r\\n         } else {\\r\\n             tokens.add(token);\\r\\n             break;\\r\\n         }\\r\\n     }\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,19 +1,19 @@\\n protected void burstToken(String token, boolean stopAtNonOption) {\\r\\n     for (int i = 1; i < token.length(); i++) {\\r\\n-        String ch = String.valueOf(token.charAt(i));\\r\\n+        final String ch = String.valueOf(token.charAt(i));\\r\\n         if (options.hasOption(ch)) {\\r\\n             tokens.add(\\\"-\\\" + ch);\\r\\n             currentOption = options.getOption(ch);\\r\\n             if (currentOption.hasArg() && token.length() != i + 1) {\\r\\n                 tokens.add(token.substring(i + 1));\\r\\n                 break;\\r\\n             }\\r\\n         } else if (stopAtNonOption) {\\r\\n             processNonOptionToken(token.substring(i), true);\\r\\n             break;\\r\\n         } else {\\r\\n             tokens.add(token);\\r\\n             break;\\r\\n         }\\r\\n     }\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"britter@apache.org","authorName":"Benedikt Ritter","commitYear":"2017","diff":"\"\""},{"authorEmail":"britter@apache.org","authorName":"Benedikt Ritter","commitYear":"2015","diff":"\"@@ -1,19 +1,19 @@\\n protected void burstToken(String token, boolean stopAtNonOption) {\\r\\n     for (int i = 1; i < token.length(); i++) {\\r\\n         String ch = String.valueOf(token.charAt(i));\\r\\n         if (options.hasOption(ch)) {\\r\\n             tokens.add(\\\"-\\\" + ch);\\r\\n             currentOption = options.getOption(ch);\\r\\n-            if (currentOption.hasArg() && (token.length() != (i + 1))) {\\r\\n+            if (currentOption.hasArg() && token.length() != i + 1) {\\r\\n                 tokens.add(token.substring(i + 1));\\r\\n                 break;\\r\\n             }\\r\\n         } else if (stopAtNonOption) {\\r\\n             processNonOptionToken(token.substring(i), true);\\r\\n             break;\\r\\n         } else {\\r\\n             tokens.add(token);\\r\\n             break;\\r\\n         }\\r\\n     }\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2008","diff":"\"@@ -1,20 +1,19 @@\\n protected void burstToken(String token, boolean stopAtNonOption) {\\r\\n-    Option currentOption;\\r\\n     for (int i = 1; i < token.length(); i++) {\\r\\n         String ch = String.valueOf(token.charAt(i));\\r\\n         if (options.hasOption(ch)) {\\r\\n             tokens.add(\\\"-\\\" + ch);\\r\\n             currentOption = options.getOption(ch);\\r\\n             if (currentOption.hasArg() && (token.length() != (i + 1))) {\\r\\n                 tokens.add(token.substring(i + 1));\\r\\n                 break;\\r\\n             }\\r\\n         } else if (stopAtNonOption) {\\r\\n-            processNonOptionToken(token.substring(i));\\r\\n+            processNonOptionToken(token.substring(i), true);\\r\\n             break;\\r\\n         } else {\\r\\n             tokens.add(token);\\r\\n             break;\\r\\n         }\\r\\n     }\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2008","diff":"\"\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2008","diff":"\"@@ -1,19 +1,20 @@\\n protected void burstToken(String token, boolean stopAtNonOption) {\\r\\n+    Option currentOption;\\r\\n     for (int i = 1; i < token.length(); i++) {\\r\\n         String ch = String.valueOf(token.charAt(i));\\r\\n         if (options.hasOption(ch)) {\\r\\n             tokens.add(\\\"-\\\" + ch);\\r\\n             currentOption = options.getOption(ch);\\r\\n             if (currentOption.hasArg() && (token.length() != (i + 1))) {\\r\\n                 tokens.add(token.substring(i + 1));\\r\\n                 break;\\r\\n             }\\r\\n         } else if (stopAtNonOption) {\\r\\n-            process(token.substring(i));\\r\\n+            processNonOptionToken(token.substring(i));\\r\\n             break;\\r\\n         } else {\\r\\n             tokens.add(token);\\r\\n             break;\\r\\n         }\\r\\n     }\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2008","diff":"\"@@ -1,20 +1,19 @@\\n protected void burstToken(String token, boolean stopAtNonOption) {\\r\\n-    int tokenLength = token.length();\\r\\n-    for (int i = 1; i < tokenLength; i++) {\\r\\n+    for (int i = 1; i < token.length(); i++) {\\r\\n         String ch = String.valueOf(token.charAt(i));\\r\\n-        boolean hasOption = options.hasOption(ch);\\r\\n-        if (hasOption) {\\r\\n+        if (options.hasOption(ch)) {\\r\\n             tokens.add(\\\"-\\\" + ch);\\r\\n             currentOption = options.getOption(ch);\\r\\n             if (currentOption.hasArg() && (token.length() != (i + 1))) {\\r\\n                 tokens.add(token.substring(i + 1));\\r\\n                 break;\\r\\n             }\\r\\n         } else if (stopAtNonOption) {\\r\\n             process(token.substring(i));\\r\\n+            break;\\r\\n         } else {\\r\\n             tokens.add(token);\\r\\n             break;\\r\\n         }\\r\\n     }\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"bayard@apache.org","authorName":"Henri Yandell","commitYear":"2007","diff":"\"@@ -1,19 +1,20 @@\\n protected void burstToken(String token, boolean stopAtNonOption) {\\r\\n     int tokenLength = token.length();\\r\\n     for (int i = 1; i < tokenLength; i++) {\\r\\n         String ch = String.valueOf(token.charAt(i));\\r\\n         boolean hasOption = options.hasOption(ch);\\r\\n         if (hasOption) {\\r\\n             tokens.add(\\\"-\\\" + ch);\\r\\n             currentOption = options.getOption(ch);\\r\\n             if (currentOption.hasArg() && (token.length() != (i + 1))) {\\r\\n                 tokens.add(token.substring(i + 1));\\r\\n                 break;\\r\\n             }\\r\\n         } else if (stopAtNonOption) {\\r\\n             process(token.substring(i));\\r\\n         } else {\\r\\n-            tokens.add(\\\"-\\\" + ch);\\r\\n+            tokens.add(token);\\r\\n+            break;\\r\\n         }\\r\\n     }\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -1,19 +1,19 @@\\n protected void burstToken(String token, boolean stopAtNonOption) {\\r\\n     int tokenLength = token.length();\\r\\n     for (int i = 1; i < tokenLength; i++) {\\r\\n         String ch = String.valueOf(token.charAt(i));\\r\\n         boolean hasOption = options.hasOption(ch);\\r\\n         if (hasOption) {\\r\\n             tokens.add(\\\"-\\\" + ch);\\r\\n             currentOption = options.getOption(ch);\\r\\n-            if (currentOption.hasArg() && token.length() != i + 1) {\\r\\n+            if (currentOption.hasArg() && (token.length() != (i + 1))) {\\r\\n                 tokens.add(token.substring(i + 1));\\r\\n                 break;\\r\\n             }\\r\\n         } else if (stopAtNonOption) {\\r\\n             process(token.substring(i));\\r\\n         } else {\\r\\n             tokens.add(\\\"-\\\" + ch);\\r\\n         }\\r\\n     }\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -1,19 +1,19 @@\\n-private void burstToken(String token, boolean stop) {\\r\\n+protected void burstToken(String token, boolean stopAtNonOption) {\\r\\n     int tokenLength = token.length();\\r\\n     for (int i = 1; i < tokenLength; i++) {\\r\\n         String ch = String.valueOf(token.charAt(i));\\r\\n         boolean hasOption = options.hasOption(ch);\\r\\n         if (hasOption) {\\r\\n             tokens.add(\\\"-\\\" + ch);\\r\\n             currentOption = options.getOption(ch);\\r\\n             if (currentOption.hasArg() && token.length() != i + 1) {\\r\\n                 tokens.add(token.substring(i + 1));\\r\\n                 break;\\r\\n             }\\r\\n-        } else if (stop) {\\r\\n+        } else if (stopAtNonOption) {\\r\\n             process(token.substring(i));\\r\\n         } else {\\r\\n             tokens.add(\\\"-\\\" + ch);\\r\\n         }\\r\\n     }\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -0,0 +1,19 @@\\n+private void burstToken(String token, boolean stop) {\\r\\n+    int tokenLength = token.length();\\r\\n+    for (int i = 1; i < tokenLength; i++) {\\r\\n+        String ch = String.valueOf(token.charAt(i));\\r\\n+        boolean hasOption = options.hasOption(ch);\\r\\n+        if (hasOption) {\\r\\n+            tokens.add(\\\"-\\\" + ch);\\r\\n+            currentOption = options.getOption(ch);\\r\\n+            if (currentOption.hasArg() && token.length() != i + 1) {\\r\\n+                tokens.add(token.substring(i + 1));\\r\\n+                break;\\r\\n+            }\\r\\n+        } else if (stop) {\\r\\n+            process(token.substring(i));\\r\\n+        } else {\\r\\n+            tokens.add(\\\"-\\\" + ch);\\r\\n+        }\\r\\n+    }\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\main\java\org\apache\commons\cli\PosixParser.java	flatten	org.apache.commons.cli.PosixParser.flatten(Options, String[], boolean)	119	180	23	[{"authorEmail":"arturobernalg@gmail.com","authorName":"Arturo Bernal","commitYear":"2021","diff":"\"@@ -1,44 +1,44 @@\\n @Override\\r\\n protected String[] flatten(final Options options, final String[] arguments, final boolean stopAtNonOption) throws ParseException {\\r\\n     init();\\r\\n     this.options = options;\\r\\n     final Iterator<String> iter = Arrays.asList(arguments).iterator();\\r\\n     while (iter.hasNext()) {\\r\\n         final String token = iter.next();\\r\\n         if (\\\"-\\\".equals(token) || \\\"--\\\".equals(token)) {\\r\\n             tokens.add(token);\\r\\n         } else if (token.startsWith(\\\"--\\\")) {\\r\\n             final int pos = token.indexOf('=');\\r\\n             final String opt = pos == -1 ? token : token.substring(0, pos);\\r\\n             final List<String> matchingOpts = options.getMatchingOptions(opt);\\r\\n             if (matchingOpts.isEmpty()) {\\r\\n                 processNonOptionToken(token, stopAtNonOption);\\r\\n             } else if (matchingOpts.size() > 1) {\\r\\n                 throw new AmbiguousOptionException(opt, matchingOpts);\\r\\n             } else {\\r\\n                 currentOption = options.getOption(matchingOpts.get(0));\\r\\n                 tokens.add(\\\"--\\\" + currentOption.getLongOpt());\\r\\n                 if (pos != -1) {\\r\\n                     tokens.add(token.substring(pos + 1));\\r\\n                 }\\r\\n             }\\r\\n         } else if (token.startsWith(\\\"-\\\")) {\\r\\n             if (token.length() == 2 || options.hasOption(token)) {\\r\\n                 processOptionToken(token, stopAtNonOption);\\r\\n             } else if (!options.getMatchingOptions(token).isEmpty()) {\\r\\n                 final List<String> matchingOpts = options.getMatchingOptions(token);\\r\\n                 if (matchingOpts.size() > 1) {\\r\\n                     throw new AmbiguousOptionException(token, matchingOpts);\\r\\n                 }\\r\\n                 final Option opt = options.getOption(matchingOpts.get(0));\\r\\n                 processOptionToken(\\\"-\\\" + opt.getLongOpt(), stopAtNonOption);\\r\\n             } else {\\r\\n                 burstToken(token, stopAtNonOption);\\r\\n             }\\r\\n         } else {\\r\\n             processNonOptionToken(token, stopAtNonOption);\\r\\n         }\\r\\n         gobble(iter);\\r\\n     }\\r\\n-    return tokens.toArray(new String[tokens.size()]);\\r\\n+    return tokens.toArray(Util.EMPTY_STRING_ARRAY);\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"\""},{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"\""},{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2019","diff":"\"\""},{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,44 +1,44 @@\\n @Override\\r\\n-protected String[] flatten(Options options, String[] arguments, boolean stopAtNonOption) throws ParseException {\\r\\n+protected String[] flatten(final Options options, final String[] arguments, final boolean stopAtNonOption) throws ParseException {\\r\\n     init();\\r\\n     this.options = options;\\r\\n     final Iterator<String> iter = Arrays.asList(arguments).iterator();\\r\\n     while (iter.hasNext()) {\\r\\n         final String token = iter.next();\\r\\n         if (\\\"-\\\".equals(token) || \\\"--\\\".equals(token)) {\\r\\n             tokens.add(token);\\r\\n         } else if (token.startsWith(\\\"--\\\")) {\\r\\n             final int pos = token.indexOf('=');\\r\\n             final String opt = pos == -1 ? token : token.substring(0, pos);\\r\\n             final List<String> matchingOpts = options.getMatchingOptions(opt);\\r\\n             if (matchingOpts.isEmpty()) {\\r\\n                 processNonOptionToken(token, stopAtNonOption);\\r\\n             } else if (matchingOpts.size() > 1) {\\r\\n                 throw new AmbiguousOptionException(opt, matchingOpts);\\r\\n             } else {\\r\\n                 currentOption = options.getOption(matchingOpts.get(0));\\r\\n                 tokens.add(\\\"--\\\" + currentOption.getLongOpt());\\r\\n                 if (pos != -1) {\\r\\n                     tokens.add(token.substring(pos + 1));\\r\\n                 }\\r\\n             }\\r\\n         } else if (token.startsWith(\\\"-\\\")) {\\r\\n             if (token.length() == 2 || options.hasOption(token)) {\\r\\n                 processOptionToken(token, stopAtNonOption);\\r\\n             } else if (!options.getMatchingOptions(token).isEmpty()) {\\r\\n                 final List<String> matchingOpts = options.getMatchingOptions(token);\\r\\n                 if (matchingOpts.size() > 1) {\\r\\n                     throw new AmbiguousOptionException(token, matchingOpts);\\r\\n                 }\\r\\n                 final Option opt = options.getOption(matchingOpts.get(0));\\r\\n                 processOptionToken(\\\"-\\\" + opt.getLongOpt(), stopAtNonOption);\\r\\n             } else {\\r\\n                 burstToken(token, stopAtNonOption);\\r\\n             }\\r\\n         } else {\\r\\n             processNonOptionToken(token, stopAtNonOption);\\r\\n         }\\r\\n         gobble(iter);\\r\\n     }\\r\\n     return tokens.toArray(new String[tokens.size()]);\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,44 +1,44 @@\\n @Override\\r\\n protected String[] flatten(Options options, String[] arguments, boolean stopAtNonOption) throws ParseException {\\r\\n     init();\\r\\n     this.options = options;\\r\\n-    Iterator<String> iter = Arrays.asList(arguments).iterator();\\r\\n+    final Iterator<String> iter = Arrays.asList(arguments).iterator();\\r\\n     while (iter.hasNext()) {\\r\\n-        String token = iter.next();\\r\\n+        final String token = iter.next();\\r\\n         if (\\\"-\\\".equals(token) || \\\"--\\\".equals(token)) {\\r\\n             tokens.add(token);\\r\\n         } else if (token.startsWith(\\\"--\\\")) {\\r\\n-            int pos = token.indexOf('=');\\r\\n-            String opt = pos == -1 ? token : token.substring(0, pos);\\r\\n-            List<String> matchingOpts = options.getMatchingOptions(opt);\\r\\n+            final int pos = token.indexOf('=');\\r\\n+            final String opt = pos == -1 ? token : token.substring(0, pos);\\r\\n+            final List<String> matchingOpts = options.getMatchingOptions(opt);\\r\\n             if (matchingOpts.isEmpty()) {\\r\\n                 processNonOptionToken(token, stopAtNonOption);\\r\\n             } else if (matchingOpts.size() > 1) {\\r\\n                 throw new AmbiguousOptionException(opt, matchingOpts);\\r\\n             } else {\\r\\n                 currentOption = options.getOption(matchingOpts.get(0));\\r\\n                 tokens.add(\\\"--\\\" + currentOption.getLongOpt());\\r\\n                 if (pos != -1) {\\r\\n                     tokens.add(token.substring(pos + 1));\\r\\n                 }\\r\\n             }\\r\\n         } else if (token.startsWith(\\\"-\\\")) {\\r\\n             if (token.length() == 2 || options.hasOption(token)) {\\r\\n                 processOptionToken(token, stopAtNonOption);\\r\\n             } else if (!options.getMatchingOptions(token).isEmpty()) {\\r\\n-                List<String> matchingOpts = options.getMatchingOptions(token);\\r\\n+                final List<String> matchingOpts = options.getMatchingOptions(token);\\r\\n                 if (matchingOpts.size() > 1) {\\r\\n                     throw new AmbiguousOptionException(token, matchingOpts);\\r\\n                 }\\r\\n-                Option opt = options.getOption(matchingOpts.get(0));\\r\\n+                final Option opt = options.getOption(matchingOpts.get(0));\\r\\n                 processOptionToken(\\\"-\\\" + opt.getLongOpt(), stopAtNonOption);\\r\\n             } else {\\r\\n                 burstToken(token, stopAtNonOption);\\r\\n             }\\r\\n         } else {\\r\\n             processNonOptionToken(token, stopAtNonOption);\\r\\n         }\\r\\n         gobble(iter);\\r\\n     }\\r\\n     return tokens.toArray(new String[tokens.size()]);\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2015","diff":"\"@@ -1,45 +1,44 @@\\n @Override\\r\\n protected String[] flatten(Options options, String[] arguments, boolean stopAtNonOption) throws ParseException {\\r\\n     init();\\r\\n     this.options = options;\\r\\n     Iterator<String> iter = Arrays.asList(arguments).iterator();\\r\\n     while (iter.hasNext()) {\\r\\n         String token = iter.next();\\r\\n         if (\\\"-\\\".equals(token) || \\\"--\\\".equals(token)) {\\r\\n             tokens.add(token);\\r\\n         } else if (token.startsWith(\\\"--\\\")) {\\r\\n             int pos = token.indexOf('=');\\r\\n             String opt = pos == -1 ? token : token.substring(0, pos);\\r\\n             List<String> matchingOpts = options.getMatchingOptions(opt);\\r\\n             if (matchingOpts.isEmpty()) {\\r\\n                 processNonOptionToken(token, stopAtNonOption);\\r\\n             } else if (matchingOpts.size() > 1) {\\r\\n                 throw new AmbiguousOptionException(opt, matchingOpts);\\r\\n             } else {\\r\\n                 currentOption = options.getOption(matchingOpts.get(0));\\r\\n                 tokens.add(\\\"--\\\" + currentOption.getLongOpt());\\r\\n                 if (pos != -1) {\\r\\n                     tokens.add(token.substring(pos + 1));\\r\\n                 }\\r\\n             }\\r\\n         } else if (token.startsWith(\\\"-\\\")) {\\r\\n             if (token.length() == 2 || options.hasOption(token)) {\\r\\n                 processOptionToken(token, stopAtNonOption);\\r\\n             } else if (!options.getMatchingOptions(token).isEmpty()) {\\r\\n                 List<String> matchingOpts = options.getMatchingOptions(token);\\r\\n                 if (matchingOpts.size() > 1) {\\r\\n                     throw new AmbiguousOptionException(token, matchingOpts);\\r\\n-                } else {\\r\\n-                    Option opt = options.getOption(matchingOpts.get(0));\\r\\n-                    processOptionToken(\\\"-\\\" + opt.getLongOpt(), stopAtNonOption);\\r\\n                 }\\r\\n+                Option opt = options.getOption(matchingOpts.get(0));\\r\\n+                processOptionToken(\\\"-\\\" + opt.getLongOpt(), stopAtNonOption);\\r\\n             } else {\\r\\n                 burstToken(token, stopAtNonOption);\\r\\n             }\\r\\n         } else {\\r\\n             processNonOptionToken(token, stopAtNonOption);\\r\\n         }\\r\\n         gobble(iter);\\r\\n     }\\r\\n     return tokens.toArray(new String[tokens.size()]);\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"britter@apache.org","authorName":"Benedikt Ritter","commitYear":"2015","diff":"\"\""},{"authorEmail":"sebb@apache.org","authorName":"Sebastian Bazley","commitYear":"2013","diff":"\"@@ -1,44 +1,45 @@\\n+@Override\\r\\n protected String[] flatten(Options options, String[] arguments, boolean stopAtNonOption) throws ParseException {\\r\\n     init();\\r\\n     this.options = options;\\r\\n     Iterator<String> iter = Arrays.asList(arguments).iterator();\\r\\n     while (iter.hasNext()) {\\r\\n         String token = iter.next();\\r\\n         if (\\\"-\\\".equals(token) || \\\"--\\\".equals(token)) {\\r\\n             tokens.add(token);\\r\\n         } else if (token.startsWith(\\\"--\\\")) {\\r\\n             int pos = token.indexOf('=');\\r\\n             String opt = pos == -1 ? token : token.substring(0, pos);\\r\\n             List<String> matchingOpts = options.getMatchingOptions(opt);\\r\\n             if (matchingOpts.isEmpty()) {\\r\\n                 processNonOptionToken(token, stopAtNonOption);\\r\\n             } else if (matchingOpts.size() > 1) {\\r\\n                 throw new AmbiguousOptionException(opt, matchingOpts);\\r\\n             } else {\\r\\n                 currentOption = options.getOption(matchingOpts.get(0));\\r\\n                 tokens.add(\\\"--\\\" + currentOption.getLongOpt());\\r\\n                 if (pos != -1) {\\r\\n                     tokens.add(token.substring(pos + 1));\\r\\n                 }\\r\\n             }\\r\\n         } else if (token.startsWith(\\\"-\\\")) {\\r\\n             if (token.length() == 2 || options.hasOption(token)) {\\r\\n                 processOptionToken(token, stopAtNonOption);\\r\\n             } else if (!options.getMatchingOptions(token).isEmpty()) {\\r\\n                 List<String> matchingOpts = options.getMatchingOptions(token);\\r\\n                 if (matchingOpts.size() > 1) {\\r\\n                     throw new AmbiguousOptionException(token, matchingOpts);\\r\\n                 } else {\\r\\n                     Option opt = options.getOption(matchingOpts.get(0));\\r\\n                     processOptionToken(\\\"-\\\" + opt.getLongOpt(), stopAtNonOption);\\r\\n                 }\\r\\n             } else {\\r\\n                 burstToken(token, stopAtNonOption);\\r\\n             }\\r\\n         } else {\\r\\n             processNonOptionToken(token, stopAtNonOption);\\r\\n         }\\r\\n         gobble(iter);\\r\\n     }\\r\\n     return tokens.toArray(new String[tokens.size()]);\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2012","diff":"\"@@ -1,44 +1,44 @@\\n protected String[] flatten(Options options, String[] arguments, boolean stopAtNonOption) throws ParseException {\\r\\n     init();\\r\\n     this.options = options;\\r\\n-    Iterator iter = Arrays.asList(arguments).iterator();\\r\\n+    Iterator<String> iter = Arrays.asList(arguments).iterator();\\r\\n     while (iter.hasNext()) {\\r\\n-        String token = (String) iter.next();\\r\\n+        String token = iter.next();\\r\\n         if (\\\"-\\\".equals(token) || \\\"--\\\".equals(token)) {\\r\\n             tokens.add(token);\\r\\n         } else if (token.startsWith(\\\"--\\\")) {\\r\\n             int pos = token.indexOf('=');\\r\\n             String opt = pos == -1 ? token : token.substring(0, pos);\\r\\n-            List matchingOpts = options.getMatchingOptions(opt);\\r\\n+            List<String> matchingOpts = options.getMatchingOptions(opt);\\r\\n             if (matchingOpts.isEmpty()) {\\r\\n                 processNonOptionToken(token, stopAtNonOption);\\r\\n             } else if (matchingOpts.size() > 1) {\\r\\n                 throw new AmbiguousOptionException(opt, matchingOpts);\\r\\n             } else {\\r\\n-                currentOption = options.getOption((String) matchingOpts.get(0));\\r\\n+                currentOption = options.getOption(matchingOpts.get(0));\\r\\n                 tokens.add(\\\"--\\\" + currentOption.getLongOpt());\\r\\n                 if (pos != -1) {\\r\\n                     tokens.add(token.substring(pos + 1));\\r\\n                 }\\r\\n             }\\r\\n         } else if (token.startsWith(\\\"-\\\")) {\\r\\n             if (token.length() == 2 || options.hasOption(token)) {\\r\\n                 processOptionToken(token, stopAtNonOption);\\r\\n             } else if (!options.getMatchingOptions(token).isEmpty()) {\\r\\n-                List matchingOpts = options.getMatchingOptions(token);\\r\\n+                List<String> matchingOpts = options.getMatchingOptions(token);\\r\\n                 if (matchingOpts.size() > 1) {\\r\\n                     throw new AmbiguousOptionException(token, matchingOpts);\\r\\n                 } else {\\r\\n-                    Option opt = options.getOption((String) matchingOpts.get(0));\\r\\n+                    Option opt = options.getOption(matchingOpts.get(0));\\r\\n                     processOptionToken(\\\"-\\\" + opt.getLongOpt(), stopAtNonOption);\\r\\n                 }\\r\\n             } else {\\r\\n                 burstToken(token, stopAtNonOption);\\r\\n             }\\r\\n         } else {\\r\\n             processNonOptionToken(token, stopAtNonOption);\\r\\n         }\\r\\n         gobble(iter);\\r\\n     }\\r\\n-    return (String[]) tokens.toArray(new String[tokens.size()]);\\r\\n+    return tokens.toArray(new String[tokens.size()]);\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2009","diff":"\"@@ -1,33 +1,44 @@\\n-protected String[] flatten(Options options, String[] arguments, boolean stopAtNonOption) {\\r\\n+protected String[] flatten(Options options, String[] arguments, boolean stopAtNonOption) throws ParseException {\\r\\n     init();\\r\\n     this.options = options;\\r\\n     Iterator iter = Arrays.asList(arguments).iterator();\\r\\n     while (iter.hasNext()) {\\r\\n         String token = (String) iter.next();\\r\\n-        if (token.startsWith(\\\"--\\\")) {\\r\\n+        if (\\\"-\\\".equals(token) || \\\"--\\\".equals(token)) {\\r\\n+            tokens.add(token);\\r\\n+        } else if (token.startsWith(\\\"--\\\")) {\\r\\n             int pos = token.indexOf('=');\\r\\n             String opt = pos == -1 ? token : token.substring(0, pos);\\r\\n-            if (!options.hasOption(opt)) {\\r\\n+            List matchingOpts = options.getMatchingOptions(opt);\\r\\n+            if (matchingOpts.isEmpty()) {\\r\\n                 processNonOptionToken(token, stopAtNonOption);\\r\\n+            } else if (matchingOpts.size() > 1) {\\r\\n+                throw new AmbiguousOptionException(opt, matchingOpts);\\r\\n             } else {\\r\\n-                currentOption = options.getOption(opt);\\r\\n-                tokens.add(opt);\\r\\n+                currentOption = options.getOption((String) matchingOpts.get(0));\\r\\n+                tokens.add(\\\"--\\\" + currentOption.getLongOpt());\\r\\n                 if (pos != -1) {\\r\\n                     tokens.add(token.substring(pos + 1));\\r\\n                 }\\r\\n             }\\r\\n-        } else if (\\\"-\\\".equals(token)) {\\r\\n-            tokens.add(token);\\r\\n         } else if (token.startsWith(\\\"-\\\")) {\\r\\n             if (token.length() == 2 || options.hasOption(token)) {\\r\\n                 processOptionToken(token, stopAtNonOption);\\r\\n+            } else if (!options.getMatchingOptions(token).isEmpty()) {\\r\\n+                List matchingOpts = options.getMatchingOptions(token);\\r\\n+                if (matchingOpts.size() > 1) {\\r\\n+                    throw new AmbiguousOptionException(token, matchingOpts);\\r\\n+                } else {\\r\\n+                    Option opt = options.getOption((String) matchingOpts.get(0));\\r\\n+                    processOptionToken(\\\"-\\\" + opt.getLongOpt(), stopAtNonOption);\\r\\n+                }\\r\\n             } else {\\r\\n                 burstToken(token, stopAtNonOption);\\r\\n             }\\r\\n         } else {\\r\\n             processNonOptionToken(token, stopAtNonOption);\\r\\n         }\\r\\n         gobble(iter);\\r\\n     }\\r\\n     return (String[]) tokens.toArray(new String[tokens.size()]);\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2008","diff":"\"@@ -1,36 +1,33 @@\\n protected String[] flatten(Options options, String[] arguments, boolean stopAtNonOption) {\\r\\n     init();\\r\\n     this.options = options;\\r\\n     Iterator iter = Arrays.asList(arguments).iterator();\\r\\n     while (iter.hasNext()) {\\r\\n         String token = (String) iter.next();\\r\\n         if (token.startsWith(\\\"--\\\")) {\\r\\n             int pos = token.indexOf('=');\\r\\n             String opt = pos == -1 ? token : token.substring(0, pos);\\r\\n-            if (!options.hasOption(opt) && stopAtNonOption) {\\r\\n-                processNonOptionToken(token);\\r\\n+            if (!options.hasOption(opt)) {\\r\\n+                processNonOptionToken(token, stopAtNonOption);\\r\\n             } else {\\r\\n+                currentOption = options.getOption(opt);\\r\\n                 tokens.add(opt);\\r\\n                 if (pos != -1) {\\r\\n                     tokens.add(token.substring(pos + 1));\\r\\n                 }\\r\\n             }\\r\\n         } else if (\\\"-\\\".equals(token)) {\\r\\n             tokens.add(token);\\r\\n         } else if (token.startsWith(\\\"-\\\")) {\\r\\n-            if (token.length() == 2) {\\r\\n+            if (token.length() == 2 || options.hasOption(token)) {\\r\\n                 processOptionToken(token, stopAtNonOption);\\r\\n-            } else if (options.hasOption(token)) {\\r\\n-                tokens.add(token);\\r\\n             } else {\\r\\n                 burstToken(token, stopAtNonOption);\\r\\n             }\\r\\n-        } else if (stopAtNonOption) {\\r\\n-            processNonOptionToken(token);\\r\\n         } else {\\r\\n-            tokens.add(token);\\r\\n+            processNonOptionToken(token, stopAtNonOption);\\r\\n         }\\r\\n         gobble(iter);\\r\\n     }\\r\\n     return (String[]) tokens.toArray(new String[tokens.size()]);\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2008","diff":"\"\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2008","diff":"\"@@ -1,36 +1,36 @@\\n protected String[] flatten(Options options, String[] arguments, boolean stopAtNonOption) {\\r\\n     init();\\r\\n     this.options = options;\\r\\n     Iterator iter = Arrays.asList(arguments).iterator();\\r\\n     while (iter.hasNext()) {\\r\\n         String token = (String) iter.next();\\r\\n         if (token.startsWith(\\\"--\\\")) {\\r\\n             int pos = token.indexOf('=');\\r\\n             String opt = pos == -1 ? token : token.substring(0, pos);\\r\\n             if (!options.hasOption(opt) && stopAtNonOption) {\\r\\n-                process(token);\\r\\n+                processNonOptionToken(token);\\r\\n             } else {\\r\\n                 tokens.add(opt);\\r\\n                 if (pos != -1) {\\r\\n                     tokens.add(token.substring(pos + 1));\\r\\n                 }\\r\\n             }\\r\\n         } else if (\\\"-\\\".equals(token)) {\\r\\n             tokens.add(token);\\r\\n         } else if (token.startsWith(\\\"-\\\")) {\\r\\n             if (token.length() == 2) {\\r\\n                 processOptionToken(token, stopAtNonOption);\\r\\n             } else if (options.hasOption(token)) {\\r\\n                 tokens.add(token);\\r\\n             } else {\\r\\n                 burstToken(token, stopAtNonOption);\\r\\n             }\\r\\n         } else if (stopAtNonOption) {\\r\\n-            process(token);\\r\\n+            processNonOptionToken(token);\\r\\n         } else {\\r\\n             tokens.add(token);\\r\\n         }\\r\\n         gobble(iter);\\r\\n     }\\r\\n     return (String[]) tokens.toArray(new String[tokens.size()]);\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2008","diff":"\"@@ -1,32 +1,36 @@\\n protected String[] flatten(Options options, String[] arguments, boolean stopAtNonOption) {\\r\\n     init();\\r\\n     this.options = options;\\r\\n     Iterator iter = Arrays.asList(arguments).iterator();\\r\\n     while (iter.hasNext()) {\\r\\n         String token = (String) iter.next();\\r\\n         if (token.startsWith(\\\"--\\\")) {\\r\\n-            if (token.indexOf('=') != -1) {\\r\\n-                tokens.add(token.substring(0, token.indexOf('=')));\\r\\n-                tokens.add(token.substring(token.indexOf('=') + 1, token.length()));\\r\\n+            int pos = token.indexOf('=');\\r\\n+            String opt = pos == -1 ? token : token.substring(0, pos);\\r\\n+            if (!options.hasOption(opt) && stopAtNonOption) {\\r\\n+                process(token);\\r\\n             } else {\\r\\n-                tokens.add(token);\\r\\n+                tokens.add(opt);\\r\\n+                if (pos != -1) {\\r\\n+                    tokens.add(token.substring(pos + 1));\\r\\n+                }\\r\\n             }\\r\\n         } else if (\\\"-\\\".equals(token)) {\\r\\n             tokens.add(token);\\r\\n         } else if (token.startsWith(\\\"-\\\")) {\\r\\n             if (token.length() == 2) {\\r\\n                 processOptionToken(token, stopAtNonOption);\\r\\n             } else if (options.hasOption(token)) {\\r\\n                 tokens.add(token);\\r\\n             } else {\\r\\n                 burstToken(token, stopAtNonOption);\\r\\n             }\\r\\n         } else if (stopAtNonOption) {\\r\\n             process(token);\\r\\n         } else {\\r\\n             tokens.add(token);\\r\\n         }\\r\\n         gobble(iter);\\r\\n     }\\r\\n     return (String[]) tokens.toArray(new String[tokens.size()]);\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2008","diff":"\"@@ -1,35 +1,32 @@\\n protected String[] flatten(Options options, String[] arguments, boolean stopAtNonOption) {\\r\\n     init();\\r\\n     this.options = options;\\r\\n     Iterator iter = Arrays.asList(arguments).iterator();\\r\\n     while (iter.hasNext()) {\\r\\n         String token = (String) iter.next();\\r\\n         if (token.startsWith(\\\"--\\\")) {\\r\\n             if (token.indexOf('=') != -1) {\\r\\n                 tokens.add(token.substring(0, token.indexOf('=')));\\r\\n                 tokens.add(token.substring(token.indexOf('=') + 1, token.length()));\\r\\n             } else {\\r\\n                 tokens.add(token);\\r\\n             }\\r\\n         } else if (\\\"-\\\".equals(token)) {\\r\\n-            processSingleHyphen(token);\\r\\n+            tokens.add(token);\\r\\n         } else if (token.startsWith(\\\"-\\\")) {\\r\\n-            int tokenLength = token.length();\\r\\n-            if (tokenLength == 2) {\\r\\n+            if (token.length() == 2) {\\r\\n                 processOptionToken(token, stopAtNonOption);\\r\\n             } else if (options.hasOption(token)) {\\r\\n                 tokens.add(token);\\r\\n             } else {\\r\\n                 burstToken(token, stopAtNonOption);\\r\\n             }\\r\\n+        } else if (stopAtNonOption) {\\r\\n+            process(token);\\r\\n         } else {\\r\\n-            if (stopAtNonOption) {\\r\\n-                process(token);\\r\\n-            } else {\\r\\n-                tokens.add(token);\\r\\n-            }\\r\\n+            tokens.add(token);\\r\\n         }\\r\\n         gobble(iter);\\r\\n     }\\r\\n     return (String[]) tokens.toArray(new String[tokens.size()]);\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2008","diff":"\"@@ -1,36 +1,35 @@\\n protected String[] flatten(Options options, String[] arguments, boolean stopAtNonOption) {\\r\\n     init();\\r\\n     this.options = options;\\r\\n     Iterator iter = Arrays.asList(arguments).iterator();\\r\\n-    String token;\\r\\n     while (iter.hasNext()) {\\r\\n-        token = (String) iter.next();\\r\\n+        String token = (String) iter.next();\\r\\n         if (token.startsWith(\\\"--\\\")) {\\r\\n             if (token.indexOf('=') != -1) {\\r\\n                 tokens.add(token.substring(0, token.indexOf('=')));\\r\\n                 tokens.add(token.substring(token.indexOf('=') + 1, token.length()));\\r\\n             } else {\\r\\n                 tokens.add(token);\\r\\n             }\\r\\n         } else if (\\\"-\\\".equals(token)) {\\r\\n             processSingleHyphen(token);\\r\\n         } else if (token.startsWith(\\\"-\\\")) {\\r\\n             int tokenLength = token.length();\\r\\n             if (tokenLength == 2) {\\r\\n                 processOptionToken(token, stopAtNonOption);\\r\\n             } else if (options.hasOption(token)) {\\r\\n                 tokens.add(token);\\r\\n             } else {\\r\\n                 burstToken(token, stopAtNonOption);\\r\\n             }\\r\\n         } else {\\r\\n             if (stopAtNonOption) {\\r\\n                 process(token);\\r\\n             } else {\\r\\n                 tokens.add(token);\\r\\n             }\\r\\n         }\\r\\n         gobble(iter);\\r\\n     }\\r\\n     return (String[]) tokens.toArray(new String[tokens.size()]);\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"bayard@apache.org","authorName":"Henri Yandell","commitYear":"2007","diff":"\"@@ -1,36 +1,36 @@\\n protected String[] flatten(Options options, String[] arguments, boolean stopAtNonOption) {\\r\\n     init();\\r\\n     this.options = options;\\r\\n     Iterator iter = Arrays.asList(arguments).iterator();\\r\\n     String token;\\r\\n     while (iter.hasNext()) {\\r\\n         token = (String) iter.next();\\r\\n         if (token.startsWith(\\\"--\\\")) {\\r\\n             if (token.indexOf('=') != -1) {\\r\\n                 tokens.add(token.substring(0, token.indexOf('=')));\\r\\n                 tokens.add(token.substring(token.indexOf('=') + 1, token.length()));\\r\\n             } else {\\r\\n                 tokens.add(token);\\r\\n             }\\r\\n         } else if (\\\"-\\\".equals(token)) {\\r\\n             processSingleHyphen(token);\\r\\n         } else if (token.startsWith(\\\"-\\\")) {\\r\\n             int tokenLength = token.length();\\r\\n             if (tokenLength == 2) {\\r\\n                 processOptionToken(token, stopAtNonOption);\\r\\n             } else if (options.hasOption(token)) {\\r\\n                 tokens.add(token);\\r\\n             } else {\\r\\n                 burstToken(token, stopAtNonOption);\\r\\n             }\\r\\n         } else {\\r\\n             if (stopAtNonOption) {\\r\\n                 process(token);\\r\\n             } else {\\r\\n                 tokens.add(token);\\r\\n             }\\r\\n         }\\r\\n         gobble(iter);\\r\\n     }\\r\\n-    return (String[]) tokens.toArray(new String[] {});\\r\\n+    return (String[]) tokens.toArray(new String[tokens.size()]);\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"bayard@apache.org","authorName":"Henri Yandell","commitYear":"2007","diff":"\"@@ -1,36 +1,36 @@\\n protected String[] flatten(Options options, String[] arguments, boolean stopAtNonOption) {\\r\\n     init();\\r\\n     this.options = options;\\r\\n     Iterator iter = Arrays.asList(arguments).iterator();\\r\\n-    String token = null;\\r\\n+    String token;\\r\\n     while (iter.hasNext()) {\\r\\n         token = (String) iter.next();\\r\\n         if (token.startsWith(\\\"--\\\")) {\\r\\n             if (token.indexOf('=') != -1) {\\r\\n                 tokens.add(token.substring(0, token.indexOf('=')));\\r\\n                 tokens.add(token.substring(token.indexOf('=') + 1, token.length()));\\r\\n             } else {\\r\\n                 tokens.add(token);\\r\\n             }\\r\\n         } else if (\\\"-\\\".equals(token)) {\\r\\n             processSingleHyphen(token);\\r\\n         } else if (token.startsWith(\\\"-\\\")) {\\r\\n             int tokenLength = token.length();\\r\\n             if (tokenLength == 2) {\\r\\n                 processOptionToken(token, stopAtNonOption);\\r\\n             } else if (options.hasOption(token)) {\\r\\n                 tokens.add(token);\\r\\n             } else {\\r\\n                 burstToken(token, stopAtNonOption);\\r\\n             }\\r\\n         } else {\\r\\n             if (stopAtNonOption) {\\r\\n                 process(token);\\r\\n             } else {\\r\\n                 tokens.add(token);\\r\\n             }\\r\\n         }\\r\\n         gobble(iter);\\r\\n     }\\r\\n     return (String[]) tokens.toArray(new String[] {});\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"roxspring@apache.org","authorName":"Robert James Oxspring","commitYear":"2004","diff":"\"@@ -1,34 +1,36 @@\\n protected String[] flatten(Options options, String[] arguments, boolean stopAtNonOption) {\\r\\n     init();\\r\\n     this.options = options;\\r\\n     Iterator iter = Arrays.asList(arguments).iterator();\\r\\n     String token = null;\\r\\n     while (iter.hasNext()) {\\r\\n         token = (String) iter.next();\\r\\n         if (token.startsWith(\\\"--\\\")) {\\r\\n             if (token.indexOf('=') != -1) {\\r\\n                 tokens.add(token.substring(0, token.indexOf('=')));\\r\\n                 tokens.add(token.substring(token.indexOf('=') + 1, token.length()));\\r\\n             } else {\\r\\n                 tokens.add(token);\\r\\n             }\\r\\n         } else if (\\\"-\\\".equals(token)) {\\r\\n             processSingleHyphen(token);\\r\\n         } else if (token.startsWith(\\\"-\\\")) {\\r\\n             int tokenLength = token.length();\\r\\n             if (tokenLength == 2) {\\r\\n                 processOptionToken(token, stopAtNonOption);\\r\\n+            } else if (options.hasOption(token)) {\\r\\n+                tokens.add(token);\\r\\n             } else {\\r\\n                 burstToken(token, stopAtNonOption);\\r\\n             }\\r\\n         } else {\\r\\n             if (stopAtNonOption) {\\r\\n                 process(token);\\r\\n             } else {\\r\\n                 tokens.add(token);\\r\\n             }\\r\\n         }\\r\\n         gobble(iter);\\r\\n     }\\r\\n     return (String[]) tokens.toArray(new String[] {});\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -1,29 +1,34 @@\\n protected String[] flatten(Options options, String[] arguments, boolean stopAtNonOption) {\\r\\n     init();\\r\\n     this.options = options;\\r\\n     Iterator iter = Arrays.asList(arguments).iterator();\\r\\n     String token = null;\\r\\n     while (iter.hasNext()) {\\r\\n         token = (String) iter.next();\\r\\n         if (token.startsWith(\\\"--\\\")) {\\r\\n-            tokens.add(token);\\r\\n+            if (token.indexOf('=') != -1) {\\r\\n+                tokens.add(token.substring(0, token.indexOf('=')));\\r\\n+                tokens.add(token.substring(token.indexOf('=') + 1, token.length()));\\r\\n+            } else {\\r\\n+                tokens.add(token);\\r\\n+            }\\r\\n         } else if (\\\"-\\\".equals(token)) {\\r\\n             processSingleHyphen(token);\\r\\n         } else if (token.startsWith(\\\"-\\\")) {\\r\\n             int tokenLength = token.length();\\r\\n             if (tokenLength == 2) {\\r\\n                 processOptionToken(token, stopAtNonOption);\\r\\n             } else {\\r\\n                 burstToken(token, stopAtNonOption);\\r\\n             }\\r\\n         } else {\\r\\n             if (stopAtNonOption) {\\r\\n                 process(token);\\r\\n             } else {\\r\\n                 tokens.add(token);\\r\\n             }\\r\\n         }\\r\\n         gobble(iter);\\r\\n     }\\r\\n     return (String[]) tokens.toArray(new String[] {});\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -0,0 +1,29 @@\\n+protected String[] flatten(Options options, String[] arguments, boolean stopAtNonOption) {\\r\\n+    init();\\r\\n+    this.options = options;\\r\\n+    Iterator iter = Arrays.asList(arguments).iterator();\\r\\n+    String token = null;\\r\\n+    while (iter.hasNext()) {\\r\\n+        token = (String) iter.next();\\r\\n+        if (token.startsWith(\\\"--\\\")) {\\r\\n+            tokens.add(token);\\r\\n+        } else if (\\\"-\\\".equals(token)) {\\r\\n+            processSingleHyphen(token);\\r\\n+        } else if (token.startsWith(\\\"-\\\")) {\\r\\n+            int tokenLength = token.length();\\r\\n+            if (tokenLength == 2) {\\r\\n+                processOptionToken(token, stopAtNonOption);\\r\\n+            } else {\\r\\n+                burstToken(token, stopAtNonOption);\\r\\n+            }\\r\\n+        } else {\\r\\n+            if (stopAtNonOption) {\\r\\n+                process(token);\\r\\n+            } else {\\r\\n+                tokens.add(token);\\r\\n+            }\\r\\n+        }\\r\\n+        gobble(iter);\\r\\n+    }\\r\\n+    return (String[]) tokens.toArray(new String[] {});\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\main\java\org\apache\commons\cli\PosixParser.java	gobble	org.apache.commons.cli.PosixParser.gobble(Iterator<String>)	187	193	3	[{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"\""},{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,7 +1,7 @@\\n-private void gobble(Iterator<String> iter) {\\r\\n+private void gobble(final Iterator<String> iter) {\\r\\n     if (eatTheRest) {\\r\\n         while (iter.hasNext()) {\\r\\n             tokens.add(iter.next());\\r\\n         }\\r\\n     }\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2012","diff":"\"@@ -1,7 +1,7 @@\\n-private void gobble(Iterator iter) {\\r\\n+private void gobble(Iterator<String> iter) {\\r\\n     if (eatTheRest) {\\r\\n         while (iter.hasNext()) {\\r\\n             tokens.add(iter.next());\\r\\n         }\\r\\n     }\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2008","diff":"\"\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -0,0 +1,7 @@\\n+private void gobble(Iterator iter) {\\r\\n+    if (eatTheRest) {\\r\\n+        while (iter.hasNext()) {\\r\\n+            tokens.add(iter.next());\\r\\n+        }\\r\\n+    }\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\main\java\org\apache\commons\cli\PosixParser.java	init	org.apache.commons.cli.PosixParser.init()	199	202	1	[{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"\""},{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2008","diff":"\"@@ -1,5 +1,4 @@\\n private void init() {\\r\\n     eatTheRest = false;\\r\\n     tokens.clear();\\r\\n-    currentOption = null;\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2008","diff":"\"\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -0,0 +1,5 @@\\n+private void init() {\\r\\n+    eatTheRest = false;\\r\\n+    tokens.clear();\\r\\n+    currentOption = null;\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\main\java\org\apache\commons\cli\PosixParser.java	processNonOptionToken	org.apache.commons.cli.PosixParser.processNonOptionToken(String, boolean)	210	217	4	[{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"\""},{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"\""},{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,7 +1,7 @@\\n-private void processNonOptionToken(String value, boolean stopAtNonOption) {\\r\\n+private void processNonOptionToken(final String value, final boolean stopAtNonOption) {\\r\\n     if (stopAtNonOption && (currentOption == null || !currentOption.hasArg())) {\\r\\n         eatTheRest = true;\\r\\n         tokens.add(\\\"--\\\");\\r\\n     }\\r\\n     tokens.add(value);\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2008","diff":"\"@@ -1,5 +1,7 @@\\n-private void processNonOptionToken(String value) {\\r\\n-    eatTheRest = true;\\r\\n-    tokens.add(\\\"--\\\");\\r\\n+private void processNonOptionToken(String value, boolean stopAtNonOption) {\\r\\n+    if (stopAtNonOption && (currentOption == null || !currentOption.hasArg())) {\\r\\n+        eatTheRest = true;\\r\\n+        tokens.add(\\\"--\\\");\\r\\n+    }\\r\\n     tokens.add(value);\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2008","diff":"\"@@ -0,0 +1,5 @@\\n+private void processNonOptionToken(String value) {\\r\\n+    eatTheRest = true;\\r\\n+    tokens.add(\\\"--\\\");\\r\\n+    tokens.add(value);\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\main\java\org\apache\commons\cli\PosixParser.java	processOptionToken	org.apache.commons.cli.PosixParser.processOptionToken(String, boolean)	232	242	4	[{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"\""},{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"\""},{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,9 +1,9 @@\\n-private void processOptionToken(String token, boolean stopAtNonOption) {\\r\\n+private void processOptionToken(final String token, final boolean stopAtNonOption) {\\r\\n     if (stopAtNonOption && !options.hasOption(token)) {\\r\\n         eatTheRest = true;\\r\\n     }\\r\\n     if (options.hasOption(token)) {\\r\\n         currentOption = options.getOption(token);\\r\\n     }\\r\\n     tokens.add(token);\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2008","diff":"\"@@ -1,6 +1,9 @@\\n private void processOptionToken(String token, boolean stopAtNonOption) {\\r\\n-    if (!options.hasOption(token) && stopAtNonOption) {\\r\\n+    if (stopAtNonOption && !options.hasOption(token)) {\\r\\n         eatTheRest = true;\\r\\n     }\\r\\n+    if (options.hasOption(token)) {\\r\\n+        currentOption = options.getOption(token);\\r\\n+    }\\r\\n     tokens.add(token);\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2008","diff":"\"@@ -1,8 +1,6 @@\\n private void processOptionToken(String token, boolean stopAtNonOption) {\\r\\n-    if (options.hasOption(token)) {\\r\\n-        currentOption = options.getOption(token);\\r\\n-    } else if (stopAtNonOption) {\\r\\n+    if (!options.hasOption(token) && stopAtNonOption) {\\r\\n         eatTheRest = true;\\r\\n     }\\r\\n     tokens.add(token);\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2008","diff":"\"@@ -1,9 +1,8 @@\\n private void processOptionToken(String token, boolean stopAtNonOption) {\\r\\n     if (options.hasOption(token)) {\\r\\n         currentOption = options.getOption(token);\\r\\n-        tokens.add(token);\\r\\n     } else if (stopAtNonOption) {\\r\\n         eatTheRest = true;\\r\\n-        tokens.add(token);\\r\\n     }\\r\\n+    tokens.add(token);\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2008","diff":"\"@@ -1,8 +1,9 @@\\n private void processOptionToken(String token, boolean stopAtNonOption) {\\r\\n-    if (this.options.hasOption(token)) {\\r\\n-        currentOption = this.options.getOption(token);\\r\\n+    if (options.hasOption(token)) {\\r\\n+        currentOption = options.getOption(token);\\r\\n         tokens.add(token);\\r\\n     } else if (stopAtNonOption) {\\r\\n         eatTheRest = true;\\r\\n+        tokens.add(token);\\r\\n     }\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2008","diff":"\"\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -1,8 +1,8 @@\\n-private void processOptionToken(String token, boolean stop) {\\r\\n+private void processOptionToken(String token, boolean stopAtNonOption) {\\r\\n     if (this.options.hasOption(token)) {\\r\\n         currentOption = this.options.getOption(token);\\r\\n         tokens.add(token);\\r\\n-    } else if (stop) {\\r\\n+    } else if (stopAtNonOption) {\\r\\n         eatTheRest = true;\\r\\n     }\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -0,0 +1,8 @@\\n+private void processOptionToken(String token, boolean stop) {\\r\\n+    if (this.options.hasOption(token)) {\\r\\n+        currentOption = this.options.getOption(token);\\r\\n+        tokens.add(token);\\r\\n+    } else if (stop) {\\r\\n+        eatTheRest = true;\\r\\n+    }\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\main\java\org\apache\commons\cli\TypeHandler.java	createClass	org.apache.commons.cli.TypeHandler.createClass(String)	39	45	4	[{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2023","diff":"\"\""},{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2023","diff":"\"@@ -1,7 +1,7 @@\\n-public static Class<?> createClass(final String classname) throws ParseException {\\r\\n+public static Class<?> createClass(final String className) throws ParseException {\\r\\n     try {\\r\\n-        return Class.forName(classname);\\r\\n+        return Class.forName(className);\\r\\n     } catch (final ClassNotFoundException e) {\\r\\n-        throw new ParseException(\\\"Unable to find the class: \\\" + classname);\\r\\n+        throw new ParseException(\\\"Unable to find the class: \\\" + className);\\r\\n     }\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"\""},{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"\""},{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,7 +1,7 @@\\n-public static Class<?> createClass(String classname) throws ParseException {\\r\\n+public static Class<?> createClass(final String classname) throws ParseException {\\r\\n     try {\\r\\n         return Class.forName(classname);\\r\\n     } catch (final ClassNotFoundException e) {\\r\\n         throw new ParseException(\\\"Unable to find the class: \\\" + classname);\\r\\n     }\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,7 +1,7 @@\\n public static Class<?> createClass(String classname) throws ParseException {\\r\\n     try {\\r\\n         return Class.forName(classname);\\r\\n-    } catch (ClassNotFoundException e) {\\r\\n+    } catch (final ClassNotFoundException e) {\\r\\n         throw new ParseException(\\\"Unable to find the class: \\\" + classname);\\r\\n     }\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"sebb@apache.org","authorName":"Sebastian Bazley","commitYear":"2013","diff":"\"@@ -1,7 +1,7 @@\\n-public static Class createClass(String classname) throws ParseException {\\r\\n+public static Class<?> createClass(String classname) throws ParseException {\\r\\n     try {\\r\\n         return Class.forName(classname);\\r\\n     } catch (ClassNotFoundException e) {\\r\\n         throw new ParseException(\\\"Unable to find the class: \\\" + classname);\\r\\n     }\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"tn@apache.org","authorName":"Thomas Neidhart","commitYear":"2013","diff":"\"\""},{"authorEmail":"bayard@apache.org","authorName":"Henri Yandell","commitYear":"2009","diff":"\"@@ -1,8 +1,7 @@\\n-public static Class createClass(String classname) {\\r\\n+public static Class createClass(String classname) throws ParseException {\\r\\n     try {\\r\\n         return Class.forName(classname);\\r\\n     } catch (ClassNotFoundException e) {\\r\\n-        System.err.println(\\\"Unable to find the class: \\\" + classname);\\r\\n-        return null;\\r\\n+        throw new ParseException(\\\"Unable to find the class: \\\" + classname);\\r\\n     }\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2008","diff":"\"@@ -1,8 +1,8 @@\\n-public static Class createClass(String str) {\\r\\n+public static Class createClass(String classname) {\\r\\n     try {\\r\\n-        return Class.forName(str);\\r\\n-    } catch (ClassNotFoundException cnfe) {\\r\\n-        System.err.println(\\\"Unable to find: \\\" + str);\\r\\n+        return Class.forName(classname);\\r\\n+    } catch (ClassNotFoundException e) {\\r\\n+        System.err.println(\\\"Unable to find the class: \\\" + classname);\\r\\n         return null;\\r\\n     }\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2008","diff":"\"\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"\""},{"authorEmail":"jstrachan@apache.org","authorName":"James Strachan","commitYear":"2002","diff":"\"@@ -0,0 +1,8 @@\\n+public static Class createClass(String str) {\\r\\n+    try {\\r\\n+        return Class.forName(str);\\r\\n+    } catch (ClassNotFoundException cnfe) {\\r\\n+        System.err.println(\\\"Unable to find: \\\" + str);\\r\\n+        return null;\\r\\n+    }\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\main\java\org\apache\commons\cli\TypeHandler.java	createDate	org.apache.commons.cli.TypeHandler.createDate(String)	56	58	2	[{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"\""},{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"\""},{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,3 +1,3 @@\\n-public static Date createDate(String str) {\\r\\n+public static Date createDate(final String str) {\\r\\n     throw new UnsupportedOperationException(\\\"Not yet implemented\\\");\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"tn@apache.org","authorName":"Thomas Neidhart","commitYear":"2013","diff":"\"@@ -1,3 +1,3 @@\\n-public static Date createDate(String str) throws ParseException {\\r\\n+public static Date createDate(String str) {\\r\\n     throw new UnsupportedOperationException(\\\"Not yet implemented\\\");\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"tn@apache.org","authorName":"Thomas Neidhart","commitYear":"2013","diff":"\"\""},{"authorEmail":"bayard@apache.org","authorName":"Henri Yandell","commitYear":"2009","diff":"\"@@ -1,3 +1,3 @@\\n-public static Date createDate(String str) {\\r\\n+public static Date createDate(String str) throws ParseException {\\r\\n     throw new UnsupportedOperationException(\\\"Not yet implemented\\\");\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2008","diff":"\"\""},{"authorEmail":"bayard@apache.org","authorName":"Henri Yandell","commitYear":"2007","diff":"\"@@ -1,7 +1,3 @@\\n public static Date createDate(String str) {\\r\\n-    Date date = null;\\r\\n-    if (date == null) {\\r\\n-        System.err.println(\\\"Unable to parse: \\\" + str);\\r\\n-    }\\r\\n-    return date;\\r\\n+    throw new UnsupportedOperationException(\\\"Not yet implemented\\\");\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"\""},{"authorEmail":"jstrachan@apache.org","authorName":"James Strachan","commitYear":"2002","diff":"\"@@ -0,0 +1,7 @@\\n+public static Date createDate(String str) {\\r\\n+    Date date = null;\\r\\n+    if (date == null) {\\r\\n+        System.err.println(\\\"Unable to parse: \\\" + str);\\r\\n+    }\\r\\n+    return date;\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\main\java\org\apache\commons\cli\TypeHandler.java	createFile	org.apache.commons.cli.TypeHandler.createFile(String)	66	68	1	[{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"\""},{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,3 +1,3 @@\\n-public static File createFile(String str) {\\r\\n+public static File createFile(final String str) {\\r\\n     return new File(str);\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"tn@apache.org","authorName":"Thomas Neidhart","commitYear":"2013","diff":"\"@@ -1,3 +1,3 @@\\n-public static File createFile(String str) throws ParseException {\\r\\n+public static File createFile(String str) {\\r\\n     return new File(str);\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"bayard@apache.org","authorName":"Henri Yandell","commitYear":"2009","diff":"\"@@ -1,3 +1,3 @@\\n-public static File createFile(String str) {\\r\\n+public static File createFile(String str) throws ParseException {\\r\\n     return new File(str);\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2008","diff":"\"\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"\""},{"authorEmail":"jstrachan@apache.org","authorName":"James Strachan","commitYear":"2002","diff":"\"@@ -0,0 +1,3 @@\\n+public static File createFile(String str) {\\r\\n+    return new File(str);\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\main\java\org\apache\commons\cli\TypeHandler.java	createFiles	org.apache.commons.cli.TypeHandler.createFiles(String)	79	83	2	[{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"\""},{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"\""},{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,3 +1,3 @@\\n-public static File[] createFiles(String str) {\\r\\n+public static File[] createFiles(final String str) {\\r\\n     throw new UnsupportedOperationException(\\\"Not yet implemented\\\");\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"tn@apache.org","authorName":"Thomas Neidhart","commitYear":"2013","diff":"\"@@ -1,3 +1,3 @@\\n-public static File[] createFiles(String str) throws ParseException {\\r\\n+public static File[] createFiles(String str) {\\r\\n     throw new UnsupportedOperationException(\\\"Not yet implemented\\\");\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"tn@apache.org","authorName":"Thomas Neidhart","commitYear":"2013","diff":"\"\""},{"authorEmail":"bayard@apache.org","authorName":"Henri Yandell","commitYear":"2009","diff":"\"@@ -1,3 +1,3 @@\\n public static File[] createFiles(String str) throws ParseException {\\r\\n-    return null;\\r\\n+    throw new UnsupportedOperationException(\\\"Not yet implemented\\\");\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"bayard@apache.org","authorName":"Henri Yandell","commitYear":"2009","diff":"\"@@ -1,3 +1,3 @@\\n-public static File[] createFiles(String str) {\\r\\n+public static File[] createFiles(String str) throws ParseException {\\r\\n     return null;\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2008","diff":"\"\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"\""},{"authorEmail":"jstrachan@apache.org","authorName":"James Strachan","commitYear":"2002","diff":"\"@@ -0,0 +1,3 @@\\n+public static File[] createFiles(String str) {\\r\\n+    return null;\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\main\java\org\apache\commons\cli\TypeHandler.java	createNumber	org.apache.commons.cli.TypeHandler.createNumber(String)	92	101	4	[{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2023","diff":"\"\""},{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"\""},{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"\""},{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,10 +1,10 @@\\n-public static Number createNumber(String str) throws ParseException {\\r\\n+public static Number createNumber(final String str) throws ParseException {\\r\\n     try {\\r\\n         if (str.indexOf('.') != -1) {\\r\\n             return Double.valueOf(str);\\r\\n         }\\r\\n         return Long.valueOf(str);\\r\\n     } catch (final NumberFormatException e) {\\r\\n         throw new ParseException(e.getMessage());\\r\\n     }\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,10 +1,10 @@\\n public static Number createNumber(String str) throws ParseException {\\r\\n     try {\\r\\n         if (str.indexOf('.') != -1) {\\r\\n             return Double.valueOf(str);\\r\\n         }\\r\\n         return Long.valueOf(str);\\r\\n-    } catch (NumberFormatException e) {\\r\\n+    } catch (final NumberFormatException e) {\\r\\n         throw new ParseException(e.getMessage());\\r\\n     }\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2015","diff":"\"@@ -1,11 +1,10 @@\\n public static Number createNumber(String str) throws ParseException {\\r\\n     try {\\r\\n         if (str.indexOf('.') != -1) {\\r\\n             return Double.valueOf(str);\\r\\n-        } else {\\r\\n-            return Long.valueOf(str);\\r\\n         }\\r\\n+        return Long.valueOf(str);\\r\\n     } catch (NumberFormatException e) {\\r\\n         throw new ParseException(e.getMessage());\\r\\n     }\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"tn@apache.org","authorName":"Thomas Neidhart","commitYear":"2013","diff":"\"\""},{"authorEmail":"bayard@apache.org","authorName":"Henri Yandell","commitYear":"2009","diff":"\"@@ -1,12 +1,11 @@\\n-public static Number createNumber(String str) {\\r\\n+public static Number createNumber(String str) throws ParseException {\\r\\n     try {\\r\\n         if (str.indexOf('.') != -1) {\\r\\n             return Double.valueOf(str);\\r\\n         } else {\\r\\n             return Long.valueOf(str);\\r\\n         }\\r\\n     } catch (NumberFormatException e) {\\r\\n-        System.err.println(e.getMessage());\\r\\n+        throw new ParseException(e.getMessage());\\r\\n     }\\r\\n-    return null;\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2008","diff":"\"@@ -1,12 +1,12 @@\\n public static Number createNumber(String str) {\\r\\n     try {\\r\\n         if (str.indexOf('.') != -1) {\\r\\n             return Double.valueOf(str);\\r\\n         } else {\\r\\n             return Long.valueOf(str);\\r\\n         }\\r\\n-    } catch (NumberFormatException nfe) {\\r\\n-        System.err.println(nfe.getMessage());\\r\\n+    } catch (NumberFormatException e) {\\r\\n+        System.err.println(e.getMessage());\\r\\n     }\\r\\n     return null;\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2008","diff":"\"\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2008","diff":"\"@@ -1,14 +1,12 @@\\n public static Number createNumber(String str) {\\r\\n     try {\\r\\n-        if (str != null) {\\r\\n-            if (str.indexOf('.') != -1) {\\r\\n-                return Double.valueOf(str);\\r\\n-            } else {\\r\\n-                return Long.valueOf(str);\\r\\n-            }\\r\\n+        if (str.indexOf('.') != -1) {\\r\\n+            return Double.valueOf(str);\\r\\n+        } else {\\r\\n+            return Long.valueOf(str);\\r\\n         }\\r\\n     } catch (NumberFormatException nfe) {\\r\\n         System.err.println(nfe.getMessage());\\r\\n     }\\r\\n     return null;\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"bayard@apache.org","authorName":"Henri Yandell","commitYear":"2007","diff":"\"@@ -1,8 +1,14 @@\\n public static Number createNumber(String str) {\\r\\n     try {\\r\\n-        return NumberUtils.createNumber(str);\\r\\n+        if (str != null) {\\r\\n+            if (str.indexOf('.') != -1) {\\r\\n+                return Double.valueOf(str);\\r\\n+            } else {\\r\\n+                return Long.valueOf(str);\\r\\n+            }\\r\\n+        }\\r\\n     } catch (NumberFormatException nfe) {\\r\\n         System.err.println(nfe.getMessage());\\r\\n-        return null;\\r\\n     }\\r\\n+    return null;\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"\""},{"authorEmail":"bayard@apache.org","authorName":"Henri Yandell","commitYear":"2002","diff":"\"@@ -1,8 +1,8 @@\\n public static Number createNumber(String str) {\\r\\n     try {\\r\\n-        return Numbers.createNumber(str);\\r\\n+        return NumberUtils.createNumber(str);\\r\\n     } catch (NumberFormatException nfe) {\\r\\n         System.err.println(nfe.getMessage());\\r\\n         return null;\\r\\n     }\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"bayard@apache.org","authorName":"Henri Yandell","commitYear":"2002","diff":"\"@@ -1,8 +1,8 @@\\n public static Number createNumber(String str) {\\r\\n     try {\\r\\n-        return NumberUtils.createNumber(str);\\r\\n+        return Numbers.createNumber(str);\\r\\n     } catch (NumberFormatException nfe) {\\r\\n         System.err.println(nfe.getMessage());\\r\\n         return null;\\r\\n     }\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"bayard@apache.org","authorName":"Henri Yandell","commitYear":"2002","diff":"\"@@ -1,8 +1,8 @@\\n public static Number createNumber(String str) {\\r\\n     try {\\r\\n-        return Numbers.createNumber(str);\\r\\n+        return NumberUtils.createNumber(str);\\r\\n     } catch (NumberFormatException nfe) {\\r\\n         System.err.println(nfe.getMessage());\\r\\n         return null;\\r\\n     }\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"\""},{"authorEmail":"jstrachan@apache.org","authorName":"James Strachan","commitYear":"2002","diff":"\"@@ -0,0 +1,8 @@\\n+public static Number createNumber(String str) {\\r\\n+    try {\\r\\n+        return Numbers.createNumber(str);\\r\\n+    } catch (NumberFormatException nfe) {\\r\\n+        System.err.println(nfe.getMessage());\\r\\n+        return null;\\r\\n+    }\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\main\java\org\apache\commons\cli\TypeHandler.java	createObject	org.apache.commons.cli.TypeHandler.createObject(String)	110	124	7	[{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2023","diff":"\"@@ -1,13 +1,13 @@\\n-public static Object createObject(final String classname) throws ParseException {\\r\\n+public static Object createObject(final String className) throws ParseException {\\r\\n     final Class<?> cl;\\r\\n     try {\\r\\n-        cl = Class.forName(classname);\\r\\n+        cl = Class.forName(className);\\r\\n     } catch (final ClassNotFoundException cnfe) {\\r\\n-        throw new ParseException(\\\"Unable to find the class: \\\" + classname);\\r\\n+        throw new ParseException(\\\"Unable to find the class: \\\" + className);\\r\\n     }\\r\\n     try {\\r\\n         return cl.getConstructor().newInstance();\\r\\n     } catch (final Exception e) {\\r\\n-        throw new ParseException(e.getClass().getName() + \\\"; Unable to create an instance of: \\\" + classname);\\r\\n+        throw new ParseException(e.getClass().getName() + \\\"; Unable to create an instance of: \\\" + className);\\r\\n     }\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2023","diff":"\"@@ -1,13 +1,13 @@\\n public static Object createObject(final String classname) throws ParseException {\\r\\n     final Class<?> cl;\\r\\n     try {\\r\\n         cl = Class.forName(classname);\\r\\n     } catch (final ClassNotFoundException cnfe) {\\r\\n         throw new ParseException(\\\"Unable to find the class: \\\" + classname);\\r\\n     }\\r\\n     try {\\r\\n-        return cl.newInstance();\\r\\n+        return cl.getConstructor().newInstance();\\r\\n     } catch (final Exception e) {\\r\\n         throw new ParseException(e.getClass().getName() + \\\"; Unable to create an instance of: \\\" + classname);\\r\\n     }\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"\""},{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"\""},{"authorEmail":"arturobernalg@gmail.com","authorName":"Arturo Bernal","commitYear":"2020","diff":"\"@@ -1,13 +1,13 @@\\n public static Object createObject(final String classname) throws ParseException {\\r\\n-    Class<?> cl;\\r\\n+    final Class<?> cl;\\r\\n     try {\\r\\n         cl = Class.forName(classname);\\r\\n     } catch (final ClassNotFoundException cnfe) {\\r\\n         throw new ParseException(\\\"Unable to find the class: \\\" + classname);\\r\\n     }\\r\\n     try {\\r\\n         return cl.newInstance();\\r\\n     } catch (final Exception e) {\\r\\n         throw new ParseException(e.getClass().getName() + \\\"; Unable to create an instance of: \\\" + classname);\\r\\n     }\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2019","diff":"\"\""},{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,13 +1,13 @@\\n-public static Object createObject(String classname) throws ParseException {\\r\\n+public static Object createObject(final String classname) throws ParseException {\\r\\n     Class<?> cl;\\r\\n     try {\\r\\n         cl = Class.forName(classname);\\r\\n     } catch (final ClassNotFoundException cnfe) {\\r\\n         throw new ParseException(\\\"Unable to find the class: \\\" + classname);\\r\\n     }\\r\\n     try {\\r\\n         return cl.newInstance();\\r\\n     } catch (final Exception e) {\\r\\n         throw new ParseException(e.getClass().getName() + \\\"; Unable to create an instance of: \\\" + classname);\\r\\n     }\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,13 +1,13 @@\\n public static Object createObject(String classname) throws ParseException {\\r\\n     Class<?> cl;\\r\\n     try {\\r\\n         cl = Class.forName(classname);\\r\\n-    } catch (ClassNotFoundException cnfe) {\\r\\n+    } catch (final ClassNotFoundException cnfe) {\\r\\n         throw new ParseException(\\\"Unable to find the class: \\\" + classname);\\r\\n     }\\r\\n     try {\\r\\n         return cl.newInstance();\\r\\n-    } catch (Exception e) {\\r\\n+    } catch (final Exception e) {\\r\\n         throw new ParseException(e.getClass().getName() + \\\"; Unable to create an instance of: \\\" + classname);\\r\\n     }\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"sebb@apache.org","authorName":"Sebastian Bazley","commitYear":"2013","diff":"\"@@ -1,13 +1,13 @@\\n public static Object createObject(String classname) throws ParseException {\\r\\n-    Class cl;\\r\\n+    Class<?> cl;\\r\\n     try {\\r\\n         cl = Class.forName(classname);\\r\\n     } catch (ClassNotFoundException cnfe) {\\r\\n         throw new ParseException(\\\"Unable to find the class: \\\" + classname);\\r\\n     }\\r\\n     try {\\r\\n         return cl.newInstance();\\r\\n     } catch (Exception e) {\\r\\n         throw new ParseException(e.getClass().getName() + \\\"; Unable to create an instance of: \\\" + classname);\\r\\n     }\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"tn@apache.org","authorName":"Thomas Neidhart","commitYear":"2013","diff":"\"\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2012","diff":"\"@@ -1,15 +1,13 @@\\n public static Object createObject(String classname) throws ParseException {\\r\\n-    Class cl = null;\\r\\n+    Class cl;\\r\\n     try {\\r\\n         cl = Class.forName(classname);\\r\\n     } catch (ClassNotFoundException cnfe) {\\r\\n         throw new ParseException(\\\"Unable to find the class: \\\" + classname);\\r\\n     }\\r\\n-    Object instance = null;\\r\\n     try {\\r\\n-        instance = cl.newInstance();\\r\\n+        return cl.newInstance();\\r\\n     } catch (Exception e) {\\r\\n         throw new ParseException(e.getClass().getName() + \\\"; Unable to create an instance of: \\\" + classname);\\r\\n     }\\r\\n-    return instance;\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"bayard@apache.org","authorName":"Henri Yandell","commitYear":"2009","diff":"\"@@ -1,16 +1,15 @@\\n-public static Object createObject(String classname) {\\r\\n+public static Object createObject(String classname) throws ParseException {\\r\\n     Class cl = null;\\r\\n     try {\\r\\n         cl = Class.forName(classname);\\r\\n     } catch (ClassNotFoundException cnfe) {\\r\\n-        System.err.println(\\\"Unable to find the class: \\\" + classname);\\r\\n-        return null;\\r\\n+        throw new ParseException(\\\"Unable to find the class: \\\" + classname);\\r\\n     }\\r\\n     Object instance = null;\\r\\n     try {\\r\\n         instance = cl.newInstance();\\r\\n     } catch (Exception e) {\\r\\n-        System.err.println(e.getClass().getName() + \\\"; Unable to create an instance of: \\\" + classname);\\r\\n+        throw new ParseException(e.getClass().getName() + \\\"; Unable to create an instance of: \\\" + classname);\\r\\n     }\\r\\n     return instance;\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2008","diff":"\"@@ -1,16 +1,16 @@\\n-public static Object createObject(String str) {\\r\\n+public static Object createObject(String classname) {\\r\\n     Class cl = null;\\r\\n     try {\\r\\n-        cl = Class.forName(str);\\r\\n+        cl = Class.forName(classname);\\r\\n     } catch (ClassNotFoundException cnfe) {\\r\\n-        System.err.println(\\\"Unable to find the class: \\\" + str);\\r\\n+        System.err.println(\\\"Unable to find the class: \\\" + classname);\\r\\n         return null;\\r\\n     }\\r\\n     Object instance = null;\\r\\n     try {\\r\\n         instance = cl.newInstance();\\r\\n     } catch (Exception e) {\\r\\n-        System.err.println(e.getClass().getName() + \\\"; Unable to create an instance of: \\\" + str);\\r\\n+        System.err.println(e.getClass().getName() + \\\"; Unable to create an instance of: \\\" + classname);\\r\\n     }\\r\\n     return instance;\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2008","diff":"\"\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2008","diff":"\"@@ -1,20 +1,16 @@\\n public static Object createObject(String str) {\\r\\n     Class cl = null;\\r\\n     try {\\r\\n         cl = Class.forName(str);\\r\\n     } catch (ClassNotFoundException cnfe) {\\r\\n-        System.err.println(\\\"Unable to find: \\\" + str);\\r\\n+        System.err.println(\\\"Unable to find the class: \\\" + str);\\r\\n         return null;\\r\\n     }\\r\\n     Object instance = null;\\r\\n     try {\\r\\n         instance = cl.newInstance();\\r\\n-    } catch (InstantiationException cnfe) {\\r\\n-        System.err.println(\\\"InstantiationException; Unable to create: \\\" + str);\\r\\n-        return null;\\r\\n-    } catch (IllegalAccessException cnfe) {\\r\\n-        System.err.println(\\\"IllegalAccessException; Unable to create: \\\" + str);\\r\\n-        return null;\\r\\n+    } catch (Exception e) {\\r\\n+        System.err.println(e.getClass().getName() + \\\"; Unable to create an instance of: \\\" + str);\\r\\n     }\\r\\n     return instance;\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"\""},{"authorEmail":"jstrachan@apache.org","authorName":"James Strachan","commitYear":"2002","diff":"\"@@ -0,0 +1,20 @@\\n+public static Object createObject(String str) {\\r\\n+    Class cl = null;\\r\\n+    try {\\r\\n+        cl = Class.forName(str);\\r\\n+    } catch (ClassNotFoundException cnfe) {\\r\\n+        System.err.println(\\\"Unable to find: \\\" + str);\\r\\n+        return null;\\r\\n+    }\\r\\n+    Object instance = null;\\r\\n+    try {\\r\\n+        instance = cl.newInstance();\\r\\n+    } catch (InstantiationException cnfe) {\\r\\n+        System.err.println(\\\"InstantiationException; Unable to create: \\\" + str);\\r\\n+        return null;\\r\\n+    } catch (IllegalAccessException cnfe) {\\r\\n+        System.err.println(\\\"IllegalAccessException; Unable to create: \\\" + str);\\r\\n+        return null;\\r\\n+    }\\r\\n+    return instance;\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\main\java\org\apache\commons\cli\TypeHandler.java	createURL	org.apache.commons.cli.TypeHandler.createURL(String)	133	139	4	[{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"\""},{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"\""},{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,7 +1,7 @@\\n-public static URL createURL(String str) throws ParseException {\\r\\n+public static URL createURL(final String str) throws ParseException {\\r\\n     try {\\r\\n         return new URL(str);\\r\\n     } catch (final MalformedURLException e) {\\r\\n         throw new ParseException(\\\"Unable to parse the URL: \\\" + str);\\r\\n     }\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,7 +1,7 @@\\n public static URL createURL(String str) throws ParseException {\\r\\n     try {\\r\\n         return new URL(str);\\r\\n-    } catch (MalformedURLException e) {\\r\\n+    } catch (final MalformedURLException e) {\\r\\n         throw new ParseException(\\\"Unable to parse the URL: \\\" + str);\\r\\n     }\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"tn@apache.org","authorName":"Thomas Neidhart","commitYear":"2013","diff":"\"\""},{"authorEmail":"bayard@apache.org","authorName":"Henri Yandell","commitYear":"2009","diff":"\"@@ -1,8 +1,7 @@\\n-public static URL createURL(String str) {\\r\\n+public static URL createURL(String str) throws ParseException {\\r\\n     try {\\r\\n         return new URL(str);\\r\\n     } catch (MalformedURLException e) {\\r\\n-        System.err.println(\\\"Unable to parse the URL: \\\" + str);\\r\\n-        return null;\\r\\n+        throw new ParseException(\\\"Unable to parse the URL: \\\" + str);\\r\\n     }\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2008","diff":"\"@@ -1,8 +1,8 @@\\n public static URL createURL(String str) {\\r\\n     try {\\r\\n         return new URL(str);\\r\\n-    } catch (MalformedURLException mue) {\\r\\n-        System.err.println(\\\"Unable to parse: \\\" + str);\\r\\n+    } catch (MalformedURLException e) {\\r\\n+        System.err.println(\\\"Unable to parse the URL: \\\" + str);\\r\\n         return null;\\r\\n     }\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"\""},{"authorEmail":"jstrachan@apache.org","authorName":"James Strachan","commitYear":"2002","diff":"\"@@ -0,0 +1,8 @@\\n+public static URL createURL(String str) {\\r\\n+    try {\\r\\n+        return new URL(str);\\r\\n+    } catch (MalformedURLException mue) {\\r\\n+        System.err.println(\\\"Unable to parse: \\\" + str);\\r\\n+        return null;\\r\\n+    }\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\main\java\org\apache\commons\cli\TypeHandler.java	createValue	org.apache.commons.cli.TypeHandler.createValue(String, Class<T>)	151	180	20	[{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"\""},{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"\""},{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"@@ -1,24 +1,31 @@\\n @SuppressWarnings(\\\"unchecked\\\")\\r\\n public static <T> T createValue(final String str, final Class<T> clazz) throws ParseException {\\r\\n     if (PatternOptionBuilder.STRING_VALUE == clazz) {\\r\\n         return (T) str;\\r\\n-    } else if (PatternOptionBuilder.OBJECT_VALUE == clazz) {\\r\\n-        return (T) createObject(str);\\r\\n-    } else if (PatternOptionBuilder.NUMBER_VALUE == clazz) {\\r\\n-        return (T) createNumber(str);\\r\\n-    } else if (PatternOptionBuilder.DATE_VALUE == clazz) {\\r\\n-        return (T) createDate(str);\\r\\n-    } else if (PatternOptionBuilder.CLASS_VALUE == clazz) {\\r\\n-        return (T) createClass(str);\\r\\n-    } else if (PatternOptionBuilder.FILE_VALUE == clazz) {\\r\\n-        return (T) createFile(str);\\r\\n-    } else if (PatternOptionBuilder.EXISTING_FILE_VALUE == clazz) {\\r\\n-        return (T) openFile(str);\\r\\n-    } else if (PatternOptionBuilder.FILES_VALUE == clazz) {\\r\\n-        return (T) createFiles(str);\\r\\n-    } else if (PatternOptionBuilder.URL_VALUE == clazz) {\\r\\n-        return (T) createURL(str);\\r\\n-    } else {\\r\\n-        throw new ParseException(\\\"Unable to handle the class: \\\" + clazz);\\r\\n     }\\r\\n+    if (PatternOptionBuilder.OBJECT_VALUE == clazz) {\\r\\n+        return (T) createObject(str);\\r\\n+    }\\r\\n+    if (PatternOptionBuilder.NUMBER_VALUE == clazz) {\\r\\n+        return (T) createNumber(str);\\r\\n+    }\\r\\n+    if (PatternOptionBuilder.DATE_VALUE == clazz) {\\r\\n+        return (T) createDate(str);\\r\\n+    }\\r\\n+    if (PatternOptionBuilder.CLASS_VALUE == clazz) {\\r\\n+        return (T) createClass(str);\\r\\n+    }\\r\\n+    if (PatternOptionBuilder.FILE_VALUE == clazz) {\\r\\n+        return (T) createFile(str);\\r\\n+    }\\r\\n+    if (PatternOptionBuilder.EXISTING_FILE_VALUE == clazz) {\\r\\n+        return (T) openFile(str);\\r\\n+    }\\r\\n+    if (PatternOptionBuilder.FILES_VALUE == clazz) {\\r\\n+        return (T) createFiles(str);\\r\\n+    }\\r\\n+    if (PatternOptionBuilder.URL_VALUE == clazz) {\\r\\n+        return (T) createURL(str);\\r\\n+    }\\r\\n+    throw new ParseException(\\\"Unable to handle the class: \\\" + clazz);\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"\""},{"authorEmail":"britter@apache.org","authorName":"Benedikt Ritter","commitYear":"2019","diff":"\"\""},{"authorEmail":"deep.alexander@gmail.com","authorName":"Alex Nordlund","commitYear":"2018","diff":"\"@@ -1,24 +1,24 @@\\n @SuppressWarnings(\\\"unchecked\\\")\\r\\n public static <T> T createValue(final String str, final Class<T> clazz) throws ParseException {\\r\\n     if (PatternOptionBuilder.STRING_VALUE == clazz) {\\r\\n         return (T) str;\\r\\n     } else if (PatternOptionBuilder.OBJECT_VALUE == clazz) {\\r\\n         return (T) createObject(str);\\r\\n     } else if (PatternOptionBuilder.NUMBER_VALUE == clazz) {\\r\\n         return (T) createNumber(str);\\r\\n     } else if (PatternOptionBuilder.DATE_VALUE == clazz) {\\r\\n         return (T) createDate(str);\\r\\n     } else if (PatternOptionBuilder.CLASS_VALUE == clazz) {\\r\\n         return (T) createClass(str);\\r\\n     } else if (PatternOptionBuilder.FILE_VALUE == clazz) {\\r\\n         return (T) createFile(str);\\r\\n     } else if (PatternOptionBuilder.EXISTING_FILE_VALUE == clazz) {\\r\\n         return (T) openFile(str);\\r\\n     } else if (PatternOptionBuilder.FILES_VALUE == clazz) {\\r\\n         return (T) createFiles(str);\\r\\n     } else if (PatternOptionBuilder.URL_VALUE == clazz) {\\r\\n         return (T) createURL(str);\\r\\n     } else {\\r\\n-        return null;\\r\\n+        throw new ParseException(\\\"Unable to handle the class: \\\" + clazz);\\r\\n     }\\r\\n }\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\main\java\org\apache\commons\cli\TypeHandler.java	createValue	org.apache.commons.cli.TypeHandler.createValue(String, Object)	190	192	1	[{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"\""},{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"\""},{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"\""},{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,3 +1,3 @@\\n-public static Object createValue(String str, Object obj) throws ParseException {\\r\\n+public static Object createValue(final String str, final Object obj) throws ParseException {\\r\\n     return createValue(str, (Class<?>) obj);\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"sebb@apache.org","authorName":"Sebastian Bazley","commitYear":"2013","diff":"\"@@ -1,3 +1,3 @@\\n public static Object createValue(String str, Object obj) throws ParseException {\\r\\n-    return createValue(str, (Class) obj);\\r\\n+    return createValue(str, (Class<?>) obj);\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"tn@apache.org","authorName":"Thomas Neidhart","commitYear":"2013","diff":"\"\""},{"authorEmail":"bayard@apache.org","authorName":"Henri Yandell","commitYear":"2009","diff":"\"@@ -1,3 +1,3 @@\\n-public static Object createValue(String str, Object obj) {\\r\\n+public static Object createValue(String str, Object obj) throws ParseException {\\r\\n     return createValue(str, (Class) obj);\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2008","diff":"\"\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"\""},{"authorEmail":"jstrachan@apache.org","authorName":"James Strachan","commitYear":"2002","diff":"\"@@ -0,0 +1,3 @@\\n+public static Object createValue(String str, Object obj) {\\r\\n+    return createValue(str, (Class) obj);\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\main\java\org\apache\commons\cli\TypeHandler.java	openFile	org.apache.commons.cli.TypeHandler.openFile(String)	201	207	4	[{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"\""},{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"\""},{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2020","diff":"\"@@ -1,7 +1,7 @@\\n public static FileInputStream openFile(final String str) throws ParseException {\\r\\n     try {\\r\\n         return new FileInputStream(str);\\r\\n-    } catch (FileNotFoundException e) {\\r\\n+    } catch (final FileNotFoundException e) {\\r\\n         throw new ParseException(\\\"Unable to find file: \\\" + str);\\r\\n     }\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2020","diff":"\"@@ -1,7 +1,7 @@\\n-public static FileInputStream openFile(String str) throws ParseException {\\r\\n+public static FileInputStream openFile(final String str) throws ParseException {\\r\\n     try {\\r\\n         return new FileInputStream(str);\\r\\n     } catch (FileNotFoundException e) {\\r\\n         throw new ParseException(\\\"Unable to find file: \\\" + str);\\r\\n     }\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"schaumb@users.noreply.github.com","authorName":"Bela Schaum","commitYear":"2017","diff":"\"\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\main\java\org\apache\commons\cli\UnrecognizedOptionException.java	getOption	org.apache.commons.cli.UnrecognizedOptionException.getOption()	60	62	1	[{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2008","diff":"\"\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2008","diff":"\"@@ -0,0 +1,3 @@\\n+public String getOption() {\\r\\n+    return option;\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\main\java\org\apache\commons\cli\Util.java	stripLeadingAndTrailingQuotes	org.apache.commons.cli.Util.stripLeadingAndTrailingQuotes(String)	36	43	5	[{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2023","diff":"\"\""},{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"\""},{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"\""},{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2019","diff":"\"\""},{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,7 +1,7 @@\\n static String stripLeadingAndTrailingQuotes(String str) {\\r\\n-    int length = str.length();\\r\\n+    final int length = str.length();\\r\\n     if (length > 1 && str.startsWith(\\\"\\\\\\\"\\\") && str.endsWith(\\\"\\\\\\\"\\\") && str.substring(1, length - 1).indexOf('\\\"') == -1) {\\r\\n         str = str.substring(1, length - 1);\\r\\n     }\\r\\n     return str;\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2010","diff":"\"@@ -1,9 +1,7 @@\\n static String stripLeadingAndTrailingQuotes(String str) {\\r\\n-    if (str.startsWith(\\\"\\\\\\\"\\\")) {\\r\\n-        str = str.substring(1, str.length());\\r\\n-    }\\r\\n-    if (str.endsWith(\\\"\\\\\\\"\\\")) {\\r\\n-        str = str.substring(0, str.length() - 1);\\r\\n+    int length = str.length();\\r\\n+    if (length > 1 && str.startsWith(\\\"\\\\\\\"\\\") && str.endsWith(\\\"\\\\\\\"\\\") && str.substring(1, length - 1).indexOf('\\\"') == -1) {\\r\\n+        str = str.substring(1, length - 1);\\r\\n     }\\r\\n     return str;\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2008","diff":"\"\""},{"authorEmail":"roxspring@apache.org","authorName":"Robert James Oxspring","commitYear":"2004","diff":"\"\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2003","diff":"\"@@ -0,0 +1,9 @@\\n+static String stripLeadingAndTrailingQuotes(String str) {\\r\\n+    if (str.startsWith(\\\"\\\\\\\"\\\")) {\\r\\n+        str = str.substring(1, str.length());\\r\\n+    }\\r\\n+    if (str.endsWith(\\\"\\\\\\\"\\\")) {\\r\\n+        str = str.substring(0, str.length() - 1);\\r\\n+    }\\r\\n+    return str;\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\main\java\org\apache\commons\cli\Util.java	stripLeadingHyphens	org.apache.commons.cli.Util.stripLeadingHyphens(String)	51	63	7	[{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2023","diff":"\"\""},{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"\""},{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"\""},{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"@@ -1,11 +1,12 @@\\n static String stripLeadingHyphens(final String str) {\\r\\n     if (str == null) {\\r\\n         return null;\\r\\n     }\\r\\n     if (str.startsWith(\\\"--\\\")) {\\r\\n         return str.substring(2);\\r\\n-    } else if (str.startsWith(\\\"-\\\")) {\\r\\n+    }\\r\\n+    if (str.startsWith(\\\"-\\\")) {\\r\\n         return str.substring(1);\\r\\n     }\\r\\n     return str;\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"@@ -1,11 +1,11 @@\\n static String stripLeadingHyphens(final String str) {\\r\\n     if (str == null) {\\r\\n         return null;\\r\\n     }\\r\\n     if (str.startsWith(\\\"--\\\")) {\\r\\n-        return str.substring(2, str.length());\\r\\n+        return str.substring(2);\\r\\n     } else if (str.startsWith(\\\"-\\\")) {\\r\\n-        return str.substring(1, str.length());\\r\\n+        return str.substring(1);\\r\\n     }\\r\\n     return str;\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,11 +1,11 @@\\n-static String stripLeadingHyphens(String str) {\\r\\n+static String stripLeadingHyphens(final String str) {\\r\\n     if (str == null) {\\r\\n         return null;\\r\\n     }\\r\\n     if (str.startsWith(\\\"--\\\")) {\\r\\n         return str.substring(2, str.length());\\r\\n     } else if (str.startsWith(\\\"-\\\")) {\\r\\n         return str.substring(1, str.length());\\r\\n     }\\r\\n     return str;\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"tn@apache.org","authorName":"Thomas Neidhart","commitYear":"2013","diff":"\"\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2008","diff":"\"\""},{"authorEmail":"bayard@apache.org","authorName":"Henri Yandell","commitYear":"2007","diff":"\"@@ -1,8 +1,11 @@\\n static String stripLeadingHyphens(String str) {\\r\\n+    if (str == null) {\\r\\n+        return null;\\r\\n+    }\\r\\n     if (str.startsWith(\\\"--\\\")) {\\r\\n         return str.substring(2, str.length());\\r\\n     } else if (str.startsWith(\\\"-\\\")) {\\r\\n         return str.substring(1, str.length());\\r\\n     }\\r\\n     return str;\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2003","diff":"\"\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -0,0 +1,8 @@\\n+static String stripLeadingHyphens(String str) {\\r\\n+    if (str.startsWith(\\\"--\\\")) {\\r\\n+        return str.substring(2, str.length());\\r\\n+    } else if (str.startsWith(\\\"-\\\")) {\\r\\n+        return str.substring(1, str.length());\\r\\n+    }\\r\\n+    return str;\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\test\java\org\apache\commons\cli\AbstractParserTestCase.java	parse	org.apache.commons.cli.AbstractParserTestCase.parse(CommandLineParser, Options, String[], Properties)	43	51	6	[{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"@@ -1,10 +1,10 @@\\n @SuppressWarnings(\\\"deprecation\\\")\\r\\n private CommandLine parse(final CommandLineParser parser, final Options opts, final String[] args, final Properties properties) throws ParseException {\\r\\n     if (parser instanceof Parser) {\\r\\n         return ((Parser) parser).parse(opts, args, properties);\\r\\n-    } else if (parser instanceof DefaultParser) {\\r\\n-        return ((DefaultParser) parser).parse(opts, args, properties);\\r\\n-    } else {\\r\\n-        throw new UnsupportedOperationException(\\\"Default options not supported by this parser\\\");\\r\\n     }\\r\\n+    if (parser instanceof DefaultParser) {\\r\\n+        return ((DefaultParser) parser).parse(opts, args, properties);\\r\\n+    }\\r\\n+    throw new UnsupportedOperationException(\\\"Default options not supported by this parser\\\");\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,10 +1,10 @@\\n @SuppressWarnings(\\\"deprecation\\\")\\r\\n-private CommandLine parse(CommandLineParser parser, Options opts, String[] args, Properties properties) throws ParseException {\\r\\n+private CommandLine parse(final CommandLineParser parser, final Options opts, final String[] args, final Properties properties) throws ParseException {\\r\\n     if (parser instanceof Parser) {\\r\\n         return ((Parser) parser).parse(opts, args, properties);\\r\\n     } else if (parser instanceof DefaultParser) {\\r\\n         return ((DefaultParser) parser).parse(opts, args, properties);\\r\\n     } else {\\r\\n         throw new UnsupportedOperationException(\\\"Default options not supported by this parser\\\");\\r\\n     }\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"sebb@apache.org","authorName":"Sebastian Bazley","commitYear":"2013","diff":"\"@@ -1,9 +1,10 @@\\n+@SuppressWarnings(\\\"deprecation\\\")\\r\\n private CommandLine parse(CommandLineParser parser, Options opts, String[] args, Properties properties) throws ParseException {\\r\\n     if (parser instanceof Parser) {\\r\\n         return ((Parser) parser).parse(opts, args, properties);\\r\\n     } else if (parser instanceof DefaultParser) {\\r\\n         return ((DefaultParser) parser).parse(opts, args, properties);\\r\\n     } else {\\r\\n         throw new UnsupportedOperationException(\\\"Default options not supported by this parser\\\");\\r\\n     }\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2010","diff":"\"@@ -0,0 +1,9 @@\\n+private CommandLine parse(CommandLineParser parser, Options opts, String[] args, Properties properties) throws ParseException {\\r\\n+    if (parser instanceof Parser) {\\r\\n+        return ((Parser) parser).parse(opts, args, properties);\\r\\n+    } else if (parser instanceof DefaultParser) {\\r\\n+        return ((DefaultParser) parser).parse(opts, args, properties);\\r\\n+    } else {\\r\\n+        throw new UnsupportedOperationException(\\\"Default options not supported by this parser\\\");\\r\\n+    }\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\test\java\org\apache\commons\cli\AbstractParserTestCase.java	setUp	org.apache.commons.cli.AbstractParserTestCase.setUp()	54	61	1	[{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"\""},{"authorEmail":"tn@apache.org","authorName":"Thomas Neidhart","commitYear":"2013","diff":"\"@@ -1,4 +1,4 @@\\n-@Override\\r\\n+@Before\\r\\n public void setUp() {\\r\\n     options = new Options().addOption(\\\"a\\\", \\\"enable-a\\\", false, \\\"turn [a] on or off\\\").addOption(\\\"b\\\", \\\"bfile\\\", true, \\\"set the value of [b]\\\").addOption(\\\"c\\\", \\\"copt\\\", false, \\\"turn [c] on or off\\\");\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"sebb@apache.org","authorName":"Sebastian Bazley","commitYear":"2013","diff":"\"@@ -1,3 +1,4 @@\\n+@Override\\r\\n public void setUp() {\\r\\n     options = new Options().addOption(\\\"a\\\", \\\"enable-a\\\", false, \\\"turn [a] on or off\\\").addOption(\\\"b\\\", \\\"bfile\\\", true, \\\"set the value of [b]\\\").addOption(\\\"c\\\", \\\"copt\\\", false, \\\"turn [c] on or off\\\");\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2008","diff":"\"@@ -0,0 +1,3 @@\\n+public void setUp() {\\r\\n+    options = new Options().addOption(\\\"a\\\", \\\"enable-a\\\", false, \\\"turn [a] on or off\\\").addOption(\\\"b\\\", \\\"bfile\\\", true, \\\"set the value of [b]\\\").addOption(\\\"c\\\", \\\"copt\\\", false, \\\"turn [c] on or off\\\");\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\test\java\org\apache\commons\cli\AbstractParserTestCase.java	testAmbiguousArgParsing	org.apache.commons.cli.AbstractParserTestCase.testAmbiguousArgParsing()	64	69	1	[{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2023","diff":"\"\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\test\java\org\apache\commons\cli\AbstractParserTestCase.java	testAmbiguousLongWithoutEqualSingleDash	org.apache.commons.cli.AbstractParserTestCase.testAmbiguousLongWithoutEqualSingleDash()	72	84	1	[{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"@@ -1,11 +1,11 @@\\n @Test\\r\\n public void testAmbiguousLongWithoutEqualSingleDash() throws Exception {\\r\\n-    final String[] args = new String[] { \\\"-b\\\", \\\"-foobar\\\" };\\r\\n+    final String[] args = { \\\"-b\\\", \\\"-foobar\\\" };\\r\\n     final Options options = new Options();\\r\\n     options.addOption(OptionBuilder.withLongOpt(\\\"foo\\\").hasOptionalArg().create('f'));\\r\\n     options.addOption(OptionBuilder.withLongOpt(\\\"bar\\\").hasOptionalArg().create('b'));\\r\\n     final CommandLine cl = parser.parse(options, args);\\r\\n     assertTrue(cl.hasOption(\\\"b\\\"));\\r\\n     assertTrue(cl.hasOption(\\\"f\\\"));\\r\\n     assertEquals(\\\"bar\\\", cl.getOptionValue(\\\"foo\\\"));\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,11 +1,11 @@\\n @Test\\r\\n public void testAmbiguousLongWithoutEqualSingleDash() throws Exception {\\r\\n-    String[] args = new String[] { \\\"-b\\\", \\\"-foobar\\\" };\\r\\n-    Options options = new Options();\\r\\n+    final String[] args = new String[] { \\\"-b\\\", \\\"-foobar\\\" };\\r\\n+    final Options options = new Options();\\r\\n     options.addOption(OptionBuilder.withLongOpt(\\\"foo\\\").hasOptionalArg().create('f'));\\r\\n     options.addOption(OptionBuilder.withLongOpt(\\\"bar\\\").hasOptionalArg().create('b'));\\r\\n-    CommandLine cl = parser.parse(options, args);\\r\\n+    final CommandLine cl = parser.parse(options, args);\\r\\n     assertTrue(cl.hasOption(\\\"b\\\"));\\r\\n     assertTrue(cl.hasOption(\\\"f\\\"));\\r\\n     assertEquals(\\\"bar\\\", cl.getOptionValue(\\\"foo\\\"));\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"tn@apache.org","authorName":"Thomas Neidhart","commitYear":"2013","diff":"\"@@ -1,10 +1,11 @@\\n+@Test\\r\\n public void testAmbiguousLongWithoutEqualSingleDash() throws Exception {\\r\\n     String[] args = new String[] { \\\"-b\\\", \\\"-foobar\\\" };\\r\\n     Options options = new Options();\\r\\n     options.addOption(OptionBuilder.withLongOpt(\\\"foo\\\").hasOptionalArg().create('f'));\\r\\n     options.addOption(OptionBuilder.withLongOpt(\\\"bar\\\").hasOptionalArg().create('b'));\\r\\n     CommandLine cl = parser.parse(options, args);\\r\\n     assertTrue(cl.hasOption(\\\"b\\\"));\\r\\n     assertTrue(cl.hasOption(\\\"f\\\"));\\r\\n     assertEquals(\\\"bar\\\", cl.getOptionValue(\\\"foo\\\"));\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2009","diff":"\"@@ -0,0 +1,10 @@\\n+public void testAmbiguousLongWithoutEqualSingleDash() throws Exception {\\r\\n+    String[] args = new String[] { \\\"-b\\\", \\\"-foobar\\\" };\\r\\n+    Options options = new Options();\\r\\n+    options.addOption(OptionBuilder.withLongOpt(\\\"foo\\\").hasOptionalArg().create('f'));\\r\\n+    options.addOption(OptionBuilder.withLongOpt(\\\"bar\\\").hasOptionalArg().create('b'));\\r\\n+    CommandLine cl = parser.parse(options, args);\\r\\n+    assertTrue(cl.hasOption(\\\"b\\\"));\\r\\n+    assertTrue(cl.hasOption(\\\"f\\\"));\\r\\n+    assertEquals(\\\"bar\\\", cl.getOptionValue(\\\"foo\\\"));\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\test\java\org\apache\commons\cli\AbstractParserTestCase.java	testAmbiguousLongWithoutEqualSingleDash2	org.apache.commons.cli.AbstractParserTestCase.testAmbiguousLongWithoutEqualSingleDash2()	87	99	1	[{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2023","diff":"\"@@ -1,10 +1,11 @@\\n+@Test\\r\\n public void testAmbiguousLongWithoutEqualSingleDash2() throws Exception {\\r\\n     final String[] args = { \\\"-b\\\", \\\"-foobar\\\" };\\r\\n     final Options options = new Options();\\r\\n-    options.addOption(Option.builder().option(\\\"f\\\").longOpt(\\\"foo\\\").optionalArg(true).build());\\r\\n-    options.addOption(Option.builder().option(\\\"b\\\").longOpt(\\\"bar\\\").optionalArg(false).build());\\r\\n+    options.addOption(Option.builder().longOpt(\\\"foo\\\").option(\\\"f\\\").optionalArg(true).build());\\r\\n+    options.addOption(Option.builder().longOpt(\\\"bar\\\").option(\\\"b\\\").optionalArg(false).build());\\r\\n     final CommandLine cl = parser.parse(options, args);\\r\\n     assertTrue(cl.hasOption(\\\"b\\\"));\\r\\n     assertTrue(cl.hasOption(\\\"f\\\"));\\r\\n     assertEquals(\\\"bar\\\", cl.getOptionValue(\\\"foo\\\"));\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2023","diff":"\"@@ -0,0 +1,10 @@\\n+public void testAmbiguousLongWithoutEqualSingleDash2() throws Exception {\\r\\n+    final String[] args = { \\\"-b\\\", \\\"-foobar\\\" };\\r\\n+    final Options options = new Options();\\r\\n+    options.addOption(Option.builder().option(\\\"f\\\").longOpt(\\\"foo\\\").optionalArg(true).build());\\r\\n+    options.addOption(Option.builder().option(\\\"b\\\").longOpt(\\\"bar\\\").optionalArg(false).build());\\r\\n+    final CommandLine cl = parser.parse(options, args);\\r\\n+    assertTrue(cl.hasOption(\\\"b\\\"));\\r\\n+    assertTrue(cl.hasOption(\\\"f\\\"));\\r\\n+    assertEquals(\\\"bar\\\", cl.getOptionValue(\\\"foo\\\"));\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\test\java\org\apache\commons\cli\AbstractParserTestCase.java	testAmbiguousPartialLongOption1	org.apache.commons.cli.AbstractParserTestCase.testAmbiguousPartialLongOption1()	102	121	3	[{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"@@ -1,17 +1,17 @@\\n @Test\\r\\n public void testAmbiguousPartialLongOption1() throws Exception {\\r\\n-    final String[] args = new String[] { \\\"--ver\\\" };\\r\\n+    final String[] args = { \\\"--ver\\\" };\\r\\n     final Options options = new Options();\\r\\n     options.addOption(OptionBuilder.withLongOpt(\\\"version\\\").create());\\r\\n     options.addOption(OptionBuilder.withLongOpt(\\\"verbose\\\").create());\\r\\n     boolean caught = false;\\r\\n     try {\\r\\n         parser.parse(options, args);\\r\\n     } catch (final AmbiguousOptionException e) {\\r\\n         caught = true;\\r\\n         assertEquals(\\\"Partial option\\\", \\\"--ver\\\", e.getOption());\\r\\n         assertNotNull(\\\"Matching options null\\\", e.getMatchingOptions());\\r\\n         assertEquals(\\\"Matching options size\\\", 2, e.getMatchingOptions().size());\\r\\n     }\\r\\n     assertTrue(\\\"Confirm MissingArgumentException caught\\\", caught);\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2019","diff":"\"\""},{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,17 +1,17 @@\\n @Test\\r\\n public void testAmbiguousPartialLongOption1() throws Exception {\\r\\n-    String[] args = new String[] { \\\"--ver\\\" };\\r\\n-    Options options = new Options();\\r\\n+    final String[] args = new String[] { \\\"--ver\\\" };\\r\\n+    final Options options = new Options();\\r\\n     options.addOption(OptionBuilder.withLongOpt(\\\"version\\\").create());\\r\\n     options.addOption(OptionBuilder.withLongOpt(\\\"verbose\\\").create());\\r\\n     boolean caught = false;\\r\\n     try {\\r\\n         parser.parse(options, args);\\r\\n-    } catch (AmbiguousOptionException e) {\\r\\n+    } catch (final AmbiguousOptionException e) {\\r\\n         caught = true;\\r\\n         assertEquals(\\\"Partial option\\\", \\\"--ver\\\", e.getOption());\\r\\n         assertNotNull(\\\"Matching options null\\\", e.getMatchingOptions());\\r\\n         assertEquals(\\\"Matching options size\\\", 2, e.getMatchingOptions().size());\\r\\n     }\\r\\n     assertTrue(\\\"Confirm MissingArgumentException caught\\\", caught);\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"tn@apache.org","authorName":"Thomas Neidhart","commitYear":"2013","diff":"\"@@ -1,16 +1,17 @@\\n+@Test\\r\\n public void testAmbiguousPartialLongOption1() throws Exception {\\r\\n     String[] args = new String[] { \\\"--ver\\\" };\\r\\n     Options options = new Options();\\r\\n     options.addOption(OptionBuilder.withLongOpt(\\\"version\\\").create());\\r\\n     options.addOption(OptionBuilder.withLongOpt(\\\"verbose\\\").create());\\r\\n     boolean caught = false;\\r\\n     try {\\r\\n         parser.parse(options, args);\\r\\n     } catch (AmbiguousOptionException e) {\\r\\n         caught = true;\\r\\n         assertEquals(\\\"Partial option\\\", \\\"--ver\\\", e.getOption());\\r\\n         assertNotNull(\\\"Matching options null\\\", e.getMatchingOptions());\\r\\n         assertEquals(\\\"Matching options size\\\", 2, e.getMatchingOptions().size());\\r\\n     }\\r\\n     assertTrue(\\\"Confirm MissingArgumentException caught\\\", caught);\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2009","diff":"\"@@ -0,0 +1,16 @@\\n+public void testAmbiguousPartialLongOption1() throws Exception {\\r\\n+    String[] args = new String[] { \\\"--ver\\\" };\\r\\n+    Options options = new Options();\\r\\n+    options.addOption(OptionBuilder.withLongOpt(\\\"version\\\").create());\\r\\n+    options.addOption(OptionBuilder.withLongOpt(\\\"verbose\\\").create());\\r\\n+    boolean caught = false;\\r\\n+    try {\\r\\n+        parser.parse(options, args);\\r\\n+    } catch (AmbiguousOptionException e) {\\r\\n+        caught = true;\\r\\n+        assertEquals(\\\"Partial option\\\", \\\"--ver\\\", e.getOption());\\r\\n+        assertNotNull(\\\"Matching options null\\\", e.getMatchingOptions());\\r\\n+        assertEquals(\\\"Matching options size\\\", 2, e.getMatchingOptions().size());\\r\\n+    }\\r\\n+    assertTrue(\\\"Confirm MissingArgumentException caught\\\", caught);\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\test\java\org\apache\commons\cli\AbstractParserTestCase.java	testAmbiguousPartialLongOption2	org.apache.commons.cli.AbstractParserTestCase.testAmbiguousPartialLongOption2()	124	143	3	[{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"@@ -1,17 +1,17 @@\\n @Test\\r\\n public void testAmbiguousPartialLongOption2() throws Exception {\\r\\n-    final String[] args = new String[] { \\\"-ver\\\" };\\r\\n+    final String[] args = { \\\"-ver\\\" };\\r\\n     final Options options = new Options();\\r\\n     options.addOption(OptionBuilder.withLongOpt(\\\"version\\\").create());\\r\\n     options.addOption(OptionBuilder.withLongOpt(\\\"verbose\\\").create());\\r\\n     boolean caught = false;\\r\\n     try {\\r\\n         parser.parse(options, args);\\r\\n     } catch (final AmbiguousOptionException e) {\\r\\n         caught = true;\\r\\n         assertEquals(\\\"Partial option\\\", \\\"-ver\\\", e.getOption());\\r\\n         assertNotNull(\\\"Matching options null\\\", e.getMatchingOptions());\\r\\n         assertEquals(\\\"Matching options size\\\", 2, e.getMatchingOptions().size());\\r\\n     }\\r\\n     assertTrue(\\\"Confirm MissingArgumentException caught\\\", caught);\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2019","diff":"\"\""},{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,17 +1,17 @@\\n @Test\\r\\n public void testAmbiguousPartialLongOption2() throws Exception {\\r\\n-    String[] args = new String[] { \\\"-ver\\\" };\\r\\n-    Options options = new Options();\\r\\n+    final String[] args = new String[] { \\\"-ver\\\" };\\r\\n+    final Options options = new Options();\\r\\n     options.addOption(OptionBuilder.withLongOpt(\\\"version\\\").create());\\r\\n     options.addOption(OptionBuilder.withLongOpt(\\\"verbose\\\").create());\\r\\n     boolean caught = false;\\r\\n     try {\\r\\n         parser.parse(options, args);\\r\\n-    } catch (AmbiguousOptionException e) {\\r\\n+    } catch (final AmbiguousOptionException e) {\\r\\n         caught = true;\\r\\n         assertEquals(\\\"Partial option\\\", \\\"-ver\\\", e.getOption());\\r\\n         assertNotNull(\\\"Matching options null\\\", e.getMatchingOptions());\\r\\n         assertEquals(\\\"Matching options size\\\", 2, e.getMatchingOptions().size());\\r\\n     }\\r\\n     assertTrue(\\\"Confirm MissingArgumentException caught\\\", caught);\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"tn@apache.org","authorName":"Thomas Neidhart","commitYear":"2013","diff":"\"@@ -1,16 +1,17 @@\\n+@Test\\r\\n public void testAmbiguousPartialLongOption2() throws Exception {\\r\\n     String[] args = new String[] { \\\"-ver\\\" };\\r\\n     Options options = new Options();\\r\\n     options.addOption(OptionBuilder.withLongOpt(\\\"version\\\").create());\\r\\n     options.addOption(OptionBuilder.withLongOpt(\\\"verbose\\\").create());\\r\\n     boolean caught = false;\\r\\n     try {\\r\\n         parser.parse(options, args);\\r\\n     } catch (AmbiguousOptionException e) {\\r\\n         caught = true;\\r\\n         assertEquals(\\\"Partial option\\\", \\\"-ver\\\", e.getOption());\\r\\n         assertNotNull(\\\"Matching options null\\\", e.getMatchingOptions());\\r\\n         assertEquals(\\\"Matching options size\\\", 2, e.getMatchingOptions().size());\\r\\n     }\\r\\n     assertTrue(\\\"Confirm MissingArgumentException caught\\\", caught);\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2009","diff":"\"@@ -0,0 +1,16 @@\\n+public void testAmbiguousPartialLongOption2() throws Exception {\\r\\n+    String[] args = new String[] { \\\"-ver\\\" };\\r\\n+    Options options = new Options();\\r\\n+    options.addOption(OptionBuilder.withLongOpt(\\\"version\\\").create());\\r\\n+    options.addOption(OptionBuilder.withLongOpt(\\\"verbose\\\").create());\\r\\n+    boolean caught = false;\\r\\n+    try {\\r\\n+        parser.parse(options, args);\\r\\n+    } catch (AmbiguousOptionException e) {\\r\\n+        caught = true;\\r\\n+        assertEquals(\\\"Partial option\\\", \\\"-ver\\\", e.getOption());\\r\\n+        assertNotNull(\\\"Matching options null\\\", e.getMatchingOptions());\\r\\n+        assertEquals(\\\"Matching options size\\\", 2, e.getMatchingOptions().size());\\r\\n+    }\\r\\n+    assertTrue(\\\"Confirm MissingArgumentException caught\\\", caught);\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\test\java\org\apache\commons\cli\AbstractParserTestCase.java	testAmbiguousPartialLongOption3	org.apache.commons.cli.AbstractParserTestCase.testAmbiguousPartialLongOption3()	146	165	3	[{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"@@ -1,17 +1,17 @@\\n @Test\\r\\n public void testAmbiguousPartialLongOption3() throws Exception {\\r\\n-    final String[] args = new String[] { \\\"--ver=1\\\" };\\r\\n+    final String[] args = { \\\"--ver=1\\\" };\\r\\n     final Options options = new Options();\\r\\n     options.addOption(OptionBuilder.withLongOpt(\\\"version\\\").create());\\r\\n     options.addOption(OptionBuilder.withLongOpt(\\\"verbose\\\").hasOptionalArg().create());\\r\\n     boolean caught = false;\\r\\n     try {\\r\\n         parser.parse(options, args);\\r\\n     } catch (final AmbiguousOptionException e) {\\r\\n         caught = true;\\r\\n         assertEquals(\\\"Partial option\\\", \\\"--ver\\\", e.getOption());\\r\\n         assertNotNull(\\\"Matching options null\\\", e.getMatchingOptions());\\r\\n         assertEquals(\\\"Matching options size\\\", 2, e.getMatchingOptions().size());\\r\\n     }\\r\\n     assertTrue(\\\"Confirm MissingArgumentException caught\\\", caught);\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2019","diff":"\"\""},{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,17 +1,17 @@\\n @Test\\r\\n public void testAmbiguousPartialLongOption3() throws Exception {\\r\\n-    String[] args = new String[] { \\\"--ver=1\\\" };\\r\\n-    Options options = new Options();\\r\\n+    final String[] args = new String[] { \\\"--ver=1\\\" };\\r\\n+    final Options options = new Options();\\r\\n     options.addOption(OptionBuilder.withLongOpt(\\\"version\\\").create());\\r\\n     options.addOption(OptionBuilder.withLongOpt(\\\"verbose\\\").hasOptionalArg().create());\\r\\n     boolean caught = false;\\r\\n     try {\\r\\n         parser.parse(options, args);\\r\\n-    } catch (AmbiguousOptionException e) {\\r\\n+    } catch (final AmbiguousOptionException e) {\\r\\n         caught = true;\\r\\n         assertEquals(\\\"Partial option\\\", \\\"--ver\\\", e.getOption());\\r\\n         assertNotNull(\\\"Matching options null\\\", e.getMatchingOptions());\\r\\n         assertEquals(\\\"Matching options size\\\", 2, e.getMatchingOptions().size());\\r\\n     }\\r\\n     assertTrue(\\\"Confirm MissingArgumentException caught\\\", caught);\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"tn@apache.org","authorName":"Thomas Neidhart","commitYear":"2013","diff":"\"@@ -1,16 +1,17 @@\\n+@Test\\r\\n public void testAmbiguousPartialLongOption3() throws Exception {\\r\\n     String[] args = new String[] { \\\"--ver=1\\\" };\\r\\n     Options options = new Options();\\r\\n     options.addOption(OptionBuilder.withLongOpt(\\\"version\\\").create());\\r\\n     options.addOption(OptionBuilder.withLongOpt(\\\"verbose\\\").hasOptionalArg().create());\\r\\n     boolean caught = false;\\r\\n     try {\\r\\n         parser.parse(options, args);\\r\\n     } catch (AmbiguousOptionException e) {\\r\\n         caught = true;\\r\\n         assertEquals(\\\"Partial option\\\", \\\"--ver\\\", e.getOption());\\r\\n         assertNotNull(\\\"Matching options null\\\", e.getMatchingOptions());\\r\\n         assertEquals(\\\"Matching options size\\\", 2, e.getMatchingOptions().size());\\r\\n     }\\r\\n     assertTrue(\\\"Confirm MissingArgumentException caught\\\", caught);\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2009","diff":"\"@@ -1,9 +1,16 @@\\n-public void testPartialLongOptionWithShort() throws Exception {\\r\\n-    String[] args = new String[] { \\\"-ver\\\" };\\r\\n+public void testAmbiguousPartialLongOption3() throws Exception {\\r\\n+    String[] args = new String[] { \\\"--ver=1\\\" };\\r\\n     Options options = new Options();\\r\\n     options.addOption(OptionBuilder.withLongOpt(\\\"version\\\").create());\\r\\n-    options.addOption(OptionBuilder.hasArg().create('v'));\\r\\n-    CommandLine cl = parser.parse(options, args);\\r\\n-    assertTrue(\\\"Confirm --version is set\\\", cl.hasOption(\\\"version\\\"));\\r\\n-    assertTrue(\\\"Confirm -v is not set\\\", !cl.hasOption(\\\"v\\\"));\\r\\n+    options.addOption(OptionBuilder.withLongOpt(\\\"verbose\\\").hasOptionalArg().create());\\r\\n+    boolean caught = false;\\r\\n+    try {\\r\\n+        parser.parse(options, args);\\r\\n+    } catch (AmbiguousOptionException e) {\\r\\n+        caught = true;\\r\\n+        assertEquals(\\\"Partial option\\\", \\\"--ver\\\", e.getOption());\\r\\n+        assertNotNull(\\\"Matching options null\\\", e.getMatchingOptions());\\r\\n+        assertEquals(\\\"Matching options size\\\", 2, e.getMatchingOptions().size());\\r\\n+    }\\r\\n+    assertTrue(\\\"Confirm MissingArgumentException caught\\\", caught);\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2009","diff":"\"@@ -0,0 +1,9 @@\\n+public void testPartialLongOptionWithShort() throws Exception {\\r\\n+    String[] args = new String[] { \\\"-ver\\\" };\\r\\n+    Options options = new Options();\\r\\n+    options.addOption(OptionBuilder.withLongOpt(\\\"version\\\").create());\\r\\n+    options.addOption(OptionBuilder.hasArg().create('v'));\\r\\n+    CommandLine cl = parser.parse(options, args);\\r\\n+    assertTrue(\\\"Confirm --version is set\\\", cl.hasOption(\\\"version\\\"));\\r\\n+    assertTrue(\\\"Confirm -v is not set\\\", !cl.hasOption(\\\"v\\\"));\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\test\java\org\apache\commons\cli\AbstractParserTestCase.java	testAmbiguousPartialLongOption4	org.apache.commons.cli.AbstractParserTestCase.testAmbiguousPartialLongOption4()	168	187	3	[{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"@@ -1,17 +1,17 @@\\n @Test\\r\\n public void testAmbiguousPartialLongOption4() throws Exception {\\r\\n-    final String[] args = new String[] { \\\"-ver=1\\\" };\\r\\n+    final String[] args = { \\\"-ver=1\\\" };\\r\\n     final Options options = new Options();\\r\\n     options.addOption(OptionBuilder.withLongOpt(\\\"version\\\").create());\\r\\n     options.addOption(OptionBuilder.withLongOpt(\\\"verbose\\\").hasOptionalArg().create());\\r\\n     boolean caught = false;\\r\\n     try {\\r\\n         parser.parse(options, args);\\r\\n     } catch (final AmbiguousOptionException e) {\\r\\n         caught = true;\\r\\n         assertEquals(\\\"Partial option\\\", \\\"-ver\\\", e.getOption());\\r\\n         assertNotNull(\\\"Matching options null\\\", e.getMatchingOptions());\\r\\n         assertEquals(\\\"Matching options size\\\", 2, e.getMatchingOptions().size());\\r\\n     }\\r\\n     assertTrue(\\\"Confirm MissingArgumentException caught\\\", caught);\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2019","diff":"\"\""},{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,17 +1,17 @@\\n @Test\\r\\n public void testAmbiguousPartialLongOption4() throws Exception {\\r\\n-    String[] args = new String[] { \\\"-ver=1\\\" };\\r\\n-    Options options = new Options();\\r\\n+    final String[] args = new String[] { \\\"-ver=1\\\" };\\r\\n+    final Options options = new Options();\\r\\n     options.addOption(OptionBuilder.withLongOpt(\\\"version\\\").create());\\r\\n     options.addOption(OptionBuilder.withLongOpt(\\\"verbose\\\").hasOptionalArg().create());\\r\\n     boolean caught = false;\\r\\n     try {\\r\\n         parser.parse(options, args);\\r\\n-    } catch (AmbiguousOptionException e) {\\r\\n+    } catch (final AmbiguousOptionException e) {\\r\\n         caught = true;\\r\\n         assertEquals(\\\"Partial option\\\", \\\"-ver\\\", e.getOption());\\r\\n         assertNotNull(\\\"Matching options null\\\", e.getMatchingOptions());\\r\\n         assertEquals(\\\"Matching options size\\\", 2, e.getMatchingOptions().size());\\r\\n     }\\r\\n     assertTrue(\\\"Confirm MissingArgumentException caught\\\", caught);\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"tn@apache.org","authorName":"Thomas Neidhart","commitYear":"2013","diff":"\"@@ -1,16 +1,17 @@\\n+@Test\\r\\n public void testAmbiguousPartialLongOption4() throws Exception {\\r\\n     String[] args = new String[] { \\\"-ver=1\\\" };\\r\\n     Options options = new Options();\\r\\n     options.addOption(OptionBuilder.withLongOpt(\\\"version\\\").create());\\r\\n     options.addOption(OptionBuilder.withLongOpt(\\\"verbose\\\").hasOptionalArg().create());\\r\\n     boolean caught = false;\\r\\n     try {\\r\\n         parser.parse(options, args);\\r\\n     } catch (AmbiguousOptionException e) {\\r\\n         caught = true;\\r\\n         assertEquals(\\\"Partial option\\\", \\\"-ver\\\", e.getOption());\\r\\n         assertNotNull(\\\"Matching options null\\\", e.getMatchingOptions());\\r\\n         assertEquals(\\\"Matching options size\\\", 2, e.getMatchingOptions().size());\\r\\n     }\\r\\n     assertTrue(\\\"Confirm MissingArgumentException caught\\\", caught);\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2009","diff":"\"@@ -0,0 +1,16 @@\\n+public void testAmbiguousPartialLongOption4() throws Exception {\\r\\n+    String[] args = new String[] { \\\"-ver=1\\\" };\\r\\n+    Options options = new Options();\\r\\n+    options.addOption(OptionBuilder.withLongOpt(\\\"version\\\").create());\\r\\n+    options.addOption(OptionBuilder.withLongOpt(\\\"verbose\\\").hasOptionalArg().create());\\r\\n+    boolean caught = false;\\r\\n+    try {\\r\\n+        parser.parse(options, args);\\r\\n+    } catch (AmbiguousOptionException e) {\\r\\n+        caught = true;\\r\\n+        assertEquals(\\\"Partial option\\\", \\\"-ver\\\", e.getOption());\\r\\n+        assertNotNull(\\\"Matching options null\\\", e.getMatchingOptions());\\r\\n+        assertEquals(\\\"Matching options size\\\", 2, e.getMatchingOptions().size());\\r\\n+    }\\r\\n+    assertTrue(\\\"Confirm MissingArgumentException caught\\\", caught);\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\test\java\org\apache\commons\cli\AbstractParserTestCase.java	testArgumentStartingWithHyphen	org.apache.commons.cli.AbstractParserTestCase.testArgumentStartingWithHyphen()	190	195	1	[{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"@@ -1,6 +1,6 @@\\n @Test\\r\\n public void testArgumentStartingWithHyphen() throws Exception {\\r\\n-    final String[] args = new String[] { \\\"-b\\\", \\\"-foo\\\" };\\r\\n+    final String[] args = { \\\"-b\\\", \\\"-foo\\\" };\\r\\n     final CommandLine cl = parser.parse(options, args);\\r\\n     assertEquals(\\\"-foo\\\", cl.getOptionValue(\\\"b\\\"));\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,6 +1,6 @@\\n @Test\\r\\n public void testArgumentStartingWithHyphen() throws Exception {\\r\\n-    String[] args = new String[] { \\\"-b\\\", \\\"-foo\\\" };\\r\\n-    CommandLine cl = parser.parse(options, args);\\r\\n+    final String[] args = new String[] { \\\"-b\\\", \\\"-foo\\\" };\\r\\n+    final CommandLine cl = parser.parse(options, args);\\r\\n     assertEquals(\\\"-foo\\\", cl.getOptionValue(\\\"b\\\"));\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"tn@apache.org","authorName":"Thomas Neidhart","commitYear":"2013","diff":"\"@@ -1,5 +1,6 @@\\n+@Test\\r\\n public void testArgumentStartingWithHyphen() throws Exception {\\r\\n     String[] args = new String[] { \\\"-b\\\", \\\"-foo\\\" };\\r\\n     CommandLine cl = parser.parse(options, args);\\r\\n     assertEquals(\\\"-foo\\\", cl.getOptionValue(\\\"b\\\"));\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2008","diff":"\"@@ -0,0 +1,5 @@\\n+public void testArgumentStartingWithHyphen() throws Exception {\\r\\n+    String[] args = new String[] { \\\"-b\\\", \\\"-foo\\\" };\\r\\n+    CommandLine cl = parser.parse(options, args);\\r\\n+    assertEquals(\\\"-foo\\\", cl.getOptionValue(\\\"b\\\"));\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\test\java\org\apache\commons\cli\AbstractParserTestCase.java	testBursting	org.apache.commons.cli.AbstractParserTestCase.testBursting()	198	208	1	[{"authorEmail":"arturobernalg@gmail.com","authorName":"Arturo Bernal","commitYear":"2021","diff":"\"@@ -1,10 +1,10 @@\\n @Test\\r\\n public void testBursting() throws Exception {\\r\\n     final String[] args = { \\\"-acbtoast\\\", \\\"foo\\\", \\\"bar\\\" };\\r\\n     final CommandLine cl = parser.parse(options, args);\\r\\n     assertTrue(\\\"Confirm -a is set\\\", cl.hasOption(\\\"a\\\"));\\r\\n     assertTrue(\\\"Confirm -b is set\\\", cl.hasOption(\\\"b\\\"));\\r\\n     assertTrue(\\\"Confirm -c is set\\\", cl.hasOption(\\\"c\\\"));\\r\\n-    assertTrue(\\\"Confirm arg of -b\\\", cl.getOptionValue(\\\"b\\\").equals(\\\"toast\\\"));\\r\\n-    assertTrue(\\\"Confirm size of extra args\\\", cl.getArgList().size() == 2);\\r\\n+    assertEquals(\\\"Confirm arg of -b\\\", \\\"toast\\\", cl.getOptionValue(\\\"b\\\"));\\r\\n+    assertEquals(\\\"Confirm size of extra args\\\", 2, cl.getArgList().size());\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"@@ -1,10 +1,10 @@\\n @Test\\r\\n public void testBursting() throws Exception {\\r\\n-    final String[] args = new String[] { \\\"-acbtoast\\\", \\\"foo\\\", \\\"bar\\\" };\\r\\n+    final String[] args = { \\\"-acbtoast\\\", \\\"foo\\\", \\\"bar\\\" };\\r\\n     final CommandLine cl = parser.parse(options, args);\\r\\n     assertTrue(\\\"Confirm -a is set\\\", cl.hasOption(\\\"a\\\"));\\r\\n     assertTrue(\\\"Confirm -b is set\\\", cl.hasOption(\\\"b\\\"));\\r\\n     assertTrue(\\\"Confirm -c is set\\\", cl.hasOption(\\\"c\\\"));\\r\\n     assertTrue(\\\"Confirm arg of -b\\\", cl.getOptionValue(\\\"b\\\").equals(\\\"toast\\\"));\\r\\n     assertTrue(\\\"Confirm size of extra args\\\", cl.getArgList().size() == 2);\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,10 +1,10 @@\\n @Test\\r\\n public void testBursting() throws Exception {\\r\\n-    String[] args = new String[] { \\\"-acbtoast\\\", \\\"foo\\\", \\\"bar\\\" };\\r\\n-    CommandLine cl = parser.parse(options, args);\\r\\n+    final String[] args = new String[] { \\\"-acbtoast\\\", \\\"foo\\\", \\\"bar\\\" };\\r\\n+    final CommandLine cl = parser.parse(options, args);\\r\\n     assertTrue(\\\"Confirm -a is set\\\", cl.hasOption(\\\"a\\\"));\\r\\n     assertTrue(\\\"Confirm -b is set\\\", cl.hasOption(\\\"b\\\"));\\r\\n     assertTrue(\\\"Confirm -c is set\\\", cl.hasOption(\\\"c\\\"));\\r\\n     assertTrue(\\\"Confirm arg of -b\\\", cl.getOptionValue(\\\"b\\\").equals(\\\"toast\\\"));\\r\\n     assertTrue(\\\"Confirm size of extra args\\\", cl.getArgList().size() == 2);\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"tn@apache.org","authorName":"Thomas Neidhart","commitYear":"2013","diff":"\"@@ -1,9 +1,10 @@\\n+@Test\\r\\n public void testBursting() throws Exception {\\r\\n     String[] args = new String[] { \\\"-acbtoast\\\", \\\"foo\\\", \\\"bar\\\" };\\r\\n     CommandLine cl = parser.parse(options, args);\\r\\n     assertTrue(\\\"Confirm -a is set\\\", cl.hasOption(\\\"a\\\"));\\r\\n     assertTrue(\\\"Confirm -b is set\\\", cl.hasOption(\\\"b\\\"));\\r\\n     assertTrue(\\\"Confirm -c is set\\\", cl.hasOption(\\\"c\\\"));\\r\\n     assertTrue(\\\"Confirm arg of -b\\\", cl.getOptionValue(\\\"b\\\").equals(\\\"toast\\\"));\\r\\n     assertTrue(\\\"Confirm size of extra args\\\", cl.getArgList().size() == 2);\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2009","diff":"\"\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2008","diff":"\"@@ -1,9 +1,9 @@\\n-public void testComplexShort() throws Exception {\\r\\n+public void testBursting() throws Exception {\\r\\n     String[] args = new String[] { \\\"-acbtoast\\\", \\\"foo\\\", \\\"bar\\\" };\\r\\n     CommandLine cl = parser.parse(options, args);\\r\\n     assertTrue(\\\"Confirm -a is set\\\", cl.hasOption(\\\"a\\\"));\\r\\n     assertTrue(\\\"Confirm -b is set\\\", cl.hasOption(\\\"b\\\"));\\r\\n     assertTrue(\\\"Confirm -c is set\\\", cl.hasOption(\\\"c\\\"));\\r\\n     assertTrue(\\\"Confirm arg of -b\\\", cl.getOptionValue(\\\"b\\\").equals(\\\"toast\\\"));\\r\\n     assertTrue(\\\"Confirm size of extra args\\\", cl.getArgList().size() == 2);\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2008","diff":"\"@@ -1,9 +1,9 @@\\n public void testComplexShort() throws Exception {\\r\\n     String[] args = new String[] { \\\"-acbtoast\\\", \\\"foo\\\", \\\"bar\\\" };\\r\\n-    CommandLine cl = _parser.parse(_options, args);\\r\\n+    CommandLine cl = parser.parse(options, args);\\r\\n     assertTrue(\\\"Confirm -a is set\\\", cl.hasOption(\\\"a\\\"));\\r\\n     assertTrue(\\\"Confirm -b is set\\\", cl.hasOption(\\\"b\\\"));\\r\\n     assertTrue(\\\"Confirm -c is set\\\", cl.hasOption(\\\"c\\\"));\\r\\n     assertTrue(\\\"Confirm arg of -b\\\", cl.getOptionValue(\\\"b\\\").equals(\\\"toast\\\"));\\r\\n     assertTrue(\\\"Confirm size of extra args\\\", cl.getArgList().size() == 2);\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2008","diff":"\"@@ -1,13 +1,9 @@\\n-public void testComplexShort() {\\r\\n+public void testComplexShort() throws Exception {\\r\\n     String[] args = new String[] { \\\"-acbtoast\\\", \\\"foo\\\", \\\"bar\\\" };\\r\\n-    try {\\r\\n-        CommandLine cl = _parser.parse(_options, args);\\r\\n-        assertTrue(\\\"Confirm -a is set\\\", cl.hasOption(\\\"a\\\"));\\r\\n-        assertTrue(\\\"Confirm -b is set\\\", cl.hasOption(\\\"b\\\"));\\r\\n-        assertTrue(\\\"Confirm -c is set\\\", cl.hasOption(\\\"c\\\"));\\r\\n-        assertTrue(\\\"Confirm arg of -b\\\", cl.getOptionValue(\\\"b\\\").equals(\\\"toast\\\"));\\r\\n-        assertTrue(\\\"Confirm size of extra args\\\", cl.getArgList().size() == 2);\\r\\n-    } catch (ParseException e) {\\r\\n-        fail(e.toString());\\r\\n-    }\\r\\n+    CommandLine cl = _parser.parse(_options, args);\\r\\n+    assertTrue(\\\"Confirm -a is set\\\", cl.hasOption(\\\"a\\\"));\\r\\n+    assertTrue(\\\"Confirm -b is set\\\", cl.hasOption(\\\"b\\\"));\\r\\n+    assertTrue(\\\"Confirm -c is set\\\", cl.hasOption(\\\"c\\\"));\\r\\n+    assertTrue(\\\"Confirm arg of -b\\\", cl.getOptionValue(\\\"b\\\").equals(\\\"toast\\\"));\\r\\n+    assertTrue(\\\"Confirm size of extra args\\\", cl.getArgList().size() == 2);\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -1,13 +1,13 @@\\n public void testComplexShort() {\\r\\n     String[] args = new String[] { \\\"-acbtoast\\\", \\\"foo\\\", \\\"bar\\\" };\\r\\n     try {\\r\\n-        CommandLine cl = _options.parse(args);\\r\\n+        CommandLine cl = _parser.parse(_options, args);\\r\\n         assertTrue(\\\"Confirm -a is set\\\", cl.hasOption(\\\"a\\\"));\\r\\n         assertTrue(\\\"Confirm -b is set\\\", cl.hasOption(\\\"b\\\"));\\r\\n         assertTrue(\\\"Confirm -c is set\\\", cl.hasOption(\\\"c\\\"));\\r\\n         assertTrue(\\\"Confirm arg of -b\\\", cl.getOptionValue(\\\"b\\\").equals(\\\"toast\\\"));\\r\\n         assertTrue(\\\"Confirm size of extra args\\\", cl.getArgList().size() == 2);\\r\\n     } catch (ParseException e) {\\r\\n         fail(e.toString());\\r\\n     }\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -1,13 +1,13 @@\\n public void testComplexShort() {\\r\\n     String[] args = new String[] { \\\"-acbtoast\\\", \\\"foo\\\", \\\"bar\\\" };\\r\\n     try {\\r\\n         CommandLine cl = _options.parse(args);\\r\\n-        assertTrue(\\\"Confirm -a is set\\\", cl.hasOption('a'));\\r\\n-        assertTrue(\\\"Confirm -b is set\\\", cl.hasOption('b'));\\r\\n-        assertTrue(\\\"Confirm -c is set\\\", cl.hasOption('c'));\\r\\n-        assertTrue(\\\"Confirm arg of -b\\\", cl.getOptionValue('b').equals(\\\"toast\\\"));\\r\\n+        assertTrue(\\\"Confirm -a is set\\\", cl.hasOption(\\\"a\\\"));\\r\\n+        assertTrue(\\\"Confirm -b is set\\\", cl.hasOption(\\\"b\\\"));\\r\\n+        assertTrue(\\\"Confirm -c is set\\\", cl.hasOption(\\\"c\\\"));\\r\\n+        assertTrue(\\\"Confirm arg of -b\\\", cl.getOptionValue(\\\"b\\\").equals(\\\"toast\\\"));\\r\\n         assertTrue(\\\"Confirm size of extra args\\\", cl.getArgList().size() == 2);\\r\\n     } catch (ParseException e) {\\r\\n         fail(e.toString());\\r\\n     }\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jstrachan@apache.org","authorName":"James Strachan","commitYear":"2002","diff":"\"@@ -0,0 +1,13 @@\\n+public void testComplexShort() {\\r\\n+    String[] args = new String[] { \\\"-acbtoast\\\", \\\"foo\\\", \\\"bar\\\" };\\r\\n+    try {\\r\\n+        CommandLine cl = _options.parse(args);\\r\\n+        assertTrue(\\\"Confirm -a is set\\\", cl.hasOption('a'));\\r\\n+        assertTrue(\\\"Confirm -b is set\\\", cl.hasOption('b'));\\r\\n+        assertTrue(\\\"Confirm -c is set\\\", cl.hasOption('c'));\\r\\n+        assertTrue(\\\"Confirm arg of -b\\\", cl.getOptionValue('b').equals(\\\"toast\\\"));\\r\\n+        assertTrue(\\\"Confirm size of extra args\\\", cl.getArgList().size() == 2);\\r\\n+    } catch (ParseException e) {\\r\\n+        fail(e.toString());\\r\\n+    }\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\test\java\org\apache\commons\cli\AbstractParserTestCase.java	testDoubleDash1	org.apache.commons.cli.AbstractParserTestCase.testDoubleDash1()	211	219	1	[{"authorEmail":"arturobernalg@gmail.com","authorName":"Arturo Bernal","commitYear":"2021","diff":"\"@@ -1,8 +1,8 @@\\n @Test\\r\\n public void testDoubleDash1() throws Exception {\\r\\n     final String[] args = { \\\"--copt\\\", \\\"--\\\", \\\"-b\\\", \\\"toast\\\" };\\r\\n     final CommandLine cl = parser.parse(options, args);\\r\\n     assertTrue(\\\"Confirm -c is set\\\", cl.hasOption(\\\"c\\\"));\\r\\n-    assertTrue(\\\"Confirm -b is not set\\\", !cl.hasOption(\\\"b\\\"));\\r\\n-    assertTrue(\\\"Confirm 2 extra args: \\\" + cl.getArgList().size(), cl.getArgList().size() == 2);\\r\\n+    assertFalse(\\\"Confirm -b is not set\\\", cl.hasOption(\\\"b\\\"));\\r\\n+    assertEquals(\\\"Confirm 2 extra args: \\\" + cl.getArgList().size(), 2, cl.getArgList().size());\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"@@ -1,8 +1,8 @@\\n @Test\\r\\n public void testDoubleDash1() throws Exception {\\r\\n-    final String[] args = new String[] { \\\"--copt\\\", \\\"--\\\", \\\"-b\\\", \\\"toast\\\" };\\r\\n+    final String[] args = { \\\"--copt\\\", \\\"--\\\", \\\"-b\\\", \\\"toast\\\" };\\r\\n     final CommandLine cl = parser.parse(options, args);\\r\\n     assertTrue(\\\"Confirm -c is set\\\", cl.hasOption(\\\"c\\\"));\\r\\n     assertTrue(\\\"Confirm -b is not set\\\", !cl.hasOption(\\\"b\\\"));\\r\\n     assertTrue(\\\"Confirm 2 extra args: \\\" + cl.getArgList().size(), cl.getArgList().size() == 2);\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,8 +1,8 @@\\n @Test\\r\\n public void testDoubleDash1() throws Exception {\\r\\n-    String[] args = new String[] { \\\"--copt\\\", \\\"--\\\", \\\"-b\\\", \\\"toast\\\" };\\r\\n-    CommandLine cl = parser.parse(options, args);\\r\\n+    final String[] args = new String[] { \\\"--copt\\\", \\\"--\\\", \\\"-b\\\", \\\"toast\\\" };\\r\\n+    final CommandLine cl = parser.parse(options, args);\\r\\n     assertTrue(\\\"Confirm -c is set\\\", cl.hasOption(\\\"c\\\"));\\r\\n     assertTrue(\\\"Confirm -b is not set\\\", !cl.hasOption(\\\"b\\\"));\\r\\n     assertTrue(\\\"Confirm 2 extra args: \\\" + cl.getArgList().size(), cl.getArgList().size() == 2);\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"tn@apache.org","authorName":"Thomas Neidhart","commitYear":"2013","diff":"\"@@ -1,7 +1,8 @@\\n+@Test\\r\\n public void testDoubleDash1() throws Exception {\\r\\n     String[] args = new String[] { \\\"--copt\\\", \\\"--\\\", \\\"-b\\\", \\\"toast\\\" };\\r\\n     CommandLine cl = parser.parse(options, args);\\r\\n     assertTrue(\\\"Confirm -c is set\\\", cl.hasOption(\\\"c\\\"));\\r\\n     assertTrue(\\\"Confirm -b is not set\\\", !cl.hasOption(\\\"b\\\"));\\r\\n     assertTrue(\\\"Confirm 2 extra args: \\\" + cl.getArgList().size(), cl.getArgList().size() == 2);\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2009","diff":"\"@@ -1,7 +1,7 @@\\n-public void testDoubleDash() throws Exception {\\r\\n+public void testDoubleDash1() throws Exception {\\r\\n     String[] args = new String[] { \\\"--copt\\\", \\\"--\\\", \\\"-b\\\", \\\"toast\\\" };\\r\\n     CommandLine cl = parser.parse(options, args);\\r\\n     assertTrue(\\\"Confirm -c is set\\\", cl.hasOption(\\\"c\\\"));\\r\\n     assertTrue(\\\"Confirm -b is not set\\\", !cl.hasOption(\\\"b\\\"));\\r\\n     assertTrue(\\\"Confirm 2 extra args: \\\" + cl.getArgList().size(), cl.getArgList().size() == 2);\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2008","diff":"\"\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2008","diff":"\"@@ -1,7 +1,7 @@\\n public void testDoubleDash() throws Exception {\\r\\n     String[] args = new String[] { \\\"--copt\\\", \\\"--\\\", \\\"-b\\\", \\\"toast\\\" };\\r\\n-    CommandLine cl = _parser.parse(_options, args);\\r\\n+    CommandLine cl = parser.parse(options, args);\\r\\n     assertTrue(\\\"Confirm -c is set\\\", cl.hasOption(\\\"c\\\"));\\r\\n     assertTrue(\\\"Confirm -b is not set\\\", !cl.hasOption(\\\"b\\\"));\\r\\n     assertTrue(\\\"Confirm 2 extra args: \\\" + cl.getArgList().size(), cl.getArgList().size() == 2);\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2008","diff":"\"@@ -1,11 +1,7 @@\\n-public void testDoubleDash() {\\r\\n+public void testDoubleDash() throws Exception {\\r\\n     String[] args = new String[] { \\\"--copt\\\", \\\"--\\\", \\\"-b\\\", \\\"toast\\\" };\\r\\n-    try {\\r\\n-        CommandLine cl = _parser.parse(_options, args);\\r\\n-        assertTrue(\\\"Confirm -c is set\\\", cl.hasOption(\\\"c\\\"));\\r\\n-        assertTrue(\\\"Confirm -b is not set\\\", !cl.hasOption(\\\"b\\\"));\\r\\n-        assertTrue(\\\"Confirm 2 extra args: \\\" + cl.getArgList().size(), cl.getArgList().size() == 2);\\r\\n-    } catch (ParseException e) {\\r\\n-        fail(e.toString());\\r\\n-    }\\r\\n+    CommandLine cl = _parser.parse(_options, args);\\r\\n+    assertTrue(\\\"Confirm -c is set\\\", cl.hasOption(\\\"c\\\"));\\r\\n+    assertTrue(\\\"Confirm -b is not set\\\", !cl.hasOption(\\\"b\\\"));\\r\\n+    assertTrue(\\\"Confirm 2 extra args: \\\" + cl.getArgList().size(), cl.getArgList().size() == 2);\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -1,11 +1,11 @@\\n public void testDoubleDash() {\\r\\n     String[] args = new String[] { \\\"--copt\\\", \\\"--\\\", \\\"-b\\\", \\\"toast\\\" };\\r\\n     try {\\r\\n-        CommandLine cl = _options.parse(args);\\r\\n+        CommandLine cl = _parser.parse(_options, args);\\r\\n         assertTrue(\\\"Confirm -c is set\\\", cl.hasOption(\\\"c\\\"));\\r\\n         assertTrue(\\\"Confirm -b is not set\\\", !cl.hasOption(\\\"b\\\"));\\r\\n         assertTrue(\\\"Confirm 2 extra args: \\\" + cl.getArgList().size(), cl.getArgList().size() == 2);\\r\\n     } catch (ParseException e) {\\r\\n         fail(e.toString());\\r\\n     }\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -1,11 +1,11 @@\\n public void testDoubleDash() {\\r\\n     String[] args = new String[] { \\\"--copt\\\", \\\"--\\\", \\\"-b\\\", \\\"toast\\\" };\\r\\n     try {\\r\\n         CommandLine cl = _options.parse(args);\\r\\n-        assertTrue(\\\"Confirm -c is set\\\", cl.hasOption('c'));\\r\\n-        assertTrue(\\\"Confirm -b is not set\\\", !cl.hasOption('b'));\\r\\n+        assertTrue(\\\"Confirm -c is set\\\", cl.hasOption(\\\"c\\\"));\\r\\n+        assertTrue(\\\"Confirm -b is not set\\\", !cl.hasOption(\\\"b\\\"));\\r\\n         assertTrue(\\\"Confirm 2 extra args: \\\" + cl.getArgList().size(), cl.getArgList().size() == 2);\\r\\n     } catch (ParseException e) {\\r\\n         fail(e.toString());\\r\\n     }\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jstrachan@apache.org","authorName":"James Strachan","commitYear":"2002","diff":"\"@@ -0,0 +1,11 @@\\n+public void testDoubleDash() {\\r\\n+    String[] args = new String[] { \\\"--copt\\\", \\\"--\\\", \\\"-b\\\", \\\"toast\\\" };\\r\\n+    try {\\r\\n+        CommandLine cl = _options.parse(args);\\r\\n+        assertTrue(\\\"Confirm -c is set\\\", cl.hasOption('c'));\\r\\n+        assertTrue(\\\"Confirm -b is not set\\\", !cl.hasOption('b'));\\r\\n+        assertTrue(\\\"Confirm 2 extra args: \\\" + cl.getArgList().size(), cl.getArgList().size() == 2);\\r\\n+    } catch (ParseException e) {\\r\\n+        fail(e.toString());\\r\\n+    }\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\test\java\org\apache\commons\cli\AbstractParserTestCase.java	testDoubleDash2	org.apache.commons.cli.AbstractParserTestCase.testDoubleDash2()	222	234	3	[{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"\""},{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,13 +1,13 @@\\n @Test\\r\\n public void testDoubleDash2() throws Exception {\\r\\n-    Options options = new Options();\\r\\n+    final Options options = new Options();\\r\\n     options.addOption(OptionBuilder.hasArg().create('n'));\\r\\n     options.addOption(OptionBuilder.create('m'));\\r\\n     try {\\r\\n         parser.parse(options, new String[] { \\\"-n\\\", \\\"--\\\", \\\"-m\\\" });\\r\\n         fail(\\\"MissingArgumentException not thrown for option -n\\\");\\r\\n-    } catch (MissingArgumentException e) {\\r\\n+    } catch (final MissingArgumentException e) {\\r\\n         assertNotNull(\\\"option null\\\", e.getOption());\\r\\n         assertEquals(\\\"n\\\", e.getOption().getOpt());\\r\\n     }\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"tn@apache.org","authorName":"Thomas Neidhart","commitYear":"2013","diff":"\"@@ -1,12 +1,13 @@\\n+@Test\\r\\n public void testDoubleDash2() throws Exception {\\r\\n     Options options = new Options();\\r\\n     options.addOption(OptionBuilder.hasArg().create('n'));\\r\\n     options.addOption(OptionBuilder.create('m'));\\r\\n     try {\\r\\n         parser.parse(options, new String[] { \\\"-n\\\", \\\"--\\\", \\\"-m\\\" });\\r\\n         fail(\\\"MissingArgumentException not thrown for option -n\\\");\\r\\n     } catch (MissingArgumentException e) {\\r\\n         assertNotNull(\\\"option null\\\", e.getOption());\\r\\n         assertEquals(\\\"n\\\", e.getOption().getOpt());\\r\\n     }\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2009","diff":"\"@@ -0,0 +1,12 @@\\n+public void testDoubleDash2() throws Exception {\\r\\n+    Options options = new Options();\\r\\n+    options.addOption(OptionBuilder.hasArg().create('n'));\\r\\n+    options.addOption(OptionBuilder.create('m'));\\r\\n+    try {\\r\\n+        parser.parse(options, new String[] { \\\"-n\\\", \\\"--\\\", \\\"-m\\\" });\\r\\n+        fail(\\\"MissingArgumentException not thrown for option -n\\\");\\r\\n+    } catch (MissingArgumentException e) {\\r\\n+        assertNotNull(\\\"option null\\\", e.getOption());\\r\\n+        assertEquals(\\\"n\\\", e.getOption().getOpt());\\r\\n+    }\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\test\java\org\apache\commons\cli\AbstractParserTestCase.java	testLongOptionQuoteHandling	org.apache.commons.cli.AbstractParserTestCase.testLongOptionQuoteHandling()	237	243	1	[{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"@@ -1,6 +1,6 @@\\n @Test\\r\\n public void testLongOptionQuoteHandling() throws Exception {\\r\\n-    final String[] args = new String[] { \\\"--bfile\\\", \\\"\\\\\\\"quoted string\\\\\\\"\\\" };\\r\\n+    final String[] args = { \\\"--bfile\\\", \\\"\\\\\\\"quoted string\\\\\\\"\\\" };\\r\\n     final CommandLine cl = parser.parse(options, args);\\r\\n     assertEquals(\\\"Confirm --bfile \\\\\\\"arg\\\\\\\" strips quotes\\\", \\\"quoted string\\\", cl.getOptionValue(\\\"b\\\"));\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"stoty@apache.org","authorName":"Istvan Toth","commitYear":"2021","diff":"\"@@ -0,0 +1,6 @@\\n+@Test\\r\\n+public void testLongOptionQuoteHandling() throws Exception {\\r\\n+    final String[] args = new String[] { \\\"--bfile\\\", \\\"\\\\\\\"quoted string\\\\\\\"\\\" };\\r\\n+    final CommandLine cl = parser.parse(options, args);\\r\\n+    assertEquals(\\\"Confirm --bfile \\\\\\\"arg\\\\\\\" strips quotes\\\", \\\"quoted string\\\", cl.getOptionValue(\\\"b\\\"));\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\test\java\org\apache\commons\cli\AbstractParserTestCase.java	testLongOptionWithEqualsQuoteHandling	org.apache.commons.cli.AbstractParserTestCase.testLongOptionWithEqualsQuoteHandling()	246	252	1	[{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"@@ -1,6 +1,6 @@\\n @Test\\r\\n public void testLongOptionWithEqualsQuoteHandling() throws Exception {\\r\\n-    final String[] args = new String[] { \\\"--bfile=\\\\\\\"quoted string\\\\\\\"\\\" };\\r\\n+    final String[] args = { \\\"--bfile=\\\\\\\"quoted string\\\\\\\"\\\" };\\r\\n     final CommandLine cl = parser.parse(options, args);\\r\\n     assertEquals(\\\"Confirm --bfile=\\\\\\\"arg\\\\\\\" strips quotes\\\", \\\"quoted string\\\", cl.getOptionValue(\\\"b\\\"));\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"stoty@apache.org","authorName":"Istvan Toth","commitYear":"2021","diff":"\"@@ -0,0 +1,6 @@\\n+@Test\\r\\n+public void testLongOptionWithEqualsQuoteHandling() throws Exception {\\r\\n+    final String[] args = new String[] { \\\"--bfile=\\\\\\\"quoted string\\\\\\\"\\\" };\\r\\n+    final CommandLine cl = parser.parse(options, args);\\r\\n+    assertEquals(\\\"Confirm --bfile=\\\\\\\"arg\\\\\\\" strips quotes\\\", \\\"quoted string\\\", cl.getOptionValue(\\\"b\\\"));\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\test\java\org\apache\commons\cli\AbstractParserTestCase.java	testLongWithEqualDoubleDash	org.apache.commons.cli.AbstractParserTestCase.testLongWithEqualDoubleDash()	255	264	1	[{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"@@ -1,8 +1,8 @@\\n @Test\\r\\n public void testLongWithEqualDoubleDash() throws Exception {\\r\\n-    final String[] args = new String[] { \\\"--foo=bar\\\" };\\r\\n+    final String[] args = { \\\"--foo=bar\\\" };\\r\\n     final Options options = new Options();\\r\\n     options.addOption(OptionBuilder.withLongOpt(\\\"foo\\\").hasArg().create('f'));\\r\\n     final CommandLine cl = parser.parse(options, args);\\r\\n     assertEquals(\\\"bar\\\", cl.getOptionValue(\\\"foo\\\"));\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,8 +1,8 @@\\n @Test\\r\\n public void testLongWithEqualDoubleDash() throws Exception {\\r\\n-    String[] args = new String[] { \\\"--foo=bar\\\" };\\r\\n-    Options options = new Options();\\r\\n+    final String[] args = new String[] { \\\"--foo=bar\\\" };\\r\\n+    final Options options = new Options();\\r\\n     options.addOption(OptionBuilder.withLongOpt(\\\"foo\\\").hasArg().create('f'));\\r\\n-    CommandLine cl = parser.parse(options, args);\\r\\n+    final CommandLine cl = parser.parse(options, args);\\r\\n     assertEquals(\\\"bar\\\", cl.getOptionValue(\\\"foo\\\"));\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"tn@apache.org","authorName":"Thomas Neidhart","commitYear":"2013","diff":"\"@@ -1,7 +1,8 @@\\n+@Test\\r\\n public void testLongWithEqualDoubleDash() throws Exception {\\r\\n     String[] args = new String[] { \\\"--foo=bar\\\" };\\r\\n     Options options = new Options();\\r\\n     options.addOption(OptionBuilder.withLongOpt(\\\"foo\\\").hasArg().create('f'));\\r\\n     CommandLine cl = parser.parse(options, args);\\r\\n     assertEquals(\\\"bar\\\", cl.getOptionValue(\\\"foo\\\"));\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2009","diff":"\"@@ -1,7 +1,7 @@\\n-public void testLongWithEqual() throws Exception {\\r\\n+public void testLongWithEqualDoubleDash() throws Exception {\\r\\n     String[] args = new String[] { \\\"--foo=bar\\\" };\\r\\n     Options options = new Options();\\r\\n     options.addOption(OptionBuilder.withLongOpt(\\\"foo\\\").hasArg().create('f'));\\r\\n     CommandLine cl = parser.parse(options, args);\\r\\n     assertEquals(\\\"bar\\\", cl.getOptionValue(\\\"foo\\\"));\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2008","diff":"\"@@ -1,8 +1,7 @@\\n public void testLongWithEqual() throws Exception {\\r\\n     String[] args = new String[] { \\\"--foo=bar\\\" };\\r\\n     Options options = new Options();\\r\\n     options.addOption(OptionBuilder.withLongOpt(\\\"foo\\\").hasArg().create('f'));\\r\\n-    Parser parser = new GnuParser();\\r\\n     CommandLine cl = parser.parse(options, args);\\r\\n     assertEquals(\\\"bar\\\", cl.getOptionValue(\\\"foo\\\"));\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2008","diff":"\"@@ -0,0 +1,8 @@\\n+public void testLongWithEqual() throws Exception {\\r\\n+    String[] args = new String[] { \\\"--foo=bar\\\" };\\r\\n+    Options options = new Options();\\r\\n+    options.addOption(OptionBuilder.withLongOpt(\\\"foo\\\").hasArg().create('f'));\\r\\n+    Parser parser = new GnuParser();\\r\\n+    CommandLine cl = parser.parse(options, args);\\r\\n+    assertEquals(\\\"bar\\\", cl.getOptionValue(\\\"foo\\\"));\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\test\java\org\apache\commons\cli\AbstractParserTestCase.java	testLongWithEqualSingleDash	org.apache.commons.cli.AbstractParserTestCase.testLongWithEqualSingleDash()	267	276	1	[{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"@@ -1,8 +1,8 @@\\n @Test\\r\\n public void testLongWithEqualSingleDash() throws Exception {\\r\\n-    final String[] args = new String[] { \\\"-foo=bar\\\" };\\r\\n+    final String[] args = { \\\"-foo=bar\\\" };\\r\\n     final Options options = new Options();\\r\\n     options.addOption(OptionBuilder.withLongOpt(\\\"foo\\\").hasArg().create('f'));\\r\\n     final CommandLine cl = parser.parse(options, args);\\r\\n     assertEquals(\\\"bar\\\", cl.getOptionValue(\\\"foo\\\"));\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,8 +1,8 @@\\n @Test\\r\\n public void testLongWithEqualSingleDash() throws Exception {\\r\\n-    String[] args = new String[] { \\\"-foo=bar\\\" };\\r\\n-    Options options = new Options();\\r\\n+    final String[] args = new String[] { \\\"-foo=bar\\\" };\\r\\n+    final Options options = new Options();\\r\\n     options.addOption(OptionBuilder.withLongOpt(\\\"foo\\\").hasArg().create('f'));\\r\\n-    CommandLine cl = parser.parse(options, args);\\r\\n+    final CommandLine cl = parser.parse(options, args);\\r\\n     assertEquals(\\\"bar\\\", cl.getOptionValue(\\\"foo\\\"));\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"tn@apache.org","authorName":"Thomas Neidhart","commitYear":"2013","diff":"\"@@ -1,7 +1,8 @@\\n+@Test\\r\\n public void testLongWithEqualSingleDash() throws Exception {\\r\\n     String[] args = new String[] { \\\"-foo=bar\\\" };\\r\\n     Options options = new Options();\\r\\n     options.addOption(OptionBuilder.withLongOpt(\\\"foo\\\").hasArg().create('f'));\\r\\n     CommandLine cl = parser.parse(options, args);\\r\\n     assertEquals(\\\"bar\\\", cl.getOptionValue(\\\"foo\\\"));\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2008","diff":"\"@@ -1,8 +1,7 @@\\n public void testLongWithEqualSingleDash() throws Exception {\\r\\n     String[] args = new String[] { \\\"-foo=bar\\\" };\\r\\n     Options options = new Options();\\r\\n     options.addOption(OptionBuilder.withLongOpt(\\\"foo\\\").hasArg().create('f'));\\r\\n-    Parser parser = new GnuParser();\\r\\n     CommandLine cl = parser.parse(options, args);\\r\\n     assertEquals(\\\"bar\\\", cl.getOptionValue(\\\"foo\\\"));\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2008","diff":"\"@@ -0,0 +1,8 @@\\n+public void testLongWithEqualSingleDash() throws Exception {\\r\\n+    String[] args = new String[] { \\\"-foo=bar\\\" };\\r\\n+    Options options = new Options();\\r\\n+    options.addOption(OptionBuilder.withLongOpt(\\\"foo\\\").hasArg().create('f'));\\r\\n+    Parser parser = new GnuParser();\\r\\n+    CommandLine cl = parser.parse(options, args);\\r\\n+    assertEquals(\\\"bar\\\", cl.getOptionValue(\\\"foo\\\"));\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\test\java\org\apache\commons\cli\AbstractParserTestCase.java	testLongWithoutEqualDoubleDash	org.apache.commons.cli.AbstractParserTestCase.testLongWithoutEqualDoubleDash()	279	288	1	[{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"@@ -1,8 +1,8 @@\\n @Test\\r\\n public void testLongWithoutEqualDoubleDash() throws Exception {\\r\\n-    final String[] args = new String[] { \\\"--foobar\\\" };\\r\\n+    final String[] args = { \\\"--foobar\\\" };\\r\\n     final Options options = new Options();\\r\\n     options.addOption(OptionBuilder.withLongOpt(\\\"foo\\\").hasArg().create('f'));\\r\\n     final CommandLine cl = parser.parse(options, args, true);\\r\\n     assertFalse(cl.hasOption(\\\"foo\\\"));\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,8 +1,8 @@\\n @Test\\r\\n public void testLongWithoutEqualDoubleDash() throws Exception {\\r\\n-    String[] args = new String[] { \\\"--foobar\\\" };\\r\\n-    Options options = new Options();\\r\\n+    final String[] args = new String[] { \\\"--foobar\\\" };\\r\\n+    final Options options = new Options();\\r\\n     options.addOption(OptionBuilder.withLongOpt(\\\"foo\\\").hasArg().create('f'));\\r\\n-    CommandLine cl = parser.parse(options, args, true);\\r\\n+    final CommandLine cl = parser.parse(options, args, true);\\r\\n     assertFalse(cl.hasOption(\\\"foo\\\"));\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"tn@apache.org","authorName":"Thomas Neidhart","commitYear":"2013","diff":"\"@@ -1,7 +1,8 @@\\n+@Test\\r\\n public void testLongWithoutEqualDoubleDash() throws Exception {\\r\\n     String[] args = new String[] { \\\"--foobar\\\" };\\r\\n     Options options = new Options();\\r\\n     options.addOption(OptionBuilder.withLongOpt(\\\"foo\\\").hasArg().create('f'));\\r\\n     CommandLine cl = parser.parse(options, args, true);\\r\\n     assertFalse(cl.hasOption(\\\"foo\\\"));\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2009","diff":"\"@@ -0,0 +1,7 @@\\n+public void testLongWithoutEqualDoubleDash() throws Exception {\\r\\n+    String[] args = new String[] { \\\"--foobar\\\" };\\r\\n+    Options options = new Options();\\r\\n+    options.addOption(OptionBuilder.withLongOpt(\\\"foo\\\").hasArg().create('f'));\\r\\n+    CommandLine cl = parser.parse(options, args, true);\\r\\n+    assertFalse(cl.hasOption(\\\"foo\\\"));\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\test\java\org\apache\commons\cli\AbstractParserTestCase.java	testLongWithoutEqualSingleDash	org.apache.commons.cli.AbstractParserTestCase.testLongWithoutEqualSingleDash()	291	300	1	[{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"@@ -1,8 +1,8 @@\\n @Test\\r\\n public void testLongWithoutEqualSingleDash() throws Exception {\\r\\n-    final String[] args = new String[] { \\\"-foobar\\\" };\\r\\n+    final String[] args = { \\\"-foobar\\\" };\\r\\n     final Options options = new Options();\\r\\n     options.addOption(OptionBuilder.withLongOpt(\\\"foo\\\").hasArg().create('f'));\\r\\n     final CommandLine cl = parser.parse(options, args);\\r\\n     assertEquals(\\\"bar\\\", cl.getOptionValue(\\\"foo\\\"));\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,8 +1,8 @@\\n @Test\\r\\n public void testLongWithoutEqualSingleDash() throws Exception {\\r\\n-    String[] args = new String[] { \\\"-foobar\\\" };\\r\\n-    Options options = new Options();\\r\\n+    final String[] args = new String[] { \\\"-foobar\\\" };\\r\\n+    final Options options = new Options();\\r\\n     options.addOption(OptionBuilder.withLongOpt(\\\"foo\\\").hasArg().create('f'));\\r\\n-    CommandLine cl = parser.parse(options, args);\\r\\n+    final CommandLine cl = parser.parse(options, args);\\r\\n     assertEquals(\\\"bar\\\", cl.getOptionValue(\\\"foo\\\"));\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"tn@apache.org","authorName":"Thomas Neidhart","commitYear":"2013","diff":"\"@@ -1,7 +1,8 @@\\n+@Test\\r\\n public void testLongWithoutEqualSingleDash() throws Exception {\\r\\n     String[] args = new String[] { \\\"-foobar\\\" };\\r\\n     Options options = new Options();\\r\\n     options.addOption(OptionBuilder.withLongOpt(\\\"foo\\\").hasArg().create('f'));\\r\\n     CommandLine cl = parser.parse(options, args);\\r\\n     assertEquals(\\\"bar\\\", cl.getOptionValue(\\\"foo\\\"));\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2009","diff":"\"@@ -0,0 +1,7 @@\\n+public void testLongWithoutEqualSingleDash() throws Exception {\\r\\n+    String[] args = new String[] { \\\"-foobar\\\" };\\r\\n+    Options options = new Options();\\r\\n+    options.addOption(OptionBuilder.withLongOpt(\\\"foo\\\").hasArg().create('f'));\\r\\n+    CommandLine cl = parser.parse(options, args);\\r\\n+    assertEquals(\\\"bar\\\", cl.getOptionValue(\\\"foo\\\"));\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\test\java\org\apache\commons\cli\AbstractParserTestCase.java	testLongWithUnexpectedArgument1	org.apache.commons.cli.AbstractParserTestCase.testLongWithUnexpectedArgument1()	303	317	4	[{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"@@ -1,13 +1,13 @@\\n @Test\\r\\n public void testLongWithUnexpectedArgument1() throws Exception {\\r\\n-    final String[] args = new String[] { \\\"--foo=bar\\\" };\\r\\n+    final String[] args = { \\\"--foo=bar\\\" };\\r\\n     final Options options = new Options();\\r\\n     options.addOption(OptionBuilder.withLongOpt(\\\"foo\\\").create('f'));\\r\\n     try {\\r\\n         parser.parse(options, args);\\r\\n     } catch (final UnrecognizedOptionException e) {\\r\\n         assertEquals(\\\"--foo=bar\\\", e.getOption());\\r\\n         return;\\r\\n     }\\r\\n     fail(\\\"UnrecognizedOptionException not thrown\\\");\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,13 +1,13 @@\\n @Test\\r\\n public void testLongWithUnexpectedArgument1() throws Exception {\\r\\n-    String[] args = new String[] { \\\"--foo=bar\\\" };\\r\\n-    Options options = new Options();\\r\\n+    final String[] args = new String[] { \\\"--foo=bar\\\" };\\r\\n+    final Options options = new Options();\\r\\n     options.addOption(OptionBuilder.withLongOpt(\\\"foo\\\").create('f'));\\r\\n     try {\\r\\n         parser.parse(options, args);\\r\\n-    } catch (UnrecognizedOptionException e) {\\r\\n+    } catch (final UnrecognizedOptionException e) {\\r\\n         assertEquals(\\\"--foo=bar\\\", e.getOption());\\r\\n         return;\\r\\n     }\\r\\n     fail(\\\"UnrecognizedOptionException not thrown\\\");\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"tn@apache.org","authorName":"Thomas Neidhart","commitYear":"2013","diff":"\"@@ -1,12 +1,13 @@\\n+@Test\\r\\n public void testLongWithUnexpectedArgument1() throws Exception {\\r\\n     String[] args = new String[] { \\\"--foo=bar\\\" };\\r\\n     Options options = new Options();\\r\\n     options.addOption(OptionBuilder.withLongOpt(\\\"foo\\\").create('f'));\\r\\n     try {\\r\\n         parser.parse(options, args);\\r\\n     } catch (UnrecognizedOptionException e) {\\r\\n         assertEquals(\\\"--foo=bar\\\", e.getOption());\\r\\n         return;\\r\\n     }\\r\\n     fail(\\\"UnrecognizedOptionException not thrown\\\");\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2009","diff":"\"@@ -0,0 +1,12 @@\\n+public void testLongWithUnexpectedArgument1() throws Exception {\\r\\n+    String[] args = new String[] { \\\"--foo=bar\\\" };\\r\\n+    Options options = new Options();\\r\\n+    options.addOption(OptionBuilder.withLongOpt(\\\"foo\\\").create('f'));\\r\\n+    try {\\r\\n+        parser.parse(options, args);\\r\\n+    } catch (UnrecognizedOptionException e) {\\r\\n+        assertEquals(\\\"--foo=bar\\\", e.getOption());\\r\\n+        return;\\r\\n+    }\\r\\n+    fail(\\\"UnrecognizedOptionException not thrown\\\");\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\test\java\org\apache\commons\cli\AbstractParserTestCase.java	testLongWithUnexpectedArgument2	org.apache.commons.cli.AbstractParserTestCase.testLongWithUnexpectedArgument2()	320	334	4	[{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"@@ -1,13 +1,13 @@\\n @Test\\r\\n public void testLongWithUnexpectedArgument2() throws Exception {\\r\\n-    final String[] args = new String[] { \\\"-foobar\\\" };\\r\\n+    final String[] args = { \\\"-foobar\\\" };\\r\\n     final Options options = new Options();\\r\\n     options.addOption(OptionBuilder.withLongOpt(\\\"foo\\\").create('f'));\\r\\n     try {\\r\\n         parser.parse(options, args);\\r\\n     } catch (final UnrecognizedOptionException e) {\\r\\n         assertEquals(\\\"-foobar\\\", e.getOption());\\r\\n         return;\\r\\n     }\\r\\n     fail(\\\"UnrecognizedOptionException not thrown\\\");\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,13 +1,13 @@\\n @Test\\r\\n public void testLongWithUnexpectedArgument2() throws Exception {\\r\\n-    String[] args = new String[] { \\\"-foobar\\\" };\\r\\n-    Options options = new Options();\\r\\n+    final String[] args = new String[] { \\\"-foobar\\\" };\\r\\n+    final Options options = new Options();\\r\\n     options.addOption(OptionBuilder.withLongOpt(\\\"foo\\\").create('f'));\\r\\n     try {\\r\\n         parser.parse(options, args);\\r\\n-    } catch (UnrecognizedOptionException e) {\\r\\n+    } catch (final UnrecognizedOptionException e) {\\r\\n         assertEquals(\\\"-foobar\\\", e.getOption());\\r\\n         return;\\r\\n     }\\r\\n     fail(\\\"UnrecognizedOptionException not thrown\\\");\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"tn@apache.org","authorName":"Thomas Neidhart","commitYear":"2013","diff":"\"@@ -1,12 +1,13 @@\\n+@Test\\r\\n public void testLongWithUnexpectedArgument2() throws Exception {\\r\\n     String[] args = new String[] { \\\"-foobar\\\" };\\r\\n     Options options = new Options();\\r\\n     options.addOption(OptionBuilder.withLongOpt(\\\"foo\\\").create('f'));\\r\\n     try {\\r\\n         parser.parse(options, args);\\r\\n     } catch (UnrecognizedOptionException e) {\\r\\n         assertEquals(\\\"-foobar\\\", e.getOption());\\r\\n         return;\\r\\n     }\\r\\n     fail(\\\"UnrecognizedOptionException not thrown\\\");\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2009","diff":"\"@@ -0,0 +1,12 @@\\n+public void testLongWithUnexpectedArgument2() throws Exception {\\r\\n+    String[] args = new String[] { \\\"-foobar\\\" };\\r\\n+    Options options = new Options();\\r\\n+    options.addOption(OptionBuilder.withLongOpt(\\\"foo\\\").create('f'));\\r\\n+    try {\\r\\n+        parser.parse(options, args);\\r\\n+    } catch (UnrecognizedOptionException e) {\\r\\n+        assertEquals(\\\"-foobar\\\", e.getOption());\\r\\n+        return;\\r\\n+    }\\r\\n+    fail(\\\"UnrecognizedOptionException not thrown\\\");\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\test\java\org\apache\commons\cli\AbstractParserTestCase.java	testMissingArg	org.apache.commons.cli.AbstractParserTestCase.testMissingArg()	337	350	3	[{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"@@ -1,12 +1,12 @@\\n @Test\\r\\n public void testMissingArg() throws Exception {\\r\\n-    final String[] args = new String[] { \\\"-b\\\" };\\r\\n+    final String[] args = { \\\"-b\\\" };\\r\\n     boolean caught = false;\\r\\n     try {\\r\\n         parser.parse(options, args);\\r\\n     } catch (final MissingArgumentException e) {\\r\\n         caught = true;\\r\\n         assertEquals(\\\"option missing an argument\\\", \\\"b\\\", e.getOption().getOpt());\\r\\n     }\\r\\n     assertTrue(\\\"Confirm MissingArgumentException caught\\\", caught);\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,12 +1,12 @@\\n @Test\\r\\n public void testMissingArg() throws Exception {\\r\\n-    String[] args = new String[] { \\\"-b\\\" };\\r\\n+    final String[] args = new String[] { \\\"-b\\\" };\\r\\n     boolean caught = false;\\r\\n     try {\\r\\n         parser.parse(options, args);\\r\\n-    } catch (MissingArgumentException e) {\\r\\n+    } catch (final MissingArgumentException e) {\\r\\n         caught = true;\\r\\n         assertEquals(\\\"option missing an argument\\\", \\\"b\\\", e.getOption().getOpt());\\r\\n     }\\r\\n     assertTrue(\\\"Confirm MissingArgumentException caught\\\", caught);\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"tn@apache.org","authorName":"Thomas Neidhart","commitYear":"2013","diff":"\"@@ -1,11 +1,12 @@\\n+@Test\\r\\n public void testMissingArg() throws Exception {\\r\\n     String[] args = new String[] { \\\"-b\\\" };\\r\\n     boolean caught = false;\\r\\n     try {\\r\\n         parser.parse(options, args);\\r\\n     } catch (MissingArgumentException e) {\\r\\n         caught = true;\\r\\n         assertEquals(\\\"option missing an argument\\\", \\\"b\\\", e.getOption().getOpt());\\r\\n     }\\r\\n     assertTrue(\\\"Confirm MissingArgumentException caught\\\", caught);\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2008","diff":"\"@@ -1,11 +1,11 @@\\n public void testMissingArg() throws Exception {\\r\\n-    String[] args = new String[] { \\\"-acb\\\" };\\r\\n+    String[] args = new String[] { \\\"-b\\\" };\\r\\n     boolean caught = false;\\r\\n     try {\\r\\n         parser.parse(options, args);\\r\\n     } catch (MissingArgumentException e) {\\r\\n         caught = true;\\r\\n         assertEquals(\\\"option missing an argument\\\", \\\"b\\\", e.getOption().getOpt());\\r\\n     }\\r\\n     assertTrue(\\\"Confirm MissingArgumentException caught\\\", caught);\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2008","diff":"\"@@ -1,10 +1,11 @@\\n public void testMissingArg() throws Exception {\\r\\n     String[] args = new String[] { \\\"-acb\\\" };\\r\\n     boolean caught = false;\\r\\n     try {\\r\\n         parser.parse(options, args);\\r\\n     } catch (MissingArgumentException e) {\\r\\n         caught = true;\\r\\n+        assertEquals(\\\"option missing an argument\\\", \\\"b\\\", e.getOption().getOpt());\\r\\n     }\\r\\n     assertTrue(\\\"Confirm MissingArgumentException caught\\\", caught);\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2008","diff":"\"@@ -1,10 +1,10 @@\\n public void testMissingArg() throws Exception {\\r\\n     String[] args = new String[] { \\\"-acb\\\" };\\r\\n     boolean caught = false;\\r\\n     try {\\r\\n-        _parser.parse(_options, args);\\r\\n+        parser.parse(options, args);\\r\\n     } catch (MissingArgumentException e) {\\r\\n         caught = true;\\r\\n     }\\r\\n     assertTrue(\\\"Confirm MissingArgumentException caught\\\", caught);\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2008","diff":"\"@@ -1,12 +1,10 @@\\n-public void testMissingArg() {\\r\\n+public void testMissingArg() throws Exception {\\r\\n     String[] args = new String[] { \\\"-acb\\\" };\\r\\n     boolean caught = false;\\r\\n     try {\\r\\n-        CommandLine cl = _parser.parse(_options, args);\\r\\n+        _parser.parse(_options, args);\\r\\n     } catch (MissingArgumentException e) {\\r\\n         caught = true;\\r\\n-    } catch (ParseException e) {\\r\\n-        fail(e.toString());\\r\\n     }\\r\\n     assertTrue(\\\"Confirm MissingArgumentException caught\\\", caught);\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -1,12 +1,12 @@\\n public void testMissingArg() {\\r\\n     String[] args = new String[] { \\\"-acb\\\" };\\r\\n     boolean caught = false;\\r\\n     try {\\r\\n-        CommandLine cl = _options.parse(args);\\r\\n+        CommandLine cl = _parser.parse(_options, args);\\r\\n     } catch (MissingArgumentException e) {\\r\\n         caught = true;\\r\\n     } catch (ParseException e) {\\r\\n         fail(e.toString());\\r\\n     }\\r\\n     assertTrue(\\\"Confirm MissingArgumentException caught\\\", caught);\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jstrachan@apache.org","authorName":"James Strachan","commitYear":"2002","diff":"\"@@ -0,0 +1,12 @@\\n+public void testMissingArg() {\\r\\n+    String[] args = new String[] { \\\"-acb\\\" };\\r\\n+    boolean caught = false;\\r\\n+    try {\\r\\n+        CommandLine cl = _options.parse(args);\\r\\n+    } catch (MissingArgumentException e) {\\r\\n+        caught = true;\\r\\n+    } catch (ParseException e) {\\r\\n+        fail(e.toString());\\r\\n+    }\\r\\n+    assertTrue(\\\"Confirm MissingArgumentException caught\\\", caught);\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\test\java\org\apache\commons\cli\AbstractParserTestCase.java	testMissingArgWithBursting	org.apache.commons.cli.AbstractParserTestCase.testMissingArgWithBursting()	353	366	3	[{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"@@ -1,12 +1,12 @@\\n @Test\\r\\n public void testMissingArgWithBursting() throws Exception {\\r\\n-    final String[] args = new String[] { \\\"-acb\\\" };\\r\\n+    final String[] args = { \\\"-acb\\\" };\\r\\n     boolean caught = false;\\r\\n     try {\\r\\n         parser.parse(options, args);\\r\\n     } catch (final MissingArgumentException e) {\\r\\n         caught = true;\\r\\n         assertEquals(\\\"option missing an argument\\\", \\\"b\\\", e.getOption().getOpt());\\r\\n     }\\r\\n     assertTrue(\\\"Confirm MissingArgumentException caught\\\", caught);\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,12 +1,12 @@\\n @Test\\r\\n public void testMissingArgWithBursting() throws Exception {\\r\\n-    String[] args = new String[] { \\\"-acb\\\" };\\r\\n+    final String[] args = new String[] { \\\"-acb\\\" };\\r\\n     boolean caught = false;\\r\\n     try {\\r\\n         parser.parse(options, args);\\r\\n-    } catch (MissingArgumentException e) {\\r\\n+    } catch (final MissingArgumentException e) {\\r\\n         caught = true;\\r\\n         assertEquals(\\\"option missing an argument\\\", \\\"b\\\", e.getOption().getOpt());\\r\\n     }\\r\\n     assertTrue(\\\"Confirm MissingArgumentException caught\\\", caught);\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"tn@apache.org","authorName":"Thomas Neidhart","commitYear":"2013","diff":"\"@@ -1,11 +1,12 @@\\n+@Test\\r\\n public void testMissingArgWithBursting() throws Exception {\\r\\n     String[] args = new String[] { \\\"-acb\\\" };\\r\\n     boolean caught = false;\\r\\n     try {\\r\\n         parser.parse(options, args);\\r\\n     } catch (MissingArgumentException e) {\\r\\n         caught = true;\\r\\n         assertEquals(\\\"option missing an argument\\\", \\\"b\\\", e.getOption().getOpt());\\r\\n     }\\r\\n     assertTrue(\\\"Confirm MissingArgumentException caught\\\", caught);\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2008","diff":"\"@@ -1,11 +1,11 @@\\n-public void testMissingArg() throws Exception {\\r\\n+public void testMissingArgWithBursting() throws Exception {\\r\\n     String[] args = new String[] { \\\"-acb\\\" };\\r\\n     boolean caught = false;\\r\\n     try {\\r\\n         parser.parse(options, args);\\r\\n     } catch (MissingArgumentException e) {\\r\\n         caught = true;\\r\\n         assertEquals(\\\"option missing an argument\\\", \\\"b\\\", e.getOption().getOpt());\\r\\n     }\\r\\n     assertTrue(\\\"Confirm MissingArgumentException caught\\\", caught);\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2008","diff":"\"@@ -1,10 +1,11 @@\\n public void testMissingArg() throws Exception {\\r\\n     String[] args = new String[] { \\\"-acb\\\" };\\r\\n     boolean caught = false;\\r\\n     try {\\r\\n         parser.parse(options, args);\\r\\n     } catch (MissingArgumentException e) {\\r\\n         caught = true;\\r\\n+        assertEquals(\\\"option missing an argument\\\", \\\"b\\\", e.getOption().getOpt());\\r\\n     }\\r\\n     assertTrue(\\\"Confirm MissingArgumentException caught\\\", caught);\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2008","diff":"\"@@ -1,10 +1,10 @@\\n public void testMissingArg() throws Exception {\\r\\n     String[] args = new String[] { \\\"-acb\\\" };\\r\\n     boolean caught = false;\\r\\n     try {\\r\\n-        _parser.parse(_options, args);\\r\\n+        parser.parse(options, args);\\r\\n     } catch (MissingArgumentException e) {\\r\\n         caught = true;\\r\\n     }\\r\\n     assertTrue(\\\"Confirm MissingArgumentException caught\\\", caught);\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2008","diff":"\"@@ -1,12 +1,10 @@\\n-public void testMissingArg() {\\r\\n+public void testMissingArg() throws Exception {\\r\\n     String[] args = new String[] { \\\"-acb\\\" };\\r\\n     boolean caught = false;\\r\\n     try {\\r\\n-        CommandLine cl = _parser.parse(_options, args);\\r\\n+        _parser.parse(_options, args);\\r\\n     } catch (MissingArgumentException e) {\\r\\n         caught = true;\\r\\n-    } catch (ParseException e) {\\r\\n-        fail(e.toString());\\r\\n     }\\r\\n     assertTrue(\\\"Confirm MissingArgumentException caught\\\", caught);\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -1,12 +1,12 @@\\n public void testMissingArg() {\\r\\n     String[] args = new String[] { \\\"-acb\\\" };\\r\\n     boolean caught = false;\\r\\n     try {\\r\\n-        CommandLine cl = _options.parse(args);\\r\\n+        CommandLine cl = _parser.parse(_options, args);\\r\\n     } catch (MissingArgumentException e) {\\r\\n         caught = true;\\r\\n     } catch (ParseException e) {\\r\\n         fail(e.toString());\\r\\n     }\\r\\n     assertTrue(\\\"Confirm MissingArgumentException caught\\\", caught);\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jstrachan@apache.org","authorName":"James Strachan","commitYear":"2002","diff":"\"@@ -0,0 +1,12 @@\\n+public void testMissingArg() {\\r\\n+    String[] args = new String[] { \\\"-acb\\\" };\\r\\n+    boolean caught = false;\\r\\n+    try {\\r\\n+        CommandLine cl = _options.parse(args);\\r\\n+    } catch (MissingArgumentException e) {\\r\\n+        caught = true;\\r\\n+    } catch (ParseException e) {\\r\\n+        fail(e.toString());\\r\\n+    }\\r\\n+    assertTrue(\\\"Confirm MissingArgumentException caught\\\", caught);\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\test\java\org\apache\commons\cli\AbstractParserTestCase.java	testMissingRequiredGroup	org.apache.commons.cli.AbstractParserTestCase.testMissingRequiredGroup()	369	388	4	[{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"\""},{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,19 +1,19 @@\\n @Test\\r\\n public void testMissingRequiredGroup() throws Exception {\\r\\n-    OptionGroup group = new OptionGroup();\\r\\n+    final OptionGroup group = new OptionGroup();\\r\\n     group.addOption(OptionBuilder.create(\\\"a\\\"));\\r\\n     group.addOption(OptionBuilder.create(\\\"b\\\"));\\r\\n     group.setRequired(true);\\r\\n-    Options options = new Options();\\r\\n+    final Options options = new Options();\\r\\n     options.addOptionGroup(group);\\r\\n     options.addOption(OptionBuilder.isRequired().create(\\\"c\\\"));\\r\\n     try {\\r\\n         parser.parse(options, new String[] { \\\"-c\\\" });\\r\\n         fail(\\\"MissingOptionException not thrown\\\");\\r\\n-    } catch (MissingOptionException e) {\\r\\n+    } catch (final MissingOptionException e) {\\r\\n         assertEquals(1, e.getMissingOptions().size());\\r\\n         assertTrue(e.getMissingOptions().get(0) instanceof OptionGroup);\\r\\n-    } catch (ParseException e) {\\r\\n+    } catch (final ParseException e) {\\r\\n         fail(\\\"Expected to catch MissingOptionException\\\");\\r\\n     }\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"tn@apache.org","authorName":"Thomas Neidhart","commitYear":"2013","diff":"\"@@ -1,18 +1,19 @@\\n+@Test\\r\\n public void testMissingRequiredGroup() throws Exception {\\r\\n     OptionGroup group = new OptionGroup();\\r\\n     group.addOption(OptionBuilder.create(\\\"a\\\"));\\r\\n     group.addOption(OptionBuilder.create(\\\"b\\\"));\\r\\n     group.setRequired(true);\\r\\n     Options options = new Options();\\r\\n     options.addOptionGroup(group);\\r\\n     options.addOption(OptionBuilder.isRequired().create(\\\"c\\\"));\\r\\n     try {\\r\\n         parser.parse(options, new String[] { \\\"-c\\\" });\\r\\n         fail(\\\"MissingOptionException not thrown\\\");\\r\\n     } catch (MissingOptionException e) {\\r\\n         assertEquals(1, e.getMissingOptions().size());\\r\\n         assertTrue(e.getMissingOptions().get(0) instanceof OptionGroup);\\r\\n     } catch (ParseException e) {\\r\\n         fail(\\\"Expected to catch MissingOptionException\\\");\\r\\n     }\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2009","diff":"\"@@ -0,0 +1,18 @@\\n+public void testMissingRequiredGroup() throws Exception {\\r\\n+    OptionGroup group = new OptionGroup();\\r\\n+    group.addOption(OptionBuilder.create(\\\"a\\\"));\\r\\n+    group.addOption(OptionBuilder.create(\\\"b\\\"));\\r\\n+    group.setRequired(true);\\r\\n+    Options options = new Options();\\r\\n+    options.addOptionGroup(group);\\r\\n+    options.addOption(OptionBuilder.isRequired().create(\\\"c\\\"));\\r\\n+    try {\\r\\n+        parser.parse(options, new String[] { \\\"-c\\\" });\\r\\n+        fail(\\\"MissingOptionException not thrown\\\");\\r\\n+    } catch (MissingOptionException e) {\\r\\n+        assertEquals(1, e.getMissingOptions().size());\\r\\n+        assertTrue(e.getMissingOptions().get(0) instanceof OptionGroup);\\r\\n+    } catch (ParseException e) {\\r\\n+        fail(\\\"Expected to catch MissingOptionException\\\");\\r\\n+    }\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\test\java\org\apache\commons\cli\AbstractParserTestCase.java	testMissingRequiredOption	org.apache.commons.cli.AbstractParserTestCase.testMissingRequiredOption()	391	407	4	[{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"@@ -1,16 +1,16 @@\\n @Test\\r\\n public void testMissingRequiredOption() {\\r\\n-    final String[] args = new String[] { \\\"-a\\\" };\\r\\n+    final String[] args = { \\\"-a\\\" };\\r\\n     final Options options = new Options();\\r\\n     options.addOption(\\\"a\\\", \\\"enable-a\\\", false, null);\\r\\n     options.addOption(OptionBuilder.withLongOpt(\\\"bfile\\\").hasArg().isRequired().create('b'));\\r\\n     try {\\r\\n         parser.parse(options, args);\\r\\n         fail(\\\"exception should have been thrown\\\");\\r\\n     } catch (final MissingOptionException e) {\\r\\n         assertEquals(\\\"Incorrect exception message\\\", \\\"Missing required option: b\\\", e.getMessage());\\r\\n         assertTrue(e.getMissingOptions().contains(\\\"b\\\"));\\r\\n     } catch (final ParseException e) {\\r\\n         fail(\\\"expected to catch MissingOptionException\\\");\\r\\n     }\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2019","diff":"\"\""},{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,16 +1,16 @@\\n @Test\\r\\n public void testMissingRequiredOption() {\\r\\n-    String[] args = new String[] { \\\"-a\\\" };\\r\\n-    Options options = new Options();\\r\\n+    final String[] args = new String[] { \\\"-a\\\" };\\r\\n+    final Options options = new Options();\\r\\n     options.addOption(\\\"a\\\", \\\"enable-a\\\", false, null);\\r\\n     options.addOption(OptionBuilder.withLongOpt(\\\"bfile\\\").hasArg().isRequired().create('b'));\\r\\n     try {\\r\\n         parser.parse(options, args);\\r\\n         fail(\\\"exception should have been thrown\\\");\\r\\n-    } catch (MissingOptionException e) {\\r\\n+    } catch (final MissingOptionException e) {\\r\\n         assertEquals(\\\"Incorrect exception message\\\", \\\"Missing required option: b\\\", e.getMessage());\\r\\n         assertTrue(e.getMissingOptions().contains(\\\"b\\\"));\\r\\n-    } catch (ParseException e) {\\r\\n+    } catch (final ParseException e) {\\r\\n         fail(\\\"expected to catch MissingOptionException\\\");\\r\\n     }\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"tn@apache.org","authorName":"Thomas Neidhart","commitYear":"2013","diff":"\"@@ -1,15 +1,16 @@\\n+@Test\\r\\n public void testMissingRequiredOption() {\\r\\n     String[] args = new String[] { \\\"-a\\\" };\\r\\n     Options options = new Options();\\r\\n     options.addOption(\\\"a\\\", \\\"enable-a\\\", false, null);\\r\\n     options.addOption(OptionBuilder.withLongOpt(\\\"bfile\\\").hasArg().isRequired().create('b'));\\r\\n     try {\\r\\n         parser.parse(options, args);\\r\\n         fail(\\\"exception should have been thrown\\\");\\r\\n     } catch (MissingOptionException e) {\\r\\n         assertEquals(\\\"Incorrect exception message\\\", \\\"Missing required option: b\\\", e.getMessage());\\r\\n         assertTrue(e.getMissingOptions().contains(\\\"b\\\"));\\r\\n     } catch (ParseException e) {\\r\\n         fail(\\\"expected to catch MissingOptionException\\\");\\r\\n     }\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2009","diff":"\"@@ -1,12 +1,15 @@\\n public void testMissingRequiredOption() {\\r\\n     String[] args = new String[] { \\\"-a\\\" };\\r\\n+    Options options = new Options();\\r\\n+    options.addOption(\\\"a\\\", \\\"enable-a\\\", false, null);\\r\\n+    options.addOption(OptionBuilder.withLongOpt(\\\"bfile\\\").hasArg().isRequired().create('b'));\\r\\n     try {\\r\\n-        CommandLine cl = parser.parse(_options, args);\\r\\n+        parser.parse(options, args);\\r\\n         fail(\\\"exception should have been thrown\\\");\\r\\n     } catch (MissingOptionException e) {\\r\\n         assertEquals(\\\"Incorrect exception message\\\", \\\"Missing required option: b\\\", e.getMessage());\\r\\n         assertTrue(e.getMissingOptions().contains(\\\"b\\\"));\\r\\n     } catch (ParseException e) {\\r\\n         fail(\\\"expected to catch MissingOptionException\\\");\\r\\n     }\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2008","diff":"\"@@ -1,11 +1,12 @@\\n public void testMissingRequiredOption() {\\r\\n     String[] args = new String[] { \\\"-a\\\" };\\r\\n     try {\\r\\n         CommandLine cl = parser.parse(_options, args);\\r\\n         fail(\\\"exception should have been thrown\\\");\\r\\n     } catch (MissingOptionException e) {\\r\\n         assertEquals(\\\"Incorrect exception message\\\", \\\"Missing required option: b\\\", e.getMessage());\\r\\n+        assertTrue(e.getMissingOptions().contains(\\\"b\\\"));\\r\\n     } catch (ParseException e) {\\r\\n         fail(\\\"expected to catch MissingOptionException\\\");\\r\\n     }\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"bayard@apache.org","authorName":"Henri Yandell","commitYear":"2008","diff":"\"@@ -1,11 +1,11 @@\\n public void testMissingRequiredOption() {\\r\\n     String[] args = new String[] { \\\"-a\\\" };\\r\\n     try {\\r\\n         CommandLine cl = parser.parse(_options, args);\\r\\n         fail(\\\"exception should have been thrown\\\");\\r\\n+    } catch (MissingOptionException e) {\\r\\n+        assertEquals(\\\"Incorrect exception message\\\", \\\"Missing required option: b\\\", e.getMessage());\\r\\n     } catch (ParseException e) {\\r\\n-        if (!(e instanceof MissingOptionException)) {\\r\\n-            fail(\\\"expected to catch MissingOptionException\\\");\\r\\n-        }\\r\\n+        fail(\\\"expected to catch MissingOptionException\\\");\\r\\n     }\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -1,11 +1,11 @@\\n public void testMissingRequiredOption() {\\r\\n     String[] args = new String[] { \\\"-a\\\" };\\r\\n     try {\\r\\n-        CommandLine cl = _options.parse(args);\\r\\n+        CommandLine cl = parser.parse(_options, args);\\r\\n         fail(\\\"exception should have been thrown\\\");\\r\\n     } catch (ParseException e) {\\r\\n         if (!(e instanceof MissingOptionException)) {\\r\\n             fail(\\\"expected to catch MissingOptionException\\\");\\r\\n         }\\r\\n     }\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jstrachan@apache.org","authorName":"James Strachan","commitYear":"2002","diff":"\"@@ -0,0 +1,11 @@\\n+public void testMissingRequiredOption() {\\r\\n+    String[] args = new String[] { \\\"-a\\\" };\\r\\n+    try {\\r\\n+        CommandLine cl = _options.parse(args);\\r\\n+        fail(\\\"exception should have been thrown\\\");\\r\\n+    } catch (ParseException e) {\\r\\n+        if (!(e instanceof MissingOptionException)) {\\r\\n+            fail(\\\"expected to catch MissingOptionException\\\");\\r\\n+        }\\r\\n+    }\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\test\java\org\apache\commons\cli\AbstractParserTestCase.java	testMissingRequiredOptions	org.apache.commons.cli.AbstractParserTestCase.testMissingRequiredOptions()	410	428	4	[{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"@@ -1,18 +1,18 @@\\n @Test\\r\\n public void testMissingRequiredOptions() {\\r\\n-    final String[] args = new String[] { \\\"-a\\\" };\\r\\n+    final String[] args = { \\\"-a\\\" };\\r\\n     final Options options = new Options();\\r\\n     options.addOption(\\\"a\\\", \\\"enable-a\\\", false, null);\\r\\n     options.addOption(OptionBuilder.withLongOpt(\\\"bfile\\\").hasArg().isRequired().create('b'));\\r\\n     options.addOption(OptionBuilder.withLongOpt(\\\"cfile\\\").hasArg().isRequired().create('c'));\\r\\n     try {\\r\\n         parser.parse(options, args);\\r\\n         fail(\\\"exception should have been thrown\\\");\\r\\n     } catch (final MissingOptionException e) {\\r\\n         assertEquals(\\\"Incorrect exception message\\\", \\\"Missing required options: b, c\\\", e.getMessage());\\r\\n         assertTrue(e.getMissingOptions().contains(\\\"b\\\"));\\r\\n         assertTrue(e.getMissingOptions().contains(\\\"c\\\"));\\r\\n     } catch (final ParseException e) {\\r\\n         fail(\\\"expected to catch MissingOptionException\\\");\\r\\n     }\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,18 +1,18 @@\\n @Test\\r\\n public void testMissingRequiredOptions() {\\r\\n-    String[] args = new String[] { \\\"-a\\\" };\\r\\n-    Options options = new Options();\\r\\n+    final String[] args = new String[] { \\\"-a\\\" };\\r\\n+    final Options options = new Options();\\r\\n     options.addOption(\\\"a\\\", \\\"enable-a\\\", false, null);\\r\\n     options.addOption(OptionBuilder.withLongOpt(\\\"bfile\\\").hasArg().isRequired().create('b'));\\r\\n     options.addOption(OptionBuilder.withLongOpt(\\\"cfile\\\").hasArg().isRequired().create('c'));\\r\\n     try {\\r\\n         parser.parse(options, args);\\r\\n         fail(\\\"exception should have been thrown\\\");\\r\\n-    } catch (MissingOptionException e) {\\r\\n+    } catch (final MissingOptionException e) {\\r\\n         assertEquals(\\\"Incorrect exception message\\\", \\\"Missing required options: b, c\\\", e.getMessage());\\r\\n         assertTrue(e.getMissingOptions().contains(\\\"b\\\"));\\r\\n         assertTrue(e.getMissingOptions().contains(\\\"c\\\"));\\r\\n-    } catch (ParseException e) {\\r\\n+    } catch (final ParseException e) {\\r\\n         fail(\\\"expected to catch MissingOptionException\\\");\\r\\n     }\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"tn@apache.org","authorName":"Thomas Neidhart","commitYear":"2013","diff":"\"@@ -1,17 +1,18 @@\\n+@Test\\r\\n public void testMissingRequiredOptions() {\\r\\n     String[] args = new String[] { \\\"-a\\\" };\\r\\n     Options options = new Options();\\r\\n     options.addOption(\\\"a\\\", \\\"enable-a\\\", false, null);\\r\\n     options.addOption(OptionBuilder.withLongOpt(\\\"bfile\\\").hasArg().isRequired().create('b'));\\r\\n     options.addOption(OptionBuilder.withLongOpt(\\\"cfile\\\").hasArg().isRequired().create('c'));\\r\\n     try {\\r\\n         parser.parse(options, args);\\r\\n         fail(\\\"exception should have been thrown\\\");\\r\\n     } catch (MissingOptionException e) {\\r\\n         assertEquals(\\\"Incorrect exception message\\\", \\\"Missing required options: b, c\\\", e.getMessage());\\r\\n         assertTrue(e.getMissingOptions().contains(\\\"b\\\"));\\r\\n         assertTrue(e.getMissingOptions().contains(\\\"c\\\"));\\r\\n     } catch (ParseException e) {\\r\\n         fail(\\\"expected to catch MissingOptionException\\\");\\r\\n     }\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2009","diff":"\"@@ -1,14 +1,17 @@\\n public void testMissingRequiredOptions() {\\r\\n     String[] args = new String[] { \\\"-a\\\" };\\r\\n-    _options.addOption(OptionBuilder.withLongOpt(\\\"cfile\\\").hasArg().isRequired().withDescription(\\\"set the value of [c]\\\").create('c'));\\r\\n+    Options options = new Options();\\r\\n+    options.addOption(\\\"a\\\", \\\"enable-a\\\", false, null);\\r\\n+    options.addOption(OptionBuilder.withLongOpt(\\\"bfile\\\").hasArg().isRequired().create('b'));\\r\\n+    options.addOption(OptionBuilder.withLongOpt(\\\"cfile\\\").hasArg().isRequired().create('c'));\\r\\n     try {\\r\\n-        CommandLine cl = parser.parse(_options, args);\\r\\n+        parser.parse(options, args);\\r\\n         fail(\\\"exception should have been thrown\\\");\\r\\n     } catch (MissingOptionException e) {\\r\\n         assertEquals(\\\"Incorrect exception message\\\", \\\"Missing required options: b, c\\\", e.getMessage());\\r\\n         assertTrue(e.getMissingOptions().contains(\\\"b\\\"));\\r\\n         assertTrue(e.getMissingOptions().contains(\\\"c\\\"));\\r\\n     } catch (ParseException e) {\\r\\n         fail(\\\"expected to catch MissingOptionException\\\");\\r\\n     }\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2008","diff":"\"@@ -1,12 +1,14 @@\\n public void testMissingRequiredOptions() {\\r\\n     String[] args = new String[] { \\\"-a\\\" };\\r\\n     _options.addOption(OptionBuilder.withLongOpt(\\\"cfile\\\").hasArg().isRequired().withDescription(\\\"set the value of [c]\\\").create('c'));\\r\\n     try {\\r\\n         CommandLine cl = parser.parse(_options, args);\\r\\n         fail(\\\"exception should have been thrown\\\");\\r\\n     } catch (MissingOptionException e) {\\r\\n         assertEquals(\\\"Incorrect exception message\\\", \\\"Missing required options: b, c\\\", e.getMessage());\\r\\n+        assertTrue(e.getMissingOptions().contains(\\\"b\\\"));\\r\\n+        assertTrue(e.getMissingOptions().contains(\\\"c\\\"));\\r\\n     } catch (ParseException e) {\\r\\n         fail(\\\"expected to catch MissingOptionException\\\");\\r\\n     }\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"bayard@apache.org","authorName":"Henri Yandell","commitYear":"2008","diff":"\"@@ -0,0 +1,12 @@\\n+public void testMissingRequiredOptions() {\\r\\n+    String[] args = new String[] { \\\"-a\\\" };\\r\\n+    _options.addOption(OptionBuilder.withLongOpt(\\\"cfile\\\").hasArg().isRequired().withDescription(\\\"set the value of [c]\\\").create('c'));\\r\\n+    try {\\r\\n+        CommandLine cl = parser.parse(_options, args);\\r\\n+        fail(\\\"exception should have been thrown\\\");\\r\\n+    } catch (MissingOptionException e) {\\r\\n+        assertEquals(\\\"Incorrect exception message\\\", \\\"Missing required options: b, c\\\", e.getMessage());\\r\\n+    } catch (ParseException e) {\\r\\n+        fail(\\\"expected to catch MissingOptionException\\\");\\r\\n+    }\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\test\java\org\apache\commons\cli\AbstractParserTestCase.java	testMultiple	org.apache.commons.cli.AbstractParserTestCase.testMultiple()	431	445	1	[{"authorEmail":"arturobernalg@gmail.com","authorName":"Arturo Bernal","commitYear":"2021","diff":"\"@@ -1,13 +1,13 @@\\n @Test\\r\\n public void testMultiple() throws Exception {\\r\\n     final String[] args = { \\\"-c\\\", \\\"foobar\\\", \\\"-b\\\", \\\"toast\\\" };\\r\\n     CommandLine cl = parser.parse(options, args, true);\\r\\n     assertTrue(\\\"Confirm -c is set\\\", cl.hasOption(\\\"c\\\"));\\r\\n-    assertTrue(\\\"Confirm  3 extra args: \\\" + cl.getArgList().size(), cl.getArgList().size() == 3);\\r\\n+    assertEquals(\\\"Confirm  3 extra args: \\\" + cl.getArgList().size(), 3, cl.getArgList().size());\\r\\n     cl = parser.parse(options, cl.getArgs());\\r\\n-    assertTrue(\\\"Confirm -c is not set\\\", !cl.hasOption(\\\"c\\\"));\\r\\n+    assertFalse(\\\"Confirm -c is not set\\\", cl.hasOption(\\\"c\\\"));\\r\\n     assertTrue(\\\"Confirm -b is set\\\", cl.hasOption(\\\"b\\\"));\\r\\n-    assertTrue(\\\"Confirm arg of -b\\\", cl.getOptionValue(\\\"b\\\").equals(\\\"toast\\\"));\\r\\n-    assertTrue(\\\"Confirm  1 extra arg: \\\" + cl.getArgList().size(), cl.getArgList().size() == 1);\\r\\n-    assertTrue(\\\"Confirm  value of extra arg: \\\" + cl.getArgList().get(0), cl.getArgList().get(0).equals(\\\"foobar\\\"));\\r\\n+    assertEquals(\\\"Confirm arg of -b\\\", \\\"toast\\\", cl.getOptionValue(\\\"b\\\"));\\r\\n+    assertEquals(\\\"Confirm  1 extra arg: \\\" + cl.getArgList().size(), 1, cl.getArgList().size());\\r\\n+    assertEquals(\\\"Confirm  value of extra arg: \\\" + cl.getArgList().get(0), \\\"foobar\\\", cl.getArgList().get(0));\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"@@ -1,13 +1,13 @@\\n @Test\\r\\n public void testMultiple() throws Exception {\\r\\n-    final String[] args = new String[] { \\\"-c\\\", \\\"foobar\\\", \\\"-b\\\", \\\"toast\\\" };\\r\\n+    final String[] args = { \\\"-c\\\", \\\"foobar\\\", \\\"-b\\\", \\\"toast\\\" };\\r\\n     CommandLine cl = parser.parse(options, args, true);\\r\\n     assertTrue(\\\"Confirm -c is set\\\", cl.hasOption(\\\"c\\\"));\\r\\n     assertTrue(\\\"Confirm  3 extra args: \\\" + cl.getArgList().size(), cl.getArgList().size() == 3);\\r\\n     cl = parser.parse(options, cl.getArgs());\\r\\n     assertTrue(\\\"Confirm -c is not set\\\", !cl.hasOption(\\\"c\\\"));\\r\\n     assertTrue(\\\"Confirm -b is set\\\", cl.hasOption(\\\"b\\\"));\\r\\n     assertTrue(\\\"Confirm arg of -b\\\", cl.getOptionValue(\\\"b\\\").equals(\\\"toast\\\"));\\r\\n     assertTrue(\\\"Confirm  1 extra arg: \\\" + cl.getArgList().size(), cl.getArgList().size() == 1);\\r\\n     assertTrue(\\\"Confirm  value of extra arg: \\\" + cl.getArgList().get(0), cl.getArgList().get(0).equals(\\\"foobar\\\"));\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,13 +1,13 @@\\n @Test\\r\\n public void testMultiple() throws Exception {\\r\\n-    String[] args = new String[] { \\\"-c\\\", \\\"foobar\\\", \\\"-b\\\", \\\"toast\\\" };\\r\\n+    final String[] args = new String[] { \\\"-c\\\", \\\"foobar\\\", \\\"-b\\\", \\\"toast\\\" };\\r\\n     CommandLine cl = parser.parse(options, args, true);\\r\\n     assertTrue(\\\"Confirm -c is set\\\", cl.hasOption(\\\"c\\\"));\\r\\n     assertTrue(\\\"Confirm  3 extra args: \\\" + cl.getArgList().size(), cl.getArgList().size() == 3);\\r\\n     cl = parser.parse(options, cl.getArgs());\\r\\n     assertTrue(\\\"Confirm -c is not set\\\", !cl.hasOption(\\\"c\\\"));\\r\\n     assertTrue(\\\"Confirm -b is set\\\", cl.hasOption(\\\"b\\\"));\\r\\n     assertTrue(\\\"Confirm arg of -b\\\", cl.getOptionValue(\\\"b\\\").equals(\\\"toast\\\"));\\r\\n     assertTrue(\\\"Confirm  1 extra arg: \\\" + cl.getArgList().size(), cl.getArgList().size() == 1);\\r\\n     assertTrue(\\\"Confirm  value of extra arg: \\\" + cl.getArgList().get(0), cl.getArgList().get(0).equals(\\\"foobar\\\"));\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"tn@apache.org","authorName":"Thomas Neidhart","commitYear":"2013","diff":"\"@@ -1,12 +1,13 @@\\n+@Test\\r\\n public void testMultiple() throws Exception {\\r\\n     String[] args = new String[] { \\\"-c\\\", \\\"foobar\\\", \\\"-b\\\", \\\"toast\\\" };\\r\\n     CommandLine cl = parser.parse(options, args, true);\\r\\n     assertTrue(\\\"Confirm -c is set\\\", cl.hasOption(\\\"c\\\"));\\r\\n     assertTrue(\\\"Confirm  3 extra args: \\\" + cl.getArgList().size(), cl.getArgList().size() == 3);\\r\\n     cl = parser.parse(options, cl.getArgs());\\r\\n     assertTrue(\\\"Confirm -c is not set\\\", !cl.hasOption(\\\"c\\\"));\\r\\n     assertTrue(\\\"Confirm -b is set\\\", cl.hasOption(\\\"b\\\"));\\r\\n     assertTrue(\\\"Confirm arg of -b\\\", cl.getOptionValue(\\\"b\\\").equals(\\\"toast\\\"));\\r\\n     assertTrue(\\\"Confirm  1 extra arg: \\\" + cl.getArgList().size(), cl.getArgList().size() == 1);\\r\\n     assertTrue(\\\"Confirm  value of extra arg: \\\" + cl.getArgList().get(0), cl.getArgList().get(0).equals(\\\"foobar\\\"));\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2008","diff":"\"@@ -1,12 +1,12 @@\\n public void testMultiple() throws Exception {\\r\\n-    String[] args = new String[] { \\\"-c\\\", \\\"foobar\\\", \\\"-btoast\\\" };\\r\\n+    String[] args = new String[] { \\\"-c\\\", \\\"foobar\\\", \\\"-b\\\", \\\"toast\\\" };\\r\\n     CommandLine cl = parser.parse(options, args, true);\\r\\n     assertTrue(\\\"Confirm -c is set\\\", cl.hasOption(\\\"c\\\"));\\r\\n-    assertTrue(\\\"Confirm  2 extra args: \\\" + cl.getArgList().size(), cl.getArgList().size() == 2);\\r\\n+    assertTrue(\\\"Confirm  3 extra args: \\\" + cl.getArgList().size(), cl.getArgList().size() == 3);\\r\\n     cl = parser.parse(options, cl.getArgs());\\r\\n     assertTrue(\\\"Confirm -c is not set\\\", !cl.hasOption(\\\"c\\\"));\\r\\n     assertTrue(\\\"Confirm -b is set\\\", cl.hasOption(\\\"b\\\"));\\r\\n     assertTrue(\\\"Confirm arg of -b\\\", cl.getOptionValue(\\\"b\\\").equals(\\\"toast\\\"));\\r\\n     assertTrue(\\\"Confirm  1 extra arg: \\\" + cl.getArgList().size(), cl.getArgList().size() == 1);\\r\\n     assertTrue(\\\"Confirm  value of extra arg: \\\" + cl.getArgList().get(0), cl.getArgList().get(0).equals(\\\"foobar\\\"));\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2008","diff":"\"@@ -1,12 +1,12 @@\\n public void testMultiple() throws Exception {\\r\\n     String[] args = new String[] { \\\"-c\\\", \\\"foobar\\\", \\\"-btoast\\\" };\\r\\n-    CommandLine cl = _parser.parse(_options, args, true);\\r\\n+    CommandLine cl = parser.parse(options, args, true);\\r\\n     assertTrue(\\\"Confirm -c is set\\\", cl.hasOption(\\\"c\\\"));\\r\\n     assertTrue(\\\"Confirm  2 extra args: \\\" + cl.getArgList().size(), cl.getArgList().size() == 2);\\r\\n-    cl = _parser.parse(_options, cl.getArgs());\\r\\n+    cl = parser.parse(options, cl.getArgs());\\r\\n     assertTrue(\\\"Confirm -c is not set\\\", !cl.hasOption(\\\"c\\\"));\\r\\n     assertTrue(\\\"Confirm -b is set\\\", cl.hasOption(\\\"b\\\"));\\r\\n     assertTrue(\\\"Confirm arg of -b\\\", cl.getOptionValue(\\\"b\\\").equals(\\\"toast\\\"));\\r\\n     assertTrue(\\\"Confirm  1 extra arg: \\\" + cl.getArgList().size(), cl.getArgList().size() == 1);\\r\\n     assertTrue(\\\"Confirm  value of extra arg: \\\" + cl.getArgList().get(0), cl.getArgList().get(0).equals(\\\"foobar\\\"));\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2008","diff":"\"@@ -1,16 +1,12 @@\\n-public void testMultiple() {\\r\\n+public void testMultiple() throws Exception {\\r\\n     String[] args = new String[] { \\\"-c\\\", \\\"foobar\\\", \\\"-btoast\\\" };\\r\\n-    try {\\r\\n-        CommandLine cl = _parser.parse(_options, args, true);\\r\\n-        assertTrue(\\\"Confirm -c is set\\\", cl.hasOption(\\\"c\\\"));\\r\\n-        assertTrue(\\\"Confirm  2 extra args: \\\" + cl.getArgList().size(), cl.getArgList().size() == 2);\\r\\n-        cl = _parser.parse(_options, cl.getArgs());\\r\\n-        assertTrue(\\\"Confirm -c is not set\\\", !cl.hasOption(\\\"c\\\"));\\r\\n-        assertTrue(\\\"Confirm -b is set\\\", cl.hasOption(\\\"b\\\"));\\r\\n-        assertTrue(\\\"Confirm arg of -b\\\", cl.getOptionValue(\\\"b\\\").equals(\\\"toast\\\"));\\r\\n-        assertTrue(\\\"Confirm  1 extra arg: \\\" + cl.getArgList().size(), cl.getArgList().size() == 1);\\r\\n-        assertTrue(\\\"Confirm  value of extra arg: \\\" + cl.getArgList().get(0), cl.getArgList().get(0).equals(\\\"foobar\\\"));\\r\\n-    } catch (ParseException e) {\\r\\n-        fail(e.toString());\\r\\n-    }\\r\\n+    CommandLine cl = _parser.parse(_options, args, true);\\r\\n+    assertTrue(\\\"Confirm -c is set\\\", cl.hasOption(\\\"c\\\"));\\r\\n+    assertTrue(\\\"Confirm  2 extra args: \\\" + cl.getArgList().size(), cl.getArgList().size() == 2);\\r\\n+    cl = _parser.parse(_options, cl.getArgs());\\r\\n+    assertTrue(\\\"Confirm -c is not set\\\", !cl.hasOption(\\\"c\\\"));\\r\\n+    assertTrue(\\\"Confirm -b is set\\\", cl.hasOption(\\\"b\\\"));\\r\\n+    assertTrue(\\\"Confirm arg of -b\\\", cl.getOptionValue(\\\"b\\\").equals(\\\"toast\\\"));\\r\\n+    assertTrue(\\\"Confirm  1 extra arg: \\\" + cl.getArgList().size(), cl.getArgList().size() == 1);\\r\\n+    assertTrue(\\\"Confirm  value of extra arg: \\\" + cl.getArgList().get(0), cl.getArgList().get(0).equals(\\\"foobar\\\"));\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -1,16 +1,16 @@\\n public void testMultiple() {\\r\\n     String[] args = new String[] { \\\"-c\\\", \\\"foobar\\\", \\\"-btoast\\\" };\\r\\n     try {\\r\\n-        CommandLine cl = _options.parse(args, true);\\r\\n+        CommandLine cl = _parser.parse(_options, args, true);\\r\\n         assertTrue(\\\"Confirm -c is set\\\", cl.hasOption(\\\"c\\\"));\\r\\n         assertTrue(\\\"Confirm  2 extra args: \\\" + cl.getArgList().size(), cl.getArgList().size() == 2);\\r\\n-        cl = _options.parse(cl.getArgList());\\r\\n+        cl = _parser.parse(_options, cl.getArgs());\\r\\n         assertTrue(\\\"Confirm -c is not set\\\", !cl.hasOption(\\\"c\\\"));\\r\\n         assertTrue(\\\"Confirm -b is set\\\", cl.hasOption(\\\"b\\\"));\\r\\n         assertTrue(\\\"Confirm arg of -b\\\", cl.getOptionValue(\\\"b\\\").equals(\\\"toast\\\"));\\r\\n         assertTrue(\\\"Confirm  1 extra arg: \\\" + cl.getArgList().size(), cl.getArgList().size() == 1);\\r\\n         assertTrue(\\\"Confirm  value of extra arg: \\\" + cl.getArgList().get(0), cl.getArgList().get(0).equals(\\\"foobar\\\"));\\r\\n     } catch (ParseException e) {\\r\\n         fail(e.toString());\\r\\n     }\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -1,16 +1,16 @@\\n public void testMultiple() {\\r\\n     String[] args = new String[] { \\\"-c\\\", \\\"foobar\\\", \\\"-btoast\\\" };\\r\\n     try {\\r\\n         CommandLine cl = _options.parse(args, true);\\r\\n-        assertTrue(\\\"Confirm -c is set\\\", cl.hasOption('c'));\\r\\n+        assertTrue(\\\"Confirm -c is set\\\", cl.hasOption(\\\"c\\\"));\\r\\n         assertTrue(\\\"Confirm  2 extra args: \\\" + cl.getArgList().size(), cl.getArgList().size() == 2);\\r\\n         cl = _options.parse(cl.getArgList());\\r\\n-        assertTrue(\\\"Confirm -c is not set\\\", !cl.hasOption('c'));\\r\\n-        assertTrue(\\\"Confirm -b is set\\\", cl.hasOption('b'));\\r\\n-        assertTrue(\\\"Confirm arg of -b\\\", cl.getOptionValue('b').equals(\\\"toast\\\"));\\r\\n+        assertTrue(\\\"Confirm -c is not set\\\", !cl.hasOption(\\\"c\\\"));\\r\\n+        assertTrue(\\\"Confirm -b is set\\\", cl.hasOption(\\\"b\\\"));\\r\\n+        assertTrue(\\\"Confirm arg of -b\\\", cl.getOptionValue(\\\"b\\\").equals(\\\"toast\\\"));\\r\\n         assertTrue(\\\"Confirm  1 extra arg: \\\" + cl.getArgList().size(), cl.getArgList().size() == 1);\\r\\n         assertTrue(\\\"Confirm  value of extra arg: \\\" + cl.getArgList().get(0), cl.getArgList().get(0).equals(\\\"foobar\\\"));\\r\\n     } catch (ParseException e) {\\r\\n         fail(e.toString());\\r\\n     }\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jstrachan@apache.org","authorName":"James Strachan","commitYear":"2002","diff":"\"@@ -0,0 +1,16 @@\\n+public void testMultiple() {\\r\\n+    String[] args = new String[] { \\\"-c\\\", \\\"foobar\\\", \\\"-btoast\\\" };\\r\\n+    try {\\r\\n+        CommandLine cl = _options.parse(args, true);\\r\\n+        assertTrue(\\\"Confirm -c is set\\\", cl.hasOption('c'));\\r\\n+        assertTrue(\\\"Confirm  2 extra args: \\\" + cl.getArgList().size(), cl.getArgList().size() == 2);\\r\\n+        cl = _options.parse(cl.getArgList());\\r\\n+        assertTrue(\\\"Confirm -c is not set\\\", !cl.hasOption('c'));\\r\\n+        assertTrue(\\\"Confirm -b is set\\\", cl.hasOption('b'));\\r\\n+        assertTrue(\\\"Confirm arg of -b\\\", cl.getOptionValue('b').equals(\\\"toast\\\"));\\r\\n+        assertTrue(\\\"Confirm  1 extra arg: \\\" + cl.getArgList().size(), cl.getArgList().size() == 1);\\r\\n+        assertTrue(\\\"Confirm  value of extra arg: \\\" + cl.getArgList().get(0), cl.getArgList().get(0).equals(\\\"foobar\\\"));\\r\\n+    } catch (ParseException e) {\\r\\n+        fail(e.toString());\\r\\n+    }\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\test\java\org\apache\commons\cli\AbstractParserTestCase.java	testMultipleWithLong	org.apache.commons.cli.AbstractParserTestCase.testMultipleWithLong()	448	462	1	[{"authorEmail":"arturobernalg@gmail.com","authorName":"Arturo Bernal","commitYear":"2021","diff":"\"@@ -1,13 +1,13 @@\\n @Test\\r\\n public void testMultipleWithLong() throws Exception {\\r\\n     final String[] args = { \\\"--copt\\\", \\\"foobar\\\", \\\"--bfile\\\", \\\"toast\\\" };\\r\\n     CommandLine cl = parser.parse(options, args, true);\\r\\n     assertTrue(\\\"Confirm -c is set\\\", cl.hasOption(\\\"c\\\"));\\r\\n-    assertTrue(\\\"Confirm  3 extra args: \\\" + cl.getArgList().size(), cl.getArgList().size() == 3);\\r\\n+    assertEquals(\\\"Confirm  3 extra args: \\\" + cl.getArgList().size(), 3, cl.getArgList().size());\\r\\n     cl = parser.parse(options, cl.getArgs());\\r\\n-    assertTrue(\\\"Confirm -c is not set\\\", !cl.hasOption(\\\"c\\\"));\\r\\n+    assertFalse(\\\"Confirm -c is not set\\\", cl.hasOption(\\\"c\\\"));\\r\\n     assertTrue(\\\"Confirm -b is set\\\", cl.hasOption(\\\"b\\\"));\\r\\n-    assertTrue(\\\"Confirm arg of -b\\\", cl.getOptionValue(\\\"b\\\").equals(\\\"toast\\\"));\\r\\n-    assertTrue(\\\"Confirm  1 extra arg: \\\" + cl.getArgList().size(), cl.getArgList().size() == 1);\\r\\n-    assertTrue(\\\"Confirm  value of extra arg: \\\" + cl.getArgList().get(0), cl.getArgList().get(0).equals(\\\"foobar\\\"));\\r\\n+    assertEquals(\\\"Confirm arg of -b\\\", \\\"toast\\\", cl.getOptionValue(\\\"b\\\"));\\r\\n+    assertEquals(\\\"Confirm  1 extra arg: \\\" + cl.getArgList().size(), 1, cl.getArgList().size());\\r\\n+    assertEquals(\\\"Confirm  value of extra arg: \\\" + cl.getArgList().get(0), \\\"foobar\\\", cl.getArgList().get(0));\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"@@ -1,13 +1,13 @@\\n @Test\\r\\n public void testMultipleWithLong() throws Exception {\\r\\n-    final String[] args = new String[] { \\\"--copt\\\", \\\"foobar\\\", \\\"--bfile\\\", \\\"toast\\\" };\\r\\n+    final String[] args = { \\\"--copt\\\", \\\"foobar\\\", \\\"--bfile\\\", \\\"toast\\\" };\\r\\n     CommandLine cl = parser.parse(options, args, true);\\r\\n     assertTrue(\\\"Confirm -c is set\\\", cl.hasOption(\\\"c\\\"));\\r\\n     assertTrue(\\\"Confirm  3 extra args: \\\" + cl.getArgList().size(), cl.getArgList().size() == 3);\\r\\n     cl = parser.parse(options, cl.getArgs());\\r\\n     assertTrue(\\\"Confirm -c is not set\\\", !cl.hasOption(\\\"c\\\"));\\r\\n     assertTrue(\\\"Confirm -b is set\\\", cl.hasOption(\\\"b\\\"));\\r\\n     assertTrue(\\\"Confirm arg of -b\\\", cl.getOptionValue(\\\"b\\\").equals(\\\"toast\\\"));\\r\\n     assertTrue(\\\"Confirm  1 extra arg: \\\" + cl.getArgList().size(), cl.getArgList().size() == 1);\\r\\n     assertTrue(\\\"Confirm  value of extra arg: \\\" + cl.getArgList().get(0), cl.getArgList().get(0).equals(\\\"foobar\\\"));\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,13 +1,13 @@\\n @Test\\r\\n public void testMultipleWithLong() throws Exception {\\r\\n-    String[] args = new String[] { \\\"--copt\\\", \\\"foobar\\\", \\\"--bfile\\\", \\\"toast\\\" };\\r\\n+    final String[] args = new String[] { \\\"--copt\\\", \\\"foobar\\\", \\\"--bfile\\\", \\\"toast\\\" };\\r\\n     CommandLine cl = parser.parse(options, args, true);\\r\\n     assertTrue(\\\"Confirm -c is set\\\", cl.hasOption(\\\"c\\\"));\\r\\n     assertTrue(\\\"Confirm  3 extra args: \\\" + cl.getArgList().size(), cl.getArgList().size() == 3);\\r\\n     cl = parser.parse(options, cl.getArgs());\\r\\n     assertTrue(\\\"Confirm -c is not set\\\", !cl.hasOption(\\\"c\\\"));\\r\\n     assertTrue(\\\"Confirm -b is set\\\", cl.hasOption(\\\"b\\\"));\\r\\n     assertTrue(\\\"Confirm arg of -b\\\", cl.getOptionValue(\\\"b\\\").equals(\\\"toast\\\"));\\r\\n     assertTrue(\\\"Confirm  1 extra arg: \\\" + cl.getArgList().size(), cl.getArgList().size() == 1);\\r\\n     assertTrue(\\\"Confirm  value of extra arg: \\\" + cl.getArgList().get(0), cl.getArgList().get(0).equals(\\\"foobar\\\"));\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"tn@apache.org","authorName":"Thomas Neidhart","commitYear":"2013","diff":"\"@@ -1,12 +1,13 @@\\n+@Test\\r\\n public void testMultipleWithLong() throws Exception {\\r\\n     String[] args = new String[] { \\\"--copt\\\", \\\"foobar\\\", \\\"--bfile\\\", \\\"toast\\\" };\\r\\n     CommandLine cl = parser.parse(options, args, true);\\r\\n     assertTrue(\\\"Confirm -c is set\\\", cl.hasOption(\\\"c\\\"));\\r\\n     assertTrue(\\\"Confirm  3 extra args: \\\" + cl.getArgList().size(), cl.getArgList().size() == 3);\\r\\n     cl = parser.parse(options, cl.getArgs());\\r\\n     assertTrue(\\\"Confirm -c is not set\\\", !cl.hasOption(\\\"c\\\"));\\r\\n     assertTrue(\\\"Confirm -b is set\\\", cl.hasOption(\\\"b\\\"));\\r\\n     assertTrue(\\\"Confirm arg of -b\\\", cl.getOptionValue(\\\"b\\\").equals(\\\"toast\\\"));\\r\\n     assertTrue(\\\"Confirm  1 extra arg: \\\" + cl.getArgList().size(), cl.getArgList().size() == 1);\\r\\n     assertTrue(\\\"Confirm  value of extra arg: \\\" + cl.getArgList().get(0), cl.getArgList().get(0).equals(\\\"foobar\\\"));\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2008","diff":"\"\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2008","diff":"\"\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2008","diff":"\"@@ -1,12 +1,12 @@\\n public void testMultipleWithLong() throws Exception {\\r\\n     String[] args = new String[] { \\\"--copt\\\", \\\"foobar\\\", \\\"--bfile\\\", \\\"toast\\\" };\\r\\n-    CommandLine cl = _parser.parse(_options, args, true);\\r\\n+    CommandLine cl = parser.parse(options, args, true);\\r\\n     assertTrue(\\\"Confirm -c is set\\\", cl.hasOption(\\\"c\\\"));\\r\\n     assertTrue(\\\"Confirm  3 extra args: \\\" + cl.getArgList().size(), cl.getArgList().size() == 3);\\r\\n-    cl = _parser.parse(_options, cl.getArgs());\\r\\n+    cl = parser.parse(options, cl.getArgs());\\r\\n     assertTrue(\\\"Confirm -c is not set\\\", !cl.hasOption(\\\"c\\\"));\\r\\n     assertTrue(\\\"Confirm -b is set\\\", cl.hasOption(\\\"b\\\"));\\r\\n     assertTrue(\\\"Confirm arg of -b\\\", cl.getOptionValue(\\\"b\\\").equals(\\\"toast\\\"));\\r\\n     assertTrue(\\\"Confirm  1 extra arg: \\\" + cl.getArgList().size(), cl.getArgList().size() == 1);\\r\\n     assertTrue(\\\"Confirm  value of extra arg: \\\" + cl.getArgList().get(0), cl.getArgList().get(0).equals(\\\"foobar\\\"));\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2008","diff":"\"@@ -1,16 +1,12 @@\\n-public void testMultipleWithLong() {\\r\\n+public void testMultipleWithLong() throws Exception {\\r\\n     String[] args = new String[] { \\\"--copt\\\", \\\"foobar\\\", \\\"--bfile\\\", \\\"toast\\\" };\\r\\n-    try {\\r\\n-        CommandLine cl = _parser.parse(_options, args, true);\\r\\n-        assertTrue(\\\"Confirm -c is set\\\", cl.hasOption(\\\"c\\\"));\\r\\n-        assertTrue(\\\"Confirm  3 extra args: \\\" + cl.getArgList().size(), cl.getArgList().size() == 3);\\r\\n-        cl = _parser.parse(_options, cl.getArgs());\\r\\n-        assertTrue(\\\"Confirm -c is not set\\\", !cl.hasOption(\\\"c\\\"));\\r\\n-        assertTrue(\\\"Confirm -b is set\\\", cl.hasOption(\\\"b\\\"));\\r\\n-        assertTrue(\\\"Confirm arg of -b\\\", cl.getOptionValue(\\\"b\\\").equals(\\\"toast\\\"));\\r\\n-        assertTrue(\\\"Confirm  1 extra arg: \\\" + cl.getArgList().size(), cl.getArgList().size() == 1);\\r\\n-        assertTrue(\\\"Confirm  value of extra arg: \\\" + cl.getArgList().get(0), cl.getArgList().get(0).equals(\\\"foobar\\\"));\\r\\n-    } catch (ParseException e) {\\r\\n-        fail(e.toString());\\r\\n-    }\\r\\n+    CommandLine cl = _parser.parse(_options, args, true);\\r\\n+    assertTrue(\\\"Confirm -c is set\\\", cl.hasOption(\\\"c\\\"));\\r\\n+    assertTrue(\\\"Confirm  3 extra args: \\\" + cl.getArgList().size(), cl.getArgList().size() == 3);\\r\\n+    cl = _parser.parse(_options, cl.getArgs());\\r\\n+    assertTrue(\\\"Confirm -c is not set\\\", !cl.hasOption(\\\"c\\\"));\\r\\n+    assertTrue(\\\"Confirm -b is set\\\", cl.hasOption(\\\"b\\\"));\\r\\n+    assertTrue(\\\"Confirm arg of -b\\\", cl.getOptionValue(\\\"b\\\").equals(\\\"toast\\\"));\\r\\n+    assertTrue(\\\"Confirm  1 extra arg: \\\" + cl.getArgList().size(), cl.getArgList().size() == 1);\\r\\n+    assertTrue(\\\"Confirm  value of extra arg: \\\" + cl.getArgList().get(0), cl.getArgList().get(0).equals(\\\"foobar\\\"));\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -1,16 +1,16 @@\\n public void testMultipleWithLong() {\\r\\n     String[] args = new String[] { \\\"--copt\\\", \\\"foobar\\\", \\\"--bfile\\\", \\\"toast\\\" };\\r\\n     try {\\r\\n-        CommandLine cl = _options.parse(args, true);\\r\\n+        CommandLine cl = _parser.parse(_options, args, true);\\r\\n         assertTrue(\\\"Confirm -c is set\\\", cl.hasOption(\\\"c\\\"));\\r\\n         assertTrue(\\\"Confirm  3 extra args: \\\" + cl.getArgList().size(), cl.getArgList().size() == 3);\\r\\n-        cl = _options.parse(cl.getArgList());\\r\\n+        cl = _parser.parse(_options, cl.getArgs());\\r\\n         assertTrue(\\\"Confirm -c is not set\\\", !cl.hasOption(\\\"c\\\"));\\r\\n         assertTrue(\\\"Confirm -b is set\\\", cl.hasOption(\\\"b\\\"));\\r\\n         assertTrue(\\\"Confirm arg of -b\\\", cl.getOptionValue(\\\"b\\\").equals(\\\"toast\\\"));\\r\\n         assertTrue(\\\"Confirm  1 extra arg: \\\" + cl.getArgList().size(), cl.getArgList().size() == 1);\\r\\n         assertTrue(\\\"Confirm  value of extra arg: \\\" + cl.getArgList().get(0), cl.getArgList().get(0).equals(\\\"foobar\\\"));\\r\\n     } catch (ParseException e) {\\r\\n         fail(e.toString());\\r\\n     }\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -1,16 +1,16 @@\\n public void testMultipleWithLong() {\\r\\n     String[] args = new String[] { \\\"--copt\\\", \\\"foobar\\\", \\\"--bfile\\\", \\\"toast\\\" };\\r\\n     try {\\r\\n         CommandLine cl = _options.parse(args, true);\\r\\n-        assertTrue(\\\"Confirm -c is set\\\", cl.hasOption('c'));\\r\\n+        assertTrue(\\\"Confirm -c is set\\\", cl.hasOption(\\\"c\\\"));\\r\\n         assertTrue(\\\"Confirm  3 extra args: \\\" + cl.getArgList().size(), cl.getArgList().size() == 3);\\r\\n         cl = _options.parse(cl.getArgList());\\r\\n-        assertTrue(\\\"Confirm -c is not set\\\", !cl.hasOption('c'));\\r\\n-        assertTrue(\\\"Confirm -b is set\\\", cl.hasOption('b'));\\r\\n-        assertTrue(\\\"Confirm arg of -b\\\", cl.getOptionValue('b').equals(\\\"toast\\\"));\\r\\n+        assertTrue(\\\"Confirm -c is not set\\\", !cl.hasOption(\\\"c\\\"));\\r\\n+        assertTrue(\\\"Confirm -b is set\\\", cl.hasOption(\\\"b\\\"));\\r\\n+        assertTrue(\\\"Confirm arg of -b\\\", cl.getOptionValue(\\\"b\\\").equals(\\\"toast\\\"));\\r\\n         assertTrue(\\\"Confirm  1 extra arg: \\\" + cl.getArgList().size(), cl.getArgList().size() == 1);\\r\\n         assertTrue(\\\"Confirm  value of extra arg: \\\" + cl.getArgList().get(0), cl.getArgList().get(0).equals(\\\"foobar\\\"));\\r\\n     } catch (ParseException e) {\\r\\n         fail(e.toString());\\r\\n     }\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jstrachan@apache.org","authorName":"James Strachan","commitYear":"2002","diff":"\"@@ -0,0 +1,16 @@\\n+public void testMultipleWithLong() {\\r\\n+    String[] args = new String[] { \\\"--copt\\\", \\\"foobar\\\", \\\"--bfile\\\", \\\"toast\\\" };\\r\\n+    try {\\r\\n+        CommandLine cl = _options.parse(args, true);\\r\\n+        assertTrue(\\\"Confirm -c is set\\\", cl.hasOption('c'));\\r\\n+        assertTrue(\\\"Confirm  3 extra args: \\\" + cl.getArgList().size(), cl.getArgList().size() == 3);\\r\\n+        cl = _options.parse(cl.getArgList());\\r\\n+        assertTrue(\\\"Confirm -c is not set\\\", !cl.hasOption('c'));\\r\\n+        assertTrue(\\\"Confirm -b is set\\\", cl.hasOption('b'));\\r\\n+        assertTrue(\\\"Confirm arg of -b\\\", cl.getOptionValue('b').equals(\\\"toast\\\"));\\r\\n+        assertTrue(\\\"Confirm  1 extra arg: \\\" + cl.getArgList().size(), cl.getArgList().size() == 1);\\r\\n+        assertTrue(\\\"Confirm  value of extra arg: \\\" + cl.getArgList().get(0), cl.getArgList().get(0).equals(\\\"foobar\\\"));\\r\\n+    } catch (ParseException e) {\\r\\n+        fail(e.toString());\\r\\n+    }\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\test\java\org\apache\commons\cli\AbstractParserTestCase.java	testNegativeArgument	org.apache.commons.cli.AbstractParserTestCase.testNegativeArgument()	465	470	1	[{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"@@ -1,6 +1,6 @@\\n @Test\\r\\n public void testNegativeArgument() throws Exception {\\r\\n-    final String[] args = new String[] { \\\"-b\\\", \\\"-1\\\" };\\r\\n+    final String[] args = { \\\"-b\\\", \\\"-1\\\" };\\r\\n     final CommandLine cl = parser.parse(options, args);\\r\\n     assertEquals(\\\"-1\\\", cl.getOptionValue(\\\"b\\\"));\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,6 +1,6 @@\\n @Test\\r\\n public void testNegativeArgument() throws Exception {\\r\\n-    String[] args = new String[] { \\\"-b\\\", \\\"-1\\\" };\\r\\n-    CommandLine cl = parser.parse(options, args);\\r\\n+    final String[] args = new String[] { \\\"-b\\\", \\\"-1\\\" };\\r\\n+    final CommandLine cl = parser.parse(options, args);\\r\\n     assertEquals(\\\"-1\\\", cl.getOptionValue(\\\"b\\\"));\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"tn@apache.org","authorName":"Thomas Neidhart","commitYear":"2013","diff":"\"@@ -1,5 +1,6 @@\\n+@Test\\r\\n public void testNegativeArgument() throws Exception {\\r\\n     String[] args = new String[] { \\\"-b\\\", \\\"-1\\\" };\\r\\n     CommandLine cl = parser.parse(options, args);\\r\\n     assertEquals(\\\"-1\\\", cl.getOptionValue(\\\"b\\\"));\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2008","diff":"\"@@ -1,8 +1,5 @@\\n public void testNegativeArgument() throws Exception {\\r\\n-    String[] args = new String[] { \\\"-a\\\", \\\"-1\\\" };\\r\\n-    Options options = new Options();\\r\\n-    options.addOption(OptionBuilder.hasArg().create(\\\"a\\\"));\\r\\n-    Parser parser = new GnuParser();\\r\\n+    String[] args = new String[] { \\\"-b\\\", \\\"-1\\\" };\\r\\n     CommandLine cl = parser.parse(options, args);\\r\\n-    assertEquals(\\\"-1\\\", cl.getOptionValue(\\\"a\\\"));\\r\\n+    assertEquals(\\\"-1\\\", cl.getOptionValue(\\\"b\\\"));\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2008","diff":"\"@@ -0,0 +1,8 @@\\n+public void testNegativeArgument() throws Exception {\\r\\n+    String[] args = new String[] { \\\"-a\\\", \\\"-1\\\" };\\r\\n+    Options options = new Options();\\r\\n+    options.addOption(OptionBuilder.hasArg().create(\\\"a\\\"));\\r\\n+    Parser parser = new GnuParser();\\r\\n+    CommandLine cl = parser.parse(options, args);\\r\\n+    assertEquals(\\\"-1\\\", cl.getOptionValue(\\\"a\\\"));\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\test\java\org\apache\commons\cli\AbstractParserTestCase.java	testNegativeOption	org.apache.commons.cli.AbstractParserTestCase.testNegativeOption()	473	480	1	[{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"@@ -1,7 +1,7 @@\\n @Test\\r\\n public void testNegativeOption() throws Exception {\\r\\n-    final String[] args = new String[] { \\\"-b\\\", \\\"-1\\\" };\\r\\n+    final String[] args = { \\\"-b\\\", \\\"-1\\\" };\\r\\n     options.addOption(\\\"1\\\", false, null);\\r\\n     final CommandLine cl = parser.parse(options, args);\\r\\n     assertEquals(\\\"-1\\\", cl.getOptionValue(\\\"b\\\"));\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2019","diff":"\"\""},{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,7 +1,7 @@\\n @Test\\r\\n public void testNegativeOption() throws Exception {\\r\\n-    String[] args = new String[] { \\\"-b\\\", \\\"-1\\\" };\\r\\n+    final String[] args = new String[] { \\\"-b\\\", \\\"-1\\\" };\\r\\n     options.addOption(\\\"1\\\", false, null);\\r\\n-    CommandLine cl = parser.parse(options, args);\\r\\n+    final CommandLine cl = parser.parse(options, args);\\r\\n     assertEquals(\\\"-1\\\", cl.getOptionValue(\\\"b\\\"));\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"tn@apache.org","authorName":"Thomas Neidhart","commitYear":"2013","diff":"\"@@ -1,6 +1,7 @@\\n+@Test\\r\\n public void testNegativeOption() throws Exception {\\r\\n     String[] args = new String[] { \\\"-b\\\", \\\"-1\\\" };\\r\\n     options.addOption(\\\"1\\\", false, null);\\r\\n     CommandLine cl = parser.parse(options, args);\\r\\n     assertEquals(\\\"-1\\\", cl.getOptionValue(\\\"b\\\"));\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2009","diff":"\"@@ -0,0 +1,6 @@\\n+public void testNegativeOption() throws Exception {\\r\\n+    String[] args = new String[] { \\\"-b\\\", \\\"-1\\\" };\\r\\n+    options.addOption(\\\"1\\\", false, null);\\r\\n+    CommandLine cl = parser.parse(options, args);\\r\\n+    assertEquals(\\\"-1\\\", cl.getOptionValue(\\\"b\\\"));\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\test\java\org\apache\commons\cli\AbstractParserTestCase.java	testOptionAndRequiredOption	org.apache.commons.cli.AbstractParserTestCase.testOptionAndRequiredOption()	483	496	1	[{"authorEmail":"arturobernalg@gmail.com","authorName":"Arturo Bernal","commitYear":"2021","diff":"\"@@ -1,12 +1,12 @@\\n @Test\\r\\n public void testOptionAndRequiredOption() throws Exception {\\r\\n     final String[] args = { \\\"-a\\\", \\\"-b\\\", \\\"file\\\" };\\r\\n     final Options options = new Options();\\r\\n     options.addOption(\\\"a\\\", \\\"enable-a\\\", false, null);\\r\\n     options.addOption(OptionBuilder.withLongOpt(\\\"bfile\\\").hasArg().isRequired().create('b'));\\r\\n     final CommandLine cl = parser.parse(options, args);\\r\\n     assertTrue(\\\"Confirm -a is set\\\", cl.hasOption(\\\"a\\\"));\\r\\n     assertTrue(\\\"Confirm -b is set\\\", cl.hasOption(\\\"b\\\"));\\r\\n-    assertTrue(\\\"Confirm arg of -b\\\", cl.getOptionValue(\\\"b\\\").equals(\\\"file\\\"));\\r\\n+    assertEquals(\\\"Confirm arg of -b\\\", \\\"file\\\", cl.getOptionValue(\\\"b\\\"));\\r\\n     assertTrue(\\\"Confirm NO of extra args\\\", cl.getArgList().isEmpty());\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"@@ -1,12 +1,12 @@\\n @Test\\r\\n public void testOptionAndRequiredOption() throws Exception {\\r\\n-    final String[] args = new String[] { \\\"-a\\\", \\\"-b\\\", \\\"file\\\" };\\r\\n+    final String[] args = { \\\"-a\\\", \\\"-b\\\", \\\"file\\\" };\\r\\n     final Options options = new Options();\\r\\n     options.addOption(\\\"a\\\", \\\"enable-a\\\", false, null);\\r\\n     options.addOption(OptionBuilder.withLongOpt(\\\"bfile\\\").hasArg().isRequired().create('b'));\\r\\n     final CommandLine cl = parser.parse(options, args);\\r\\n     assertTrue(\\\"Confirm -a is set\\\", cl.hasOption(\\\"a\\\"));\\r\\n     assertTrue(\\\"Confirm -b is set\\\", cl.hasOption(\\\"b\\\"));\\r\\n     assertTrue(\\\"Confirm arg of -b\\\", cl.getOptionValue(\\\"b\\\").equals(\\\"file\\\"));\\r\\n     assertTrue(\\\"Confirm NO of extra args\\\", cl.getArgList().isEmpty());\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"@@ -1,12 +1,12 @@\\n @Test\\r\\n public void testOptionAndRequiredOption() throws Exception {\\r\\n     final String[] args = new String[] { \\\"-a\\\", \\\"-b\\\", \\\"file\\\" };\\r\\n     final Options options = new Options();\\r\\n     options.addOption(\\\"a\\\", \\\"enable-a\\\", false, null);\\r\\n     options.addOption(OptionBuilder.withLongOpt(\\\"bfile\\\").hasArg().isRequired().create('b'));\\r\\n     final CommandLine cl = parser.parse(options, args);\\r\\n     assertTrue(\\\"Confirm -a is set\\\", cl.hasOption(\\\"a\\\"));\\r\\n     assertTrue(\\\"Confirm -b is set\\\", cl.hasOption(\\\"b\\\"));\\r\\n     assertTrue(\\\"Confirm arg of -b\\\", cl.getOptionValue(\\\"b\\\").equals(\\\"file\\\"));\\r\\n-    assertTrue(\\\"Confirm NO of extra args\\\", cl.getArgList().size() == 0);\\r\\n+    assertTrue(\\\"Confirm NO of extra args\\\", cl.getArgList().isEmpty());\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2019","diff":"\"\""},{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,12 +1,12 @@\\n @Test\\r\\n public void testOptionAndRequiredOption() throws Exception {\\r\\n-    String[] args = new String[] { \\\"-a\\\", \\\"-b\\\", \\\"file\\\" };\\r\\n-    Options options = new Options();\\r\\n+    final String[] args = new String[] { \\\"-a\\\", \\\"-b\\\", \\\"file\\\" };\\r\\n+    final Options options = new Options();\\r\\n     options.addOption(\\\"a\\\", \\\"enable-a\\\", false, null);\\r\\n     options.addOption(OptionBuilder.withLongOpt(\\\"bfile\\\").hasArg().isRequired().create('b'));\\r\\n-    CommandLine cl = parser.parse(options, args);\\r\\n+    final CommandLine cl = parser.parse(options, args);\\r\\n     assertTrue(\\\"Confirm -a is set\\\", cl.hasOption(\\\"a\\\"));\\r\\n     assertTrue(\\\"Confirm -b is set\\\", cl.hasOption(\\\"b\\\"));\\r\\n     assertTrue(\\\"Confirm arg of -b\\\", cl.getOptionValue(\\\"b\\\").equals(\\\"file\\\"));\\r\\n     assertTrue(\\\"Confirm NO of extra args\\\", cl.getArgList().size() == 0);\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"tn@apache.org","authorName":"Thomas Neidhart","commitYear":"2013","diff":"\"@@ -1,11 +1,12 @@\\n+@Test\\r\\n public void testOptionAndRequiredOption() throws Exception {\\r\\n     String[] args = new String[] { \\\"-a\\\", \\\"-b\\\", \\\"file\\\" };\\r\\n     Options options = new Options();\\r\\n     options.addOption(\\\"a\\\", \\\"enable-a\\\", false, null);\\r\\n     options.addOption(OptionBuilder.withLongOpt(\\\"bfile\\\").hasArg().isRequired().create('b'));\\r\\n     CommandLine cl = parser.parse(options, args);\\r\\n     assertTrue(\\\"Confirm -a is set\\\", cl.hasOption(\\\"a\\\"));\\r\\n     assertTrue(\\\"Confirm -b is set\\\", cl.hasOption(\\\"b\\\"));\\r\\n     assertTrue(\\\"Confirm arg of -b\\\", cl.getOptionValue(\\\"b\\\").equals(\\\"file\\\"));\\r\\n     assertTrue(\\\"Confirm NO of extra args\\\", cl.getArgList().size() == 0);\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2009","diff":"\"@@ -1,8 +1,11 @@\\n public void testOptionAndRequiredOption() throws Exception {\\r\\n     String[] args = new String[] { \\\"-a\\\", \\\"-b\\\", \\\"file\\\" };\\r\\n-    CommandLine cl = parser.parse(_options, args);\\r\\n+    Options options = new Options();\\r\\n+    options.addOption(\\\"a\\\", \\\"enable-a\\\", false, null);\\r\\n+    options.addOption(OptionBuilder.withLongOpt(\\\"bfile\\\").hasArg().isRequired().create('b'));\\r\\n+    CommandLine cl = parser.parse(options, args);\\r\\n     assertTrue(\\\"Confirm -a is set\\\", cl.hasOption(\\\"a\\\"));\\r\\n     assertTrue(\\\"Confirm -b is set\\\", cl.hasOption(\\\"b\\\"));\\r\\n     assertTrue(\\\"Confirm arg of -b\\\", cl.getOptionValue(\\\"b\\\").equals(\\\"file\\\"));\\r\\n     assertTrue(\\\"Confirm NO of extra args\\\", cl.getArgList().size() == 0);\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2008","diff":"\"@@ -1,12 +1,8 @@\\n-public void testOptionAndRequiredOption() {\\r\\n+public void testOptionAndRequiredOption() throws Exception {\\r\\n     String[] args = new String[] { \\\"-a\\\", \\\"-b\\\", \\\"file\\\" };\\r\\n-    try {\\r\\n-        CommandLine cl = parser.parse(_options, args);\\r\\n-        assertTrue(\\\"Confirm -a is set\\\", cl.hasOption(\\\"a\\\"));\\r\\n-        assertTrue(\\\"Confirm -b is set\\\", cl.hasOption(\\\"b\\\"));\\r\\n-        assertTrue(\\\"Confirm arg of -b\\\", cl.getOptionValue(\\\"b\\\").equals(\\\"file\\\"));\\r\\n-        assertTrue(\\\"Confirm NO of extra args\\\", cl.getArgList().size() == 0);\\r\\n-    } catch (ParseException e) {\\r\\n-        fail(e.toString());\\r\\n-    }\\r\\n+    CommandLine cl = parser.parse(_options, args);\\r\\n+    assertTrue(\\\"Confirm -a is set\\\", cl.hasOption(\\\"a\\\"));\\r\\n+    assertTrue(\\\"Confirm -b is set\\\", cl.hasOption(\\\"b\\\"));\\r\\n+    assertTrue(\\\"Confirm arg of -b\\\", cl.getOptionValue(\\\"b\\\").equals(\\\"file\\\"));\\r\\n+    assertTrue(\\\"Confirm NO of extra args\\\", cl.getArgList().size() == 0);\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -1,12 +1,12 @@\\n public void testOptionAndRequiredOption() {\\r\\n     String[] args = new String[] { \\\"-a\\\", \\\"-b\\\", \\\"file\\\" };\\r\\n     try {\\r\\n-        CommandLine cl = _options.parse(args);\\r\\n+        CommandLine cl = parser.parse(_options, args);\\r\\n         assertTrue(\\\"Confirm -a is set\\\", cl.hasOption(\\\"a\\\"));\\r\\n         assertTrue(\\\"Confirm -b is set\\\", cl.hasOption(\\\"b\\\"));\\r\\n         assertTrue(\\\"Confirm arg of -b\\\", cl.getOptionValue(\\\"b\\\").equals(\\\"file\\\"));\\r\\n         assertTrue(\\\"Confirm NO of extra args\\\", cl.getArgList().size() == 0);\\r\\n     } catch (ParseException e) {\\r\\n         fail(e.toString());\\r\\n     }\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -1,12 +1,12 @@\\n public void testOptionAndRequiredOption() {\\r\\n     String[] args = new String[] { \\\"-a\\\", \\\"-b\\\", \\\"file\\\" };\\r\\n     try {\\r\\n         CommandLine cl = _options.parse(args);\\r\\n-        assertTrue(\\\"Confirm -a is set\\\", cl.hasOption('a'));\\r\\n-        assertTrue(\\\"Confirm -b is set\\\", cl.hasOption('b'));\\r\\n-        assertTrue(\\\"Confirm arg of -b\\\", cl.getOptionValue('b').equals(\\\"file\\\"));\\r\\n+        assertTrue(\\\"Confirm -a is set\\\", cl.hasOption(\\\"a\\\"));\\r\\n+        assertTrue(\\\"Confirm -b is set\\\", cl.hasOption(\\\"b\\\"));\\r\\n+        assertTrue(\\\"Confirm arg of -b\\\", cl.getOptionValue(\\\"b\\\").equals(\\\"file\\\"));\\r\\n         assertTrue(\\\"Confirm NO of extra args\\\", cl.getArgList().size() == 0);\\r\\n     } catch (ParseException e) {\\r\\n         fail(e.toString());\\r\\n     }\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jstrachan@apache.org","authorName":"James Strachan","commitYear":"2002","diff":"\"@@ -0,0 +1,12 @@\\n+public void testOptionAndRequiredOption() {\\r\\n+    String[] args = new String[] { \\\"-a\\\", \\\"-b\\\", \\\"file\\\" };\\r\\n+    try {\\r\\n+        CommandLine cl = _options.parse(args);\\r\\n+        assertTrue(\\\"Confirm -a is set\\\", cl.hasOption('a'));\\r\\n+        assertTrue(\\\"Confirm -b is set\\\", cl.hasOption('b'));\\r\\n+        assertTrue(\\\"Confirm arg of -b\\\", cl.getOptionValue('b').equals(\\\"file\\\"));\\r\\n+        assertTrue(\\\"Confirm NO of extra args\\\", cl.getArgList().size() == 0);\\r\\n+    } catch (ParseException e) {\\r\\n+        fail(e.toString());\\r\\n+    }\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\test\java\org\apache\commons\cli\AbstractParserTestCase.java	testOptionGroup	org.apache.commons.cli.AbstractParserTestCase.testOptionGroup()	499	510	1	[{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"\""},{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2019","diff":"\"\""},{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,10 +1,10 @@\\n @Test\\r\\n public void testOptionGroup() throws Exception {\\r\\n-    OptionGroup group = new OptionGroup();\\r\\n+    final OptionGroup group = new OptionGroup();\\r\\n     group.addOption(OptionBuilder.create(\\\"a\\\"));\\r\\n     group.addOption(OptionBuilder.create(\\\"b\\\"));\\r\\n-    Options options = new Options();\\r\\n+    final Options options = new Options();\\r\\n     options.addOptionGroup(group);\\r\\n     parser.parse(options, new String[] { \\\"-b\\\" });\\r\\n     assertEquals(\\\"selected option\\\", \\\"b\\\", group.getSelected());\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"tn@apache.org","authorName":"Thomas Neidhart","commitYear":"2013","diff":"\"@@ -1,9 +1,10 @@\\n+@Test\\r\\n public void testOptionGroup() throws Exception {\\r\\n     OptionGroup group = new OptionGroup();\\r\\n     group.addOption(OptionBuilder.create(\\\"a\\\"));\\r\\n     group.addOption(OptionBuilder.create(\\\"b\\\"));\\r\\n     Options options = new Options();\\r\\n     options.addOptionGroup(group);\\r\\n     parser.parse(options, new String[] { \\\"-b\\\" });\\r\\n     assertEquals(\\\"selected option\\\", \\\"b\\\", group.getSelected());\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2009","diff":"\"@@ -0,0 +1,9 @@\\n+public void testOptionGroup() throws Exception {\\r\\n+    OptionGroup group = new OptionGroup();\\r\\n+    group.addOption(OptionBuilder.create(\\\"a\\\"));\\r\\n+    group.addOption(OptionBuilder.create(\\\"b\\\"));\\r\\n+    Options options = new Options();\\r\\n+    options.addOptionGroup(group);\\r\\n+    parser.parse(options, new String[] { \\\"-b\\\" });\\r\\n+    assertEquals(\\\"selected option\\\", \\\"b\\\", group.getSelected());\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\test\java\org\apache\commons\cli\AbstractParserTestCase.java	testOptionGroupLong	org.apache.commons.cli.AbstractParserTestCase.testOptionGroupLong()	513	525	1	[{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"\""},{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2019","diff":"\"\""},{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,11 +1,11 @@\\n @Test\\r\\n public void testOptionGroupLong() throws Exception {\\r\\n-    OptionGroup group = new OptionGroup();\\r\\n+    final OptionGroup group = new OptionGroup();\\r\\n     group.addOption(OptionBuilder.withLongOpt(\\\"foo\\\").create());\\r\\n     group.addOption(OptionBuilder.withLongOpt(\\\"bar\\\").create());\\r\\n-    Options options = new Options();\\r\\n+    final Options options = new Options();\\r\\n     options.addOptionGroup(group);\\r\\n-    CommandLine cl = parser.parse(options, new String[] { \\\"--bar\\\" });\\r\\n+    final CommandLine cl = parser.parse(options, new String[] { \\\"--bar\\\" });\\r\\n     assertTrue(cl.hasOption(\\\"bar\\\"));\\r\\n     assertEquals(\\\"selected option\\\", \\\"bar\\\", group.getSelected());\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"tn@apache.org","authorName":"Thomas Neidhart","commitYear":"2013","diff":"\"@@ -1,10 +1,11 @@\\n+@Test\\r\\n public void testOptionGroupLong() throws Exception {\\r\\n     OptionGroup group = new OptionGroup();\\r\\n     group.addOption(OptionBuilder.withLongOpt(\\\"foo\\\").create());\\r\\n     group.addOption(OptionBuilder.withLongOpt(\\\"bar\\\").create());\\r\\n     Options options = new Options();\\r\\n     options.addOptionGroup(group);\\r\\n     CommandLine cl = parser.parse(options, new String[] { \\\"--bar\\\" });\\r\\n     assertTrue(cl.hasOption(\\\"bar\\\"));\\r\\n     assertEquals(\\\"selected option\\\", \\\"bar\\\", group.getSelected());\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2009","diff":"\"@@ -0,0 +1,10 @@\\n+public void testOptionGroupLong() throws Exception {\\r\\n+    OptionGroup group = new OptionGroup();\\r\\n+    group.addOption(OptionBuilder.withLongOpt(\\\"foo\\\").create());\\r\\n+    group.addOption(OptionBuilder.withLongOpt(\\\"bar\\\").create());\\r\\n+    Options options = new Options();\\r\\n+    options.addOptionGroup(group);\\r\\n+    CommandLine cl = parser.parse(options, new String[] { \\\"--bar\\\" });\\r\\n+    assertTrue(cl.hasOption(\\\"bar\\\"));\\r\\n+    assertEquals(\\\"selected option\\\", \\\"bar\\\", group.getSelected());\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\test\java\org\apache\commons\cli\AbstractParserTestCase.java	testPartialLongOptionSingleDash	org.apache.commons.cli.AbstractParserTestCase.testPartialLongOptionSingleDash()	528	539	1	[{"authorEmail":"arturobernalg@gmail.com","authorName":"Arturo Bernal","commitYear":"2021","diff":"\"@@ -1,10 +1,10 @@\\n @Test\\r\\n public void testPartialLongOptionSingleDash() throws Exception {\\r\\n     final String[] args = { \\\"-ver\\\" };\\r\\n     final Options options = new Options();\\r\\n     options.addOption(OptionBuilder.withLongOpt(\\\"version\\\").create());\\r\\n     options.addOption(OptionBuilder.hasArg().create('v'));\\r\\n     final CommandLine cl = parser.parse(options, args);\\r\\n     assertTrue(\\\"Confirm --version is set\\\", cl.hasOption(\\\"version\\\"));\\r\\n-    assertTrue(\\\"Confirm -v is not set\\\", !cl.hasOption(\\\"v\\\"));\\r\\n+    assertFalse(\\\"Confirm -v is not set\\\", cl.hasOption(\\\"v\\\"));\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"@@ -1,10 +1,10 @@\\n @Test\\r\\n public void testPartialLongOptionSingleDash() throws Exception {\\r\\n-    final String[] args = new String[] { \\\"-ver\\\" };\\r\\n+    final String[] args = { \\\"-ver\\\" };\\r\\n     final Options options = new Options();\\r\\n     options.addOption(OptionBuilder.withLongOpt(\\\"version\\\").create());\\r\\n     options.addOption(OptionBuilder.hasArg().create('v'));\\r\\n     final CommandLine cl = parser.parse(options, args);\\r\\n     assertTrue(\\\"Confirm --version is set\\\", cl.hasOption(\\\"version\\\"));\\r\\n     assertTrue(\\\"Confirm -v is not set\\\", !cl.hasOption(\\\"v\\\"));\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2019","diff":"\"\""},{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,10 +1,10 @@\\n @Test\\r\\n public void testPartialLongOptionSingleDash() throws Exception {\\r\\n-    String[] args = new String[] { \\\"-ver\\\" };\\r\\n-    Options options = new Options();\\r\\n+    final String[] args = new String[] { \\\"-ver\\\" };\\r\\n+    final Options options = new Options();\\r\\n     options.addOption(OptionBuilder.withLongOpt(\\\"version\\\").create());\\r\\n     options.addOption(OptionBuilder.hasArg().create('v'));\\r\\n-    CommandLine cl = parser.parse(options, args);\\r\\n+    final CommandLine cl = parser.parse(options, args);\\r\\n     assertTrue(\\\"Confirm --version is set\\\", cl.hasOption(\\\"version\\\"));\\r\\n     assertTrue(\\\"Confirm -v is not set\\\", !cl.hasOption(\\\"v\\\"));\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"tn@apache.org","authorName":"Thomas Neidhart","commitYear":"2013","diff":"\"@@ -1,9 +1,10 @@\\n+@Test\\r\\n public void testPartialLongOptionSingleDash() throws Exception {\\r\\n     String[] args = new String[] { \\\"-ver\\\" };\\r\\n     Options options = new Options();\\r\\n     options.addOption(OptionBuilder.withLongOpt(\\\"version\\\").create());\\r\\n     options.addOption(OptionBuilder.hasArg().create('v'));\\r\\n     CommandLine cl = parser.parse(options, args);\\r\\n     assertTrue(\\\"Confirm --version is set\\\", cl.hasOption(\\\"version\\\"));\\r\\n     assertTrue(\\\"Confirm -v is not set\\\", !cl.hasOption(\\\"v\\\"));\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2009","diff":"\"@@ -1,9 +1,9 @@\\n-public void testPartialLongOptionWithShort() throws Exception {\\r\\n+public void testPartialLongOptionSingleDash() throws Exception {\\r\\n     String[] args = new String[] { \\\"-ver\\\" };\\r\\n     Options options = new Options();\\r\\n     options.addOption(OptionBuilder.withLongOpt(\\\"version\\\").create());\\r\\n     options.addOption(OptionBuilder.hasArg().create('v'));\\r\\n     CommandLine cl = parser.parse(options, args);\\r\\n     assertTrue(\\\"Confirm --version is set\\\", cl.hasOption(\\\"version\\\"));\\r\\n     assertTrue(\\\"Confirm -v is not set\\\", !cl.hasOption(\\\"v\\\"));\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2009","diff":"\"@@ -0,0 +1,9 @@\\n+public void testPartialLongOptionWithShort() throws Exception {\\r\\n+    String[] args = new String[] { \\\"-ver\\\" };\\r\\n+    Options options = new Options();\\r\\n+    options.addOption(OptionBuilder.withLongOpt(\\\"version\\\").create());\\r\\n+    options.addOption(OptionBuilder.hasArg().create('v'));\\r\\n+    CommandLine cl = parser.parse(options, args);\\r\\n+    assertTrue(\\\"Confirm --version is set\\\", cl.hasOption(\\\"version\\\"));\\r\\n+    assertTrue(\\\"Confirm -v is not set\\\", !cl.hasOption(\\\"v\\\"));\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\test\java\org\apache\commons\cli\AbstractParserTestCase.java	testPropertiesOption1	org.apache.commons.cli.AbstractParserTestCase.testPropertiesOption1()	542	561	1	[{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"@@ -1,17 +1,17 @@\\n @Test\\r\\n public void testPropertiesOption1() throws Exception {\\r\\n-    final String[] args = new String[] { \\\"-Jsource=1.5\\\", \\\"-J\\\", \\\"target\\\", \\\"1.5\\\", \\\"foo\\\" };\\r\\n+    final String[] args = { \\\"-Jsource=1.5\\\", \\\"-J\\\", \\\"target\\\", \\\"1.5\\\", \\\"foo\\\" };\\r\\n     final Options options = new Options();\\r\\n     options.addOption(OptionBuilder.withValueSeparator().hasArgs(2).create('J'));\\r\\n     final CommandLine cl = parser.parse(options, args);\\r\\n     final List<String> values = Arrays.asList(cl.getOptionValues(\\\"J\\\"));\\r\\n     assertNotNull(\\\"null values\\\", values);\\r\\n     assertEquals(\\\"number of values\\\", 4, values.size());\\r\\n     assertEquals(\\\"value 1\\\", \\\"source\\\", values.get(0));\\r\\n     assertEquals(\\\"value 2\\\", \\\"1.5\\\", values.get(1));\\r\\n     assertEquals(\\\"value 3\\\", \\\"target\\\", values.get(2));\\r\\n     assertEquals(\\\"value 4\\\", \\\"1.5\\\", values.get(3));\\r\\n     final List<?> argsleft = cl.getArgList();\\r\\n     assertEquals(\\\"Should be 1 arg left\\\", 1, argsleft.size());\\r\\n     assertEquals(\\\"Expecting foo\\\", \\\"foo\\\", argsleft.get(0));\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2019","diff":"\"\""},{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,17 +1,17 @@\\n @Test\\r\\n public void testPropertiesOption1() throws Exception {\\r\\n-    String[] args = new String[] { \\\"-Jsource=1.5\\\", \\\"-J\\\", \\\"target\\\", \\\"1.5\\\", \\\"foo\\\" };\\r\\n-    Options options = new Options();\\r\\n+    final String[] args = new String[] { \\\"-Jsource=1.5\\\", \\\"-J\\\", \\\"target\\\", \\\"1.5\\\", \\\"foo\\\" };\\r\\n+    final Options options = new Options();\\r\\n     options.addOption(OptionBuilder.withValueSeparator().hasArgs(2).create('J'));\\r\\n-    CommandLine cl = parser.parse(options, args);\\r\\n-    List<String> values = Arrays.asList(cl.getOptionValues(\\\"J\\\"));\\r\\n+    final CommandLine cl = parser.parse(options, args);\\r\\n+    final List<String> values = Arrays.asList(cl.getOptionValues(\\\"J\\\"));\\r\\n     assertNotNull(\\\"null values\\\", values);\\r\\n     assertEquals(\\\"number of values\\\", 4, values.size());\\r\\n     assertEquals(\\\"value 1\\\", \\\"source\\\", values.get(0));\\r\\n     assertEquals(\\\"value 2\\\", \\\"1.5\\\", values.get(1));\\r\\n     assertEquals(\\\"value 3\\\", \\\"target\\\", values.get(2));\\r\\n     assertEquals(\\\"value 4\\\", \\\"1.5\\\", values.get(3));\\r\\n-    List<?> argsleft = cl.getArgList();\\r\\n+    final List<?> argsleft = cl.getArgList();\\r\\n     assertEquals(\\\"Should be 1 arg left\\\", 1, argsleft.size());\\r\\n     assertEquals(\\\"Expecting foo\\\", \\\"foo\\\", argsleft.get(0));\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"tn@apache.org","authorName":"Thomas Neidhart","commitYear":"2013","diff":"\"@@ -1,16 +1,17 @@\\n+@Test\\r\\n public void testPropertiesOption1() throws Exception {\\r\\n     String[] args = new String[] { \\\"-Jsource=1.5\\\", \\\"-J\\\", \\\"target\\\", \\\"1.5\\\", \\\"foo\\\" };\\r\\n     Options options = new Options();\\r\\n     options.addOption(OptionBuilder.withValueSeparator().hasArgs(2).create('J'));\\r\\n     CommandLine cl = parser.parse(options, args);\\r\\n     List<String> values = Arrays.asList(cl.getOptionValues(\\\"J\\\"));\\r\\n     assertNotNull(\\\"null values\\\", values);\\r\\n     assertEquals(\\\"number of values\\\", 4, values.size());\\r\\n     assertEquals(\\\"value 1\\\", \\\"source\\\", values.get(0));\\r\\n     assertEquals(\\\"value 2\\\", \\\"1.5\\\", values.get(1));\\r\\n     assertEquals(\\\"value 3\\\", \\\"target\\\", values.get(2));\\r\\n     assertEquals(\\\"value 4\\\", \\\"1.5\\\", values.get(3));\\r\\n     List<?> argsleft = cl.getArgList();\\r\\n     assertEquals(\\\"Should be 1 arg left\\\", 1, argsleft.size());\\r\\n     assertEquals(\\\"Expecting foo\\\", \\\"foo\\\", argsleft.get(0));\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"sebb@apache.org","authorName":"Sebastian Bazley","commitYear":"2013","diff":"\"@@ -1,16 +1,16 @@\\n public void testPropertiesOption1() throws Exception {\\r\\n     String[] args = new String[] { \\\"-Jsource=1.5\\\", \\\"-J\\\", \\\"target\\\", \\\"1.5\\\", \\\"foo\\\" };\\r\\n     Options options = new Options();\\r\\n     options.addOption(OptionBuilder.withValueSeparator().hasArgs(2).create('J'));\\r\\n     CommandLine cl = parser.parse(options, args);\\r\\n-    List values = Arrays.asList(cl.getOptionValues(\\\"J\\\"));\\r\\n+    List<String> values = Arrays.asList(cl.getOptionValues(\\\"J\\\"));\\r\\n     assertNotNull(\\\"null values\\\", values);\\r\\n     assertEquals(\\\"number of values\\\", 4, values.size());\\r\\n     assertEquals(\\\"value 1\\\", \\\"source\\\", values.get(0));\\r\\n     assertEquals(\\\"value 2\\\", \\\"1.5\\\", values.get(1));\\r\\n     assertEquals(\\\"value 3\\\", \\\"target\\\", values.get(2));\\r\\n     assertEquals(\\\"value 4\\\", \\\"1.5\\\", values.get(3));\\r\\n-    List argsleft = cl.getArgList();\\r\\n+    List<?> argsleft = cl.getArgList();\\r\\n     assertEquals(\\\"Should be 1 arg left\\\", 1, argsleft.size());\\r\\n     assertEquals(\\\"Expecting foo\\\", \\\"foo\\\", argsleft.get(0));\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2009","diff":"\"@@ -1,16 +1,16 @@\\n-public void testPropertiesOption() throws Exception {\\r\\n+public void testPropertiesOption1() throws Exception {\\r\\n     String[] args = new String[] { \\\"-Jsource=1.5\\\", \\\"-J\\\", \\\"target\\\", \\\"1.5\\\", \\\"foo\\\" };\\r\\n     Options options = new Options();\\r\\n     options.addOption(OptionBuilder.withValueSeparator().hasArgs(2).create('J'));\\r\\n     CommandLine cl = parser.parse(options, args);\\r\\n     List values = Arrays.asList(cl.getOptionValues(\\\"J\\\"));\\r\\n     assertNotNull(\\\"null values\\\", values);\\r\\n     assertEquals(\\\"number of values\\\", 4, values.size());\\r\\n     assertEquals(\\\"value 1\\\", \\\"source\\\", values.get(0));\\r\\n     assertEquals(\\\"value 2\\\", \\\"1.5\\\", values.get(1));\\r\\n     assertEquals(\\\"value 3\\\", \\\"target\\\", values.get(2));\\r\\n     assertEquals(\\\"value 4\\\", \\\"1.5\\\", values.get(3));\\r\\n     List argsleft = cl.getArgList();\\r\\n     assertEquals(\\\"Should be 1 arg left\\\", 1, argsleft.size());\\r\\n     assertEquals(\\\"Expecting foo\\\", \\\"foo\\\", argsleft.get(0));\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2008","diff":"\"@@ -1,17 +1,16 @@\\n public void testPropertiesOption() throws Exception {\\r\\n     String[] args = new String[] { \\\"-Jsource=1.5\\\", \\\"-J\\\", \\\"target\\\", \\\"1.5\\\", \\\"foo\\\" };\\r\\n     Options options = new Options();\\r\\n     options.addOption(OptionBuilder.withValueSeparator().hasArgs(2).create('J'));\\r\\n-    Parser parser = new PosixParser();\\r\\n     CommandLine cl = parser.parse(options, args);\\r\\n     List values = Arrays.asList(cl.getOptionValues(\\\"J\\\"));\\r\\n     assertNotNull(\\\"null values\\\", values);\\r\\n     assertEquals(\\\"number of values\\\", 4, values.size());\\r\\n     assertEquals(\\\"value 1\\\", \\\"source\\\", values.get(0));\\r\\n     assertEquals(\\\"value 2\\\", \\\"1.5\\\", values.get(1));\\r\\n     assertEquals(\\\"value 3\\\", \\\"target\\\", values.get(2));\\r\\n     assertEquals(\\\"value 4\\\", \\\"1.5\\\", values.get(3));\\r\\n     List argsleft = cl.getArgList();\\r\\n     assertEquals(\\\"Should be 1 arg left\\\", 1, argsleft.size());\\r\\n     assertEquals(\\\"Expecting foo\\\", \\\"foo\\\", argsleft.get(0));\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"sebb@apache.org","authorName":"Sebastian Bazley","commitYear":"2008","diff":"\"@@ -0,0 +1,17 @@\\n+public void testPropertiesOption() throws Exception {\\r\\n+    String[] args = new String[] { \\\"-Jsource=1.5\\\", \\\"-J\\\", \\\"target\\\", \\\"1.5\\\", \\\"foo\\\" };\\r\\n+    Options options = new Options();\\r\\n+    options.addOption(OptionBuilder.withValueSeparator().hasArgs(2).create('J'));\\r\\n+    Parser parser = new PosixParser();\\r\\n+    CommandLine cl = parser.parse(options, args);\\r\\n+    List values = Arrays.asList(cl.getOptionValues(\\\"J\\\"));\\r\\n+    assertNotNull(\\\"null values\\\", values);\\r\\n+    assertEquals(\\\"number of values\\\", 4, values.size());\\r\\n+    assertEquals(\\\"value 1\\\", \\\"source\\\", values.get(0));\\r\\n+    assertEquals(\\\"value 2\\\", \\\"1.5\\\", values.get(1));\\r\\n+    assertEquals(\\\"value 3\\\", \\\"target\\\", values.get(2));\\r\\n+    assertEquals(\\\"value 4\\\", \\\"1.5\\\", values.get(3));\\r\\n+    List argsleft = cl.getArgList();\\r\\n+    assertEquals(\\\"Should be 1 arg left\\\", 1, argsleft.size());\\r\\n+    assertEquals(\\\"Expecting foo\\\", \\\"foo\\\", argsleft.get(0));\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\test\java\org\apache\commons\cli\AbstractParserTestCase.java	testPropertiesOption2	org.apache.commons.cli.AbstractParserTestCase.testPropertiesOption2()	564	580	1	[{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"@@ -1,14 +1,14 @@\\n @Test\\r\\n public void testPropertiesOption2() throws Exception {\\r\\n-    final String[] args = new String[] { \\\"-Dparam1\\\", \\\"-Dparam2=value2\\\", \\\"-D\\\" };\\r\\n+    final String[] args = { \\\"-Dparam1\\\", \\\"-Dparam2=value2\\\", \\\"-D\\\" };\\r\\n     final Options options = new Options();\\r\\n     options.addOption(OptionBuilder.withValueSeparator().hasOptionalArgs(2).create('D'));\\r\\n     final CommandLine cl = parser.parse(options, args);\\r\\n     final Properties props = cl.getOptionProperties(\\\"D\\\");\\r\\n     assertNotNull(\\\"null properties\\\", props);\\r\\n     assertEquals(\\\"number of properties in \\\" + props, 2, props.size());\\r\\n     assertEquals(\\\"property 1\\\", \\\"true\\\", props.getProperty(\\\"param1\\\"));\\r\\n     assertEquals(\\\"property 2\\\", \\\"value2\\\", props.getProperty(\\\"param2\\\"));\\r\\n     final List<?> argsleft = cl.getArgList();\\r\\n     assertEquals(\\\"Should be no arg left\\\", 0, argsleft.size());\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2019","diff":"\"\""},{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,14 +1,14 @@\\n @Test\\r\\n public void testPropertiesOption2() throws Exception {\\r\\n-    String[] args = new String[] { \\\"-Dparam1\\\", \\\"-Dparam2=value2\\\", \\\"-D\\\" };\\r\\n-    Options options = new Options();\\r\\n+    final String[] args = new String[] { \\\"-Dparam1\\\", \\\"-Dparam2=value2\\\", \\\"-D\\\" };\\r\\n+    final Options options = new Options();\\r\\n     options.addOption(OptionBuilder.withValueSeparator().hasOptionalArgs(2).create('D'));\\r\\n-    CommandLine cl = parser.parse(options, args);\\r\\n-    Properties props = cl.getOptionProperties(\\\"D\\\");\\r\\n+    final CommandLine cl = parser.parse(options, args);\\r\\n+    final Properties props = cl.getOptionProperties(\\\"D\\\");\\r\\n     assertNotNull(\\\"null properties\\\", props);\\r\\n     assertEquals(\\\"number of properties in \\\" + props, 2, props.size());\\r\\n     assertEquals(\\\"property 1\\\", \\\"true\\\", props.getProperty(\\\"param1\\\"));\\r\\n     assertEquals(\\\"property 2\\\", \\\"value2\\\", props.getProperty(\\\"param2\\\"));\\r\\n-    List<?> argsleft = cl.getArgList();\\r\\n+    final List<?> argsleft = cl.getArgList();\\r\\n     assertEquals(\\\"Should be no arg left\\\", 0, argsleft.size());\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"tn@apache.org","authorName":"Thomas Neidhart","commitYear":"2013","diff":"\"@@ -1,13 +1,14 @@\\n+@Test\\r\\n public void testPropertiesOption2() throws Exception {\\r\\n     String[] args = new String[] { \\\"-Dparam1\\\", \\\"-Dparam2=value2\\\", \\\"-D\\\" };\\r\\n     Options options = new Options();\\r\\n     options.addOption(OptionBuilder.withValueSeparator().hasOptionalArgs(2).create('D'));\\r\\n     CommandLine cl = parser.parse(options, args);\\r\\n     Properties props = cl.getOptionProperties(\\\"D\\\");\\r\\n     assertNotNull(\\\"null properties\\\", props);\\r\\n     assertEquals(\\\"number of properties in \\\" + props, 2, props.size());\\r\\n     assertEquals(\\\"property 1\\\", \\\"true\\\", props.getProperty(\\\"param1\\\"));\\r\\n     assertEquals(\\\"property 2\\\", \\\"value2\\\", props.getProperty(\\\"param2\\\"));\\r\\n     List<?> argsleft = cl.getArgList();\\r\\n     assertEquals(\\\"Should be no arg left\\\", 0, argsleft.size());\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"sebb@apache.org","authorName":"Sebastian Bazley","commitYear":"2013","diff":"\"@@ -1,13 +1,13 @@\\n public void testPropertiesOption2() throws Exception {\\r\\n     String[] args = new String[] { \\\"-Dparam1\\\", \\\"-Dparam2=value2\\\", \\\"-D\\\" };\\r\\n     Options options = new Options();\\r\\n     options.addOption(OptionBuilder.withValueSeparator().hasOptionalArgs(2).create('D'));\\r\\n     CommandLine cl = parser.parse(options, args);\\r\\n     Properties props = cl.getOptionProperties(\\\"D\\\");\\r\\n     assertNotNull(\\\"null properties\\\", props);\\r\\n     assertEquals(\\\"number of properties in \\\" + props, 2, props.size());\\r\\n     assertEquals(\\\"property 1\\\", \\\"true\\\", props.getProperty(\\\"param1\\\"));\\r\\n     assertEquals(\\\"property 2\\\", \\\"value2\\\", props.getProperty(\\\"param2\\\"));\\r\\n-    List argsleft = cl.getArgList();\\r\\n+    List<?> argsleft = cl.getArgList();\\r\\n     assertEquals(\\\"Should be no arg left\\\", 0, argsleft.size());\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2009","diff":"\"@@ -1,16 +1,13 @@\\n-public void testPropertiesOption() throws Exception {\\r\\n-    String[] args = new String[] { \\\"-Jsource=1.5\\\", \\\"-J\\\", \\\"target\\\", \\\"1.5\\\", \\\"foo\\\" };\\r\\n+public void testPropertiesOption2() throws Exception {\\r\\n+    String[] args = new String[] { \\\"-Dparam1\\\", \\\"-Dparam2=value2\\\", \\\"-D\\\" };\\r\\n     Options options = new Options();\\r\\n-    options.addOption(OptionBuilder.withValueSeparator().hasArgs(2).create('J'));\\r\\n+    options.addOption(OptionBuilder.withValueSeparator().hasOptionalArgs(2).create('D'));\\r\\n     CommandLine cl = parser.parse(options, args);\\r\\n-    List values = Arrays.asList(cl.getOptionValues(\\\"J\\\"));\\r\\n-    assertNotNull(\\\"null values\\\", values);\\r\\n-    assertEquals(\\\"number of values\\\", 4, values.size());\\r\\n-    assertEquals(\\\"value 1\\\", \\\"source\\\", values.get(0));\\r\\n-    assertEquals(\\\"value 2\\\", \\\"1.5\\\", values.get(1));\\r\\n-    assertEquals(\\\"value 3\\\", \\\"target\\\", values.get(2));\\r\\n-    assertEquals(\\\"value 4\\\", \\\"1.5\\\", values.get(3));\\r\\n+    Properties props = cl.getOptionProperties(\\\"D\\\");\\r\\n+    assertNotNull(\\\"null properties\\\", props);\\r\\n+    assertEquals(\\\"number of properties in \\\" + props, 2, props.size());\\r\\n+    assertEquals(\\\"property 1\\\", \\\"true\\\", props.getProperty(\\\"param1\\\"));\\r\\n+    assertEquals(\\\"property 2\\\", \\\"value2\\\", props.getProperty(\\\"param2\\\"));\\r\\n     List argsleft = cl.getArgList();\\r\\n-    assertEquals(\\\"Should be 1 arg left\\\", 1, argsleft.size());\\r\\n-    assertEquals(\\\"Expecting foo\\\", \\\"foo\\\", argsleft.get(0));\\r\\n+    assertEquals(\\\"Should be no arg left\\\", 0, argsleft.size());\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2008","diff":"\"@@ -1,17 +1,16 @@\\n public void testPropertiesOption() throws Exception {\\r\\n     String[] args = new String[] { \\\"-Jsource=1.5\\\", \\\"-J\\\", \\\"target\\\", \\\"1.5\\\", \\\"foo\\\" };\\r\\n     Options options = new Options();\\r\\n     options.addOption(OptionBuilder.withValueSeparator().hasArgs(2).create('J'));\\r\\n-    Parser parser = new PosixParser();\\r\\n     CommandLine cl = parser.parse(options, args);\\r\\n     List values = Arrays.asList(cl.getOptionValues(\\\"J\\\"));\\r\\n     assertNotNull(\\\"null values\\\", values);\\r\\n     assertEquals(\\\"number of values\\\", 4, values.size());\\r\\n     assertEquals(\\\"value 1\\\", \\\"source\\\", values.get(0));\\r\\n     assertEquals(\\\"value 2\\\", \\\"1.5\\\", values.get(1));\\r\\n     assertEquals(\\\"value 3\\\", \\\"target\\\", values.get(2));\\r\\n     assertEquals(\\\"value 4\\\", \\\"1.5\\\", values.get(3));\\r\\n     List argsleft = cl.getArgList();\\r\\n     assertEquals(\\\"Should be 1 arg left\\\", 1, argsleft.size());\\r\\n     assertEquals(\\\"Expecting foo\\\", \\\"foo\\\", argsleft.get(0));\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"sebb@apache.org","authorName":"Sebastian Bazley","commitYear":"2008","diff":"\"@@ -0,0 +1,17 @@\\n+public void testPropertiesOption() throws Exception {\\r\\n+    String[] args = new String[] { \\\"-Jsource=1.5\\\", \\\"-J\\\", \\\"target\\\", \\\"1.5\\\", \\\"foo\\\" };\\r\\n+    Options options = new Options();\\r\\n+    options.addOption(OptionBuilder.withValueSeparator().hasArgs(2).create('J'));\\r\\n+    Parser parser = new PosixParser();\\r\\n+    CommandLine cl = parser.parse(options, args);\\r\\n+    List values = Arrays.asList(cl.getOptionValues(\\\"J\\\"));\\r\\n+    assertNotNull(\\\"null values\\\", values);\\r\\n+    assertEquals(\\\"number of values\\\", 4, values.size());\\r\\n+    assertEquals(\\\"value 1\\\", \\\"source\\\", values.get(0));\\r\\n+    assertEquals(\\\"value 2\\\", \\\"1.5\\\", values.get(1));\\r\\n+    assertEquals(\\\"value 3\\\", \\\"target\\\", values.get(2));\\r\\n+    assertEquals(\\\"value 4\\\", \\\"1.5\\\", values.get(3));\\r\\n+    List argsleft = cl.getArgList();\\r\\n+    assertEquals(\\\"Should be 1 arg left\\\", 1, argsleft.size());\\r\\n+    assertEquals(\\\"Expecting foo\\\", \\\"foo\\\", argsleft.get(0));\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\test\java\org\apache\commons\cli\AbstractParserTestCase.java	testPropertyOptionFlags	org.apache.commons.cli.AbstractParserTestCase.testPropertyOptionFlags()	583	635	1	[{"authorEmail":"arturobernalg@gmail.com","authorName":"Arturo Bernal","commitYear":"2021","diff":"\"@@ -1,44 +1,44 @@\\n @Test\\r\\n public void testPropertyOptionFlags() throws Exception {\\r\\n     final Options opts = new Options();\\r\\n     opts.addOption(\\\"a\\\", false, \\\"toggle -a\\\");\\r\\n     opts.addOption(\\\"c\\\", \\\"c\\\", false, \\\"toggle -c\\\");\\r\\n     opts.addOption(OptionBuilder.hasOptionalArg().create('e'));\\r\\n     Properties properties = new Properties();\\r\\n     properties.setProperty(\\\"a\\\", \\\"true\\\");\\r\\n     properties.setProperty(\\\"c\\\", \\\"yes\\\");\\r\\n     properties.setProperty(\\\"e\\\", \\\"1\\\");\\r\\n     CommandLine cmd = parse(parser, opts, null, properties);\\r\\n     assertTrue(cmd.hasOption(\\\"a\\\"));\\r\\n     assertTrue(cmd.hasOption(\\\"c\\\"));\\r\\n     assertTrue(cmd.hasOption(\\\"e\\\"));\\r\\n     properties = new Properties();\\r\\n     properties.setProperty(\\\"a\\\", \\\"false\\\");\\r\\n     properties.setProperty(\\\"c\\\", \\\"no\\\");\\r\\n     properties.setProperty(\\\"e\\\", \\\"0\\\");\\r\\n     cmd = parse(parser, opts, null, properties);\\r\\n-    assertTrue(!cmd.hasOption(\\\"a\\\"));\\r\\n-    assertTrue(!cmd.hasOption(\\\"c\\\"));\\r\\n+    assertFalse(cmd.hasOption(\\\"a\\\"));\\r\\n+    assertFalse(cmd.hasOption(\\\"c\\\"));\\r\\n     assertTrue(cmd.hasOption(\\\"e\\\"));\\r\\n     properties = new Properties();\\r\\n     properties.setProperty(\\\"a\\\", \\\"TRUE\\\");\\r\\n     properties.setProperty(\\\"c\\\", \\\"nO\\\");\\r\\n     properties.setProperty(\\\"e\\\", \\\"TrUe\\\");\\r\\n     cmd = parse(parser, opts, null, properties);\\r\\n     assertTrue(cmd.hasOption(\\\"a\\\"));\\r\\n-    assertTrue(!cmd.hasOption(\\\"c\\\"));\\r\\n+    assertFalse(cmd.hasOption(\\\"c\\\"));\\r\\n     assertTrue(cmd.hasOption(\\\"e\\\"));\\r\\n     properties = new Properties();\\r\\n     properties.setProperty(\\\"a\\\", \\\"just a string\\\");\\r\\n     properties.setProperty(\\\"e\\\", \\\"\\\");\\r\\n     cmd = parse(parser, opts, null, properties);\\r\\n-    assertTrue(!cmd.hasOption(\\\"a\\\"));\\r\\n-    assertTrue(!cmd.hasOption(\\\"c\\\"));\\r\\n+    assertFalse(cmd.hasOption(\\\"a\\\"));\\r\\n+    assertFalse(cmd.hasOption(\\\"c\\\"));\\r\\n     assertTrue(cmd.hasOption(\\\"e\\\"));\\r\\n     properties = new Properties();\\r\\n     properties.setProperty(\\\"a\\\", \\\"0\\\");\\r\\n     properties.setProperty(\\\"c\\\", \\\"1\\\");\\r\\n     cmd = parse(parser, opts, null, properties);\\r\\n-    assertTrue(!cmd.hasOption(\\\"a\\\"));\\r\\n+    assertFalse(cmd.hasOption(\\\"a\\\"));\\r\\n     assertTrue(cmd.hasOption(\\\"c\\\"));\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"\""},{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2019","diff":"\"\""},{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,44 +1,44 @@\\n @Test\\r\\n public void testPropertyOptionFlags() throws Exception {\\r\\n-    Options opts = new Options();\\r\\n+    final Options opts = new Options();\\r\\n     opts.addOption(\\\"a\\\", false, \\\"toggle -a\\\");\\r\\n     opts.addOption(\\\"c\\\", \\\"c\\\", false, \\\"toggle -c\\\");\\r\\n     opts.addOption(OptionBuilder.hasOptionalArg().create('e'));\\r\\n     Properties properties = new Properties();\\r\\n     properties.setProperty(\\\"a\\\", \\\"true\\\");\\r\\n     properties.setProperty(\\\"c\\\", \\\"yes\\\");\\r\\n     properties.setProperty(\\\"e\\\", \\\"1\\\");\\r\\n     CommandLine cmd = parse(parser, opts, null, properties);\\r\\n     assertTrue(cmd.hasOption(\\\"a\\\"));\\r\\n     assertTrue(cmd.hasOption(\\\"c\\\"));\\r\\n     assertTrue(cmd.hasOption(\\\"e\\\"));\\r\\n     properties = new Properties();\\r\\n     properties.setProperty(\\\"a\\\", \\\"false\\\");\\r\\n     properties.setProperty(\\\"c\\\", \\\"no\\\");\\r\\n     properties.setProperty(\\\"e\\\", \\\"0\\\");\\r\\n     cmd = parse(parser, opts, null, properties);\\r\\n     assertTrue(!cmd.hasOption(\\\"a\\\"));\\r\\n     assertTrue(!cmd.hasOption(\\\"c\\\"));\\r\\n     assertTrue(cmd.hasOption(\\\"e\\\"));\\r\\n     properties = new Properties();\\r\\n     properties.setProperty(\\\"a\\\", \\\"TRUE\\\");\\r\\n     properties.setProperty(\\\"c\\\", \\\"nO\\\");\\r\\n     properties.setProperty(\\\"e\\\", \\\"TrUe\\\");\\r\\n     cmd = parse(parser, opts, null, properties);\\r\\n     assertTrue(cmd.hasOption(\\\"a\\\"));\\r\\n     assertTrue(!cmd.hasOption(\\\"c\\\"));\\r\\n     assertTrue(cmd.hasOption(\\\"e\\\"));\\r\\n     properties = new Properties();\\r\\n     properties.setProperty(\\\"a\\\", \\\"just a string\\\");\\r\\n     properties.setProperty(\\\"e\\\", \\\"\\\");\\r\\n     cmd = parse(parser, opts, null, properties);\\r\\n     assertTrue(!cmd.hasOption(\\\"a\\\"));\\r\\n     assertTrue(!cmd.hasOption(\\\"c\\\"));\\r\\n     assertTrue(cmd.hasOption(\\\"e\\\"));\\r\\n     properties = new Properties();\\r\\n     properties.setProperty(\\\"a\\\", \\\"0\\\");\\r\\n     properties.setProperty(\\\"c\\\", \\\"1\\\");\\r\\n     cmd = parse(parser, opts, null, properties);\\r\\n     assertTrue(!cmd.hasOption(\\\"a\\\"));\\r\\n     assertTrue(cmd.hasOption(\\\"c\\\"));\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"tn@apache.org","authorName":"Thomas Neidhart","commitYear":"2013","diff":"\"@@ -1,43 +1,44 @@\\n+@Test\\r\\n public void testPropertyOptionFlags() throws Exception {\\r\\n     Options opts = new Options();\\r\\n     opts.addOption(\\\"a\\\", false, \\\"toggle -a\\\");\\r\\n     opts.addOption(\\\"c\\\", \\\"c\\\", false, \\\"toggle -c\\\");\\r\\n     opts.addOption(OptionBuilder.hasOptionalArg().create('e'));\\r\\n     Properties properties = new Properties();\\r\\n     properties.setProperty(\\\"a\\\", \\\"true\\\");\\r\\n     properties.setProperty(\\\"c\\\", \\\"yes\\\");\\r\\n     properties.setProperty(\\\"e\\\", \\\"1\\\");\\r\\n     CommandLine cmd = parse(parser, opts, null, properties);\\r\\n     assertTrue(cmd.hasOption(\\\"a\\\"));\\r\\n     assertTrue(cmd.hasOption(\\\"c\\\"));\\r\\n     assertTrue(cmd.hasOption(\\\"e\\\"));\\r\\n     properties = new Properties();\\r\\n     properties.setProperty(\\\"a\\\", \\\"false\\\");\\r\\n     properties.setProperty(\\\"c\\\", \\\"no\\\");\\r\\n     properties.setProperty(\\\"e\\\", \\\"0\\\");\\r\\n     cmd = parse(parser, opts, null, properties);\\r\\n     assertTrue(!cmd.hasOption(\\\"a\\\"));\\r\\n     assertTrue(!cmd.hasOption(\\\"c\\\"));\\r\\n     assertTrue(cmd.hasOption(\\\"e\\\"));\\r\\n     properties = new Properties();\\r\\n     properties.setProperty(\\\"a\\\", \\\"TRUE\\\");\\r\\n     properties.setProperty(\\\"c\\\", \\\"nO\\\");\\r\\n     properties.setProperty(\\\"e\\\", \\\"TrUe\\\");\\r\\n     cmd = parse(parser, opts, null, properties);\\r\\n     assertTrue(cmd.hasOption(\\\"a\\\"));\\r\\n     assertTrue(!cmd.hasOption(\\\"c\\\"));\\r\\n     assertTrue(cmd.hasOption(\\\"e\\\"));\\r\\n     properties = new Properties();\\r\\n     properties.setProperty(\\\"a\\\", \\\"just a string\\\");\\r\\n     properties.setProperty(\\\"e\\\", \\\"\\\");\\r\\n     cmd = parse(parser, opts, null, properties);\\r\\n     assertTrue(!cmd.hasOption(\\\"a\\\"));\\r\\n     assertTrue(!cmd.hasOption(\\\"c\\\"));\\r\\n     assertTrue(cmd.hasOption(\\\"e\\\"));\\r\\n     properties = new Properties();\\r\\n     properties.setProperty(\\\"a\\\", \\\"0\\\");\\r\\n     properties.setProperty(\\\"c\\\", \\\"1\\\");\\r\\n     cmd = parse(parser, opts, null, properties);\\r\\n     assertTrue(!cmd.hasOption(\\\"a\\\"));\\r\\n     assertTrue(cmd.hasOption(\\\"c\\\"));\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2010","diff":"\"@@ -1,34 +1,43 @@\\n public void testPropertyOptionFlags() throws Exception {\\r\\n+    Options opts = new Options();\\r\\n+    opts.addOption(\\\"a\\\", false, \\\"toggle -a\\\");\\r\\n+    opts.addOption(\\\"c\\\", \\\"c\\\", false, \\\"toggle -c\\\");\\r\\n+    opts.addOption(OptionBuilder.hasOptionalArg().create('e'));\\r\\n     Properties properties = new Properties();\\r\\n     properties.setProperty(\\\"a\\\", \\\"true\\\");\\r\\n     properties.setProperty(\\\"c\\\", \\\"yes\\\");\\r\\n     properties.setProperty(\\\"e\\\", \\\"1\\\");\\r\\n-    Parser parser = new PosixParser();\\r\\n-    CommandLine cmd = parser.parse(opts, null, properties);\\r\\n+    CommandLine cmd = parse(parser, opts, null, properties);\\r\\n     assertTrue(cmd.hasOption(\\\"a\\\"));\\r\\n     assertTrue(cmd.hasOption(\\\"c\\\"));\\r\\n     assertTrue(cmd.hasOption(\\\"e\\\"));\\r\\n     properties = new Properties();\\r\\n     properties.setProperty(\\\"a\\\", \\\"false\\\");\\r\\n     properties.setProperty(\\\"c\\\", \\\"no\\\");\\r\\n     properties.setProperty(\\\"e\\\", \\\"0\\\");\\r\\n-    cmd = parser.parse(opts, null, properties);\\r\\n+    cmd = parse(parser, opts, null, properties);\\r\\n     assertTrue(!cmd.hasOption(\\\"a\\\"));\\r\\n     assertTrue(!cmd.hasOption(\\\"c\\\"));\\r\\n     assertTrue(cmd.hasOption(\\\"e\\\"));\\r\\n     properties = new Properties();\\r\\n     properties.setProperty(\\\"a\\\", \\\"TRUE\\\");\\r\\n     properties.setProperty(\\\"c\\\", \\\"nO\\\");\\r\\n     properties.setProperty(\\\"e\\\", \\\"TrUe\\\");\\r\\n-    cmd = parser.parse(opts, null, properties);\\r\\n+    cmd = parse(parser, opts, null, properties);\\r\\n     assertTrue(cmd.hasOption(\\\"a\\\"));\\r\\n     assertTrue(!cmd.hasOption(\\\"c\\\"));\\r\\n     assertTrue(cmd.hasOption(\\\"e\\\"));\\r\\n     properties = new Properties();\\r\\n     properties.setProperty(\\\"a\\\", \\\"just a string\\\");\\r\\n     properties.setProperty(\\\"e\\\", \\\"\\\");\\r\\n-    cmd = parser.parse(opts, null, properties);\\r\\n+    cmd = parse(parser, opts, null, properties);\\r\\n     assertTrue(!cmd.hasOption(\\\"a\\\"));\\r\\n     assertTrue(!cmd.hasOption(\\\"c\\\"));\\r\\n     assertTrue(cmd.hasOption(\\\"e\\\"));\\r\\n+    properties = new Properties();\\r\\n+    properties.setProperty(\\\"a\\\", \\\"0\\\");\\r\\n+    properties.setProperty(\\\"c\\\", \\\"1\\\");\\r\\n+    cmd = parse(parser, opts, null, properties);\\r\\n+    assertTrue(!cmd.hasOption(\\\"a\\\"));\\r\\n+    assertTrue(cmd.hasOption(\\\"c\\\"));\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2010","diff":"\"@@ -1,34 +1,34 @@\\n public void testPropertyOptionFlags() throws Exception {\\r\\n     Properties properties = new Properties();\\r\\n     properties.setProperty(\\\"a\\\", \\\"true\\\");\\r\\n     properties.setProperty(\\\"c\\\", \\\"yes\\\");\\r\\n     properties.setProperty(\\\"e\\\", \\\"1\\\");\\r\\n     Parser parser = new PosixParser();\\r\\n     CommandLine cmd = parser.parse(opts, null, properties);\\r\\n     assertTrue(cmd.hasOption(\\\"a\\\"));\\r\\n     assertTrue(cmd.hasOption(\\\"c\\\"));\\r\\n     assertTrue(cmd.hasOption(\\\"e\\\"));\\r\\n     properties = new Properties();\\r\\n     properties.setProperty(\\\"a\\\", \\\"false\\\");\\r\\n     properties.setProperty(\\\"c\\\", \\\"no\\\");\\r\\n     properties.setProperty(\\\"e\\\", \\\"0\\\");\\r\\n     cmd = parser.parse(opts, null, properties);\\r\\n     assertTrue(!cmd.hasOption(\\\"a\\\"));\\r\\n     assertTrue(!cmd.hasOption(\\\"c\\\"));\\r\\n-    assertTrue(!cmd.hasOption(\\\"e\\\"));\\r\\n+    assertTrue(cmd.hasOption(\\\"e\\\"));\\r\\n     properties = new Properties();\\r\\n     properties.setProperty(\\\"a\\\", \\\"TRUE\\\");\\r\\n     properties.setProperty(\\\"c\\\", \\\"nO\\\");\\r\\n     properties.setProperty(\\\"e\\\", \\\"TrUe\\\");\\r\\n     cmd = parser.parse(opts, null, properties);\\r\\n     assertTrue(cmd.hasOption(\\\"a\\\"));\\r\\n     assertTrue(!cmd.hasOption(\\\"c\\\"));\\r\\n     assertTrue(cmd.hasOption(\\\"e\\\"));\\r\\n     properties = new Properties();\\r\\n     properties.setProperty(\\\"a\\\", \\\"just a string\\\");\\r\\n     properties.setProperty(\\\"e\\\", \\\"\\\");\\r\\n     cmd = parser.parse(opts, null, properties);\\r\\n     assertTrue(!cmd.hasOption(\\\"a\\\"));\\r\\n     assertTrue(!cmd.hasOption(\\\"c\\\"));\\r\\n-    assertTrue(!cmd.hasOption(\\\"e\\\"));\\r\\n+    assertTrue(cmd.hasOption(\\\"e\\\"));\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2008","diff":"\"@@ -1,50 +1,34 @@\\n-public void testPropertyOptionFlags() {\\r\\n+public void testPropertyOptionFlags() throws Exception {\\r\\n     Properties properties = new Properties();\\r\\n     properties.setProperty(\\\"a\\\", \\\"true\\\");\\r\\n     properties.setProperty(\\\"c\\\", \\\"yes\\\");\\r\\n     properties.setProperty(\\\"e\\\", \\\"1\\\");\\r\\n     Parser parser = new PosixParser();\\r\\n-    try {\\r\\n-        CommandLine cmd = parser.parse(opts, null, properties);\\r\\n-        assertTrue(cmd.hasOption(\\\"a\\\"));\\r\\n-        assertTrue(cmd.hasOption(\\\"c\\\"));\\r\\n-        assertTrue(cmd.hasOption(\\\"e\\\"));\\r\\n-    } catch (ParseException e) {\\r\\n-        fail(\\\"Cannot setUp() CommandLine: \\\" + e.toString());\\r\\n-    }\\r\\n+    CommandLine cmd = parser.parse(opts, null, properties);\\r\\n+    assertTrue(cmd.hasOption(\\\"a\\\"));\\r\\n+    assertTrue(cmd.hasOption(\\\"c\\\"));\\r\\n+    assertTrue(cmd.hasOption(\\\"e\\\"));\\r\\n     properties = new Properties();\\r\\n     properties.setProperty(\\\"a\\\", \\\"false\\\");\\r\\n     properties.setProperty(\\\"c\\\", \\\"no\\\");\\r\\n     properties.setProperty(\\\"e\\\", \\\"0\\\");\\r\\n-    try {\\r\\n-        CommandLine cmd = parser.parse(opts, null, properties);\\r\\n-        assertTrue(!cmd.hasOption(\\\"a\\\"));\\r\\n-        assertTrue(!cmd.hasOption(\\\"c\\\"));\\r\\n-        assertTrue(!cmd.hasOption(\\\"e\\\"));\\r\\n-    } catch (ParseException e) {\\r\\n-        fail(\\\"Cannot setUp() CommandLine: \\\" + e.toString());\\r\\n-    }\\r\\n+    cmd = parser.parse(opts, null, properties);\\r\\n+    assertTrue(!cmd.hasOption(\\\"a\\\"));\\r\\n+    assertTrue(!cmd.hasOption(\\\"c\\\"));\\r\\n+    assertTrue(!cmd.hasOption(\\\"e\\\"));\\r\\n     properties = new Properties();\\r\\n     properties.setProperty(\\\"a\\\", \\\"TRUE\\\");\\r\\n     properties.setProperty(\\\"c\\\", \\\"nO\\\");\\r\\n     properties.setProperty(\\\"e\\\", \\\"TrUe\\\");\\r\\n-    try {\\r\\n-        CommandLine cmd = parser.parse(opts, null, properties);\\r\\n-        assertTrue(cmd.hasOption(\\\"a\\\"));\\r\\n-        assertTrue(!cmd.hasOption(\\\"c\\\"));\\r\\n-        assertTrue(cmd.hasOption(\\\"e\\\"));\\r\\n-    } catch (ParseException e) {\\r\\n-        fail(\\\"Cannot setUp() CommandLine: \\\" + e.toString());\\r\\n-    }\\r\\n+    cmd = parser.parse(opts, null, properties);\\r\\n+    assertTrue(cmd.hasOption(\\\"a\\\"));\\r\\n+    assertTrue(!cmd.hasOption(\\\"c\\\"));\\r\\n+    assertTrue(cmd.hasOption(\\\"e\\\"));\\r\\n     properties = new Properties();\\r\\n     properties.setProperty(\\\"a\\\", \\\"just a string\\\");\\r\\n     properties.setProperty(\\\"e\\\", \\\"\\\");\\r\\n-    try {\\r\\n-        CommandLine cmd = parser.parse(opts, null, properties);\\r\\n-        assertTrue(!cmd.hasOption(\\\"a\\\"));\\r\\n-        assertTrue(!cmd.hasOption(\\\"c\\\"));\\r\\n-        assertTrue(!cmd.hasOption(\\\"e\\\"));\\r\\n-    } catch (ParseException e) {\\r\\n-        fail(\\\"Cannot setUp() CommandLine: \\\" + e.toString());\\r\\n-    }\\r\\n+    cmd = parser.parse(opts, null, properties);\\r\\n+    assertTrue(!cmd.hasOption(\\\"a\\\"));\\r\\n+    assertTrue(!cmd.hasOption(\\\"c\\\"));\\r\\n+    assertTrue(!cmd.hasOption(\\\"e\\\"));\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"bayard@apache.org","authorName":"Henri Yandell","commitYear":"2007","diff":"\"@@ -1,50 +1,50 @@\\n public void testPropertyOptionFlags() {\\r\\n     Properties properties = new Properties();\\r\\n     properties.setProperty(\\\"a\\\", \\\"true\\\");\\r\\n     properties.setProperty(\\\"c\\\", \\\"yes\\\");\\r\\n     properties.setProperty(\\\"e\\\", \\\"1\\\");\\r\\n-    CommandLineParser parser = new PosixParser();\\r\\n+    Parser parser = new PosixParser();\\r\\n     try {\\r\\n         CommandLine cmd = parser.parse(opts, null, properties);\\r\\n         assertTrue(cmd.hasOption(\\\"a\\\"));\\r\\n         assertTrue(cmd.hasOption(\\\"c\\\"));\\r\\n         assertTrue(cmd.hasOption(\\\"e\\\"));\\r\\n     } catch (ParseException e) {\\r\\n         fail(\\\"Cannot setUp() CommandLine: \\\" + e.toString());\\r\\n     }\\r\\n     properties = new Properties();\\r\\n     properties.setProperty(\\\"a\\\", \\\"false\\\");\\r\\n     properties.setProperty(\\\"c\\\", \\\"no\\\");\\r\\n     properties.setProperty(\\\"e\\\", \\\"0\\\");\\r\\n     try {\\r\\n         CommandLine cmd = parser.parse(opts, null, properties);\\r\\n         assertTrue(!cmd.hasOption(\\\"a\\\"));\\r\\n         assertTrue(!cmd.hasOption(\\\"c\\\"));\\r\\n         assertTrue(!cmd.hasOption(\\\"e\\\"));\\r\\n     } catch (ParseException e) {\\r\\n         fail(\\\"Cannot setUp() CommandLine: \\\" + e.toString());\\r\\n     }\\r\\n     properties = new Properties();\\r\\n     properties.setProperty(\\\"a\\\", \\\"TRUE\\\");\\r\\n     properties.setProperty(\\\"c\\\", \\\"nO\\\");\\r\\n     properties.setProperty(\\\"e\\\", \\\"TrUe\\\");\\r\\n     try {\\r\\n         CommandLine cmd = parser.parse(opts, null, properties);\\r\\n         assertTrue(cmd.hasOption(\\\"a\\\"));\\r\\n         assertTrue(!cmd.hasOption(\\\"c\\\"));\\r\\n         assertTrue(cmd.hasOption(\\\"e\\\"));\\r\\n     } catch (ParseException e) {\\r\\n         fail(\\\"Cannot setUp() CommandLine: \\\" + e.toString());\\r\\n     }\\r\\n     properties = new Properties();\\r\\n     properties.setProperty(\\\"a\\\", \\\"just a string\\\");\\r\\n     properties.setProperty(\\\"e\\\", \\\"\\\");\\r\\n     try {\\r\\n         CommandLine cmd = parser.parse(opts, null, properties);\\r\\n         assertTrue(!cmd.hasOption(\\\"a\\\"));\\r\\n         assertTrue(!cmd.hasOption(\\\"c\\\"));\\r\\n         assertTrue(!cmd.hasOption(\\\"e\\\"));\\r\\n     } catch (ParseException e) {\\r\\n         fail(\\\"Cannot setUp() CommandLine: \\\" + e.toString());\\r\\n     }\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -1,13 +1,50 @@\\n-public void testPropertyValues() {\\r\\n+public void testPropertyOptionFlags() {\\r\\n     Properties properties = new Properties();\\r\\n-    properties.setProperty(\\\"hide\\\", \\\"seek\\\");\\r\\n+    properties.setProperty(\\\"a\\\", \\\"true\\\");\\r\\n+    properties.setProperty(\\\"c\\\", \\\"yes\\\");\\r\\n+    properties.setProperty(\\\"e\\\", \\\"1\\\");\\r\\n+    CommandLineParser parser = new PosixParser();\\r\\n     try {\\r\\n-        CommandLineParser parser = new PosixParser();\\r\\n         CommandLine cmd = parser.parse(opts, null, properties);\\r\\n-        assertTrue(cmd.hasOption(\\\"hide\\\"));\\r\\n-        assertEquals(\\\"seek\\\", cmd.getOptionValue(\\\"hide\\\"));\\r\\n-        assertTrue(!cmd.hasOption(\\\"fake\\\"));\\r\\n+        assertTrue(cmd.hasOption(\\\"a\\\"));\\r\\n+        assertTrue(cmd.hasOption(\\\"c\\\"));\\r\\n+        assertTrue(cmd.hasOption(\\\"e\\\"));\\r\\n+    } catch (ParseException e) {\\r\\n+        fail(\\\"Cannot setUp() CommandLine: \\\" + e.toString());\\r\\n+    }\\r\\n+    properties = new Properties();\\r\\n+    properties.setProperty(\\\"a\\\", \\\"false\\\");\\r\\n+    properties.setProperty(\\\"c\\\", \\\"no\\\");\\r\\n+    properties.setProperty(\\\"e\\\", \\\"0\\\");\\r\\n+    try {\\r\\n+        CommandLine cmd = parser.parse(opts, null, properties);\\r\\n+        assertTrue(!cmd.hasOption(\\\"a\\\"));\\r\\n+        assertTrue(!cmd.hasOption(\\\"c\\\"));\\r\\n+        assertTrue(!cmd.hasOption(\\\"e\\\"));\\r\\n+    } catch (ParseException e) {\\r\\n+        fail(\\\"Cannot setUp() CommandLine: \\\" + e.toString());\\r\\n+    }\\r\\n+    properties = new Properties();\\r\\n+    properties.setProperty(\\\"a\\\", \\\"TRUE\\\");\\r\\n+    properties.setProperty(\\\"c\\\", \\\"nO\\\");\\r\\n+    properties.setProperty(\\\"e\\\", \\\"TrUe\\\");\\r\\n+    try {\\r\\n+        CommandLine cmd = parser.parse(opts, null, properties);\\r\\n+        assertTrue(cmd.hasOption(\\\"a\\\"));\\r\\n+        assertTrue(!cmd.hasOption(\\\"c\\\"));\\r\\n+        assertTrue(cmd.hasOption(\\\"e\\\"));\\r\\n+    } catch (ParseException e) {\\r\\n+        fail(\\\"Cannot setUp() CommandLine: \\\" + e.toString());\\r\\n+    }\\r\\n+    properties = new Properties();\\r\\n+    properties.setProperty(\\\"a\\\", \\\"just a string\\\");\\r\\n+    properties.setProperty(\\\"e\\\", \\\"\\\");\\r\\n+    try {\\r\\n+        CommandLine cmd = parser.parse(opts, null, properties);\\r\\n+        assertTrue(!cmd.hasOption(\\\"a\\\"));\\r\\n+        assertTrue(!cmd.hasOption(\\\"c\\\"));\\r\\n+        assertTrue(!cmd.hasOption(\\\"e\\\"));\\r\\n     } catch (ParseException e) {\\r\\n         fail(\\\"Cannot setUp() CommandLine: \\\" + e.toString());\\r\\n     }\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -0,0 +1,13 @@\\n+public void testPropertyValues() {\\r\\n+    Properties properties = new Properties();\\r\\n+    properties.setProperty(\\\"hide\\\", \\\"seek\\\");\\r\\n+    try {\\r\\n+        CommandLineParser parser = new PosixParser();\\r\\n+        CommandLine cmd = parser.parse(opts, null, properties);\\r\\n+        assertTrue(cmd.hasOption(\\\"hide\\\"));\\r\\n+        assertEquals(\\\"seek\\\", cmd.getOptionValue(\\\"hide\\\"));\\r\\n+        assertTrue(!cmd.hasOption(\\\"fake\\\"));\\r\\n+    } catch (ParseException e) {\\r\\n+        fail(\\\"Cannot setUp() CommandLine: \\\" + e.toString());\\r\\n+    }\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\test\java\org\apache\commons\cli\AbstractParserTestCase.java	testPropertyOptionGroup	org.apache.commons.cli.AbstractParserTestCase.testPropertyOptionGroup()	638	663	1	[{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"@@ -1,21 +1,21 @@\\n @Test\\r\\n public void testPropertyOptionGroup() throws Exception {\\r\\n     final Options opts = new Options();\\r\\n     final OptionGroup group1 = new OptionGroup();\\r\\n     group1.addOption(new Option(\\\"a\\\", null));\\r\\n     group1.addOption(new Option(\\\"b\\\", null));\\r\\n     opts.addOptionGroup(group1);\\r\\n     final OptionGroup group2 = new OptionGroup();\\r\\n     group2.addOption(new Option(\\\"x\\\", null));\\r\\n     group2.addOption(new Option(\\\"y\\\", null));\\r\\n     opts.addOptionGroup(group2);\\r\\n-    final String[] args = new String[] { \\\"-a\\\" };\\r\\n+    final String[] args = { \\\"-a\\\" };\\r\\n     final Properties properties = new Properties();\\r\\n     properties.put(\\\"b\\\", \\\"true\\\");\\r\\n     properties.put(\\\"x\\\", \\\"true\\\");\\r\\n     final CommandLine cmd = parse(parser, opts, args, properties);\\r\\n     assertTrue(cmd.hasOption(\\\"a\\\"));\\r\\n     assertFalse(cmd.hasOption(\\\"b\\\"));\\r\\n     assertTrue(cmd.hasOption(\\\"x\\\"));\\r\\n     assertFalse(cmd.hasOption(\\\"y\\\"));\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2019","diff":"\"\""},{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,21 +1,21 @@\\n @Test\\r\\n public void testPropertyOptionGroup() throws Exception {\\r\\n-    Options opts = new Options();\\r\\n-    OptionGroup group1 = new OptionGroup();\\r\\n+    final Options opts = new Options();\\r\\n+    final OptionGroup group1 = new OptionGroup();\\r\\n     group1.addOption(new Option(\\\"a\\\", null));\\r\\n     group1.addOption(new Option(\\\"b\\\", null));\\r\\n     opts.addOptionGroup(group1);\\r\\n-    OptionGroup group2 = new OptionGroup();\\r\\n+    final OptionGroup group2 = new OptionGroup();\\r\\n     group2.addOption(new Option(\\\"x\\\", null));\\r\\n     group2.addOption(new Option(\\\"y\\\", null));\\r\\n     opts.addOptionGroup(group2);\\r\\n-    String[] args = new String[] { \\\"-a\\\" };\\r\\n-    Properties properties = new Properties();\\r\\n+    final String[] args = new String[] { \\\"-a\\\" };\\r\\n+    final Properties properties = new Properties();\\r\\n     properties.put(\\\"b\\\", \\\"true\\\");\\r\\n     properties.put(\\\"x\\\", \\\"true\\\");\\r\\n-    CommandLine cmd = parse(parser, opts, args, properties);\\r\\n+    final CommandLine cmd = parse(parser, opts, args, properties);\\r\\n     assertTrue(cmd.hasOption(\\\"a\\\"));\\r\\n     assertFalse(cmd.hasOption(\\\"b\\\"));\\r\\n     assertTrue(cmd.hasOption(\\\"x\\\"));\\r\\n     assertFalse(cmd.hasOption(\\\"y\\\"));\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"tn@apache.org","authorName":"Thomas Neidhart","commitYear":"2013","diff":"\"@@ -1,20 +1,21 @@\\n+@Test\\r\\n public void testPropertyOptionGroup() throws Exception {\\r\\n     Options opts = new Options();\\r\\n     OptionGroup group1 = new OptionGroup();\\r\\n     group1.addOption(new Option(\\\"a\\\", null));\\r\\n     group1.addOption(new Option(\\\"b\\\", null));\\r\\n     opts.addOptionGroup(group1);\\r\\n     OptionGroup group2 = new OptionGroup();\\r\\n     group2.addOption(new Option(\\\"x\\\", null));\\r\\n     group2.addOption(new Option(\\\"y\\\", null));\\r\\n     opts.addOptionGroup(group2);\\r\\n     String[] args = new String[] { \\\"-a\\\" };\\r\\n     Properties properties = new Properties();\\r\\n     properties.put(\\\"b\\\", \\\"true\\\");\\r\\n     properties.put(\\\"x\\\", \\\"true\\\");\\r\\n     CommandLine cmd = parse(parser, opts, args, properties);\\r\\n     assertTrue(cmd.hasOption(\\\"a\\\"));\\r\\n     assertFalse(cmd.hasOption(\\\"b\\\"));\\r\\n     assertTrue(cmd.hasOption(\\\"x\\\"));\\r\\n     assertFalse(cmd.hasOption(\\\"y\\\"));\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2010","diff":"\"@@ -0,0 +1,20 @@\\n+public void testPropertyOptionGroup() throws Exception {\\r\\n+    Options opts = new Options();\\r\\n+    OptionGroup group1 = new OptionGroup();\\r\\n+    group1.addOption(new Option(\\\"a\\\", null));\\r\\n+    group1.addOption(new Option(\\\"b\\\", null));\\r\\n+    opts.addOptionGroup(group1);\\r\\n+    OptionGroup group2 = new OptionGroup();\\r\\n+    group2.addOption(new Option(\\\"x\\\", null));\\r\\n+    group2.addOption(new Option(\\\"y\\\", null));\\r\\n+    opts.addOptionGroup(group2);\\r\\n+    String[] args = new String[] { \\\"-a\\\" };\\r\\n+    Properties properties = new Properties();\\r\\n+    properties.put(\\\"b\\\", \\\"true\\\");\\r\\n+    properties.put(\\\"x\\\", \\\"true\\\");\\r\\n+    CommandLine cmd = parse(parser, opts, args, properties);\\r\\n+    assertTrue(cmd.hasOption(\\\"a\\\"));\\r\\n+    assertFalse(cmd.hasOption(\\\"b\\\"));\\r\\n+    assertTrue(cmd.hasOption(\\\"x\\\"));\\r\\n+    assertFalse(cmd.hasOption(\\\"y\\\"));\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\test\java\org\apache\commons\cli\AbstractParserTestCase.java	testPropertyOptionMultipleValues	org.apache.commons.cli.AbstractParserTestCase.testPropertyOptionMultipleValues()	666	678	1	[{"authorEmail":"arturobernalg@gmail.com","authorName":"Arturo Bernal","commitYear":"2021","diff":"\"@@ -1,11 +1,11 @@\\n @Test\\r\\n public void testPropertyOptionMultipleValues() throws Exception {\\r\\n     final Options opts = new Options();\\r\\n     opts.addOption(OptionBuilder.hasArgs().withValueSeparator(',').create('k'));\\r\\n     final Properties properties = new Properties();\\r\\n     properties.setProperty(\\\"k\\\", \\\"one,two\\\");\\r\\n     final String[] values = { \\\"one\\\", \\\"two\\\" };\\r\\n     final CommandLine cmd = parse(parser, opts, null, properties);\\r\\n     assertTrue(cmd.hasOption(\\\"k\\\"));\\r\\n-    assertTrue(Arrays.equals(values, cmd.getOptionValues('k')));\\r\\n+    assertArrayEquals(values, cmd.getOptionValues('k'));\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"@@ -1,11 +1,11 @@\\n @Test\\r\\n public void testPropertyOptionMultipleValues() throws Exception {\\r\\n     final Options opts = new Options();\\r\\n     opts.addOption(OptionBuilder.hasArgs().withValueSeparator(',').create('k'));\\r\\n     final Properties properties = new Properties();\\r\\n     properties.setProperty(\\\"k\\\", \\\"one,two\\\");\\r\\n-    final String[] values = new String[] { \\\"one\\\", \\\"two\\\" };\\r\\n+    final String[] values = { \\\"one\\\", \\\"two\\\" };\\r\\n     final CommandLine cmd = parse(parser, opts, null, properties);\\r\\n     assertTrue(cmd.hasOption(\\\"k\\\"));\\r\\n     assertTrue(Arrays.equals(values, cmd.getOptionValues('k')));\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2019","diff":"\"\""},{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,11 +1,11 @@\\n @Test\\r\\n public void testPropertyOptionMultipleValues() throws Exception {\\r\\n-    Options opts = new Options();\\r\\n+    final Options opts = new Options();\\r\\n     opts.addOption(OptionBuilder.hasArgs().withValueSeparator(',').create('k'));\\r\\n-    Properties properties = new Properties();\\r\\n+    final Properties properties = new Properties();\\r\\n     properties.setProperty(\\\"k\\\", \\\"one,two\\\");\\r\\n-    String[] values = new String[] { \\\"one\\\", \\\"two\\\" };\\r\\n-    CommandLine cmd = parse(parser, opts, null, properties);\\r\\n+    final String[] values = new String[] { \\\"one\\\", \\\"two\\\" };\\r\\n+    final CommandLine cmd = parse(parser, opts, null, properties);\\r\\n     assertTrue(cmd.hasOption(\\\"k\\\"));\\r\\n     assertTrue(Arrays.equals(values, cmd.getOptionValues('k')));\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"tn@apache.org","authorName":"Thomas Neidhart","commitYear":"2013","diff":"\"@@ -1,10 +1,11 @@\\n+@Test\\r\\n public void testPropertyOptionMultipleValues() throws Exception {\\r\\n     Options opts = new Options();\\r\\n     opts.addOption(OptionBuilder.hasArgs().withValueSeparator(',').create('k'));\\r\\n     Properties properties = new Properties();\\r\\n     properties.setProperty(\\\"k\\\", \\\"one,two\\\");\\r\\n     String[] values = new String[] { \\\"one\\\", \\\"two\\\" };\\r\\n     CommandLine cmd = parse(parser, opts, null, properties);\\r\\n     assertTrue(cmd.hasOption(\\\"k\\\"));\\r\\n     assertTrue(Arrays.equals(values, cmd.getOptionValues('k')));\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2010","diff":"\"@@ -1,9 +1,10 @@\\n public void testPropertyOptionMultipleValues() throws Exception {\\r\\n+    Options opts = new Options();\\r\\n+    opts.addOption(OptionBuilder.hasArgs().withValueSeparator(',').create('k'));\\r\\n     Properties properties = new Properties();\\r\\n     properties.setProperty(\\\"k\\\", \\\"one,two\\\");\\r\\n-    Parser parser = new PosixParser();\\r\\n     String[] values = new String[] { \\\"one\\\", \\\"two\\\" };\\r\\n-    CommandLine cmd = parser.parse(opts, null, properties);\\r\\n+    CommandLine cmd = parse(parser, opts, null, properties);\\r\\n     assertTrue(cmd.hasOption(\\\"k\\\"));\\r\\n     assertTrue(Arrays.equals(values, cmd.getOptionValues('k')));\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2008","diff":"\"@@ -1,13 +1,9 @@\\n-public void testPropertyOptionMultipleValues() {\\r\\n+public void testPropertyOptionMultipleValues() throws Exception {\\r\\n     Properties properties = new Properties();\\r\\n     properties.setProperty(\\\"k\\\", \\\"one,two\\\");\\r\\n     Parser parser = new PosixParser();\\r\\n     String[] values = new String[] { \\\"one\\\", \\\"two\\\" };\\r\\n-    try {\\r\\n-        CommandLine cmd = parser.parse(opts, null, properties);\\r\\n-        assertTrue(cmd.hasOption(\\\"k\\\"));\\r\\n-        assertTrue(Arrays.equals(values, cmd.getOptionValues('k')));\\r\\n-    } catch (ParseException e) {\\r\\n-        fail(\\\"Cannot setUp() CommandLine: \\\" + e.toString());\\r\\n-    }\\r\\n+    CommandLine cmd = parser.parse(opts, null, properties);\\r\\n+    assertTrue(cmd.hasOption(\\\"k\\\"));\\r\\n+    assertTrue(Arrays.equals(values, cmd.getOptionValues('k')));\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"bayard@apache.org","authorName":"Henri Yandell","commitYear":"2007","diff":"\"@@ -1,13 +1,13 @@\\n public void testPropertyOptionMultipleValues() {\\r\\n     Properties properties = new Properties();\\r\\n     properties.setProperty(\\\"k\\\", \\\"one,two\\\");\\r\\n-    CommandLineParser parser = new PosixParser();\\r\\n+    Parser parser = new PosixParser();\\r\\n     String[] values = new String[] { \\\"one\\\", \\\"two\\\" };\\r\\n     try {\\r\\n         CommandLine cmd = parser.parse(opts, null, properties);\\r\\n         assertTrue(cmd.hasOption(\\\"k\\\"));\\r\\n         assertTrue(Arrays.equals(values, cmd.getOptionValues('k')));\\r\\n     } catch (ParseException e) {\\r\\n         fail(\\\"Cannot setUp() CommandLine: \\\" + e.toString());\\r\\n     }\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -1,13 +1,13 @@\\n-public void testPropertyValues() {\\r\\n+public void testPropertyOptionMultipleValues() {\\r\\n     Properties properties = new Properties();\\r\\n-    properties.setProperty(\\\"hide\\\", \\\"seek\\\");\\r\\n+    properties.setProperty(\\\"k\\\", \\\"one,two\\\");\\r\\n+    CommandLineParser parser = new PosixParser();\\r\\n+    String[] values = new String[] { \\\"one\\\", \\\"two\\\" };\\r\\n     try {\\r\\n-        CommandLineParser parser = new PosixParser();\\r\\n         CommandLine cmd = parser.parse(opts, null, properties);\\r\\n-        assertTrue(cmd.hasOption(\\\"hide\\\"));\\r\\n-        assertEquals(\\\"seek\\\", cmd.getOptionValue(\\\"hide\\\"));\\r\\n-        assertTrue(!cmd.hasOption(\\\"fake\\\"));\\r\\n+        assertTrue(cmd.hasOption(\\\"k\\\"));\\r\\n+        assertTrue(Arrays.equals(values, cmd.getOptionValues('k')));\\r\\n     } catch (ParseException e) {\\r\\n         fail(\\\"Cannot setUp() CommandLine: \\\" + e.toString());\\r\\n     }\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -0,0 +1,13 @@\\n+public void testPropertyValues() {\\r\\n+    Properties properties = new Properties();\\r\\n+    properties.setProperty(\\\"hide\\\", \\\"seek\\\");\\r\\n+    try {\\r\\n+        CommandLineParser parser = new PosixParser();\\r\\n+        CommandLine cmd = parser.parse(opts, null, properties);\\r\\n+        assertTrue(cmd.hasOption(\\\"hide\\\"));\\r\\n+        assertEquals(\\\"seek\\\", cmd.getOptionValue(\\\"hide\\\"));\\r\\n+        assertTrue(!cmd.hasOption(\\\"fake\\\"));\\r\\n+    } catch (ParseException e) {\\r\\n+        fail(\\\"Cannot setUp() CommandLine: \\\" + e.toString());\\r\\n+    }\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\test\java\org\apache\commons\cli\AbstractParserTestCase.java	testPropertyOptionRequired	org.apache.commons.cli.AbstractParserTestCase.testPropertyOptionRequired()	681	690	1	[{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2019","diff":"\"\""},{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,9 +1,9 @@\\n @Test\\r\\n public void testPropertyOptionRequired() throws Exception {\\r\\n-    Options opts = new Options();\\r\\n+    final Options opts = new Options();\\r\\n     opts.addOption(OptionBuilder.isRequired().create(\\\"f\\\"));\\r\\n-    Properties properties = new Properties();\\r\\n+    final Properties properties = new Properties();\\r\\n     properties.setProperty(\\\"f\\\", \\\"true\\\");\\r\\n-    CommandLine cmd = parse(parser, opts, null, properties);\\r\\n+    final CommandLine cmd = parse(parser, opts, null, properties);\\r\\n     assertTrue(cmd.hasOption(\\\"f\\\"));\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"tn@apache.org","authorName":"Thomas Neidhart","commitYear":"2013","diff":"\"@@ -1,8 +1,9 @@\\n+@Test\\r\\n public void testPropertyOptionRequired() throws Exception {\\r\\n     Options opts = new Options();\\r\\n     opts.addOption(OptionBuilder.isRequired().create(\\\"f\\\"));\\r\\n     Properties properties = new Properties();\\r\\n     properties.setProperty(\\\"f\\\", \\\"true\\\");\\r\\n     CommandLine cmd = parse(parser, opts, null, properties);\\r\\n     assertTrue(cmd.hasOption(\\\"f\\\"));\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2010","diff":"\"@@ -0,0 +1,8 @@\\n+public void testPropertyOptionRequired() throws Exception {\\r\\n+    Options opts = new Options();\\r\\n+    opts.addOption(OptionBuilder.isRequired().create(\\\"f\\\"));\\r\\n+    Properties properties = new Properties();\\r\\n+    properties.setProperty(\\\"f\\\", \\\"true\\\");\\r\\n+    CommandLine cmd = parse(parser, opts, null, properties);\\r\\n+    assertTrue(cmd.hasOption(\\\"f\\\"));\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\test\java\org\apache\commons\cli\AbstractParserTestCase.java	testPropertyOptionSingularValue	org.apache.commons.cli.AbstractParserTestCase.testPropertyOptionSingularValue()	693	704	1	[{"authorEmail":"arturobernalg@gmail.com","authorName":"Arturo Bernal","commitYear":"2021","diff":"\"@@ -1,11 +1,11 @@\\n @Test\\r\\n public void testPropertyOptionSingularValue() throws Exception {\\r\\n     final Options opts = new Options();\\r\\n     opts.addOption(OptionBuilder.hasOptionalArgs(2).withLongOpt(\\\"hide\\\").create());\\r\\n     final Properties properties = new Properties();\\r\\n     properties.setProperty(\\\"hide\\\", \\\"seek\\\");\\r\\n     final CommandLine cmd = parse(parser, opts, null, properties);\\r\\n     assertTrue(cmd.hasOption(\\\"hide\\\"));\\r\\n     assertEquals(\\\"seek\\\", cmd.getOptionValue(\\\"hide\\\"));\\r\\n-    assertTrue(!cmd.hasOption(\\\"fake\\\"));\\r\\n+    assertFalse(cmd.hasOption(\\\"fake\\\"));\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"\""},{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2019","diff":"\"\""},{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,11 +1,11 @@\\n @Test\\r\\n public void testPropertyOptionSingularValue() throws Exception {\\r\\n-    Options opts = new Options();\\r\\n+    final Options opts = new Options();\\r\\n     opts.addOption(OptionBuilder.hasOptionalArgs(2).withLongOpt(\\\"hide\\\").create());\\r\\n-    Properties properties = new Properties();\\r\\n+    final Properties properties = new Properties();\\r\\n     properties.setProperty(\\\"hide\\\", \\\"seek\\\");\\r\\n-    CommandLine cmd = parse(parser, opts, null, properties);\\r\\n+    final CommandLine cmd = parse(parser, opts, null, properties);\\r\\n     assertTrue(cmd.hasOption(\\\"hide\\\"));\\r\\n     assertEquals(\\\"seek\\\", cmd.getOptionValue(\\\"hide\\\"));\\r\\n     assertTrue(!cmd.hasOption(\\\"fake\\\"));\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"tn@apache.org","authorName":"Thomas Neidhart","commitYear":"2013","diff":"\"@@ -1,10 +1,11 @@\\n+@Test\\r\\n public void testPropertyOptionSingularValue() throws Exception {\\r\\n     Options opts = new Options();\\r\\n     opts.addOption(OptionBuilder.hasOptionalArgs(2).withLongOpt(\\\"hide\\\").create());\\r\\n     Properties properties = new Properties();\\r\\n     properties.setProperty(\\\"hide\\\", \\\"seek\\\");\\r\\n     CommandLine cmd = parse(parser, opts, null, properties);\\r\\n     assertTrue(cmd.hasOption(\\\"hide\\\"));\\r\\n     assertEquals(\\\"seek\\\", cmd.getOptionValue(\\\"hide\\\"));\\r\\n     assertTrue(!cmd.hasOption(\\\"fake\\\"));\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2010","diff":"\"@@ -1,9 +1,10 @@\\n public void testPropertyOptionSingularValue() throws Exception {\\r\\n+    Options opts = new Options();\\r\\n+    opts.addOption(OptionBuilder.hasOptionalArgs(2).withLongOpt(\\\"hide\\\").create());\\r\\n     Properties properties = new Properties();\\r\\n     properties.setProperty(\\\"hide\\\", \\\"seek\\\");\\r\\n-    Parser parser = new PosixParser();\\r\\n-    CommandLine cmd = parser.parse(opts, null, properties);\\r\\n+    CommandLine cmd = parse(parser, opts, null, properties);\\r\\n     assertTrue(cmd.hasOption(\\\"hide\\\"));\\r\\n     assertEquals(\\\"seek\\\", cmd.getOptionValue(\\\"hide\\\"));\\r\\n     assertTrue(!cmd.hasOption(\\\"fake\\\"));\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2008","diff":"\"@@ -1,13 +1,9 @@\\n-public void testPropertyOptionSingularValue() {\\r\\n+public void testPropertyOptionSingularValue() throws Exception {\\r\\n     Properties properties = new Properties();\\r\\n     properties.setProperty(\\\"hide\\\", \\\"seek\\\");\\r\\n     Parser parser = new PosixParser();\\r\\n-    try {\\r\\n-        CommandLine cmd = parser.parse(opts, null, properties);\\r\\n-        assertTrue(cmd.hasOption(\\\"hide\\\"));\\r\\n-        assertEquals(\\\"seek\\\", cmd.getOptionValue(\\\"hide\\\"));\\r\\n-        assertTrue(!cmd.hasOption(\\\"fake\\\"));\\r\\n-    } catch (ParseException e) {\\r\\n-        fail(\\\"Cannot setUp() CommandLine: \\\" + e.toString());\\r\\n-    }\\r\\n+    CommandLine cmd = parser.parse(opts, null, properties);\\r\\n+    assertTrue(cmd.hasOption(\\\"hide\\\"));\\r\\n+    assertEquals(\\\"seek\\\", cmd.getOptionValue(\\\"hide\\\"));\\r\\n+    assertTrue(!cmd.hasOption(\\\"fake\\\"));\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"bayard@apache.org","authorName":"Henri Yandell","commitYear":"2007","diff":"\"@@ -1,13 +1,13 @@\\n public void testPropertyOptionSingularValue() {\\r\\n     Properties properties = new Properties();\\r\\n     properties.setProperty(\\\"hide\\\", \\\"seek\\\");\\r\\n-    CommandLineParser parser = new PosixParser();\\r\\n+    Parser parser = new PosixParser();\\r\\n     try {\\r\\n         CommandLine cmd = parser.parse(opts, null, properties);\\r\\n         assertTrue(cmd.hasOption(\\\"hide\\\"));\\r\\n         assertEquals(\\\"seek\\\", cmd.getOptionValue(\\\"hide\\\"));\\r\\n         assertTrue(!cmd.hasOption(\\\"fake\\\"));\\r\\n     } catch (ParseException e) {\\r\\n         fail(\\\"Cannot setUp() CommandLine: \\\" + e.toString());\\r\\n     }\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -1,13 +1,13 @@\\n-public void testPropertyValues() {\\r\\n+public void testPropertyOptionSingularValue() {\\r\\n     Properties properties = new Properties();\\r\\n     properties.setProperty(\\\"hide\\\", \\\"seek\\\");\\r\\n+    CommandLineParser parser = new PosixParser();\\r\\n     try {\\r\\n-        CommandLineParser parser = new PosixParser();\\r\\n         CommandLine cmd = parser.parse(opts, null, properties);\\r\\n         assertTrue(cmd.hasOption(\\\"hide\\\"));\\r\\n         assertEquals(\\\"seek\\\", cmd.getOptionValue(\\\"hide\\\"));\\r\\n         assertTrue(!cmd.hasOption(\\\"fake\\\"));\\r\\n     } catch (ParseException e) {\\r\\n         fail(\\\"Cannot setUp() CommandLine: \\\" + e.toString());\\r\\n     }\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -0,0 +1,13 @@\\n+public void testPropertyValues() {\\r\\n+    Properties properties = new Properties();\\r\\n+    properties.setProperty(\\\"hide\\\", \\\"seek\\\");\\r\\n+    try {\\r\\n+        CommandLineParser parser = new PosixParser();\\r\\n+        CommandLine cmd = parser.parse(opts, null, properties);\\r\\n+        assertTrue(cmd.hasOption(\\\"hide\\\"));\\r\\n+        assertEquals(\\\"seek\\\", cmd.getOptionValue(\\\"hide\\\"));\\r\\n+        assertTrue(!cmd.hasOption(\\\"fake\\\"));\\r\\n+    } catch (ParseException e) {\\r\\n+        fail(\\\"Cannot setUp() CommandLine: \\\" + e.toString());\\r\\n+    }\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\test\java\org\apache\commons\cli\AbstractParserTestCase.java	testPropertyOptionUnexpected	org.apache.commons.cli.AbstractParserTestCase.testPropertyOptionUnexpected()	707	719	3	[{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2019","diff":"\"\""},{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,11 +1,11 @@\\n @Test\\r\\n public void testPropertyOptionUnexpected() throws Exception {\\r\\n-    Options opts = new Options();\\r\\n-    Properties properties = new Properties();\\r\\n+    final Options opts = new Options();\\r\\n+    final Properties properties = new Properties();\\r\\n     properties.setProperty(\\\"f\\\", \\\"true\\\");\\r\\n     try {\\r\\n         parse(parser, opts, null, properties);\\r\\n         fail(\\\"UnrecognizedOptionException expected\\\");\\r\\n-    } catch (UnrecognizedOptionException e) {\\r\\n+    } catch (final UnrecognizedOptionException e) {\\r\\n     }\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"tn@apache.org","authorName":"Thomas Neidhart","commitYear":"2013","diff":"\"@@ -1,10 +1,11 @@\\n+@Test\\r\\n public void testPropertyOptionUnexpected() throws Exception {\\r\\n     Options opts = new Options();\\r\\n     Properties properties = new Properties();\\r\\n     properties.setProperty(\\\"f\\\", \\\"true\\\");\\r\\n     try {\\r\\n         parse(parser, opts, null, properties);\\r\\n         fail(\\\"UnrecognizedOptionException expected\\\");\\r\\n     } catch (UnrecognizedOptionException e) {\\r\\n     }\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2010","diff":"\"@@ -0,0 +1,10 @@\\n+public void testPropertyOptionUnexpected() throws Exception {\\r\\n+    Options opts = new Options();\\r\\n+    Properties properties = new Properties();\\r\\n+    properties.setProperty(\\\"f\\\", \\\"true\\\");\\r\\n+    try {\\r\\n+        parse(parser, opts, null, properties);\\r\\n+        fail(\\\"UnrecognizedOptionException expected\\\");\\r\\n+    } catch (UnrecognizedOptionException e) {\\r\\n+    }\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\test\java\org\apache\commons\cli\AbstractParserTestCase.java	testPropertyOverrideValues	org.apache.commons.cli.AbstractParserTestCase.testPropertyOverrideValues()	722	738	1	[{"authorEmail":"arturobernalg@gmail.com","authorName":"Arturo Bernal","commitYear":"2021","diff":"\"@@ -1,15 +1,15 @@\\n @Test\\r\\n public void testPropertyOverrideValues() throws Exception {\\r\\n     final Options opts = new Options();\\r\\n     opts.addOption(OptionBuilder.hasOptionalArgs(2).create('i'));\\r\\n     opts.addOption(OptionBuilder.hasOptionalArgs().create('j'));\\r\\n     final String[] args = { \\\"-j\\\", \\\"found\\\", \\\"-i\\\", \\\"ink\\\" };\\r\\n     final Properties properties = new Properties();\\r\\n     properties.setProperty(\\\"j\\\", \\\"seek\\\");\\r\\n     final CommandLine cmd = parse(parser, opts, args, properties);\\r\\n     assertTrue(cmd.hasOption(\\\"j\\\"));\\r\\n     assertEquals(\\\"found\\\", cmd.getOptionValue(\\\"j\\\"));\\r\\n     assertTrue(cmd.hasOption(\\\"i\\\"));\\r\\n     assertEquals(\\\"ink\\\", cmd.getOptionValue(\\\"i\\\"));\\r\\n-    assertTrue(!cmd.hasOption(\\\"fake\\\"));\\r\\n+    assertFalse(cmd.hasOption(\\\"fake\\\"));\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"@@ -1,15 +1,15 @@\\n @Test\\r\\n public void testPropertyOverrideValues() throws Exception {\\r\\n     final Options opts = new Options();\\r\\n     opts.addOption(OptionBuilder.hasOptionalArgs(2).create('i'));\\r\\n     opts.addOption(OptionBuilder.hasOptionalArgs().create('j'));\\r\\n-    final String[] args = new String[] { \\\"-j\\\", \\\"found\\\", \\\"-i\\\", \\\"ink\\\" };\\r\\n+    final String[] args = { \\\"-j\\\", \\\"found\\\", \\\"-i\\\", \\\"ink\\\" };\\r\\n     final Properties properties = new Properties();\\r\\n     properties.setProperty(\\\"j\\\", \\\"seek\\\");\\r\\n     final CommandLine cmd = parse(parser, opts, args, properties);\\r\\n     assertTrue(cmd.hasOption(\\\"j\\\"));\\r\\n     assertEquals(\\\"found\\\", cmd.getOptionValue(\\\"j\\\"));\\r\\n     assertTrue(cmd.hasOption(\\\"i\\\"));\\r\\n     assertEquals(\\\"ink\\\", cmd.getOptionValue(\\\"i\\\"));\\r\\n     assertTrue(!cmd.hasOption(\\\"fake\\\"));\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2019","diff":"\"\""},{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,15 +1,15 @@\\n @Test\\r\\n public void testPropertyOverrideValues() throws Exception {\\r\\n-    Options opts = new Options();\\r\\n+    final Options opts = new Options();\\r\\n     opts.addOption(OptionBuilder.hasOptionalArgs(2).create('i'));\\r\\n     opts.addOption(OptionBuilder.hasOptionalArgs().create('j'));\\r\\n-    String[] args = new String[] { \\\"-j\\\", \\\"found\\\", \\\"-i\\\", \\\"ink\\\" };\\r\\n-    Properties properties = new Properties();\\r\\n+    final String[] args = new String[] { \\\"-j\\\", \\\"found\\\", \\\"-i\\\", \\\"ink\\\" };\\r\\n+    final Properties properties = new Properties();\\r\\n     properties.setProperty(\\\"j\\\", \\\"seek\\\");\\r\\n-    CommandLine cmd = parse(parser, opts, args, properties);\\r\\n+    final CommandLine cmd = parse(parser, opts, args, properties);\\r\\n     assertTrue(cmd.hasOption(\\\"j\\\"));\\r\\n     assertEquals(\\\"found\\\", cmd.getOptionValue(\\\"j\\\"));\\r\\n     assertTrue(cmd.hasOption(\\\"i\\\"));\\r\\n     assertEquals(\\\"ink\\\", cmd.getOptionValue(\\\"i\\\"));\\r\\n     assertTrue(!cmd.hasOption(\\\"fake\\\"));\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"tn@apache.org","authorName":"Thomas Neidhart","commitYear":"2013","diff":"\"@@ -1,14 +1,15 @@\\n+@Test\\r\\n public void testPropertyOverrideValues() throws Exception {\\r\\n     Options opts = new Options();\\r\\n     opts.addOption(OptionBuilder.hasOptionalArgs(2).create('i'));\\r\\n     opts.addOption(OptionBuilder.hasOptionalArgs().create('j'));\\r\\n     String[] args = new String[] { \\\"-j\\\", \\\"found\\\", \\\"-i\\\", \\\"ink\\\" };\\r\\n     Properties properties = new Properties();\\r\\n     properties.setProperty(\\\"j\\\", \\\"seek\\\");\\r\\n     CommandLine cmd = parse(parser, opts, args, properties);\\r\\n     assertTrue(cmd.hasOption(\\\"j\\\"));\\r\\n     assertEquals(\\\"found\\\", cmd.getOptionValue(\\\"j\\\"));\\r\\n     assertTrue(cmd.hasOption(\\\"i\\\"));\\r\\n     assertEquals(\\\"ink\\\", cmd.getOptionValue(\\\"i\\\"));\\r\\n     assertTrue(!cmd.hasOption(\\\"fake\\\"));\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2010","diff":"\"@@ -1,12 +1,14 @@\\n public void testPropertyOverrideValues() throws Exception {\\r\\n+    Options opts = new Options();\\r\\n+    opts.addOption(OptionBuilder.hasOptionalArgs(2).create('i'));\\r\\n+    opts.addOption(OptionBuilder.hasOptionalArgs().create('j'));\\r\\n     String[] args = new String[] { \\\"-j\\\", \\\"found\\\", \\\"-i\\\", \\\"ink\\\" };\\r\\n     Properties properties = new Properties();\\r\\n     properties.setProperty(\\\"j\\\", \\\"seek\\\");\\r\\n-    Parser parser = new PosixParser();\\r\\n-    CommandLine cmd = parser.parse(opts, args, properties);\\r\\n+    CommandLine cmd = parse(parser, opts, args, properties);\\r\\n     assertTrue(cmd.hasOption(\\\"j\\\"));\\r\\n     assertEquals(\\\"found\\\", cmd.getOptionValue(\\\"j\\\"));\\r\\n     assertTrue(cmd.hasOption(\\\"i\\\"));\\r\\n     assertEquals(\\\"ink\\\", cmd.getOptionValue(\\\"i\\\"));\\r\\n     assertTrue(!cmd.hasOption(\\\"fake\\\"));\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2008","diff":"\"@@ -1,16 +1,12 @@\\n-public void testPropertyOverrideValues() {\\r\\n+public void testPropertyOverrideValues() throws Exception {\\r\\n     String[] args = new String[] { \\\"-j\\\", \\\"found\\\", \\\"-i\\\", \\\"ink\\\" };\\r\\n     Properties properties = new Properties();\\r\\n     properties.setProperty(\\\"j\\\", \\\"seek\\\");\\r\\n-    try {\\r\\n-        Parser parser = new PosixParser();\\r\\n-        CommandLine cmd = parser.parse(opts, args, properties);\\r\\n-        assertTrue(cmd.hasOption(\\\"j\\\"));\\r\\n-        assertEquals(\\\"found\\\", cmd.getOptionValue(\\\"j\\\"));\\r\\n-        assertTrue(cmd.hasOption(\\\"i\\\"));\\r\\n-        assertEquals(\\\"ink\\\", cmd.getOptionValue(\\\"i\\\"));\\r\\n-        assertTrue(!cmd.hasOption(\\\"fake\\\"));\\r\\n-    } catch (ParseException e) {\\r\\n-        fail(\\\"Cannot setUp() CommandLine: \\\" + e.toString());\\r\\n-    }\\r\\n+    Parser parser = new PosixParser();\\r\\n+    CommandLine cmd = parser.parse(opts, args, properties);\\r\\n+    assertTrue(cmd.hasOption(\\\"j\\\"));\\r\\n+    assertEquals(\\\"found\\\", cmd.getOptionValue(\\\"j\\\"));\\r\\n+    assertTrue(cmd.hasOption(\\\"i\\\"));\\r\\n+    assertEquals(\\\"ink\\\", cmd.getOptionValue(\\\"i\\\"));\\r\\n+    assertTrue(!cmd.hasOption(\\\"fake\\\"));\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"bayard@apache.org","authorName":"Henri Yandell","commitYear":"2007","diff":"\"@@ -1,16 +1,16 @@\\n public void testPropertyOverrideValues() {\\r\\n     String[] args = new String[] { \\\"-j\\\", \\\"found\\\", \\\"-i\\\", \\\"ink\\\" };\\r\\n     Properties properties = new Properties();\\r\\n     properties.setProperty(\\\"j\\\", \\\"seek\\\");\\r\\n     try {\\r\\n-        CommandLineParser parser = new PosixParser();\\r\\n+        Parser parser = new PosixParser();\\r\\n         CommandLine cmd = parser.parse(opts, args, properties);\\r\\n         assertTrue(cmd.hasOption(\\\"j\\\"));\\r\\n         assertEquals(\\\"found\\\", cmd.getOptionValue(\\\"j\\\"));\\r\\n         assertTrue(cmd.hasOption(\\\"i\\\"));\\r\\n         assertEquals(\\\"ink\\\", cmd.getOptionValue(\\\"i\\\"));\\r\\n         assertTrue(!cmd.hasOption(\\\"fake\\\"));\\r\\n     } catch (ParseException e) {\\r\\n         fail(\\\"Cannot setUp() CommandLine: \\\" + e.toString());\\r\\n     }\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -0,0 +1,16 @@\\n+public void testPropertyOverrideValues() {\\r\\n+    String[] args = new String[] { \\\"-j\\\", \\\"found\\\", \\\"-i\\\", \\\"ink\\\" };\\r\\n+    Properties properties = new Properties();\\r\\n+    properties.setProperty(\\\"j\\\", \\\"seek\\\");\\r\\n+    try {\\r\\n+        CommandLineParser parser = new PosixParser();\\r\\n+        CommandLine cmd = parser.parse(opts, args, properties);\\r\\n+        assertTrue(cmd.hasOption(\\\"j\\\"));\\r\\n+        assertEquals(\\\"found\\\", cmd.getOptionValue(\\\"j\\\"));\\r\\n+        assertTrue(cmd.hasOption(\\\"i\\\"));\\r\\n+        assertEquals(\\\"ink\\\", cmd.getOptionValue(\\\"i\\\"));\\r\\n+        assertTrue(!cmd.hasOption(\\\"fake\\\"));\\r\\n+    } catch (ParseException e) {\\r\\n+        fail(\\\"Cannot setUp() CommandLine: \\\" + e.toString());\\r\\n+    }\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\test\java\org\apache\commons\cli\AbstractParserTestCase.java	testReuseOptionsTwice	org.apache.commons.cli.AbstractParserTestCase.testReuseOptionsTwice()	741	755	3	[{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"\""},{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,11 +1,11 @@\\n @Test\\r\\n public void testReuseOptionsTwice() throws Exception {\\r\\n-    Options opts = new Options();\\r\\n+    final Options opts = new Options();\\r\\n     opts.addOption(OptionBuilder.isRequired().create('v'));\\r\\n     parser.parse(opts, new String[] { \\\"-v\\\" });\\r\\n     try {\\r\\n         parser.parse(opts, new String[0]);\\r\\n         fail(\\\"MissingOptionException not thrown\\\");\\r\\n-    } catch (MissingOptionException e) {\\r\\n+    } catch (final MissingOptionException e) {\\r\\n     }\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"tn@apache.org","authorName":"Thomas Neidhart","commitYear":"2013","diff":"\"@@ -1,10 +1,11 @@\\n+@Test\\r\\n public void testReuseOptionsTwice() throws Exception {\\r\\n     Options opts = new Options();\\r\\n     opts.addOption(OptionBuilder.isRequired().create('v'));\\r\\n     parser.parse(opts, new String[] { \\\"-v\\\" });\\r\\n     try {\\r\\n         parser.parse(opts, new String[0]);\\r\\n         fail(\\\"MissingOptionException not thrown\\\");\\r\\n     } catch (MissingOptionException e) {\\r\\n     }\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"sebb@apache.org","authorName":"Sebastian Bazley","commitYear":"2010","diff":"\"\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2009","diff":"\"@@ -1,11 +1,10 @@\\n public void testReuseOptionsTwice() throws Exception {\\r\\n     Options opts = new Options();\\r\\n     opts.addOption(OptionBuilder.isRequired().create('v'));\\r\\n-    GnuParser parser = new GnuParser();\\r\\n     parser.parse(opts, new String[] { \\\"-v\\\" });\\r\\n     try {\\r\\n         parser.parse(opts, new String[0]);\\r\\n         fail(\\\"MissingOptionException not thrown\\\");\\r\\n     } catch (MissingOptionException e) {\\r\\n     }\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2008","diff":"\"@@ -0,0 +1,11 @@\\n+public void testReuseOptionsTwice() throws Exception {\\r\\n+    Options opts = new Options();\\r\\n+    opts.addOption(OptionBuilder.isRequired().create('v'));\\r\\n+    GnuParser parser = new GnuParser();\\r\\n+    parser.parse(opts, new String[] { \\\"-v\\\" });\\r\\n+    try {\\r\\n+        parser.parse(opts, new String[0]);\\r\\n+        fail(\\\"MissingOptionException not thrown\\\");\\r\\n+    } catch (MissingOptionException e) {\\r\\n+    }\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\test\java\org\apache\commons\cli\AbstractParserTestCase.java	testShortOptionConcatenatedQuoteHandling	org.apache.commons.cli.AbstractParserTestCase.testShortOptionConcatenatedQuoteHandling()	758	764	1	[{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"@@ -1,6 +1,6 @@\\n @Test\\r\\n public void testShortOptionConcatenatedQuoteHandling() throws Exception {\\r\\n-    final String[] args = new String[] { \\\"-b\\\\\\\"quoted string\\\\\\\"\\\" };\\r\\n+    final String[] args = { \\\"-b\\\\\\\"quoted string\\\\\\\"\\\" };\\r\\n     final CommandLine cl = parser.parse(options, args);\\r\\n     assertEquals(\\\"Confirm -b\\\\\\\"arg\\\\\\\" strips quotes\\\", \\\"quoted string\\\", cl.getOptionValue(\\\"b\\\"));\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"stoty@apache.org","authorName":"Istvan Toth","commitYear":"2021","diff":"\"@@ -0,0 +1,6 @@\\n+@Test\\r\\n+public void testShortOptionConcatenatedQuoteHandling() throws Exception {\\r\\n+    final String[] args = new String[] { \\\"-b\\\\\\\"quoted string\\\\\\\"\\\" };\\r\\n+    final CommandLine cl = parser.parse(options, args);\\r\\n+    assertEquals(\\\"Confirm -b\\\\\\\"arg\\\\\\\" strips quotes\\\", \\\"quoted string\\\", cl.getOptionValue(\\\"b\\\"));\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\test\java\org\apache\commons\cli\AbstractParserTestCase.java	testShortOptionQuoteHandling	org.apache.commons.cli.AbstractParserTestCase.testShortOptionQuoteHandling()	767	773	1	[{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"@@ -1,6 +1,6 @@\\n @Test\\r\\n public void testShortOptionQuoteHandling() throws Exception {\\r\\n-    final String[] args = new String[] { \\\"-b\\\", \\\"\\\\\\\"quoted string\\\\\\\"\\\" };\\r\\n+    final String[] args = { \\\"-b\\\", \\\"\\\\\\\"quoted string\\\\\\\"\\\" };\\r\\n     final CommandLine cl = parser.parse(options, args);\\r\\n     assertEquals(\\\"Confirm -b \\\\\\\"arg\\\\\\\" strips quotes\\\", \\\"quoted string\\\", cl.getOptionValue(\\\"b\\\"));\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"stoty@apache.org","authorName":"Istvan Toth","commitYear":"2021","diff":"\"@@ -0,0 +1,6 @@\\n+@Test\\r\\n+public void testShortOptionQuoteHandling() throws Exception {\\r\\n+    final String[] args = new String[] { \\\"-b\\\", \\\"\\\\\\\"quoted string\\\\\\\"\\\" };\\r\\n+    final CommandLine cl = parser.parse(options, args);\\r\\n+    assertEquals(\\\"Confirm -b \\\\\\\"arg\\\\\\\" strips quotes\\\", \\\"quoted string\\\", cl.getOptionValue(\\\"b\\\"));\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\test\java\org\apache\commons\cli\AbstractParserTestCase.java	testShortWithEqual	org.apache.commons.cli.AbstractParserTestCase.testShortWithEqual()	776	785	1	[{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"@@ -1,8 +1,8 @@\\n @Test\\r\\n public void testShortWithEqual() throws Exception {\\r\\n-    final String[] args = new String[] { \\\"-f=bar\\\" };\\r\\n+    final String[] args = { \\\"-f=bar\\\" };\\r\\n     final Options options = new Options();\\r\\n     options.addOption(OptionBuilder.withLongOpt(\\\"foo\\\").hasArg().create('f'));\\r\\n     final CommandLine cl = parser.parse(options, args);\\r\\n     assertEquals(\\\"bar\\\", cl.getOptionValue(\\\"foo\\\"));\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,8 +1,8 @@\\n @Test\\r\\n public void testShortWithEqual() throws Exception {\\r\\n-    String[] args = new String[] { \\\"-f=bar\\\" };\\r\\n-    Options options = new Options();\\r\\n+    final String[] args = new String[] { \\\"-f=bar\\\" };\\r\\n+    final Options options = new Options();\\r\\n     options.addOption(OptionBuilder.withLongOpt(\\\"foo\\\").hasArg().create('f'));\\r\\n-    CommandLine cl = parser.parse(options, args);\\r\\n+    final CommandLine cl = parser.parse(options, args);\\r\\n     assertEquals(\\\"bar\\\", cl.getOptionValue(\\\"foo\\\"));\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"tn@apache.org","authorName":"Thomas Neidhart","commitYear":"2013","diff":"\"@@ -1,7 +1,8 @@\\n+@Test\\r\\n public void testShortWithEqual() throws Exception {\\r\\n     String[] args = new String[] { \\\"-f=bar\\\" };\\r\\n     Options options = new Options();\\r\\n     options.addOption(OptionBuilder.withLongOpt(\\\"foo\\\").hasArg().create('f'));\\r\\n     CommandLine cl = parser.parse(options, args);\\r\\n     assertEquals(\\\"bar\\\", cl.getOptionValue(\\\"foo\\\"));\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2008","diff":"\"@@ -1,8 +1,7 @@\\n public void testShortWithEqual() throws Exception {\\r\\n     String[] args = new String[] { \\\"-f=bar\\\" };\\r\\n     Options options = new Options();\\r\\n     options.addOption(OptionBuilder.withLongOpt(\\\"foo\\\").hasArg().create('f'));\\r\\n-    Parser parser = new GnuParser();\\r\\n     CommandLine cl = parser.parse(options, args);\\r\\n     assertEquals(\\\"bar\\\", cl.getOptionValue(\\\"foo\\\"));\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2008","diff":"\"@@ -0,0 +1,8 @@\\n+public void testShortWithEqual() throws Exception {\\r\\n+    String[] args = new String[] { \\\"-f=bar\\\" };\\r\\n+    Options options = new Options();\\r\\n+    options.addOption(OptionBuilder.withLongOpt(\\\"foo\\\").hasArg().create('f'));\\r\\n+    Parser parser = new GnuParser();\\r\\n+    CommandLine cl = parser.parse(options, args);\\r\\n+    assertEquals(\\\"bar\\\", cl.getOptionValue(\\\"foo\\\"));\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\test\java\org\apache\commons\cli\AbstractParserTestCase.java	testShortWithoutEqual	org.apache.commons.cli.AbstractParserTestCase.testShortWithoutEqual()	788	797	1	[{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"@@ -1,8 +1,8 @@\\n @Test\\r\\n public void testShortWithoutEqual() throws Exception {\\r\\n-    final String[] args = new String[] { \\\"-fbar\\\" };\\r\\n+    final String[] args = { \\\"-fbar\\\" };\\r\\n     final Options options = new Options();\\r\\n     options.addOption(OptionBuilder.withLongOpt(\\\"foo\\\").hasArg().create('f'));\\r\\n     final CommandLine cl = parser.parse(options, args);\\r\\n     assertEquals(\\\"bar\\\", cl.getOptionValue(\\\"foo\\\"));\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,8 +1,8 @@\\n @Test\\r\\n public void testShortWithoutEqual() throws Exception {\\r\\n-    String[] args = new String[] { \\\"-fbar\\\" };\\r\\n-    Options options = new Options();\\r\\n+    final String[] args = new String[] { \\\"-fbar\\\" };\\r\\n+    final Options options = new Options();\\r\\n     options.addOption(OptionBuilder.withLongOpt(\\\"foo\\\").hasArg().create('f'));\\r\\n-    CommandLine cl = parser.parse(options, args);\\r\\n+    final CommandLine cl = parser.parse(options, args);\\r\\n     assertEquals(\\\"bar\\\", cl.getOptionValue(\\\"foo\\\"));\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"tn@apache.org","authorName":"Thomas Neidhart","commitYear":"2013","diff":"\"@@ -1,7 +1,8 @@\\n+@Test\\r\\n public void testShortWithoutEqual() throws Exception {\\r\\n     String[] args = new String[] { \\\"-fbar\\\" };\\r\\n     Options options = new Options();\\r\\n     options.addOption(OptionBuilder.withLongOpt(\\\"foo\\\").hasArg().create('f'));\\r\\n     CommandLine cl = parser.parse(options, args);\\r\\n     assertEquals(\\\"bar\\\", cl.getOptionValue(\\\"foo\\\"));\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2008","diff":"\"@@ -1,8 +1,7 @@\\n public void testShortWithoutEqual() throws Exception {\\r\\n     String[] args = new String[] { \\\"-fbar\\\" };\\r\\n     Options options = new Options();\\r\\n     options.addOption(OptionBuilder.withLongOpt(\\\"foo\\\").hasArg().create('f'));\\r\\n-    Parser parser = new GnuParser();\\r\\n     CommandLine cl = parser.parse(options, args);\\r\\n     assertEquals(\\\"bar\\\", cl.getOptionValue(\\\"foo\\\"));\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2008","diff":"\"@@ -0,0 +1,8 @@\\n+public void testShortWithoutEqual() throws Exception {\\r\\n+    String[] args = new String[] { \\\"-fbar\\\" };\\r\\n+    Options options = new Options();\\r\\n+    options.addOption(OptionBuilder.withLongOpt(\\\"foo\\\").hasArg().create('f'));\\r\\n+    Parser parser = new GnuParser();\\r\\n+    CommandLine cl = parser.parse(options, args);\\r\\n+    assertEquals(\\\"bar\\\", cl.getOptionValue(\\\"foo\\\"));\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\test\java\org\apache\commons\cli\AbstractParserTestCase.java	testShortWithUnexpectedArgument	org.apache.commons.cli.AbstractParserTestCase.testShortWithUnexpectedArgument()	800	814	4	[{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"@@ -1,13 +1,13 @@\\n @Test\\r\\n public void testShortWithUnexpectedArgument() throws Exception {\\r\\n-    final String[] args = new String[] { \\\"-f=bar\\\" };\\r\\n+    final String[] args = { \\\"-f=bar\\\" };\\r\\n     final Options options = new Options();\\r\\n     options.addOption(OptionBuilder.withLongOpt(\\\"foo\\\").create('f'));\\r\\n     try {\\r\\n         parser.parse(options, args);\\r\\n     } catch (final UnrecognizedOptionException e) {\\r\\n         assertEquals(\\\"-f=bar\\\", e.getOption());\\r\\n         return;\\r\\n     }\\r\\n     fail(\\\"UnrecognizedOptionException not thrown\\\");\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,13 +1,13 @@\\n @Test\\r\\n public void testShortWithUnexpectedArgument() throws Exception {\\r\\n-    String[] args = new String[] { \\\"-f=bar\\\" };\\r\\n-    Options options = new Options();\\r\\n+    final String[] args = new String[] { \\\"-f=bar\\\" };\\r\\n+    final Options options = new Options();\\r\\n     options.addOption(OptionBuilder.withLongOpt(\\\"foo\\\").create('f'));\\r\\n     try {\\r\\n         parser.parse(options, args);\\r\\n-    } catch (UnrecognizedOptionException e) {\\r\\n+    } catch (final UnrecognizedOptionException e) {\\r\\n         assertEquals(\\\"-f=bar\\\", e.getOption());\\r\\n         return;\\r\\n     }\\r\\n     fail(\\\"UnrecognizedOptionException not thrown\\\");\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"tn@apache.org","authorName":"Thomas Neidhart","commitYear":"2013","diff":"\"@@ -1,12 +1,13 @@\\n+@Test\\r\\n public void testShortWithUnexpectedArgument() throws Exception {\\r\\n     String[] args = new String[] { \\\"-f=bar\\\" };\\r\\n     Options options = new Options();\\r\\n     options.addOption(OptionBuilder.withLongOpt(\\\"foo\\\").create('f'));\\r\\n     try {\\r\\n         parser.parse(options, args);\\r\\n     } catch (UnrecognizedOptionException e) {\\r\\n         assertEquals(\\\"-f=bar\\\", e.getOption());\\r\\n         return;\\r\\n     }\\r\\n     fail(\\\"UnrecognizedOptionException not thrown\\\");\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2009","diff":"\"@@ -0,0 +1,12 @@\\n+public void testShortWithUnexpectedArgument() throws Exception {\\r\\n+    String[] args = new String[] { \\\"-f=bar\\\" };\\r\\n+    Options options = new Options();\\r\\n+    options.addOption(OptionBuilder.withLongOpt(\\\"foo\\\").create('f'));\\r\\n+    try {\\r\\n+        parser.parse(options, args);\\r\\n+    } catch (UnrecognizedOptionException e) {\\r\\n+        assertEquals(\\\"-f=bar\\\", e.getOption());\\r\\n+        return;\\r\\n+    }\\r\\n+    fail(\\\"UnrecognizedOptionException not thrown\\\");\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\test\java\org\apache\commons\cli\AbstractParserTestCase.java	testSimpleLong	org.apache.commons.cli.AbstractParserTestCase.testSimpleLong()	817	827	1	[{"authorEmail":"arturobernalg@gmail.com","authorName":"Arturo Bernal","commitYear":"2021","diff":"\"@@ -1,10 +1,10 @@\\n @Test\\r\\n public void testSimpleLong() throws Exception {\\r\\n     final String[] args = { \\\"--enable-a\\\", \\\"--bfile\\\", \\\"toast\\\", \\\"foo\\\", \\\"bar\\\" };\\r\\n     final CommandLine cl = parser.parse(options, args);\\r\\n     assertTrue(\\\"Confirm -a is set\\\", cl.hasOption(\\\"a\\\"));\\r\\n     assertTrue(\\\"Confirm -b is set\\\", cl.hasOption(\\\"b\\\"));\\r\\n-    assertTrue(\\\"Confirm arg of -b\\\", cl.getOptionValue(\\\"b\\\").equals(\\\"toast\\\"));\\r\\n-    assertTrue(\\\"Confirm arg of --bfile\\\", cl.getOptionValue(\\\"bfile\\\").equals(\\\"toast\\\"));\\r\\n-    assertTrue(\\\"Confirm size of extra args\\\", cl.getArgList().size() == 2);\\r\\n+    assertEquals(\\\"Confirm arg of -b\\\", \\\"toast\\\", cl.getOptionValue(\\\"b\\\"));\\r\\n+    assertEquals(\\\"Confirm arg of --bfile\\\", \\\"toast\\\", cl.getOptionValue(\\\"bfile\\\"));\\r\\n+    assertEquals(\\\"Confirm size of extra args\\\", 2, cl.getArgList().size());\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"@@ -1,10 +1,10 @@\\n @Test\\r\\n public void testSimpleLong() throws Exception {\\r\\n-    final String[] args = new String[] { \\\"--enable-a\\\", \\\"--bfile\\\", \\\"toast\\\", \\\"foo\\\", \\\"bar\\\" };\\r\\n+    final String[] args = { \\\"--enable-a\\\", \\\"--bfile\\\", \\\"toast\\\", \\\"foo\\\", \\\"bar\\\" };\\r\\n     final CommandLine cl = parser.parse(options, args);\\r\\n     assertTrue(\\\"Confirm -a is set\\\", cl.hasOption(\\\"a\\\"));\\r\\n     assertTrue(\\\"Confirm -b is set\\\", cl.hasOption(\\\"b\\\"));\\r\\n     assertTrue(\\\"Confirm arg of -b\\\", cl.getOptionValue(\\\"b\\\").equals(\\\"toast\\\"));\\r\\n     assertTrue(\\\"Confirm arg of --bfile\\\", cl.getOptionValue(\\\"bfile\\\").equals(\\\"toast\\\"));\\r\\n     assertTrue(\\\"Confirm size of extra args\\\", cl.getArgList().size() == 2);\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,10 +1,10 @@\\n @Test\\r\\n public void testSimpleLong() throws Exception {\\r\\n-    String[] args = new String[] { \\\"--enable-a\\\", \\\"--bfile\\\", \\\"toast\\\", \\\"foo\\\", \\\"bar\\\" };\\r\\n-    CommandLine cl = parser.parse(options, args);\\r\\n+    final String[] args = new String[] { \\\"--enable-a\\\", \\\"--bfile\\\", \\\"toast\\\", \\\"foo\\\", \\\"bar\\\" };\\r\\n+    final CommandLine cl = parser.parse(options, args);\\r\\n     assertTrue(\\\"Confirm -a is set\\\", cl.hasOption(\\\"a\\\"));\\r\\n     assertTrue(\\\"Confirm -b is set\\\", cl.hasOption(\\\"b\\\"));\\r\\n     assertTrue(\\\"Confirm arg of -b\\\", cl.getOptionValue(\\\"b\\\").equals(\\\"toast\\\"));\\r\\n     assertTrue(\\\"Confirm arg of --bfile\\\", cl.getOptionValue(\\\"bfile\\\").equals(\\\"toast\\\"));\\r\\n     assertTrue(\\\"Confirm size of extra args\\\", cl.getArgList().size() == 2);\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"tn@apache.org","authorName":"Thomas Neidhart","commitYear":"2013","diff":"\"@@ -1,9 +1,10 @@\\n+@Test\\r\\n public void testSimpleLong() throws Exception {\\r\\n     String[] args = new String[] { \\\"--enable-a\\\", \\\"--bfile\\\", \\\"toast\\\", \\\"foo\\\", \\\"bar\\\" };\\r\\n     CommandLine cl = parser.parse(options, args);\\r\\n     assertTrue(\\\"Confirm -a is set\\\", cl.hasOption(\\\"a\\\"));\\r\\n     assertTrue(\\\"Confirm -b is set\\\", cl.hasOption(\\\"b\\\"));\\r\\n     assertTrue(\\\"Confirm arg of -b\\\", cl.getOptionValue(\\\"b\\\").equals(\\\"toast\\\"));\\r\\n     assertTrue(\\\"Confirm arg of --bfile\\\", cl.getOptionValue(\\\"bfile\\\").equals(\\\"toast\\\"));\\r\\n     assertTrue(\\\"Confirm size of extra args\\\", cl.getArgList().size() == 2);\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2008","diff":"\"@@ -1,9 +1,9 @@\\n public void testSimpleLong() throws Exception {\\r\\n     String[] args = new String[] { \\\"--enable-a\\\", \\\"--bfile\\\", \\\"toast\\\", \\\"foo\\\", \\\"bar\\\" };\\r\\n-    CommandLine cl = _parser.parse(_options, args);\\r\\n+    CommandLine cl = parser.parse(options, args);\\r\\n     assertTrue(\\\"Confirm -a is set\\\", cl.hasOption(\\\"a\\\"));\\r\\n     assertTrue(\\\"Confirm -b is set\\\", cl.hasOption(\\\"b\\\"));\\r\\n     assertTrue(\\\"Confirm arg of -b\\\", cl.getOptionValue(\\\"b\\\").equals(\\\"toast\\\"));\\r\\n     assertTrue(\\\"Confirm arg of --bfile\\\", cl.getOptionValue(\\\"bfile\\\").equals(\\\"toast\\\"));\\r\\n     assertTrue(\\\"Confirm size of extra args\\\", cl.getArgList().size() == 2);\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2008","diff":"\"@@ -1,13 +1,9 @@\\n-public void testSimpleLong() {\\r\\n+public void testSimpleLong() throws Exception {\\r\\n     String[] args = new String[] { \\\"--enable-a\\\", \\\"--bfile\\\", \\\"toast\\\", \\\"foo\\\", \\\"bar\\\" };\\r\\n-    try {\\r\\n-        CommandLine cl = _parser.parse(_options, args);\\r\\n-        assertTrue(\\\"Confirm -a is set\\\", cl.hasOption(\\\"a\\\"));\\r\\n-        assertTrue(\\\"Confirm -b is set\\\", cl.hasOption(\\\"b\\\"));\\r\\n-        assertTrue(\\\"Confirm arg of -b\\\", cl.getOptionValue(\\\"b\\\").equals(\\\"toast\\\"));\\r\\n-        assertTrue(\\\"Confirm arg of --bfile\\\", cl.getOptionValue(\\\"bfile\\\").equals(\\\"toast\\\"));\\r\\n-        assertTrue(\\\"Confirm size of extra args\\\", cl.getArgList().size() == 2);\\r\\n-    } catch (ParseException e) {\\r\\n-        fail(e.toString());\\r\\n-    }\\r\\n+    CommandLine cl = _parser.parse(_options, args);\\r\\n+    assertTrue(\\\"Confirm -a is set\\\", cl.hasOption(\\\"a\\\"));\\r\\n+    assertTrue(\\\"Confirm -b is set\\\", cl.hasOption(\\\"b\\\"));\\r\\n+    assertTrue(\\\"Confirm arg of -b\\\", cl.getOptionValue(\\\"b\\\").equals(\\\"toast\\\"));\\r\\n+    assertTrue(\\\"Confirm arg of --bfile\\\", cl.getOptionValue(\\\"bfile\\\").equals(\\\"toast\\\"));\\r\\n+    assertTrue(\\\"Confirm size of extra args\\\", cl.getArgList().size() == 2);\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -1,12 +1,13 @@\\n public void testSimpleLong() {\\r\\n     String[] args = new String[] { \\\"--enable-a\\\", \\\"--bfile\\\", \\\"toast\\\", \\\"foo\\\", \\\"bar\\\" };\\r\\n     try {\\r\\n         CommandLine cl = _parser.parse(_options, args);\\r\\n         assertTrue(\\\"Confirm -a is set\\\", cl.hasOption(\\\"a\\\"));\\r\\n         assertTrue(\\\"Confirm -b is set\\\", cl.hasOption(\\\"b\\\"));\\r\\n         assertTrue(\\\"Confirm arg of -b\\\", cl.getOptionValue(\\\"b\\\").equals(\\\"toast\\\"));\\r\\n+        assertTrue(\\\"Confirm arg of --bfile\\\", cl.getOptionValue(\\\"bfile\\\").equals(\\\"toast\\\"));\\r\\n         assertTrue(\\\"Confirm size of extra args\\\", cl.getArgList().size() == 2);\\r\\n     } catch (ParseException e) {\\r\\n         fail(e.toString());\\r\\n     }\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -1,12 +1,12 @@\\n public void testSimpleLong() {\\r\\n     String[] args = new String[] { \\\"--enable-a\\\", \\\"--bfile\\\", \\\"toast\\\", \\\"foo\\\", \\\"bar\\\" };\\r\\n     try {\\r\\n-        CommandLine cl = _options.parse(args);\\r\\n+        CommandLine cl = _parser.parse(_options, args);\\r\\n         assertTrue(\\\"Confirm -a is set\\\", cl.hasOption(\\\"a\\\"));\\r\\n         assertTrue(\\\"Confirm -b is set\\\", cl.hasOption(\\\"b\\\"));\\r\\n         assertTrue(\\\"Confirm arg of -b\\\", cl.getOptionValue(\\\"b\\\").equals(\\\"toast\\\"));\\r\\n         assertTrue(\\\"Confirm size of extra args\\\", cl.getArgList().size() == 2);\\r\\n     } catch (ParseException e) {\\r\\n         fail(e.toString());\\r\\n     }\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -1,12 +1,12 @@\\n public void testSimpleLong() {\\r\\n     String[] args = new String[] { \\\"--enable-a\\\", \\\"--bfile\\\", \\\"toast\\\", \\\"foo\\\", \\\"bar\\\" };\\r\\n     try {\\r\\n         CommandLine cl = _options.parse(args);\\r\\n-        assertTrue(\\\"Confirm -a is set\\\", cl.hasOption('a'));\\r\\n-        assertTrue(\\\"Confirm -b is set\\\", cl.hasOption('b'));\\r\\n-        assertTrue(\\\"Confirm arg of -b\\\", cl.getOptionValue('b').equals(\\\"toast\\\"));\\r\\n+        assertTrue(\\\"Confirm -a is set\\\", cl.hasOption(\\\"a\\\"));\\r\\n+        assertTrue(\\\"Confirm -b is set\\\", cl.hasOption(\\\"b\\\"));\\r\\n+        assertTrue(\\\"Confirm arg of -b\\\", cl.getOptionValue(\\\"b\\\").equals(\\\"toast\\\"));\\r\\n         assertTrue(\\\"Confirm size of extra args\\\", cl.getArgList().size() == 2);\\r\\n     } catch (ParseException e) {\\r\\n         fail(e.toString());\\r\\n     }\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jstrachan@apache.org","authorName":"James Strachan","commitYear":"2002","diff":"\"@@ -0,0 +1,12 @@\\n+public void testSimpleLong() {\\r\\n+    String[] args = new String[] { \\\"--enable-a\\\", \\\"--bfile\\\", \\\"toast\\\", \\\"foo\\\", \\\"bar\\\" };\\r\\n+    try {\\r\\n+        CommandLine cl = _options.parse(args);\\r\\n+        assertTrue(\\\"Confirm -a is set\\\", cl.hasOption('a'));\\r\\n+        assertTrue(\\\"Confirm -b is set\\\", cl.hasOption('b'));\\r\\n+        assertTrue(\\\"Confirm arg of -b\\\", cl.getOptionValue('b').equals(\\\"toast\\\"));\\r\\n+        assertTrue(\\\"Confirm size of extra args\\\", cl.getArgList().size() == 2);\\r\\n+    } catch (ParseException e) {\\r\\n+        fail(e.toString());\\r\\n+    }\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\test\java\org\apache\commons\cli\AbstractParserTestCase.java	testSimpleShort	org.apache.commons.cli.AbstractParserTestCase.testSimpleShort()	830	839	1	[{"authorEmail":"arturobernalg@gmail.com","authorName":"Arturo Bernal","commitYear":"2021","diff":"\"@@ -1,9 +1,9 @@\\n @Test\\r\\n public void testSimpleShort() throws Exception {\\r\\n     final String[] args = { \\\"-a\\\", \\\"-b\\\", \\\"toast\\\", \\\"foo\\\", \\\"bar\\\" };\\r\\n     final CommandLine cl = parser.parse(options, args);\\r\\n     assertTrue(\\\"Confirm -a is set\\\", cl.hasOption(\\\"a\\\"));\\r\\n     assertTrue(\\\"Confirm -b is set\\\", cl.hasOption(\\\"b\\\"));\\r\\n-    assertTrue(\\\"Confirm arg of -b\\\", cl.getOptionValue(\\\"b\\\").equals(\\\"toast\\\"));\\r\\n-    assertTrue(\\\"Confirm size of extra args\\\", cl.getArgList().size() == 2);\\r\\n+    assertEquals(\\\"Confirm arg of -b\\\", \\\"toast\\\", cl.getOptionValue(\\\"b\\\"));\\r\\n+    assertEquals(\\\"Confirm size of extra args\\\", 2, cl.getArgList().size());\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"@@ -1,9 +1,9 @@\\n @Test\\r\\n public void testSimpleShort() throws Exception {\\r\\n-    final String[] args = new String[] { \\\"-a\\\", \\\"-b\\\", \\\"toast\\\", \\\"foo\\\", \\\"bar\\\" };\\r\\n+    final String[] args = { \\\"-a\\\", \\\"-b\\\", \\\"toast\\\", \\\"foo\\\", \\\"bar\\\" };\\r\\n     final CommandLine cl = parser.parse(options, args);\\r\\n     assertTrue(\\\"Confirm -a is set\\\", cl.hasOption(\\\"a\\\"));\\r\\n     assertTrue(\\\"Confirm -b is set\\\", cl.hasOption(\\\"b\\\"));\\r\\n     assertTrue(\\\"Confirm arg of -b\\\", cl.getOptionValue(\\\"b\\\").equals(\\\"toast\\\"));\\r\\n     assertTrue(\\\"Confirm size of extra args\\\", cl.getArgList().size() == 2);\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,9 +1,9 @@\\n @Test\\r\\n public void testSimpleShort() throws Exception {\\r\\n-    String[] args = new String[] { \\\"-a\\\", \\\"-b\\\", \\\"toast\\\", \\\"foo\\\", \\\"bar\\\" };\\r\\n-    CommandLine cl = parser.parse(options, args);\\r\\n+    final String[] args = new String[] { \\\"-a\\\", \\\"-b\\\", \\\"toast\\\", \\\"foo\\\", \\\"bar\\\" };\\r\\n+    final CommandLine cl = parser.parse(options, args);\\r\\n     assertTrue(\\\"Confirm -a is set\\\", cl.hasOption(\\\"a\\\"));\\r\\n     assertTrue(\\\"Confirm -b is set\\\", cl.hasOption(\\\"b\\\"));\\r\\n     assertTrue(\\\"Confirm arg of -b\\\", cl.getOptionValue(\\\"b\\\").equals(\\\"toast\\\"));\\r\\n     assertTrue(\\\"Confirm size of extra args\\\", cl.getArgList().size() == 2);\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"tn@apache.org","authorName":"Thomas Neidhart","commitYear":"2013","diff":"\"@@ -1,8 +1,9 @@\\n+@Test\\r\\n public void testSimpleShort() throws Exception {\\r\\n     String[] args = new String[] { \\\"-a\\\", \\\"-b\\\", \\\"toast\\\", \\\"foo\\\", \\\"bar\\\" };\\r\\n     CommandLine cl = parser.parse(options, args);\\r\\n     assertTrue(\\\"Confirm -a is set\\\", cl.hasOption(\\\"a\\\"));\\r\\n     assertTrue(\\\"Confirm -b is set\\\", cl.hasOption(\\\"b\\\"));\\r\\n     assertTrue(\\\"Confirm arg of -b\\\", cl.getOptionValue(\\\"b\\\").equals(\\\"toast\\\"));\\r\\n     assertTrue(\\\"Confirm size of extra args\\\", cl.getArgList().size() == 2);\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2008","diff":"\"\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2008","diff":"\"@@ -1,8 +1,8 @@\\n public void testSimpleShort() throws Exception {\\r\\n     String[] args = new String[] { \\\"-a\\\", \\\"-b\\\", \\\"toast\\\", \\\"foo\\\", \\\"bar\\\" };\\r\\n-    CommandLine cl = _parser.parse(_options, args);\\r\\n+    CommandLine cl = parser.parse(options, args);\\r\\n     assertTrue(\\\"Confirm -a is set\\\", cl.hasOption(\\\"a\\\"));\\r\\n     assertTrue(\\\"Confirm -b is set\\\", cl.hasOption(\\\"b\\\"));\\r\\n     assertTrue(\\\"Confirm arg of -b\\\", cl.getOptionValue(\\\"b\\\").equals(\\\"toast\\\"));\\r\\n     assertTrue(\\\"Confirm size of extra args\\\", cl.getArgList().size() == 2);\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2008","diff":"\"@@ -1,12 +1,8 @@\\n-public void testSimpleShort() {\\r\\n+public void testSimpleShort() throws Exception {\\r\\n     String[] args = new String[] { \\\"-a\\\", \\\"-b\\\", \\\"toast\\\", \\\"foo\\\", \\\"bar\\\" };\\r\\n-    try {\\r\\n-        CommandLine cl = _parser.parse(_options, args);\\r\\n-        assertTrue(\\\"Confirm -a is set\\\", cl.hasOption(\\\"a\\\"));\\r\\n-        assertTrue(\\\"Confirm -b is set\\\", cl.hasOption(\\\"b\\\"));\\r\\n-        assertTrue(\\\"Confirm arg of -b\\\", cl.getOptionValue(\\\"b\\\").equals(\\\"toast\\\"));\\r\\n-        assertTrue(\\\"Confirm size of extra args\\\", cl.getArgList().size() == 2);\\r\\n-    } catch (ParseException e) {\\r\\n-        fail(e.toString());\\r\\n-    }\\r\\n+    CommandLine cl = _parser.parse(_options, args);\\r\\n+    assertTrue(\\\"Confirm -a is set\\\", cl.hasOption(\\\"a\\\"));\\r\\n+    assertTrue(\\\"Confirm -b is set\\\", cl.hasOption(\\\"b\\\"));\\r\\n+    assertTrue(\\\"Confirm arg of -b\\\", cl.getOptionValue(\\\"b\\\").equals(\\\"toast\\\"));\\r\\n+    assertTrue(\\\"Confirm size of extra args\\\", cl.getArgList().size() == 2);\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -1,12 +1,12 @@\\n public void testSimpleShort() {\\r\\n     String[] args = new String[] { \\\"-a\\\", \\\"-b\\\", \\\"toast\\\", \\\"foo\\\", \\\"bar\\\" };\\r\\n     try {\\r\\n-        CommandLine cl = _options.parse(args);\\r\\n+        CommandLine cl = _parser.parse(_options, args);\\r\\n         assertTrue(\\\"Confirm -a is set\\\", cl.hasOption(\\\"a\\\"));\\r\\n         assertTrue(\\\"Confirm -b is set\\\", cl.hasOption(\\\"b\\\"));\\r\\n         assertTrue(\\\"Confirm arg of -b\\\", cl.getOptionValue(\\\"b\\\").equals(\\\"toast\\\"));\\r\\n         assertTrue(\\\"Confirm size of extra args\\\", cl.getArgList().size() == 2);\\r\\n     } catch (ParseException e) {\\r\\n         fail(e.toString());\\r\\n     }\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -1,12 +1,12 @@\\n public void testSimpleShort() {\\r\\n     String[] args = new String[] { \\\"-a\\\", \\\"-b\\\", \\\"toast\\\", \\\"foo\\\", \\\"bar\\\" };\\r\\n     try {\\r\\n         CommandLine cl = _options.parse(args);\\r\\n-        assertTrue(\\\"Confirm -a is set\\\", cl.hasOption('a'));\\r\\n-        assertTrue(\\\"Confirm -b is set\\\", cl.hasOption('b'));\\r\\n-        assertTrue(\\\"Confirm arg of -b\\\", cl.getOptionValue('b').equals(\\\"toast\\\"));\\r\\n+        assertTrue(\\\"Confirm -a is set\\\", cl.hasOption(\\\"a\\\"));\\r\\n+        assertTrue(\\\"Confirm -b is set\\\", cl.hasOption(\\\"b\\\"));\\r\\n+        assertTrue(\\\"Confirm arg of -b\\\", cl.getOptionValue(\\\"b\\\").equals(\\\"toast\\\"));\\r\\n         assertTrue(\\\"Confirm size of extra args\\\", cl.getArgList().size() == 2);\\r\\n     } catch (ParseException e) {\\r\\n         fail(e.toString());\\r\\n     }\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jstrachan@apache.org","authorName":"James Strachan","commitYear":"2002","diff":"\"@@ -0,0 +1,12 @@\\n+public void testSimpleShort() {\\r\\n+    String[] args = new String[] { \\\"-a\\\", \\\"-b\\\", \\\"toast\\\", \\\"foo\\\", \\\"bar\\\" };\\r\\n+    try {\\r\\n+        CommandLine cl = _options.parse(args);\\r\\n+        assertTrue(\\\"Confirm -a is set\\\", cl.hasOption('a'));\\r\\n+        assertTrue(\\\"Confirm -b is set\\\", cl.hasOption('b'));\\r\\n+        assertTrue(\\\"Confirm arg of -b\\\", cl.getOptionValue('b').equals(\\\"toast\\\"));\\r\\n+        assertTrue(\\\"Confirm size of extra args\\\", cl.getArgList().size() == 2);\\r\\n+    } catch (ParseException e) {\\r\\n+        fail(e.toString());\\r\\n+    }\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\test\java\org\apache\commons\cli\AbstractParserTestCase.java	testSingleDash	org.apache.commons.cli.AbstractParserTestCase.testSingleDash()	842	852	1	[{"authorEmail":"arturobernalg@gmail.com","authorName":"Arturo Bernal","commitYear":"2021","diff":"\"@@ -1,10 +1,10 @@\\n @Test\\r\\n public void testSingleDash() throws Exception {\\r\\n     final String[] args = { \\\"--copt\\\", \\\"-b\\\", \\\"-\\\", \\\"-a\\\", \\\"-\\\" };\\r\\n     final CommandLine cl = parser.parse(options, args);\\r\\n     assertTrue(\\\"Confirm -a is set\\\", cl.hasOption(\\\"a\\\"));\\r\\n     assertTrue(\\\"Confirm -b is set\\\", cl.hasOption(\\\"b\\\"));\\r\\n-    assertTrue(\\\"Confirm arg of -b\\\", cl.getOptionValue(\\\"b\\\").equals(\\\"-\\\"));\\r\\n-    assertTrue(\\\"Confirm 1 extra arg: \\\" + cl.getArgList().size(), cl.getArgList().size() == 1);\\r\\n-    assertTrue(\\\"Confirm value of extra arg: \\\" + cl.getArgList().get(0), cl.getArgList().get(0).equals(\\\"-\\\"));\\r\\n+    assertEquals(\\\"Confirm arg of -b\\\", \\\"-\\\", cl.getOptionValue(\\\"b\\\"));\\r\\n+    assertEquals(\\\"Confirm 1 extra arg: \\\" + cl.getArgList().size(), 1, cl.getArgList().size());\\r\\n+    assertEquals(\\\"Confirm value of extra arg: \\\" + cl.getArgList().get(0), \\\"-\\\", cl.getArgList().get(0));\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"@@ -1,10 +1,10 @@\\n @Test\\r\\n public void testSingleDash() throws Exception {\\r\\n-    final String[] args = new String[] { \\\"--copt\\\", \\\"-b\\\", \\\"-\\\", \\\"-a\\\", \\\"-\\\" };\\r\\n+    final String[] args = { \\\"--copt\\\", \\\"-b\\\", \\\"-\\\", \\\"-a\\\", \\\"-\\\" };\\r\\n     final CommandLine cl = parser.parse(options, args);\\r\\n     assertTrue(\\\"Confirm -a is set\\\", cl.hasOption(\\\"a\\\"));\\r\\n     assertTrue(\\\"Confirm -b is set\\\", cl.hasOption(\\\"b\\\"));\\r\\n     assertTrue(\\\"Confirm arg of -b\\\", cl.getOptionValue(\\\"b\\\").equals(\\\"-\\\"));\\r\\n     assertTrue(\\\"Confirm 1 extra arg: \\\" + cl.getArgList().size(), cl.getArgList().size() == 1);\\r\\n     assertTrue(\\\"Confirm value of extra arg: \\\" + cl.getArgList().get(0), cl.getArgList().get(0).equals(\\\"-\\\"));\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,10 +1,10 @@\\n @Test\\r\\n public void testSingleDash() throws Exception {\\r\\n-    String[] args = new String[] { \\\"--copt\\\", \\\"-b\\\", \\\"-\\\", \\\"-a\\\", \\\"-\\\" };\\r\\n-    CommandLine cl = parser.parse(options, args);\\r\\n+    final String[] args = new String[] { \\\"--copt\\\", \\\"-b\\\", \\\"-\\\", \\\"-a\\\", \\\"-\\\" };\\r\\n+    final CommandLine cl = parser.parse(options, args);\\r\\n     assertTrue(\\\"Confirm -a is set\\\", cl.hasOption(\\\"a\\\"));\\r\\n     assertTrue(\\\"Confirm -b is set\\\", cl.hasOption(\\\"b\\\"));\\r\\n     assertTrue(\\\"Confirm arg of -b\\\", cl.getOptionValue(\\\"b\\\").equals(\\\"-\\\"));\\r\\n     assertTrue(\\\"Confirm 1 extra arg: \\\" + cl.getArgList().size(), cl.getArgList().size() == 1);\\r\\n     assertTrue(\\\"Confirm value of extra arg: \\\" + cl.getArgList().get(0), cl.getArgList().get(0).equals(\\\"-\\\"));\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"tn@apache.org","authorName":"Thomas Neidhart","commitYear":"2013","diff":"\"@@ -1,9 +1,10 @@\\n+@Test\\r\\n public void testSingleDash() throws Exception {\\r\\n     String[] args = new String[] { \\\"--copt\\\", \\\"-b\\\", \\\"-\\\", \\\"-a\\\", \\\"-\\\" };\\r\\n     CommandLine cl = parser.parse(options, args);\\r\\n     assertTrue(\\\"Confirm -a is set\\\", cl.hasOption(\\\"a\\\"));\\r\\n     assertTrue(\\\"Confirm -b is set\\\", cl.hasOption(\\\"b\\\"));\\r\\n     assertTrue(\\\"Confirm arg of -b\\\", cl.getOptionValue(\\\"b\\\").equals(\\\"-\\\"));\\r\\n     assertTrue(\\\"Confirm 1 extra arg: \\\" + cl.getArgList().size(), cl.getArgList().size() == 1);\\r\\n     assertTrue(\\\"Confirm value of extra arg: \\\" + cl.getArgList().get(0), cl.getArgList().get(0).equals(\\\"-\\\"));\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2008","diff":"\"\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2008","diff":"\"@@ -1,9 +1,9 @@\\n public void testSingleDash() throws Exception {\\r\\n     String[] args = new String[] { \\\"--copt\\\", \\\"-b\\\", \\\"-\\\", \\\"-a\\\", \\\"-\\\" };\\r\\n-    CommandLine cl = _parser.parse(_options, args);\\r\\n+    CommandLine cl = parser.parse(options, args);\\r\\n     assertTrue(\\\"Confirm -a is set\\\", cl.hasOption(\\\"a\\\"));\\r\\n     assertTrue(\\\"Confirm -b is set\\\", cl.hasOption(\\\"b\\\"));\\r\\n     assertTrue(\\\"Confirm arg of -b\\\", cl.getOptionValue(\\\"b\\\").equals(\\\"-\\\"));\\r\\n     assertTrue(\\\"Confirm 1 extra arg: \\\" + cl.getArgList().size(), cl.getArgList().size() == 1);\\r\\n     assertTrue(\\\"Confirm value of extra arg: \\\" + cl.getArgList().get(0), cl.getArgList().get(0).equals(\\\"-\\\"));\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2008","diff":"\"@@ -1,13 +1,9 @@\\n-public void testSingleDash() {\\r\\n+public void testSingleDash() throws Exception {\\r\\n     String[] args = new String[] { \\\"--copt\\\", \\\"-b\\\", \\\"-\\\", \\\"-a\\\", \\\"-\\\" };\\r\\n-    try {\\r\\n-        CommandLine cl = _parser.parse(_options, args);\\r\\n-        assertTrue(\\\"Confirm -a is set\\\", cl.hasOption(\\\"a\\\"));\\r\\n-        assertTrue(\\\"Confirm -b is set\\\", cl.hasOption(\\\"b\\\"));\\r\\n-        assertTrue(\\\"Confirm arg of -b\\\", cl.getOptionValue(\\\"b\\\").equals(\\\"-\\\"));\\r\\n-        assertTrue(\\\"Confirm 1 extra arg: \\\" + cl.getArgList().size(), cl.getArgList().size() == 1);\\r\\n-        assertTrue(\\\"Confirm value of extra arg: \\\" + cl.getArgList().get(0), cl.getArgList().get(0).equals(\\\"-\\\"));\\r\\n-    } catch (ParseException e) {\\r\\n-        fail(e.toString());\\r\\n-    }\\r\\n+    CommandLine cl = _parser.parse(_options, args);\\r\\n+    assertTrue(\\\"Confirm -a is set\\\", cl.hasOption(\\\"a\\\"));\\r\\n+    assertTrue(\\\"Confirm -b is set\\\", cl.hasOption(\\\"b\\\"));\\r\\n+    assertTrue(\\\"Confirm arg of -b\\\", cl.getOptionValue(\\\"b\\\").equals(\\\"-\\\"));\\r\\n+    assertTrue(\\\"Confirm 1 extra arg: \\\" + cl.getArgList().size(), cl.getArgList().size() == 1);\\r\\n+    assertTrue(\\\"Confirm value of extra arg: \\\" + cl.getArgList().get(0), cl.getArgList().get(0).equals(\\\"-\\\"));\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -1,13 +1,13 @@\\n public void testSingleDash() {\\r\\n     String[] args = new String[] { \\\"--copt\\\", \\\"-b\\\", \\\"-\\\", \\\"-a\\\", \\\"-\\\" };\\r\\n     try {\\r\\n-        CommandLine cl = _options.parse(args);\\r\\n+        CommandLine cl = _parser.parse(_options, args);\\r\\n         assertTrue(\\\"Confirm -a is set\\\", cl.hasOption(\\\"a\\\"));\\r\\n         assertTrue(\\\"Confirm -b is set\\\", cl.hasOption(\\\"b\\\"));\\r\\n         assertTrue(\\\"Confirm arg of -b\\\", cl.getOptionValue(\\\"b\\\").equals(\\\"-\\\"));\\r\\n         assertTrue(\\\"Confirm 1 extra arg: \\\" + cl.getArgList().size(), cl.getArgList().size() == 1);\\r\\n         assertTrue(\\\"Confirm value of extra arg: \\\" + cl.getArgList().get(0), cl.getArgList().get(0).equals(\\\"-\\\"));\\r\\n     } catch (ParseException e) {\\r\\n         fail(e.toString());\\r\\n     }\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -1,13 +1,13 @@\\n public void testSingleDash() {\\r\\n     String[] args = new String[] { \\\"--copt\\\", \\\"-b\\\", \\\"-\\\", \\\"-a\\\", \\\"-\\\" };\\r\\n     try {\\r\\n         CommandLine cl = _options.parse(args);\\r\\n-        assertTrue(\\\"Confirm -a is set\\\", cl.hasOption('a'));\\r\\n-        assertTrue(\\\"Confirm -b is set\\\", cl.hasOption('b'));\\r\\n-        assertTrue(\\\"Confirm arg of -b\\\", cl.getOptionValue('b').equals(\\\"-\\\"));\\r\\n+        assertTrue(\\\"Confirm -a is set\\\", cl.hasOption(\\\"a\\\"));\\r\\n+        assertTrue(\\\"Confirm -b is set\\\", cl.hasOption(\\\"b\\\"));\\r\\n+        assertTrue(\\\"Confirm arg of -b\\\", cl.getOptionValue(\\\"b\\\").equals(\\\"-\\\"));\\r\\n         assertTrue(\\\"Confirm 1 extra arg: \\\" + cl.getArgList().size(), cl.getArgList().size() == 1);\\r\\n         assertTrue(\\\"Confirm value of extra arg: \\\" + cl.getArgList().get(0), cl.getArgList().get(0).equals(\\\"-\\\"));\\r\\n     } catch (ParseException e) {\\r\\n         fail(e.toString());\\r\\n     }\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jstrachan@apache.org","authorName":"James Strachan","commitYear":"2002","diff":"\"@@ -0,0 +1,13 @@\\n+public void testSingleDash() {\\r\\n+    String[] args = new String[] { \\\"--copt\\\", \\\"-b\\\", \\\"-\\\", \\\"-a\\\", \\\"-\\\" };\\r\\n+    try {\\r\\n+        CommandLine cl = _options.parse(args);\\r\\n+        assertTrue(\\\"Confirm -a is set\\\", cl.hasOption('a'));\\r\\n+        assertTrue(\\\"Confirm -b is set\\\", cl.hasOption('b'));\\r\\n+        assertTrue(\\\"Confirm arg of -b\\\", cl.getOptionValue('b').equals(\\\"-\\\"));\\r\\n+        assertTrue(\\\"Confirm 1 extra arg: \\\" + cl.getArgList().size(), cl.getArgList().size() == 1);\\r\\n+        assertTrue(\\\"Confirm value of extra arg: \\\" + cl.getArgList().get(0), cl.getArgList().get(0).equals(\\\"-\\\"));\\r\\n+    } catch (ParseException e) {\\r\\n+        fail(e.toString());\\r\\n+    }\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\test\java\org\apache\commons\cli\AbstractParserTestCase.java	testStopAtExpectedArg	org.apache.commons.cli.AbstractParserTestCase.testStopAtExpectedArg()	855	863	1	[{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"@@ -1,8 +1,8 @@\\n @Test\\r\\n public void testStopAtExpectedArg() throws Exception {\\r\\n-    final String[] args = new String[] { \\\"-b\\\", \\\"foo\\\" };\\r\\n+    final String[] args = { \\\"-b\\\", \\\"foo\\\" };\\r\\n     final CommandLine cl = parser.parse(options, args, true);\\r\\n     assertTrue(\\\"Confirm -b is set\\\", cl.hasOption('b'));\\r\\n     assertEquals(\\\"Confirm -b is set\\\", \\\"foo\\\", cl.getOptionValue('b'));\\r\\n     assertTrue(\\\"Confirm no extra args: \\\" + cl.getArgList().size(), cl.getArgList().isEmpty());\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"@@ -1,8 +1,8 @@\\n @Test\\r\\n public void testStopAtExpectedArg() throws Exception {\\r\\n     final String[] args = new String[] { \\\"-b\\\", \\\"foo\\\" };\\r\\n     final CommandLine cl = parser.parse(options, args, true);\\r\\n     assertTrue(\\\"Confirm -b is set\\\", cl.hasOption('b'));\\r\\n     assertEquals(\\\"Confirm -b is set\\\", \\\"foo\\\", cl.getOptionValue('b'));\\r\\n-    assertTrue(\\\"Confirm no extra args: \\\" + cl.getArgList().size(), cl.getArgList().size() == 0);\\r\\n+    assertTrue(\\\"Confirm no extra args: \\\" + cl.getArgList().size(), cl.getArgList().isEmpty());\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,8 +1,8 @@\\n @Test\\r\\n public void testStopAtExpectedArg() throws Exception {\\r\\n-    String[] args = new String[] { \\\"-b\\\", \\\"foo\\\" };\\r\\n-    CommandLine cl = parser.parse(options, args, true);\\r\\n+    final String[] args = new String[] { \\\"-b\\\", \\\"foo\\\" };\\r\\n+    final CommandLine cl = parser.parse(options, args, true);\\r\\n     assertTrue(\\\"Confirm -b is set\\\", cl.hasOption('b'));\\r\\n     assertEquals(\\\"Confirm -b is set\\\", \\\"foo\\\", cl.getOptionValue('b'));\\r\\n     assertTrue(\\\"Confirm no extra args: \\\" + cl.getArgList().size(), cl.getArgList().size() == 0);\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"tn@apache.org","authorName":"Thomas Neidhart","commitYear":"2013","diff":"\"@@ -1,7 +1,8 @@\\n+@Test\\r\\n public void testStopAtExpectedArg() throws Exception {\\r\\n     String[] args = new String[] { \\\"-b\\\", \\\"foo\\\" };\\r\\n     CommandLine cl = parser.parse(options, args, true);\\r\\n     assertTrue(\\\"Confirm -b is set\\\", cl.hasOption('b'));\\r\\n     assertEquals(\\\"Confirm -b is set\\\", \\\"foo\\\", cl.getOptionValue('b'));\\r\\n     assertTrue(\\\"Confirm no extra args: \\\" + cl.getArgList().size(), cl.getArgList().size() == 0);\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2008","diff":"\"@@ -1,6 +1,7 @@\\n-public void testStop() throws Exception {\\r\\n-    String[] args = new String[] { \\\"-c\\\", \\\"foober\\\", \\\"-b\\\", \\\"toast\\\" };\\r\\n+public void testStopAtExpectedArg() throws Exception {\\r\\n+    String[] args = new String[] { \\\"-b\\\", \\\"foo\\\" };\\r\\n     CommandLine cl = parser.parse(options, args, true);\\r\\n-    assertTrue(\\\"Confirm -c is set\\\", cl.hasOption(\\\"c\\\"));\\r\\n-    assertTrue(\\\"Confirm  3 extra args: \\\" + cl.getArgList().size(), cl.getArgList().size() == 3);\\r\\n+    assertTrue(\\\"Confirm -b is set\\\", cl.hasOption('b'));\\r\\n+    assertEquals(\\\"Confirm -b is set\\\", \\\"foo\\\", cl.getOptionValue('b'));\\r\\n+    assertTrue(\\\"Confirm no extra args: \\\" + cl.getArgList().size(), cl.getArgList().size() == 0);\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2008","diff":"\"@@ -1,6 +1,6 @@\\n public void testStop() throws Exception {\\r\\n     String[] args = new String[] { \\\"-c\\\", \\\"foober\\\", \\\"-b\\\", \\\"toast\\\" };\\r\\n-    CommandLine cl = _parser.parse(_options, args, true);\\r\\n+    CommandLine cl = parser.parse(options, args, true);\\r\\n     assertTrue(\\\"Confirm -c is set\\\", cl.hasOption(\\\"c\\\"));\\r\\n     assertTrue(\\\"Confirm  3 extra args: \\\" + cl.getArgList().size(), cl.getArgList().size() == 3);\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2008","diff":"\"@@ -1,10 +1,6 @@\\n-public void testStop() {\\r\\n+public void testStop() throws Exception {\\r\\n     String[] args = new String[] { \\\"-c\\\", \\\"foober\\\", \\\"-b\\\", \\\"toast\\\" };\\r\\n-    try {\\r\\n-        CommandLine cl = _parser.parse(_options, args, true);\\r\\n-        assertTrue(\\\"Confirm -c is set\\\", cl.hasOption(\\\"c\\\"));\\r\\n-        assertTrue(\\\"Confirm  3 extra args: \\\" + cl.getArgList().size(), cl.getArgList().size() == 3);\\r\\n-    } catch (ParseException e) {\\r\\n-        fail(e.toString());\\r\\n-    }\\r\\n+    CommandLine cl = _parser.parse(_options, args, true);\\r\\n+    assertTrue(\\\"Confirm -c is set\\\", cl.hasOption(\\\"c\\\"));\\r\\n+    assertTrue(\\\"Confirm  3 extra args: \\\" + cl.getArgList().size(), cl.getArgList().size() == 3);\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -0,0 +1,10 @@\\n+public void testStop() {\\r\\n+    String[] args = new String[] { \\\"-c\\\", \\\"foober\\\", \\\"-b\\\", \\\"toast\\\" };\\r\\n+    try {\\r\\n+        CommandLine cl = _parser.parse(_options, args, true);\\r\\n+        assertTrue(\\\"Confirm -c is set\\\", cl.hasOption(\\\"c\\\"));\\r\\n+        assertTrue(\\\"Confirm  3 extra args: \\\" + cl.getArgList().size(), cl.getArgList().size() == 3);\\r\\n+    } catch (ParseException e) {\\r\\n+        fail(e.toString());\\r\\n+    }\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\test\java\org\apache\commons\cli\AbstractParserTestCase.java	testStopAtNonOptionLong	org.apache.commons.cli.AbstractParserTestCase.testStopAtNonOptionLong()	866	874	1	[{"authorEmail":"arturobernalg@gmail.com","authorName":"Arturo Bernal","commitYear":"2021","diff":"\"@@ -1,8 +1,8 @@\\n @Test\\r\\n public void testStopAtNonOptionLong() throws Exception {\\r\\n     final String[] args = { \\\"--zop==1\\\", \\\"-abtoast\\\", \\\"--b=bar\\\" };\\r\\n     final CommandLine cl = parser.parse(options, args, true);\\r\\n     assertFalse(\\\"Confirm -a is not set\\\", cl.hasOption(\\\"a\\\"));\\r\\n     assertFalse(\\\"Confirm -b is not set\\\", cl.hasOption(\\\"b\\\"));\\r\\n-    assertTrue(\\\"Confirm  3 extra args: \\\" + cl.getArgList().size(), cl.getArgList().size() == 3);\\r\\n+    assertEquals(\\\"Confirm  3 extra args: \\\" + cl.getArgList().size(), 3, cl.getArgList().size());\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"@@ -1,8 +1,8 @@\\n @Test\\r\\n public void testStopAtNonOptionLong() throws Exception {\\r\\n-    final String[] args = new String[] { \\\"--zop==1\\\", \\\"-abtoast\\\", \\\"--b=bar\\\" };\\r\\n+    final String[] args = { \\\"--zop==1\\\", \\\"-abtoast\\\", \\\"--b=bar\\\" };\\r\\n     final CommandLine cl = parser.parse(options, args, true);\\r\\n     assertFalse(\\\"Confirm -a is not set\\\", cl.hasOption(\\\"a\\\"));\\r\\n     assertFalse(\\\"Confirm -b is not set\\\", cl.hasOption(\\\"b\\\"));\\r\\n     assertTrue(\\\"Confirm  3 extra args: \\\" + cl.getArgList().size(), cl.getArgList().size() == 3);\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,8 +1,8 @@\\n @Test\\r\\n public void testStopAtNonOptionLong() throws Exception {\\r\\n-    String[] args = new String[] { \\\"--zop==1\\\", \\\"-abtoast\\\", \\\"--b=bar\\\" };\\r\\n-    CommandLine cl = parser.parse(options, args, true);\\r\\n+    final String[] args = new String[] { \\\"--zop==1\\\", \\\"-abtoast\\\", \\\"--b=bar\\\" };\\r\\n+    final CommandLine cl = parser.parse(options, args, true);\\r\\n     assertFalse(\\\"Confirm -a is not set\\\", cl.hasOption(\\\"a\\\"));\\r\\n     assertFalse(\\\"Confirm -b is not set\\\", cl.hasOption(\\\"b\\\"));\\r\\n     assertTrue(\\\"Confirm  3 extra args: \\\" + cl.getArgList().size(), cl.getArgList().size() == 3);\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"tn@apache.org","authorName":"Thomas Neidhart","commitYear":"2013","diff":"\"@@ -1,7 +1,8 @@\\n+@Test\\r\\n public void testStopAtNonOptionLong() throws Exception {\\r\\n     String[] args = new String[] { \\\"--zop==1\\\", \\\"-abtoast\\\", \\\"--b=bar\\\" };\\r\\n     CommandLine cl = parser.parse(options, args, true);\\r\\n     assertFalse(\\\"Confirm -a is not set\\\", cl.hasOption(\\\"a\\\"));\\r\\n     assertFalse(\\\"Confirm -b is not set\\\", cl.hasOption(\\\"b\\\"));\\r\\n     assertTrue(\\\"Confirm  3 extra args: \\\" + cl.getArgList().size(), cl.getArgList().size() == 3);\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2008","diff":"\"@@ -1,7 +1,7 @@\\n-public void testStop3() throws Exception {\\r\\n+public void testStopAtNonOptionLong() throws Exception {\\r\\n     String[] args = new String[] { \\\"--zop==1\\\", \\\"-abtoast\\\", \\\"--b=bar\\\" };\\r\\n     CommandLine cl = parser.parse(options, args, true);\\r\\n     assertFalse(\\\"Confirm -a is not set\\\", cl.hasOption(\\\"a\\\"));\\r\\n     assertFalse(\\\"Confirm -b is not set\\\", cl.hasOption(\\\"b\\\"));\\r\\n     assertTrue(\\\"Confirm  3 extra args: \\\" + cl.getArgList().size(), cl.getArgList().size() == 3);\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2008","diff":"\"@@ -0,0 +1,7 @@\\n+public void testStop3() throws Exception {\\r\\n+    String[] args = new String[] { \\\"--zop==1\\\", \\\"-abtoast\\\", \\\"--b=bar\\\" };\\r\\n+    CommandLine cl = parser.parse(options, args, true);\\r\\n+    assertFalse(\\\"Confirm -a is not set\\\", cl.hasOption(\\\"a\\\"));\\r\\n+    assertFalse(\\\"Confirm -b is not set\\\", cl.hasOption(\\\"b\\\"));\\r\\n+    assertTrue(\\\"Confirm  3 extra args: \\\" + cl.getArgList().size(), cl.getArgList().size() == 3);\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\test\java\org\apache\commons\cli\AbstractParserTestCase.java	testStopAtNonOptionShort	org.apache.commons.cli.AbstractParserTestCase.testStopAtNonOptionShort()	877	883	1	[{"authorEmail":"arturobernalg@gmail.com","authorName":"Arturo Bernal","commitYear":"2021","diff":"\"@@ -1,7 +1,7 @@\\n @Test\\r\\n public void testStopAtNonOptionShort() throws Exception {\\r\\n     final String[] args = { \\\"-z\\\", \\\"-a\\\", \\\"-btoast\\\" };\\r\\n     final CommandLine cl = parser.parse(options, args, true);\\r\\n     assertFalse(\\\"Confirm -a is not set\\\", cl.hasOption(\\\"a\\\"));\\r\\n-    assertTrue(\\\"Confirm  3 extra args: \\\" + cl.getArgList().size(), cl.getArgList().size() == 3);\\r\\n+    assertEquals(\\\"Confirm  3 extra args: \\\" + cl.getArgList().size(), 3, cl.getArgList().size());\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"@@ -1,7 +1,7 @@\\n @Test\\r\\n public void testStopAtNonOptionShort() throws Exception {\\r\\n-    final String[] args = new String[] { \\\"-z\\\", \\\"-a\\\", \\\"-btoast\\\" };\\r\\n+    final String[] args = { \\\"-z\\\", \\\"-a\\\", \\\"-btoast\\\" };\\r\\n     final CommandLine cl = parser.parse(options, args, true);\\r\\n     assertFalse(\\\"Confirm -a is not set\\\", cl.hasOption(\\\"a\\\"));\\r\\n     assertTrue(\\\"Confirm  3 extra args: \\\" + cl.getArgList().size(), cl.getArgList().size() == 3);\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,7 +1,7 @@\\n @Test\\r\\n public void testStopAtNonOptionShort() throws Exception {\\r\\n-    String[] args = new String[] { \\\"-z\\\", \\\"-a\\\", \\\"-btoast\\\" };\\r\\n-    CommandLine cl = parser.parse(options, args, true);\\r\\n+    final String[] args = new String[] { \\\"-z\\\", \\\"-a\\\", \\\"-btoast\\\" };\\r\\n+    final CommandLine cl = parser.parse(options, args, true);\\r\\n     assertFalse(\\\"Confirm -a is not set\\\", cl.hasOption(\\\"a\\\"));\\r\\n     assertTrue(\\\"Confirm  3 extra args: \\\" + cl.getArgList().size(), cl.getArgList().size() == 3);\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"tn@apache.org","authorName":"Thomas Neidhart","commitYear":"2013","diff":"\"@@ -1,6 +1,7 @@\\n+@Test\\r\\n public void testStopAtNonOptionShort() throws Exception {\\r\\n     String[] args = new String[] { \\\"-z\\\", \\\"-a\\\", \\\"-btoast\\\" };\\r\\n     CommandLine cl = parser.parse(options, args, true);\\r\\n     assertFalse(\\\"Confirm -a is not set\\\", cl.hasOption(\\\"a\\\"));\\r\\n     assertTrue(\\\"Confirm  3 extra args: \\\" + cl.getArgList().size(), cl.getArgList().size() == 3);\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2008","diff":"\"@@ -1,6 +1,6 @@\\n-public void testStop2() throws Exception {\\r\\n+public void testStopAtNonOptionShort() throws Exception {\\r\\n     String[] args = new String[] { \\\"-z\\\", \\\"-a\\\", \\\"-btoast\\\" };\\r\\n     CommandLine cl = parser.parse(options, args, true);\\r\\n     assertFalse(\\\"Confirm -a is not set\\\", cl.hasOption(\\\"a\\\"));\\r\\n     assertTrue(\\\"Confirm  3 extra args: \\\" + cl.getArgList().size(), cl.getArgList().size() == 3);\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2008","diff":"\"@@ -0,0 +1,6 @@\\n+public void testStop2() throws Exception {\\r\\n+    String[] args = new String[] { \\\"-z\\\", \\\"-a\\\", \\\"-btoast\\\" };\\r\\n+    CommandLine cl = parser.parse(options, args, true);\\r\\n+    assertFalse(\\\"Confirm -a is not set\\\", cl.hasOption(\\\"a\\\"));\\r\\n+    assertTrue(\\\"Confirm  3 extra args: \\\" + cl.getArgList().size(), cl.getArgList().size() == 3);\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\test\java\org\apache\commons\cli\AbstractParserTestCase.java	testStopAtUnexpectedArg	org.apache.commons.cli.AbstractParserTestCase.testStopAtUnexpectedArg()	886	892	1	[{"authorEmail":"arturobernalg@gmail.com","authorName":"Arturo Bernal","commitYear":"2021","diff":"\"@@ -1,7 +1,7 @@\\n @Test\\r\\n public void testStopAtUnexpectedArg() throws Exception {\\r\\n     final String[] args = { \\\"-c\\\", \\\"foober\\\", \\\"-b\\\", \\\"toast\\\" };\\r\\n     final CommandLine cl = parser.parse(options, args, true);\\r\\n     assertTrue(\\\"Confirm -c is set\\\", cl.hasOption(\\\"c\\\"));\\r\\n-    assertTrue(\\\"Confirm  3 extra args: \\\" + cl.getArgList().size(), cl.getArgList().size() == 3);\\r\\n+    assertEquals(\\\"Confirm  3 extra args: \\\" + cl.getArgList().size(), 3, cl.getArgList().size());\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"@@ -1,7 +1,7 @@\\n @Test\\r\\n public void testStopAtUnexpectedArg() throws Exception {\\r\\n-    final String[] args = new String[] { \\\"-c\\\", \\\"foober\\\", \\\"-b\\\", \\\"toast\\\" };\\r\\n+    final String[] args = { \\\"-c\\\", \\\"foober\\\", \\\"-b\\\", \\\"toast\\\" };\\r\\n     final CommandLine cl = parser.parse(options, args, true);\\r\\n     assertTrue(\\\"Confirm -c is set\\\", cl.hasOption(\\\"c\\\"));\\r\\n     assertTrue(\\\"Confirm  3 extra args: \\\" + cl.getArgList().size(), cl.getArgList().size() == 3);\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,7 +1,7 @@\\n @Test\\r\\n public void testStopAtUnexpectedArg() throws Exception {\\r\\n-    String[] args = new String[] { \\\"-c\\\", \\\"foober\\\", \\\"-b\\\", \\\"toast\\\" };\\r\\n-    CommandLine cl = parser.parse(options, args, true);\\r\\n+    final String[] args = new String[] { \\\"-c\\\", \\\"foober\\\", \\\"-b\\\", \\\"toast\\\" };\\r\\n+    final CommandLine cl = parser.parse(options, args, true);\\r\\n     assertTrue(\\\"Confirm -c is set\\\", cl.hasOption(\\\"c\\\"));\\r\\n     assertTrue(\\\"Confirm  3 extra args: \\\" + cl.getArgList().size(), cl.getArgList().size() == 3);\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"tn@apache.org","authorName":"Thomas Neidhart","commitYear":"2013","diff":"\"@@ -1,6 +1,7 @@\\n+@Test\\r\\n public void testStopAtUnexpectedArg() throws Exception {\\r\\n     String[] args = new String[] { \\\"-c\\\", \\\"foober\\\", \\\"-b\\\", \\\"toast\\\" };\\r\\n     CommandLine cl = parser.parse(options, args, true);\\r\\n     assertTrue(\\\"Confirm -c is set\\\", cl.hasOption(\\\"c\\\"));\\r\\n     assertTrue(\\\"Confirm  3 extra args: \\\" + cl.getArgList().size(), cl.getArgList().size() == 3);\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2008","diff":"\"@@ -1,6 +1,6 @@\\n-public void testStop() throws Exception {\\r\\n+public void testStopAtUnexpectedArg() throws Exception {\\r\\n     String[] args = new String[] { \\\"-c\\\", \\\"foober\\\", \\\"-b\\\", \\\"toast\\\" };\\r\\n     CommandLine cl = parser.parse(options, args, true);\\r\\n     assertTrue(\\\"Confirm -c is set\\\", cl.hasOption(\\\"c\\\"));\\r\\n     assertTrue(\\\"Confirm  3 extra args: \\\" + cl.getArgList().size(), cl.getArgList().size() == 3);\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2008","diff":"\"@@ -1,6 +1,6 @@\\n public void testStop() throws Exception {\\r\\n     String[] args = new String[] { \\\"-c\\\", \\\"foober\\\", \\\"-b\\\", \\\"toast\\\" };\\r\\n-    CommandLine cl = _parser.parse(_options, args, true);\\r\\n+    CommandLine cl = parser.parse(options, args, true);\\r\\n     assertTrue(\\\"Confirm -c is set\\\", cl.hasOption(\\\"c\\\"));\\r\\n     assertTrue(\\\"Confirm  3 extra args: \\\" + cl.getArgList().size(), cl.getArgList().size() == 3);\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2008","diff":"\"@@ -1,10 +1,6 @@\\n-public void testStop() {\\r\\n+public void testStop() throws Exception {\\r\\n     String[] args = new String[] { \\\"-c\\\", \\\"foober\\\", \\\"-b\\\", \\\"toast\\\" };\\r\\n-    try {\\r\\n-        CommandLine cl = _parser.parse(_options, args, true);\\r\\n-        assertTrue(\\\"Confirm -c is set\\\", cl.hasOption(\\\"c\\\"));\\r\\n-        assertTrue(\\\"Confirm  3 extra args: \\\" + cl.getArgList().size(), cl.getArgList().size() == 3);\\r\\n-    } catch (ParseException e) {\\r\\n-        fail(e.toString());\\r\\n-    }\\r\\n+    CommandLine cl = _parser.parse(_options, args, true);\\r\\n+    assertTrue(\\\"Confirm -c is set\\\", cl.hasOption(\\\"c\\\"));\\r\\n+    assertTrue(\\\"Confirm  3 extra args: \\\" + cl.getArgList().size(), cl.getArgList().size() == 3);\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -0,0 +1,10 @@\\n+public void testStop() {\\r\\n+    String[] args = new String[] { \\\"-c\\\", \\\"foober\\\", \\\"-b\\\", \\\"toast\\\" };\\r\\n+    try {\\r\\n+        CommandLine cl = _parser.parse(_options, args, true);\\r\\n+        assertTrue(\\\"Confirm -c is set\\\", cl.hasOption(\\\"c\\\"));\\r\\n+        assertTrue(\\\"Confirm  3 extra args: \\\" + cl.getArgList().size(), cl.getArgList().size() == 3);\\r\\n+    } catch (ParseException e) {\\r\\n+        fail(e.toString());\\r\\n+    }\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\test\java\org\apache\commons\cli\AbstractParserTestCase.java	testStopBursting	org.apache.commons.cli.AbstractParserTestCase.testStopBursting()	895	904	1	[{"authorEmail":"arturobernalg@gmail.com","authorName":"Arturo Bernal","commitYear":"2021","diff":"\"@@ -1,9 +1,9 @@\\n @Test\\r\\n public void testStopBursting() throws Exception {\\r\\n     final String[] args = { \\\"-azc\\\" };\\r\\n     final CommandLine cl = parser.parse(options, args, true);\\r\\n     assertTrue(\\\"Confirm -a is set\\\", cl.hasOption(\\\"a\\\"));\\r\\n     assertFalse(\\\"Confirm -c is not set\\\", cl.hasOption(\\\"c\\\"));\\r\\n-    assertTrue(\\\"Confirm  1 extra arg: \\\" + cl.getArgList().size(), cl.getArgList().size() == 1);\\r\\n+    assertEquals(\\\"Confirm  1 extra arg: \\\" + cl.getArgList().size(), 1, cl.getArgList().size());\\r\\n     assertTrue(cl.getArgList().contains(\\\"zc\\\"));\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"@@ -1,9 +1,9 @@\\n @Test\\r\\n public void testStopBursting() throws Exception {\\r\\n-    final String[] args = new String[] { \\\"-azc\\\" };\\r\\n+    final String[] args = { \\\"-azc\\\" };\\r\\n     final CommandLine cl = parser.parse(options, args, true);\\r\\n     assertTrue(\\\"Confirm -a is set\\\", cl.hasOption(\\\"a\\\"));\\r\\n     assertFalse(\\\"Confirm -c is not set\\\", cl.hasOption(\\\"c\\\"));\\r\\n     assertTrue(\\\"Confirm  1 extra arg: \\\" + cl.getArgList().size(), cl.getArgList().size() == 1);\\r\\n     assertTrue(cl.getArgList().contains(\\\"zc\\\"));\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,9 +1,9 @@\\n @Test\\r\\n public void testStopBursting() throws Exception {\\r\\n-    String[] args = new String[] { \\\"-azc\\\" };\\r\\n-    CommandLine cl = parser.parse(options, args, true);\\r\\n+    final String[] args = new String[] { \\\"-azc\\\" };\\r\\n+    final CommandLine cl = parser.parse(options, args, true);\\r\\n     assertTrue(\\\"Confirm -a is set\\\", cl.hasOption(\\\"a\\\"));\\r\\n     assertFalse(\\\"Confirm -c is not set\\\", cl.hasOption(\\\"c\\\"));\\r\\n     assertTrue(\\\"Confirm  1 extra arg: \\\" + cl.getArgList().size(), cl.getArgList().size() == 1);\\r\\n     assertTrue(cl.getArgList().contains(\\\"zc\\\"));\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"tn@apache.org","authorName":"Thomas Neidhart","commitYear":"2013","diff":"\"@@ -1,8 +1,9 @@\\n+@Test\\r\\n public void testStopBursting() throws Exception {\\r\\n     String[] args = new String[] { \\\"-azc\\\" };\\r\\n     CommandLine cl = parser.parse(options, args, true);\\r\\n     assertTrue(\\\"Confirm -a is set\\\", cl.hasOption(\\\"a\\\"));\\r\\n     assertFalse(\\\"Confirm -c is not set\\\", cl.hasOption(\\\"c\\\"));\\r\\n     assertTrue(\\\"Confirm  1 extra arg: \\\" + cl.getArgList().size(), cl.getArgList().size() == 1);\\r\\n     assertTrue(cl.getArgList().contains(\\\"zc\\\"));\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2008","diff":"\"@@ -0,0 +1,8 @@\\n+public void testStopBursting() throws Exception {\\r\\n+    String[] args = new String[] { \\\"-azc\\\" };\\r\\n+    CommandLine cl = parser.parse(options, args, true);\\r\\n+    assertTrue(\\\"Confirm -a is set\\\", cl.hasOption(\\\"a\\\"));\\r\\n+    assertFalse(\\\"Confirm -c is not set\\\", cl.hasOption(\\\"c\\\"));\\r\\n+    assertTrue(\\\"Confirm  1 extra arg: \\\" + cl.getArgList().size(), cl.getArgList().size() == 1);\\r\\n+    assertTrue(cl.getArgList().contains(\\\"zc\\\"));\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\test\java\org\apache\commons\cli\AbstractParserTestCase.java	testStopBursting2	org.apache.commons.cli.AbstractParserTestCase.testStopBursting2()	907	921	1	[{"authorEmail":"arturobernalg@gmail.com","authorName":"Arturo Bernal","commitYear":"2021","diff":"\"@@ -1,13 +1,13 @@\\n @Test\\r\\n public void testStopBursting2() throws Exception {\\r\\n     final String[] args = { \\\"-c\\\", \\\"foobar\\\", \\\"-btoast\\\" };\\r\\n     CommandLine cl = parser.parse(options, args, true);\\r\\n     assertTrue(\\\"Confirm -c is set\\\", cl.hasOption(\\\"c\\\"));\\r\\n-    assertTrue(\\\"Confirm  2 extra args: \\\" + cl.getArgList().size(), cl.getArgList().size() == 2);\\r\\n+    assertEquals(\\\"Confirm  2 extra args: \\\" + cl.getArgList().size(), 2, cl.getArgList().size());\\r\\n     cl = parser.parse(options, cl.getArgs());\\r\\n-    assertTrue(\\\"Confirm -c is not set\\\", !cl.hasOption(\\\"c\\\"));\\r\\n+    assertFalse(\\\"Confirm -c is not set\\\", cl.hasOption(\\\"c\\\"));\\r\\n     assertTrue(\\\"Confirm -b is set\\\", cl.hasOption(\\\"b\\\"));\\r\\n-    assertTrue(\\\"Confirm arg of -b\\\", cl.getOptionValue(\\\"b\\\").equals(\\\"toast\\\"));\\r\\n-    assertTrue(\\\"Confirm  1 extra arg: \\\" + cl.getArgList().size(), cl.getArgList().size() == 1);\\r\\n-    assertTrue(\\\"Confirm  value of extra arg: \\\" + cl.getArgList().get(0), cl.getArgList().get(0).equals(\\\"foobar\\\"));\\r\\n+    assertEquals(\\\"Confirm arg of -b\\\", \\\"toast\\\", cl.getOptionValue(\\\"b\\\"));\\r\\n+    assertEquals(\\\"Confirm  1 extra arg: \\\" + cl.getArgList().size(), 1, cl.getArgList().size());\\r\\n+    assertEquals(\\\"Confirm  value of extra arg: \\\" + cl.getArgList().get(0), \\\"foobar\\\", cl.getArgList().get(0));\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"@@ -1,13 +1,13 @@\\n @Test\\r\\n public void testStopBursting2() throws Exception {\\r\\n-    final String[] args = new String[] { \\\"-c\\\", \\\"foobar\\\", \\\"-btoast\\\" };\\r\\n+    final String[] args = { \\\"-c\\\", \\\"foobar\\\", \\\"-btoast\\\" };\\r\\n     CommandLine cl = parser.parse(options, args, true);\\r\\n     assertTrue(\\\"Confirm -c is set\\\", cl.hasOption(\\\"c\\\"));\\r\\n     assertTrue(\\\"Confirm  2 extra args: \\\" + cl.getArgList().size(), cl.getArgList().size() == 2);\\r\\n     cl = parser.parse(options, cl.getArgs());\\r\\n     assertTrue(\\\"Confirm -c is not set\\\", !cl.hasOption(\\\"c\\\"));\\r\\n     assertTrue(\\\"Confirm -b is set\\\", cl.hasOption(\\\"b\\\"));\\r\\n     assertTrue(\\\"Confirm arg of -b\\\", cl.getOptionValue(\\\"b\\\").equals(\\\"toast\\\"));\\r\\n     assertTrue(\\\"Confirm  1 extra arg: \\\" + cl.getArgList().size(), cl.getArgList().size() == 1);\\r\\n     assertTrue(\\\"Confirm  value of extra arg: \\\" + cl.getArgList().get(0), cl.getArgList().get(0).equals(\\\"foobar\\\"));\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,13 +1,13 @@\\n @Test\\r\\n public void testStopBursting2() throws Exception {\\r\\n-    String[] args = new String[] { \\\"-c\\\", \\\"foobar\\\", \\\"-btoast\\\" };\\r\\n+    final String[] args = new String[] { \\\"-c\\\", \\\"foobar\\\", \\\"-btoast\\\" };\\r\\n     CommandLine cl = parser.parse(options, args, true);\\r\\n     assertTrue(\\\"Confirm -c is set\\\", cl.hasOption(\\\"c\\\"));\\r\\n     assertTrue(\\\"Confirm  2 extra args: \\\" + cl.getArgList().size(), cl.getArgList().size() == 2);\\r\\n     cl = parser.parse(options, cl.getArgs());\\r\\n     assertTrue(\\\"Confirm -c is not set\\\", !cl.hasOption(\\\"c\\\"));\\r\\n     assertTrue(\\\"Confirm -b is set\\\", cl.hasOption(\\\"b\\\"));\\r\\n     assertTrue(\\\"Confirm arg of -b\\\", cl.getOptionValue(\\\"b\\\").equals(\\\"toast\\\"));\\r\\n     assertTrue(\\\"Confirm  1 extra arg: \\\" + cl.getArgList().size(), cl.getArgList().size() == 1);\\r\\n     assertTrue(\\\"Confirm  value of extra arg: \\\" + cl.getArgList().get(0), cl.getArgList().get(0).equals(\\\"foobar\\\"));\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"tn@apache.org","authorName":"Thomas Neidhart","commitYear":"2013","diff":"\"@@ -1,12 +1,13 @@\\n+@Test\\r\\n public void testStopBursting2() throws Exception {\\r\\n     String[] args = new String[] { \\\"-c\\\", \\\"foobar\\\", \\\"-btoast\\\" };\\r\\n     CommandLine cl = parser.parse(options, args, true);\\r\\n     assertTrue(\\\"Confirm -c is set\\\", cl.hasOption(\\\"c\\\"));\\r\\n     assertTrue(\\\"Confirm  2 extra args: \\\" + cl.getArgList().size(), cl.getArgList().size() == 2);\\r\\n     cl = parser.parse(options, cl.getArgs());\\r\\n     assertTrue(\\\"Confirm -c is not set\\\", !cl.hasOption(\\\"c\\\"));\\r\\n     assertTrue(\\\"Confirm -b is set\\\", cl.hasOption(\\\"b\\\"));\\r\\n     assertTrue(\\\"Confirm arg of -b\\\", cl.getOptionValue(\\\"b\\\").equals(\\\"toast\\\"));\\r\\n     assertTrue(\\\"Confirm  1 extra arg: \\\" + cl.getArgList().size(), cl.getArgList().size() == 1);\\r\\n     assertTrue(\\\"Confirm  value of extra arg: \\\" + cl.getArgList().get(0), cl.getArgList().get(0).equals(\\\"foobar\\\"));\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2009","diff":"\"\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2008","diff":"\"@@ -1,12 +1,12 @@\\n-public void testMultiple() throws Exception {\\r\\n+public void testStopBursting2() throws Exception {\\r\\n     String[] args = new String[] { \\\"-c\\\", \\\"foobar\\\", \\\"-btoast\\\" };\\r\\n     CommandLine cl = parser.parse(options, args, true);\\r\\n     assertTrue(\\\"Confirm -c is set\\\", cl.hasOption(\\\"c\\\"));\\r\\n     assertTrue(\\\"Confirm  2 extra args: \\\" + cl.getArgList().size(), cl.getArgList().size() == 2);\\r\\n     cl = parser.parse(options, cl.getArgs());\\r\\n     assertTrue(\\\"Confirm -c is not set\\\", !cl.hasOption(\\\"c\\\"));\\r\\n     assertTrue(\\\"Confirm -b is set\\\", cl.hasOption(\\\"b\\\"));\\r\\n     assertTrue(\\\"Confirm arg of -b\\\", cl.getOptionValue(\\\"b\\\").equals(\\\"toast\\\"));\\r\\n     assertTrue(\\\"Confirm  1 extra arg: \\\" + cl.getArgList().size(), cl.getArgList().size() == 1);\\r\\n     assertTrue(\\\"Confirm  value of extra arg: \\\" + cl.getArgList().get(0), cl.getArgList().get(0).equals(\\\"foobar\\\"));\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2008","diff":"\"@@ -1,12 +1,12 @@\\n public void testMultiple() throws Exception {\\r\\n     String[] args = new String[] { \\\"-c\\\", \\\"foobar\\\", \\\"-btoast\\\" };\\r\\n-    CommandLine cl = _parser.parse(_options, args, true);\\r\\n+    CommandLine cl = parser.parse(options, args, true);\\r\\n     assertTrue(\\\"Confirm -c is set\\\", cl.hasOption(\\\"c\\\"));\\r\\n     assertTrue(\\\"Confirm  2 extra args: \\\" + cl.getArgList().size(), cl.getArgList().size() == 2);\\r\\n-    cl = _parser.parse(_options, cl.getArgs());\\r\\n+    cl = parser.parse(options, cl.getArgs());\\r\\n     assertTrue(\\\"Confirm -c is not set\\\", !cl.hasOption(\\\"c\\\"));\\r\\n     assertTrue(\\\"Confirm -b is set\\\", cl.hasOption(\\\"b\\\"));\\r\\n     assertTrue(\\\"Confirm arg of -b\\\", cl.getOptionValue(\\\"b\\\").equals(\\\"toast\\\"));\\r\\n     assertTrue(\\\"Confirm  1 extra arg: \\\" + cl.getArgList().size(), cl.getArgList().size() == 1);\\r\\n     assertTrue(\\\"Confirm  value of extra arg: \\\" + cl.getArgList().get(0), cl.getArgList().get(0).equals(\\\"foobar\\\"));\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2008","diff":"\"@@ -1,16 +1,12 @@\\n-public void testMultiple() {\\r\\n+public void testMultiple() throws Exception {\\r\\n     String[] args = new String[] { \\\"-c\\\", \\\"foobar\\\", \\\"-btoast\\\" };\\r\\n-    try {\\r\\n-        CommandLine cl = _parser.parse(_options, args, true);\\r\\n-        assertTrue(\\\"Confirm -c is set\\\", cl.hasOption(\\\"c\\\"));\\r\\n-        assertTrue(\\\"Confirm  2 extra args: \\\" + cl.getArgList().size(), cl.getArgList().size() == 2);\\r\\n-        cl = _parser.parse(_options, cl.getArgs());\\r\\n-        assertTrue(\\\"Confirm -c is not set\\\", !cl.hasOption(\\\"c\\\"));\\r\\n-        assertTrue(\\\"Confirm -b is set\\\", cl.hasOption(\\\"b\\\"));\\r\\n-        assertTrue(\\\"Confirm arg of -b\\\", cl.getOptionValue(\\\"b\\\").equals(\\\"toast\\\"));\\r\\n-        assertTrue(\\\"Confirm  1 extra arg: \\\" + cl.getArgList().size(), cl.getArgList().size() == 1);\\r\\n-        assertTrue(\\\"Confirm  value of extra arg: \\\" + cl.getArgList().get(0), cl.getArgList().get(0).equals(\\\"foobar\\\"));\\r\\n-    } catch (ParseException e) {\\r\\n-        fail(e.toString());\\r\\n-    }\\r\\n+    CommandLine cl = _parser.parse(_options, args, true);\\r\\n+    assertTrue(\\\"Confirm -c is set\\\", cl.hasOption(\\\"c\\\"));\\r\\n+    assertTrue(\\\"Confirm  2 extra args: \\\" + cl.getArgList().size(), cl.getArgList().size() == 2);\\r\\n+    cl = _parser.parse(_options, cl.getArgs());\\r\\n+    assertTrue(\\\"Confirm -c is not set\\\", !cl.hasOption(\\\"c\\\"));\\r\\n+    assertTrue(\\\"Confirm -b is set\\\", cl.hasOption(\\\"b\\\"));\\r\\n+    assertTrue(\\\"Confirm arg of -b\\\", cl.getOptionValue(\\\"b\\\").equals(\\\"toast\\\"));\\r\\n+    assertTrue(\\\"Confirm  1 extra arg: \\\" + cl.getArgList().size(), cl.getArgList().size() == 1);\\r\\n+    assertTrue(\\\"Confirm  value of extra arg: \\\" + cl.getArgList().get(0), cl.getArgList().get(0).equals(\\\"foobar\\\"));\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -1,16 +1,16 @@\\n public void testMultiple() {\\r\\n     String[] args = new String[] { \\\"-c\\\", \\\"foobar\\\", \\\"-btoast\\\" };\\r\\n     try {\\r\\n-        CommandLine cl = _options.parse(args, true);\\r\\n+        CommandLine cl = _parser.parse(_options, args, true);\\r\\n         assertTrue(\\\"Confirm -c is set\\\", cl.hasOption(\\\"c\\\"));\\r\\n         assertTrue(\\\"Confirm  2 extra args: \\\" + cl.getArgList().size(), cl.getArgList().size() == 2);\\r\\n-        cl = _options.parse(cl.getArgList());\\r\\n+        cl = _parser.parse(_options, cl.getArgs());\\r\\n         assertTrue(\\\"Confirm -c is not set\\\", !cl.hasOption(\\\"c\\\"));\\r\\n         assertTrue(\\\"Confirm -b is set\\\", cl.hasOption(\\\"b\\\"));\\r\\n         assertTrue(\\\"Confirm arg of -b\\\", cl.getOptionValue(\\\"b\\\").equals(\\\"toast\\\"));\\r\\n         assertTrue(\\\"Confirm  1 extra arg: \\\" + cl.getArgList().size(), cl.getArgList().size() == 1);\\r\\n         assertTrue(\\\"Confirm  value of extra arg: \\\" + cl.getArgList().get(0), cl.getArgList().get(0).equals(\\\"foobar\\\"));\\r\\n     } catch (ParseException e) {\\r\\n         fail(e.toString());\\r\\n     }\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -1,16 +1,16 @@\\n public void testMultiple() {\\r\\n     String[] args = new String[] { \\\"-c\\\", \\\"foobar\\\", \\\"-btoast\\\" };\\r\\n     try {\\r\\n         CommandLine cl = _options.parse(args, true);\\r\\n-        assertTrue(\\\"Confirm -c is set\\\", cl.hasOption('c'));\\r\\n+        assertTrue(\\\"Confirm -c is set\\\", cl.hasOption(\\\"c\\\"));\\r\\n         assertTrue(\\\"Confirm  2 extra args: \\\" + cl.getArgList().size(), cl.getArgList().size() == 2);\\r\\n         cl = _options.parse(cl.getArgList());\\r\\n-        assertTrue(\\\"Confirm -c is not set\\\", !cl.hasOption('c'));\\r\\n-        assertTrue(\\\"Confirm -b is set\\\", cl.hasOption('b'));\\r\\n-        assertTrue(\\\"Confirm arg of -b\\\", cl.getOptionValue('b').equals(\\\"toast\\\"));\\r\\n+        assertTrue(\\\"Confirm -c is not set\\\", !cl.hasOption(\\\"c\\\"));\\r\\n+        assertTrue(\\\"Confirm -b is set\\\", cl.hasOption(\\\"b\\\"));\\r\\n+        assertTrue(\\\"Confirm arg of -b\\\", cl.getOptionValue(\\\"b\\\").equals(\\\"toast\\\"));\\r\\n         assertTrue(\\\"Confirm  1 extra arg: \\\" + cl.getArgList().size(), cl.getArgList().size() == 1);\\r\\n         assertTrue(\\\"Confirm  value of extra arg: \\\" + cl.getArgList().get(0), cl.getArgList().get(0).equals(\\\"foobar\\\"));\\r\\n     } catch (ParseException e) {\\r\\n         fail(e.toString());\\r\\n     }\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jstrachan@apache.org","authorName":"James Strachan","commitYear":"2002","diff":"\"@@ -0,0 +1,16 @@\\n+public void testMultiple() {\\r\\n+    String[] args = new String[] { \\\"-c\\\", \\\"foobar\\\", \\\"-btoast\\\" };\\r\\n+    try {\\r\\n+        CommandLine cl = _options.parse(args, true);\\r\\n+        assertTrue(\\\"Confirm -c is set\\\", cl.hasOption('c'));\\r\\n+        assertTrue(\\\"Confirm  2 extra args: \\\" + cl.getArgList().size(), cl.getArgList().size() == 2);\\r\\n+        cl = _options.parse(cl.getArgList());\\r\\n+        assertTrue(\\\"Confirm -c is not set\\\", !cl.hasOption('c'));\\r\\n+        assertTrue(\\\"Confirm -b is set\\\", cl.hasOption('b'));\\r\\n+        assertTrue(\\\"Confirm arg of -b\\\", cl.getOptionValue('b').equals(\\\"toast\\\"));\\r\\n+        assertTrue(\\\"Confirm  1 extra arg: \\\" + cl.getArgList().size(), cl.getArgList().size() == 1);\\r\\n+        assertTrue(\\\"Confirm  value of extra arg: \\\" + cl.getArgList().get(0), cl.getArgList().get(0).equals(\\\"foobar\\\"));\\r\\n+    } catch (ParseException e) {\\r\\n+        fail(e.toString());\\r\\n+    }\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\test\java\org\apache\commons\cli\AbstractParserTestCase.java	testUnambiguousPartialLongOption1	org.apache.commons.cli.AbstractParserTestCase.testUnambiguousPartialLongOption1()	924	934	1	[{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"@@ -1,9 +1,9 @@\\n @Test\\r\\n public void testUnambiguousPartialLongOption1() throws Exception {\\r\\n-    final String[] args = new String[] { \\\"--ver\\\" };\\r\\n+    final String[] args = { \\\"--ver\\\" };\\r\\n     final Options options = new Options();\\r\\n     options.addOption(OptionBuilder.withLongOpt(\\\"version\\\").create());\\r\\n     options.addOption(OptionBuilder.withLongOpt(\\\"help\\\").create());\\r\\n     final CommandLine cl = parser.parse(options, args);\\r\\n     assertTrue(\\\"Confirm --version is set\\\", cl.hasOption(\\\"version\\\"));\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2019","diff":"\"\""},{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,9 +1,9 @@\\n @Test\\r\\n public void testUnambiguousPartialLongOption1() throws Exception {\\r\\n-    String[] args = new String[] { \\\"--ver\\\" };\\r\\n-    Options options = new Options();\\r\\n+    final String[] args = new String[] { \\\"--ver\\\" };\\r\\n+    final Options options = new Options();\\r\\n     options.addOption(OptionBuilder.withLongOpt(\\\"version\\\").create());\\r\\n     options.addOption(OptionBuilder.withLongOpt(\\\"help\\\").create());\\r\\n-    CommandLine cl = parser.parse(options, args);\\r\\n+    final CommandLine cl = parser.parse(options, args);\\r\\n     assertTrue(\\\"Confirm --version is set\\\", cl.hasOption(\\\"version\\\"));\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"tn@apache.org","authorName":"Thomas Neidhart","commitYear":"2013","diff":"\"@@ -1,8 +1,9 @@\\n+@Test\\r\\n public void testUnambiguousPartialLongOption1() throws Exception {\\r\\n     String[] args = new String[] { \\\"--ver\\\" };\\r\\n     Options options = new Options();\\r\\n     options.addOption(OptionBuilder.withLongOpt(\\\"version\\\").create());\\r\\n     options.addOption(OptionBuilder.withLongOpt(\\\"help\\\").create());\\r\\n     CommandLine cl = parser.parse(options, args);\\r\\n     assertTrue(\\\"Confirm --version is set\\\", cl.hasOption(\\\"version\\\"));\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2009","diff":"\"@@ -0,0 +1,8 @@\\n+public void testUnambiguousPartialLongOption1() throws Exception {\\r\\n+    String[] args = new String[] { \\\"--ver\\\" };\\r\\n+    Options options = new Options();\\r\\n+    options.addOption(OptionBuilder.withLongOpt(\\\"version\\\").create());\\r\\n+    options.addOption(OptionBuilder.withLongOpt(\\\"help\\\").create());\\r\\n+    CommandLine cl = parser.parse(options, args);\\r\\n+    assertTrue(\\\"Confirm --version is set\\\", cl.hasOption(\\\"version\\\"));\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\test\java\org\apache\commons\cli\AbstractParserTestCase.java	testUnambiguousPartialLongOption2	org.apache.commons.cli.AbstractParserTestCase.testUnambiguousPartialLongOption2()	937	947	1	[{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"@@ -1,9 +1,9 @@\\n @Test\\r\\n public void testUnambiguousPartialLongOption2() throws Exception {\\r\\n-    final String[] args = new String[] { \\\"-ver\\\" };\\r\\n+    final String[] args = { \\\"-ver\\\" };\\r\\n     final Options options = new Options();\\r\\n     options.addOption(OptionBuilder.withLongOpt(\\\"version\\\").create());\\r\\n     options.addOption(OptionBuilder.withLongOpt(\\\"help\\\").create());\\r\\n     final CommandLine cl = parser.parse(options, args);\\r\\n     assertTrue(\\\"Confirm --version is set\\\", cl.hasOption(\\\"version\\\"));\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2019","diff":"\"\""},{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,9 +1,9 @@\\n @Test\\r\\n public void testUnambiguousPartialLongOption2() throws Exception {\\r\\n-    String[] args = new String[] { \\\"-ver\\\" };\\r\\n-    Options options = new Options();\\r\\n+    final String[] args = new String[] { \\\"-ver\\\" };\\r\\n+    final Options options = new Options();\\r\\n     options.addOption(OptionBuilder.withLongOpt(\\\"version\\\").create());\\r\\n     options.addOption(OptionBuilder.withLongOpt(\\\"help\\\").create());\\r\\n-    CommandLine cl = parser.parse(options, args);\\r\\n+    final CommandLine cl = parser.parse(options, args);\\r\\n     assertTrue(\\\"Confirm --version is set\\\", cl.hasOption(\\\"version\\\"));\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"tn@apache.org","authorName":"Thomas Neidhart","commitYear":"2013","diff":"\"@@ -1,8 +1,9 @@\\n+@Test\\r\\n public void testUnambiguousPartialLongOption2() throws Exception {\\r\\n     String[] args = new String[] { \\\"-ver\\\" };\\r\\n     Options options = new Options();\\r\\n     options.addOption(OptionBuilder.withLongOpt(\\\"version\\\").create());\\r\\n     options.addOption(OptionBuilder.withLongOpt(\\\"help\\\").create());\\r\\n     CommandLine cl = parser.parse(options, args);\\r\\n     assertTrue(\\\"Confirm --version is set\\\", cl.hasOption(\\\"version\\\"));\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2009","diff":"\"@@ -0,0 +1,8 @@\\n+public void testUnambiguousPartialLongOption2() throws Exception {\\r\\n+    String[] args = new String[] { \\\"-ver\\\" };\\r\\n+    Options options = new Options();\\r\\n+    options.addOption(OptionBuilder.withLongOpt(\\\"version\\\").create());\\r\\n+    options.addOption(OptionBuilder.withLongOpt(\\\"help\\\").create());\\r\\n+    CommandLine cl = parser.parse(options, args);\\r\\n+    assertTrue(\\\"Confirm --version is set\\\", cl.hasOption(\\\"version\\\"));\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\test\java\org\apache\commons\cli\AbstractParserTestCase.java	testUnambiguousPartialLongOption3	org.apache.commons.cli.AbstractParserTestCase.testUnambiguousPartialLongOption3()	950	961	1	[{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"@@ -1,10 +1,10 @@\\n @Test\\r\\n public void testUnambiguousPartialLongOption3() throws Exception {\\r\\n-    final String[] args = new String[] { \\\"--ver=1\\\" };\\r\\n+    final String[] args = { \\\"--ver=1\\\" };\\r\\n     final Options options = new Options();\\r\\n     options.addOption(OptionBuilder.withLongOpt(\\\"verbose\\\").hasOptionalArg().create());\\r\\n     options.addOption(OptionBuilder.withLongOpt(\\\"help\\\").create());\\r\\n     final CommandLine cl = parser.parse(options, args);\\r\\n     assertTrue(\\\"Confirm --verbose is set\\\", cl.hasOption(\\\"verbose\\\"));\\r\\n     assertEquals(\\\"1\\\", cl.getOptionValue(\\\"verbose\\\"));\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2019","diff":"\"\""},{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,10 +1,10 @@\\n @Test\\r\\n public void testUnambiguousPartialLongOption3() throws Exception {\\r\\n-    String[] args = new String[] { \\\"--ver=1\\\" };\\r\\n-    Options options = new Options();\\r\\n+    final String[] args = new String[] { \\\"--ver=1\\\" };\\r\\n+    final Options options = new Options();\\r\\n     options.addOption(OptionBuilder.withLongOpt(\\\"verbose\\\").hasOptionalArg().create());\\r\\n     options.addOption(OptionBuilder.withLongOpt(\\\"help\\\").create());\\r\\n-    CommandLine cl = parser.parse(options, args);\\r\\n+    final CommandLine cl = parser.parse(options, args);\\r\\n     assertTrue(\\\"Confirm --verbose is set\\\", cl.hasOption(\\\"verbose\\\"));\\r\\n     assertEquals(\\\"1\\\", cl.getOptionValue(\\\"verbose\\\"));\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"tn@apache.org","authorName":"Thomas Neidhart","commitYear":"2013","diff":"\"@@ -1,9 +1,10 @@\\n+@Test\\r\\n public void testUnambiguousPartialLongOption3() throws Exception {\\r\\n     String[] args = new String[] { \\\"--ver=1\\\" };\\r\\n     Options options = new Options();\\r\\n     options.addOption(OptionBuilder.withLongOpt(\\\"verbose\\\").hasOptionalArg().create());\\r\\n     options.addOption(OptionBuilder.withLongOpt(\\\"help\\\").create());\\r\\n     CommandLine cl = parser.parse(options, args);\\r\\n     assertTrue(\\\"Confirm --verbose is set\\\", cl.hasOption(\\\"verbose\\\"));\\r\\n     assertEquals(\\\"1\\\", cl.getOptionValue(\\\"verbose\\\"));\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2009","diff":"\"@@ -1,9 +1,9 @@\\n-public void testPartialLongOptionWithShort() throws Exception {\\r\\n-    String[] args = new String[] { \\\"-ver\\\" };\\r\\n+public void testUnambiguousPartialLongOption3() throws Exception {\\r\\n+    String[] args = new String[] { \\\"--ver=1\\\" };\\r\\n     Options options = new Options();\\r\\n-    options.addOption(OptionBuilder.withLongOpt(\\\"version\\\").create());\\r\\n-    options.addOption(OptionBuilder.hasArg().create('v'));\\r\\n+    options.addOption(OptionBuilder.withLongOpt(\\\"verbose\\\").hasOptionalArg().create());\\r\\n+    options.addOption(OptionBuilder.withLongOpt(\\\"help\\\").create());\\r\\n     CommandLine cl = parser.parse(options, args);\\r\\n-    assertTrue(\\\"Confirm --version is set\\\", cl.hasOption(\\\"version\\\"));\\r\\n-    assertTrue(\\\"Confirm -v is not set\\\", !cl.hasOption(\\\"v\\\"));\\r\\n+    assertTrue(\\\"Confirm --verbose is set\\\", cl.hasOption(\\\"verbose\\\"));\\r\\n+    assertEquals(\\\"1\\\", cl.getOptionValue(\\\"verbose\\\"));\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2009","diff":"\"@@ -0,0 +1,9 @@\\n+public void testPartialLongOptionWithShort() throws Exception {\\r\\n+    String[] args = new String[] { \\\"-ver\\\" };\\r\\n+    Options options = new Options();\\r\\n+    options.addOption(OptionBuilder.withLongOpt(\\\"version\\\").create());\\r\\n+    options.addOption(OptionBuilder.hasArg().create('v'));\\r\\n+    CommandLine cl = parser.parse(options, args);\\r\\n+    assertTrue(\\\"Confirm --version is set\\\", cl.hasOption(\\\"version\\\"));\\r\\n+    assertTrue(\\\"Confirm -v is not set\\\", !cl.hasOption(\\\"v\\\"));\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\test\java\org\apache\commons\cli\AbstractParserTestCase.java	testUnambiguousPartialLongOption4	org.apache.commons.cli.AbstractParserTestCase.testUnambiguousPartialLongOption4()	964	975	1	[{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"@@ -1,10 +1,10 @@\\n @Test\\r\\n public void testUnambiguousPartialLongOption4() throws Exception {\\r\\n-    final String[] args = new String[] { \\\"-ver=1\\\" };\\r\\n+    final String[] args = { \\\"-ver=1\\\" };\\r\\n     final Options options = new Options();\\r\\n     options.addOption(OptionBuilder.withLongOpt(\\\"verbose\\\").hasOptionalArg().create());\\r\\n     options.addOption(OptionBuilder.withLongOpt(\\\"help\\\").create());\\r\\n     final CommandLine cl = parser.parse(options, args);\\r\\n     assertTrue(\\\"Confirm --verbose is set\\\", cl.hasOption(\\\"verbose\\\"));\\r\\n     assertEquals(\\\"1\\\", cl.getOptionValue(\\\"verbose\\\"));\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2019","diff":"\"\""},{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,10 +1,10 @@\\n @Test\\r\\n public void testUnambiguousPartialLongOption4() throws Exception {\\r\\n-    String[] args = new String[] { \\\"-ver=1\\\" };\\r\\n-    Options options = new Options();\\r\\n+    final String[] args = new String[] { \\\"-ver=1\\\" };\\r\\n+    final Options options = new Options();\\r\\n     options.addOption(OptionBuilder.withLongOpt(\\\"verbose\\\").hasOptionalArg().create());\\r\\n     options.addOption(OptionBuilder.withLongOpt(\\\"help\\\").create());\\r\\n-    CommandLine cl = parser.parse(options, args);\\r\\n+    final CommandLine cl = parser.parse(options, args);\\r\\n     assertTrue(\\\"Confirm --verbose is set\\\", cl.hasOption(\\\"verbose\\\"));\\r\\n     assertEquals(\\\"1\\\", cl.getOptionValue(\\\"verbose\\\"));\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"tn@apache.org","authorName":"Thomas Neidhart","commitYear":"2013","diff":"\"@@ -1,9 +1,10 @@\\n+@Test\\r\\n public void testUnambiguousPartialLongOption4() throws Exception {\\r\\n     String[] args = new String[] { \\\"-ver=1\\\" };\\r\\n     Options options = new Options();\\r\\n     options.addOption(OptionBuilder.withLongOpt(\\\"verbose\\\").hasOptionalArg().create());\\r\\n     options.addOption(OptionBuilder.withLongOpt(\\\"help\\\").create());\\r\\n     CommandLine cl = parser.parse(options, args);\\r\\n     assertTrue(\\\"Confirm --verbose is set\\\", cl.hasOption(\\\"verbose\\\"));\\r\\n     assertEquals(\\\"1\\\", cl.getOptionValue(\\\"verbose\\\"));\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2009","diff":"\"@@ -1,9 +1,9 @@\\n-public void testPartialLongOptionWithShort() throws Exception {\\r\\n-    String[] args = new String[] { \\\"-ver\\\" };\\r\\n+public void testUnambiguousPartialLongOption4() throws Exception {\\r\\n+    String[] args = new String[] { \\\"-ver=1\\\" };\\r\\n     Options options = new Options();\\r\\n-    options.addOption(OptionBuilder.withLongOpt(\\\"version\\\").create());\\r\\n-    options.addOption(OptionBuilder.hasArg().create('v'));\\r\\n+    options.addOption(OptionBuilder.withLongOpt(\\\"verbose\\\").hasOptionalArg().create());\\r\\n+    options.addOption(OptionBuilder.withLongOpt(\\\"help\\\").create());\\r\\n     CommandLine cl = parser.parse(options, args);\\r\\n-    assertTrue(\\\"Confirm --version is set\\\", cl.hasOption(\\\"version\\\"));\\r\\n-    assertTrue(\\\"Confirm -v is not set\\\", !cl.hasOption(\\\"v\\\"));\\r\\n+    assertTrue(\\\"Confirm --verbose is set\\\", cl.hasOption(\\\"verbose\\\"));\\r\\n+    assertEquals(\\\"1\\\", cl.getOptionValue(\\\"verbose\\\"));\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2009","diff":"\"@@ -0,0 +1,9 @@\\n+public void testPartialLongOptionWithShort() throws Exception {\\r\\n+    String[] args = new String[] { \\\"-ver\\\" };\\r\\n+    Options options = new Options();\\r\\n+    options.addOption(OptionBuilder.withLongOpt(\\\"version\\\").create());\\r\\n+    options.addOption(OptionBuilder.hasArg().create('v'));\\r\\n+    CommandLine cl = parser.parse(options, args);\\r\\n+    assertTrue(\\\"Confirm --version is set\\\", cl.hasOption(\\\"version\\\"));\\r\\n+    assertTrue(\\\"Confirm -v is not set\\\", !cl.hasOption(\\\"v\\\"));\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\test\java\org\apache\commons\cli\AbstractParserTestCase.java	testUnlimitedArgs	org.apache.commons.cli.AbstractParserTestCase.testUnlimitedArgs()	978	991	1	[{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"@@ -1,12 +1,12 @@\\n @Test\\r\\n public void testUnlimitedArgs() throws Exception {\\r\\n-    final String[] args = new String[] { \\\"-e\\\", \\\"one\\\", \\\"two\\\", \\\"-f\\\", \\\"alpha\\\" };\\r\\n+    final String[] args = { \\\"-e\\\", \\\"one\\\", \\\"two\\\", \\\"-f\\\", \\\"alpha\\\" };\\r\\n     final Options options = new Options();\\r\\n     options.addOption(OptionBuilder.hasArgs().create(\\\"e\\\"));\\r\\n     options.addOption(OptionBuilder.hasArgs().create(\\\"f\\\"));\\r\\n     final CommandLine cl = parser.parse(options, args);\\r\\n     assertTrue(\\\"Confirm -e is set\\\", cl.hasOption(\\\"e\\\"));\\r\\n     assertEquals(\\\"number of arg for -e\\\", 2, cl.getOptionValues(\\\"e\\\").length);\\r\\n     assertTrue(\\\"Confirm -f is set\\\", cl.hasOption(\\\"f\\\"));\\r\\n     assertEquals(\\\"number of arg for -f\\\", 1, cl.getOptionValues(\\\"f\\\").length);\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,12 +1,12 @@\\n @Test\\r\\n public void testUnlimitedArgs() throws Exception {\\r\\n-    String[] args = new String[] { \\\"-e\\\", \\\"one\\\", \\\"two\\\", \\\"-f\\\", \\\"alpha\\\" };\\r\\n-    Options options = new Options();\\r\\n+    final String[] args = new String[] { \\\"-e\\\", \\\"one\\\", \\\"two\\\", \\\"-f\\\", \\\"alpha\\\" };\\r\\n+    final Options options = new Options();\\r\\n     options.addOption(OptionBuilder.hasArgs().create(\\\"e\\\"));\\r\\n     options.addOption(OptionBuilder.hasArgs().create(\\\"f\\\"));\\r\\n-    CommandLine cl = parser.parse(options, args);\\r\\n+    final CommandLine cl = parser.parse(options, args);\\r\\n     assertTrue(\\\"Confirm -e is set\\\", cl.hasOption(\\\"e\\\"));\\r\\n     assertEquals(\\\"number of arg for -e\\\", 2, cl.getOptionValues(\\\"e\\\").length);\\r\\n     assertTrue(\\\"Confirm -f is set\\\", cl.hasOption(\\\"f\\\"));\\r\\n     assertEquals(\\\"number of arg for -f\\\", 1, cl.getOptionValues(\\\"f\\\").length);\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"tn@apache.org","authorName":"Thomas Neidhart","commitYear":"2013","diff":"\"@@ -1,11 +1,12 @@\\n+@Test\\r\\n public void testUnlimitedArgs() throws Exception {\\r\\n     String[] args = new String[] { \\\"-e\\\", \\\"one\\\", \\\"two\\\", \\\"-f\\\", \\\"alpha\\\" };\\r\\n     Options options = new Options();\\r\\n     options.addOption(OptionBuilder.hasArgs().create(\\\"e\\\"));\\r\\n     options.addOption(OptionBuilder.hasArgs().create(\\\"f\\\"));\\r\\n     CommandLine cl = parser.parse(options, args);\\r\\n     assertTrue(\\\"Confirm -e is set\\\", cl.hasOption(\\\"e\\\"));\\r\\n     assertEquals(\\\"number of arg for -e\\\", 2, cl.getOptionValues(\\\"e\\\").length);\\r\\n     assertTrue(\\\"Confirm -f is set\\\", cl.hasOption(\\\"f\\\"));\\r\\n     assertEquals(\\\"number of arg for -f\\\", 1, cl.getOptionValues(\\\"f\\\").length);\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2009","diff":"\"@@ -0,0 +1,11 @@\\n+public void testUnlimitedArgs() throws Exception {\\r\\n+    String[] args = new String[] { \\\"-e\\\", \\\"one\\\", \\\"two\\\", \\\"-f\\\", \\\"alpha\\\" };\\r\\n+    Options options = new Options();\\r\\n+    options.addOption(OptionBuilder.hasArgs().create(\\\"e\\\"));\\r\\n+    options.addOption(OptionBuilder.hasArgs().create(\\\"f\\\"));\\r\\n+    CommandLine cl = parser.parse(options, args);\\r\\n+    assertTrue(\\\"Confirm -e is set\\\", cl.hasOption(\\\"e\\\"));\\r\\n+    assertEquals(\\\"number of arg for -e\\\", 2, cl.getOptionValues(\\\"e\\\").length);\\r\\n+    assertTrue(\\\"Confirm -f is set\\\", cl.hasOption(\\\"f\\\"));\\r\\n+    assertEquals(\\\"number of arg for -f\\\", 1, cl.getOptionValues(\\\"f\\\").length);\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\test\java\org\apache\commons\cli\AbstractParserTestCase.java	testUnrecognizedOption	org.apache.commons.cli.AbstractParserTestCase.testUnrecognizedOption()	994	1003	3	[{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"@@ -1,10 +1,10 @@\\n @Test\\r\\n public void testUnrecognizedOption() throws Exception {\\r\\n-    final String[] args = new String[] { \\\"-a\\\", \\\"-d\\\", \\\"-b\\\", \\\"toast\\\", \\\"foo\\\", \\\"bar\\\" };\\r\\n+    final String[] args = { \\\"-a\\\", \\\"-d\\\", \\\"-b\\\", \\\"toast\\\", \\\"foo\\\", \\\"bar\\\" };\\r\\n     try {\\r\\n         parser.parse(options, args);\\r\\n         fail(\\\"UnrecognizedOptionException wasn't thrown\\\");\\r\\n     } catch (final UnrecognizedOptionException e) {\\r\\n         assertEquals(\\\"-d\\\", e.getOption());\\r\\n     }\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,10 +1,10 @@\\n @Test\\r\\n public void testUnrecognizedOption() throws Exception {\\r\\n-    String[] args = new String[] { \\\"-a\\\", \\\"-d\\\", \\\"-b\\\", \\\"toast\\\", \\\"foo\\\", \\\"bar\\\" };\\r\\n+    final String[] args = new String[] { \\\"-a\\\", \\\"-d\\\", \\\"-b\\\", \\\"toast\\\", \\\"foo\\\", \\\"bar\\\" };\\r\\n     try {\\r\\n         parser.parse(options, args);\\r\\n         fail(\\\"UnrecognizedOptionException wasn't thrown\\\");\\r\\n-    } catch (UnrecognizedOptionException e) {\\r\\n+    } catch (final UnrecognizedOptionException e) {\\r\\n         assertEquals(\\\"-d\\\", e.getOption());\\r\\n     }\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"tn@apache.org","authorName":"Thomas Neidhart","commitYear":"2013","diff":"\"@@ -1,9 +1,10 @@\\n+@Test\\r\\n public void testUnrecognizedOption() throws Exception {\\r\\n     String[] args = new String[] { \\\"-a\\\", \\\"-d\\\", \\\"-b\\\", \\\"toast\\\", \\\"foo\\\", \\\"bar\\\" };\\r\\n     try {\\r\\n         parser.parse(options, args);\\r\\n         fail(\\\"UnrecognizedOptionException wasn't thrown\\\");\\r\\n     } catch (UnrecognizedOptionException e) {\\r\\n         assertEquals(\\\"-d\\\", e.getOption());\\r\\n     }\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2008","diff":"\"@@ -1,9 +1,9 @@\\n public void testUnrecognizedOption() throws Exception {\\r\\n-    String[] args = new String[] { \\\"-adbtoast\\\", \\\"foo\\\", \\\"bar\\\" };\\r\\n+    String[] args = new String[] { \\\"-a\\\", \\\"-d\\\", \\\"-b\\\", \\\"toast\\\", \\\"foo\\\", \\\"bar\\\" };\\r\\n     try {\\r\\n         parser.parse(options, args);\\r\\n         fail(\\\"UnrecognizedOptionException wasn't thrown\\\");\\r\\n     } catch (UnrecognizedOptionException e) {\\r\\n-        assertEquals(\\\"-adbtoast\\\", e.getOption());\\r\\n+        assertEquals(\\\"-d\\\", e.getOption());\\r\\n     }\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2008","diff":"\"@@ -0,0 +1,9 @@\\n+public void testUnrecognizedOption() throws Exception {\\r\\n+    String[] args = new String[] { \\\"-adbtoast\\\", \\\"foo\\\", \\\"bar\\\" };\\r\\n+    try {\\r\\n+        parser.parse(options, args);\\r\\n+        fail(\\\"UnrecognizedOptionException wasn't thrown\\\");\\r\\n+    } catch (UnrecognizedOptionException e) {\\r\\n+        assertEquals(\\\"-adbtoast\\\", e.getOption());\\r\\n+    }\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\test\java\org\apache\commons\cli\AbstractParserTestCase.java	testUnrecognizedOptionWithBursting	org.apache.commons.cli.AbstractParserTestCase.testUnrecognizedOptionWithBursting()	1006	1015	3	[{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"@@ -1,10 +1,10 @@\\n @Test\\r\\n public void testUnrecognizedOptionWithBursting() throws Exception {\\r\\n-    final String[] args = new String[] { \\\"-adbtoast\\\", \\\"foo\\\", \\\"bar\\\" };\\r\\n+    final String[] args = { \\\"-adbtoast\\\", \\\"foo\\\", \\\"bar\\\" };\\r\\n     try {\\r\\n         parser.parse(options, args);\\r\\n         fail(\\\"UnrecognizedOptionException wasn't thrown\\\");\\r\\n     } catch (final UnrecognizedOptionException e) {\\r\\n         assertEquals(\\\"-adbtoast\\\", e.getOption());\\r\\n     }\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,10 +1,10 @@\\n @Test\\r\\n public void testUnrecognizedOptionWithBursting() throws Exception {\\r\\n-    String[] args = new String[] { \\\"-adbtoast\\\", \\\"foo\\\", \\\"bar\\\" };\\r\\n+    final String[] args = new String[] { \\\"-adbtoast\\\", \\\"foo\\\", \\\"bar\\\" };\\r\\n     try {\\r\\n         parser.parse(options, args);\\r\\n         fail(\\\"UnrecognizedOptionException wasn't thrown\\\");\\r\\n-    } catch (UnrecognizedOptionException e) {\\r\\n+    } catch (final UnrecognizedOptionException e) {\\r\\n         assertEquals(\\\"-adbtoast\\\", e.getOption());\\r\\n     }\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"tn@apache.org","authorName":"Thomas Neidhart","commitYear":"2013","diff":"\"@@ -1,9 +1,10 @@\\n+@Test\\r\\n public void testUnrecognizedOptionWithBursting() throws Exception {\\r\\n     String[] args = new String[] { \\\"-adbtoast\\\", \\\"foo\\\", \\\"bar\\\" };\\r\\n     try {\\r\\n         parser.parse(options, args);\\r\\n         fail(\\\"UnrecognizedOptionException wasn't thrown\\\");\\r\\n     } catch (UnrecognizedOptionException e) {\\r\\n         assertEquals(\\\"-adbtoast\\\", e.getOption());\\r\\n     }\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2008","diff":"\"@@ -1,9 +1,9 @@\\n-public void testUnrecognizedOption() throws Exception {\\r\\n+public void testUnrecognizedOptionWithBursting() throws Exception {\\r\\n     String[] args = new String[] { \\\"-adbtoast\\\", \\\"foo\\\", \\\"bar\\\" };\\r\\n     try {\\r\\n         parser.parse(options, args);\\r\\n         fail(\\\"UnrecognizedOptionException wasn't thrown\\\");\\r\\n     } catch (UnrecognizedOptionException e) {\\r\\n         assertEquals(\\\"-adbtoast\\\", e.getOption());\\r\\n     }\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2008","diff":"\"@@ -0,0 +1,9 @@\\n+public void testUnrecognizedOption() throws Exception {\\r\\n+    String[] args = new String[] { \\\"-adbtoast\\\", \\\"foo\\\", \\\"bar\\\" };\\r\\n+    try {\\r\\n+        parser.parse(options, args);\\r\\n+        fail(\\\"UnrecognizedOptionException wasn't thrown\\\");\\r\\n+    } catch (UnrecognizedOptionException e) {\\r\\n+        assertEquals(\\\"-adbtoast\\\", e.getOption());\\r\\n+    }\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\test\java\org\apache\commons\cli\AbstractParserTestCase.java	testWithRequiredOption	org.apache.commons.cli.AbstractParserTestCase.testWithRequiredOption()	1018	1031	1	[{"authorEmail":"arturobernalg@gmail.com","authorName":"Arturo Bernal","commitYear":"2021","diff":"\"@@ -1,12 +1,12 @@\\n @Test\\r\\n public void testWithRequiredOption() throws Exception {\\r\\n     final String[] args = { \\\"-b\\\", \\\"file\\\" };\\r\\n     final Options options = new Options();\\r\\n     options.addOption(\\\"a\\\", \\\"enable-a\\\", false, null);\\r\\n     options.addOption(OptionBuilder.withLongOpt(\\\"bfile\\\").hasArg().isRequired().create('b'));\\r\\n     final CommandLine cl = parser.parse(options, args);\\r\\n-    assertTrue(\\\"Confirm -a is NOT set\\\", !cl.hasOption(\\\"a\\\"));\\r\\n+    assertFalse(\\\"Confirm -a is NOT set\\\", cl.hasOption(\\\"a\\\"));\\r\\n     assertTrue(\\\"Confirm -b is set\\\", cl.hasOption(\\\"b\\\"));\\r\\n-    assertTrue(\\\"Confirm arg of -b\\\", cl.getOptionValue(\\\"b\\\").equals(\\\"file\\\"));\\r\\n+    assertEquals(\\\"Confirm arg of -b\\\", \\\"file\\\", cl.getOptionValue(\\\"b\\\"));\\r\\n     assertTrue(\\\"Confirm NO of extra args\\\", cl.getArgList().isEmpty());\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"@@ -1,12 +1,12 @@\\n @Test\\r\\n public void testWithRequiredOption() throws Exception {\\r\\n-    final String[] args = new String[] { \\\"-b\\\", \\\"file\\\" };\\r\\n+    final String[] args = { \\\"-b\\\", \\\"file\\\" };\\r\\n     final Options options = new Options();\\r\\n     options.addOption(\\\"a\\\", \\\"enable-a\\\", false, null);\\r\\n     options.addOption(OptionBuilder.withLongOpt(\\\"bfile\\\").hasArg().isRequired().create('b'));\\r\\n     final CommandLine cl = parser.parse(options, args);\\r\\n     assertTrue(\\\"Confirm -a is NOT set\\\", !cl.hasOption(\\\"a\\\"));\\r\\n     assertTrue(\\\"Confirm -b is set\\\", cl.hasOption(\\\"b\\\"));\\r\\n     assertTrue(\\\"Confirm arg of -b\\\", cl.getOptionValue(\\\"b\\\").equals(\\\"file\\\"));\\r\\n     assertTrue(\\\"Confirm NO of extra args\\\", cl.getArgList().isEmpty());\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"@@ -1,12 +1,12 @@\\n @Test\\r\\n public void testWithRequiredOption() throws Exception {\\r\\n     final String[] args = new String[] { \\\"-b\\\", \\\"file\\\" };\\r\\n     final Options options = new Options();\\r\\n     options.addOption(\\\"a\\\", \\\"enable-a\\\", false, null);\\r\\n     options.addOption(OptionBuilder.withLongOpt(\\\"bfile\\\").hasArg().isRequired().create('b'));\\r\\n     final CommandLine cl = parser.parse(options, args);\\r\\n     assertTrue(\\\"Confirm -a is NOT set\\\", !cl.hasOption(\\\"a\\\"));\\r\\n     assertTrue(\\\"Confirm -b is set\\\", cl.hasOption(\\\"b\\\"));\\r\\n     assertTrue(\\\"Confirm arg of -b\\\", cl.getOptionValue(\\\"b\\\").equals(\\\"file\\\"));\\r\\n-    assertTrue(\\\"Confirm NO of extra args\\\", cl.getArgList().size() == 0);\\r\\n+    assertTrue(\\\"Confirm NO of extra args\\\", cl.getArgList().isEmpty());\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2019","diff":"\"\""},{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,12 +1,12 @@\\n @Test\\r\\n public void testWithRequiredOption() throws Exception {\\r\\n-    String[] args = new String[] { \\\"-b\\\", \\\"file\\\" };\\r\\n-    Options options = new Options();\\r\\n+    final String[] args = new String[] { \\\"-b\\\", \\\"file\\\" };\\r\\n+    final Options options = new Options();\\r\\n     options.addOption(\\\"a\\\", \\\"enable-a\\\", false, null);\\r\\n     options.addOption(OptionBuilder.withLongOpt(\\\"bfile\\\").hasArg().isRequired().create('b'));\\r\\n-    CommandLine cl = parser.parse(options, args);\\r\\n+    final CommandLine cl = parser.parse(options, args);\\r\\n     assertTrue(\\\"Confirm -a is NOT set\\\", !cl.hasOption(\\\"a\\\"));\\r\\n     assertTrue(\\\"Confirm -b is set\\\", cl.hasOption(\\\"b\\\"));\\r\\n     assertTrue(\\\"Confirm arg of -b\\\", cl.getOptionValue(\\\"b\\\").equals(\\\"file\\\"));\\r\\n     assertTrue(\\\"Confirm NO of extra args\\\", cl.getArgList().size() == 0);\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"tn@apache.org","authorName":"Thomas Neidhart","commitYear":"2013","diff":"\"@@ -1,11 +1,12 @@\\n+@Test\\r\\n public void testWithRequiredOption() throws Exception {\\r\\n     String[] args = new String[] { \\\"-b\\\", \\\"file\\\" };\\r\\n     Options options = new Options();\\r\\n     options.addOption(\\\"a\\\", \\\"enable-a\\\", false, null);\\r\\n     options.addOption(OptionBuilder.withLongOpt(\\\"bfile\\\").hasArg().isRequired().create('b'));\\r\\n     CommandLine cl = parser.parse(options, args);\\r\\n     assertTrue(\\\"Confirm -a is NOT set\\\", !cl.hasOption(\\\"a\\\"));\\r\\n     assertTrue(\\\"Confirm -b is set\\\", cl.hasOption(\\\"b\\\"));\\r\\n     assertTrue(\\\"Confirm arg of -b\\\", cl.getOptionValue(\\\"b\\\").equals(\\\"file\\\"));\\r\\n     assertTrue(\\\"Confirm NO of extra args\\\", cl.getArgList().size() == 0);\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2009","diff":"\"@@ -1,8 +1,11 @@\\n public void testWithRequiredOption() throws Exception {\\r\\n     String[] args = new String[] { \\\"-b\\\", \\\"file\\\" };\\r\\n-    CommandLine cl = parser.parse(_options, args);\\r\\n+    Options options = new Options();\\r\\n+    options.addOption(\\\"a\\\", \\\"enable-a\\\", false, null);\\r\\n+    options.addOption(OptionBuilder.withLongOpt(\\\"bfile\\\").hasArg().isRequired().create('b'));\\r\\n+    CommandLine cl = parser.parse(options, args);\\r\\n     assertTrue(\\\"Confirm -a is NOT set\\\", !cl.hasOption(\\\"a\\\"));\\r\\n     assertTrue(\\\"Confirm -b is set\\\", cl.hasOption(\\\"b\\\"));\\r\\n     assertTrue(\\\"Confirm arg of -b\\\", cl.getOptionValue(\\\"b\\\").equals(\\\"file\\\"));\\r\\n     assertTrue(\\\"Confirm NO of extra args\\\", cl.getArgList().size() == 0);\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2008","diff":"\"@@ -1,12 +1,8 @@\\n-public void testWithRequiredOption() {\\r\\n+public void testWithRequiredOption() throws Exception {\\r\\n     String[] args = new String[] { \\\"-b\\\", \\\"file\\\" };\\r\\n-    try {\\r\\n-        CommandLine cl = parser.parse(_options, args);\\r\\n-        assertTrue(\\\"Confirm -a is NOT set\\\", !cl.hasOption(\\\"a\\\"));\\r\\n-        assertTrue(\\\"Confirm -b is set\\\", cl.hasOption(\\\"b\\\"));\\r\\n-        assertTrue(\\\"Confirm arg of -b\\\", cl.getOptionValue(\\\"b\\\").equals(\\\"file\\\"));\\r\\n-        assertTrue(\\\"Confirm NO of extra args\\\", cl.getArgList().size() == 0);\\r\\n-    } catch (ParseException e) {\\r\\n-        fail(e.toString());\\r\\n-    }\\r\\n+    CommandLine cl = parser.parse(_options, args);\\r\\n+    assertTrue(\\\"Confirm -a is NOT set\\\", !cl.hasOption(\\\"a\\\"));\\r\\n+    assertTrue(\\\"Confirm -b is set\\\", cl.hasOption(\\\"b\\\"));\\r\\n+    assertTrue(\\\"Confirm arg of -b\\\", cl.getOptionValue(\\\"b\\\").equals(\\\"file\\\"));\\r\\n+    assertTrue(\\\"Confirm NO of extra args\\\", cl.getArgList().size() == 0);\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -1,12 +1,12 @@\\n public void testWithRequiredOption() {\\r\\n     String[] args = new String[] { \\\"-b\\\", \\\"file\\\" };\\r\\n     try {\\r\\n-        CommandLine cl = _options.parse(args);\\r\\n+        CommandLine cl = parser.parse(_options, args);\\r\\n         assertTrue(\\\"Confirm -a is NOT set\\\", !cl.hasOption(\\\"a\\\"));\\r\\n         assertTrue(\\\"Confirm -b is set\\\", cl.hasOption(\\\"b\\\"));\\r\\n         assertTrue(\\\"Confirm arg of -b\\\", cl.getOptionValue(\\\"b\\\").equals(\\\"file\\\"));\\r\\n         assertTrue(\\\"Confirm NO of extra args\\\", cl.getArgList().size() == 0);\\r\\n     } catch (ParseException e) {\\r\\n         fail(e.toString());\\r\\n     }\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -1,12 +1,12 @@\\n public void testWithRequiredOption() {\\r\\n     String[] args = new String[] { \\\"-b\\\", \\\"file\\\" };\\r\\n     try {\\r\\n         CommandLine cl = _options.parse(args);\\r\\n-        assertTrue(\\\"Confirm -a is NOT set\\\", !cl.hasOption('a'));\\r\\n-        assertTrue(\\\"Confirm -b is set\\\", cl.hasOption('b'));\\r\\n-        assertTrue(\\\"Confirm arg of -b\\\", cl.getOptionValue('b').equals(\\\"file\\\"));\\r\\n+        assertTrue(\\\"Confirm -a is NOT set\\\", !cl.hasOption(\\\"a\\\"));\\r\\n+        assertTrue(\\\"Confirm -b is set\\\", cl.hasOption(\\\"b\\\"));\\r\\n+        assertTrue(\\\"Confirm arg of -b\\\", cl.getOptionValue(\\\"b\\\").equals(\\\"file\\\"));\\r\\n         assertTrue(\\\"Confirm NO of extra args\\\", cl.getArgList().size() == 0);\\r\\n     } catch (ParseException e) {\\r\\n         fail(e.toString());\\r\\n     }\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jstrachan@apache.org","authorName":"James Strachan","commitYear":"2002","diff":"\"@@ -0,0 +1,12 @@\\n+public void testWithRequiredOption() {\\r\\n+    String[] args = new String[] { \\\"-b\\\", \\\"file\\\" };\\r\\n+    try {\\r\\n+        CommandLine cl = _options.parse(args);\\r\\n+        assertTrue(\\\"Confirm -a is NOT set\\\", !cl.hasOption('a'));\\r\\n+        assertTrue(\\\"Confirm -b is set\\\", cl.hasOption('b'));\\r\\n+        assertTrue(\\\"Confirm arg of -b\\\", cl.getOptionValue('b').equals(\\\"file\\\"));\\r\\n+        assertTrue(\\\"Confirm NO of extra args\\\", cl.getArgList().size() == 0);\\r\\n+    } catch (ParseException e) {\\r\\n+        fail(e.toString());\\r\\n+    }\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\test\java\org\apache\commons\cli\ApplicationTest.java	testAnt	org.apache.commons.cli.ApplicationTest.testAnt()	47	86	1	[{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"@@ -1,26 +1,26 @@\\n @Test\\r\\n public void testAnt() throws Exception {\\r\\n     final CommandLineParser parser = new GnuParser();\\r\\n     final Options options = new Options();\\r\\n     options.addOption(\\\"help\\\", false, \\\"print this message\\\");\\r\\n     options.addOption(\\\"projecthelp\\\", false, \\\"print project help information\\\");\\r\\n     options.addOption(\\\"version\\\", false, \\\"print the version information and exit\\\");\\r\\n     options.addOption(\\\"quiet\\\", false, \\\"be extra quiet\\\");\\r\\n     options.addOption(\\\"verbose\\\", false, \\\"be extra verbose\\\");\\r\\n     options.addOption(\\\"debug\\\", false, \\\"print debug information\\\");\\r\\n     options.addOption(\\\"logfile\\\", true, \\\"use given file for log\\\");\\r\\n     options.addOption(\\\"logger\\\", true, \\\"the class which is to perform the logging\\\");\\r\\n     options.addOption(\\\"listener\\\", true, \\\"add an instance of a class as a project listener\\\");\\r\\n     options.addOption(\\\"buildfile\\\", true, \\\"use given buildfile\\\");\\r\\n     options.addOption(OptionBuilder.withDescription(\\\"use value for given property\\\").hasArgs().withValueSeparator().create('D'));\\r\\n     options.addOption(\\\"find\\\", true, \\\"search for buildfile towards the root of the filesystem and use it\\\");\\r\\n-    final String[] args = new String[] { \\\"-buildfile\\\", \\\"mybuild.xml\\\", \\\"-Dproperty=value\\\", \\\"-Dproperty1=value1\\\", \\\"-projecthelp\\\" };\\r\\n+    final String[] args = { \\\"-buildfile\\\", \\\"mybuild.xml\\\", \\\"-Dproperty=value\\\", \\\"-Dproperty1=value1\\\", \\\"-projecthelp\\\" };\\r\\n     final CommandLine line = parser.parse(options, args);\\r\\n     final String[] opts = line.getOptionValues(\\\"D\\\");\\r\\n     assertEquals(\\\"property\\\", opts[0]);\\r\\n     assertEquals(\\\"value\\\", opts[1]);\\r\\n     assertEquals(\\\"property1\\\", opts[2]);\\r\\n     assertEquals(\\\"value1\\\", opts[3]);\\r\\n     assertEquals(line.getOptionValue(\\\"buildfile\\\"), \\\"mybuild.xml\\\");\\r\\n     assertTrue(line.hasOption(\\\"projecthelp\\\"));\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,26 +1,26 @@\\n @Test\\r\\n public void testAnt() throws Exception {\\r\\n-    CommandLineParser parser = new GnuParser();\\r\\n-    Options options = new Options();\\r\\n+    final CommandLineParser parser = new GnuParser();\\r\\n+    final Options options = new Options();\\r\\n     options.addOption(\\\"help\\\", false, \\\"print this message\\\");\\r\\n     options.addOption(\\\"projecthelp\\\", false, \\\"print project help information\\\");\\r\\n     options.addOption(\\\"version\\\", false, \\\"print the version information and exit\\\");\\r\\n     options.addOption(\\\"quiet\\\", false, \\\"be extra quiet\\\");\\r\\n     options.addOption(\\\"verbose\\\", false, \\\"be extra verbose\\\");\\r\\n     options.addOption(\\\"debug\\\", false, \\\"print debug information\\\");\\r\\n     options.addOption(\\\"logfile\\\", true, \\\"use given file for log\\\");\\r\\n     options.addOption(\\\"logger\\\", true, \\\"the class which is to perform the logging\\\");\\r\\n     options.addOption(\\\"listener\\\", true, \\\"add an instance of a class as a project listener\\\");\\r\\n     options.addOption(\\\"buildfile\\\", true, \\\"use given buildfile\\\");\\r\\n     options.addOption(OptionBuilder.withDescription(\\\"use value for given property\\\").hasArgs().withValueSeparator().create('D'));\\r\\n     options.addOption(\\\"find\\\", true, \\\"search for buildfile towards the root of the filesystem and use it\\\");\\r\\n-    String[] args = new String[] { \\\"-buildfile\\\", \\\"mybuild.xml\\\", \\\"-Dproperty=value\\\", \\\"-Dproperty1=value1\\\", \\\"-projecthelp\\\" };\\r\\n-    CommandLine line = parser.parse(options, args);\\r\\n-    String[] opts = line.getOptionValues(\\\"D\\\");\\r\\n+    final String[] args = new String[] { \\\"-buildfile\\\", \\\"mybuild.xml\\\", \\\"-Dproperty=value\\\", \\\"-Dproperty1=value1\\\", \\\"-projecthelp\\\" };\\r\\n+    final CommandLine line = parser.parse(options, args);\\r\\n+    final String[] opts = line.getOptionValues(\\\"D\\\");\\r\\n     assertEquals(\\\"property\\\", opts[0]);\\r\\n     assertEquals(\\\"value\\\", opts[1]);\\r\\n     assertEquals(\\\"property1\\\", opts[2]);\\r\\n     assertEquals(\\\"value1\\\", opts[3]);\\r\\n     assertEquals(line.getOptionValue(\\\"buildfile\\\"), \\\"mybuild.xml\\\");\\r\\n     assertTrue(line.hasOption(\\\"projecthelp\\\"));\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"tn@apache.org","authorName":"Thomas Neidhart","commitYear":"2013","diff":"\"@@ -1,25 +1,26 @@\\n+@Test\\r\\n public void testAnt() throws Exception {\\r\\n     CommandLineParser parser = new GnuParser();\\r\\n     Options options = new Options();\\r\\n     options.addOption(\\\"help\\\", false, \\\"print this message\\\");\\r\\n     options.addOption(\\\"projecthelp\\\", false, \\\"print project help information\\\");\\r\\n     options.addOption(\\\"version\\\", false, \\\"print the version information and exit\\\");\\r\\n     options.addOption(\\\"quiet\\\", false, \\\"be extra quiet\\\");\\r\\n     options.addOption(\\\"verbose\\\", false, \\\"be extra verbose\\\");\\r\\n     options.addOption(\\\"debug\\\", false, \\\"print debug information\\\");\\r\\n     options.addOption(\\\"logfile\\\", true, \\\"use given file for log\\\");\\r\\n     options.addOption(\\\"logger\\\", true, \\\"the class which is to perform the logging\\\");\\r\\n     options.addOption(\\\"listener\\\", true, \\\"add an instance of a class as a project listener\\\");\\r\\n     options.addOption(\\\"buildfile\\\", true, \\\"use given buildfile\\\");\\r\\n     options.addOption(OptionBuilder.withDescription(\\\"use value for given property\\\").hasArgs().withValueSeparator().create('D'));\\r\\n     options.addOption(\\\"find\\\", true, \\\"search for buildfile towards the root of the filesystem and use it\\\");\\r\\n     String[] args = new String[] { \\\"-buildfile\\\", \\\"mybuild.xml\\\", \\\"-Dproperty=value\\\", \\\"-Dproperty1=value1\\\", \\\"-projecthelp\\\" };\\r\\n     CommandLine line = parser.parse(options, args);\\r\\n     String[] opts = line.getOptionValues(\\\"D\\\");\\r\\n     assertEquals(\\\"property\\\", opts[0]);\\r\\n     assertEquals(\\\"value\\\", opts[1]);\\r\\n     assertEquals(\\\"property1\\\", opts[2]);\\r\\n     assertEquals(\\\"value1\\\", opts[3]);\\r\\n     assertEquals(line.getOptionValue(\\\"buildfile\\\"), \\\"mybuild.xml\\\");\\r\\n     assertTrue(line.hasOption(\\\"projecthelp\\\"));\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2008","diff":"\"@@ -1,29 +1,25 @@\\n-public void testAnt() {\\r\\n+public void testAnt() throws Exception {\\r\\n     CommandLineParser parser = new GnuParser();\\r\\n     Options options = new Options();\\r\\n     options.addOption(\\\"help\\\", false, \\\"print this message\\\");\\r\\n     options.addOption(\\\"projecthelp\\\", false, \\\"print project help information\\\");\\r\\n     options.addOption(\\\"version\\\", false, \\\"print the version information and exit\\\");\\r\\n     options.addOption(\\\"quiet\\\", false, \\\"be extra quiet\\\");\\r\\n     options.addOption(\\\"verbose\\\", false, \\\"be extra verbose\\\");\\r\\n     options.addOption(\\\"debug\\\", false, \\\"print debug information\\\");\\r\\n     options.addOption(\\\"logfile\\\", true, \\\"use given file for log\\\");\\r\\n     options.addOption(\\\"logger\\\", true, \\\"the class which is to perform the logging\\\");\\r\\n     options.addOption(\\\"listener\\\", true, \\\"add an instance of a class as a project listener\\\");\\r\\n     options.addOption(\\\"buildfile\\\", true, \\\"use given buildfile\\\");\\r\\n     options.addOption(OptionBuilder.withDescription(\\\"use value for given property\\\").hasArgs().withValueSeparator().create('D'));\\r\\n     options.addOption(\\\"find\\\", true, \\\"search for buildfile towards the root of the filesystem and use it\\\");\\r\\n     String[] args = new String[] { \\\"-buildfile\\\", \\\"mybuild.xml\\\", \\\"-Dproperty=value\\\", \\\"-Dproperty1=value1\\\", \\\"-projecthelp\\\" };\\r\\n-    try {\\r\\n-        CommandLine line = parser.parse(options, args);\\r\\n-        String[] opts = line.getOptionValues(\\\"D\\\");\\r\\n-        assertEquals(\\\"property\\\", opts[0]);\\r\\n-        assertEquals(\\\"value\\\", opts[1]);\\r\\n-        assertEquals(\\\"property1\\\", opts[2]);\\r\\n-        assertEquals(\\\"value1\\\", opts[3]);\\r\\n-        assertEquals(line.getOptionValue(\\\"buildfile\\\"), \\\"mybuild.xml\\\");\\r\\n-        assertTrue(line.hasOption(\\\"projecthelp\\\"));\\r\\n-    } catch (ParseException exp) {\\r\\n-        fail(\\\"Unexpected exception:\\\" + exp.getMessage());\\r\\n-    }\\r\\n+    CommandLine line = parser.parse(options, args);\\r\\n+    String[] opts = line.getOptionValues(\\\"D\\\");\\r\\n+    assertEquals(\\\"property\\\", opts[0]);\\r\\n+    assertEquals(\\\"value\\\", opts[1]);\\r\\n+    assertEquals(\\\"property1\\\", opts[2]);\\r\\n+    assertEquals(\\\"value1\\\", opts[3]);\\r\\n+    assertEquals(line.getOptionValue(\\\"buildfile\\\"), \\\"mybuild.xml\\\");\\r\\n+    assertTrue(line.hasOption(\\\"projecthelp\\\"));\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"bayard@apache.org","authorName":"Henri Yandell","commitYear":"2008","diff":"\"@@ -1,30 +1,29 @@\\n public void testAnt() {\\r\\n     CommandLineParser parser = new GnuParser();\\r\\n     Options options = new Options();\\r\\n     options.addOption(\\\"help\\\", false, \\\"print this message\\\");\\r\\n     options.addOption(\\\"projecthelp\\\", false, \\\"print project help information\\\");\\r\\n     options.addOption(\\\"version\\\", false, \\\"print the version information and exit\\\");\\r\\n     options.addOption(\\\"quiet\\\", false, \\\"be extra quiet\\\");\\r\\n     options.addOption(\\\"verbose\\\", false, \\\"be extra verbose\\\");\\r\\n     options.addOption(\\\"debug\\\", false, \\\"print debug information\\\");\\r\\n-    options.addOption(\\\"version\\\", false, \\\"produce logging information without adornments\\\");\\r\\n     options.addOption(\\\"logfile\\\", true, \\\"use given file for log\\\");\\r\\n     options.addOption(\\\"logger\\\", true, \\\"the class which is to perform the logging\\\");\\r\\n     options.addOption(\\\"listener\\\", true, \\\"add an instance of a class as a project listener\\\");\\r\\n     options.addOption(\\\"buildfile\\\", true, \\\"use given buildfile\\\");\\r\\n     options.addOption(OptionBuilder.withDescription(\\\"use value for given property\\\").hasArgs().withValueSeparator().create('D'));\\r\\n     options.addOption(\\\"find\\\", true, \\\"search for buildfile towards the root of the filesystem and use it\\\");\\r\\n     String[] args = new String[] { \\\"-buildfile\\\", \\\"mybuild.xml\\\", \\\"-Dproperty=value\\\", \\\"-Dproperty1=value1\\\", \\\"-projecthelp\\\" };\\r\\n     try {\\r\\n         CommandLine line = parser.parse(options, args);\\r\\n         String[] opts = line.getOptionValues(\\\"D\\\");\\r\\n         assertEquals(\\\"property\\\", opts[0]);\\r\\n         assertEquals(\\\"value\\\", opts[1]);\\r\\n         assertEquals(\\\"property1\\\", opts[2]);\\r\\n         assertEquals(\\\"value1\\\", opts[3]);\\r\\n         assertEquals(line.getOptionValue(\\\"buildfile\\\"), \\\"mybuild.xml\\\");\\r\\n         assertTrue(line.hasOption(\\\"projecthelp\\\"));\\r\\n     } catch (ParseException exp) {\\r\\n         fail(\\\"Unexpected exception:\\\" + exp.getMessage());\\r\\n     }\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -1,30 +1,30 @@\\n public void testAnt() {\\r\\n-    CommandLineParser parser = CommandLineParserFactory.newParser(\\\"org.apache.commons.cli.GnuParser\\\");\\r\\n+    CommandLineParser parser = new GnuParser();\\r\\n     Options options = new Options();\\r\\n     options.addOption(\\\"help\\\", false, \\\"print this message\\\");\\r\\n     options.addOption(\\\"projecthelp\\\", false, \\\"print project help information\\\");\\r\\n     options.addOption(\\\"version\\\", false, \\\"print the version information and exit\\\");\\r\\n     options.addOption(\\\"quiet\\\", false, \\\"be extra quiet\\\");\\r\\n     options.addOption(\\\"verbose\\\", false, \\\"be extra verbose\\\");\\r\\n     options.addOption(\\\"debug\\\", false, \\\"print debug information\\\");\\r\\n     options.addOption(\\\"version\\\", false, \\\"produce logging information without adornments\\\");\\r\\n     options.addOption(\\\"logfile\\\", true, \\\"use given file for log\\\");\\r\\n     options.addOption(\\\"logger\\\", true, \\\"the class which is to perform the logging\\\");\\r\\n     options.addOption(\\\"listener\\\", true, \\\"add an instance of a class as a project listener\\\");\\r\\n     options.addOption(\\\"buildfile\\\", true, \\\"use given buildfile\\\");\\r\\n     options.addOption(OptionBuilder.withDescription(\\\"use value for given property\\\").hasArgs().withValueSeparator().create('D'));\\r\\n     options.addOption(\\\"find\\\", true, \\\"search for buildfile towards the root of the filesystem and use it\\\");\\r\\n     String[] args = new String[] { \\\"-buildfile\\\", \\\"mybuild.xml\\\", \\\"-Dproperty=value\\\", \\\"-Dproperty1=value1\\\", \\\"-projecthelp\\\" };\\r\\n     try {\\r\\n         CommandLine line = parser.parse(options, args);\\r\\n         String[] opts = line.getOptionValues(\\\"D\\\");\\r\\n         assertEquals(\\\"property\\\", opts[0]);\\r\\n         assertEquals(\\\"value\\\", opts[1]);\\r\\n         assertEquals(\\\"property1\\\", opts[2]);\\r\\n         assertEquals(\\\"value1\\\", opts[3]);\\r\\n         assertEquals(line.getOptionValue(\\\"buildfile\\\"), \\\"mybuild.xml\\\");\\r\\n         assertTrue(line.hasOption(\\\"projecthelp\\\"));\\r\\n     } catch (ParseException exp) {\\r\\n         fail(\\\"Unexpected exception:\\\" + exp.getMessage());\\r\\n     }\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -1,28 +1,30 @@\\n public void testAnt() {\\r\\n     CommandLineParser parser = CommandLineParserFactory.newParser(\\\"org.apache.commons.cli.GnuParser\\\");\\r\\n     Options options = new Options();\\r\\n     options.addOption(\\\"help\\\", false, \\\"print this message\\\");\\r\\n     options.addOption(\\\"projecthelp\\\", false, \\\"print project help information\\\");\\r\\n     options.addOption(\\\"version\\\", false, \\\"print the version information and exit\\\");\\r\\n     options.addOption(\\\"quiet\\\", false, \\\"be extra quiet\\\");\\r\\n     options.addOption(\\\"verbose\\\", false, \\\"be extra verbose\\\");\\r\\n     options.addOption(\\\"debug\\\", false, \\\"print debug information\\\");\\r\\n     options.addOption(\\\"version\\\", false, \\\"produce logging information without adornments\\\");\\r\\n     options.addOption(\\\"logfile\\\", true, \\\"use given file for log\\\");\\r\\n     options.addOption(\\\"logger\\\", true, \\\"the class which is to perform the logging\\\");\\r\\n     options.addOption(\\\"listener\\\", true, \\\"add an instance of a class as a project listener\\\");\\r\\n     options.addOption(\\\"buildfile\\\", true, \\\"use given buildfile\\\");\\r\\n-    options.addOption(OptionBuilder.withDescription(\\\"use value for given property\\\").hasArgs().create('D'));\\r\\n+    options.addOption(OptionBuilder.withDescription(\\\"use value for given property\\\").hasArgs().withValueSeparator().create('D'));\\r\\n     options.addOption(\\\"find\\\", true, \\\"search for buildfile towards the root of the filesystem and use it\\\");\\r\\n     String[] args = new String[] { \\\"-buildfile\\\", \\\"mybuild.xml\\\", \\\"-Dproperty=value\\\", \\\"-Dproperty1=value1\\\", \\\"-projecthelp\\\" };\\r\\n     try {\\r\\n         CommandLine line = parser.parse(options, args);\\r\\n         String[] opts = line.getOptionValues(\\\"D\\\");\\r\\n-        assertEquals(opts[0], \\\"property=value\\\");\\r\\n-        assertEquals(opts[1], \\\"property1=value1\\\");\\r\\n+        assertEquals(\\\"property\\\", opts[0]);\\r\\n+        assertEquals(\\\"value\\\", opts[1]);\\r\\n+        assertEquals(\\\"property1\\\", opts[2]);\\r\\n+        assertEquals(\\\"value1\\\", opts[3]);\\r\\n         assertEquals(line.getOptionValue(\\\"buildfile\\\"), \\\"mybuild.xml\\\");\\r\\n         assertTrue(line.hasOption(\\\"projecthelp\\\"));\\r\\n     } catch (ParseException exp) {\\r\\n         fail(\\\"Unexpected exception:\\\" + exp.getMessage());\\r\\n     }\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -1,28 +1,28 @@\\n public void testAnt() {\\r\\n     CommandLineParser parser = CommandLineParserFactory.newParser(\\\"org.apache.commons.cli.GnuParser\\\");\\r\\n     Options options = new Options();\\r\\n     options.addOption(\\\"help\\\", false, \\\"print this message\\\");\\r\\n     options.addOption(\\\"projecthelp\\\", false, \\\"print project help information\\\");\\r\\n     options.addOption(\\\"version\\\", false, \\\"print the version information and exit\\\");\\r\\n     options.addOption(\\\"quiet\\\", false, \\\"be extra quiet\\\");\\r\\n     options.addOption(\\\"verbose\\\", false, \\\"be extra verbose\\\");\\r\\n     options.addOption(\\\"debug\\\", false, \\\"print debug information\\\");\\r\\n     options.addOption(\\\"version\\\", false, \\\"produce logging information without adornments\\\");\\r\\n     options.addOption(\\\"logfile\\\", true, \\\"use given file for log\\\");\\r\\n     options.addOption(\\\"logger\\\", true, \\\"the class which is to perform the logging\\\");\\r\\n     options.addOption(\\\"listener\\\", true, \\\"add an instance of a class as a project listener\\\");\\r\\n     options.addOption(\\\"buildfile\\\", true, \\\"use given buildfile\\\");\\r\\n-    options.addOption(OptionBuilder.withDescription(\\\"use value for given property\\\").hasArg().hasArgs().create('D'));\\r\\n+    options.addOption(OptionBuilder.withDescription(\\\"use value for given property\\\").hasArgs().create('D'));\\r\\n     options.addOption(\\\"find\\\", true, \\\"search for buildfile towards the root of the filesystem and use it\\\");\\r\\n     String[] args = new String[] { \\\"-buildfile\\\", \\\"mybuild.xml\\\", \\\"-Dproperty=value\\\", \\\"-Dproperty1=value1\\\", \\\"-projecthelp\\\" };\\r\\n     try {\\r\\n         CommandLine line = parser.parse(options, args);\\r\\n         String[] opts = line.getOptionValues(\\\"D\\\");\\r\\n         assertEquals(opts[0], \\\"property=value\\\");\\r\\n         assertEquals(opts[1], \\\"property1=value1\\\");\\r\\n         assertEquals(line.getOptionValue(\\\"buildfile\\\"), \\\"mybuild.xml\\\");\\r\\n         assertTrue(line.hasOption(\\\"projecthelp\\\"));\\r\\n     } catch (ParseException exp) {\\r\\n         fail(\\\"Unexpected exception:\\\" + exp.getMessage());\\r\\n     }\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -1,28 +1,28 @@\\n public void testAnt() {\\r\\n     CommandLineParser parser = CommandLineParserFactory.newParser(\\\"org.apache.commons.cli.GnuParser\\\");\\r\\n     Options options = new Options();\\r\\n     options.addOption(\\\"help\\\", false, \\\"print this message\\\");\\r\\n     options.addOption(\\\"projecthelp\\\", false, \\\"print project help information\\\");\\r\\n     options.addOption(\\\"version\\\", false, \\\"print the version information and exit\\\");\\r\\n     options.addOption(\\\"quiet\\\", false, \\\"be extra quiet\\\");\\r\\n     options.addOption(\\\"verbose\\\", false, \\\"be extra verbose\\\");\\r\\n     options.addOption(\\\"debug\\\", false, \\\"print debug information\\\");\\r\\n     options.addOption(\\\"version\\\", false, \\\"produce logging information without adornments\\\");\\r\\n     options.addOption(\\\"logfile\\\", true, \\\"use given file for log\\\");\\r\\n     options.addOption(\\\"logger\\\", true, \\\"the class which is to perform the logging\\\");\\r\\n     options.addOption(\\\"listener\\\", true, \\\"add an instance of a class as a project listener\\\");\\r\\n     options.addOption(\\\"buildfile\\\", true, \\\"use given buildfile\\\");\\r\\n-    options.addOption(OptionBuilder.withDescription(\\\"use value for given property\\\").hasArg().hasMultipleArgs().create('D'));\\r\\n+    options.addOption(OptionBuilder.withDescription(\\\"use value for given property\\\").hasArg().hasArgs().create('D'));\\r\\n     options.addOption(\\\"find\\\", true, \\\"search for buildfile towards the root of the filesystem and use it\\\");\\r\\n     String[] args = new String[] { \\\"-buildfile\\\", \\\"mybuild.xml\\\", \\\"-Dproperty=value\\\", \\\"-Dproperty1=value1\\\", \\\"-projecthelp\\\" };\\r\\n     try {\\r\\n         CommandLine line = parser.parse(options, args);\\r\\n         String[] opts = line.getOptionValues(\\\"D\\\");\\r\\n         assertEquals(opts[0], \\\"property=value\\\");\\r\\n         assertEquals(opts[1], \\\"property1=value1\\\");\\r\\n         assertEquals(line.getOptionValue(\\\"buildfile\\\"), \\\"mybuild.xml\\\");\\r\\n         assertTrue(line.hasOption(\\\"projecthelp\\\"));\\r\\n     } catch (ParseException exp) {\\r\\n         fail(\\\"Unexpected exception:\\\" + exp.getMessage());\\r\\n     }\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -1,28 +1,28 @@\\n public void testAnt() {\\r\\n     CommandLineParser parser = CommandLineParserFactory.newParser(\\\"org.apache.commons.cli.GnuParser\\\");\\r\\n     Options options = new Options();\\r\\n     options.addOption(\\\"help\\\", false, \\\"print this message\\\");\\r\\n     options.addOption(\\\"projecthelp\\\", false, \\\"print project help information\\\");\\r\\n     options.addOption(\\\"version\\\", false, \\\"print the version information and exit\\\");\\r\\n     options.addOption(\\\"quiet\\\", false, \\\"be extra quiet\\\");\\r\\n     options.addOption(\\\"verbose\\\", false, \\\"be extra verbose\\\");\\r\\n     options.addOption(\\\"debug\\\", false, \\\"print debug information\\\");\\r\\n     options.addOption(\\\"version\\\", false, \\\"produce logging information without adornments\\\");\\r\\n     options.addOption(\\\"logfile\\\", true, \\\"use given file for log\\\");\\r\\n     options.addOption(\\\"logger\\\", true, \\\"the class which is to perform the logging\\\");\\r\\n     options.addOption(\\\"listener\\\", true, \\\"add an instance of a class as a project listener\\\");\\r\\n     options.addOption(\\\"buildfile\\\", true, \\\"use given buildfile\\\");\\r\\n-    options.addOption(\\\"D\\\", null, true, \\\"use value for given property\\\", false, true);\\r\\n+    options.addOption(OptionBuilder.withDescription(\\\"use value for given property\\\").hasArg().hasMultipleArgs().create('D'));\\r\\n     options.addOption(\\\"find\\\", true, \\\"search for buildfile towards the root of the filesystem and use it\\\");\\r\\n     String[] args = new String[] { \\\"-buildfile\\\", \\\"mybuild.xml\\\", \\\"-Dproperty=value\\\", \\\"-Dproperty1=value1\\\", \\\"-projecthelp\\\" };\\r\\n     try {\\r\\n         CommandLine line = parser.parse(options, args);\\r\\n         String[] opts = line.getOptionValues(\\\"D\\\");\\r\\n         assertEquals(opts[0], \\\"property=value\\\");\\r\\n         assertEquals(opts[1], \\\"property1=value1\\\");\\r\\n         assertEquals(line.getOptionValue(\\\"buildfile\\\"), \\\"mybuild.xml\\\");\\r\\n         assertTrue(line.hasOption(\\\"projecthelp\\\"));\\r\\n     } catch (ParseException exp) {\\r\\n         fail(\\\"Unexpected exception:\\\" + exp.getMessage());\\r\\n     }\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -1,29 +1,28 @@\\n public void testAnt() {\\r\\n-    System.setProperty(\\\"org.apache.commons.cli.parser\\\", \\\"org.apache.commons.cli.GnuParser\\\");\\r\\n-    CommandLineParser parser = CommandLineParserFactory.newParser();\\r\\n+    CommandLineParser parser = CommandLineParserFactory.newParser(\\\"org.apache.commons.cli.GnuParser\\\");\\r\\n     Options options = new Options();\\r\\n     options.addOption(\\\"help\\\", false, \\\"print this message\\\");\\r\\n     options.addOption(\\\"projecthelp\\\", false, \\\"print project help information\\\");\\r\\n     options.addOption(\\\"version\\\", false, \\\"print the version information and exit\\\");\\r\\n     options.addOption(\\\"quiet\\\", false, \\\"be extra quiet\\\");\\r\\n     options.addOption(\\\"verbose\\\", false, \\\"be extra verbose\\\");\\r\\n     options.addOption(\\\"debug\\\", false, \\\"print debug information\\\");\\r\\n     options.addOption(\\\"version\\\", false, \\\"produce logging information without adornments\\\");\\r\\n     options.addOption(\\\"logfile\\\", true, \\\"use given file for log\\\");\\r\\n     options.addOption(\\\"logger\\\", true, \\\"the class which is to perform the logging\\\");\\r\\n     options.addOption(\\\"listener\\\", true, \\\"add an instance of a class as a project listener\\\");\\r\\n     options.addOption(\\\"buildfile\\\", true, \\\"use given buildfile\\\");\\r\\n     options.addOption(\\\"D\\\", null, true, \\\"use value for given property\\\", false, true);\\r\\n     options.addOption(\\\"find\\\", true, \\\"search for buildfile towards the root of the filesystem and use it\\\");\\r\\n     String[] args = new String[] { \\\"-buildfile\\\", \\\"mybuild.xml\\\", \\\"-Dproperty=value\\\", \\\"-Dproperty1=value1\\\", \\\"-projecthelp\\\" };\\r\\n     try {\\r\\n         CommandLine line = parser.parse(options, args);\\r\\n         String[] opts = line.getOptionValues(\\\"D\\\");\\r\\n         assertEquals(opts[0], \\\"property=value\\\");\\r\\n         assertEquals(opts[1], \\\"property1=value1\\\");\\r\\n         assertEquals(line.getOptionValue(\\\"buildfile\\\"), \\\"mybuild.xml\\\");\\r\\n         assertTrue(line.hasOption(\\\"projecthelp\\\"));\\r\\n     } catch (ParseException exp) {\\r\\n         fail(\\\"Unexpected exception:\\\" + exp.getMessage());\\r\\n     }\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -1,28 +1,29 @@\\n public void testAnt() {\\r\\n     System.setProperty(\\\"org.apache.commons.cli.parser\\\", \\\"org.apache.commons.cli.GnuParser\\\");\\r\\n+    CommandLineParser parser = CommandLineParserFactory.newParser();\\r\\n     Options options = new Options();\\r\\n     options.addOption(\\\"help\\\", false, \\\"print this message\\\");\\r\\n     options.addOption(\\\"projecthelp\\\", false, \\\"print project help information\\\");\\r\\n     options.addOption(\\\"version\\\", false, \\\"print the version information and exit\\\");\\r\\n     options.addOption(\\\"quiet\\\", false, \\\"be extra quiet\\\");\\r\\n     options.addOption(\\\"verbose\\\", false, \\\"be extra verbose\\\");\\r\\n     options.addOption(\\\"debug\\\", false, \\\"print debug information\\\");\\r\\n     options.addOption(\\\"version\\\", false, \\\"produce logging information without adornments\\\");\\r\\n     options.addOption(\\\"logfile\\\", true, \\\"use given file for log\\\");\\r\\n     options.addOption(\\\"logger\\\", true, \\\"the class which is to perform the logging\\\");\\r\\n     options.addOption(\\\"listener\\\", true, \\\"add an instance of a class as a project listener\\\");\\r\\n     options.addOption(\\\"buildfile\\\", true, \\\"use given buildfile\\\");\\r\\n     options.addOption(\\\"D\\\", null, true, \\\"use value for given property\\\", false, true);\\r\\n     options.addOption(\\\"find\\\", true, \\\"search for buildfile towards the root of the filesystem and use it\\\");\\r\\n     String[] args = new String[] { \\\"-buildfile\\\", \\\"mybuild.xml\\\", \\\"-Dproperty=value\\\", \\\"-Dproperty1=value1\\\", \\\"-projecthelp\\\" };\\r\\n     try {\\r\\n-        CommandLine line = options.parse(args);\\r\\n+        CommandLine line = parser.parse(options, args);\\r\\n         String[] opts = line.getOptionValues(\\\"D\\\");\\r\\n         assertEquals(opts[0], \\\"property=value\\\");\\r\\n         assertEquals(opts[1], \\\"property1=value1\\\");\\r\\n         assertEquals(line.getOptionValue(\\\"buildfile\\\"), \\\"mybuild.xml\\\");\\r\\n         assertTrue(line.hasOption(\\\"projecthelp\\\"));\\r\\n     } catch (ParseException exp) {\\r\\n         fail(\\\"Unexpected exception:\\\" + exp.getMessage());\\r\\n     }\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -1,30 +1,28 @@\\n public void testAnt() {\\r\\n+    System.setProperty(\\\"org.apache.commons.cli.parser\\\", \\\"org.apache.commons.cli.GnuParser\\\");\\r\\n     Options options = new Options();\\r\\n     options.addOption(\\\"help\\\", false, \\\"print this message\\\");\\r\\n     options.addOption(\\\"projecthelp\\\", false, \\\"print project help information\\\");\\r\\n     options.addOption(\\\"version\\\", false, \\\"print the version information and exit\\\");\\r\\n     options.addOption(\\\"quiet\\\", false, \\\"be extra quiet\\\");\\r\\n     options.addOption(\\\"verbose\\\", false, \\\"be extra verbose\\\");\\r\\n     options.addOption(\\\"debug\\\", false, \\\"print debug information\\\");\\r\\n     options.addOption(\\\"version\\\", false, \\\"produce logging information without adornments\\\");\\r\\n     options.addOption(\\\"logfile\\\", true, \\\"use given file for log\\\");\\r\\n     options.addOption(\\\"logger\\\", true, \\\"the class which is to perform the logging\\\");\\r\\n     options.addOption(\\\"listener\\\", true, \\\"add an instance of a class as a project listener\\\");\\r\\n     options.addOption(\\\"buildfile\\\", true, \\\"use given buildfile\\\");\\r\\n-    options.addOption(\\\"D\\\", true, \\\"use value for given property\\\");\\r\\n+    options.addOption(\\\"D\\\", null, true, \\\"use value for given property\\\", false, true);\\r\\n     options.addOption(\\\"find\\\", true, \\\"search for buildfile towards the root of the filesystem and use it\\\");\\r\\n-    String[] args = new String[] { \\\"-buildfile\\\", \\\"mybuild.xml\\\" };\\r\\n+    String[] args = new String[] { \\\"-buildfile\\\", \\\"mybuild.xml\\\", \\\"-Dproperty=value\\\", \\\"-Dproperty1=value1\\\", \\\"-projecthelp\\\" };\\r\\n     try {\\r\\n         CommandLine line = options.parse(args);\\r\\n-        assertTrue(\\\"mybuild.xml\\\" == line.getOptionValue(\\\"buildfile\\\"));\\r\\n-    } catch (ParseException exp) {\\r\\n-        fail(\\\"Unexpected exception:\\\" + exp.getMessage());\\r\\n-    }\\r\\n-    args = new String[] { \\\"-buildfile\\\", \\\"mybuild.xml\\\", \\\"-Dproperty=value\\\" };\\r\\n-    try {\\r\\n-        CommandLine line = options.parse(args);\\r\\n-        assertEquals(line.getOptionValue(\\\"D\\\"), \\\"property=value\\\");\\r\\n+        String[] opts = line.getOptionValues(\\\"D\\\");\\r\\n+        assertEquals(opts[0], \\\"property=value\\\");\\r\\n+        assertEquals(opts[1], \\\"property1=value1\\\");\\r\\n+        assertEquals(line.getOptionValue(\\\"buildfile\\\"), \\\"mybuild.xml\\\");\\r\\n+        assertTrue(line.hasOption(\\\"projecthelp\\\"));\\r\\n     } catch (ParseException exp) {\\r\\n         fail(\\\"Unexpected exception:\\\" + exp.getMessage());\\r\\n     }\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -0,0 +1,30 @@\\n+public void testAnt() {\\r\\n+    Options options = new Options();\\r\\n+    options.addOption(\\\"help\\\", false, \\\"print this message\\\");\\r\\n+    options.addOption(\\\"projecthelp\\\", false, \\\"print project help information\\\");\\r\\n+    options.addOption(\\\"version\\\", false, \\\"print the version information and exit\\\");\\r\\n+    options.addOption(\\\"quiet\\\", false, \\\"be extra quiet\\\");\\r\\n+    options.addOption(\\\"verbose\\\", false, \\\"be extra verbose\\\");\\r\\n+    options.addOption(\\\"debug\\\", false, \\\"print debug information\\\");\\r\\n+    options.addOption(\\\"version\\\", false, \\\"produce logging information without adornments\\\");\\r\\n+    options.addOption(\\\"logfile\\\", true, \\\"use given file for log\\\");\\r\\n+    options.addOption(\\\"logger\\\", true, \\\"the class which is to perform the logging\\\");\\r\\n+    options.addOption(\\\"listener\\\", true, \\\"add an instance of a class as a project listener\\\");\\r\\n+    options.addOption(\\\"buildfile\\\", true, \\\"use given buildfile\\\");\\r\\n+    options.addOption(\\\"D\\\", true, \\\"use value for given property\\\");\\r\\n+    options.addOption(\\\"find\\\", true, \\\"search for buildfile towards the root of the filesystem and use it\\\");\\r\\n+    String[] args = new String[] { \\\"-buildfile\\\", \\\"mybuild.xml\\\" };\\r\\n+    try {\\r\\n+        CommandLine line = options.parse(args);\\r\\n+        assertTrue(\\\"mybuild.xml\\\" == line.getOptionValue(\\\"buildfile\\\"));\\r\\n+    } catch (ParseException exp) {\\r\\n+        fail(\\\"Unexpected exception:\\\" + exp.getMessage());\\r\\n+    }\\r\\n+    args = new String[] { \\\"-buildfile\\\", \\\"mybuild.xml\\\", \\\"-Dproperty=value\\\" };\\r\\n+    try {\\r\\n+        CommandLine line = options.parse(args);\\r\\n+        assertEquals(line.getOptionValue(\\\"D\\\"), \\\"property=value\\\");\\r\\n+    } catch (ParseException exp) {\\r\\n+        fail(\\\"Unexpected exception:\\\" + exp.getMessage());\\r\\n+    }\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\test\java\org\apache\commons\cli\ApplicationTest.java	testGroovy	org.apache.commons.cli.ApplicationTest.testGroovy()	89	156	1	[{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"\""},{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,19 +1,19 @@\\n @Test\\r\\n public void testGroovy() throws Exception {\\r\\n-    Options options = new Options();\\r\\n+    final Options options = new Options();\\r\\n     options.addOption(OptionBuilder.withLongOpt(\\\"define\\\").withDescription(\\\"define a system property\\\").hasArg(true).withArgName(\\\"name=value\\\").create('D'));\\r\\n     options.addOption(OptionBuilder.hasArg(false).withDescription(\\\"usage information\\\").withLongOpt(\\\"help\\\").create('h'));\\r\\n     options.addOption(OptionBuilder.hasArg(false).withDescription(\\\"debug mode will print out full stack traces\\\").withLongOpt(\\\"debug\\\").create('d'));\\r\\n     options.addOption(OptionBuilder.hasArg(false).withDescription(\\\"display the Groovy and JVM versions\\\").withLongOpt(\\\"version\\\").create('v'));\\r\\n     options.addOption(OptionBuilder.withArgName(\\\"charset\\\").hasArg().withDescription(\\\"specify the encoding of the files\\\").withLongOpt(\\\"encoding\\\").create('c'));\\r\\n     options.addOption(OptionBuilder.withArgName(\\\"script\\\").hasArg().withDescription(\\\"specify a command line script\\\").create('e'));\\r\\n     options.addOption(OptionBuilder.withArgName(\\\"extension\\\").hasOptionalArg().withDescription(\\\"modify files in place; create backup if extension is given (e.g. \\\\'.bak\\\\')\\\").create('i'));\\r\\n     options.addOption(OptionBuilder.hasArg(false).withDescription(\\\"process files line by line using implicit 'line' variable\\\").create('n'));\\r\\n     options.addOption(OptionBuilder.hasArg(false).withDescription(\\\"process files line by line and print result (see also -n)\\\").create('p'));\\r\\n     options.addOption(OptionBuilder.withArgName(\\\"port\\\").hasOptionalArg().withDescription(\\\"listen on a port and process inbound lines\\\").create('l'));\\r\\n     options.addOption(OptionBuilder.withArgName(\\\"splitPattern\\\").hasOptionalArg().withDescription(\\\"split lines using splitPattern (default '\\\\\\\\s') using implicit 'split' variable\\\").withLongOpt(\\\"autosplit\\\").create('a'));\\r\\n-    Parser parser = new PosixParser();\\r\\n-    CommandLine line = parser.parse(options, new String[] { \\\"-e\\\", \\\"println 'hello'\\\" }, true);\\r\\n+    final Parser parser = new PosixParser();\\r\\n+    final CommandLine line = parser.parse(options, new String[] { \\\"-e\\\", \\\"println 'hello'\\\" }, true);\\r\\n     assertTrue(line.hasOption('e'));\\r\\n     assertEquals(\\\"println 'hello'\\\", line.getOptionValue('e'));\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"tn@apache.org","authorName":"Thomas Neidhart","commitYear":"2013","diff":"\"@@ -1,18 +1,19 @@\\n+@Test\\r\\n public void testGroovy() throws Exception {\\r\\n     Options options = new Options();\\r\\n     options.addOption(OptionBuilder.withLongOpt(\\\"define\\\").withDescription(\\\"define a system property\\\").hasArg(true).withArgName(\\\"name=value\\\").create('D'));\\r\\n     options.addOption(OptionBuilder.hasArg(false).withDescription(\\\"usage information\\\").withLongOpt(\\\"help\\\").create('h'));\\r\\n     options.addOption(OptionBuilder.hasArg(false).withDescription(\\\"debug mode will print out full stack traces\\\").withLongOpt(\\\"debug\\\").create('d'));\\r\\n     options.addOption(OptionBuilder.hasArg(false).withDescription(\\\"display the Groovy and JVM versions\\\").withLongOpt(\\\"version\\\").create('v'));\\r\\n     options.addOption(OptionBuilder.withArgName(\\\"charset\\\").hasArg().withDescription(\\\"specify the encoding of the files\\\").withLongOpt(\\\"encoding\\\").create('c'));\\r\\n     options.addOption(OptionBuilder.withArgName(\\\"script\\\").hasArg().withDescription(\\\"specify a command line script\\\").create('e'));\\r\\n     options.addOption(OptionBuilder.withArgName(\\\"extension\\\").hasOptionalArg().withDescription(\\\"modify files in place; create backup if extension is given (e.g. \\\\'.bak\\\\')\\\").create('i'));\\r\\n     options.addOption(OptionBuilder.hasArg(false).withDescription(\\\"process files line by line using implicit 'line' variable\\\").create('n'));\\r\\n     options.addOption(OptionBuilder.hasArg(false).withDescription(\\\"process files line by line and print result (see also -n)\\\").create('p'));\\r\\n     options.addOption(OptionBuilder.withArgName(\\\"port\\\").hasOptionalArg().withDescription(\\\"listen on a port and process inbound lines\\\").create('l'));\\r\\n     options.addOption(OptionBuilder.withArgName(\\\"splitPattern\\\").hasOptionalArg().withDescription(\\\"split lines using splitPattern (default '\\\\\\\\s') using implicit 'split' variable\\\").withLongOpt(\\\"autosplit\\\").create('a'));\\r\\n     Parser parser = new PosixParser();\\r\\n     CommandLine line = parser.parse(options, new String[] { \\\"-e\\\", \\\"println 'hello'\\\" }, true);\\r\\n     assertTrue(line.hasOption('e'));\\r\\n     assertEquals(\\\"println 'hello'\\\", line.getOptionValue('e'));\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2008","diff":"\"@@ -1,18 +1,18 @@\\n public void testGroovy() throws Exception {\\r\\n     Options options = new Options();\\r\\n     options.addOption(OptionBuilder.withLongOpt(\\\"define\\\").withDescription(\\\"define a system property\\\").hasArg(true).withArgName(\\\"name=value\\\").create('D'));\\r\\n     options.addOption(OptionBuilder.hasArg(false).withDescription(\\\"usage information\\\").withLongOpt(\\\"help\\\").create('h'));\\r\\n     options.addOption(OptionBuilder.hasArg(false).withDescription(\\\"debug mode will print out full stack traces\\\").withLongOpt(\\\"debug\\\").create('d'));\\r\\n     options.addOption(OptionBuilder.hasArg(false).withDescription(\\\"display the Groovy and JVM versions\\\").withLongOpt(\\\"version\\\").create('v'));\\r\\n     options.addOption(OptionBuilder.withArgName(\\\"charset\\\").hasArg().withDescription(\\\"specify the encoding of the files\\\").withLongOpt(\\\"encoding\\\").create('c'));\\r\\n     options.addOption(OptionBuilder.withArgName(\\\"script\\\").hasArg().withDescription(\\\"specify a command line script\\\").create('e'));\\r\\n     options.addOption(OptionBuilder.withArgName(\\\"extension\\\").hasOptionalArg().withDescription(\\\"modify files in place; create backup if extension is given (e.g. \\\\'.bak\\\\')\\\").create('i'));\\r\\n     options.addOption(OptionBuilder.hasArg(false).withDescription(\\\"process files line by line using implicit 'line' variable\\\").create('n'));\\r\\n     options.addOption(OptionBuilder.hasArg(false).withDescription(\\\"process files line by line and print result (see also -n)\\\").create('p'));\\r\\n     options.addOption(OptionBuilder.withArgName(\\\"port\\\").hasOptionalArg().withDescription(\\\"listen on a port and process inbound lines\\\").create('l'));\\r\\n     options.addOption(OptionBuilder.withArgName(\\\"splitPattern\\\").hasOptionalArg().withDescription(\\\"split lines using splitPattern (default '\\\\\\\\s') using implicit 'split' variable\\\").withLongOpt(\\\"autosplit\\\").create('a'));\\r\\n     Parser parser = new PosixParser();\\r\\n-    CommandLine line = parser.parse(options, new String[] { \\\"-e\\\", \\\"println 'hello'\\\" });\\r\\n+    CommandLine line = parser.parse(options, new String[] { \\\"-e\\\", \\\"println 'hello'\\\" }, true);\\r\\n     assertTrue(line.hasOption('e'));\\r\\n     assertEquals(\\\"println 'hello'\\\", line.getOptionValue('e'));\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2008","diff":"\"@@ -0,0 +1,18 @@\\n+public void testGroovy() throws Exception {\\r\\n+    Options options = new Options();\\r\\n+    options.addOption(OptionBuilder.withLongOpt(\\\"define\\\").withDescription(\\\"define a system property\\\").hasArg(true).withArgName(\\\"name=value\\\").create('D'));\\r\\n+    options.addOption(OptionBuilder.hasArg(false).withDescription(\\\"usage information\\\").withLongOpt(\\\"help\\\").create('h'));\\r\\n+    options.addOption(OptionBuilder.hasArg(false).withDescription(\\\"debug mode will print out full stack traces\\\").withLongOpt(\\\"debug\\\").create('d'));\\r\\n+    options.addOption(OptionBuilder.hasArg(false).withDescription(\\\"display the Groovy and JVM versions\\\").withLongOpt(\\\"version\\\").create('v'));\\r\\n+    options.addOption(OptionBuilder.withArgName(\\\"charset\\\").hasArg().withDescription(\\\"specify the encoding of the files\\\").withLongOpt(\\\"encoding\\\").create('c'));\\r\\n+    options.addOption(OptionBuilder.withArgName(\\\"script\\\").hasArg().withDescription(\\\"specify a command line script\\\").create('e'));\\r\\n+    options.addOption(OptionBuilder.withArgName(\\\"extension\\\").hasOptionalArg().withDescription(\\\"modify files in place; create backup if extension is given (e.g. \\\\'.bak\\\\')\\\").create('i'));\\r\\n+    options.addOption(OptionBuilder.hasArg(false).withDescription(\\\"process files line by line using implicit 'line' variable\\\").create('n'));\\r\\n+    options.addOption(OptionBuilder.hasArg(false).withDescription(\\\"process files line by line and print result (see also -n)\\\").create('p'));\\r\\n+    options.addOption(OptionBuilder.withArgName(\\\"port\\\").hasOptionalArg().withDescription(\\\"listen on a port and process inbound lines\\\").create('l'));\\r\\n+    options.addOption(OptionBuilder.withArgName(\\\"splitPattern\\\").hasOptionalArg().withDescription(\\\"split lines using splitPattern (default '\\\\\\\\s') using implicit 'split' variable\\\").withLongOpt(\\\"autosplit\\\").create('a'));\\r\\n+    Parser parser = new PosixParser();\\r\\n+    CommandLine line = parser.parse(options, new String[] { \\\"-e\\\", \\\"println 'hello'\\\" });\\r\\n+    assertTrue(line.hasOption('e'));\\r\\n+    assertEquals(\\\"println 'hello'\\\", line.getOptionValue('e'));\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\test\java\org\apache\commons\cli\ApplicationTest.java	testLs	org.apache.commons.cli.ApplicationTest.testLs()	159	183	1	[{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"@@ -1,16 +1,16 @@\\n @Test\\r\\n public void testLs() throws Exception {\\r\\n     final CommandLineParser parser = new PosixParser();\\r\\n     final Options options = new Options();\\r\\n     options.addOption(\\\"a\\\", \\\"all\\\", false, \\\"do not hide entries starting with .\\\");\\r\\n     options.addOption(\\\"A\\\", \\\"almost-all\\\", false, \\\"do not list implied . and ..\\\");\\r\\n     options.addOption(\\\"b\\\", \\\"escape\\\", false, \\\"print octal escapes for nongraphic characters\\\");\\r\\n     options.addOption(OptionBuilder.withLongOpt(\\\"block-size\\\").withDescription(\\\"use SIZE-byte blocks\\\").hasArg().withArgName(\\\"SIZE\\\").create());\\r\\n     options.addOption(\\\"B\\\", \\\"ignore-backups\\\", false, \\\"do not list implied entried ending with ~\\\");\\r\\n-    options.addOption(\\\"c\\\", false, \\\"with -lt: sort by, and show, ctime (time of last modification of file status information) with -l:show ctime and sort by name otherwise: sort by ctime\\\");\\r\\n+    options.addOption(\\\"c\\\", false, \\\"with -lt: sort by, and show, ctime (time of last modification of file status information) with \\\" + \\\"-l:show ctime and sort by name otherwise: sort by ctime\\\");\\r\\n     options.addOption(\\\"C\\\", false, \\\"list entries by columns\\\");\\r\\n-    final String[] args = new String[] { \\\"--block-size=10\\\" };\\r\\n+    final String[] args = { \\\"--block-size=10\\\" };\\r\\n     final CommandLine line = parser.parse(options, args);\\r\\n     assertTrue(line.hasOption(\\\"block-size\\\"));\\r\\n     assertEquals(line.getOptionValue(\\\"block-size\\\"), \\\"10\\\");\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,16 +1,16 @@\\n @Test\\r\\n public void testLs() throws Exception {\\r\\n-    CommandLineParser parser = new PosixParser();\\r\\n-    Options options = new Options();\\r\\n+    final CommandLineParser parser = new PosixParser();\\r\\n+    final Options options = new Options();\\r\\n     options.addOption(\\\"a\\\", \\\"all\\\", false, \\\"do not hide entries starting with .\\\");\\r\\n     options.addOption(\\\"A\\\", \\\"almost-all\\\", false, \\\"do not list implied . and ..\\\");\\r\\n     options.addOption(\\\"b\\\", \\\"escape\\\", false, \\\"print octal escapes for nongraphic characters\\\");\\r\\n     options.addOption(OptionBuilder.withLongOpt(\\\"block-size\\\").withDescription(\\\"use SIZE-byte blocks\\\").hasArg().withArgName(\\\"SIZE\\\").create());\\r\\n     options.addOption(\\\"B\\\", \\\"ignore-backups\\\", false, \\\"do not list implied entried ending with ~\\\");\\r\\n     options.addOption(\\\"c\\\", false, \\\"with -lt: sort by, and show, ctime (time of last modification of file status information) with -l:show ctime and sort by name otherwise: sort by ctime\\\");\\r\\n     options.addOption(\\\"C\\\", false, \\\"list entries by columns\\\");\\r\\n-    String[] args = new String[] { \\\"--block-size=10\\\" };\\r\\n-    CommandLine line = parser.parse(options, args);\\r\\n+    final String[] args = new String[] { \\\"--block-size=10\\\" };\\r\\n+    final CommandLine line = parser.parse(options, args);\\r\\n     assertTrue(line.hasOption(\\\"block-size\\\"));\\r\\n     assertEquals(line.getOptionValue(\\\"block-size\\\"), \\\"10\\\");\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"tn@apache.org","authorName":"Thomas Neidhart","commitYear":"2013","diff":"\"@@ -1,15 +1,16 @@\\n+@Test\\r\\n public void testLs() throws Exception {\\r\\n     CommandLineParser parser = new PosixParser();\\r\\n     Options options = new Options();\\r\\n     options.addOption(\\\"a\\\", \\\"all\\\", false, \\\"do not hide entries starting with .\\\");\\r\\n     options.addOption(\\\"A\\\", \\\"almost-all\\\", false, \\\"do not list implied . and ..\\\");\\r\\n     options.addOption(\\\"b\\\", \\\"escape\\\", false, \\\"print octal escapes for nongraphic characters\\\");\\r\\n     options.addOption(OptionBuilder.withLongOpt(\\\"block-size\\\").withDescription(\\\"use SIZE-byte blocks\\\").hasArg().withArgName(\\\"SIZE\\\").create());\\r\\n     options.addOption(\\\"B\\\", \\\"ignore-backups\\\", false, \\\"do not list implied entried ending with ~\\\");\\r\\n     options.addOption(\\\"c\\\", false, \\\"with -lt: sort by, and show, ctime (time of last modification of file status information) with -l:show ctime and sort by name otherwise: sort by ctime\\\");\\r\\n     options.addOption(\\\"C\\\", false, \\\"list entries by columns\\\");\\r\\n     String[] args = new String[] { \\\"--block-size=10\\\" };\\r\\n     CommandLine line = parser.parse(options, args);\\r\\n     assertTrue(line.hasOption(\\\"block-size\\\"));\\r\\n     assertEquals(line.getOptionValue(\\\"block-size\\\"), \\\"10\\\");\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2008","diff":"\"@@ -1,15 +1,15 @@\\n public void testLs() throws Exception {\\r\\n     CommandLineParser parser = new PosixParser();\\r\\n     Options options = new Options();\\r\\n     options.addOption(\\\"a\\\", \\\"all\\\", false, \\\"do not hide entries starting with .\\\");\\r\\n     options.addOption(\\\"A\\\", \\\"almost-all\\\", false, \\\"do not list implied . and ..\\\");\\r\\n     options.addOption(\\\"b\\\", \\\"escape\\\", false, \\\"print octal escapes for nongraphic characters\\\");\\r\\n-    options.addOption(OptionBuilder.withLongOpt(\\\"block-size\\\").withDescription(\\\"use SIZE-byte blocks\\\").withValueSeparator('=').hasArg().create());\\r\\n+    options.addOption(OptionBuilder.withLongOpt(\\\"block-size\\\").withDescription(\\\"use SIZE-byte blocks\\\").hasArg().withArgName(\\\"SIZE\\\").create());\\r\\n     options.addOption(\\\"B\\\", \\\"ignore-backups\\\", false, \\\"do not list implied entried ending with ~\\\");\\r\\n     options.addOption(\\\"c\\\", false, \\\"with -lt: sort by, and show, ctime (time of last modification of file status information) with -l:show ctime and sort by name otherwise: sort by ctime\\\");\\r\\n     options.addOption(\\\"C\\\", false, \\\"list entries by columns\\\");\\r\\n     String[] args = new String[] { \\\"--block-size=10\\\" };\\r\\n     CommandLine line = parser.parse(options, args);\\r\\n     assertTrue(line.hasOption(\\\"block-size\\\"));\\r\\n     assertEquals(line.getOptionValue(\\\"block-size\\\"), \\\"10\\\");\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2008","diff":"\"@@ -1,19 +1,15 @@\\n-public void testLs() {\\r\\n+public void testLs() throws Exception {\\r\\n     CommandLineParser parser = new PosixParser();\\r\\n     Options options = new Options();\\r\\n     options.addOption(\\\"a\\\", \\\"all\\\", false, \\\"do not hide entries starting with .\\\");\\r\\n     options.addOption(\\\"A\\\", \\\"almost-all\\\", false, \\\"do not list implied . and ..\\\");\\r\\n     options.addOption(\\\"b\\\", \\\"escape\\\", false, \\\"print octal escapes for nongraphic characters\\\");\\r\\n     options.addOption(OptionBuilder.withLongOpt(\\\"block-size\\\").withDescription(\\\"use SIZE-byte blocks\\\").withValueSeparator('=').hasArg().create());\\r\\n     options.addOption(\\\"B\\\", \\\"ignore-backups\\\", false, \\\"do not list implied entried ending with ~\\\");\\r\\n     options.addOption(\\\"c\\\", false, \\\"with -lt: sort by, and show, ctime (time of last modification of file status information) with -l:show ctime and sort by name otherwise: sort by ctime\\\");\\r\\n     options.addOption(\\\"C\\\", false, \\\"list entries by columns\\\");\\r\\n     String[] args = new String[] { \\\"--block-size=10\\\" };\\r\\n-    try {\\r\\n-        CommandLine line = parser.parse(options, args);\\r\\n-        assertTrue(line.hasOption(\\\"block-size\\\"));\\r\\n-        assertEquals(line.getOptionValue(\\\"block-size\\\"), \\\"10\\\");\\r\\n-    } catch (ParseException exp) {\\r\\n-        fail(\\\"Unexpected exception:\\\" + exp.getMessage());\\r\\n-    }\\r\\n+    CommandLine line = parser.parse(options, args);\\r\\n+    assertTrue(line.hasOption(\\\"block-size\\\"));\\r\\n+    assertEquals(line.getOptionValue(\\\"block-size\\\"), \\\"10\\\");\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -0,0 +1,19 @@\\n+public void testLs() {\\r\\n+    CommandLineParser parser = new PosixParser();\\r\\n+    Options options = new Options();\\r\\n+    options.addOption(\\\"a\\\", \\\"all\\\", false, \\\"do not hide entries starting with .\\\");\\r\\n+    options.addOption(\\\"A\\\", \\\"almost-all\\\", false, \\\"do not list implied . and ..\\\");\\r\\n+    options.addOption(\\\"b\\\", \\\"escape\\\", false, \\\"print octal escapes for nongraphic characters\\\");\\r\\n+    options.addOption(OptionBuilder.withLongOpt(\\\"block-size\\\").withDescription(\\\"use SIZE-byte blocks\\\").withValueSeparator('=').hasArg().create());\\r\\n+    options.addOption(\\\"B\\\", \\\"ignore-backups\\\", false, \\\"do not list implied entried ending with ~\\\");\\r\\n+    options.addOption(\\\"c\\\", false, \\\"with -lt: sort by, and show, ctime (time of last modification of file status information) with -l:show ctime and sort by name otherwise: sort by ctime\\\");\\r\\n+    options.addOption(\\\"C\\\", false, \\\"list entries by columns\\\");\\r\\n+    String[] args = new String[] { \\\"--block-size=10\\\" };\\r\\n+    try {\\r\\n+        CommandLine line = parser.parse(options, args);\\r\\n+        assertTrue(line.hasOption(\\\"block-size\\\"));\\r\\n+        assertEquals(line.getOptionValue(\\\"block-size\\\"), \\\"10\\\");\\r\\n+    } catch (ParseException exp) {\\r\\n+        fail(\\\"Unexpected exception:\\\" + exp.getMessage());\\r\\n+    }\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\test\java\org\apache\commons\cli\ApplicationTest.java	testMan	org.apache.commons.cli.ApplicationTest.testMan()	189	276	1	[{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2023","diff":"\"@@ -1,10 +1,10 @@\\n @Test\\r\\n public void testMan() {\\r\\n     final String cmdLine = \\\"man [-c|-f|-k|-w|-tZT device] [-adlhu7V] [-Mpath] [-Ppager] [-Slist] [-msystem] [-pstring] [-Llocale] [-eextension] [section]\\\" + \\\" page ...\\\";\\r\\n-    final Options options = new Options().addOption(\\\"a\\\", \\\"all\\\", false, \\\"find all matching manual pages.\\\").addOption(\\\"d\\\", \\\"debug\\\", false, \\\"emit debugging messages.\\\").addOption(\\\"e\\\", \\\"extension\\\", false, \\\"limit search to extension type 'extension'.\\\").addOption(\\\"f\\\", \\\"whatis\\\", false, \\\"equivalent to whatis.\\\").addOption(\\\"k\\\", \\\"apropos\\\", false, \\\"equivalent to apropos.\\\").addOption(\\\"w\\\", \\\"location\\\", false, \\\"print physical location of man page(s).\\\").addOption(\\\"l\\\", \\\"local-file\\\", false, \\\"interpret 'page' argument(s) as local filen ame(s)\\\").addOption(\\\"u\\\", \\\"update\\\", false, \\\"force a cache consistency check.\\\").addOption(\\\"r\\\", \\\"prompt\\\", true, \\\"provide 'less' pager with prompt.\\\").addOption(\\\"c\\\", \\\"catman\\\", false, \\\"used by catman to reformat out of date cat pages.\\\").addOption(\\\"7\\\", \\\"ascii\\\", false, \\\"display ASCII translation or certain latin1 chars.\\\").addOption(\\\"t\\\", \\\"troff\\\", false, \\\"use troff format pages.\\\").addOption(\\\"T\\\", \\\"troff-device\\\", true, \\\"use groff with selected device.\\\").addOption(\\\"Z\\\", \\\"ditroff\\\", false, \\\"use groff with selected device.\\\").addOption(\\\"D\\\", \\\"default\\\", false, \\\"reset all options to their default values.\\\").addOption(\\\"M\\\", \\\"manpath\\\", true, \\\"set search path for manual pages to 'path'.\\\").addOption(\\\"P\\\", \\\"pager\\\", true, \\\"use program 'pager' to display output.\\\").addOption(\\\"S\\\", \\\"sections\\\", true, \\\"use colon separated section list.\\\").addOption(\\\"m\\\", \\\"systems\\\", true, \\\"search for man pages from other Unix system(s).\\\").addOption(\\\"L\\\", \\\"locale\\\", true, \\\"define the locale for this particular man search.\\\").addOption(\\\"p\\\", \\\"preprocessor\\\", true, \\\"string indicates which preprocessor to run.\\\\n\\\" + \\\" e - [n]eqn  p - pic     t - tbl\\\\n\\\" + \\\" g - grap    r - refer   v - vgrind\\\").addOption(\\\"V\\\", \\\"version\\\", false, \\\"show version.\\\").addOption(\\\"h\\\", \\\"help\\\", false, \\\"show this usage message.\\\");\\r\\n+    final Options options = new Options().addOption(\\\"a\\\", \\\"all\\\", false, \\\"find all matching manual pages.\\\").addOption(\\\"d\\\", \\\"debug\\\", false, \\\"emit debugging messages.\\\").addOption(\\\"e\\\", \\\"extension\\\", false, \\\"limit search to extension type 'extension'.\\\").addOption(\\\"f\\\", \\\"whatis\\\", false, \\\"equivalent to whatis.\\\").addOption(\\\"k\\\", \\\"apropos\\\", false, \\\"equivalent to apropos.\\\").addOption(\\\"w\\\", \\\"location\\\", false, \\\"print physical location of man page(s).\\\").addOption(\\\"l\\\", \\\"local-file\\\", false, \\\"interpret 'page' argument(s) as local file name(s)\\\").addOption(\\\"u\\\", \\\"update\\\", false, \\\"force a cache consistency check.\\\").addOption(\\\"r\\\", \\\"prompt\\\", true, \\\"provide 'less' pager with prompt.\\\").addOption(\\\"c\\\", \\\"catman\\\", false, \\\"used by catman to reformat out of date cat pages.\\\").addOption(\\\"7\\\", \\\"ascii\\\", false, \\\"display ASCII translation or certain latin1 chars.\\\").addOption(\\\"t\\\", \\\"troff\\\", false, \\\"use troff format pages.\\\").addOption(\\\"T\\\", \\\"troff-device\\\", true, \\\"use groff with selected device.\\\").addOption(\\\"Z\\\", \\\"ditroff\\\", false, \\\"use groff with selected device.\\\").addOption(\\\"D\\\", \\\"default\\\", false, \\\"reset all options to their default values.\\\").addOption(\\\"M\\\", \\\"manpath\\\", true, \\\"set search path for manual pages to 'path'.\\\").addOption(\\\"P\\\", \\\"pager\\\", true, \\\"use program 'pager' to display output.\\\").addOption(\\\"S\\\", \\\"sections\\\", true, \\\"use colon separated section list.\\\").addOption(\\\"m\\\", \\\"systems\\\", true, \\\"search for man pages from other Unix system(s).\\\").addOption(\\\"L\\\", \\\"locale\\\", true, \\\"define the locale for this particular man search.\\\").addOption(\\\"p\\\", \\\"preprocessor\\\", true, \\\"string indicates which preprocessor to run.\\\\n\\\" + \\\" e - [n]eqn  p - pic     t - tbl\\\\n\\\" + \\\" g - grap    r - refer   v - vgrind\\\").addOption(\\\"V\\\", \\\"version\\\", false, \\\"show version.\\\").addOption(\\\"h\\\", \\\"help\\\", false, \\\"show this usage message.\\\");\\r\\n     final HelpFormatter hf = new HelpFormatter();\\r\\n     final String eol = System.lineSeparator();\\r\\n     final StringWriter out = new StringWriter();\\r\\n     hf.printHelp(new PrintWriter(out), 60, cmdLine, null, options, HelpFormatter.DEFAULT_LEFT_PAD, HelpFormatter.DEFAULT_DESC_PAD, null, false);\\r\\n     assertEquals(\\\"usage: man [-c|-f|-k|-w|-tZT device] [-adlhu7V] [-Mpath]\\\" + eol + \\\"           [-Ppager] [-Slist] [-msystem] [-pstring]\\\" + eol + \\\"           [-Llocale] [-eextension] [section] page ...\\\" + eol + \\\" -7,--ascii                display ASCII translation or\\\" + eol + \\\"                           certain latin1 chars.\\\" + eol + \\\" -a,--all                  find all matching manual pages.\\\" + eol + \\\" -c,--catman               used by catman to reformat out of\\\" + eol + \\\"                           date cat pages.\\\" + eol + \\\" -d,--debug                emit debugging messages.\\\" + eol + \\\" -D,--default              reset all options to their\\\" + eol + \\\"                           default values.\\\" + eol + \\\" -e,--extension            limit search to extension type\\\" + eol + \\\"                           'extension'.\\\" + eol + \\\" -f,--whatis               equivalent to whatis.\\\" + eol + \\\" -h,--help                 show this usage message.\\\" + eol + \\\" -k,--apropos              equivalent to apropos.\\\" + eol + \\\" -l,--local-file           interpret 'page' argument(s) as\\\" + eol + \\\"                           local file name(s)\\\" + eol + \\\" -L,--locale <arg>         define the locale for this\\\" + eol + \\\"                           particular man search.\\\" + eol + \\\" -M,--manpath <arg>        set search path for manual pages\\\" + eol + \\\"                           to 'path'.\\\" + eol + \\\" -m,--systems <arg>        search for man pages from other\\\" + eol + \\\"                           Unix system(s).\\\" + eol + \\\" -P,--pager <arg>          use program 'pager' to display\\\" + eol + \\\"                           output.\\\" + eol + \\\" -p,--preprocessor <arg>   string indicates which\\\" + eol + \\\"                           preprocessor to run.\\\" + eol + \\\"                           e - [n]eqn  p - pic     t - tbl\\\" + eol + \\\"                           g - grap    r - refer   v -\\\" + eol + \\\"                           vgrind\\\" + eol + \\\" -r,--prompt <arg>         provide 'less' pager with prompt.\\\" + eol + \\\" -S,--sections <arg>       use colon separated section list.\\\" + eol + \\\" -t,--troff                use troff format pages.\\\" + eol + \\\" -T,--troff-device <arg>   use groff with selected device.\\\" + eol + \\\" -u,--update               force a cache consistency check.\\\" + eol + \\\" -V,--version              show version.\\\" + eol + \\\" -w,--location             print physical location of man\\\" + eol + \\\"                           page(s).\\\" + eol + \\\" -Z,--ditroff              use groff with selected device.\\\" + eol, out.toString());\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2023","diff":"\"@@ -1,10 +1,10 @@\\n @Test\\r\\n public void testMan() {\\r\\n     final String cmdLine = \\\"man [-c|-f|-k|-w|-tZT device] [-adlhu7V] [-Mpath] [-Ppager] [-Slist] [-msystem] [-pstring] [-Llocale] [-eextension] [section]\\\" + \\\" page ...\\\";\\r\\n-    final Options options = new Options().addOption(\\\"a\\\", \\\"all\\\", false, \\\"find all matching manual pages.\\\").addOption(\\\"d\\\", \\\"debug\\\", false, \\\"emit debugging messages.\\\").addOption(\\\"e\\\", \\\"extension\\\", false, \\\"limit search to extension type 'extension'.\\\").addOption(\\\"f\\\", \\\"whatis\\\", false, \\\"equivalent to whatis.\\\").addOption(\\\"k\\\", \\\"apropos\\\", false, \\\"equivalent to apropos.\\\").addOption(\\\"w\\\", \\\"location\\\", false, \\\"print physical location of man page(s).\\\").addOption(\\\"l\\\", \\\"local-file\\\", false, \\\"interpret 'page' argument(s) as local filename(s)\\\").addOption(\\\"u\\\", \\\"update\\\", false, \\\"force a cache consistency check.\\\").addOption(\\\"r\\\", \\\"prompt\\\", true, \\\"provide 'less' pager with prompt.\\\").addOption(\\\"c\\\", \\\"catman\\\", false, \\\"used by catman to reformat out of date cat pages.\\\").addOption(\\\"7\\\", \\\"ascii\\\", false, \\\"display ASCII translation or certain latin1 chars.\\\").addOption(\\\"t\\\", \\\"troff\\\", false, \\\"use troff format pages.\\\").addOption(\\\"T\\\", \\\"troff-device\\\", true, \\\"use groff with selected device.\\\").addOption(\\\"Z\\\", \\\"ditroff\\\", false, \\\"use groff with selected device.\\\").addOption(\\\"D\\\", \\\"default\\\", false, \\\"reset all options to their default values.\\\").addOption(\\\"M\\\", \\\"manpath\\\", true, \\\"set search path for manual pages to 'path'.\\\").addOption(\\\"P\\\", \\\"pager\\\", true, \\\"use program 'pager' to display output.\\\").addOption(\\\"S\\\", \\\"sections\\\", true, \\\"use colon separated section list.\\\").addOption(\\\"m\\\", \\\"systems\\\", true, \\\"search for man pages from other Unix system(s).\\\").addOption(\\\"L\\\", \\\"locale\\\", true, \\\"define the locale for this particular man search.\\\").addOption(\\\"p\\\", \\\"preprocessor\\\", true, \\\"string indicates which preprocessor to run.\\\\n\\\" + \\\" e - [n]eqn  p - pic     t - tbl\\\\n\\\" + \\\" g - grap    r - refer   v - vgrind\\\").addOption(\\\"V\\\", \\\"version\\\", false, \\\"show version.\\\").addOption(\\\"h\\\", \\\"help\\\", false, \\\"show this usage message.\\\");\\r\\n+    final Options options = new Options().addOption(\\\"a\\\", \\\"all\\\", false, \\\"find all matching manual pages.\\\").addOption(\\\"d\\\", \\\"debug\\\", false, \\\"emit debugging messages.\\\").addOption(\\\"e\\\", \\\"extension\\\", false, \\\"limit search to extension type 'extension'.\\\").addOption(\\\"f\\\", \\\"whatis\\\", false, \\\"equivalent to whatis.\\\").addOption(\\\"k\\\", \\\"apropos\\\", false, \\\"equivalent to apropos.\\\").addOption(\\\"w\\\", \\\"location\\\", false, \\\"print physical location of man page(s).\\\").addOption(\\\"l\\\", \\\"local-file\\\", false, \\\"interpret 'page' argument(s) as local filen ame(s)\\\").addOption(\\\"u\\\", \\\"update\\\", false, \\\"force a cache consistency check.\\\").addOption(\\\"r\\\", \\\"prompt\\\", true, \\\"provide 'less' pager with prompt.\\\").addOption(\\\"c\\\", \\\"catman\\\", false, \\\"used by catman to reformat out of date cat pages.\\\").addOption(\\\"7\\\", \\\"ascii\\\", false, \\\"display ASCII translation or certain latin1 chars.\\\").addOption(\\\"t\\\", \\\"troff\\\", false, \\\"use troff format pages.\\\").addOption(\\\"T\\\", \\\"troff-device\\\", true, \\\"use groff with selected device.\\\").addOption(\\\"Z\\\", \\\"ditroff\\\", false, \\\"use groff with selected device.\\\").addOption(\\\"D\\\", \\\"default\\\", false, \\\"reset all options to their default values.\\\").addOption(\\\"M\\\", \\\"manpath\\\", true, \\\"set search path for manual pages to 'path'.\\\").addOption(\\\"P\\\", \\\"pager\\\", true, \\\"use program 'pager' to display output.\\\").addOption(\\\"S\\\", \\\"sections\\\", true, \\\"use colon separated section list.\\\").addOption(\\\"m\\\", \\\"systems\\\", true, \\\"search for man pages from other Unix system(s).\\\").addOption(\\\"L\\\", \\\"locale\\\", true, \\\"define the locale for this particular man search.\\\").addOption(\\\"p\\\", \\\"preprocessor\\\", true, \\\"string indicates which preprocessor to run.\\\\n\\\" + \\\" e - [n]eqn  p - pic     t - tbl\\\\n\\\" + \\\" g - grap    r - refer   v - vgrind\\\").addOption(\\\"V\\\", \\\"version\\\", false, \\\"show version.\\\").addOption(\\\"h\\\", \\\"help\\\", false, \\\"show this usage message.\\\");\\r\\n     final HelpFormatter hf = new HelpFormatter();\\r\\n     final String eol = System.lineSeparator();\\r\\n     final StringWriter out = new StringWriter();\\r\\n     hf.printHelp(new PrintWriter(out), 60, cmdLine, null, options, HelpFormatter.DEFAULT_LEFT_PAD, HelpFormatter.DEFAULT_DESC_PAD, null, false);\\r\\n-    assertEquals(\\\"usage: man [-c|-f|-k|-w|-tZT device] [-adlhu7V] [-Mpath]\\\" + eol + \\\"           [-Ppager] [-Slist] [-msystem] [-pstring]\\\" + eol + \\\"           [-Llocale] [-eextension] [section] page ...\\\" + eol + \\\" -7,--ascii                display ASCII translation or\\\" + eol + \\\"                           certain latin1 chars.\\\" + eol + \\\" -a,--all                  find all matching manual pages.\\\" + eol + \\\" -c,--catman               used by catman to reformat out of\\\" + eol + \\\"                           date cat pages.\\\" + eol + \\\" -d,--debug                emit debugging messages.\\\" + eol + \\\" -D,--default              reset all options to their\\\" + eol + \\\"                           default values.\\\" + eol + \\\" -e,--extension            limit search to extension type\\\" + eol + \\\"                           'extension'.\\\" + eol + \\\" -f,--whatis               equivalent to whatis.\\\" + eol + \\\" -h,--help                 show this usage message.\\\" + eol + \\\" -k,--apropos              equivalent to apropos.\\\" + eol + \\\" -l,--local-file           interpret 'page' argument(s) as\\\" + eol + \\\"                           local filename(s)\\\" + eol + \\\" -L,--locale <arg>         define the locale for this\\\" + eol + \\\"                           particular man search.\\\" + eol + \\\" -M,--manpath <arg>        set search path for manual pages\\\" + eol + \\\"                           to 'path'.\\\" + eol + \\\" -m,--systems <arg>        search for man pages from other\\\" + eol + \\\"                           Unix system(s).\\\" + eol + \\\" -P,--pager <arg>          use program 'pager' to display\\\" + eol + \\\"                           output.\\\" + eol + \\\" -p,--preprocessor <arg>   string indicates which\\\" + eol + \\\"                           preprocessor to run.\\\" + eol + \\\"                           e - [n]eqn  p - pic     t - tbl\\\" + eol + \\\"                           g - grap    r - refer   v -\\\" + eol + \\\"                           vgrind\\\" + eol + \\\" -r,--prompt <arg>         provide 'less' pager with prompt.\\\" + eol + \\\" -S,--sections <arg>       use colon separated section list.\\\" + eol + \\\" -t,--troff                use troff format pages.\\\" + eol + \\\" -T,--troff-device <arg>   use groff with selected device.\\\" + eol + \\\" -u,--update               force a cache consistency check.\\\" + eol + \\\" -V,--version              show version.\\\" + eol + \\\" -w,--location             print physical location of man\\\" + eol + \\\"                           page(s).\\\" + eol + \\\" -Z,--ditroff              use groff with selected device.\\\" + eol, out.toString());\\r\\n+    assertEquals(\\\"usage: man [-c|-f|-k|-w|-tZT device] [-adlhu7V] [-Mpath]\\\" + eol + \\\"           [-Ppager] [-Slist] [-msystem] [-pstring]\\\" + eol + \\\"           [-Llocale] [-eextension] [section] page ...\\\" + eol + \\\" -7,--ascii                display ASCII translation or\\\" + eol + \\\"                           certain latin1 chars.\\\" + eol + \\\" -a,--all                  find all matching manual pages.\\\" + eol + \\\" -c,--catman               used by catman to reformat out of\\\" + eol + \\\"                           date cat pages.\\\" + eol + \\\" -d,--debug                emit debugging messages.\\\" + eol + \\\" -D,--default              reset all options to their\\\" + eol + \\\"                           default values.\\\" + eol + \\\" -e,--extension            limit search to extension type\\\" + eol + \\\"                           'extension'.\\\" + eol + \\\" -f,--whatis               equivalent to whatis.\\\" + eol + \\\" -h,--help                 show this usage message.\\\" + eol + \\\" -k,--apropos              equivalent to apropos.\\\" + eol + \\\" -l,--local-file           interpret 'page' argument(s) as\\\" + eol + \\\"                           local file name(s)\\\" + eol + \\\" -L,--locale <arg>         define the locale for this\\\" + eol + \\\"                           particular man search.\\\" + eol + \\\" -M,--manpath <arg>        set search path for manual pages\\\" + eol + \\\"                           to 'path'.\\\" + eol + \\\" -m,--systems <arg>        search for man pages from other\\\" + eol + \\\"                           Unix system(s).\\\" + eol + \\\" -P,--pager <arg>          use program 'pager' to display\\\" + eol + \\\"                           output.\\\" + eol + \\\" -p,--preprocessor <arg>   string indicates which\\\" + eol + \\\"                           preprocessor to run.\\\" + eol + \\\"                           e - [n]eqn  p - pic     t - tbl\\\" + eol + \\\"                           g - grap    r - refer   v -\\\" + eol + \\\"                           vgrind\\\" + eol + \\\" -r,--prompt <arg>         provide 'less' pager with prompt.\\\" + eol + \\\" -S,--sections <arg>       use colon separated section list.\\\" + eol + \\\" -t,--troff                use troff format pages.\\\" + eol + \\\" -T,--troff-device <arg>   use groff with selected device.\\\" + eol + \\\" -u,--update               force a cache consistency check.\\\" + eol + \\\" -V,--version              show version.\\\" + eol + \\\" -w,--location             print physical location of man\\\" + eol + \\\"                           page(s).\\\" + eol + \\\" -Z,--ditroff              use groff with selected device.\\\" + eol, out.toString());\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2023","diff":"\"@@ -1,10 +1,10 @@\\n @Test\\r\\n public void testMan() {\\r\\n     final String cmdLine = \\\"man [-c|-f|-k|-w|-tZT device] [-adlhu7V] [-Mpath] [-Ppager] [-Slist] [-msystem] [-pstring] [-Llocale] [-eextension] [section]\\\" + \\\" page ...\\\";\\r\\n     final Options options = new Options().addOption(\\\"a\\\", \\\"all\\\", false, \\\"find all matching manual pages.\\\").addOption(\\\"d\\\", \\\"debug\\\", false, \\\"emit debugging messages.\\\").addOption(\\\"e\\\", \\\"extension\\\", false, \\\"limit search to extension type 'extension'.\\\").addOption(\\\"f\\\", \\\"whatis\\\", false, \\\"equivalent to whatis.\\\").addOption(\\\"k\\\", \\\"apropos\\\", false, \\\"equivalent to apropos.\\\").addOption(\\\"w\\\", \\\"location\\\", false, \\\"print physical location of man page(s).\\\").addOption(\\\"l\\\", \\\"local-file\\\", false, \\\"interpret 'page' argument(s) as local filename(s)\\\").addOption(\\\"u\\\", \\\"update\\\", false, \\\"force a cache consistency check.\\\").addOption(\\\"r\\\", \\\"prompt\\\", true, \\\"provide 'less' pager with prompt.\\\").addOption(\\\"c\\\", \\\"catman\\\", false, \\\"used by catman to reformat out of date cat pages.\\\").addOption(\\\"7\\\", \\\"ascii\\\", false, \\\"display ASCII translation or certain latin1 chars.\\\").addOption(\\\"t\\\", \\\"troff\\\", false, \\\"use troff format pages.\\\").addOption(\\\"T\\\", \\\"troff-device\\\", true, \\\"use groff with selected device.\\\").addOption(\\\"Z\\\", \\\"ditroff\\\", false, \\\"use groff with selected device.\\\").addOption(\\\"D\\\", \\\"default\\\", false, \\\"reset all options to their default values.\\\").addOption(\\\"M\\\", \\\"manpath\\\", true, \\\"set search path for manual pages to 'path'.\\\").addOption(\\\"P\\\", \\\"pager\\\", true, \\\"use program 'pager' to display output.\\\").addOption(\\\"S\\\", \\\"sections\\\", true, \\\"use colon separated section list.\\\").addOption(\\\"m\\\", \\\"systems\\\", true, \\\"search for man pages from other Unix system(s).\\\").addOption(\\\"L\\\", \\\"locale\\\", true, \\\"define the locale for this particular man search.\\\").addOption(\\\"p\\\", \\\"preprocessor\\\", true, \\\"string indicates which preprocessor to run.\\\\n\\\" + \\\" e - [n]eqn  p - pic     t - tbl\\\\n\\\" + \\\" g - grap    r - refer   v - vgrind\\\").addOption(\\\"V\\\", \\\"version\\\", false, \\\"show version.\\\").addOption(\\\"h\\\", \\\"help\\\", false, \\\"show this usage message.\\\");\\r\\n     final HelpFormatter hf = new HelpFormatter();\\r\\n-    final String eol = System.getProperty(\\\"line.separator\\\");\\r\\n+    final String eol = System.lineSeparator();\\r\\n     final StringWriter out = new StringWriter();\\r\\n     hf.printHelp(new PrintWriter(out), 60, cmdLine, null, options, HelpFormatter.DEFAULT_LEFT_PAD, HelpFormatter.DEFAULT_DESC_PAD, null, false);\\r\\n     assertEquals(\\\"usage: man [-c|-f|-k|-w|-tZT device] [-adlhu7V] [-Mpath]\\\" + eol + \\\"           [-Ppager] [-Slist] [-msystem] [-pstring]\\\" + eol + \\\"           [-Llocale] [-eextension] [section] page ...\\\" + eol + \\\" -7,--ascii                display ASCII translation or\\\" + eol + \\\"                           certain latin1 chars.\\\" + eol + \\\" -a,--all                  find all matching manual pages.\\\" + eol + \\\" -c,--catman               used by catman to reformat out of\\\" + eol + \\\"                           date cat pages.\\\" + eol + \\\" -d,--debug                emit debugging messages.\\\" + eol + \\\" -D,--default              reset all options to their\\\" + eol + \\\"                           default values.\\\" + eol + \\\" -e,--extension            limit search to extension type\\\" + eol + \\\"                           'extension'.\\\" + eol + \\\" -f,--whatis               equivalent to whatis.\\\" + eol + \\\" -h,--help                 show this usage message.\\\" + eol + \\\" -k,--apropos              equivalent to apropos.\\\" + eol + \\\" -l,--local-file           interpret 'page' argument(s) as\\\" + eol + \\\"                           local filename(s)\\\" + eol + \\\" -L,--locale <arg>         define the locale for this\\\" + eol + \\\"                           particular man search.\\\" + eol + \\\" -M,--manpath <arg>        set search path for manual pages\\\" + eol + \\\"                           to 'path'.\\\" + eol + \\\" -m,--systems <arg>        search for man pages from other\\\" + eol + \\\"                           Unix system(s).\\\" + eol + \\\" -P,--pager <arg>          use program 'pager' to display\\\" + eol + \\\"                           output.\\\" + eol + \\\" -p,--preprocessor <arg>   string indicates which\\\" + eol + \\\"                           preprocessor to run.\\\" + eol + \\\"                           e - [n]eqn  p - pic     t - tbl\\\" + eol + \\\"                           g - grap    r - refer   v -\\\" + eol + \\\"                           vgrind\\\" + eol + \\\" -r,--prompt <arg>         provide 'less' pager with prompt.\\\" + eol + \\\" -S,--sections <arg>       use colon separated section list.\\\" + eol + \\\" -t,--troff                use troff format pages.\\\" + eol + \\\" -T,--troff-device <arg>   use groff with selected device.\\\" + eol + \\\" -u,--update               force a cache consistency check.\\\" + eol + \\\" -V,--version              show version.\\\" + eol + \\\" -w,--location             print physical location of man\\\" + eol + \\\"                           page(s).\\\" + eol + \\\" -Z,--ditroff              use groff with selected device.\\\" + eol, out.toString());\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2023","diff":"\"@@ -1,10 +1,10 @@\\n @Test\\r\\n public void testMan() {\\r\\n     final String cmdLine = \\\"man [-c|-f|-k|-w|-tZT device] [-adlhu7V] [-Mpath] [-Ppager] [-Slist] [-msystem] [-pstring] [-Llocale] [-eextension] [section]\\\" + \\\" page ...\\\";\\r\\n-    final Options options = new Options().addOption(\\\"a\\\", \\\"all\\\", false, \\\"find all matching manual pages.\\\").addOption(\\\"d\\\", \\\"debug\\\", false, \\\"emit debugging messages.\\\").addOption(\\\"e\\\", \\\"extension\\\", false, \\\"limit search to extension type 'extension'.\\\").addOption(\\\"f\\\", \\\"whatis\\\", false, \\\"equivalent to whatis.\\\").addOption(\\\"k\\\", \\\"apropos\\\", false, \\\"equivalent to apropos.\\\").addOption(\\\"w\\\", \\\"location\\\", false, \\\"print physical location of man page(s).\\\").addOption(\\\"l\\\", \\\"local-file\\\", false, \\\"interpret 'page' argument(s) as local filename(s)\\\").addOption(\\\"u\\\", \\\"update\\\", false, \\\"force a cache consistency check.\\\").addOption(\\\"r\\\", \\\"prompt\\\", true, \\\"provide 'less' pager with prompt.\\\").addOption(\\\"c\\\", \\\"catman\\\", false, \\\"used by catman to reformat out of date cat pages.\\\").addOption(\\\"7\\\", \\\"ascii\\\", false, \\\"display ASCII translation or certain latin1 chars.\\\").addOption(\\\"t\\\", \\\"troff\\\", false, \\\"use troff format pages.\\\").addOption(\\\"T\\\", \\\"troff-device\\\", true, \\\"use groff with selected device.\\\").addOption(\\\"Z\\\", \\\"ditroff\\\", false, \\\"use groff with selected device.\\\").addOption(\\\"D\\\", \\\"default\\\", false, \\\"reset all options to their default values.\\\").addOption(\\\"M\\\", \\\"manpath\\\", true, \\\"set search path for manual pages to 'path'.\\\").addOption(\\\"P\\\", \\\"pager\\\", true, \\\"use program 'pager' to display output.\\\").addOption(\\\"S\\\", \\\"sections\\\", true, \\\"use colon separated section list.\\\").addOption(\\\"m\\\", \\\"systems\\\", true, \\\"search for man pages from other unix system(s).\\\").addOption(\\\"L\\\", \\\"locale\\\", true, \\\"define the locale for this particular man search.\\\").addOption(\\\"p\\\", \\\"preprocessor\\\", true, \\\"string indicates which preprocessor to run.\\\\n\\\" + \\\" e - [n]eqn  p - pic     t - tbl\\\\n\\\" + \\\" g - grap    r - refer   v - vgrind\\\").addOption(\\\"V\\\", \\\"version\\\", false, \\\"show version.\\\").addOption(\\\"h\\\", \\\"help\\\", false, \\\"show this usage message.\\\");\\r\\n+    final Options options = new Options().addOption(\\\"a\\\", \\\"all\\\", false, \\\"find all matching manual pages.\\\").addOption(\\\"d\\\", \\\"debug\\\", false, \\\"emit debugging messages.\\\").addOption(\\\"e\\\", \\\"extension\\\", false, \\\"limit search to extension type 'extension'.\\\").addOption(\\\"f\\\", \\\"whatis\\\", false, \\\"equivalent to whatis.\\\").addOption(\\\"k\\\", \\\"apropos\\\", false, \\\"equivalent to apropos.\\\").addOption(\\\"w\\\", \\\"location\\\", false, \\\"print physical location of man page(s).\\\").addOption(\\\"l\\\", \\\"local-file\\\", false, \\\"interpret 'page' argument(s) as local filename(s)\\\").addOption(\\\"u\\\", \\\"update\\\", false, \\\"force a cache consistency check.\\\").addOption(\\\"r\\\", \\\"prompt\\\", true, \\\"provide 'less' pager with prompt.\\\").addOption(\\\"c\\\", \\\"catman\\\", false, \\\"used by catman to reformat out of date cat pages.\\\").addOption(\\\"7\\\", \\\"ascii\\\", false, \\\"display ASCII translation or certain latin1 chars.\\\").addOption(\\\"t\\\", \\\"troff\\\", false, \\\"use troff format pages.\\\").addOption(\\\"T\\\", \\\"troff-device\\\", true, \\\"use groff with selected device.\\\").addOption(\\\"Z\\\", \\\"ditroff\\\", false, \\\"use groff with selected device.\\\").addOption(\\\"D\\\", \\\"default\\\", false, \\\"reset all options to their default values.\\\").addOption(\\\"M\\\", \\\"manpath\\\", true, \\\"set search path for manual pages to 'path'.\\\").addOption(\\\"P\\\", \\\"pager\\\", true, \\\"use program 'pager' to display output.\\\").addOption(\\\"S\\\", \\\"sections\\\", true, \\\"use colon separated section list.\\\").addOption(\\\"m\\\", \\\"systems\\\", true, \\\"search for man pages from other Unix system(s).\\\").addOption(\\\"L\\\", \\\"locale\\\", true, \\\"define the locale for this particular man search.\\\").addOption(\\\"p\\\", \\\"preprocessor\\\", true, \\\"string indicates which preprocessor to run.\\\\n\\\" + \\\" e - [n]eqn  p - pic     t - tbl\\\\n\\\" + \\\" g - grap    r - refer   v - vgrind\\\").addOption(\\\"V\\\", \\\"version\\\", false, \\\"show version.\\\").addOption(\\\"h\\\", \\\"help\\\", false, \\\"show this usage message.\\\");\\r\\n     final HelpFormatter hf = new HelpFormatter();\\r\\n     final String eol = System.getProperty(\\\"line.separator\\\");\\r\\n     final StringWriter out = new StringWriter();\\r\\n     hf.printHelp(new PrintWriter(out), 60, cmdLine, null, options, HelpFormatter.DEFAULT_LEFT_PAD, HelpFormatter.DEFAULT_DESC_PAD, null, false);\\r\\n-    assertEquals(\\\"usage: man [-c|-f|-k|-w|-tZT device] [-adlhu7V] [-Mpath]\\\" + eol + \\\"           [-Ppager] [-Slist] [-msystem] [-pstring]\\\" + eol + \\\"           [-Llocale] [-eextension] [section] page ...\\\" + eol + \\\" -7,--ascii                display ASCII translation or\\\" + eol + \\\"                           certain latin1 chars.\\\" + eol + \\\" -a,--all                  find all matching manual pages.\\\" + eol + \\\" -c,--catman               used by catman to reformat out of\\\" + eol + \\\"                           date cat pages.\\\" + eol + \\\" -d,--debug                emit debugging messages.\\\" + eol + \\\" -D,--default              reset all options to their\\\" + eol + \\\"                           default values.\\\" + eol + \\\" -e,--extension            limit search to extension type\\\" + eol + \\\"                           'extension'.\\\" + eol + \\\" -f,--whatis               equivalent to whatis.\\\" + eol + \\\" -h,--help                 show this usage message.\\\" + eol + \\\" -k,--apropos              equivalent to apropos.\\\" + eol + \\\" -l,--local-file           interpret 'page' argument(s) as\\\" + eol + \\\"                           local filename(s)\\\" + eol + \\\" -L,--locale <arg>         define the locale for this\\\" + eol + \\\"                           particular man search.\\\" + eol + \\\" -M,--manpath <arg>        set search path for manual pages\\\" + eol + \\\"                           to 'path'.\\\" + eol + \\\" -m,--systems <arg>        search for man pages from other\\\" + eol + \\\"                           unix system(s).\\\" + eol + \\\" -P,--pager <arg>          use program 'pager' to display\\\" + eol + \\\"                           output.\\\" + eol + \\\" -p,--preprocessor <arg>   string indicates which\\\" + eol + \\\"                           preprocessor to run.\\\" + eol + \\\"                           e - [n]eqn  p - pic     t - tbl\\\" + eol + \\\"                           g - grap    r - refer   v -\\\" + eol + \\\"                           vgrind\\\" + eol + \\\" -r,--prompt <arg>         provide 'less' pager with prompt.\\\" + eol + \\\" -S,--sections <arg>       use colon separated section list.\\\" + eol + \\\" -t,--troff                use troff format pages.\\\" + eol + \\\" -T,--troff-device <arg>   use groff with selected device.\\\" + eol + \\\" -u,--update               force a cache consistency check.\\\" + eol + \\\" -V,--version              show version.\\\" + eol + \\\" -w,--location             print physical location of man\\\" + eol + \\\"                           page(s).\\\" + eol + \\\" -Z,--ditroff              use groff with selected device.\\\" + eol, out.toString());\\r\\n+    assertEquals(\\\"usage: man [-c|-f|-k|-w|-tZT device] [-adlhu7V] [-Mpath]\\\" + eol + \\\"           [-Ppager] [-Slist] [-msystem] [-pstring]\\\" + eol + \\\"           [-Llocale] [-eextension] [section] page ...\\\" + eol + \\\" -7,--ascii                display ASCII translation or\\\" + eol + \\\"                           certain latin1 chars.\\\" + eol + \\\" -a,--all                  find all matching manual pages.\\\" + eol + \\\" -c,--catman               used by catman to reformat out of\\\" + eol + \\\"                           date cat pages.\\\" + eol + \\\" -d,--debug                emit debugging messages.\\\" + eol + \\\" -D,--default              reset all options to their\\\" + eol + \\\"                           default values.\\\" + eol + \\\" -e,--extension            limit search to extension type\\\" + eol + \\\"                           'extension'.\\\" + eol + \\\" -f,--whatis               equivalent to whatis.\\\" + eol + \\\" -h,--help                 show this usage message.\\\" + eol + \\\" -k,--apropos              equivalent to apropos.\\\" + eol + \\\" -l,--local-file           interpret 'page' argument(s) as\\\" + eol + \\\"                           local filename(s)\\\" + eol + \\\" -L,--locale <arg>         define the locale for this\\\" + eol + \\\"                           particular man search.\\\" + eol + \\\" -M,--manpath <arg>        set search path for manual pages\\\" + eol + \\\"                           to 'path'.\\\" + eol + \\\" -m,--systems <arg>        search for man pages from other\\\" + eol + \\\"                           Unix system(s).\\\" + eol + \\\" -P,--pager <arg>          use program 'pager' to display\\\" + eol + \\\"                           output.\\\" + eol + \\\" -p,--preprocessor <arg>   string indicates which\\\" + eol + \\\"                           preprocessor to run.\\\" + eol + \\\"                           e - [n]eqn  p - pic     t - tbl\\\" + eol + \\\"                           g - grap    r - refer   v -\\\" + eol + \\\"                           vgrind\\\" + eol + \\\" -r,--prompt <arg>         provide 'less' pager with prompt.\\\" + eol + \\\" -S,--sections <arg>       use colon separated section list.\\\" + eol + \\\" -t,--troff                use troff format pages.\\\" + eol + \\\" -T,--troff-device <arg>   use groff with selected device.\\\" + eol + \\\" -u,--update               force a cache consistency check.\\\" + eol + \\\" -V,--version              show version.\\\" + eol + \\\" -w,--location             print physical location of man\\\" + eol + \\\"                           page(s).\\\" + eol + \\\" -Z,--ditroff              use groff with selected device.\\\" + eol, out.toString());\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"@@ -1,10 +1,10 @@\\n @Test\\r\\n public void testMan() {\\r\\n-    final String cmdLine = \\\"man [-c|-f|-k|-w|-tZT device] [-adlhu7V] [-Mpath] [-Ppager] [-Slist] \\\" + \\\"[-msystem] [-pstring] [-Llocale] [-eextension] [section] page ...\\\";\\r\\n+    final String cmdLine = \\\"man [-c|-f|-k|-w|-tZT device] [-adlhu7V] [-Mpath] [-Ppager] [-Slist] [-msystem] [-pstring] [-Llocale] [-eextension] [section]\\\" + \\\" page ...\\\";\\r\\n     final Options options = new Options().addOption(\\\"a\\\", \\\"all\\\", false, \\\"find all matching manual pages.\\\").addOption(\\\"d\\\", \\\"debug\\\", false, \\\"emit debugging messages.\\\").addOption(\\\"e\\\", \\\"extension\\\", false, \\\"limit search to extension type 'extension'.\\\").addOption(\\\"f\\\", \\\"whatis\\\", false, \\\"equivalent to whatis.\\\").addOption(\\\"k\\\", \\\"apropos\\\", false, \\\"equivalent to apropos.\\\").addOption(\\\"w\\\", \\\"location\\\", false, \\\"print physical location of man page(s).\\\").addOption(\\\"l\\\", \\\"local-file\\\", false, \\\"interpret 'page' argument(s) as local filename(s)\\\").addOption(\\\"u\\\", \\\"update\\\", false, \\\"force a cache consistency check.\\\").addOption(\\\"r\\\", \\\"prompt\\\", true, \\\"provide 'less' pager with prompt.\\\").addOption(\\\"c\\\", \\\"catman\\\", false, \\\"used by catman to reformat out of date cat pages.\\\").addOption(\\\"7\\\", \\\"ascii\\\", false, \\\"display ASCII translation or certain latin1 chars.\\\").addOption(\\\"t\\\", \\\"troff\\\", false, \\\"use troff format pages.\\\").addOption(\\\"T\\\", \\\"troff-device\\\", true, \\\"use groff with selected device.\\\").addOption(\\\"Z\\\", \\\"ditroff\\\", false, \\\"use groff with selected device.\\\").addOption(\\\"D\\\", \\\"default\\\", false, \\\"reset all options to their default values.\\\").addOption(\\\"M\\\", \\\"manpath\\\", true, \\\"set search path for manual pages to 'path'.\\\").addOption(\\\"P\\\", \\\"pager\\\", true, \\\"use program 'pager' to display output.\\\").addOption(\\\"S\\\", \\\"sections\\\", true, \\\"use colon separated section list.\\\").addOption(\\\"m\\\", \\\"systems\\\", true, \\\"search for man pages from other unix system(s).\\\").addOption(\\\"L\\\", \\\"locale\\\", true, \\\"define the locale for this particular man search.\\\").addOption(\\\"p\\\", \\\"preprocessor\\\", true, \\\"string indicates which preprocessor to run.\\\\n\\\" + \\\" e - [n]eqn  p - pic     t - tbl\\\\n\\\" + \\\" g - grap    r - refer   v - vgrind\\\").addOption(\\\"V\\\", \\\"version\\\", false, \\\"show version.\\\").addOption(\\\"h\\\", \\\"help\\\", false, \\\"show this usage message.\\\");\\r\\n     final HelpFormatter hf = new HelpFormatter();\\r\\n-    final String EOL = System.getProperty(\\\"line.separator\\\");\\r\\n+    final String eol = System.getProperty(\\\"line.separator\\\");\\r\\n     final StringWriter out = new StringWriter();\\r\\n     hf.printHelp(new PrintWriter(out), 60, cmdLine, null, options, HelpFormatter.DEFAULT_LEFT_PAD, HelpFormatter.DEFAULT_DESC_PAD, null, false);\\r\\n-    assertEquals(\\\"usage: man [-c|-f|-k|-w|-tZT device] [-adlhu7V] [-Mpath]\\\" + EOL + \\\"           [-Ppager] [-Slist] [-msystem] [-pstring]\\\" + EOL + \\\"           [-Llocale] [-eextension] [section] page ...\\\" + EOL + \\\" -7,--ascii                display ASCII translation or\\\" + EOL + \\\"                           certain latin1 chars.\\\" + EOL + \\\" -a,--all                  find all matching manual pages.\\\" + EOL + \\\" -c,--catman               used by catman to reformat out of\\\" + EOL + \\\"                           date cat pages.\\\" + EOL + \\\" -d,--debug                emit debugging messages.\\\" + EOL + \\\" -D,--default              reset all options to their\\\" + EOL + \\\"                           default values.\\\" + EOL + \\\" -e,--extension            limit search to extension type\\\" + EOL + \\\"                           'extension'.\\\" + EOL + \\\" -f,--whatis               equivalent to whatis.\\\" + EOL + \\\" -h,--help                 show this usage message.\\\" + EOL + \\\" -k,--apropos              equivalent to apropos.\\\" + EOL + \\\" -l,--local-file           interpret 'page' argument(s) as\\\" + EOL + \\\"                           local filename(s)\\\" + EOL + \\\" -L,--locale <arg>         define the locale for this\\\" + EOL + \\\"                           particular man search.\\\" + EOL + \\\" -M,--manpath <arg>        set search path for manual pages\\\" + EOL + \\\"                           to 'path'.\\\" + EOL + \\\" -m,--systems <arg>        search for man pages from other\\\" + EOL + \\\"                           unix system(s).\\\" + EOL + \\\" -P,--pager <arg>          use program 'pager' to display\\\" + EOL + \\\"                           output.\\\" + EOL + \\\" -p,--preprocessor <arg>   string indicates which\\\" + EOL + \\\"                           preprocessor to run.\\\" + EOL + \\\"                           e - [n]eqn  p - pic     t - tbl\\\" + EOL + \\\"                           g - grap    r - refer   v -\\\" + EOL + \\\"                           vgrind\\\" + EOL + \\\" -r,--prompt <arg>         provide 'less' pager with prompt.\\\" + EOL + \\\" -S,--sections <arg>       use colon separated section list.\\\" + EOL + \\\" -t,--troff                use troff format pages.\\\" + EOL + \\\" -T,--troff-device <arg>   use groff with selected device.\\\" + EOL + \\\" -u,--update               force a cache consistency check.\\\" + EOL + \\\" -V,--version              show version.\\\" + EOL + \\\" -w,--location             print physical location of man\\\" + EOL + \\\"                           page(s).\\\" + EOL + \\\" -Z,--ditroff              use groff with selected device.\\\" + EOL, out.toString());\\r\\n+    assertEquals(\\\"usage: man [-c|-f|-k|-w|-tZT device] [-adlhu7V] [-Mpath]\\\" + eol + \\\"           [-Ppager] [-Slist] [-msystem] [-pstring]\\\" + eol + \\\"           [-Llocale] [-eextension] [section] page ...\\\" + eol + \\\" -7,--ascii                display ASCII translation or\\\" + eol + \\\"                           certain latin1 chars.\\\" + eol + \\\" -a,--all                  find all matching manual pages.\\\" + eol + \\\" -c,--catman               used by catman to reformat out of\\\" + eol + \\\"                           date cat pages.\\\" + eol + \\\" -d,--debug                emit debugging messages.\\\" + eol + \\\" -D,--default              reset all options to their\\\" + eol + \\\"                           default values.\\\" + eol + \\\" -e,--extension            limit search to extension type\\\" + eol + \\\"                           'extension'.\\\" + eol + \\\" -f,--whatis               equivalent to whatis.\\\" + eol + \\\" -h,--help                 show this usage message.\\\" + eol + \\\" -k,--apropos              equivalent to apropos.\\\" + eol + \\\" -l,--local-file           interpret 'page' argument(s) as\\\" + eol + \\\"                           local filename(s)\\\" + eol + \\\" -L,--locale <arg>         define the locale for this\\\" + eol + \\\"                           particular man search.\\\" + eol + \\\" -M,--manpath <arg>        set search path for manual pages\\\" + eol + \\\"                           to 'path'.\\\" + eol + \\\" -m,--systems <arg>        search for man pages from other\\\" + eol + \\\"                           unix system(s).\\\" + eol + \\\" -P,--pager <arg>          use program 'pager' to display\\\" + eol + \\\"                           output.\\\" + eol + \\\" -p,--preprocessor <arg>   string indicates which\\\" + eol + \\\"                           preprocessor to run.\\\" + eol + \\\"                           e - [n]eqn  p - pic     t - tbl\\\" + eol + \\\"                           g - grap    r - refer   v -\\\" + eol + \\\"                           vgrind\\\" + eol + \\\" -r,--prompt <arg>         provide 'less' pager with prompt.\\\" + eol + \\\" -S,--sections <arg>       use colon separated section list.\\\" + eol + \\\" -t,--troff                use troff format pages.\\\" + eol + \\\" -T,--troff-device <arg>   use groff with selected device.\\\" + eol + \\\" -u,--update               force a cache consistency check.\\\" + eol + \\\" -V,--version              show version.\\\" + eol + \\\" -w,--location             print physical location of man\\\" + eol + \\\"                           page(s).\\\" + eol + \\\" -Z,--ditroff              use groff with selected device.\\\" + eol, out.toString());\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,10 +1,10 @@\\n @Test\\r\\n public void testMan() {\\r\\n-    String cmdLine = \\\"man [-c|-f|-k|-w|-tZT device] [-adlhu7V] [-Mpath] [-Ppager] [-Slist] \\\" + \\\"[-msystem] [-pstring] [-Llocale] [-eextension] [section] page ...\\\";\\r\\n-    Options options = new Options().addOption(\\\"a\\\", \\\"all\\\", false, \\\"find all matching manual pages.\\\").addOption(\\\"d\\\", \\\"debug\\\", false, \\\"emit debugging messages.\\\").addOption(\\\"e\\\", \\\"extension\\\", false, \\\"limit search to extension type 'extension'.\\\").addOption(\\\"f\\\", \\\"whatis\\\", false, \\\"equivalent to whatis.\\\").addOption(\\\"k\\\", \\\"apropos\\\", false, \\\"equivalent to apropos.\\\").addOption(\\\"w\\\", \\\"location\\\", false, \\\"print physical location of man page(s).\\\").addOption(\\\"l\\\", \\\"local-file\\\", false, \\\"interpret 'page' argument(s) as local filename(s)\\\").addOption(\\\"u\\\", \\\"update\\\", false, \\\"force a cache consistency check.\\\").addOption(\\\"r\\\", \\\"prompt\\\", true, \\\"provide 'less' pager with prompt.\\\").addOption(\\\"c\\\", \\\"catman\\\", false, \\\"used by catman to reformat out of date cat pages.\\\").addOption(\\\"7\\\", \\\"ascii\\\", false, \\\"display ASCII translation or certain latin1 chars.\\\").addOption(\\\"t\\\", \\\"troff\\\", false, \\\"use troff format pages.\\\").addOption(\\\"T\\\", \\\"troff-device\\\", true, \\\"use groff with selected device.\\\").addOption(\\\"Z\\\", \\\"ditroff\\\", false, \\\"use groff with selected device.\\\").addOption(\\\"D\\\", \\\"default\\\", false, \\\"reset all options to their default values.\\\").addOption(\\\"M\\\", \\\"manpath\\\", true, \\\"set search path for manual pages to 'path'.\\\").addOption(\\\"P\\\", \\\"pager\\\", true, \\\"use program 'pager' to display output.\\\").addOption(\\\"S\\\", \\\"sections\\\", true, \\\"use colon separated section list.\\\").addOption(\\\"m\\\", \\\"systems\\\", true, \\\"search for man pages from other unix system(s).\\\").addOption(\\\"L\\\", \\\"locale\\\", true, \\\"define the locale for this particular man search.\\\").addOption(\\\"p\\\", \\\"preprocessor\\\", true, \\\"string indicates which preprocessor to run.\\\\n\\\" + \\\" e - [n]eqn  p - pic     t - tbl\\\\n\\\" + \\\" g - grap    r - refer   v - vgrind\\\").addOption(\\\"V\\\", \\\"version\\\", false, \\\"show version.\\\").addOption(\\\"h\\\", \\\"help\\\", false, \\\"show this usage message.\\\");\\r\\n-    HelpFormatter hf = new HelpFormatter();\\r\\n+    final String cmdLine = \\\"man [-c|-f|-k|-w|-tZT device] [-adlhu7V] [-Mpath] [-Ppager] [-Slist] \\\" + \\\"[-msystem] [-pstring] [-Llocale] [-eextension] [section] page ...\\\";\\r\\n+    final Options options = new Options().addOption(\\\"a\\\", \\\"all\\\", false, \\\"find all matching manual pages.\\\").addOption(\\\"d\\\", \\\"debug\\\", false, \\\"emit debugging messages.\\\").addOption(\\\"e\\\", \\\"extension\\\", false, \\\"limit search to extension type 'extension'.\\\").addOption(\\\"f\\\", \\\"whatis\\\", false, \\\"equivalent to whatis.\\\").addOption(\\\"k\\\", \\\"apropos\\\", false, \\\"equivalent to apropos.\\\").addOption(\\\"w\\\", \\\"location\\\", false, \\\"print physical location of man page(s).\\\").addOption(\\\"l\\\", \\\"local-file\\\", false, \\\"interpret 'page' argument(s) as local filename(s)\\\").addOption(\\\"u\\\", \\\"update\\\", false, \\\"force a cache consistency check.\\\").addOption(\\\"r\\\", \\\"prompt\\\", true, \\\"provide 'less' pager with prompt.\\\").addOption(\\\"c\\\", \\\"catman\\\", false, \\\"used by catman to reformat out of date cat pages.\\\").addOption(\\\"7\\\", \\\"ascii\\\", false, \\\"display ASCII translation or certain latin1 chars.\\\").addOption(\\\"t\\\", \\\"troff\\\", false, \\\"use troff format pages.\\\").addOption(\\\"T\\\", \\\"troff-device\\\", true, \\\"use groff with selected device.\\\").addOption(\\\"Z\\\", \\\"ditroff\\\", false, \\\"use groff with selected device.\\\").addOption(\\\"D\\\", \\\"default\\\", false, \\\"reset all options to their default values.\\\").addOption(\\\"M\\\", \\\"manpath\\\", true, \\\"set search path for manual pages to 'path'.\\\").addOption(\\\"P\\\", \\\"pager\\\", true, \\\"use program 'pager' to display output.\\\").addOption(\\\"S\\\", \\\"sections\\\", true, \\\"use colon separated section list.\\\").addOption(\\\"m\\\", \\\"systems\\\", true, \\\"search for man pages from other unix system(s).\\\").addOption(\\\"L\\\", \\\"locale\\\", true, \\\"define the locale for this particular man search.\\\").addOption(\\\"p\\\", \\\"preprocessor\\\", true, \\\"string indicates which preprocessor to run.\\\\n\\\" + \\\" e - [n]eqn  p - pic     t - tbl\\\\n\\\" + \\\" g - grap    r - refer   v - vgrind\\\").addOption(\\\"V\\\", \\\"version\\\", false, \\\"show version.\\\").addOption(\\\"h\\\", \\\"help\\\", false, \\\"show this usage message.\\\");\\r\\n+    final HelpFormatter hf = new HelpFormatter();\\r\\n     final String EOL = System.getProperty(\\\"line.separator\\\");\\r\\n-    StringWriter out = new StringWriter();\\r\\n+    final StringWriter out = new StringWriter();\\r\\n     hf.printHelp(new PrintWriter(out), 60, cmdLine, null, options, HelpFormatter.DEFAULT_LEFT_PAD, HelpFormatter.DEFAULT_DESC_PAD, null, false);\\r\\n     assertEquals(\\\"usage: man [-c|-f|-k|-w|-tZT device] [-adlhu7V] [-Mpath]\\\" + EOL + \\\"           [-Ppager] [-Slist] [-msystem] [-pstring]\\\" + EOL + \\\"           [-Llocale] [-eextension] [section] page ...\\\" + EOL + \\\" -7,--ascii                display ASCII translation or\\\" + EOL + \\\"                           certain latin1 chars.\\\" + EOL + \\\" -a,--all                  find all matching manual pages.\\\" + EOL + \\\" -c,--catman               used by catman to reformat out of\\\" + EOL + \\\"                           date cat pages.\\\" + EOL + \\\" -d,--debug                emit debugging messages.\\\" + EOL + \\\" -D,--default              reset all options to their\\\" + EOL + \\\"                           default values.\\\" + EOL + \\\" -e,--extension            limit search to extension type\\\" + EOL + \\\"                           'extension'.\\\" + EOL + \\\" -f,--whatis               equivalent to whatis.\\\" + EOL + \\\" -h,--help                 show this usage message.\\\" + EOL + \\\" -k,--apropos              equivalent to apropos.\\\" + EOL + \\\" -l,--local-file           interpret 'page' argument(s) as\\\" + EOL + \\\"                           local filename(s)\\\" + EOL + \\\" -L,--locale <arg>         define the locale for this\\\" + EOL + \\\"                           particular man search.\\\" + EOL + \\\" -M,--manpath <arg>        set search path for manual pages\\\" + EOL + \\\"                           to 'path'.\\\" + EOL + \\\" -m,--systems <arg>        search for man pages from other\\\" + EOL + \\\"                           unix system(s).\\\" + EOL + \\\" -P,--pager <arg>          use program 'pager' to display\\\" + EOL + \\\"                           output.\\\" + EOL + \\\" -p,--preprocessor <arg>   string indicates which\\\" + EOL + \\\"                           preprocessor to run.\\\" + EOL + \\\"                           e - [n]eqn  p - pic     t - tbl\\\" + EOL + \\\"                           g - grap    r - refer   v -\\\" + EOL + \\\"                           vgrind\\\" + EOL + \\\" -r,--prompt <arg>         provide 'less' pager with prompt.\\\" + EOL + \\\" -S,--sections <arg>       use colon separated section list.\\\" + EOL + \\\" -t,--troff                use troff format pages.\\\" + EOL + \\\" -T,--troff-device <arg>   use groff with selected device.\\\" + EOL + \\\" -u,--update               force a cache consistency check.\\\" + EOL + \\\" -V,--version              show version.\\\" + EOL + \\\" -w,--location             print physical location of man\\\" + EOL + \\\"                           page(s).\\\" + EOL + \\\" -Z,--ditroff              use groff with selected device.\\\" + EOL, out.toString());\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"britter@apache.org","authorName":"Benedikt Ritter","commitYear":"2015","diff":"\"@@ -1,7 +1,10 @@\\n @Test\\r\\n public void testMan() {\\r\\n     String cmdLine = \\\"man [-c|-f|-k|-w|-tZT device] [-adlhu7V] [-Mpath] [-Ppager] [-Slist] \\\" + \\\"[-msystem] [-pstring] [-Llocale] [-eextension] [section] page ...\\\";\\r\\n     Options options = new Options().addOption(\\\"a\\\", \\\"all\\\", false, \\\"find all matching manual pages.\\\").addOption(\\\"d\\\", \\\"debug\\\", false, \\\"emit debugging messages.\\\").addOption(\\\"e\\\", \\\"extension\\\", false, \\\"limit search to extension type 'extension'.\\\").addOption(\\\"f\\\", \\\"whatis\\\", false, \\\"equivalent to whatis.\\\").addOption(\\\"k\\\", \\\"apropos\\\", false, \\\"equivalent to apropos.\\\").addOption(\\\"w\\\", \\\"location\\\", false, \\\"print physical location of man page(s).\\\").addOption(\\\"l\\\", \\\"local-file\\\", false, \\\"interpret 'page' argument(s) as local filename(s)\\\").addOption(\\\"u\\\", \\\"update\\\", false, \\\"force a cache consistency check.\\\").addOption(\\\"r\\\", \\\"prompt\\\", true, \\\"provide 'less' pager with prompt.\\\").addOption(\\\"c\\\", \\\"catman\\\", false, \\\"used by catman to reformat out of date cat pages.\\\").addOption(\\\"7\\\", \\\"ascii\\\", false, \\\"display ASCII translation or certain latin1 chars.\\\").addOption(\\\"t\\\", \\\"troff\\\", false, \\\"use troff format pages.\\\").addOption(\\\"T\\\", \\\"troff-device\\\", true, \\\"use groff with selected device.\\\").addOption(\\\"Z\\\", \\\"ditroff\\\", false, \\\"use groff with selected device.\\\").addOption(\\\"D\\\", \\\"default\\\", false, \\\"reset all options to their default values.\\\").addOption(\\\"M\\\", \\\"manpath\\\", true, \\\"set search path for manual pages to 'path'.\\\").addOption(\\\"P\\\", \\\"pager\\\", true, \\\"use program 'pager' to display output.\\\").addOption(\\\"S\\\", \\\"sections\\\", true, \\\"use colon separated section list.\\\").addOption(\\\"m\\\", \\\"systems\\\", true, \\\"search for man pages from other unix system(s).\\\").addOption(\\\"L\\\", \\\"locale\\\", true, \\\"define the locale for this particular man search.\\\").addOption(\\\"p\\\", \\\"preprocessor\\\", true, \\\"string indicates which preprocessor to run.\\\\n\\\" + \\\" e - [n]eqn  p - pic     t - tbl\\\\n\\\" + \\\" g - grap    r - refer   v - vgrind\\\").addOption(\\\"V\\\", \\\"version\\\", false, \\\"show version.\\\").addOption(\\\"h\\\", \\\"help\\\", false, \\\"show this usage message.\\\");\\r\\n     HelpFormatter hf = new HelpFormatter();\\r\\n-    hf.printHelp(60, cmdLine, null, options, null);\\r\\n+    final String EOL = System.getProperty(\\\"line.separator\\\");\\r\\n+    StringWriter out = new StringWriter();\\r\\n+    hf.printHelp(new PrintWriter(out), 60, cmdLine, null, options, HelpFormatter.DEFAULT_LEFT_PAD, HelpFormatter.DEFAULT_DESC_PAD, null, false);\\r\\n+    assertEquals(\\\"usage: man [-c|-f|-k|-w|-tZT device] [-adlhu7V] [-Mpath]\\\" + EOL + \\\"           [-Ppager] [-Slist] [-msystem] [-pstring]\\\" + EOL + \\\"           [-Llocale] [-eextension] [section] page ...\\\" + EOL + \\\" -7,--ascii                display ASCII translation or\\\" + EOL + \\\"                           certain latin1 chars.\\\" + EOL + \\\" -a,--all                  find all matching manual pages.\\\" + EOL + \\\" -c,--catman               used by catman to reformat out of\\\" + EOL + \\\"                           date cat pages.\\\" + EOL + \\\" -d,--debug                emit debugging messages.\\\" + EOL + \\\" -D,--default              reset all options to their\\\" + EOL + \\\"                           default values.\\\" + EOL + \\\" -e,--extension            limit search to extension type\\\" + EOL + \\\"                           'extension'.\\\" + EOL + \\\" -f,--whatis               equivalent to whatis.\\\" + EOL + \\\" -h,--help                 show this usage message.\\\" + EOL + \\\" -k,--apropos              equivalent to apropos.\\\" + EOL + \\\" -l,--local-file           interpret 'page' argument(s) as\\\" + EOL + \\\"                           local filename(s)\\\" + EOL + \\\" -L,--locale <arg>         define the locale for this\\\" + EOL + \\\"                           particular man search.\\\" + EOL + \\\" -M,--manpath <arg>        set search path for manual pages\\\" + EOL + \\\"                           to 'path'.\\\" + EOL + \\\" -m,--systems <arg>        search for man pages from other\\\" + EOL + \\\"                           unix system(s).\\\" + EOL + \\\" -P,--pager <arg>          use program 'pager' to display\\\" + EOL + \\\"                           output.\\\" + EOL + \\\" -p,--preprocessor <arg>   string indicates which\\\" + EOL + \\\"                           preprocessor to run.\\\" + EOL + \\\"                           e - [n]eqn  p - pic     t - tbl\\\" + EOL + \\\"                           g - grap    r - refer   v -\\\" + EOL + \\\"                           vgrind\\\" + EOL + \\\" -r,--prompt <arg>         provide 'less' pager with prompt.\\\" + EOL + \\\" -S,--sections <arg>       use colon separated section list.\\\" + EOL + \\\" -t,--troff                use troff format pages.\\\" + EOL + \\\" -T,--troff-device <arg>   use groff with selected device.\\\" + EOL + \\\" -u,--update               force a cache consistency check.\\\" + EOL + \\\" -V,--version              show version.\\\" + EOL + \\\" -w,--location             print physical location of man\\\" + EOL + \\\"                           page(s).\\\" + EOL + \\\" -Z,--ditroff              use groff with selected device.\\\" + EOL, out.toString());\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"tn@apache.org","authorName":"Thomas Neidhart","commitYear":"2013","diff":"\"@@ -1,6 +1,7 @@\\n+@Test\\r\\n public void testMan() {\\r\\n     String cmdLine = \\\"man [-c|-f|-k|-w|-tZT device] [-adlhu7V] [-Mpath] [-Ppager] [-Slist] \\\" + \\\"[-msystem] [-pstring] [-Llocale] [-eextension] [section] page ...\\\";\\r\\n     Options options = new Options().addOption(\\\"a\\\", \\\"all\\\", false, \\\"find all matching manual pages.\\\").addOption(\\\"d\\\", \\\"debug\\\", false, \\\"emit debugging messages.\\\").addOption(\\\"e\\\", \\\"extension\\\", false, \\\"limit search to extension type 'extension'.\\\").addOption(\\\"f\\\", \\\"whatis\\\", false, \\\"equivalent to whatis.\\\").addOption(\\\"k\\\", \\\"apropos\\\", false, \\\"equivalent to apropos.\\\").addOption(\\\"w\\\", \\\"location\\\", false, \\\"print physical location of man page(s).\\\").addOption(\\\"l\\\", \\\"local-file\\\", false, \\\"interpret 'page' argument(s) as local filename(s)\\\").addOption(\\\"u\\\", \\\"update\\\", false, \\\"force a cache consistency check.\\\").addOption(\\\"r\\\", \\\"prompt\\\", true, \\\"provide 'less' pager with prompt.\\\").addOption(\\\"c\\\", \\\"catman\\\", false, \\\"used by catman to reformat out of date cat pages.\\\").addOption(\\\"7\\\", \\\"ascii\\\", false, \\\"display ASCII translation or certain latin1 chars.\\\").addOption(\\\"t\\\", \\\"troff\\\", false, \\\"use troff format pages.\\\").addOption(\\\"T\\\", \\\"troff-device\\\", true, \\\"use groff with selected device.\\\").addOption(\\\"Z\\\", \\\"ditroff\\\", false, \\\"use groff with selected device.\\\").addOption(\\\"D\\\", \\\"default\\\", false, \\\"reset all options to their default values.\\\").addOption(\\\"M\\\", \\\"manpath\\\", true, \\\"set search path for manual pages to 'path'.\\\").addOption(\\\"P\\\", \\\"pager\\\", true, \\\"use program 'pager' to display output.\\\").addOption(\\\"S\\\", \\\"sections\\\", true, \\\"use colon separated section list.\\\").addOption(\\\"m\\\", \\\"systems\\\", true, \\\"search for man pages from other unix system(s).\\\").addOption(\\\"L\\\", \\\"locale\\\", true, \\\"define the locale for this particular man search.\\\").addOption(\\\"p\\\", \\\"preprocessor\\\", true, \\\"string indicates which preprocessor to run.\\\\n\\\" + \\\" e - [n]eqn  p - pic     t - tbl\\\\n\\\" + \\\" g - grap    r - refer   v - vgrind\\\").addOption(\\\"V\\\", \\\"version\\\", false, \\\"show version.\\\").addOption(\\\"h\\\", \\\"help\\\", false, \\\"show this usage message.\\\");\\r\\n     HelpFormatter hf = new HelpFormatter();\\r\\n     hf.printHelp(60, cmdLine, null, options, null);\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"sebb@apache.org","authorName":"Sebastian Bazley","commitYear":"2009","diff":"\"@@ -1,6 +1,6 @@\\n public void testMan() {\\r\\n     String cmdLine = \\\"man [-c|-f|-k|-w|-tZT device] [-adlhu7V] [-Mpath] [-Ppager] [-Slist] \\\" + \\\"[-msystem] [-pstring] [-Llocale] [-eextension] [section] page ...\\\";\\r\\n-    Options options = new Options().addOption(\\\"a\\\", \\\"all\\\", false, \\\"find all matching manual pages.\\\").addOption(\\\"d\\\", \\\"debug\\\", false, \\\"emit debugging messages.\\\").addOption(\\\"e\\\", \\\"extension\\\", false, \\\"limit search to extension type 'extension'.\\\").addOption(\\\"f\\\", \\\"whatis\\\", false, \\\"equivalent to whatis.\\\").addOption(\\\"k\\\", \\\"apropos\\\", false, \\\"equivalent to apropos.\\\").addOption(\\\"w\\\", \\\"location\\\", false, \\\"print physical location of man page(s).\\\").addOption(\\\"l\\\", \\\"local-file\\\", false, \\\"interpret 'page' argument(s) as local filename(s)\\\").addOption(\\\"u\\\", \\\"update\\\", false, \\\"force a cache consistency check.\\\").addOption(\\\"r\\\", \\\"prompt\\\", true, \\\"provide 'less' pager with prompt.\\\").addOption(\\\"c\\\", \\\"catman\\\", false, \\\"used by catman to reformat out of date cat pages.\\\").addOption(\\\"7\\\", \\\"ascii\\\", false, \\\"display ASCII translation or certain latin1 chars.\\\").addOption(\\\"t\\\", \\\"troff\\\", false, \\\"use troff format pages.\\\").addOption(\\\"T\\\", \\\"troff-device\\\", true, \\\"use groff with selected device.\\\").addOption(\\\"Z\\\", \\\"ditroff\\\", false, \\\"use groff with selected device.\\\").addOption(\\\"D\\\", \\\"default\\\", false, \\\"reset all options to their default values.\\\").addOption(\\\"M\\\", \\\"manpath\\\", true, \\\"set search path for manual pages to 'path'.\\\").addOption(\\\"P\\\", \\\"pager\\\", true, \\\"use program 'pager' to display output.\\\").addOption(\\\"S\\\", \\\"sections\\\", true, \\\"use colon separated section list.\\\").addOption(\\\"m\\\", \\\"systems\\\", true, \\\"search for man pages from other unix system(s).\\\").addOption(\\\"L\\\", \\\"locale\\\", true, \\\"defaine the locale for this particular man search.\\\").addOption(\\\"p\\\", \\\"preprocessor\\\", true, \\\"string indicates which preprocessor to run.\\\\n\\\" + \\\" e - [n]eqn  p - pic     t - tbl\\\\n\\\" + \\\" g - grap    r - refer   v - vgrind\\\").addOption(\\\"V\\\", \\\"version\\\", false, \\\"show version.\\\").addOption(\\\"h\\\", \\\"help\\\", false, \\\"show this usage message.\\\");\\r\\n+    Options options = new Options().addOption(\\\"a\\\", \\\"all\\\", false, \\\"find all matching manual pages.\\\").addOption(\\\"d\\\", \\\"debug\\\", false, \\\"emit debugging messages.\\\").addOption(\\\"e\\\", \\\"extension\\\", false, \\\"limit search to extension type 'extension'.\\\").addOption(\\\"f\\\", \\\"whatis\\\", false, \\\"equivalent to whatis.\\\").addOption(\\\"k\\\", \\\"apropos\\\", false, \\\"equivalent to apropos.\\\").addOption(\\\"w\\\", \\\"location\\\", false, \\\"print physical location of man page(s).\\\").addOption(\\\"l\\\", \\\"local-file\\\", false, \\\"interpret 'page' argument(s) as local filename(s)\\\").addOption(\\\"u\\\", \\\"update\\\", false, \\\"force a cache consistency check.\\\").addOption(\\\"r\\\", \\\"prompt\\\", true, \\\"provide 'less' pager with prompt.\\\").addOption(\\\"c\\\", \\\"catman\\\", false, \\\"used by catman to reformat out of date cat pages.\\\").addOption(\\\"7\\\", \\\"ascii\\\", false, \\\"display ASCII translation or certain latin1 chars.\\\").addOption(\\\"t\\\", \\\"troff\\\", false, \\\"use troff format pages.\\\").addOption(\\\"T\\\", \\\"troff-device\\\", true, \\\"use groff with selected device.\\\").addOption(\\\"Z\\\", \\\"ditroff\\\", false, \\\"use groff with selected device.\\\").addOption(\\\"D\\\", \\\"default\\\", false, \\\"reset all options to their default values.\\\").addOption(\\\"M\\\", \\\"manpath\\\", true, \\\"set search path for manual pages to 'path'.\\\").addOption(\\\"P\\\", \\\"pager\\\", true, \\\"use program 'pager' to display output.\\\").addOption(\\\"S\\\", \\\"sections\\\", true, \\\"use colon separated section list.\\\").addOption(\\\"m\\\", \\\"systems\\\", true, \\\"search for man pages from other unix system(s).\\\").addOption(\\\"L\\\", \\\"locale\\\", true, \\\"define the locale for this particular man search.\\\").addOption(\\\"p\\\", \\\"preprocessor\\\", true, \\\"string indicates which preprocessor to run.\\\\n\\\" + \\\" e - [n]eqn  p - pic     t - tbl\\\\n\\\" + \\\" g - grap    r - refer   v - vgrind\\\").addOption(\\\"V\\\", \\\"version\\\", false, \\\"show version.\\\").addOption(\\\"h\\\", \\\"help\\\", false, \\\"show this usage message.\\\");\\r\\n     HelpFormatter hf = new HelpFormatter();\\r\\n     hf.printHelp(60, cmdLine, null, options, null);\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"bayard@apache.org","authorName":"Henri Yandell","commitYear":"2009","diff":"\"\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2008","diff":"\"@@ -0,0 +1,6 @@\\n+public void testMan() {\\r\\n+    String cmdLine = \\\"man [-c|-f|-k|-w|-tZT device] [-adlhu7V] [-Mpath] [-Ppager] [-Slist] \\\" + \\\"[-msystem] [-pstring] [-Llocale] [-eextension] [section] page ...\\\";\\r\\n+    Options options = new Options().addOption(\\\"a\\\", \\\"all\\\", false, \\\"find all matching manual pages.\\\").addOption(\\\"d\\\", \\\"debug\\\", false, \\\"emit debugging messages.\\\").addOption(\\\"e\\\", \\\"extension\\\", false, \\\"limit search to extension type 'extension'.\\\").addOption(\\\"f\\\", \\\"whatis\\\", false, \\\"equivalent to whatis.\\\").addOption(\\\"k\\\", \\\"apropos\\\", false, \\\"equivalent to apropos.\\\").addOption(\\\"w\\\", \\\"location\\\", false, \\\"print physical location of man page(s).\\\").addOption(\\\"l\\\", \\\"local-file\\\", false, \\\"interpret 'page' argument(s) as local filename(s)\\\").addOption(\\\"u\\\", \\\"update\\\", false, \\\"force a cache consistency check.\\\").addOption(\\\"r\\\", \\\"prompt\\\", true, \\\"provide 'less' pager with prompt.\\\").addOption(\\\"c\\\", \\\"catman\\\", false, \\\"used by catman to reformat out of date cat pages.\\\").addOption(\\\"7\\\", \\\"ascii\\\", false, \\\"display ASCII translation or certain latin1 chars.\\\").addOption(\\\"t\\\", \\\"troff\\\", false, \\\"use troff format pages.\\\").addOption(\\\"T\\\", \\\"troff-device\\\", true, \\\"use groff with selected device.\\\").addOption(\\\"Z\\\", \\\"ditroff\\\", false, \\\"use groff with selected device.\\\").addOption(\\\"D\\\", \\\"default\\\", false, \\\"reset all options to their default values.\\\").addOption(\\\"M\\\", \\\"manpath\\\", true, \\\"set search path for manual pages to 'path'.\\\").addOption(\\\"P\\\", \\\"pager\\\", true, \\\"use program 'pager' to display output.\\\").addOption(\\\"S\\\", \\\"sections\\\", true, \\\"use colon separated section list.\\\").addOption(\\\"m\\\", \\\"systems\\\", true, \\\"search for man pages from other unix system(s).\\\").addOption(\\\"L\\\", \\\"locale\\\", true, \\\"defaine the locale for this particular man search.\\\").addOption(\\\"p\\\", \\\"preprocessor\\\", true, \\\"string indicates which preprocessor to run.\\\\n\\\" + \\\" e - [n]eqn  p - pic     t - tbl\\\\n\\\" + \\\" g - grap    r - refer   v - vgrind\\\").addOption(\\\"V\\\", \\\"version\\\", false, \\\"show version.\\\").addOption(\\\"h\\\", \\\"help\\\", false, \\\"show this usage message.\\\");\\r\\n+    HelpFormatter hf = new HelpFormatter();\\r\\n+    hf.printHelp(60, cmdLine, null, options, null);\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\test\java\org\apache\commons\cli\ApplicationTest.java	testNLT	org.apache.commons.cli.ApplicationTest.testNLT()	282	338	1	[{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"@@ -1,31 +1,31 @@\\n @Test\\r\\n public void testNLT() throws Exception {\\r\\n     final Option help = new Option(\\\"h\\\", \\\"help\\\", false, \\\"print this message\\\");\\r\\n     final Option version = new Option(\\\"v\\\", \\\"version\\\", false, \\\"print version information\\\");\\r\\n     final Option newRun = new Option(\\\"n\\\", \\\"new\\\", false, \\\"Create NLT cache entries only for new items\\\");\\r\\n     final Option trackerRun = new Option(\\\"t\\\", \\\"tracker\\\", false, \\\"Create NLT cache entries only for tracker items\\\");\\r\\n     final Option timeLimit = OptionBuilder.withLongOpt(\\\"limit\\\").hasArg().withValueSeparator().withDescription(\\\"Set time limit for execution, in minutes\\\").create(\\\"l\\\");\\r\\n     final Option age = OptionBuilder.withLongOpt(\\\"age\\\").hasArg().withValueSeparator().withDescription(\\\"Age (in days) of cache item before being recomputed\\\").create(\\\"a\\\");\\r\\n     final Option server = OptionBuilder.withLongOpt(\\\"server\\\").hasArg().withValueSeparator().withDescription(\\\"The NLT server address\\\").create(\\\"s\\\");\\r\\n     final Option numResults = OptionBuilder.withLongOpt(\\\"results\\\").hasArg().withValueSeparator().withDescription(\\\"Number of results per item\\\").create(\\\"r\\\");\\r\\n     final Option configFile = OptionBuilder.withLongOpt(\\\"file\\\").hasArg().withValueSeparator().withDescription(\\\"Use the specified configuration file\\\").create();\\r\\n     final Options options = new Options();\\r\\n     options.addOption(help);\\r\\n     options.addOption(version);\\r\\n     options.addOption(newRun);\\r\\n     options.addOption(trackerRun);\\r\\n     options.addOption(timeLimit);\\r\\n     options.addOption(age);\\r\\n     options.addOption(server);\\r\\n     options.addOption(numResults);\\r\\n     options.addOption(configFile);\\r\\n     final CommandLineParser parser = new PosixParser();\\r\\n-    final String[] args = new String[] { \\\"-v\\\", \\\"-l\\\", \\\"10\\\", \\\"-age\\\", \\\"5\\\", \\\"-file\\\", \\\"filename\\\" };\\r\\n+    final String[] args = { \\\"-v\\\", \\\"-l\\\", \\\"10\\\", \\\"-age\\\", \\\"5\\\", \\\"-file\\\", \\\"filename\\\" };\\r\\n     final CommandLine line = parser.parse(options, args);\\r\\n     assertTrue(line.hasOption(\\\"v\\\"));\\r\\n     assertEquals(line.getOptionValue(\\\"l\\\"), \\\"10\\\");\\r\\n     assertEquals(line.getOptionValue(\\\"limit\\\"), \\\"10\\\");\\r\\n     assertEquals(line.getOptionValue(\\\"a\\\"), \\\"5\\\");\\r\\n     assertEquals(line.getOptionValue(\\\"age\\\"), \\\"5\\\");\\r\\n     assertEquals(line.getOptionValue(\\\"file\\\"), \\\"filename\\\");\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,31 +1,31 @@\\n @Test\\r\\n public void testNLT() throws Exception {\\r\\n-    Option help = new Option(\\\"h\\\", \\\"help\\\", false, \\\"print this message\\\");\\r\\n-    Option version = new Option(\\\"v\\\", \\\"version\\\", false, \\\"print version information\\\");\\r\\n-    Option newRun = new Option(\\\"n\\\", \\\"new\\\", false, \\\"Create NLT cache entries only for new items\\\");\\r\\n-    Option trackerRun = new Option(\\\"t\\\", \\\"tracker\\\", false, \\\"Create NLT cache entries only for tracker items\\\");\\r\\n-    Option timeLimit = OptionBuilder.withLongOpt(\\\"limit\\\").hasArg().withValueSeparator().withDescription(\\\"Set time limit for execution, in minutes\\\").create(\\\"l\\\");\\r\\n-    Option age = OptionBuilder.withLongOpt(\\\"age\\\").hasArg().withValueSeparator().withDescription(\\\"Age (in days) of cache item before being recomputed\\\").create(\\\"a\\\");\\r\\n-    Option server = OptionBuilder.withLongOpt(\\\"server\\\").hasArg().withValueSeparator().withDescription(\\\"The NLT server address\\\").create(\\\"s\\\");\\r\\n-    Option numResults = OptionBuilder.withLongOpt(\\\"results\\\").hasArg().withValueSeparator().withDescription(\\\"Number of results per item\\\").create(\\\"r\\\");\\r\\n-    Option configFile = OptionBuilder.withLongOpt(\\\"file\\\").hasArg().withValueSeparator().withDescription(\\\"Use the specified configuration file\\\").create();\\r\\n-    Options options = new Options();\\r\\n+    final Option help = new Option(\\\"h\\\", \\\"help\\\", false, \\\"print this message\\\");\\r\\n+    final Option version = new Option(\\\"v\\\", \\\"version\\\", false, \\\"print version information\\\");\\r\\n+    final Option newRun = new Option(\\\"n\\\", \\\"new\\\", false, \\\"Create NLT cache entries only for new items\\\");\\r\\n+    final Option trackerRun = new Option(\\\"t\\\", \\\"tracker\\\", false, \\\"Create NLT cache entries only for tracker items\\\");\\r\\n+    final Option timeLimit = OptionBuilder.withLongOpt(\\\"limit\\\").hasArg().withValueSeparator().withDescription(\\\"Set time limit for execution, in minutes\\\").create(\\\"l\\\");\\r\\n+    final Option age = OptionBuilder.withLongOpt(\\\"age\\\").hasArg().withValueSeparator().withDescription(\\\"Age (in days) of cache item before being recomputed\\\").create(\\\"a\\\");\\r\\n+    final Option server = OptionBuilder.withLongOpt(\\\"server\\\").hasArg().withValueSeparator().withDescription(\\\"The NLT server address\\\").create(\\\"s\\\");\\r\\n+    final Option numResults = OptionBuilder.withLongOpt(\\\"results\\\").hasArg().withValueSeparator().withDescription(\\\"Number of results per item\\\").create(\\\"r\\\");\\r\\n+    final Option configFile = OptionBuilder.withLongOpt(\\\"file\\\").hasArg().withValueSeparator().withDescription(\\\"Use the specified configuration file\\\").create();\\r\\n+    final Options options = new Options();\\r\\n     options.addOption(help);\\r\\n     options.addOption(version);\\r\\n     options.addOption(newRun);\\r\\n     options.addOption(trackerRun);\\r\\n     options.addOption(timeLimit);\\r\\n     options.addOption(age);\\r\\n     options.addOption(server);\\r\\n     options.addOption(numResults);\\r\\n     options.addOption(configFile);\\r\\n-    CommandLineParser parser = new PosixParser();\\r\\n-    String[] args = new String[] { \\\"-v\\\", \\\"-l\\\", \\\"10\\\", \\\"-age\\\", \\\"5\\\", \\\"-file\\\", \\\"filename\\\" };\\r\\n-    CommandLine line = parser.parse(options, args);\\r\\n+    final CommandLineParser parser = new PosixParser();\\r\\n+    final String[] args = new String[] { \\\"-v\\\", \\\"-l\\\", \\\"10\\\", \\\"-age\\\", \\\"5\\\", \\\"-file\\\", \\\"filename\\\" };\\r\\n+    final CommandLine line = parser.parse(options, args);\\r\\n     assertTrue(line.hasOption(\\\"v\\\"));\\r\\n     assertEquals(line.getOptionValue(\\\"l\\\"), \\\"10\\\");\\r\\n     assertEquals(line.getOptionValue(\\\"limit\\\"), \\\"10\\\");\\r\\n     assertEquals(line.getOptionValue(\\\"a\\\"), \\\"5\\\");\\r\\n     assertEquals(line.getOptionValue(\\\"age\\\"), \\\"5\\\");\\r\\n     assertEquals(line.getOptionValue(\\\"file\\\"), \\\"filename\\\");\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"tn@apache.org","authorName":"Thomas Neidhart","commitYear":"2013","diff":"\"@@ -1,30 +1,31 @@\\n+@Test\\r\\n public void testNLT() throws Exception {\\r\\n     Option help = new Option(\\\"h\\\", \\\"help\\\", false, \\\"print this message\\\");\\r\\n     Option version = new Option(\\\"v\\\", \\\"version\\\", false, \\\"print version information\\\");\\r\\n     Option newRun = new Option(\\\"n\\\", \\\"new\\\", false, \\\"Create NLT cache entries only for new items\\\");\\r\\n     Option trackerRun = new Option(\\\"t\\\", \\\"tracker\\\", false, \\\"Create NLT cache entries only for tracker items\\\");\\r\\n     Option timeLimit = OptionBuilder.withLongOpt(\\\"limit\\\").hasArg().withValueSeparator().withDescription(\\\"Set time limit for execution, in minutes\\\").create(\\\"l\\\");\\r\\n     Option age = OptionBuilder.withLongOpt(\\\"age\\\").hasArg().withValueSeparator().withDescription(\\\"Age (in days) of cache item before being recomputed\\\").create(\\\"a\\\");\\r\\n     Option server = OptionBuilder.withLongOpt(\\\"server\\\").hasArg().withValueSeparator().withDescription(\\\"The NLT server address\\\").create(\\\"s\\\");\\r\\n     Option numResults = OptionBuilder.withLongOpt(\\\"results\\\").hasArg().withValueSeparator().withDescription(\\\"Number of results per item\\\").create(\\\"r\\\");\\r\\n     Option configFile = OptionBuilder.withLongOpt(\\\"file\\\").hasArg().withValueSeparator().withDescription(\\\"Use the specified configuration file\\\").create();\\r\\n     Options options = new Options();\\r\\n     options.addOption(help);\\r\\n     options.addOption(version);\\r\\n     options.addOption(newRun);\\r\\n     options.addOption(trackerRun);\\r\\n     options.addOption(timeLimit);\\r\\n     options.addOption(age);\\r\\n     options.addOption(server);\\r\\n     options.addOption(numResults);\\r\\n     options.addOption(configFile);\\r\\n     CommandLineParser parser = new PosixParser();\\r\\n     String[] args = new String[] { \\\"-v\\\", \\\"-l\\\", \\\"10\\\", \\\"-age\\\", \\\"5\\\", \\\"-file\\\", \\\"filename\\\" };\\r\\n     CommandLine line = parser.parse(options, args);\\r\\n     assertTrue(line.hasOption(\\\"v\\\"));\\r\\n     assertEquals(line.getOptionValue(\\\"l\\\"), \\\"10\\\");\\r\\n     assertEquals(line.getOptionValue(\\\"limit\\\"), \\\"10\\\");\\r\\n     assertEquals(line.getOptionValue(\\\"a\\\"), \\\"5\\\");\\r\\n     assertEquals(line.getOptionValue(\\\"age\\\"), \\\"5\\\");\\r\\n     assertEquals(line.getOptionValue(\\\"file\\\"), \\\"filename\\\");\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2009","diff":"\"@@ -1,30 +1,30 @@\\n-public void testLongOptionWithShort() throws Exception {\\r\\n+public void testNLT() throws Exception {\\r\\n     Option help = new Option(\\\"h\\\", \\\"help\\\", false, \\\"print this message\\\");\\r\\n     Option version = new Option(\\\"v\\\", \\\"version\\\", false, \\\"print version information\\\");\\r\\n     Option newRun = new Option(\\\"n\\\", \\\"new\\\", false, \\\"Create NLT cache entries only for new items\\\");\\r\\n     Option trackerRun = new Option(\\\"t\\\", \\\"tracker\\\", false, \\\"Create NLT cache entries only for tracker items\\\");\\r\\n     Option timeLimit = OptionBuilder.withLongOpt(\\\"limit\\\").hasArg().withValueSeparator().withDescription(\\\"Set time limit for execution, in minutes\\\").create(\\\"l\\\");\\r\\n     Option age = OptionBuilder.withLongOpt(\\\"age\\\").hasArg().withValueSeparator().withDescription(\\\"Age (in days) of cache item before being recomputed\\\").create(\\\"a\\\");\\r\\n     Option server = OptionBuilder.withLongOpt(\\\"server\\\").hasArg().withValueSeparator().withDescription(\\\"The NLT server address\\\").create(\\\"s\\\");\\r\\n     Option numResults = OptionBuilder.withLongOpt(\\\"results\\\").hasArg().withValueSeparator().withDescription(\\\"Number of results per item\\\").create(\\\"r\\\");\\r\\n     Option configFile = OptionBuilder.withLongOpt(\\\"file\\\").hasArg().withValueSeparator().withDescription(\\\"Use the specified configuration file\\\").create();\\r\\n     Options options = new Options();\\r\\n     options.addOption(help);\\r\\n     options.addOption(version);\\r\\n     options.addOption(newRun);\\r\\n     options.addOption(trackerRun);\\r\\n     options.addOption(timeLimit);\\r\\n     options.addOption(age);\\r\\n     options.addOption(server);\\r\\n     options.addOption(numResults);\\r\\n     options.addOption(configFile);\\r\\n     CommandLineParser parser = new PosixParser();\\r\\n     String[] args = new String[] { \\\"-v\\\", \\\"-l\\\", \\\"10\\\", \\\"-age\\\", \\\"5\\\", \\\"-file\\\", \\\"filename\\\" };\\r\\n     CommandLine line = parser.parse(options, args);\\r\\n     assertTrue(line.hasOption(\\\"v\\\"));\\r\\n     assertEquals(line.getOptionValue(\\\"l\\\"), \\\"10\\\");\\r\\n     assertEquals(line.getOptionValue(\\\"limit\\\"), \\\"10\\\");\\r\\n     assertEquals(line.getOptionValue(\\\"a\\\"), \\\"5\\\");\\r\\n     assertEquals(line.getOptionValue(\\\"age\\\"), \\\"5\\\");\\r\\n     assertEquals(line.getOptionValue(\\\"file\\\"), \\\"filename\\\");\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2008","diff":"\"@@ -1,30 +1,30 @@\\n public void testLongOptionWithShort() throws Exception {\\r\\n     Option help = new Option(\\\"h\\\", \\\"help\\\", false, \\\"print this message\\\");\\r\\n     Option version = new Option(\\\"v\\\", \\\"version\\\", false, \\\"print version information\\\");\\r\\n     Option newRun = new Option(\\\"n\\\", \\\"new\\\", false, \\\"Create NLT cache entries only for new items\\\");\\r\\n     Option trackerRun = new Option(\\\"t\\\", \\\"tracker\\\", false, \\\"Create NLT cache entries only for tracker items\\\");\\r\\n-    Option timeLimit = OptionBuilder.withLongOpt(\\\"limit\\\").hasArg().withValueSeparator().withDescription(\\\"Set time limit for execution, in mintues\\\").create(\\\"l\\\");\\r\\n+    Option timeLimit = OptionBuilder.withLongOpt(\\\"limit\\\").hasArg().withValueSeparator().withDescription(\\\"Set time limit for execution, in minutes\\\").create(\\\"l\\\");\\r\\n     Option age = OptionBuilder.withLongOpt(\\\"age\\\").hasArg().withValueSeparator().withDescription(\\\"Age (in days) of cache item before being recomputed\\\").create(\\\"a\\\");\\r\\n     Option server = OptionBuilder.withLongOpt(\\\"server\\\").hasArg().withValueSeparator().withDescription(\\\"The NLT server address\\\").create(\\\"s\\\");\\r\\n     Option numResults = OptionBuilder.withLongOpt(\\\"results\\\").hasArg().withValueSeparator().withDescription(\\\"Number of results per item\\\").create(\\\"r\\\");\\r\\n     Option configFile = OptionBuilder.withLongOpt(\\\"file\\\").hasArg().withValueSeparator().withDescription(\\\"Use the specified configuration file\\\").create();\\r\\n     Options options = new Options();\\r\\n     options.addOption(help);\\r\\n     options.addOption(version);\\r\\n     options.addOption(newRun);\\r\\n     options.addOption(trackerRun);\\r\\n     options.addOption(timeLimit);\\r\\n     options.addOption(age);\\r\\n     options.addOption(server);\\r\\n     options.addOption(numResults);\\r\\n     options.addOption(configFile);\\r\\n     CommandLineParser parser = new PosixParser();\\r\\n     String[] args = new String[] { \\\"-v\\\", \\\"-l\\\", \\\"10\\\", \\\"-age\\\", \\\"5\\\", \\\"-file\\\", \\\"filename\\\" };\\r\\n     CommandLine line = parser.parse(options, args);\\r\\n     assertTrue(line.hasOption(\\\"v\\\"));\\r\\n     assertEquals(line.getOptionValue(\\\"l\\\"), \\\"10\\\");\\r\\n     assertEquals(line.getOptionValue(\\\"limit\\\"), \\\"10\\\");\\r\\n     assertEquals(line.getOptionValue(\\\"a\\\"), \\\"5\\\");\\r\\n     assertEquals(line.getOptionValue(\\\"age\\\"), \\\"5\\\");\\r\\n     assertEquals(line.getOptionValue(\\\"file\\\"), \\\"filename\\\");\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2008","diff":"\"\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2008","diff":"\"@@ -1,34 +1,30 @@\\n-public void testLongOptionWithShort() {\\r\\n+public void testLongOptionWithShort() throws Exception {\\r\\n     Option help = new Option(\\\"h\\\", \\\"help\\\", false, \\\"print this message\\\");\\r\\n     Option version = new Option(\\\"v\\\", \\\"version\\\", false, \\\"print version information\\\");\\r\\n     Option newRun = new Option(\\\"n\\\", \\\"new\\\", false, \\\"Create NLT cache entries only for new items\\\");\\r\\n     Option trackerRun = new Option(\\\"t\\\", \\\"tracker\\\", false, \\\"Create NLT cache entries only for tracker items\\\");\\r\\n     Option timeLimit = OptionBuilder.withLongOpt(\\\"limit\\\").hasArg().withValueSeparator().withDescription(\\\"Set time limit for execution, in mintues\\\").create(\\\"l\\\");\\r\\n     Option age = OptionBuilder.withLongOpt(\\\"age\\\").hasArg().withValueSeparator().withDescription(\\\"Age (in days) of cache item before being recomputed\\\").create(\\\"a\\\");\\r\\n     Option server = OptionBuilder.withLongOpt(\\\"server\\\").hasArg().withValueSeparator().withDescription(\\\"The NLT server address\\\").create(\\\"s\\\");\\r\\n     Option numResults = OptionBuilder.withLongOpt(\\\"results\\\").hasArg().withValueSeparator().withDescription(\\\"Number of results per item\\\").create(\\\"r\\\");\\r\\n     Option configFile = OptionBuilder.withLongOpt(\\\"file\\\").hasArg().withValueSeparator().withDescription(\\\"Use the specified configuration file\\\").create();\\r\\n     Options options = new Options();\\r\\n     options.addOption(help);\\r\\n     options.addOption(version);\\r\\n     options.addOption(newRun);\\r\\n     options.addOption(trackerRun);\\r\\n     options.addOption(timeLimit);\\r\\n     options.addOption(age);\\r\\n     options.addOption(server);\\r\\n     options.addOption(numResults);\\r\\n     options.addOption(configFile);\\r\\n     CommandLineParser parser = new PosixParser();\\r\\n     String[] args = new String[] { \\\"-v\\\", \\\"-l\\\", \\\"10\\\", \\\"-age\\\", \\\"5\\\", \\\"-file\\\", \\\"filename\\\" };\\r\\n-    try {\\r\\n-        CommandLine line = parser.parse(options, args);\\r\\n-        assertTrue(line.hasOption(\\\"v\\\"));\\r\\n-        assertEquals(line.getOptionValue(\\\"l\\\"), \\\"10\\\");\\r\\n-        assertEquals(line.getOptionValue(\\\"limit\\\"), \\\"10\\\");\\r\\n-        assertEquals(line.getOptionValue(\\\"a\\\"), \\\"5\\\");\\r\\n-        assertEquals(line.getOptionValue(\\\"age\\\"), \\\"5\\\");\\r\\n-        assertEquals(line.getOptionValue(\\\"file\\\"), \\\"filename\\\");\\r\\n-    } catch (ParseException exp) {\\r\\n-        fail(\\\"Unexpected exception:\\\" + exp.getMessage());\\r\\n-    }\\r\\n+    CommandLine line = parser.parse(options, args);\\r\\n+    assertTrue(line.hasOption(\\\"v\\\"));\\r\\n+    assertEquals(line.getOptionValue(\\\"l\\\"), \\\"10\\\");\\r\\n+    assertEquals(line.getOptionValue(\\\"limit\\\"), \\\"10\\\");\\r\\n+    assertEquals(line.getOptionValue(\\\"a\\\"), \\\"5\\\");\\r\\n+    assertEquals(line.getOptionValue(\\\"age\\\"), \\\"5\\\");\\r\\n+    assertEquals(line.getOptionValue(\\\"file\\\"), \\\"filename\\\");\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"roxspring@apache.org","authorName":"Robert James Oxspring","commitYear":"2004","diff":"\"@@ -0,0 +1,34 @@\\n+public void testLongOptionWithShort() {\\r\\n+    Option help = new Option(\\\"h\\\", \\\"help\\\", false, \\\"print this message\\\");\\r\\n+    Option version = new Option(\\\"v\\\", \\\"version\\\", false, \\\"print version information\\\");\\r\\n+    Option newRun = new Option(\\\"n\\\", \\\"new\\\", false, \\\"Create NLT cache entries only for new items\\\");\\r\\n+    Option trackerRun = new Option(\\\"t\\\", \\\"tracker\\\", false, \\\"Create NLT cache entries only for tracker items\\\");\\r\\n+    Option timeLimit = OptionBuilder.withLongOpt(\\\"limit\\\").hasArg().withValueSeparator().withDescription(\\\"Set time limit for execution, in mintues\\\").create(\\\"l\\\");\\r\\n+    Option age = OptionBuilder.withLongOpt(\\\"age\\\").hasArg().withValueSeparator().withDescription(\\\"Age (in days) of cache item before being recomputed\\\").create(\\\"a\\\");\\r\\n+    Option server = OptionBuilder.withLongOpt(\\\"server\\\").hasArg().withValueSeparator().withDescription(\\\"The NLT server address\\\").create(\\\"s\\\");\\r\\n+    Option numResults = OptionBuilder.withLongOpt(\\\"results\\\").hasArg().withValueSeparator().withDescription(\\\"Number of results per item\\\").create(\\\"r\\\");\\r\\n+    Option configFile = OptionBuilder.withLongOpt(\\\"file\\\").hasArg().withValueSeparator().withDescription(\\\"Use the specified configuration file\\\").create();\\r\\n+    Options options = new Options();\\r\\n+    options.addOption(help);\\r\\n+    options.addOption(version);\\r\\n+    options.addOption(newRun);\\r\\n+    options.addOption(trackerRun);\\r\\n+    options.addOption(timeLimit);\\r\\n+    options.addOption(age);\\r\\n+    options.addOption(server);\\r\\n+    options.addOption(numResults);\\r\\n+    options.addOption(configFile);\\r\\n+    CommandLineParser parser = new PosixParser();\\r\\n+    String[] args = new String[] { \\\"-v\\\", \\\"-l\\\", \\\"10\\\", \\\"-age\\\", \\\"5\\\", \\\"-file\\\", \\\"filename\\\" };\\r\\n+    try {\\r\\n+        CommandLine line = parser.parse(options, args);\\r\\n+        assertTrue(line.hasOption(\\\"v\\\"));\\r\\n+        assertEquals(line.getOptionValue(\\\"l\\\"), \\\"10\\\");\\r\\n+        assertEquals(line.getOptionValue(\\\"limit\\\"), \\\"10\\\");\\r\\n+        assertEquals(line.getOptionValue(\\\"a\\\"), \\\"5\\\");\\r\\n+        assertEquals(line.getOptionValue(\\\"age\\\"), \\\"5\\\");\\r\\n+        assertEquals(line.getOptionValue(\\\"file\\\"), \\\"filename\\\");\\r\\n+    } catch (ParseException exp) {\\r\\n+        fail(\\\"Unexpected exception:\\\" + exp.getMessage());\\r\\n+    }\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\test\java\org\apache\commons\cli\ArgumentIsOptionTest.java	setUp	org.apache.commons.cli.ArgumentIsOptionTest.setUp()	34	37	1	[{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"\""},{"authorEmail":"tn@apache.org","authorName":"Thomas Neidhart","commitYear":"2013","diff":"\"@@ -1,5 +1,5 @@\\n-@Override\\r\\n+@Before\\r\\n public void setUp() {\\r\\n     options = new Options().addOption(\\\"p\\\", false, \\\"Option p\\\").addOption(\\\"attr\\\", true, \\\"Option accepts argument\\\");\\r\\n     parser = new PosixParser();\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"sebb@apache.org","authorName":"Sebastian Bazley","commitYear":"2013","diff":"\"@@ -1,4 +1,5 @@\\n+@Override\\r\\n public void setUp() {\\r\\n     options = new Options().addOption(\\\"p\\\", false, \\\"Option p\\\").addOption(\\\"attr\\\", true, \\\"Option accepts argument\\\");\\r\\n     parser = new PosixParser();\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2008","diff":"\"\""},{"authorEmail":"roxspring@apache.org","authorName":"Robert James Oxspring","commitYear":"2004","diff":"\"@@ -0,0 +1,4 @@\\n+public void setUp() {\\r\\n+    options = new Options().addOption(\\\"p\\\", false, \\\"Option p\\\").addOption(\\\"attr\\\", true, \\\"Option accepts argument\\\");\\r\\n+    parser = new PosixParser();\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\test\java\org\apache\commons\cli\ArgumentIsOptionTest.java	testOption	org.apache.commons.cli.ArgumentIsOptionTest.testOption()	40	47	1	[{"authorEmail":"arturobernalg@gmail.com","authorName":"Arturo Bernal","commitYear":"2021","diff":"\"@@ -1,8 +1,8 @@\\n @Test\\r\\n public void testOption() throws Exception {\\r\\n     final String[] args = { \\\"-p\\\" };\\r\\n     final CommandLine cl = parser.parse(options, args);\\r\\n     assertTrue(\\\"Confirm -p is set\\\", cl.hasOption(\\\"p\\\"));\\r\\n     assertFalse(\\\"Confirm -attr is not set\\\", cl.hasOption(\\\"attr\\\"));\\r\\n-    assertTrue(\\\"Confirm all arguments recognized\\\", cl.getArgs().length == 0);\\r\\n+    assertEquals(\\\"Confirm all arguments recognized\\\", 0, cl.getArgs().length);\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"@@ -1,8 +1,8 @@\\n @Test\\r\\n public void testOption() throws Exception {\\r\\n-    final String[] args = new String[] { \\\"-p\\\" };\\r\\n+    final String[] args = { \\\"-p\\\" };\\r\\n     final CommandLine cl = parser.parse(options, args);\\r\\n     assertTrue(\\\"Confirm -p is set\\\", cl.hasOption(\\\"p\\\"));\\r\\n     assertFalse(\\\"Confirm -attr is not set\\\", cl.hasOption(\\\"attr\\\"));\\r\\n     assertTrue(\\\"Confirm all arguments recognized\\\", cl.getArgs().length == 0);\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,8 +1,8 @@\\n @Test\\r\\n public void testOption() throws Exception {\\r\\n-    String[] args = new String[] { \\\"-p\\\" };\\r\\n-    CommandLine cl = parser.parse(options, args);\\r\\n+    final String[] args = new String[] { \\\"-p\\\" };\\r\\n+    final CommandLine cl = parser.parse(options, args);\\r\\n     assertTrue(\\\"Confirm -p is set\\\", cl.hasOption(\\\"p\\\"));\\r\\n     assertFalse(\\\"Confirm -attr is not set\\\", cl.hasOption(\\\"attr\\\"));\\r\\n     assertTrue(\\\"Confirm all arguments recognized\\\", cl.getArgs().length == 0);\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"tn@apache.org","authorName":"Thomas Neidhart","commitYear":"2013","diff":"\"@@ -1,7 +1,8 @@\\n+@Test\\r\\n public void testOption() throws Exception {\\r\\n     String[] args = new String[] { \\\"-p\\\" };\\r\\n     CommandLine cl = parser.parse(options, args);\\r\\n     assertTrue(\\\"Confirm -p is set\\\", cl.hasOption(\\\"p\\\"));\\r\\n     assertFalse(\\\"Confirm -attr is not set\\\", cl.hasOption(\\\"attr\\\"));\\r\\n     assertTrue(\\\"Confirm all arguments recognized\\\", cl.getArgs().length == 0);\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2008","diff":"\"@@ -1,11 +1,7 @@\\n-public void testOption() {\\r\\n+public void testOption() throws Exception {\\r\\n     String[] args = new String[] { \\\"-p\\\" };\\r\\n-    try {\\r\\n-        CommandLine cl = parser.parse(options, args);\\r\\n-        assertTrue(\\\"Confirm -p is set\\\", cl.hasOption(\\\"p\\\"));\\r\\n-        assertFalse(\\\"Confirm -attr is not set\\\", cl.hasOption(\\\"attr\\\"));\\r\\n-        assertTrue(\\\"Confirm all arguments recognized\\\", cl.getArgs().length == 0);\\r\\n-    } catch (ParseException e) {\\r\\n-        fail(e.toString());\\r\\n-    }\\r\\n+    CommandLine cl = parser.parse(options, args);\\r\\n+    assertTrue(\\\"Confirm -p is set\\\", cl.hasOption(\\\"p\\\"));\\r\\n+    assertFalse(\\\"Confirm -attr is not set\\\", cl.hasOption(\\\"attr\\\"));\\r\\n+    assertTrue(\\\"Confirm all arguments recognized\\\", cl.getArgs().length == 0);\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"roxspring@apache.org","authorName":"Robert James Oxspring","commitYear":"2004","diff":"\"@@ -0,0 +1,11 @@\\n+public void testOption() {\\r\\n+    String[] args = new String[] { \\\"-p\\\" };\\r\\n+    try {\\r\\n+        CommandLine cl = parser.parse(options, args);\\r\\n+        assertTrue(\\\"Confirm -p is set\\\", cl.hasOption(\\\"p\\\"));\\r\\n+        assertFalse(\\\"Confirm -attr is not set\\\", cl.hasOption(\\\"attr\\\"));\\r\\n+        assertTrue(\\\"Confirm all arguments recognized\\\", cl.getArgs().length == 0);\\r\\n+    } catch (ParseException e) {\\r\\n+        fail(e.toString());\\r\\n+    }\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\test\java\org\apache\commons\cli\ArgumentIsOptionTest.java	testOptionAndOptionWithArgument	org.apache.commons.cli.ArgumentIsOptionTest.testOptionAndOptionWithArgument()	50	58	1	[{"authorEmail":"arturobernalg@gmail.com","authorName":"Arturo Bernal","commitYear":"2021","diff":"\"@@ -1,9 +1,9 @@\\n @Test\\r\\n public void testOptionAndOptionWithArgument() throws Exception {\\r\\n     final String[] args = { \\\"-p\\\", \\\"-attr\\\", \\\"p\\\" };\\r\\n     final CommandLine cl = parser.parse(options, args);\\r\\n     assertTrue(\\\"Confirm -p is set\\\", cl.hasOption(\\\"p\\\"));\\r\\n     assertTrue(\\\"Confirm -attr is set\\\", cl.hasOption(\\\"attr\\\"));\\r\\n-    assertTrue(\\\"Confirm arg of -attr\\\", cl.getOptionValue(\\\"attr\\\").equals(\\\"p\\\"));\\r\\n-    assertTrue(\\\"Confirm all arguments recognized\\\", cl.getArgs().length == 0);\\r\\n+    assertEquals(\\\"Confirm arg of -attr\\\", \\\"p\\\", cl.getOptionValue(\\\"attr\\\"));\\r\\n+    assertEquals(\\\"Confirm all arguments recognized\\\", 0, cl.getArgs().length);\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"@@ -1,9 +1,9 @@\\n @Test\\r\\n public void testOptionAndOptionWithArgument() throws Exception {\\r\\n-    final String[] args = new String[] { \\\"-p\\\", \\\"-attr\\\", \\\"p\\\" };\\r\\n+    final String[] args = { \\\"-p\\\", \\\"-attr\\\", \\\"p\\\" };\\r\\n     final CommandLine cl = parser.parse(options, args);\\r\\n     assertTrue(\\\"Confirm -p is set\\\", cl.hasOption(\\\"p\\\"));\\r\\n     assertTrue(\\\"Confirm -attr is set\\\", cl.hasOption(\\\"attr\\\"));\\r\\n     assertTrue(\\\"Confirm arg of -attr\\\", cl.getOptionValue(\\\"attr\\\").equals(\\\"p\\\"));\\r\\n     assertTrue(\\\"Confirm all arguments recognized\\\", cl.getArgs().length == 0);\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,9 +1,9 @@\\n @Test\\r\\n public void testOptionAndOptionWithArgument() throws Exception {\\r\\n-    String[] args = new String[] { \\\"-p\\\", \\\"-attr\\\", \\\"p\\\" };\\r\\n-    CommandLine cl = parser.parse(options, args);\\r\\n+    final String[] args = new String[] { \\\"-p\\\", \\\"-attr\\\", \\\"p\\\" };\\r\\n+    final CommandLine cl = parser.parse(options, args);\\r\\n     assertTrue(\\\"Confirm -p is set\\\", cl.hasOption(\\\"p\\\"));\\r\\n     assertTrue(\\\"Confirm -attr is set\\\", cl.hasOption(\\\"attr\\\"));\\r\\n     assertTrue(\\\"Confirm arg of -attr\\\", cl.getOptionValue(\\\"attr\\\").equals(\\\"p\\\"));\\r\\n     assertTrue(\\\"Confirm all arguments recognized\\\", cl.getArgs().length == 0);\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"tn@apache.org","authorName":"Thomas Neidhart","commitYear":"2013","diff":"\"@@ -1,8 +1,9 @@\\n+@Test\\r\\n public void testOptionAndOptionWithArgument() throws Exception {\\r\\n     String[] args = new String[] { \\\"-p\\\", \\\"-attr\\\", \\\"p\\\" };\\r\\n     CommandLine cl = parser.parse(options, args);\\r\\n     assertTrue(\\\"Confirm -p is set\\\", cl.hasOption(\\\"p\\\"));\\r\\n     assertTrue(\\\"Confirm -attr is set\\\", cl.hasOption(\\\"attr\\\"));\\r\\n     assertTrue(\\\"Confirm arg of -attr\\\", cl.getOptionValue(\\\"attr\\\").equals(\\\"p\\\"));\\r\\n     assertTrue(\\\"Confirm all arguments recognized\\\", cl.getArgs().length == 0);\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2008","diff":"\"\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2008","diff":"\"@@ -1,12 +1,8 @@\\n-public void testOptionAndOptionWithArgument() {\\r\\n+public void testOptionAndOptionWithArgument() throws Exception {\\r\\n     String[] args = new String[] { \\\"-p\\\", \\\"-attr\\\", \\\"p\\\" };\\r\\n-    try {\\r\\n-        CommandLine cl = parser.parse(options, args);\\r\\n-        assertTrue(\\\"Confirm -p is set\\\", cl.hasOption(\\\"p\\\"));\\r\\n-        assertTrue(\\\"Confirm -attr is set\\\", cl.hasOption(\\\"attr\\\"));\\r\\n-        assertTrue(\\\"Confirm arg of -attr\\\", cl.getOptionValue(\\\"attr\\\").equals(\\\"p\\\"));\\r\\n-        assertTrue(\\\"Confirm all arguments recognized\\\", cl.getArgs().length == 0);\\r\\n-    } catch (ParseException e) {\\r\\n-        fail(e.toString());\\r\\n-    }\\r\\n+    CommandLine cl = parser.parse(options, args);\\r\\n+    assertTrue(\\\"Confirm -p is set\\\", cl.hasOption(\\\"p\\\"));\\r\\n+    assertTrue(\\\"Confirm -attr is set\\\", cl.hasOption(\\\"attr\\\"));\\r\\n+    assertTrue(\\\"Confirm arg of -attr\\\", cl.getOptionValue(\\\"attr\\\").equals(\\\"p\\\"));\\r\\n+    assertTrue(\\\"Confirm all arguments recognized\\\", cl.getArgs().length == 0);\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"roxspring@apache.org","authorName":"Robert James Oxspring","commitYear":"2004","diff":"\"@@ -1,12 +1,12 @@\\n public void testOptionAndOptionWithArgument() {\\r\\n-    String[] args = new String[] { \\\"-p\\\", \\\"-attr\\\", \\\"value\\\" };\\r\\n+    String[] args = new String[] { \\\"-p\\\", \\\"-attr\\\", \\\"p\\\" };\\r\\n     try {\\r\\n         CommandLine cl = parser.parse(options, args);\\r\\n         assertTrue(\\\"Confirm -p is set\\\", cl.hasOption(\\\"p\\\"));\\r\\n         assertTrue(\\\"Confirm -attr is set\\\", cl.hasOption(\\\"attr\\\"));\\r\\n-        assertTrue(\\\"Confirm arg of -attr\\\", cl.getOptionValue(\\\"attr\\\").equals(\\\"value\\\"));\\r\\n+        assertTrue(\\\"Confirm arg of -attr\\\", cl.getOptionValue(\\\"attr\\\").equals(\\\"p\\\"));\\r\\n         assertTrue(\\\"Confirm all arguments recognized\\\", cl.getArgs().length == 0);\\r\\n     } catch (ParseException e) {\\r\\n         fail(e.toString());\\r\\n     }\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"roxspring@apache.org","authorName":"Robert James Oxspring","commitYear":"2004","diff":"\"@@ -0,0 +1,12 @@\\n+public void testOptionAndOptionWithArgument() {\\r\\n+    String[] args = new String[] { \\\"-p\\\", \\\"-attr\\\", \\\"value\\\" };\\r\\n+    try {\\r\\n+        CommandLine cl = parser.parse(options, args);\\r\\n+        assertTrue(\\\"Confirm -p is set\\\", cl.hasOption(\\\"p\\\"));\\r\\n+        assertTrue(\\\"Confirm -attr is set\\\", cl.hasOption(\\\"attr\\\"));\\r\\n+        assertTrue(\\\"Confirm arg of -attr\\\", cl.getOptionValue(\\\"attr\\\").equals(\\\"value\\\"));\\r\\n+        assertTrue(\\\"Confirm all arguments recognized\\\", cl.getArgs().length == 0);\\r\\n+    } catch (ParseException e) {\\r\\n+        fail(e.toString());\\r\\n+    }\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\test\java\org\apache\commons\cli\ArgumentIsOptionTest.java	testOptionWithArgument	org.apache.commons.cli.ArgumentIsOptionTest.testOptionWithArgument()	61	69	1	[{"authorEmail":"arturobernalg@gmail.com","authorName":"Arturo Bernal","commitYear":"2021","diff":"\"@@ -1,9 +1,9 @@\\n @Test\\r\\n public void testOptionWithArgument() throws Exception {\\r\\n     final String[] args = { \\\"-attr\\\", \\\"p\\\" };\\r\\n     final CommandLine cl = parser.parse(options, args);\\r\\n     assertFalse(\\\"Confirm -p is set\\\", cl.hasOption(\\\"p\\\"));\\r\\n     assertTrue(\\\"Confirm -attr is set\\\", cl.hasOption(\\\"attr\\\"));\\r\\n-    assertTrue(\\\"Confirm arg of -attr\\\", cl.getOptionValue(\\\"attr\\\").equals(\\\"p\\\"));\\r\\n-    assertTrue(\\\"Confirm all arguments recognized\\\", cl.getArgs().length == 0);\\r\\n+    assertEquals(\\\"Confirm arg of -attr\\\", \\\"p\\\", cl.getOptionValue(\\\"attr\\\"));\\r\\n+    assertEquals(\\\"Confirm all arguments recognized\\\", 0, cl.getArgs().length);\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"@@ -1,9 +1,9 @@\\n @Test\\r\\n public void testOptionWithArgument() throws Exception {\\r\\n-    final String[] args = new String[] { \\\"-attr\\\", \\\"p\\\" };\\r\\n+    final String[] args = { \\\"-attr\\\", \\\"p\\\" };\\r\\n     final CommandLine cl = parser.parse(options, args);\\r\\n     assertFalse(\\\"Confirm -p is set\\\", cl.hasOption(\\\"p\\\"));\\r\\n     assertTrue(\\\"Confirm -attr is set\\\", cl.hasOption(\\\"attr\\\"));\\r\\n     assertTrue(\\\"Confirm arg of -attr\\\", cl.getOptionValue(\\\"attr\\\").equals(\\\"p\\\"));\\r\\n     assertTrue(\\\"Confirm all arguments recognized\\\", cl.getArgs().length == 0);\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,9 +1,9 @@\\n @Test\\r\\n public void testOptionWithArgument() throws Exception {\\r\\n-    String[] args = new String[] { \\\"-attr\\\", \\\"p\\\" };\\r\\n-    CommandLine cl = parser.parse(options, args);\\r\\n+    final String[] args = new String[] { \\\"-attr\\\", \\\"p\\\" };\\r\\n+    final CommandLine cl = parser.parse(options, args);\\r\\n     assertFalse(\\\"Confirm -p is set\\\", cl.hasOption(\\\"p\\\"));\\r\\n     assertTrue(\\\"Confirm -attr is set\\\", cl.hasOption(\\\"attr\\\"));\\r\\n     assertTrue(\\\"Confirm arg of -attr\\\", cl.getOptionValue(\\\"attr\\\").equals(\\\"p\\\"));\\r\\n     assertTrue(\\\"Confirm all arguments recognized\\\", cl.getArgs().length == 0);\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"tn@apache.org","authorName":"Thomas Neidhart","commitYear":"2013","diff":"\"@@ -1,8 +1,9 @@\\n+@Test\\r\\n public void testOptionWithArgument() throws Exception {\\r\\n     String[] args = new String[] { \\\"-attr\\\", \\\"p\\\" };\\r\\n     CommandLine cl = parser.parse(options, args);\\r\\n     assertFalse(\\\"Confirm -p is set\\\", cl.hasOption(\\\"p\\\"));\\r\\n     assertTrue(\\\"Confirm -attr is set\\\", cl.hasOption(\\\"attr\\\"));\\r\\n     assertTrue(\\\"Confirm arg of -attr\\\", cl.getOptionValue(\\\"attr\\\").equals(\\\"p\\\"));\\r\\n     assertTrue(\\\"Confirm all arguments recognized\\\", cl.getArgs().length == 0);\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2008","diff":"\"@@ -1,12 +1,8 @@\\n-public void testOptionWithArgument() {\\r\\n+public void testOptionWithArgument() throws Exception {\\r\\n     String[] args = new String[] { \\\"-attr\\\", \\\"p\\\" };\\r\\n-    try {\\r\\n-        CommandLine cl = parser.parse(options, args);\\r\\n-        assertFalse(\\\"Confirm -p is set\\\", cl.hasOption(\\\"p\\\"));\\r\\n-        assertTrue(\\\"Confirm -attr is set\\\", cl.hasOption(\\\"attr\\\"));\\r\\n-        assertTrue(\\\"Confirm arg of -attr\\\", cl.getOptionValue(\\\"attr\\\").equals(\\\"p\\\"));\\r\\n-        assertTrue(\\\"Confirm all arguments recognized\\\", cl.getArgs().length == 0);\\r\\n-    } catch (ParseException e) {\\r\\n-        fail(e.toString());\\r\\n-    }\\r\\n+    CommandLine cl = parser.parse(options, args);\\r\\n+    assertFalse(\\\"Confirm -p is set\\\", cl.hasOption(\\\"p\\\"));\\r\\n+    assertTrue(\\\"Confirm -attr is set\\\", cl.hasOption(\\\"attr\\\"));\\r\\n+    assertTrue(\\\"Confirm arg of -attr\\\", cl.getOptionValue(\\\"attr\\\").equals(\\\"p\\\"));\\r\\n+    assertTrue(\\\"Confirm all arguments recognized\\\", cl.getArgs().length == 0);\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"roxspring@apache.org","authorName":"Robert James Oxspring","commitYear":"2004","diff":"\"@@ -1,12 +1,12 @@\\n public void testOptionWithArgument() {\\r\\n-    String[] args = new String[] { \\\"-attr\\\", \\\"value\\\" };\\r\\n+    String[] args = new String[] { \\\"-attr\\\", \\\"p\\\" };\\r\\n     try {\\r\\n         CommandLine cl = parser.parse(options, args);\\r\\n         assertFalse(\\\"Confirm -p is set\\\", cl.hasOption(\\\"p\\\"));\\r\\n         assertTrue(\\\"Confirm -attr is set\\\", cl.hasOption(\\\"attr\\\"));\\r\\n-        assertTrue(\\\"Confirm arg of -attr\\\", cl.getOptionValue(\\\"attr\\\").equals(\\\"value\\\"));\\r\\n+        assertTrue(\\\"Confirm arg of -attr\\\", cl.getOptionValue(\\\"attr\\\").equals(\\\"p\\\"));\\r\\n         assertTrue(\\\"Confirm all arguments recognized\\\", cl.getArgs().length == 0);\\r\\n     } catch (ParseException e) {\\r\\n         fail(e.toString());\\r\\n     }\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"roxspring@apache.org","authorName":"Robert James Oxspring","commitYear":"2004","diff":"\"@@ -0,0 +1,12 @@\\n+public void testOptionWithArgument() {\\r\\n+    String[] args = new String[] { \\\"-attr\\\", \\\"value\\\" };\\r\\n+    try {\\r\\n+        CommandLine cl = parser.parse(options, args);\\r\\n+        assertFalse(\\\"Confirm -p is set\\\", cl.hasOption(\\\"p\\\"));\\r\\n+        assertTrue(\\\"Confirm -attr is set\\\", cl.hasOption(\\\"attr\\\"));\\r\\n+        assertTrue(\\\"Confirm arg of -attr\\\", cl.getOptionValue(\\\"attr\\\").equals(\\\"value\\\"));\\r\\n+        assertTrue(\\\"Confirm all arguments recognized\\\", cl.getArgs().length == 0);\\r\\n+    } catch (ParseException e) {\\r\\n+        fail(e.toString());\\r\\n+    }\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\test\java\org\apache\commons\cli\BasicParserTest.java	setUp	org.apache.commons.cli.BasicParserTest.setUp()	28	31	1	[{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2020","diff":"\"@@ -1,5 +1,6 @@\\n+@Override\\r\\n @Before\\r\\n public void setUp() {\\r\\n     super.setUp();\\r\\n     parser = new BasicParser();\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"tn@apache.org","authorName":"Thomas Neidhart","commitYear":"2013","diff":"\"@@ -1,5 +1,5 @@\\n-@Override\\r\\n+@Before\\r\\n public void setUp() {\\r\\n     super.setUp();\\r\\n     parser = new BasicParser();\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"sebb@apache.org","authorName":"Sebastian Bazley","commitYear":"2013","diff":"\"@@ -1,4 +1,5 @@\\n+@Override\\r\\n public void setUp() {\\r\\n     super.setUp();\\r\\n     parser = new BasicParser();\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2008","diff":"\"@@ -0,0 +1,4 @@\\n+public void setUp() {\\r\\n+    super.setUp();\\r\\n+    parser = new BasicParser();\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\test\java\org\apache\commons\cli\BasicParserTest.java	testAmbiguousLongWithoutEqualSingleDash	org.apache.commons.cli.BasicParserTest.testAmbiguousLongWithoutEqualSingleDash()	36	37	1	[{"authorEmail":"britter@apache.org","authorName":"Benedikt Ritter","commitYear":"2016","diff":"\"@@ -1,3 +1,5 @@\\n @Override\\r\\n+@Test\\r\\n+@Ignore(\\\"not supported by the BasicParser\\\")\\r\\n public void testAmbiguousLongWithoutEqualSingleDash() throws Exception {\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"sebb@apache.org","authorName":"Sebastian Bazley","commitYear":"2013","diff":"\"@@ -1,2 +1,3 @@\\n+@Override\\r\\n public void testAmbiguousLongWithoutEqualSingleDash() throws Exception {\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2009","diff":"\"@@ -0,0 +1,2 @@\\n+public void testAmbiguousLongWithoutEqualSingleDash() throws Exception {\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\test\java\org\apache\commons\cli\BasicParserTest.java	testAmbiguousLongWithoutEqualSingleDash2	org.apache.commons.cli.BasicParserTest.testAmbiguousLongWithoutEqualSingleDash2()	42	43	1	[{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2023","diff":"\"@@ -0,0 +1,5 @@\\n+@Override\\r\\n+@Test\\r\\n+@Ignore(\\\"not supported by the BasicParser\\\")\\r\\n+public void testAmbiguousLongWithoutEqualSingleDash2() throws Exception {\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\test\java\org\apache\commons\cli\BasicParserTest.java	testAmbiguousPartialLongOption1	org.apache.commons.cli.BasicParserTest.testAmbiguousPartialLongOption1()	48	49	1	[{"authorEmail":"britter@apache.org","authorName":"Benedikt Ritter","commitYear":"2016","diff":"\"@@ -1,3 +1,5 @@\\n @Override\\r\\n+@Test\\r\\n+@Ignore(\\\"not supported by the BasicParser\\\")\\r\\n public void testAmbiguousPartialLongOption1() throws Exception {\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"sebb@apache.org","authorName":"Sebastian Bazley","commitYear":"2013","diff":"\"@@ -1,2 +1,3 @@\\n+@Override\\r\\n public void testAmbiguousPartialLongOption1() throws Exception {\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2009","diff":"\"@@ -0,0 +1,2 @@\\n+public void testAmbiguousPartialLongOption1() throws Exception {\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\test\java\org\apache\commons\cli\BasicParserTest.java	testAmbiguousPartialLongOption2	org.apache.commons.cli.BasicParserTest.testAmbiguousPartialLongOption2()	54	55	1	[{"authorEmail":"britter@apache.org","authorName":"Benedikt Ritter","commitYear":"2016","diff":"\"@@ -1,3 +1,5 @@\\n @Override\\r\\n+@Test\\r\\n+@Ignore(\\\"not supported by the BasicParser\\\")\\r\\n public void testAmbiguousPartialLongOption2() throws Exception {\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"sebb@apache.org","authorName":"Sebastian Bazley","commitYear":"2013","diff":"\"@@ -1,2 +1,3 @@\\n+@Override\\r\\n public void testAmbiguousPartialLongOption2() throws Exception {\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2009","diff":"\"@@ -0,0 +1,2 @@\\n+public void testAmbiguousPartialLongOption2() throws Exception {\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\test\java\org\apache\commons\cli\BasicParserTest.java	testAmbiguousPartialLongOption3	org.apache.commons.cli.BasicParserTest.testAmbiguousPartialLongOption3()	60	61	1	[{"authorEmail":"britter@apache.org","authorName":"Benedikt Ritter","commitYear":"2016","diff":"\"@@ -1,3 +1,5 @@\\n @Override\\r\\n+@Test\\r\\n+@Ignore(\\\"not supported by the BasicParser\\\")\\r\\n public void testAmbiguousPartialLongOption3() throws Exception {\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"sebb@apache.org","authorName":"Sebastian Bazley","commitYear":"2013","diff":"\"@@ -1,2 +1,3 @@\\n+@Override\\r\\n public void testAmbiguousPartialLongOption3() throws Exception {\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2009","diff":"\"@@ -1,2 +1,2 @@\\n-public void testPartialLongOptionWithShort() throws Exception {\\r\\n+public void testAmbiguousPartialLongOption3() throws Exception {\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2009","diff":"\"@@ -0,0 +1,2 @@\\n+public void testPartialLongOptionWithShort() throws Exception {\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\test\java\org\apache\commons\cli\BasicParserTest.java	testAmbiguousPartialLongOption4	org.apache.commons.cli.BasicParserTest.testAmbiguousPartialLongOption4()	66	67	1	[{"authorEmail":"britter@apache.org","authorName":"Benedikt Ritter","commitYear":"2016","diff":"\"@@ -1,3 +1,5 @@\\n @Override\\r\\n+@Test\\r\\n+@Ignore(\\\"not supported by the BasicParser\\\")\\r\\n public void testAmbiguousPartialLongOption4() throws Exception {\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"sebb@apache.org","authorName":"Sebastian Bazley","commitYear":"2013","diff":"\"@@ -1,2 +1,3 @@\\n+@Override\\r\\n public void testAmbiguousPartialLongOption4() throws Exception {\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2009","diff":"\"@@ -1,2 +1,2 @@\\n-public void testPartialLongOptionWithShort() throws Exception {\\r\\n+public void testAmbiguousPartialLongOption4() throws Exception {\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2009","diff":"\"@@ -0,0 +1,2 @@\\n+public void testPartialLongOptionWithShort() throws Exception {\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\test\java\org\apache\commons\cli\BasicParserTest.java	testBursting	org.apache.commons.cli.BasicParserTest.testBursting()	72	73	1	[{"authorEmail":"britter@apache.org","authorName":"Benedikt Ritter","commitYear":"2016","diff":"\"@@ -1,3 +1,5 @@\\n @Override\\r\\n+@Test\\r\\n+@Ignore(\\\"not supported by the BasicParser\\\")\\r\\n public void testBursting() throws Exception {\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"sebb@apache.org","authorName":"Sebastian Bazley","commitYear":"2013","diff":"\"@@ -1,2 +1,3 @@\\n+@Override\\r\\n public void testBursting() throws Exception {\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2009","diff":"\"@@ -0,0 +1,2 @@\\n+public void testBursting() throws Exception {\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\test\java\org\apache\commons\cli\BasicParserTest.java	testDoubleDash2	org.apache.commons.cli.BasicParserTest.testDoubleDash2()	78	79	1	[{"authorEmail":"britter@apache.org","authorName":"Benedikt Ritter","commitYear":"2016","diff":"\"@@ -1,3 +1,5 @@\\n @Override\\r\\n+@Test\\r\\n+@Ignore(\\\"not supported by the BasicParser\\\")\\r\\n public void testDoubleDash2() throws Exception {\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"sebb@apache.org","authorName":"Sebastian Bazley","commitYear":"2013","diff":"\"@@ -1,2 +1,3 @@\\n+@Override\\r\\n public void testDoubleDash2() throws Exception {\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2009","diff":"\"@@ -0,0 +1,2 @@\\n+public void testDoubleDash2() throws Exception {\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\test\java\org\apache\commons\cli\BasicParserTest.java	testLongOptionWithEqualsQuoteHandling	org.apache.commons.cli.BasicParserTest.testLongOptionWithEqualsQuoteHandling()	84	85	1	[{"authorEmail":"stoty@apache.org","authorName":"Istvan Toth","commitYear":"2021","diff":"\"@@ -0,0 +1,5 @@\\n+@Override\\r\\n+@Test\\r\\n+@Ignore(\\\"not supported by the BasicParser\\\")\\r\\n+public void testLongOptionWithEqualsQuoteHandling() throws Exception {\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\test\java\org\apache\commons\cli\BasicParserTest.java	testLongWithEqualDoubleDash	org.apache.commons.cli.BasicParserTest.testLongWithEqualDoubleDash()	90	91	1	[{"authorEmail":"britter@apache.org","authorName":"Benedikt Ritter","commitYear":"2016","diff":"\"@@ -1,3 +1,5 @@\\n @Override\\r\\n+@Test\\r\\n+@Ignore(\\\"not supported by the BasicParser\\\")\\r\\n public void testLongWithEqualDoubleDash() throws Exception {\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"sebb@apache.org","authorName":"Sebastian Bazley","commitYear":"2013","diff":"\"@@ -1,2 +1,3 @@\\n+@Override\\r\\n public void testLongWithEqualDoubleDash() throws Exception {\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2009","diff":"\"@@ -1,2 +1,2 @@\\n-public void testPartialLongOptionWithShort() throws Exception {\\r\\n+public void testLongWithEqualDoubleDash() throws Exception {\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2009","diff":"\"@@ -0,0 +1,2 @@\\n+public void testPartialLongOptionWithShort() throws Exception {\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\test\java\org\apache\commons\cli\BasicParserTest.java	testLongWithEqualSingleDash	org.apache.commons.cli.BasicParserTest.testLongWithEqualSingleDash()	96	97	1	[{"authorEmail":"britter@apache.org","authorName":"Benedikt Ritter","commitYear":"2016","diff":"\"@@ -1,3 +1,5 @@\\n @Override\\r\\n+@Test\\r\\n+@Ignore(\\\"not supported by the BasicParser\\\")\\r\\n public void testLongWithEqualSingleDash() throws Exception {\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"sebb@apache.org","authorName":"Sebastian Bazley","commitYear":"2013","diff":"\"@@ -1,2 +1,3 @@\\n+@Override\\r\\n public void testLongWithEqualSingleDash() throws Exception {\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2008","diff":"\"@@ -0,0 +1,2 @@\\n+public void testLongWithEqualSingleDash() throws Exception {\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\test\java\org\apache\commons\cli\BasicParserTest.java	testLongWithoutEqualSingleDash	org.apache.commons.cli.BasicParserTest.testLongWithoutEqualSingleDash()	102	103	1	[{"authorEmail":"britter@apache.org","authorName":"Benedikt Ritter","commitYear":"2016","diff":"\"@@ -1,3 +1,5 @@\\n @Override\\r\\n+@Test\\r\\n+@Ignore(\\\"not supported by the BasicParser\\\")\\r\\n public void testLongWithoutEqualSingleDash() throws Exception {\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"sebb@apache.org","authorName":"Sebastian Bazley","commitYear":"2013","diff":"\"@@ -1,2 +1,3 @@\\n+@Override\\r\\n public void testLongWithoutEqualSingleDash() throws Exception {\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2009","diff":"\"@@ -0,0 +1,2 @@\\n+public void testLongWithoutEqualSingleDash() throws Exception {\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\test\java\org\apache\commons\cli\BasicParserTest.java	testMissingArgWithBursting	org.apache.commons.cli.BasicParserTest.testMissingArgWithBursting()	108	109	1	[{"authorEmail":"britter@apache.org","authorName":"Benedikt Ritter","commitYear":"2016","diff":"\"@@ -1,3 +1,5 @@\\n @Override\\r\\n+@Test\\r\\n+@Ignore(\\\"not supported by the BasicParser\\\")\\r\\n public void testMissingArgWithBursting() throws Exception {\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"sebb@apache.org","authorName":"Sebastian Bazley","commitYear":"2013","diff":"\"@@ -1,2 +1,3 @@\\n+@Override\\r\\n public void testMissingArgWithBursting() throws Exception {\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2009","diff":"\"@@ -0,0 +1,2 @@\\n+public void testMissingArgWithBursting() throws Exception {\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\test\java\org\apache\commons\cli\BasicParserTest.java	testNegativeOption	org.apache.commons.cli.BasicParserTest.testNegativeOption()	114	115	1	[{"authorEmail":"britter@apache.org","authorName":"Benedikt Ritter","commitYear":"2016","diff":"\"@@ -1,3 +1,5 @@\\n @Override\\r\\n+@Test\\r\\n+@Ignore(\\\"not supported by the BasicParser (CLI-184)\\\")\\r\\n public void testNegativeOption() throws Exception {\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"sebb@apache.org","authorName":"Sebastian Bazley","commitYear":"2013","diff":"\"@@ -1,2 +1,3 @@\\n+@Override\\r\\n public void testNegativeOption() throws Exception {\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2009","diff":"\"@@ -0,0 +1,2 @@\\n+public void testNegativeOption() throws Exception {\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\test\java\org\apache\commons\cli\BasicParserTest.java	testPartialLongOptionSingleDash	org.apache.commons.cli.BasicParserTest.testPartialLongOptionSingleDash()	120	121	1	[{"authorEmail":"britter@apache.org","authorName":"Benedikt Ritter","commitYear":"2016","diff":"\"@@ -1,3 +1,5 @@\\n @Override\\r\\n+@Test\\r\\n+@Ignore(\\\"not supported by the BasicParser\\\")\\r\\n public void testPartialLongOptionSingleDash() throws Exception {\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"sebb@apache.org","authorName":"Sebastian Bazley","commitYear":"2013","diff":"\"@@ -1,2 +1,3 @@\\n+@Override\\r\\n public void testPartialLongOptionSingleDash() throws Exception {\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2009","diff":"\"@@ -1,2 +1,2 @@\\n-public void testPartialLongOptionWithShort() throws Exception {\\r\\n+public void testPartialLongOptionSingleDash() throws Exception {\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2009","diff":"\"@@ -0,0 +1,2 @@\\n+public void testPartialLongOptionWithShort() throws Exception {\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\test\java\org\apache\commons\cli\BasicParserTest.java	testPropertiesOption1	org.apache.commons.cli.BasicParserTest.testPropertiesOption1()	126	127	1	[{"authorEmail":"britter@apache.org","authorName":"Benedikt Ritter","commitYear":"2016","diff":"\"@@ -1,3 +1,5 @@\\n @Override\\r\\n+@Test\\r\\n+@Ignore(\\\"not supported by the BasicParser\\\")\\r\\n public void testPropertiesOption1() throws Exception {\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"sebb@apache.org","authorName":"Sebastian Bazley","commitYear":"2013","diff":"\"@@ -1,2 +1,3 @@\\n+@Override\\r\\n public void testPropertiesOption1() throws Exception {\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2009","diff":"\"@@ -1,2 +1,2 @@\\n-public void testPropertiesOption() throws Exception {\\r\\n+public void testPropertiesOption1() throws Exception {\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2008","diff":"\"@@ -0,0 +1,2 @@\\n+public void testPropertiesOption() throws Exception {\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\test\java\org\apache\commons\cli\BasicParserTest.java	testPropertiesOption2	org.apache.commons.cli.BasicParserTest.testPropertiesOption2()	132	133	1	[{"authorEmail":"britter@apache.org","authorName":"Benedikt Ritter","commitYear":"2016","diff":"\"@@ -1,3 +1,5 @@\\n @Override\\r\\n+@Test\\r\\n+@Ignore(\\\"not supported by the BasicParser\\\")\\r\\n public void testPropertiesOption2() throws Exception {\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"sebb@apache.org","authorName":"Sebastian Bazley","commitYear":"2013","diff":"\"@@ -1,2 +1,3 @@\\n+@Override\\r\\n public void testPropertiesOption2() throws Exception {\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2009","diff":"\"@@ -1,2 +1,2 @@\\n-public void testPropertiesOption() throws Exception {\\r\\n+public void testPropertiesOption2() throws Exception {\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2008","diff":"\"@@ -0,0 +1,2 @@\\n+public void testPropertiesOption() throws Exception {\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\test\java\org\apache\commons\cli\BasicParserTest.java	testShortOptionConcatenatedQuoteHandling	org.apache.commons.cli.BasicParserTest.testShortOptionConcatenatedQuoteHandling()	138	139	1	[{"authorEmail":"stoty@apache.org","authorName":"Istvan Toth","commitYear":"2021","diff":"\"@@ -0,0 +1,5 @@\\n+@Override\\r\\n+@Test\\r\\n+@Ignore(\\\"not supported by the BasicParser\\\")\\r\\n+public void testShortOptionConcatenatedQuoteHandling() throws Exception {\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\test\java\org\apache\commons\cli\BasicParserTest.java	testShortWithEqual	org.apache.commons.cli.BasicParserTest.testShortWithEqual()	144	145	1	[{"authorEmail":"britter@apache.org","authorName":"Benedikt Ritter","commitYear":"2016","diff":"\"@@ -1,3 +1,5 @@\\n @Override\\r\\n+@Test\\r\\n+@Ignore(\\\"not supported by the BasicParser\\\")\\r\\n public void testShortWithEqual() throws Exception {\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"sebb@apache.org","authorName":"Sebastian Bazley","commitYear":"2013","diff":"\"@@ -1,2 +1,3 @@\\n+@Override\\r\\n public void testShortWithEqual() throws Exception {\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2008","diff":"\"@@ -0,0 +1,2 @@\\n+public void testShortWithEqual() throws Exception {\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\test\java\org\apache\commons\cli\BasicParserTest.java	testShortWithoutEqual	org.apache.commons.cli.BasicParserTest.testShortWithoutEqual()	150	151	1	[{"authorEmail":"britter@apache.org","authorName":"Benedikt Ritter","commitYear":"2016","diff":"\"@@ -1,3 +1,5 @@\\n @Override\\r\\n+@Test\\r\\n+@Ignore(\\\"not supported by the BasicParser\\\")\\r\\n public void testShortWithoutEqual() throws Exception {\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"sebb@apache.org","authorName":"Sebastian Bazley","commitYear":"2013","diff":"\"@@ -1,2 +1,3 @@\\n+@Override\\r\\n public void testShortWithoutEqual() throws Exception {\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2008","diff":"\"@@ -0,0 +1,2 @@\\n+public void testShortWithoutEqual() throws Exception {\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\test\java\org\apache\commons\cli\BasicParserTest.java	testStopBursting	org.apache.commons.cli.BasicParserTest.testStopBursting()	156	157	1	[{"authorEmail":"britter@apache.org","authorName":"Benedikt Ritter","commitYear":"2016","diff":"\"@@ -1,3 +1,5 @@\\n @Override\\r\\n+@Test\\r\\n+@Ignore(\\\"not supported by the BasicParser\\\")\\r\\n public void testStopBursting() throws Exception {\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"sebb@apache.org","authorName":"Sebastian Bazley","commitYear":"2013","diff":"\"@@ -1,2 +1,3 @@\\n+@Override\\r\\n public void testStopBursting() throws Exception {\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2009","diff":"\"@@ -0,0 +1,2 @@\\n+public void testStopBursting() throws Exception {\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\test\java\org\apache\commons\cli\BasicParserTest.java	testStopBursting2	org.apache.commons.cli.BasicParserTest.testStopBursting2()	162	163	1	[{"authorEmail":"britter@apache.org","authorName":"Benedikt Ritter","commitYear":"2016","diff":"\"@@ -1,3 +1,5 @@\\n @Override\\r\\n+@Test\\r\\n+@Ignore(\\\"not supported by the BasicParser\\\")\\r\\n public void testStopBursting2() throws Exception {\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"sebb@apache.org","authorName":"Sebastian Bazley","commitYear":"2013","diff":"\"@@ -1,2 +1,3 @@\\n+@Override\\r\\n public void testStopBursting2() throws Exception {\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2009","diff":"\"@@ -0,0 +1,2 @@\\n+public void testStopBursting2() throws Exception {\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\test\java\org\apache\commons\cli\BasicParserTest.java	testUnambiguousPartialLongOption1	org.apache.commons.cli.BasicParserTest.testUnambiguousPartialLongOption1()	168	169	1	[{"authorEmail":"britter@apache.org","authorName":"Benedikt Ritter","commitYear":"2016","diff":"\"@@ -1,3 +1,5 @@\\n @Override\\r\\n+@Test\\r\\n+@Ignore(\\\"not supported by the BasicParser\\\")\\r\\n public void testUnambiguousPartialLongOption1() throws Exception {\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"sebb@apache.org","authorName":"Sebastian Bazley","commitYear":"2013","diff":"\"@@ -1,2 +1,3 @@\\n+@Override\\r\\n public void testUnambiguousPartialLongOption1() throws Exception {\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2009","diff":"\"@@ -0,0 +1,2 @@\\n+public void testUnambiguousPartialLongOption1() throws Exception {\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\test\java\org\apache\commons\cli\BasicParserTest.java	testUnambiguousPartialLongOption2	org.apache.commons.cli.BasicParserTest.testUnambiguousPartialLongOption2()	174	175	1	[{"authorEmail":"britter@apache.org","authorName":"Benedikt Ritter","commitYear":"2016","diff":"\"@@ -1,3 +1,5 @@\\n @Override\\r\\n+@Test\\r\\n+@Ignore(\\\"not supported by the BasicParser\\\")\\r\\n public void testUnambiguousPartialLongOption2() throws Exception {\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"sebb@apache.org","authorName":"Sebastian Bazley","commitYear":"2013","diff":"\"@@ -1,2 +1,3 @@\\n+@Override\\r\\n public void testUnambiguousPartialLongOption2() throws Exception {\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2009","diff":"\"@@ -0,0 +1,2 @@\\n+public void testUnambiguousPartialLongOption2() throws Exception {\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\test\java\org\apache\commons\cli\BasicParserTest.java	testUnambiguousPartialLongOption3	org.apache.commons.cli.BasicParserTest.testUnambiguousPartialLongOption3()	180	181	1	[{"authorEmail":"britter@apache.org","authorName":"Benedikt Ritter","commitYear":"2016","diff":"\"@@ -1,3 +1,5 @@\\n @Override\\r\\n+@Test\\r\\n+@Ignore(\\\"not supported by the BasicParser\\\")\\r\\n public void testUnambiguousPartialLongOption3() throws Exception {\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"sebb@apache.org","authorName":"Sebastian Bazley","commitYear":"2013","diff":"\"@@ -1,2 +1,3 @@\\n+@Override\\r\\n public void testUnambiguousPartialLongOption3() throws Exception {\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2009","diff":"\"@@ -1,2 +1,2 @@\\n-public void testPartialLongOptionWithShort() throws Exception {\\r\\n+public void testUnambiguousPartialLongOption3() throws Exception {\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2009","diff":"\"@@ -0,0 +1,2 @@\\n+public void testPartialLongOptionWithShort() throws Exception {\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\test\java\org\apache\commons\cli\BasicParserTest.java	testUnambiguousPartialLongOption4	org.apache.commons.cli.BasicParserTest.testUnambiguousPartialLongOption4()	186	187	1	[{"authorEmail":"britter@apache.org","authorName":"Benedikt Ritter","commitYear":"2016","diff":"\"@@ -1,3 +1,5 @@\\n @Override\\r\\n+@Test\\r\\n+@Ignore(\\\"not supported by the BasicParser\\\")\\r\\n public void testUnambiguousPartialLongOption4() throws Exception {\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"sebb@apache.org","authorName":"Sebastian Bazley","commitYear":"2013","diff":"\"@@ -1,2 +1,3 @@\\n+@Override\\r\\n public void testUnambiguousPartialLongOption4() throws Exception {\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2009","diff":"\"@@ -1,2 +1,2 @@\\n-public void testPartialLongOptionWithShort() throws Exception {\\r\\n+public void testUnambiguousPartialLongOption4() throws Exception {\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2009","diff":"\"@@ -0,0 +1,2 @@\\n+public void testPartialLongOptionWithShort() throws Exception {\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\test\java\org\apache\commons\cli\BasicParserTest.java	testUnrecognizedOptionWithBursting	org.apache.commons.cli.BasicParserTest.testUnrecognizedOptionWithBursting()	192	193	1	[{"authorEmail":"britter@apache.org","authorName":"Benedikt Ritter","commitYear":"2016","diff":"\"@@ -1,3 +1,5 @@\\n @Override\\r\\n+@Test\\r\\n+@Ignore(\\\"not supported by the BasicParser\\\")\\r\\n public void testUnrecognizedOptionWithBursting() throws Exception {\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"sebb@apache.org","authorName":"Sebastian Bazley","commitYear":"2013","diff":"\"@@ -1,2 +1,3 @@\\n+@Override\\r\\n public void testUnrecognizedOptionWithBursting() throws Exception {\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2009","diff":"\"@@ -0,0 +1,2 @@\\n+public void testUnrecognizedOptionWithBursting() throws Exception {\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\test\java\org\apache\commons\cli\bug\BugCLI133Test.java	testOrder	org.apache.commons.cli.bug.BugCLI133Test.testOrder()	32	39	1	[{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"\""},{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,9 +1,9 @@\\n @Test\\r\\n public void testOrder() throws ParseException {\\r\\n-    Option optionA = new Option(\\\"a\\\", \\\"first\\\");\\r\\n-    Options opts = new Options();\\r\\n+    final Option optionA = new Option(\\\"a\\\", \\\"first\\\");\\r\\n+    final Options opts = new Options();\\r\\n     opts.addOption(optionA);\\r\\n-    PosixParser posixParser = new PosixParser();\\r\\n-    CommandLine line = posixParser.parse(opts, null);\\r\\n+    final PosixParser posixParser = new PosixParser();\\r\\n+    final CommandLine line = posixParser.parse(opts, null);\\r\\n     assertFalse(line.hasOption((String) null));\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"britter@apache.org","authorName":"Benedikt Ritter","commitYear":"2017","diff":"\"@@ -1,9 +1,9 @@\\n @Test\\r\\n public void testOrder() throws ParseException {\\r\\n     Option optionA = new Option(\\\"a\\\", \\\"first\\\");\\r\\n     Options opts = new Options();\\r\\n     opts.addOption(optionA);\\r\\n     PosixParser posixParser = new PosixParser();\\r\\n     CommandLine line = posixParser.parse(opts, null);\\r\\n-    assertFalse(line.hasOption(null));\\r\\n+    assertFalse(line.hasOption((String) null));\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"tn@apache.org","authorName":"Thomas Neidhart","commitYear":"2013","diff":"\"@@ -1,8 +1,9 @@\\n+@Test\\r\\n public void testOrder() throws ParseException {\\r\\n     Option optionA = new Option(\\\"a\\\", \\\"first\\\");\\r\\n     Options opts = new Options();\\r\\n     opts.addOption(optionA);\\r\\n     PosixParser posixParser = new PosixParser();\\r\\n     CommandLine line = posixParser.parse(opts, null);\\r\\n     assertFalse(line.hasOption(null));\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"bayard@apache.org","authorName":"Henri Yandell","commitYear":"2007","diff":"\"@@ -0,0 +1,8 @@\\n+public void testOrder() throws ParseException {\\r\\n+    Option optionA = new Option(\\\"a\\\", \\\"first\\\");\\r\\n+    Options opts = new Options();\\r\\n+    opts.addOption(optionA);\\r\\n+    PosixParser posixParser = new PosixParser();\\r\\n+    CommandLine line = posixParser.parse(opts, null);\\r\\n+    assertFalse(line.hasOption(null));\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\test\java\org\apache\commons\cli\bug\BugCLI13Test.java	testCLI13	org.apache.commons.cli.bug.BugCLI13Test.testCLI13()	35	54	1	[{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"\""},{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,12 +1,12 @@\\n @Test\\r\\n public void testCLI13() throws ParseException {\\r\\n     final String debugOpt = \\\"debug\\\";\\r\\n-    @SuppressWarnings(\\\"static-access\\\") Option debug = OptionBuilder.withArgName(debugOpt).withDescription(\\\"turn on debugging\\\").withLongOpt(debugOpt).hasArg().create('d');\\r\\n-    Options options = new Options();\\r\\n+    @SuppressWarnings(\\\"static-access\\\") final Option debug = OptionBuilder.withArgName(debugOpt).withDescription(\\\"turn on debugging\\\").withLongOpt(debugOpt).hasArg().create('d');\\r\\n+    final Options options = new Options();\\r\\n     options.addOption(debug);\\r\\n-    CommandLine commandLine = new PosixParser().parse(options, new String[] { \\\"-d\\\", \\\"true\\\" });\\r\\n+    final CommandLine commandLine = new PosixParser().parse(options, new String[] { \\\"-d\\\", \\\"true\\\" });\\r\\n     assertEquals(\\\"true\\\", commandLine.getOptionValue(debugOpt));\\r\\n     assertEquals(\\\"true\\\", commandLine.getOptionValue('d'));\\r\\n     assertTrue(commandLine.hasOption('d'));\\r\\n     assertTrue(commandLine.hasOption(debugOpt));\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"tn@apache.org","authorName":"Thomas Neidhart","commitYear":"2013","diff":"\"@@ -1,11 +1,12 @@\\n+@Test\\r\\n public void testCLI13() throws ParseException {\\r\\n     final String debugOpt = \\\"debug\\\";\\r\\n-    Option debug = OptionBuilder.withArgName(debugOpt).withDescription(\\\"turn on debugging\\\").withLongOpt(debugOpt).hasArg().create('d');\\r\\n+    @SuppressWarnings(\\\"static-access\\\") Option debug = OptionBuilder.withArgName(debugOpt).withDescription(\\\"turn on debugging\\\").withLongOpt(debugOpt).hasArg().create('d');\\r\\n     Options options = new Options();\\r\\n     options.addOption(debug);\\r\\n     CommandLine commandLine = new PosixParser().parse(options, new String[] { \\\"-d\\\", \\\"true\\\" });\\r\\n     assertEquals(\\\"true\\\", commandLine.getOptionValue(debugOpt));\\r\\n     assertEquals(\\\"true\\\", commandLine.getOptionValue('d'));\\r\\n     assertTrue(commandLine.hasOption('d'));\\r\\n     assertTrue(commandLine.hasOption(debugOpt));\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"bayard@apache.org","authorName":"Henri Yandell","commitYear":"2007","diff":"\"@@ -0,0 +1,11 @@\\n+public void testCLI13() throws ParseException {\\r\\n+    final String debugOpt = \\\"debug\\\";\\r\\n+    Option debug = OptionBuilder.withArgName(debugOpt).withDescription(\\\"turn on debugging\\\").withLongOpt(debugOpt).hasArg().create('d');\\r\\n+    Options options = new Options();\\r\\n+    options.addOption(debug);\\r\\n+    CommandLine commandLine = new PosixParser().parse(options, new String[] { \\\"-d\\\", \\\"true\\\" });\\r\\n+    assertEquals(\\\"true\\\", commandLine.getOptionValue(debugOpt));\\r\\n+    assertEquals(\\\"true\\\", commandLine.getOptionValue('d'));\\r\\n+    assertTrue(commandLine.hasOption('d'));\\r\\n+    assertTrue(commandLine.hasOption(debugOpt));\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\test\java\org\apache\commons\cli\bug\BugCLI148Test.java	setUp	org.apache.commons.cli.bug.BugCLI148Test.setUp()	38	42	1	[{"authorEmail":"tn@apache.org","authorName":"Thomas Neidhart","commitYear":"2013","diff":"\"@@ -1,6 +1,6 @@\\n-@Override\\r\\n-protected void setUp() throws Exception {\\r\\n+@Before\\r\\n+public void setUp() throws Exception {\\r\\n     options = new Options();\\r\\n     options.addOption(OptionBuilder.hasArg().create('t'));\\r\\n     options.addOption(OptionBuilder.hasArg().create('s'));\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"sebb@apache.org","authorName":"Sebastian Bazley","commitYear":"2013","diff":"\"@@ -1,5 +1,6 @@\\n+@Override\\r\\n protected void setUp() throws Exception {\\r\\n     options = new Options();\\r\\n     options.addOption(OptionBuilder.hasArg().create('t'));\\r\\n     options.addOption(OptionBuilder.hasArg().create('s'));\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2009","diff":"\"@@ -0,0 +1,5 @@\\n+protected void setUp() throws Exception {\\r\\n+    options = new Options();\\r\\n+    options.addOption(OptionBuilder.hasArg().create('t'));\\r\\n+    options.addOption(OptionBuilder.hasArg().create('s'));\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\test\java\org\apache\commons\cli\bug\BugCLI148Test.java	testWorkaround1	org.apache.commons.cli.bug.BugCLI148Test.testWorkaround1()	45	51	1	[{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"@@ -1,7 +1,7 @@\\n @Test\\r\\n public void testWorkaround1() throws Exception {\\r\\n     final CommandLineParser parser = new PosixParser();\\r\\n-    final String[] args = new String[] { \\\"-t-something\\\" };\\r\\n+    final String[] args = { \\\"-t-something\\\" };\\r\\n     final CommandLine commandLine = parser.parse(options, args);\\r\\n     assertEquals(\\\"-something\\\", commandLine.getOptionValue('t'));\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,7 +1,7 @@\\n @Test\\r\\n public void testWorkaround1() throws Exception {\\r\\n-    CommandLineParser parser = new PosixParser();\\r\\n-    String[] args = new String[] { \\\"-t-something\\\" };\\r\\n-    CommandLine commandLine = parser.parse(options, args);\\r\\n+    final CommandLineParser parser = new PosixParser();\\r\\n+    final String[] args = new String[] { \\\"-t-something\\\" };\\r\\n+    final CommandLine commandLine = parser.parse(options, args);\\r\\n     assertEquals(\\\"-something\\\", commandLine.getOptionValue('t'));\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"tn@apache.org","authorName":"Thomas Neidhart","commitYear":"2013","diff":"\"@@ -1,6 +1,7 @@\\n+@Test\\r\\n public void testWorkaround1() throws Exception {\\r\\n     CommandLineParser parser = new PosixParser();\\r\\n     String[] args = new String[] { \\\"-t-something\\\" };\\r\\n     CommandLine commandLine = parser.parse(options, args);\\r\\n     assertEquals(\\\"-something\\\", commandLine.getOptionValue('t'));\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2009","diff":"\"@@ -1,8 +1,6 @@\\n public void testWorkaround1() throws Exception {\\r\\n-    Options options = buildCommandLineOptions();\\r\\n     CommandLineParser parser = new PosixParser();\\r\\n     String[] args = new String[] { \\\"-t-something\\\" };\\r\\n-    CommandLine commandLine;\\r\\n-    commandLine = parser.parse(options, args);\\r\\n+    CommandLine commandLine = parser.parse(options, args);\\r\\n     assertEquals(\\\"-something\\\", commandLine.getOptionValue('t'));\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"bayard@apache.org","authorName":"Henri Yandell","commitYear":"2007","diff":"\"@@ -0,0 +1,8 @@\\n+public void testWorkaround1() throws Exception {\\r\\n+    Options options = buildCommandLineOptions();\\r\\n+    CommandLineParser parser = new PosixParser();\\r\\n+    String[] args = new String[] { \\\"-t-something\\\" };\\r\\n+    CommandLine commandLine;\\r\\n+    commandLine = parser.parse(options, args);\\r\\n+    assertEquals(\\\"-something\\\", commandLine.getOptionValue('t'));\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\test\java\org\apache\commons\cli\bug\BugCLI148Test.java	testWorkaround2	org.apache.commons.cli.bug.BugCLI148Test.testWorkaround2()	54	60	1	[{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"@@ -1,7 +1,7 @@\\n @Test\\r\\n public void testWorkaround2() throws Exception {\\r\\n     final CommandLineParser parser = new PosixParser();\\r\\n-    final String[] args = new String[] { \\\"-t\\\", \\\"\\\\\\\"-something\\\\\\\"\\\" };\\r\\n+    final String[] args = { \\\"-t\\\", \\\"\\\\\\\"-something\\\\\\\"\\\" };\\r\\n     final CommandLine commandLine = parser.parse(options, args);\\r\\n     assertEquals(\\\"-something\\\", commandLine.getOptionValue('t'));\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,7 +1,7 @@\\n @Test\\r\\n public void testWorkaround2() throws Exception {\\r\\n-    CommandLineParser parser = new PosixParser();\\r\\n-    String[] args = new String[] { \\\"-t\\\", \\\"\\\\\\\"-something\\\\\\\"\\\" };\\r\\n-    CommandLine commandLine = parser.parse(options, args);\\r\\n+    final CommandLineParser parser = new PosixParser();\\r\\n+    final String[] args = new String[] { \\\"-t\\\", \\\"\\\\\\\"-something\\\\\\\"\\\" };\\r\\n+    final CommandLine commandLine = parser.parse(options, args);\\r\\n     assertEquals(\\\"-something\\\", commandLine.getOptionValue('t'));\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"tn@apache.org","authorName":"Thomas Neidhart","commitYear":"2013","diff":"\"@@ -1,6 +1,7 @@\\n+@Test\\r\\n public void testWorkaround2() throws Exception {\\r\\n     CommandLineParser parser = new PosixParser();\\r\\n     String[] args = new String[] { \\\"-t\\\", \\\"\\\\\\\"-something\\\\\\\"\\\" };\\r\\n     CommandLine commandLine = parser.parse(options, args);\\r\\n     assertEquals(\\\"-something\\\", commandLine.getOptionValue('t'));\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2009","diff":"\"@@ -1,8 +1,6 @@\\n public void testWorkaround2() throws Exception {\\r\\n-    Options options = buildCommandLineOptions();\\r\\n     CommandLineParser parser = new PosixParser();\\r\\n     String[] args = new String[] { \\\"-t\\\", \\\"\\\\\\\"-something\\\\\\\"\\\" };\\r\\n-    CommandLine commandLine;\\r\\n-    commandLine = parser.parse(options, args);\\r\\n+    CommandLine commandLine = parser.parse(options, args);\\r\\n     assertEquals(\\\"-something\\\", commandLine.getOptionValue('t'));\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"bayard@apache.org","authorName":"Henri Yandell","commitYear":"2007","diff":"\"@@ -0,0 +1,8 @@\\n+public void testWorkaround2() throws Exception {\\r\\n+    Options options = buildCommandLineOptions();\\r\\n+    CommandLineParser parser = new PosixParser();\\r\\n+    String[] args = new String[] { \\\"-t\\\", \\\"\\\\\\\"-something\\\\\\\"\\\" };\\r\\n+    CommandLine commandLine;\\r\\n+    commandLine = parser.parse(options, args);\\r\\n+    assertEquals(\\\"-something\\\", commandLine.getOptionValue('t'));\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\test\java\org\apache\commons\cli\bug\BugCLI162Test.java	setUp	org.apache.commons.cli.bug.BugCLI162Test.setUp()	112	115	1	[{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"@@ -1,5 +1,5 @@\\n @Before\\r\\n-public void setUp() throws Exception {\\r\\n+public void setUp() {\\r\\n     formatter = new HelpFormatter();\\r\\n     sw = new StringWriter();\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"britter@apache.org","authorName":"Benedikt Ritter","commitYear":"2015","diff":"\"@@ -0,0 +1,5 @@\\n+@Before\\r\\n+public void setUp() throws Exception {\\r\\n+    formatter = new HelpFormatter();\\r\\n+    sw = new StringWriter();\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\test\java\org\apache\commons\cli\bug\BugCLI162Test.java	testInfiniteLoop	org.apache.commons.cli.bug.BugCLI162Test.testInfiniteLoop()	118	134	1	[{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"\""},{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,8 +1,8 @@\\n @Test\\r\\n public void testInfiniteLoop() {\\r\\n-    Options options = new Options();\\r\\n+    final Options options = new Options();\\r\\n     options.addOption(\\\"h\\\", \\\"help\\\", false, \\\"This is a looooong description\\\");\\r\\n     formatter.printHelp(new PrintWriter(sw), 20, \\\"app\\\", null, options, HelpFormatter.DEFAULT_LEFT_PAD, HelpFormatter.DEFAULT_DESC_PAD, null);\\r\\n-    String expected = \\\"usage: app\\\" + CR + \\\" -h,--help   This is\\\" + CR + \\\"             a\\\" + CR + \\\"             looooon\\\" + CR + \\\"             g\\\" + CR + \\\"             descrip\\\" + CR + \\\"             tion\\\" + CR;\\r\\n+    final String expected = \\\"usage: app\\\" + CR + \\\" -h,--help   This is\\\" + CR + \\\"             a\\\" + CR + \\\"             looooon\\\" + CR + \\\"             g\\\" + CR + \\\"             descrip\\\" + CR + \\\"             tion\\\" + CR;\\r\\n     assertEquals(expected, sw.toString());\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"britter@apache.org","authorName":"Benedikt Ritter","commitYear":"2015","diff":"\"@@ -1,8 +1,8 @@\\n @Test\\r\\n public void testInfiniteLoop() {\\r\\n     Options options = new Options();\\r\\n     options.addOption(\\\"h\\\", \\\"help\\\", false, \\\"This is a looooong description\\\");\\r\\n-    HelpFormatter formatter = new HelpFormatter();\\r\\n-    formatter.setWidth(20);\\r\\n-    formatter.printHelp(\\\"app\\\", options);\\r\\n+    formatter.printHelp(new PrintWriter(sw), 20, \\\"app\\\", null, options, HelpFormatter.DEFAULT_LEFT_PAD, HelpFormatter.DEFAULT_DESC_PAD, null);\\r\\n+    String expected = \\\"usage: app\\\" + CR + \\\" -h,--help   This is\\\" + CR + \\\"             a\\\" + CR + \\\"             looooon\\\" + CR + \\\"             g\\\" + CR + \\\"             descrip\\\" + CR + \\\"             tion\\\" + CR;\\r\\n+    assertEquals(expected, sw.toString());\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"tn@apache.org","authorName":"Thomas Neidhart","commitYear":"2013","diff":"\"@@ -1,7 +1,8 @@\\n+@Test\\r\\n public void testInfiniteLoop() {\\r\\n     Options options = new Options();\\r\\n     options.addOption(\\\"h\\\", \\\"help\\\", false, \\\"This is a looooong description\\\");\\r\\n     HelpFormatter formatter = new HelpFormatter();\\r\\n     formatter.setWidth(20);\\r\\n     formatter.printHelp(\\\"app\\\", options);\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"bayard@apache.org","authorName":"Henri Yandell","commitYear":"2009","diff":"\"@@ -1,5 +1,7 @@\\n public void testInfiniteLoop() {\\r\\n+    Options options = new Options();\\r\\n+    options.addOption(\\\"h\\\", \\\"help\\\", false, \\\"This is a looooong description\\\");\\r\\n     HelpFormatter formatter = new HelpFormatter();\\r\\n     formatter.setWidth(20);\\r\\n     formatter.printHelp(\\\"app\\\", options);\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"bayard@apache.org","authorName":"Henri Yandell","commitYear":"2009","diff":"\"@@ -1,9 +1,5 @@\\n public void testInfiniteLoop() {\\r\\n     HelpFormatter formatter = new HelpFormatter();\\r\\n     formatter.setWidth(20);\\r\\n-    try {\\r\\n-        formatter.printHelp(\\\"app\\\", options);\\r\\n-    } catch (RuntimeException re) {\\r\\n-        assertTrue(re.getMessage().startsWith(\\\"Text too long for line - throwing exception to avoid infinite loop [CLI-162]: \\\"));\\r\\n-    }\\r\\n+    formatter.printHelp(\\\"app\\\", options);\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"bayard@apache.org","authorName":"Henri Yandell","commitYear":"2009","diff":"\"@@ -0,0 +1,9 @@\\n+public void testInfiniteLoop() {\\r\\n+    HelpFormatter formatter = new HelpFormatter();\\r\\n+    formatter.setWidth(20);\\r\\n+    try {\\r\\n+        formatter.printHelp(\\\"app\\\", options);\\r\\n+    } catch (RuntimeException re) {\\r\\n+        assertTrue(re.getMessage().startsWith(\\\"Text too long for line - throwing exception to avoid infinite loop [CLI-162]: \\\"));\\r\\n+    }\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\test\java\org\apache\commons\cli\bug\BugCLI162Test.java	testLongLineChunking	org.apache.commons.cli.bug.BugCLI162Test.testLongLineChunking()	137	169	1	[{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"\""},{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2019","diff":"\"\""},{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,8 +1,8 @@\\n @Test\\r\\n public void testLongLineChunking() {\\r\\n-    Options options = new Options();\\r\\n+    final Options options = new Options();\\r\\n     options.addOption(\\\"x\\\", \\\"extralongarg\\\", false, \\\"This description has ReallyLongValuesThatAreLongerThanTheWidthOfTheColumns \\\" + \\\"and also other ReallyLongValuesThatAreHugerAndBiggerThanTheWidthOfTheColumnsBob, \\\" + \\\"yes. \\\");\\r\\n     formatter.printHelp(new PrintWriter(sw), 35, this.getClass().getName(), \\\"Header\\\", options, 0, 5, \\\"Footer\\\");\\r\\n-    String expected = \\\"usage:\\\" + CR + \\\"       org.apache.commons.cli.bug.B\\\" + CR + \\\"       ugCLI162Test\\\" + CR + \\\"Header\\\" + CR + \\\"-x,--extralongarg     This\\\" + CR + \\\"                      description\\\" + CR + \\\"                      has\\\" + CR + \\\"                      ReallyLongVal\\\" + CR + \\\"                      uesThatAreLon\\\" + CR + \\\"                      gerThanTheWid\\\" + CR + \\\"                      thOfTheColumn\\\" + CR + \\\"                      s and also\\\" + CR + \\\"                      other\\\" + CR + \\\"                      ReallyLongVal\\\" + CR + \\\"                      uesThatAreHug\\\" + CR + \\\"                      erAndBiggerTh\\\" + CR + \\\"                      anTheWidthOfT\\\" + CR + \\\"                      heColumnsBob,\\\" + CR + \\\"                      yes.\\\" + CR + \\\"Footer\\\" + CR;\\r\\n+    final String expected = \\\"usage:\\\" + CR + \\\"       org.apache.commons.cli.bug.B\\\" + CR + \\\"       ugCLI162Test\\\" + CR + \\\"Header\\\" + CR + \\\"-x,--extralongarg     This\\\" + CR + \\\"                      description\\\" + CR + \\\"                      has\\\" + CR + \\\"                      ReallyLongVal\\\" + CR + \\\"                      uesThatAreLon\\\" + CR + \\\"                      gerThanTheWid\\\" + CR + \\\"                      thOfTheColumn\\\" + CR + \\\"                      s and also\\\" + CR + \\\"                      other\\\" + CR + \\\"                      ReallyLongVal\\\" + CR + \\\"                      uesThatAreHug\\\" + CR + \\\"                      erAndBiggerTh\\\" + CR + \\\"                      anTheWidthOfT\\\" + CR + \\\"                      heColumnsBob,\\\" + CR + \\\"                      yes.\\\" + CR + \\\"Footer\\\" + CR;\\r\\n     assertEquals(\\\"Long arguments did not split as expected\\\", expected, sw.toString());\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"britter@apache.org","authorName":"Benedikt Ritter","commitYear":"2015","diff":"\"@@ -1,10 +1,8 @@\\n @Test\\r\\n public void testLongLineChunking() {\\r\\n     Options options = new Options();\\r\\n     options.addOption(\\\"x\\\", \\\"extralongarg\\\", false, \\\"This description has ReallyLongValuesThatAreLongerThanTheWidthOfTheColumns \\\" + \\\"and also other ReallyLongValuesThatAreHugerAndBiggerThanTheWidthOfTheColumnsBob, \\\" + \\\"yes. \\\");\\r\\n-    HelpFormatter formatter = new HelpFormatter();\\r\\n-    StringWriter sw = new StringWriter();\\r\\n     formatter.printHelp(new PrintWriter(sw), 35, this.getClass().getName(), \\\"Header\\\", options, 0, 5, \\\"Footer\\\");\\r\\n     String expected = \\\"usage:\\\" + CR + \\\"       org.apache.commons.cli.bug.B\\\" + CR + \\\"       ugCLI162Test\\\" + CR + \\\"Header\\\" + CR + \\\"-x,--extralongarg     This\\\" + CR + \\\"                      description\\\" + CR + \\\"                      has\\\" + CR + \\\"                      ReallyLongVal\\\" + CR + \\\"                      uesThatAreLon\\\" + CR + \\\"                      gerThanTheWid\\\" + CR + \\\"                      thOfTheColumn\\\" + CR + \\\"                      s and also\\\" + CR + \\\"                      other\\\" + CR + \\\"                      ReallyLongVal\\\" + CR + \\\"                      uesThatAreHug\\\" + CR + \\\"                      erAndBiggerTh\\\" + CR + \\\"                      anTheWidthOfT\\\" + CR + \\\"                      heColumnsBob,\\\" + CR + \\\"                      yes.\\\" + CR + \\\"Footer\\\" + CR;\\r\\n     assertEquals(\\\"Long arguments did not split as expected\\\", expected, sw.toString());\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"tn@apache.org","authorName":"Thomas Neidhart","commitYear":"2013","diff":"\"@@ -1,9 +1,10 @@\\n+@Test\\r\\n public void testLongLineChunking() {\\r\\n     Options options = new Options();\\r\\n     options.addOption(\\\"x\\\", \\\"extralongarg\\\", false, \\\"This description has ReallyLongValuesThatAreLongerThanTheWidthOfTheColumns \\\" + \\\"and also other ReallyLongValuesThatAreHugerAndBiggerThanTheWidthOfTheColumnsBob, \\\" + \\\"yes. \\\");\\r\\n     HelpFormatter formatter = new HelpFormatter();\\r\\n     StringWriter sw = new StringWriter();\\r\\n     formatter.printHelp(new PrintWriter(sw), 35, this.getClass().getName(), \\\"Header\\\", options, 0, 5, \\\"Footer\\\");\\r\\n     String expected = \\\"usage:\\\" + CR + \\\"       org.apache.commons.cli.bug.B\\\" + CR + \\\"       ugCLI162Test\\\" + CR + \\\"Header\\\" + CR + \\\"-x,--extralongarg     This\\\" + CR + \\\"                      description\\\" + CR + \\\"                      has\\\" + CR + \\\"                      ReallyLongVal\\\" + CR + \\\"                      uesThatAreLon\\\" + CR + \\\"                      gerThanTheWid\\\" + CR + \\\"                      thOfTheColumn\\\" + CR + \\\"                      s and also\\\" + CR + \\\"                      other\\\" + CR + \\\"                      ReallyLongVal\\\" + CR + \\\"                      uesThatAreHug\\\" + CR + \\\"                      erAndBiggerTh\\\" + CR + \\\"                      anTheWidthOfT\\\" + CR + \\\"                      heColumnsBob,\\\" + CR + \\\"                      yes.\\\" + CR + \\\"Footer\\\" + CR;\\r\\n     assertEquals(\\\"Long arguments did not split as expected\\\", expected, sw.toString());\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"sebb@apache.org","authorName":"Sebastian Bazley","commitYear":"2013","diff":"\"@@ -1,9 +1,9 @@\\n-public void testLongLineChunking() throws ParseException, IOException {\\r\\n+public void testLongLineChunking() {\\r\\n     Options options = new Options();\\r\\n     options.addOption(\\\"x\\\", \\\"extralongarg\\\", false, \\\"This description has ReallyLongValuesThatAreLongerThanTheWidthOfTheColumns \\\" + \\\"and also other ReallyLongValuesThatAreHugerAndBiggerThanTheWidthOfTheColumnsBob, \\\" + \\\"yes. \\\");\\r\\n     HelpFormatter formatter = new HelpFormatter();\\r\\n     StringWriter sw = new StringWriter();\\r\\n     formatter.printHelp(new PrintWriter(sw), 35, this.getClass().getName(), \\\"Header\\\", options, 0, 5, \\\"Footer\\\");\\r\\n     String expected = \\\"usage:\\\" + CR + \\\"       org.apache.commons.cli.bug.B\\\" + CR + \\\"       ugCLI162Test\\\" + CR + \\\"Header\\\" + CR + \\\"-x,--extralongarg     This\\\" + CR + \\\"                      description\\\" + CR + \\\"                      has\\\" + CR + \\\"                      ReallyLongVal\\\" + CR + \\\"                      uesThatAreLon\\\" + CR + \\\"                      gerThanTheWid\\\" + CR + \\\"                      thOfTheColumn\\\" + CR + \\\"                      s and also\\\" + CR + \\\"                      other\\\" + CR + \\\"                      ReallyLongVal\\\" + CR + \\\"                      uesThatAreHug\\\" + CR + \\\"                      erAndBiggerTh\\\" + CR + \\\"                      anTheWidthOfT\\\" + CR + \\\"                      heColumnsBob,\\\" + CR + \\\"                      yes.\\\" + CR + \\\"Footer\\\" + CR;\\r\\n     assertEquals(\\\"Long arguments did not split as expected\\\", expected, sw.toString());\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"bayard@apache.org","authorName":"Henri Yandell","commitYear":"2009","diff":"\"@@ -1,9 +1,9 @@\\n public void testLongLineChunking() throws ParseException, IOException {\\r\\n     Options options = new Options();\\r\\n     options.addOption(\\\"x\\\", \\\"extralongarg\\\", false, \\\"This description has ReallyLongValuesThatAreLongerThanTheWidthOfTheColumns \\\" + \\\"and also other ReallyLongValuesThatAreHugerAndBiggerThanTheWidthOfTheColumnsBob, \\\" + \\\"yes. \\\");\\r\\n     HelpFormatter formatter = new HelpFormatter();\\r\\n     StringWriter sw = new StringWriter();\\r\\n     formatter.printHelp(new PrintWriter(sw), 35, this.getClass().getName(), \\\"Header\\\", options, 0, 5, \\\"Footer\\\");\\r\\n-    String expected = \\\"usage:\\\\n\\\" + \\\"       org.apache.commons.cli.bug.B\\\\n\\\" + \\\"       ugCLI162Test\\\\n\\\" + \\\"Header\\\\n\\\" + \\\"-x,--extralongarg     This\\\\n\\\" + \\\"                      description\\\\n\\\" + \\\"                      has\\\\n\\\" + \\\"                      ReallyLongVal\\\\n\\\" + \\\"                      uesThatAreLon\\\\n\\\" + \\\"                      gerThanTheWid\\\\n\\\" + \\\"                      thOfTheColumn\\\\n\\\" + \\\"                      s and also\\\\n\\\" + \\\"                      other\\\\n\\\" + \\\"                      ReallyLongVal\\\\n\\\" + \\\"                      uesThatAreHug\\\\n\\\" + \\\"                      erAndBiggerTh\\\\n\\\" + \\\"                      anTheWidthOfT\\\\n\\\" + \\\"                      heColumnsBob,\\\\n\\\" + \\\"                      yes.\\\\n\\\" + \\\"Footer\\\\n\\\";\\r\\n+    String expected = \\\"usage:\\\" + CR + \\\"       org.apache.commons.cli.bug.B\\\" + CR + \\\"       ugCLI162Test\\\" + CR + \\\"Header\\\" + CR + \\\"-x,--extralongarg     This\\\" + CR + \\\"                      description\\\" + CR + \\\"                      has\\\" + CR + \\\"                      ReallyLongVal\\\" + CR + \\\"                      uesThatAreLon\\\" + CR + \\\"                      gerThanTheWid\\\" + CR + \\\"                      thOfTheColumn\\\" + CR + \\\"                      s and also\\\" + CR + \\\"                      other\\\" + CR + \\\"                      ReallyLongVal\\\" + CR + \\\"                      uesThatAreHug\\\" + CR + \\\"                      erAndBiggerTh\\\" + CR + \\\"                      anTheWidthOfT\\\" + CR + \\\"                      heColumnsBob,\\\" + CR + \\\"                      yes.\\\" + CR + \\\"Footer\\\" + CR;\\r\\n     assertEquals(\\\"Long arguments did not split as expected\\\", expected, sw.toString());\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"bayard@apache.org","authorName":"Henri Yandell","commitYear":"2009","diff":"\"@@ -1,14 +1,9 @@\\n public void testLongLineChunking() throws ParseException, IOException {\\r\\n     Options options = new Options();\\r\\n     options.addOption(\\\"x\\\", \\\"extralongarg\\\", false, \\\"This description has ReallyLongValuesThatAreLongerThanTheWidthOfTheColumns \\\" + \\\"and also other ReallyLongValuesThatAreHugerAndBiggerThanTheWidthOfTheColumnsBob, \\\" + \\\"yes. \\\");\\r\\n     HelpFormatter formatter = new HelpFormatter();\\r\\n     StringWriter sw = new StringWriter();\\r\\n     formatter.printHelp(new PrintWriter(sw), 35, this.getClass().getName(), \\\"Header\\\", options, 0, 5, \\\"Footer\\\");\\r\\n     String expected = \\\"usage:\\\\n\\\" + \\\"       org.apache.commons.cli.bug.B\\\\n\\\" + \\\"       ugCLI162Test\\\\n\\\" + \\\"Header\\\\n\\\" + \\\"-x,--extralongarg     This\\\\n\\\" + \\\"                      description\\\\n\\\" + \\\"                      has\\\\n\\\" + \\\"                      ReallyLongVal\\\\n\\\" + \\\"                      uesThatAreLon\\\\n\\\" + \\\"                      gerThanTheWid\\\\n\\\" + \\\"                      thOfTheColumn\\\\n\\\" + \\\"                      s and also\\\\n\\\" + \\\"                      other\\\\n\\\" + \\\"                      ReallyLongVal\\\\n\\\" + \\\"                      uesThatAreHug\\\\n\\\" + \\\"                      erAndBiggerTh\\\\n\\\" + \\\"                      anTheWidthOfT\\\\n\\\" + \\\"                      heColumnsBob,\\\\n\\\" + \\\"                      yes.\\\\n\\\" + \\\"Footer\\\\n\\\";\\r\\n     assertEquals(\\\"Long arguments did not split as expected\\\", expected, sw.toString());\\r\\n-    try {\\r\\n-        formatter.printHelp(new PrintWriter(sw), 22, this.getClass().getName(), \\\"Header\\\", options, 0, 5, \\\"Footer\\\");\\r\\n-        fail(\\\"IllegalStateException expected\\\");\\r\\n-    } catch (IllegalStateException ise) {\\r\\n-    }\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"bayard@apache.org","authorName":"Henri Yandell","commitYear":"2009","diff":"\"@@ -1,9 +1,14 @@\\n public void testLongLineChunking() throws ParseException, IOException {\\r\\n     Options options = new Options();\\r\\n     options.addOption(\\\"x\\\", \\\"extralongarg\\\", false, \\\"This description has ReallyLongValuesThatAreLongerThanTheWidthOfTheColumns \\\" + \\\"and also other ReallyLongValuesThatAreHugerAndBiggerThanTheWidthOfTheColumnsBob, \\\" + \\\"yes. \\\");\\r\\n     HelpFormatter formatter = new HelpFormatter();\\r\\n     StringWriter sw = new StringWriter();\\r\\n     formatter.printHelp(new PrintWriter(sw), 35, this.getClass().getName(), \\\"Header\\\", options, 0, 5, \\\"Footer\\\");\\r\\n     String expected = \\\"usage:\\\\n\\\" + \\\"       org.apache.commons.cli.bug.B\\\\n\\\" + \\\"       ugCLI162Test\\\\n\\\" + \\\"Header\\\\n\\\" + \\\"-x,--extralongarg     This\\\\n\\\" + \\\"                      description\\\\n\\\" + \\\"                      has\\\\n\\\" + \\\"                      ReallyLongVal\\\\n\\\" + \\\"                      uesThatAreLon\\\\n\\\" + \\\"                      gerThanTheWid\\\\n\\\" + \\\"                      thOfTheColumn\\\\n\\\" + \\\"                      s and also\\\\n\\\" + \\\"                      other\\\\n\\\" + \\\"                      ReallyLongVal\\\\n\\\" + \\\"                      uesThatAreHug\\\\n\\\" + \\\"                      erAndBiggerTh\\\\n\\\" + \\\"                      anTheWidthOfT\\\\n\\\" + \\\"                      heColumnsBob,\\\\n\\\" + \\\"                      yes.\\\\n\\\" + \\\"Footer\\\\n\\\";\\r\\n     assertEquals(\\\"Long arguments did not split as expected\\\", expected, sw.toString());\\r\\n+    try {\\r\\n+        formatter.printHelp(new PrintWriter(sw), 22, this.getClass().getName(), \\\"Header\\\", options, 0, 5, \\\"Footer\\\");\\r\\n+        fail(\\\"IllegalStateException expected\\\");\\r\\n+    } catch (IllegalStateException ise) {\\r\\n+    }\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"bayard@apache.org","authorName":"Henri Yandell","commitYear":"2009","diff":"\"@@ -0,0 +1,9 @@\\n+public void testLongLineChunking() throws ParseException, IOException {\\r\\n+    Options options = new Options();\\r\\n+    options.addOption(\\\"x\\\", \\\"extralongarg\\\", false, \\\"This description has ReallyLongValuesThatAreLongerThanTheWidthOfTheColumns \\\" + \\\"and also other ReallyLongValuesThatAreHugerAndBiggerThanTheWidthOfTheColumnsBob, \\\" + \\\"yes. \\\");\\r\\n+    HelpFormatter formatter = new HelpFormatter();\\r\\n+    StringWriter sw = new StringWriter();\\r\\n+    formatter.printHelp(new PrintWriter(sw), 35, this.getClass().getName(), \\\"Header\\\", options, 0, 5, \\\"Footer\\\");\\r\\n+    String expected = \\\"usage:\\\\n\\\" + \\\"       org.apache.commons.cli.bug.B\\\\n\\\" + \\\"       ugCLI162Test\\\\n\\\" + \\\"Header\\\\n\\\" + \\\"-x,--extralongarg     This\\\\n\\\" + \\\"                      description\\\\n\\\" + \\\"                      has\\\\n\\\" + \\\"                      ReallyLongVal\\\\n\\\" + \\\"                      uesThatAreLon\\\\n\\\" + \\\"                      gerThanTheWid\\\\n\\\" + \\\"                      thOfTheColumn\\\\n\\\" + \\\"                      s and also\\\\n\\\" + \\\"                      other\\\\n\\\" + \\\"                      ReallyLongVal\\\\n\\\" + \\\"                      uesThatAreHug\\\\n\\\" + \\\"                      erAndBiggerTh\\\\n\\\" + \\\"                      anTheWidthOfT\\\\n\\\" + \\\"                      heColumnsBob,\\\\n\\\" + \\\"                      yes.\\\\n\\\" + \\\"Footer\\\\n\\\";\\r\\n+    assertEquals(\\\"Long arguments did not split as expected\\\", expected, sw.toString());\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\test\java\org\apache\commons\cli\bug\BugCLI162Test.java	testLongLineChunkingIndentIgnored	org.apache.commons.cli.bug.BugCLI162Test.testLongLineChunkingIndentIgnored()	172	188	1	[{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"\""},{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,8 +1,8 @@\\n @Test\\r\\n public void testLongLineChunkingIndentIgnored() {\\r\\n-    Options options = new Options();\\r\\n+    final Options options = new Options();\\r\\n     options.addOption(\\\"x\\\", \\\"extralongarg\\\", false, \\\"This description is Long.\\\");\\r\\n     formatter.printHelp(new PrintWriter(sw), 22, this.getClass().getName(), \\\"Header\\\", options, 0, 5, \\\"Footer\\\");\\r\\n-    String expected = \\\"usage:\\\" + CR + \\\"       org.apache.comm\\\" + CR + \\\"       ons.cli.bug.Bug\\\" + CR + \\\"       CLI162Test\\\" + CR + \\\"Header\\\" + CR + \\\"-x,--extralongarg\\\" + CR + \\\" This description is\\\" + CR + \\\" Long.\\\" + CR + \\\"Footer\\\" + CR;\\r\\n+    final String expected = \\\"usage:\\\" + CR + \\\"       org.apache.comm\\\" + CR + \\\"       ons.cli.bug.Bug\\\" + CR + \\\"       CLI162Test\\\" + CR + \\\"Header\\\" + CR + \\\"-x,--extralongarg\\\" + CR + \\\" This description is\\\" + CR + \\\" Long.\\\" + CR + \\\"Footer\\\" + CR;\\r\\n     assertEquals(\\\"Long arguments did not split as expected\\\", expected, sw.toString());\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"britter@apache.org","authorName":"Benedikt Ritter","commitYear":"2015","diff":"\"@@ -1,11 +1,8 @@\\n @Test\\r\\n public void testLongLineChunkingIndentIgnored() {\\r\\n     Options options = new Options();\\r\\n     options.addOption(\\\"x\\\", \\\"extralongarg\\\", false, \\\"This description is Long.\\\");\\r\\n-    HelpFormatter formatter = new HelpFormatter();\\r\\n-    StringWriter sw = new StringWriter();\\r\\n     formatter.printHelp(new PrintWriter(sw), 22, this.getClass().getName(), \\\"Header\\\", options, 0, 5, \\\"Footer\\\");\\r\\n-    System.err.println(sw.toString());\\r\\n     String expected = \\\"usage:\\\" + CR + \\\"       org.apache.comm\\\" + CR + \\\"       ons.cli.bug.Bug\\\" + CR + \\\"       CLI162Test\\\" + CR + \\\"Header\\\" + CR + \\\"-x,--extralongarg\\\" + CR + \\\" This description is\\\" + CR + \\\" Long.\\\" + CR + \\\"Footer\\\" + CR;\\r\\n     assertEquals(\\\"Long arguments did not split as expected\\\", expected, sw.toString());\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"tn@apache.org","authorName":"Thomas Neidhart","commitYear":"2013","diff":"\"@@ -1,10 +1,11 @@\\n+@Test\\r\\n public void testLongLineChunkingIndentIgnored() {\\r\\n     Options options = new Options();\\r\\n     options.addOption(\\\"x\\\", \\\"extralongarg\\\", false, \\\"This description is Long.\\\");\\r\\n     HelpFormatter formatter = new HelpFormatter();\\r\\n     StringWriter sw = new StringWriter();\\r\\n     formatter.printHelp(new PrintWriter(sw), 22, this.getClass().getName(), \\\"Header\\\", options, 0, 5, \\\"Footer\\\");\\r\\n     System.err.println(sw.toString());\\r\\n     String expected = \\\"usage:\\\" + CR + \\\"       org.apache.comm\\\" + CR + \\\"       ons.cli.bug.Bug\\\" + CR + \\\"       CLI162Test\\\" + CR + \\\"Header\\\" + CR + \\\"-x,--extralongarg\\\" + CR + \\\" This description is\\\" + CR + \\\" Long.\\\" + CR + \\\"Footer\\\" + CR;\\r\\n     assertEquals(\\\"Long arguments did not split as expected\\\", expected, sw.toString());\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"sebb@apache.org","authorName":"Sebastian Bazley","commitYear":"2013","diff":"\"@@ -1,10 +1,10 @@\\n-public void testLongLineChunkingIndentIgnored() throws ParseException, IOException {\\r\\n+public void testLongLineChunkingIndentIgnored() {\\r\\n     Options options = new Options();\\r\\n     options.addOption(\\\"x\\\", \\\"extralongarg\\\", false, \\\"This description is Long.\\\");\\r\\n     HelpFormatter formatter = new HelpFormatter();\\r\\n     StringWriter sw = new StringWriter();\\r\\n     formatter.printHelp(new PrintWriter(sw), 22, this.getClass().getName(), \\\"Header\\\", options, 0, 5, \\\"Footer\\\");\\r\\n     System.err.println(sw.toString());\\r\\n     String expected = \\\"usage:\\\" + CR + \\\"       org.apache.comm\\\" + CR + \\\"       ons.cli.bug.Bug\\\" + CR + \\\"       CLI162Test\\\" + CR + \\\"Header\\\" + CR + \\\"-x,--extralongarg\\\" + CR + \\\" This description is\\\" + CR + \\\" Long.\\\" + CR + \\\"Footer\\\" + CR;\\r\\n     assertEquals(\\\"Long arguments did not split as expected\\\", expected, sw.toString());\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"bayard@apache.org","authorName":"Henri Yandell","commitYear":"2009","diff":"\"@@ -1,10 +1,10 @@\\n public void testLongLineChunkingIndentIgnored() throws ParseException, IOException {\\r\\n     Options options = new Options();\\r\\n     options.addOption(\\\"x\\\", \\\"extralongarg\\\", false, \\\"This description is Long.\\\");\\r\\n     HelpFormatter formatter = new HelpFormatter();\\r\\n     StringWriter sw = new StringWriter();\\r\\n     formatter.printHelp(new PrintWriter(sw), 22, this.getClass().getName(), \\\"Header\\\", options, 0, 5, \\\"Footer\\\");\\r\\n     System.err.println(sw.toString());\\r\\n-    String expected = \\\"usage:\\\\n\\\" + \\\"       org.apache.comm\\\\n\\\" + \\\"       ons.cli.bug.Bug\\\\n\\\" + \\\"       CLI162Test\\\\n\\\" + \\\"Header\\\\n\\\" + \\\"-x,--extralongarg\\\\n\\\" + \\\" This description is\\\\n\\\" + \\\" Long.\\\\n\\\" + \\\"Footer\\\\n\\\";\\r\\n+    String expected = \\\"usage:\\\" + CR + \\\"       org.apache.comm\\\" + CR + \\\"       ons.cli.bug.Bug\\\" + CR + \\\"       CLI162Test\\\" + CR + \\\"Header\\\" + CR + \\\"-x,--extralongarg\\\" + CR + \\\" This description is\\\" + CR + \\\" Long.\\\" + CR + \\\"Footer\\\" + CR;\\r\\n     assertEquals(\\\"Long arguments did not split as expected\\\", expected, sw.toString());\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"bayard@apache.org","authorName":"Henri Yandell","commitYear":"2009","diff":"\"@@ -1,9 +1,10 @@\\n public void testLongLineChunkingIndentIgnored() throws ParseException, IOException {\\r\\n     Options options = new Options();\\r\\n     options.addOption(\\\"x\\\", \\\"extralongarg\\\", false, \\\"This description is Long.\\\");\\r\\n     HelpFormatter formatter = new HelpFormatter();\\r\\n     StringWriter sw = new StringWriter();\\r\\n     formatter.printHelp(new PrintWriter(sw), 22, this.getClass().getName(), \\\"Header\\\", options, 0, 5, \\\"Footer\\\");\\r\\n-    String expected = \\\"usage:\\\\n\\\" + \\\"       org.apache.comm\\\\n\\\" + \\\"       ons.cli.bug.Bug\\\\n\\\" + \\\"       CLI162Test\\\\n\\\" + \\\"Header\\\\n\\\" + \\\"-x,--extralongarg\\\\n\\\" + \\\"                     T\\\\n\\\" + \\\"                     h\\\\n\\\" + \\\"                     i\\\\n\\\" + \\\"                     s\\\\n\\\" + \\\"                     d\\\\n\\\" + \\\"                     e\\\\n\\\" + \\\"                     s\\\\n\\\" + \\\"                     c\\\\n\\\" + \\\"                     r\\\\n\\\" + \\\"                     i\\\\n\\\" + \\\"                     p\\\\n\\\" + \\\"                     t\\\\n\\\" + \\\"                     i\\\\n\\\" + \\\"                     o\\\\n\\\" + \\\"                     n\\\\n\\\" + \\\"                     i\\\\n\\\" + \\\"                     s\\\\n\\\" + \\\"                     L\\\\n\\\" + \\\"                     o\\\\n\\\" + \\\"                     n\\\\n\\\" + \\\"                     g\\\\n\\\" + \\\"                     .\\\\n\\\" + \\\"Footer\\\\n\\\";\\r\\n+    System.err.println(sw.toString());\\r\\n+    String expected = \\\"usage:\\\\n\\\" + \\\"       org.apache.comm\\\\n\\\" + \\\"       ons.cli.bug.Bug\\\\n\\\" + \\\"       CLI162Test\\\\n\\\" + \\\"Header\\\\n\\\" + \\\"-x,--extralongarg\\\\n\\\" + \\\" This description is\\\\n\\\" + \\\" Long.\\\\n\\\" + \\\"Footer\\\\n\\\";\\r\\n     assertEquals(\\\"Long arguments did not split as expected\\\", expected, sw.toString());\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"bayard@apache.org","authorName":"Henri Yandell","commitYear":"2009","diff":"\"@@ -0,0 +1,9 @@\\n+public void testLongLineChunkingIndentIgnored() throws ParseException, IOException {\\r\\n+    Options options = new Options();\\r\\n+    options.addOption(\\\"x\\\", \\\"extralongarg\\\", false, \\\"This description is Long.\\\");\\r\\n+    HelpFormatter formatter = new HelpFormatter();\\r\\n+    StringWriter sw = new StringWriter();\\r\\n+    formatter.printHelp(new PrintWriter(sw), 22, this.getClass().getName(), \\\"Header\\\", options, 0, 5, \\\"Footer\\\");\\r\\n+    String expected = \\\"usage:\\\\n\\\" + \\\"       org.apache.comm\\\\n\\\" + \\\"       ons.cli.bug.Bug\\\\n\\\" + \\\"       CLI162Test\\\\n\\\" + \\\"Header\\\\n\\\" + \\\"-x,--extralongarg\\\\n\\\" + \\\"                     T\\\\n\\\" + \\\"                     h\\\\n\\\" + \\\"                     i\\\\n\\\" + \\\"                     s\\\\n\\\" + \\\"                     d\\\\n\\\" + \\\"                     e\\\\n\\\" + \\\"                     s\\\\n\\\" + \\\"                     c\\\\n\\\" + \\\"                     r\\\\n\\\" + \\\"                     i\\\\n\\\" + \\\"                     p\\\\n\\\" + \\\"                     t\\\\n\\\" + \\\"                     i\\\\n\\\" + \\\"                     o\\\\n\\\" + \\\"                     n\\\\n\\\" + \\\"                     i\\\\n\\\" + \\\"                     s\\\\n\\\" + \\\"                     L\\\\n\\\" + \\\"                     o\\\\n\\\" + \\\"                     n\\\\n\\\" + \\\"                     g\\\\n\\\" + \\\"                     .\\\\n\\\" + \\\"Footer\\\\n\\\";\\r\\n+    assertEquals(\\\"Long arguments did not split as expected\\\", expected, sw.toString());\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\test\java\org\apache\commons\cli\bug\BugCLI162Test.java	testPrintHelpLongLines	org.apache.commons.cli.bug.BugCLI162Test.testPrintHelpLongLines()	191	382	1	[{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"@@ -1,85 +1,49 @@\\n @Test\\r\\n public void testPrintHelpLongLines() {\\r\\n-    final String OPT = \\\"-\\\";\\r\\n-    final String OPT_COLUMN_NAMES = \\\"l\\\";\\r\\n-    final String OPT_CONNECTION = \\\"c\\\";\\r\\n-    final String OPT_DESCRIPTION = \\\"e\\\";\\r\\n-    final String OPT_DRIVER = \\\"d\\\";\\r\\n-    final String OPT_DRIVER_INFO = \\\"n\\\";\\r\\n-    final String OPT_FILE_BINDING = \\\"b\\\";\\r\\n-    final String OPT_FILE_JDBC = \\\"j\\\";\\r\\n-    final String OPT_FILE_SFMD = \\\"f\\\";\\r\\n-    final String OPT_HELP = \\\"h\\\";\\r\\n-    final String OPT_HELP_ = \\\"help\\\";\\r\\n-    final String OPT_INTERACTIVE = \\\"i\\\";\\r\\n-    final String OPT_JDBC_TO_SFMD = \\\"2\\\";\\r\\n-    final String OPT_JDBC_TO_SFMD_L = \\\"jdbc2sfmd\\\";\\r\\n-    final String OPT_METADATA = \\\"m\\\";\\r\\n-    final String OPT_PARAM_MODES_INT = \\\"o\\\";\\r\\n-    final String OPT_PARAM_MODES_NAME = \\\"O\\\";\\r\\n-    final String OPT_PARAM_NAMES = \\\"a\\\";\\r\\n-    final String OPT_PARAM_TYPES_INT = \\\"y\\\";\\r\\n-    final String OPT_PARAM_TYPES_NAME = \\\"Y\\\";\\r\\n-    final String OPT_PASSWORD = \\\"p\\\";\\r\\n-    final String OPT_PASSWORD_L = \\\"password\\\";\\r\\n-    final String OPT_SQL = \\\"s\\\";\\r\\n-    final String OPT_SQL_L = \\\"sql\\\";\\r\\n-    final String OPT_SQL_SPLIT_DEFAULT = \\\"###\\\";\\r\\n-    final String OPT_SQL_SPLIT_L = \\\"splitSql\\\";\\r\\n-    final String OPT_STACK_TRACE = \\\"t\\\";\\r\\n-    final String OPT_TIMING = \\\"g\\\";\\r\\n-    final String OPT_TRIM_L = \\\"trim\\\";\\r\\n-    final String OPT_USER = \\\"u\\\";\\r\\n-    final String OPT_WRITE_TO_FILE = \\\"w\\\";\\r\\n-    final String _PMODE_IN = \\\"IN\\\";\\r\\n-    final String _PMODE_INOUT = \\\"INOUT\\\";\\r\\n-    final String _PMODE_OUT = \\\"OUT\\\";\\r\\n-    final String _PMODE_UNK = \\\"Unknown\\\";\\r\\n-    final String PMODES = _PMODE_IN + \\\", \\\" + _PMODE_INOUT + \\\", \\\" + _PMODE_OUT + \\\", \\\" + _PMODE_UNK;\\r\\n     final Options commandLineOptions;\\r\\n     commandLineOptions = new Options();\\r\\n-    commandLineOptions.addOption(OPT_HELP, OPT_HELP_, false, \\\"Prints help and quits\\\");\\r\\n+    commandLineOptions.addOption(OPT_HELP, OPT_HELP_LONG, false, \\\"Prints help and quits\\\");\\r\\n     commandLineOptions.addOption(OPT_DRIVER, \\\"driver\\\", true, \\\"JDBC driver class name\\\");\\r\\n     commandLineOptions.addOption(OPT_DRIVER_INFO, \\\"info\\\", false, \\\"Prints driver information and properties. If \\\" + OPT + OPT_CONNECTION + \\\" is not specified, all drivers on the classpath are displayed.\\\");\\r\\n     commandLineOptions.addOption(OPT_CONNECTION, \\\"url\\\", true, \\\"Connection URL\\\");\\r\\n     commandLineOptions.addOption(OPT_USER, \\\"user\\\", true, \\\"A database user name\\\");\\r\\n-    commandLineOptions.addOption(OPT_PASSWORD, OPT_PASSWORD_L, true, \\\"The database password for the user specified with the \\\" + OPT + OPT_USER + \\\" option. You can obfuscate the password with org.mortbay.jetty.security.Password, see http://docs.codehaus.org/display/JETTY/Securing+Passwords\\\");\\r\\n+    commandLineOptions.addOption(OPT_PASSWORD, OPT_PASSWORD_L, true, \\\"The database password for the user specified with the \\\" + OPT + OPT_USER + \\\" option. You can obfuscate the password with org.mortbay.jetty.security.Password,\\\" + \\\" see http://docs.codehaus.org/display/JETTY/Securing+Passwords\\\");\\r\\n     commandLineOptions.addOption(OPT_SQL, OPT_SQL_L, true, \\\"Runs SQL or {call stored_procedure(?, ?)} or {?=call function(?, ?)}\\\");\\r\\n     commandLineOptions.addOption(OPT_FILE_SFMD, \\\"sfmd\\\", true, \\\"Writes a SFMD file for the given SQL\\\");\\r\\n     commandLineOptions.addOption(OPT_FILE_BINDING, \\\"jdbc\\\", true, \\\"Writes a JDBC binding node file for the given SQL\\\");\\r\\n     commandLineOptions.addOption(OPT_FILE_JDBC, \\\"node\\\", true, \\\"Writes a JDBC node file for the given SQL (internal debugging)\\\");\\r\\n     commandLineOptions.addOption(OPT_WRITE_TO_FILE, \\\"outfile\\\", true, \\\"Writes the SQL output to the given file\\\");\\r\\n     commandLineOptions.addOption(OPT_DESCRIPTION, \\\"description\\\", true, \\\"SFMD description. A default description is used if omited. Example: \\\" + OPT + OPT_DESCRIPTION + \\\" \\\\\\\"Runs such and such\\\\\\\"\\\");\\r\\n     commandLineOptions.addOption(OPT_INTERACTIVE, \\\"interactive\\\", false, \\\"Runs in interactive mode, reading and writing from the console, 'go' or '/' sends a statement\\\");\\r\\n     commandLineOptions.addOption(OPT_TIMING, \\\"printTiming\\\", false, \\\"Prints timing information\\\");\\r\\n     commandLineOptions.addOption(OPT_METADATA, \\\"printMetaData\\\", false, \\\"Prints metadata information\\\");\\r\\n     commandLineOptions.addOption(OPT_STACK_TRACE, \\\"printStack\\\", false, \\\"Prints stack traces on errors\\\");\\r\\n     Option option = new Option(OPT_COLUMN_NAMES, \\\"columnNames\\\", true, \\\"Column XML names; default names column labels. Example: \\\" + OPT + OPT_COLUMN_NAMES + \\\" \\\\\\\"cname1 cname2\\\\\\\"\\\");\\r\\n     commandLineOptions.addOption(option);\\r\\n     option = new Option(OPT_PARAM_NAMES, \\\"paramNames\\\", true, \\\"Parameter XML names; default names are param1, param2, etc. Example: \\\" + OPT + OPT_PARAM_NAMES + \\\" \\\\\\\"pname1 pname2\\\\\\\"\\\");\\r\\n     commandLineOptions.addOption(option);\\r\\n     final OptionGroup pOutTypesOptionGroup = new OptionGroup();\\r\\n     final String pOutTypesOptionGroupDoc = OPT + OPT_PARAM_TYPES_INT + \\\" and \\\" + OPT + OPT_PARAM_TYPES_NAME + \\\" are mutually exclusive.\\\";\\r\\n     final String typesClassName = Types.class.getName();\\r\\n     option = new Option(OPT_PARAM_TYPES_INT, \\\"paramTypes\\\", true, \\\"Parameter types from \\\" + typesClassName + \\\". \\\" + pOutTypesOptionGroupDoc + \\\" Example: \\\" + OPT + OPT_PARAM_TYPES_INT + \\\" \\\\\\\"-10 12\\\\\\\"\\\");\\r\\n     commandLineOptions.addOption(option);\\r\\n     option = new Option(OPT_PARAM_TYPES_NAME, \\\"paramTypeNames\\\", true, \\\"Parameter \\\" + typesClassName + \\\" names. \\\" + pOutTypesOptionGroupDoc + \\\" Example: \\\" + OPT + OPT_PARAM_TYPES_NAME + \\\" \\\\\\\"CURSOR VARCHAR\\\\\\\"\\\");\\r\\n     commandLineOptions.addOption(option);\\r\\n     commandLineOptions.addOptionGroup(pOutTypesOptionGroup);\\r\\n     final OptionGroup modesOptionGroup = new OptionGroup();\\r\\n     final String modesOptionGroupDoc = OPT + OPT_PARAM_MODES_INT + \\\" and \\\" + OPT + OPT_PARAM_MODES_NAME + \\\" are mutually exclusive.\\\";\\r\\n     option = new Option(OPT_PARAM_MODES_INT, \\\"paramModes\\\", true, \\\"Parameters modes (\\\" + ParameterMetaData.parameterModeIn + \\\"=IN, \\\" + ParameterMetaData.parameterModeInOut + \\\"=INOUT, \\\" + ParameterMetaData.parameterModeOut + \\\"=OUT, \\\" + ParameterMetaData.parameterModeUnknown + \\\"=Unknown\\\" + \\\"). \\\" + modesOptionGroupDoc + \\\" Example for 2 parameters, OUT and IN: \\\" + OPT + OPT_PARAM_MODES_INT + \\\" \\\\\\\"\\\" + ParameterMetaData.parameterModeOut + \\\" \\\" + ParameterMetaData.parameterModeIn + \\\"\\\\\\\"\\\");\\r\\n     modesOptionGroup.addOption(option);\\r\\n-    option = new Option(OPT_PARAM_MODES_NAME, \\\"paramModeNames\\\", true, \\\"Parameters mode names (\\\" + PMODES + \\\"). \\\" + modesOptionGroupDoc + \\\" Example for 2 parameters, OUT and IN: \\\" + OPT + OPT_PARAM_MODES_NAME + \\\" \\\\\\\"\\\" + _PMODE_OUT + \\\" \\\" + _PMODE_IN + \\\"\\\\\\\"\\\");\\r\\n+    option = new Option(OPT_PARAM_MODES_NAME, \\\"paramModeNames\\\", true, \\\"Parameters mode names (\\\" + PMODES + \\\"). \\\" + modesOptionGroupDoc + \\\" Example for 2 parameters, OUT and IN: \\\" + OPT + OPT_PARAM_MODES_NAME + \\\" \\\\\\\"\\\" + PMODE_OUT + \\\" \\\" + PMODE_IN + \\\"\\\\\\\"\\\");\\r\\n     modesOptionGroup.addOption(option);\\r\\n     commandLineOptions.addOptionGroup(modesOptionGroup);\\r\\n     option = new Option(null, OPT_TRIM_L, true, \\\"Trims leading and trailing spaces from all column values. Column XML names can be optionally specified to set which columns to trim.\\\");\\r\\n     option.setOptionalArg(true);\\r\\n     commandLineOptions.addOption(option);\\r\\n     option = new Option(OPT_JDBC_TO_SFMD, OPT_JDBC_TO_SFMD_L, true, \\\"Converts the JDBC file in the first argument to an SMFD file specified in the second argument.\\\");\\r\\n     option.setArgs(2);\\r\\n     commandLineOptions.addOption(option);\\r\\n     formatter.printHelp(new PrintWriter(sw), HelpFormatter.DEFAULT_WIDTH, this.getClass().getName(), null, commandLineOptions, HelpFormatter.DEFAULT_LEFT_PAD, HelpFormatter.DEFAULT_DESC_PAD, null);\\r\\n     final String expected = \\\"usage: org.apache.commons.cli.bug.BugCLI162Test\\\" + CR + \\\" -2,--jdbc2sfmd <arg>        Converts the JDBC file in the first argument\\\" + CR + \\\"                             to an SMFD file specified in the second\\\" + CR + \\\"                             argument.\\\" + CR + \\\" -a,--paramNames <arg>       Parameter XML names; default names are\\\" + CR + \\\"                             param1, param2, etc. Example: -a \\\\\\\"pname1\\\" + CR + \\\"                             pname2\\\\\\\"\\\" + CR + \\\" -b,--jdbc <arg>             Writes a JDBC binding node file for the given\\\" + CR + \\\"                             SQL\\\" + CR + \\\" -c,--url <arg>              Connection URL\\\" + CR + \\\" -d,--driver <arg>           JDBC driver class name\\\" + CR + \\\" -e,--description <arg>      SFMD description. A default description is\\\" + CR + \\\"                             used if omited. Example: -e \\\\\\\"Runs such and\\\" + CR + \\\"                             such\\\\\\\"\\\" + CR + \\\" -f,--sfmd <arg>             Writes a SFMD file for the given SQL\\\" + CR + \\\" -g,--printTiming            Prints timing information\\\" + CR + \\\" -h,--help                   Prints help and quits\\\" + CR + \\\" -i,--interactive            Runs in interactive mode, reading and writing\\\" + CR + \\\"                             from the console, 'go' or '/' sends a\\\" + CR + \\\"                             statement\\\" + CR + \\\" -j,--node <arg>             Writes a JDBC node file for the given SQL\\\" + CR + \\\"                             (internal debugging)\\\" + CR + \\\" -l,--columnNames <arg>      Column XML names; default names column\\\" + CR + \\\"                             labels. Example: -l \\\\\\\"cname1 cname2\\\\\\\"\\\" + CR + \\\" -m,--printMetaData          Prints metadata information\\\" + CR + \\\" -n,--info                   Prints driver information and properties. If\\\" + CR + \\\"                             -c is not specified, all drivers on the\\\" + CR + \\\"                             classpath are displayed.\\\" + CR + \\\" -o,--paramModes <arg>       Parameters modes (1=IN, 2=INOUT, 4=OUT,\\\" + CR + \\\"                             0=Unknown). -o and -O are mutually exclusive.\\\" + CR + \\\"                             Example for 2 parameters, OUT and IN: -o \\\\\\\"4\\\" + CR + \\\"                             1\\\\\\\"\\\" + CR + \\\" -O,--paramModeNames <arg>   Parameters mode names (IN, INOUT, OUT,\\\" + CR + \\\"                             Unknown). -o and -O are mutually exclusive.\\\" + CR + \\\"                             Example for 2 parameters, OUT and IN: -O \\\\\\\"OUT\\\" + CR + \\\"                             IN\\\\\\\"\\\" + CR + \\\" -p,--password <arg>         The database password for the user specified\\\" + CR + \\\"                             with the -u option. You can obfuscate the\\\" + CR + \\\"                             password with\\\" + CR + \\\"                             org.mortbay.jetty.security.Password, see\\\" + CR + \\\"                             http://docs.codehaus.org/display/JETTY/Securi\\\" + CR + \\\"                             ng+Passwords\\\" + CR + \\\" -s,--sql <arg>              Runs SQL or {call stored_procedure(?, ?)} or\\\" + CR + \\\"                             {?=call function(?, ?)}\\\" + CR + \\\" -t,--printStack             Prints stack traces on errors\\\" + CR + \\\"    --trim <arg>             Trims leading and trailing spaces from all\\\" + CR + \\\"                             column values. Column XML names can be\\\" + CR + \\\"                             optionally specified to set which columns to\\\" + CR + \\\"                             trim.\\\" + CR + \\\" -u,--user <arg>             A database user name\\\" + CR + \\\" -w,--outfile <arg>          Writes the SQL output to the given file\\\" + CR + \\\" -y,--paramTypes <arg>       Parameter types from java.sql.Types. -y and\\\" + CR + \\\"                             -Y are mutually exclusive. Example: -y \\\\\\\"-10\\\" + CR + \\\"                             12\\\\\\\"\\\" + CR + \\\" -Y,--paramTypeNames <arg>   Parameter java.sql.Types names. -y and -Y are\\\" + CR + \\\"                             mutually exclusive. Example: -Y \\\\\\\"CURSOR\\\" + CR + \\\"                             VARCHAR\\\\\\\"\\\" + CR;\\r\\n     assertEquals(expected, sw.toString());\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"arturobernalg@gmail.com","authorName":"Arturo Bernal","commitYear":"2020","diff":"\"@@ -1,85 +1,85 @@\\n @Test\\r\\n public void testPrintHelpLongLines() {\\r\\n     final String OPT = \\\"-\\\";\\r\\n     final String OPT_COLUMN_NAMES = \\\"l\\\";\\r\\n     final String OPT_CONNECTION = \\\"c\\\";\\r\\n     final String OPT_DESCRIPTION = \\\"e\\\";\\r\\n     final String OPT_DRIVER = \\\"d\\\";\\r\\n     final String OPT_DRIVER_INFO = \\\"n\\\";\\r\\n     final String OPT_FILE_BINDING = \\\"b\\\";\\r\\n     final String OPT_FILE_JDBC = \\\"j\\\";\\r\\n     final String OPT_FILE_SFMD = \\\"f\\\";\\r\\n     final String OPT_HELP = \\\"h\\\";\\r\\n     final String OPT_HELP_ = \\\"help\\\";\\r\\n     final String OPT_INTERACTIVE = \\\"i\\\";\\r\\n     final String OPT_JDBC_TO_SFMD = \\\"2\\\";\\r\\n     final String OPT_JDBC_TO_SFMD_L = \\\"jdbc2sfmd\\\";\\r\\n     final String OPT_METADATA = \\\"m\\\";\\r\\n     final String OPT_PARAM_MODES_INT = \\\"o\\\";\\r\\n     final String OPT_PARAM_MODES_NAME = \\\"O\\\";\\r\\n     final String OPT_PARAM_NAMES = \\\"a\\\";\\r\\n     final String OPT_PARAM_TYPES_INT = \\\"y\\\";\\r\\n     final String OPT_PARAM_TYPES_NAME = \\\"Y\\\";\\r\\n     final String OPT_PASSWORD = \\\"p\\\";\\r\\n     final String OPT_PASSWORD_L = \\\"password\\\";\\r\\n     final String OPT_SQL = \\\"s\\\";\\r\\n     final String OPT_SQL_L = \\\"sql\\\";\\r\\n     final String OPT_SQL_SPLIT_DEFAULT = \\\"###\\\";\\r\\n     final String OPT_SQL_SPLIT_L = \\\"splitSql\\\";\\r\\n     final String OPT_STACK_TRACE = \\\"t\\\";\\r\\n     final String OPT_TIMING = \\\"g\\\";\\r\\n     final String OPT_TRIM_L = \\\"trim\\\";\\r\\n     final String OPT_USER = \\\"u\\\";\\r\\n     final String OPT_WRITE_TO_FILE = \\\"w\\\";\\r\\n     final String _PMODE_IN = \\\"IN\\\";\\r\\n     final String _PMODE_INOUT = \\\"INOUT\\\";\\r\\n     final String _PMODE_OUT = \\\"OUT\\\";\\r\\n     final String _PMODE_UNK = \\\"Unknown\\\";\\r\\n     final String PMODES = _PMODE_IN + \\\", \\\" + _PMODE_INOUT + \\\", \\\" + _PMODE_OUT + \\\", \\\" + _PMODE_UNK;\\r\\n-    Options commandLineOptions;\\r\\n+    final Options commandLineOptions;\\r\\n     commandLineOptions = new Options();\\r\\n     commandLineOptions.addOption(OPT_HELP, OPT_HELP_, false, \\\"Prints help and quits\\\");\\r\\n     commandLineOptions.addOption(OPT_DRIVER, \\\"driver\\\", true, \\\"JDBC driver class name\\\");\\r\\n     commandLineOptions.addOption(OPT_DRIVER_INFO, \\\"info\\\", false, \\\"Prints driver information and properties. If \\\" + OPT + OPT_CONNECTION + \\\" is not specified, all drivers on the classpath are displayed.\\\");\\r\\n     commandLineOptions.addOption(OPT_CONNECTION, \\\"url\\\", true, \\\"Connection URL\\\");\\r\\n     commandLineOptions.addOption(OPT_USER, \\\"user\\\", true, \\\"A database user name\\\");\\r\\n     commandLineOptions.addOption(OPT_PASSWORD, OPT_PASSWORD_L, true, \\\"The database password for the user specified with the \\\" + OPT + OPT_USER + \\\" option. You can obfuscate the password with org.mortbay.jetty.security.Password, see http://docs.codehaus.org/display/JETTY/Securing+Passwords\\\");\\r\\n     commandLineOptions.addOption(OPT_SQL, OPT_SQL_L, true, \\\"Runs SQL or {call stored_procedure(?, ?)} or {?=call function(?, ?)}\\\");\\r\\n     commandLineOptions.addOption(OPT_FILE_SFMD, \\\"sfmd\\\", true, \\\"Writes a SFMD file for the given SQL\\\");\\r\\n     commandLineOptions.addOption(OPT_FILE_BINDING, \\\"jdbc\\\", true, \\\"Writes a JDBC binding node file for the given SQL\\\");\\r\\n     commandLineOptions.addOption(OPT_FILE_JDBC, \\\"node\\\", true, \\\"Writes a JDBC node file for the given SQL (internal debugging)\\\");\\r\\n     commandLineOptions.addOption(OPT_WRITE_TO_FILE, \\\"outfile\\\", true, \\\"Writes the SQL output to the given file\\\");\\r\\n     commandLineOptions.addOption(OPT_DESCRIPTION, \\\"description\\\", true, \\\"SFMD description. A default description is used if omited. Example: \\\" + OPT + OPT_DESCRIPTION + \\\" \\\\\\\"Runs such and such\\\\\\\"\\\");\\r\\n     commandLineOptions.addOption(OPT_INTERACTIVE, \\\"interactive\\\", false, \\\"Runs in interactive mode, reading and writing from the console, 'go' or '/' sends a statement\\\");\\r\\n     commandLineOptions.addOption(OPT_TIMING, \\\"printTiming\\\", false, \\\"Prints timing information\\\");\\r\\n     commandLineOptions.addOption(OPT_METADATA, \\\"printMetaData\\\", false, \\\"Prints metadata information\\\");\\r\\n     commandLineOptions.addOption(OPT_STACK_TRACE, \\\"printStack\\\", false, \\\"Prints stack traces on errors\\\");\\r\\n     Option option = new Option(OPT_COLUMN_NAMES, \\\"columnNames\\\", true, \\\"Column XML names; default names column labels. Example: \\\" + OPT + OPT_COLUMN_NAMES + \\\" \\\\\\\"cname1 cname2\\\\\\\"\\\");\\r\\n     commandLineOptions.addOption(option);\\r\\n     option = new Option(OPT_PARAM_NAMES, \\\"paramNames\\\", true, \\\"Parameter XML names; default names are param1, param2, etc. Example: \\\" + OPT + OPT_PARAM_NAMES + \\\" \\\\\\\"pname1 pname2\\\\\\\"\\\");\\r\\n     commandLineOptions.addOption(option);\\r\\n     final OptionGroup pOutTypesOptionGroup = new OptionGroup();\\r\\n     final String pOutTypesOptionGroupDoc = OPT + OPT_PARAM_TYPES_INT + \\\" and \\\" + OPT + OPT_PARAM_TYPES_NAME + \\\" are mutually exclusive.\\\";\\r\\n     final String typesClassName = Types.class.getName();\\r\\n     option = new Option(OPT_PARAM_TYPES_INT, \\\"paramTypes\\\", true, \\\"Parameter types from \\\" + typesClassName + \\\". \\\" + pOutTypesOptionGroupDoc + \\\" Example: \\\" + OPT + OPT_PARAM_TYPES_INT + \\\" \\\\\\\"-10 12\\\\\\\"\\\");\\r\\n     commandLineOptions.addOption(option);\\r\\n     option = new Option(OPT_PARAM_TYPES_NAME, \\\"paramTypeNames\\\", true, \\\"Parameter \\\" + typesClassName + \\\" names. \\\" + pOutTypesOptionGroupDoc + \\\" Example: \\\" + OPT + OPT_PARAM_TYPES_NAME + \\\" \\\\\\\"CURSOR VARCHAR\\\\\\\"\\\");\\r\\n     commandLineOptions.addOption(option);\\r\\n     commandLineOptions.addOptionGroup(pOutTypesOptionGroup);\\r\\n     final OptionGroup modesOptionGroup = new OptionGroup();\\r\\n     final String modesOptionGroupDoc = OPT + OPT_PARAM_MODES_INT + \\\" and \\\" + OPT + OPT_PARAM_MODES_NAME + \\\" are mutually exclusive.\\\";\\r\\n     option = new Option(OPT_PARAM_MODES_INT, \\\"paramModes\\\", true, \\\"Parameters modes (\\\" + ParameterMetaData.parameterModeIn + \\\"=IN, \\\" + ParameterMetaData.parameterModeInOut + \\\"=INOUT, \\\" + ParameterMetaData.parameterModeOut + \\\"=OUT, \\\" + ParameterMetaData.parameterModeUnknown + \\\"=Unknown\\\" + \\\"). \\\" + modesOptionGroupDoc + \\\" Example for 2 parameters, OUT and IN: \\\" + OPT + OPT_PARAM_MODES_INT + \\\" \\\\\\\"\\\" + ParameterMetaData.parameterModeOut + \\\" \\\" + ParameterMetaData.parameterModeIn + \\\"\\\\\\\"\\\");\\r\\n     modesOptionGroup.addOption(option);\\r\\n     option = new Option(OPT_PARAM_MODES_NAME, \\\"paramModeNames\\\", true, \\\"Parameters mode names (\\\" + PMODES + \\\"). \\\" + modesOptionGroupDoc + \\\" Example for 2 parameters, OUT and IN: \\\" + OPT + OPT_PARAM_MODES_NAME + \\\" \\\\\\\"\\\" + _PMODE_OUT + \\\" \\\" + _PMODE_IN + \\\"\\\\\\\"\\\");\\r\\n     modesOptionGroup.addOption(option);\\r\\n     commandLineOptions.addOptionGroup(modesOptionGroup);\\r\\n     option = new Option(null, OPT_TRIM_L, true, \\\"Trims leading and trailing spaces from all column values. Column XML names can be optionally specified to set which columns to trim.\\\");\\r\\n     option.setOptionalArg(true);\\r\\n     commandLineOptions.addOption(option);\\r\\n     option = new Option(OPT_JDBC_TO_SFMD, OPT_JDBC_TO_SFMD_L, true, \\\"Converts the JDBC file in the first argument to an SMFD file specified in the second argument.\\\");\\r\\n     option.setArgs(2);\\r\\n     commandLineOptions.addOption(option);\\r\\n     formatter.printHelp(new PrintWriter(sw), HelpFormatter.DEFAULT_WIDTH, this.getClass().getName(), null, commandLineOptions, HelpFormatter.DEFAULT_LEFT_PAD, HelpFormatter.DEFAULT_DESC_PAD, null);\\r\\n     final String expected = \\\"usage: org.apache.commons.cli.bug.BugCLI162Test\\\" + CR + \\\" -2,--jdbc2sfmd <arg>        Converts the JDBC file in the first argument\\\" + CR + \\\"                             to an SMFD file specified in the second\\\" + CR + \\\"                             argument.\\\" + CR + \\\" -a,--paramNames <arg>       Parameter XML names; default names are\\\" + CR + \\\"                             param1, param2, etc. Example: -a \\\\\\\"pname1\\\" + CR + \\\"                             pname2\\\\\\\"\\\" + CR + \\\" -b,--jdbc <arg>             Writes a JDBC binding node file for the given\\\" + CR + \\\"                             SQL\\\" + CR + \\\" -c,--url <arg>              Connection URL\\\" + CR + \\\" -d,--driver <arg>           JDBC driver class name\\\" + CR + \\\" -e,--description <arg>      SFMD description. A default description is\\\" + CR + \\\"                             used if omited. Example: -e \\\\\\\"Runs such and\\\" + CR + \\\"                             such\\\\\\\"\\\" + CR + \\\" -f,--sfmd <arg>             Writes a SFMD file for the given SQL\\\" + CR + \\\" -g,--printTiming            Prints timing information\\\" + CR + \\\" -h,--help                   Prints help and quits\\\" + CR + \\\" -i,--interactive            Runs in interactive mode, reading and writing\\\" + CR + \\\"                             from the console, 'go' or '/' sends a\\\" + CR + \\\"                             statement\\\" + CR + \\\" -j,--node <arg>             Writes a JDBC node file for the given SQL\\\" + CR + \\\"                             (internal debugging)\\\" + CR + \\\" -l,--columnNames <arg>      Column XML names; default names column\\\" + CR + \\\"                             labels. Example: -l \\\\\\\"cname1 cname2\\\\\\\"\\\" + CR + \\\" -m,--printMetaData          Prints metadata information\\\" + CR + \\\" -n,--info                   Prints driver information and properties. If\\\" + CR + \\\"                             -c is not specified, all drivers on the\\\" + CR + \\\"                             classpath are displayed.\\\" + CR + \\\" -o,--paramModes <arg>       Parameters modes (1=IN, 2=INOUT, 4=OUT,\\\" + CR + \\\"                             0=Unknown). -o and -O are mutually exclusive.\\\" + CR + \\\"                             Example for 2 parameters, OUT and IN: -o \\\\\\\"4\\\" + CR + \\\"                             1\\\\\\\"\\\" + CR + \\\" -O,--paramModeNames <arg>   Parameters mode names (IN, INOUT, OUT,\\\" + CR + \\\"                             Unknown). -o and -O are mutually exclusive.\\\" + CR + \\\"                             Example for 2 parameters, OUT and IN: -O \\\\\\\"OUT\\\" + CR + \\\"                             IN\\\\\\\"\\\" + CR + \\\" -p,--password <arg>         The database password for the user specified\\\" + CR + \\\"                             with the -u option. You can obfuscate the\\\" + CR + \\\"                             password with\\\" + CR + \\\"                             org.mortbay.jetty.security.Password, see\\\" + CR + \\\"                             http://docs.codehaus.org/display/JETTY/Securi\\\" + CR + \\\"                             ng+Passwords\\\" + CR + \\\" -s,--sql <arg>              Runs SQL or {call stored_procedure(?, ?)} or\\\" + CR + \\\"                             {?=call function(?, ?)}\\\" + CR + \\\" -t,--printStack             Prints stack traces on errors\\\" + CR + \\\"    --trim <arg>             Trims leading and trailing spaces from all\\\" + CR + \\\"                             column values. Column XML names can be\\\" + CR + \\\"                             optionally specified to set which columns to\\\" + CR + \\\"                             trim.\\\" + CR + \\\" -u,--user <arg>             A database user name\\\" + CR + \\\" -w,--outfile <arg>          Writes the SQL output to the given file\\\" + CR + \\\" -y,--paramTypes <arg>       Parameter types from java.sql.Types. -y and\\\" + CR + \\\"                             -Y are mutually exclusive. Example: -y \\\\\\\"-10\\\" + CR + \\\"                             12\\\\\\\"\\\" + CR + \\\" -Y,--paramTypeNames <arg>   Parameter java.sql.Types names. -y and -Y are\\\" + CR + \\\"                             mutually exclusive. Example: -Y \\\\\\\"CURSOR\\\" + CR + \\\"                             VARCHAR\\\\\\\"\\\" + CR;\\r\\n     assertEquals(expected, sw.toString());\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,85 +1,85 @@\\n @Test\\r\\n public void testPrintHelpLongLines() {\\r\\n     final String OPT = \\\"-\\\";\\r\\n     final String OPT_COLUMN_NAMES = \\\"l\\\";\\r\\n     final String OPT_CONNECTION = \\\"c\\\";\\r\\n     final String OPT_DESCRIPTION = \\\"e\\\";\\r\\n     final String OPT_DRIVER = \\\"d\\\";\\r\\n     final String OPT_DRIVER_INFO = \\\"n\\\";\\r\\n     final String OPT_FILE_BINDING = \\\"b\\\";\\r\\n     final String OPT_FILE_JDBC = \\\"j\\\";\\r\\n     final String OPT_FILE_SFMD = \\\"f\\\";\\r\\n     final String OPT_HELP = \\\"h\\\";\\r\\n     final String OPT_HELP_ = \\\"help\\\";\\r\\n     final String OPT_INTERACTIVE = \\\"i\\\";\\r\\n     final String OPT_JDBC_TO_SFMD = \\\"2\\\";\\r\\n     final String OPT_JDBC_TO_SFMD_L = \\\"jdbc2sfmd\\\";\\r\\n     final String OPT_METADATA = \\\"m\\\";\\r\\n     final String OPT_PARAM_MODES_INT = \\\"o\\\";\\r\\n     final String OPT_PARAM_MODES_NAME = \\\"O\\\";\\r\\n     final String OPT_PARAM_NAMES = \\\"a\\\";\\r\\n     final String OPT_PARAM_TYPES_INT = \\\"y\\\";\\r\\n     final String OPT_PARAM_TYPES_NAME = \\\"Y\\\";\\r\\n     final String OPT_PASSWORD = \\\"p\\\";\\r\\n     final String OPT_PASSWORD_L = \\\"password\\\";\\r\\n     final String OPT_SQL = \\\"s\\\";\\r\\n     final String OPT_SQL_L = \\\"sql\\\";\\r\\n     final String OPT_SQL_SPLIT_DEFAULT = \\\"###\\\";\\r\\n     final String OPT_SQL_SPLIT_L = \\\"splitSql\\\";\\r\\n     final String OPT_STACK_TRACE = \\\"t\\\";\\r\\n     final String OPT_TIMING = \\\"g\\\";\\r\\n     final String OPT_TRIM_L = \\\"trim\\\";\\r\\n     final String OPT_USER = \\\"u\\\";\\r\\n     final String OPT_WRITE_TO_FILE = \\\"w\\\";\\r\\n     final String _PMODE_IN = \\\"IN\\\";\\r\\n     final String _PMODE_INOUT = \\\"INOUT\\\";\\r\\n     final String _PMODE_OUT = \\\"OUT\\\";\\r\\n     final String _PMODE_UNK = \\\"Unknown\\\";\\r\\n     final String PMODES = _PMODE_IN + \\\", \\\" + _PMODE_INOUT + \\\", \\\" + _PMODE_OUT + \\\", \\\" + _PMODE_UNK;\\r\\n     Options commandLineOptions;\\r\\n     commandLineOptions = new Options();\\r\\n     commandLineOptions.addOption(OPT_HELP, OPT_HELP_, false, \\\"Prints help and quits\\\");\\r\\n     commandLineOptions.addOption(OPT_DRIVER, \\\"driver\\\", true, \\\"JDBC driver class name\\\");\\r\\n     commandLineOptions.addOption(OPT_DRIVER_INFO, \\\"info\\\", false, \\\"Prints driver information and properties. If \\\" + OPT + OPT_CONNECTION + \\\" is not specified, all drivers on the classpath are displayed.\\\");\\r\\n     commandLineOptions.addOption(OPT_CONNECTION, \\\"url\\\", true, \\\"Connection URL\\\");\\r\\n     commandLineOptions.addOption(OPT_USER, \\\"user\\\", true, \\\"A database user name\\\");\\r\\n     commandLineOptions.addOption(OPT_PASSWORD, OPT_PASSWORD_L, true, \\\"The database password for the user specified with the \\\" + OPT + OPT_USER + \\\" option. You can obfuscate the password with org.mortbay.jetty.security.Password, see http://docs.codehaus.org/display/JETTY/Securing+Passwords\\\");\\r\\n     commandLineOptions.addOption(OPT_SQL, OPT_SQL_L, true, \\\"Runs SQL or {call stored_procedure(?, ?)} or {?=call function(?, ?)}\\\");\\r\\n     commandLineOptions.addOption(OPT_FILE_SFMD, \\\"sfmd\\\", true, \\\"Writes a SFMD file for the given SQL\\\");\\r\\n     commandLineOptions.addOption(OPT_FILE_BINDING, \\\"jdbc\\\", true, \\\"Writes a JDBC binding node file for the given SQL\\\");\\r\\n     commandLineOptions.addOption(OPT_FILE_JDBC, \\\"node\\\", true, \\\"Writes a JDBC node file for the given SQL (internal debugging)\\\");\\r\\n     commandLineOptions.addOption(OPT_WRITE_TO_FILE, \\\"outfile\\\", true, \\\"Writes the SQL output to the given file\\\");\\r\\n     commandLineOptions.addOption(OPT_DESCRIPTION, \\\"description\\\", true, \\\"SFMD description. A default description is used if omited. Example: \\\" + OPT + OPT_DESCRIPTION + \\\" \\\\\\\"Runs such and such\\\\\\\"\\\");\\r\\n     commandLineOptions.addOption(OPT_INTERACTIVE, \\\"interactive\\\", false, \\\"Runs in interactive mode, reading and writing from the console, 'go' or '/' sends a statement\\\");\\r\\n     commandLineOptions.addOption(OPT_TIMING, \\\"printTiming\\\", false, \\\"Prints timing information\\\");\\r\\n     commandLineOptions.addOption(OPT_METADATA, \\\"printMetaData\\\", false, \\\"Prints metadata information\\\");\\r\\n     commandLineOptions.addOption(OPT_STACK_TRACE, \\\"printStack\\\", false, \\\"Prints stack traces on errors\\\");\\r\\n     Option option = new Option(OPT_COLUMN_NAMES, \\\"columnNames\\\", true, \\\"Column XML names; default names column labels. Example: \\\" + OPT + OPT_COLUMN_NAMES + \\\" \\\\\\\"cname1 cname2\\\\\\\"\\\");\\r\\n     commandLineOptions.addOption(option);\\r\\n     option = new Option(OPT_PARAM_NAMES, \\\"paramNames\\\", true, \\\"Parameter XML names; default names are param1, param2, etc. Example: \\\" + OPT + OPT_PARAM_NAMES + \\\" \\\\\\\"pname1 pname2\\\\\\\"\\\");\\r\\n     commandLineOptions.addOption(option);\\r\\n-    OptionGroup pOutTypesOptionGroup = new OptionGroup();\\r\\n-    String pOutTypesOptionGroupDoc = OPT + OPT_PARAM_TYPES_INT + \\\" and \\\" + OPT + OPT_PARAM_TYPES_NAME + \\\" are mutually exclusive.\\\";\\r\\n+    final OptionGroup pOutTypesOptionGroup = new OptionGroup();\\r\\n+    final String pOutTypesOptionGroupDoc = OPT + OPT_PARAM_TYPES_INT + \\\" and \\\" + OPT + OPT_PARAM_TYPES_NAME + \\\" are mutually exclusive.\\\";\\r\\n     final String typesClassName = Types.class.getName();\\r\\n     option = new Option(OPT_PARAM_TYPES_INT, \\\"paramTypes\\\", true, \\\"Parameter types from \\\" + typesClassName + \\\". \\\" + pOutTypesOptionGroupDoc + \\\" Example: \\\" + OPT + OPT_PARAM_TYPES_INT + \\\" \\\\\\\"-10 12\\\\\\\"\\\");\\r\\n     commandLineOptions.addOption(option);\\r\\n     option = new Option(OPT_PARAM_TYPES_NAME, \\\"paramTypeNames\\\", true, \\\"Parameter \\\" + typesClassName + \\\" names. \\\" + pOutTypesOptionGroupDoc + \\\" Example: \\\" + OPT + OPT_PARAM_TYPES_NAME + \\\" \\\\\\\"CURSOR VARCHAR\\\\\\\"\\\");\\r\\n     commandLineOptions.addOption(option);\\r\\n     commandLineOptions.addOptionGroup(pOutTypesOptionGroup);\\r\\n-    OptionGroup modesOptionGroup = new OptionGroup();\\r\\n-    String modesOptionGroupDoc = OPT + OPT_PARAM_MODES_INT + \\\" and \\\" + OPT + OPT_PARAM_MODES_NAME + \\\" are mutually exclusive.\\\";\\r\\n+    final OptionGroup modesOptionGroup = new OptionGroup();\\r\\n+    final String modesOptionGroupDoc = OPT + OPT_PARAM_MODES_INT + \\\" and \\\" + OPT + OPT_PARAM_MODES_NAME + \\\" are mutually exclusive.\\\";\\r\\n     option = new Option(OPT_PARAM_MODES_INT, \\\"paramModes\\\", true, \\\"Parameters modes (\\\" + ParameterMetaData.parameterModeIn + \\\"=IN, \\\" + ParameterMetaData.parameterModeInOut + \\\"=INOUT, \\\" + ParameterMetaData.parameterModeOut + \\\"=OUT, \\\" + ParameterMetaData.parameterModeUnknown + \\\"=Unknown\\\" + \\\"). \\\" + modesOptionGroupDoc + \\\" Example for 2 parameters, OUT and IN: \\\" + OPT + OPT_PARAM_MODES_INT + \\\" \\\\\\\"\\\" + ParameterMetaData.parameterModeOut + \\\" \\\" + ParameterMetaData.parameterModeIn + \\\"\\\\\\\"\\\");\\r\\n     modesOptionGroup.addOption(option);\\r\\n     option = new Option(OPT_PARAM_MODES_NAME, \\\"paramModeNames\\\", true, \\\"Parameters mode names (\\\" + PMODES + \\\"). \\\" + modesOptionGroupDoc + \\\" Example for 2 parameters, OUT and IN: \\\" + OPT + OPT_PARAM_MODES_NAME + \\\" \\\\\\\"\\\" + _PMODE_OUT + \\\" \\\" + _PMODE_IN + \\\"\\\\\\\"\\\");\\r\\n     modesOptionGroup.addOption(option);\\r\\n     commandLineOptions.addOptionGroup(modesOptionGroup);\\r\\n     option = new Option(null, OPT_TRIM_L, true, \\\"Trims leading and trailing spaces from all column values. Column XML names can be optionally specified to set which columns to trim.\\\");\\r\\n     option.setOptionalArg(true);\\r\\n     commandLineOptions.addOption(option);\\r\\n     option = new Option(OPT_JDBC_TO_SFMD, OPT_JDBC_TO_SFMD_L, true, \\\"Converts the JDBC file in the first argument to an SMFD file specified in the second argument.\\\");\\r\\n     option.setArgs(2);\\r\\n     commandLineOptions.addOption(option);\\r\\n     formatter.printHelp(new PrintWriter(sw), HelpFormatter.DEFAULT_WIDTH, this.getClass().getName(), null, commandLineOptions, HelpFormatter.DEFAULT_LEFT_PAD, HelpFormatter.DEFAULT_DESC_PAD, null);\\r\\n-    String expected = \\\"usage: org.apache.commons.cli.bug.BugCLI162Test\\\" + CR + \\\" -2,--jdbc2sfmd <arg>        Converts the JDBC file in the first argument\\\" + CR + \\\"                             to an SMFD file specified in the second\\\" + CR + \\\"                             argument.\\\" + CR + \\\" -a,--paramNames <arg>       Parameter XML names; default names are\\\" + CR + \\\"                             param1, param2, etc. Example: -a \\\\\\\"pname1\\\" + CR + \\\"                             pname2\\\\\\\"\\\" + CR + \\\" -b,--jdbc <arg>             Writes a JDBC binding node file for the given\\\" + CR + \\\"                             SQL\\\" + CR + \\\" -c,--url <arg>              Connection URL\\\" + CR + \\\" -d,--driver <arg>           JDBC driver class name\\\" + CR + \\\" -e,--description <arg>      SFMD description. A default description is\\\" + CR + \\\"                             used if omited. Example: -e \\\\\\\"Runs such and\\\" + CR + \\\"                             such\\\\\\\"\\\" + CR + \\\" -f,--sfmd <arg>             Writes a SFMD file for the given SQL\\\" + CR + \\\" -g,--printTiming            Prints timing information\\\" + CR + \\\" -h,--help                   Prints help and quits\\\" + CR + \\\" -i,--interactive            Runs in interactive mode, reading and writing\\\" + CR + \\\"                             from the console, 'go' or '/' sends a\\\" + CR + \\\"                             statement\\\" + CR + \\\" -j,--node <arg>             Writes a JDBC node file for the given SQL\\\" + CR + \\\"                             (internal debugging)\\\" + CR + \\\" -l,--columnNames <arg>      Column XML names; default names column\\\" + CR + \\\"                             labels. Example: -l \\\\\\\"cname1 cname2\\\\\\\"\\\" + CR + \\\" -m,--printMetaData          Prints metadata information\\\" + CR + \\\" -n,--info                   Prints driver information and properties. If\\\" + CR + \\\"                             -c is not specified, all drivers on the\\\" + CR + \\\"                             classpath are displayed.\\\" + CR + \\\" -o,--paramModes <arg>       Parameters modes (1=IN, 2=INOUT, 4=OUT,\\\" + CR + \\\"                             0=Unknown). -o and -O are mutually exclusive.\\\" + CR + \\\"                             Example for 2 parameters, OUT and IN: -o \\\\\\\"4\\\" + CR + \\\"                             1\\\\\\\"\\\" + CR + \\\" -O,--paramModeNames <arg>   Parameters mode names (IN, INOUT, OUT,\\\" + CR + \\\"                             Unknown). -o and -O are mutually exclusive.\\\" + CR + \\\"                             Example for 2 parameters, OUT and IN: -O \\\\\\\"OUT\\\" + CR + \\\"                             IN\\\\\\\"\\\" + CR + \\\" -p,--password <arg>         The database password for the user specified\\\" + CR + \\\"                             with the -u option. You can obfuscate the\\\" + CR + \\\"                             password with\\\" + CR + \\\"                             org.mortbay.jetty.security.Password, see\\\" + CR + \\\"                             http://docs.codehaus.org/display/JETTY/Securi\\\" + CR + \\\"                             ng+Passwords\\\" + CR + \\\" -s,--sql <arg>              Runs SQL or {call stored_procedure(?, ?)} or\\\" + CR + \\\"                             {?=call function(?, ?)}\\\" + CR + \\\" -t,--printStack             Prints stack traces on errors\\\" + CR + \\\"    --trim <arg>             Trims leading and trailing spaces from all\\\" + CR + \\\"                             column values. Column XML names can be\\\" + CR + \\\"                             optionally specified to set which columns to\\\" + CR + \\\"                             trim.\\\" + CR + \\\" -u,--user <arg>             A database user name\\\" + CR + \\\" -w,--outfile <arg>          Writes the SQL output to the given file\\\" + CR + \\\" -y,--paramTypes <arg>       Parameter types from java.sql.Types. -y and\\\" + CR + \\\"                             -Y are mutually exclusive. Example: -y \\\\\\\"-10\\\" + CR + \\\"                             12\\\\\\\"\\\" + CR + \\\" -Y,--paramTypeNames <arg>   Parameter java.sql.Types names. -y and -Y are\\\" + CR + \\\"                             mutually exclusive. Example: -Y \\\\\\\"CURSOR\\\" + CR + \\\"                             VARCHAR\\\\\\\"\\\" + CR;\\r\\n+    final String expected = \\\"usage: org.apache.commons.cli.bug.BugCLI162Test\\\" + CR + \\\" -2,--jdbc2sfmd <arg>        Converts the JDBC file in the first argument\\\" + CR + \\\"                             to an SMFD file specified in the second\\\" + CR + \\\"                             argument.\\\" + CR + \\\" -a,--paramNames <arg>       Parameter XML names; default names are\\\" + CR + \\\"                             param1, param2, etc. Example: -a \\\\\\\"pname1\\\" + CR + \\\"                             pname2\\\\\\\"\\\" + CR + \\\" -b,--jdbc <arg>             Writes a JDBC binding node file for the given\\\" + CR + \\\"                             SQL\\\" + CR + \\\" -c,--url <arg>              Connection URL\\\" + CR + \\\" -d,--driver <arg>           JDBC driver class name\\\" + CR + \\\" -e,--description <arg>      SFMD description. A default description is\\\" + CR + \\\"                             used if omited. Example: -e \\\\\\\"Runs such and\\\" + CR + \\\"                             such\\\\\\\"\\\" + CR + \\\" -f,--sfmd <arg>             Writes a SFMD file for the given SQL\\\" + CR + \\\" -g,--printTiming            Prints timing information\\\" + CR + \\\" -h,--help                   Prints help and quits\\\" + CR + \\\" -i,--interactive            Runs in interactive mode, reading and writing\\\" + CR + \\\"                             from the console, 'go' or '/' sends a\\\" + CR + \\\"                             statement\\\" + CR + \\\" -j,--node <arg>             Writes a JDBC node file for the given SQL\\\" + CR + \\\"                             (internal debugging)\\\" + CR + \\\" -l,--columnNames <arg>      Column XML names; default names column\\\" + CR + \\\"                             labels. Example: -l \\\\\\\"cname1 cname2\\\\\\\"\\\" + CR + \\\" -m,--printMetaData          Prints metadata information\\\" + CR + \\\" -n,--info                   Prints driver information and properties. If\\\" + CR + \\\"                             -c is not specified, all drivers on the\\\" + CR + \\\"                             classpath are displayed.\\\" + CR + \\\" -o,--paramModes <arg>       Parameters modes (1=IN, 2=INOUT, 4=OUT,\\\" + CR + \\\"                             0=Unknown). -o and -O are mutually exclusive.\\\" + CR + \\\"                             Example for 2 parameters, OUT and IN: -o \\\\\\\"4\\\" + CR + \\\"                             1\\\\\\\"\\\" + CR + \\\" -O,--paramModeNames <arg>   Parameters mode names (IN, INOUT, OUT,\\\" + CR + \\\"                             Unknown). -o and -O are mutually exclusive.\\\" + CR + \\\"                             Example for 2 parameters, OUT and IN: -O \\\\\\\"OUT\\\" + CR + \\\"                             IN\\\\\\\"\\\" + CR + \\\" -p,--password <arg>         The database password for the user specified\\\" + CR + \\\"                             with the -u option. You can obfuscate the\\\" + CR + \\\"                             password with\\\" + CR + \\\"                             org.mortbay.jetty.security.Password, see\\\" + CR + \\\"                             http://docs.codehaus.org/display/JETTY/Securi\\\" + CR + \\\"                             ng+Passwords\\\" + CR + \\\" -s,--sql <arg>              Runs SQL or {call stored_procedure(?, ?)} or\\\" + CR + \\\"                             {?=call function(?, ?)}\\\" + CR + \\\" -t,--printStack             Prints stack traces on errors\\\" + CR + \\\"    --trim <arg>             Trims leading and trailing spaces from all\\\" + CR + \\\"                             column values. Column XML names can be\\\" + CR + \\\"                             optionally specified to set which columns to\\\" + CR + \\\"                             trim.\\\" + CR + \\\" -u,--user <arg>             A database user name\\\" + CR + \\\" -w,--outfile <arg>          Writes the SQL output to the given file\\\" + CR + \\\" -y,--paramTypes <arg>       Parameter types from java.sql.Types. -y and\\\" + CR + \\\"                             -Y are mutually exclusive. Example: -y \\\\\\\"-10\\\" + CR + \\\"                             12\\\\\\\"\\\" + CR + \\\" -Y,--paramTypeNames <arg>   Parameter java.sql.Types names. -y and -Y are\\\" + CR + \\\"                             mutually exclusive. Example: -Y \\\\\\\"CURSOR\\\" + CR + \\\"                             VARCHAR\\\\\\\"\\\" + CR;\\r\\n     assertEquals(expected, sw.toString());\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"britter@apache.org","authorName":"Benedikt Ritter","commitYear":"2015","diff":"\"@@ -1,83 +1,85 @@\\n @Test\\r\\n public void testPrintHelpLongLines() {\\r\\n     final String OPT = \\\"-\\\";\\r\\n     final String OPT_COLUMN_NAMES = \\\"l\\\";\\r\\n     final String OPT_CONNECTION = \\\"c\\\";\\r\\n     final String OPT_DESCRIPTION = \\\"e\\\";\\r\\n     final String OPT_DRIVER = \\\"d\\\";\\r\\n     final String OPT_DRIVER_INFO = \\\"n\\\";\\r\\n     final String OPT_FILE_BINDING = \\\"b\\\";\\r\\n     final String OPT_FILE_JDBC = \\\"j\\\";\\r\\n     final String OPT_FILE_SFMD = \\\"f\\\";\\r\\n     final String OPT_HELP = \\\"h\\\";\\r\\n     final String OPT_HELP_ = \\\"help\\\";\\r\\n     final String OPT_INTERACTIVE = \\\"i\\\";\\r\\n     final String OPT_JDBC_TO_SFMD = \\\"2\\\";\\r\\n     final String OPT_JDBC_TO_SFMD_L = \\\"jdbc2sfmd\\\";\\r\\n     final String OPT_METADATA = \\\"m\\\";\\r\\n     final String OPT_PARAM_MODES_INT = \\\"o\\\";\\r\\n     final String OPT_PARAM_MODES_NAME = \\\"O\\\";\\r\\n     final String OPT_PARAM_NAMES = \\\"a\\\";\\r\\n     final String OPT_PARAM_TYPES_INT = \\\"y\\\";\\r\\n     final String OPT_PARAM_TYPES_NAME = \\\"Y\\\";\\r\\n     final String OPT_PASSWORD = \\\"p\\\";\\r\\n     final String OPT_PASSWORD_L = \\\"password\\\";\\r\\n     final String OPT_SQL = \\\"s\\\";\\r\\n     final String OPT_SQL_L = \\\"sql\\\";\\r\\n     final String OPT_SQL_SPLIT_DEFAULT = \\\"###\\\";\\r\\n     final String OPT_SQL_SPLIT_L = \\\"splitSql\\\";\\r\\n     final String OPT_STACK_TRACE = \\\"t\\\";\\r\\n     final String OPT_TIMING = \\\"g\\\";\\r\\n     final String OPT_TRIM_L = \\\"trim\\\";\\r\\n     final String OPT_USER = \\\"u\\\";\\r\\n     final String OPT_WRITE_TO_FILE = \\\"w\\\";\\r\\n     final String _PMODE_IN = \\\"IN\\\";\\r\\n     final String _PMODE_INOUT = \\\"INOUT\\\";\\r\\n     final String _PMODE_OUT = \\\"OUT\\\";\\r\\n     final String _PMODE_UNK = \\\"Unknown\\\";\\r\\n     final String PMODES = _PMODE_IN + \\\", \\\" + _PMODE_INOUT + \\\", \\\" + _PMODE_OUT + \\\", \\\" + _PMODE_UNK;\\r\\n     Options commandLineOptions;\\r\\n     commandLineOptions = new Options();\\r\\n     commandLineOptions.addOption(OPT_HELP, OPT_HELP_, false, \\\"Prints help and quits\\\");\\r\\n     commandLineOptions.addOption(OPT_DRIVER, \\\"driver\\\", true, \\\"JDBC driver class name\\\");\\r\\n     commandLineOptions.addOption(OPT_DRIVER_INFO, \\\"info\\\", false, \\\"Prints driver information and properties. If \\\" + OPT + OPT_CONNECTION + \\\" is not specified, all drivers on the classpath are displayed.\\\");\\r\\n     commandLineOptions.addOption(OPT_CONNECTION, \\\"url\\\", true, \\\"Connection URL\\\");\\r\\n     commandLineOptions.addOption(OPT_USER, \\\"user\\\", true, \\\"A database user name\\\");\\r\\n     commandLineOptions.addOption(OPT_PASSWORD, OPT_PASSWORD_L, true, \\\"The database password for the user specified with the \\\" + OPT + OPT_USER + \\\" option. You can obfuscate the password with org.mortbay.jetty.security.Password, see http://docs.codehaus.org/display/JETTY/Securing+Passwords\\\");\\r\\n     commandLineOptions.addOption(OPT_SQL, OPT_SQL_L, true, \\\"Runs SQL or {call stored_procedure(?, ?)} or {?=call function(?, ?)}\\\");\\r\\n     commandLineOptions.addOption(OPT_FILE_SFMD, \\\"sfmd\\\", true, \\\"Writes a SFMD file for the given SQL\\\");\\r\\n     commandLineOptions.addOption(OPT_FILE_BINDING, \\\"jdbc\\\", true, \\\"Writes a JDBC binding node file for the given SQL\\\");\\r\\n     commandLineOptions.addOption(OPT_FILE_JDBC, \\\"node\\\", true, \\\"Writes a JDBC node file for the given SQL (internal debugging)\\\");\\r\\n     commandLineOptions.addOption(OPT_WRITE_TO_FILE, \\\"outfile\\\", true, \\\"Writes the SQL output to the given file\\\");\\r\\n     commandLineOptions.addOption(OPT_DESCRIPTION, \\\"description\\\", true, \\\"SFMD description. A default description is used if omited. Example: \\\" + OPT + OPT_DESCRIPTION + \\\" \\\\\\\"Runs such and such\\\\\\\"\\\");\\r\\n     commandLineOptions.addOption(OPT_INTERACTIVE, \\\"interactive\\\", false, \\\"Runs in interactive mode, reading and writing from the console, 'go' or '/' sends a statement\\\");\\r\\n     commandLineOptions.addOption(OPT_TIMING, \\\"printTiming\\\", false, \\\"Prints timing information\\\");\\r\\n     commandLineOptions.addOption(OPT_METADATA, \\\"printMetaData\\\", false, \\\"Prints metadata information\\\");\\r\\n     commandLineOptions.addOption(OPT_STACK_TRACE, \\\"printStack\\\", false, \\\"Prints stack traces on errors\\\");\\r\\n     Option option = new Option(OPT_COLUMN_NAMES, \\\"columnNames\\\", true, \\\"Column XML names; default names column labels. Example: \\\" + OPT + OPT_COLUMN_NAMES + \\\" \\\\\\\"cname1 cname2\\\\\\\"\\\");\\r\\n     commandLineOptions.addOption(option);\\r\\n     option = new Option(OPT_PARAM_NAMES, \\\"paramNames\\\", true, \\\"Parameter XML names; default names are param1, param2, etc. Example: \\\" + OPT + OPT_PARAM_NAMES + \\\" \\\\\\\"pname1 pname2\\\\\\\"\\\");\\r\\n     commandLineOptions.addOption(option);\\r\\n     OptionGroup pOutTypesOptionGroup = new OptionGroup();\\r\\n     String pOutTypesOptionGroupDoc = OPT + OPT_PARAM_TYPES_INT + \\\" and \\\" + OPT + OPT_PARAM_TYPES_NAME + \\\" are mutually exclusive.\\\";\\r\\n     final String typesClassName = Types.class.getName();\\r\\n     option = new Option(OPT_PARAM_TYPES_INT, \\\"paramTypes\\\", true, \\\"Parameter types from \\\" + typesClassName + \\\". \\\" + pOutTypesOptionGroupDoc + \\\" Example: \\\" + OPT + OPT_PARAM_TYPES_INT + \\\" \\\\\\\"-10 12\\\\\\\"\\\");\\r\\n     commandLineOptions.addOption(option);\\r\\n     option = new Option(OPT_PARAM_TYPES_NAME, \\\"paramTypeNames\\\", true, \\\"Parameter \\\" + typesClassName + \\\" names. \\\" + pOutTypesOptionGroupDoc + \\\" Example: \\\" + OPT + OPT_PARAM_TYPES_NAME + \\\" \\\\\\\"CURSOR VARCHAR\\\\\\\"\\\");\\r\\n     commandLineOptions.addOption(option);\\r\\n     commandLineOptions.addOptionGroup(pOutTypesOptionGroup);\\r\\n     OptionGroup modesOptionGroup = new OptionGroup();\\r\\n     String modesOptionGroupDoc = OPT + OPT_PARAM_MODES_INT + \\\" and \\\" + OPT + OPT_PARAM_MODES_NAME + \\\" are mutually exclusive.\\\";\\r\\n     option = new Option(OPT_PARAM_MODES_INT, \\\"paramModes\\\", true, \\\"Parameters modes (\\\" + ParameterMetaData.parameterModeIn + \\\"=IN, \\\" + ParameterMetaData.parameterModeInOut + \\\"=INOUT, \\\" + ParameterMetaData.parameterModeOut + \\\"=OUT, \\\" + ParameterMetaData.parameterModeUnknown + \\\"=Unknown\\\" + \\\"). \\\" + modesOptionGroupDoc + \\\" Example for 2 parameters, OUT and IN: \\\" + OPT + OPT_PARAM_MODES_INT + \\\" \\\\\\\"\\\" + ParameterMetaData.parameterModeOut + \\\" \\\" + ParameterMetaData.parameterModeIn + \\\"\\\\\\\"\\\");\\r\\n     modesOptionGroup.addOption(option);\\r\\n     option = new Option(OPT_PARAM_MODES_NAME, \\\"paramModeNames\\\", true, \\\"Parameters mode names (\\\" + PMODES + \\\"). \\\" + modesOptionGroupDoc + \\\" Example for 2 parameters, OUT and IN: \\\" + OPT + OPT_PARAM_MODES_NAME + \\\" \\\\\\\"\\\" + _PMODE_OUT + \\\" \\\" + _PMODE_IN + \\\"\\\\\\\"\\\");\\r\\n     modesOptionGroup.addOption(option);\\r\\n     commandLineOptions.addOptionGroup(modesOptionGroup);\\r\\n     option = new Option(null, OPT_TRIM_L, true, \\\"Trims leading and trailing spaces from all column values. Column XML names can be optionally specified to set which columns to trim.\\\");\\r\\n     option.setOptionalArg(true);\\r\\n     commandLineOptions.addOption(option);\\r\\n     option = new Option(OPT_JDBC_TO_SFMD, OPT_JDBC_TO_SFMD_L, true, \\\"Converts the JDBC file in the first argument to an SMFD file specified in the second argument.\\\");\\r\\n     option.setArgs(2);\\r\\n     commandLineOptions.addOption(option);\\r\\n-    new HelpFormatter().printHelp(this.getClass().getName(), commandLineOptions);\\r\\n+    formatter.printHelp(new PrintWriter(sw), HelpFormatter.DEFAULT_WIDTH, this.getClass().getName(), null, commandLineOptions, HelpFormatter.DEFAULT_LEFT_PAD, HelpFormatter.DEFAULT_DESC_PAD, null);\\r\\n+    String expected = \\\"usage: org.apache.commons.cli.bug.BugCLI162Test\\\" + CR + \\\" -2,--jdbc2sfmd <arg>        Converts the JDBC file in the first argument\\\" + CR + \\\"                             to an SMFD file specified in the second\\\" + CR + \\\"                             argument.\\\" + CR + \\\" -a,--paramNames <arg>       Parameter XML names; default names are\\\" + CR + \\\"                             param1, param2, etc. Example: -a \\\\\\\"pname1\\\" + CR + \\\"                             pname2\\\\\\\"\\\" + CR + \\\" -b,--jdbc <arg>             Writes a JDBC binding node file for the given\\\" + CR + \\\"                             SQL\\\" + CR + \\\" -c,--url <arg>              Connection URL\\\" + CR + \\\" -d,--driver <arg>           JDBC driver class name\\\" + CR + \\\" -e,--description <arg>      SFMD description. A default description is\\\" + CR + \\\"                             used if omited. Example: -e \\\\\\\"Runs such and\\\" + CR + \\\"                             such\\\\\\\"\\\" + CR + \\\" -f,--sfmd <arg>             Writes a SFMD file for the given SQL\\\" + CR + \\\" -g,--printTiming            Prints timing information\\\" + CR + \\\" -h,--help                   Prints help and quits\\\" + CR + \\\" -i,--interactive            Runs in interactive mode, reading and writing\\\" + CR + \\\"                             from the console, 'go' or '/' sends a\\\" + CR + \\\"                             statement\\\" + CR + \\\" -j,--node <arg>             Writes a JDBC node file for the given SQL\\\" + CR + \\\"                             (internal debugging)\\\" + CR + \\\" -l,--columnNames <arg>      Column XML names; default names column\\\" + CR + \\\"                             labels. Example: -l \\\\\\\"cname1 cname2\\\\\\\"\\\" + CR + \\\" -m,--printMetaData          Prints metadata information\\\" + CR + \\\" -n,--info                   Prints driver information and properties. If\\\" + CR + \\\"                             -c is not specified, all drivers on the\\\" + CR + \\\"                             classpath are displayed.\\\" + CR + \\\" -o,--paramModes <arg>       Parameters modes (1=IN, 2=INOUT, 4=OUT,\\\" + CR + \\\"                             0=Unknown). -o and -O are mutually exclusive.\\\" + CR + \\\"                             Example for 2 parameters, OUT and IN: -o \\\\\\\"4\\\" + CR + \\\"                             1\\\\\\\"\\\" + CR + \\\" -O,--paramModeNames <arg>   Parameters mode names (IN, INOUT, OUT,\\\" + CR + \\\"                             Unknown). -o and -O are mutually exclusive.\\\" + CR + \\\"                             Example for 2 parameters, OUT and IN: -O \\\\\\\"OUT\\\" + CR + \\\"                             IN\\\\\\\"\\\" + CR + \\\" -p,--password <arg>         The database password for the user specified\\\" + CR + \\\"                             with the -u option. You can obfuscate the\\\" + CR + \\\"                             password with\\\" + CR + \\\"                             org.mortbay.jetty.security.Password, see\\\" + CR + \\\"                             http://docs.codehaus.org/display/JETTY/Securi\\\" + CR + \\\"                             ng+Passwords\\\" + CR + \\\" -s,--sql <arg>              Runs SQL or {call stored_procedure(?, ?)} or\\\" + CR + \\\"                             {?=call function(?, ?)}\\\" + CR + \\\" -t,--printStack             Prints stack traces on errors\\\" + CR + \\\"    --trim <arg>             Trims leading and trailing spaces from all\\\" + CR + \\\"                             column values. Column XML names can be\\\" + CR + \\\"                             optionally specified to set which columns to\\\" + CR + \\\"                             trim.\\\" + CR + \\\" -u,--user <arg>             A database user name\\\" + CR + \\\" -w,--outfile <arg>          Writes the SQL output to the given file\\\" + CR + \\\" -y,--paramTypes <arg>       Parameter types from java.sql.Types. -y and\\\" + CR + \\\"                             -Y are mutually exclusive. Example: -y \\\\\\\"-10\\\" + CR + \\\"                             12\\\\\\\"\\\" + CR + \\\" -Y,--paramTypeNames <arg>   Parameter java.sql.Types names. -y and -Y are\\\" + CR + \\\"                             mutually exclusive. Example: -Y \\\\\\\"CURSOR\\\" + CR + \\\"                             VARCHAR\\\\\\\"\\\" + CR;\\r\\n+    assertEquals(expected, sw.toString());\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"tn@apache.org","authorName":"Thomas Neidhart","commitYear":"2013","diff":"\"@@ -1,82 +1,83 @@\\n+@Test\\r\\n public void testPrintHelpLongLines() {\\r\\n     final String OPT = \\\"-\\\";\\r\\n     final String OPT_COLUMN_NAMES = \\\"l\\\";\\r\\n     final String OPT_CONNECTION = \\\"c\\\";\\r\\n     final String OPT_DESCRIPTION = \\\"e\\\";\\r\\n     final String OPT_DRIVER = \\\"d\\\";\\r\\n     final String OPT_DRIVER_INFO = \\\"n\\\";\\r\\n     final String OPT_FILE_BINDING = \\\"b\\\";\\r\\n     final String OPT_FILE_JDBC = \\\"j\\\";\\r\\n     final String OPT_FILE_SFMD = \\\"f\\\";\\r\\n     final String OPT_HELP = \\\"h\\\";\\r\\n     final String OPT_HELP_ = \\\"help\\\";\\r\\n     final String OPT_INTERACTIVE = \\\"i\\\";\\r\\n     final String OPT_JDBC_TO_SFMD = \\\"2\\\";\\r\\n     final String OPT_JDBC_TO_SFMD_L = \\\"jdbc2sfmd\\\";\\r\\n     final String OPT_METADATA = \\\"m\\\";\\r\\n     final String OPT_PARAM_MODES_INT = \\\"o\\\";\\r\\n     final String OPT_PARAM_MODES_NAME = \\\"O\\\";\\r\\n     final String OPT_PARAM_NAMES = \\\"a\\\";\\r\\n     final String OPT_PARAM_TYPES_INT = \\\"y\\\";\\r\\n     final String OPT_PARAM_TYPES_NAME = \\\"Y\\\";\\r\\n     final String OPT_PASSWORD = \\\"p\\\";\\r\\n     final String OPT_PASSWORD_L = \\\"password\\\";\\r\\n     final String OPT_SQL = \\\"s\\\";\\r\\n     final String OPT_SQL_L = \\\"sql\\\";\\r\\n     final String OPT_SQL_SPLIT_DEFAULT = \\\"###\\\";\\r\\n     final String OPT_SQL_SPLIT_L = \\\"splitSql\\\";\\r\\n     final String OPT_STACK_TRACE = \\\"t\\\";\\r\\n     final String OPT_TIMING = \\\"g\\\";\\r\\n     final String OPT_TRIM_L = \\\"trim\\\";\\r\\n     final String OPT_USER = \\\"u\\\";\\r\\n     final String OPT_WRITE_TO_FILE = \\\"w\\\";\\r\\n     final String _PMODE_IN = \\\"IN\\\";\\r\\n     final String _PMODE_INOUT = \\\"INOUT\\\";\\r\\n     final String _PMODE_OUT = \\\"OUT\\\";\\r\\n     final String _PMODE_UNK = \\\"Unknown\\\";\\r\\n     final String PMODES = _PMODE_IN + \\\", \\\" + _PMODE_INOUT + \\\", \\\" + _PMODE_OUT + \\\", \\\" + _PMODE_UNK;\\r\\n     Options commandLineOptions;\\r\\n     commandLineOptions = new Options();\\r\\n     commandLineOptions.addOption(OPT_HELP, OPT_HELP_, false, \\\"Prints help and quits\\\");\\r\\n     commandLineOptions.addOption(OPT_DRIVER, \\\"driver\\\", true, \\\"JDBC driver class name\\\");\\r\\n     commandLineOptions.addOption(OPT_DRIVER_INFO, \\\"info\\\", false, \\\"Prints driver information and properties. If \\\" + OPT + OPT_CONNECTION + \\\" is not specified, all drivers on the classpath are displayed.\\\");\\r\\n     commandLineOptions.addOption(OPT_CONNECTION, \\\"url\\\", true, \\\"Connection URL\\\");\\r\\n     commandLineOptions.addOption(OPT_USER, \\\"user\\\", true, \\\"A database user name\\\");\\r\\n     commandLineOptions.addOption(OPT_PASSWORD, OPT_PASSWORD_L, true, \\\"The database password for the user specified with the \\\" + OPT + OPT_USER + \\\" option. You can obfuscate the password with org.mortbay.jetty.security.Password, see http://docs.codehaus.org/display/JETTY/Securing+Passwords\\\");\\r\\n     commandLineOptions.addOption(OPT_SQL, OPT_SQL_L, true, \\\"Runs SQL or {call stored_procedure(?, ?)} or {?=call function(?, ?)}\\\");\\r\\n     commandLineOptions.addOption(OPT_FILE_SFMD, \\\"sfmd\\\", true, \\\"Writes a SFMD file for the given SQL\\\");\\r\\n     commandLineOptions.addOption(OPT_FILE_BINDING, \\\"jdbc\\\", true, \\\"Writes a JDBC binding node file for the given SQL\\\");\\r\\n     commandLineOptions.addOption(OPT_FILE_JDBC, \\\"node\\\", true, \\\"Writes a JDBC node file for the given SQL (internal debugging)\\\");\\r\\n     commandLineOptions.addOption(OPT_WRITE_TO_FILE, \\\"outfile\\\", true, \\\"Writes the SQL output to the given file\\\");\\r\\n     commandLineOptions.addOption(OPT_DESCRIPTION, \\\"description\\\", true, \\\"SFMD description. A default description is used if omited. Example: \\\" + OPT + OPT_DESCRIPTION + \\\" \\\\\\\"Runs such and such\\\\\\\"\\\");\\r\\n     commandLineOptions.addOption(OPT_INTERACTIVE, \\\"interactive\\\", false, \\\"Runs in interactive mode, reading and writing from the console, 'go' or '/' sends a statement\\\");\\r\\n     commandLineOptions.addOption(OPT_TIMING, \\\"printTiming\\\", false, \\\"Prints timing information\\\");\\r\\n     commandLineOptions.addOption(OPT_METADATA, \\\"printMetaData\\\", false, \\\"Prints metadata information\\\");\\r\\n     commandLineOptions.addOption(OPT_STACK_TRACE, \\\"printStack\\\", false, \\\"Prints stack traces on errors\\\");\\r\\n     Option option = new Option(OPT_COLUMN_NAMES, \\\"columnNames\\\", true, \\\"Column XML names; default names column labels. Example: \\\" + OPT + OPT_COLUMN_NAMES + \\\" \\\\\\\"cname1 cname2\\\\\\\"\\\");\\r\\n     commandLineOptions.addOption(option);\\r\\n     option = new Option(OPT_PARAM_NAMES, \\\"paramNames\\\", true, \\\"Parameter XML names; default names are param1, param2, etc. Example: \\\" + OPT + OPT_PARAM_NAMES + \\\" \\\\\\\"pname1 pname2\\\\\\\"\\\");\\r\\n     commandLineOptions.addOption(option);\\r\\n     OptionGroup pOutTypesOptionGroup = new OptionGroup();\\r\\n     String pOutTypesOptionGroupDoc = OPT + OPT_PARAM_TYPES_INT + \\\" and \\\" + OPT + OPT_PARAM_TYPES_NAME + \\\" are mutually exclusive.\\\";\\r\\n     final String typesClassName = Types.class.getName();\\r\\n     option = new Option(OPT_PARAM_TYPES_INT, \\\"paramTypes\\\", true, \\\"Parameter types from \\\" + typesClassName + \\\". \\\" + pOutTypesOptionGroupDoc + \\\" Example: \\\" + OPT + OPT_PARAM_TYPES_INT + \\\" \\\\\\\"-10 12\\\\\\\"\\\");\\r\\n     commandLineOptions.addOption(option);\\r\\n     option = new Option(OPT_PARAM_TYPES_NAME, \\\"paramTypeNames\\\", true, \\\"Parameter \\\" + typesClassName + \\\" names. \\\" + pOutTypesOptionGroupDoc + \\\" Example: \\\" + OPT + OPT_PARAM_TYPES_NAME + \\\" \\\\\\\"CURSOR VARCHAR\\\\\\\"\\\");\\r\\n     commandLineOptions.addOption(option);\\r\\n     commandLineOptions.addOptionGroup(pOutTypesOptionGroup);\\r\\n     OptionGroup modesOptionGroup = new OptionGroup();\\r\\n     String modesOptionGroupDoc = OPT + OPT_PARAM_MODES_INT + \\\" and \\\" + OPT + OPT_PARAM_MODES_NAME + \\\" are mutually exclusive.\\\";\\r\\n     option = new Option(OPT_PARAM_MODES_INT, \\\"paramModes\\\", true, \\\"Parameters modes (\\\" + ParameterMetaData.parameterModeIn + \\\"=IN, \\\" + ParameterMetaData.parameterModeInOut + \\\"=INOUT, \\\" + ParameterMetaData.parameterModeOut + \\\"=OUT, \\\" + ParameterMetaData.parameterModeUnknown + \\\"=Unknown\\\" + \\\"). \\\" + modesOptionGroupDoc + \\\" Example for 2 parameters, OUT and IN: \\\" + OPT + OPT_PARAM_MODES_INT + \\\" \\\\\\\"\\\" + ParameterMetaData.parameterModeOut + \\\" \\\" + ParameterMetaData.parameterModeIn + \\\"\\\\\\\"\\\");\\r\\n     modesOptionGroup.addOption(option);\\r\\n     option = new Option(OPT_PARAM_MODES_NAME, \\\"paramModeNames\\\", true, \\\"Parameters mode names (\\\" + PMODES + \\\"). \\\" + modesOptionGroupDoc + \\\" Example for 2 parameters, OUT and IN: \\\" + OPT + OPT_PARAM_MODES_NAME + \\\" \\\\\\\"\\\" + _PMODE_OUT + \\\" \\\" + _PMODE_IN + \\\"\\\\\\\"\\\");\\r\\n     modesOptionGroup.addOption(option);\\r\\n     commandLineOptions.addOptionGroup(modesOptionGroup);\\r\\n     option = new Option(null, OPT_TRIM_L, true, \\\"Trims leading and trailing spaces from all column values. Column XML names can be optionally specified to set which columns to trim.\\\");\\r\\n     option.setOptionalArg(true);\\r\\n     commandLineOptions.addOption(option);\\r\\n     option = new Option(OPT_JDBC_TO_SFMD, OPT_JDBC_TO_SFMD_L, true, \\\"Converts the JDBC file in the first argument to an SMFD file specified in the second argument.\\\");\\r\\n     option.setArgs(2);\\r\\n     commandLineOptions.addOption(option);\\r\\n     new HelpFormatter().printHelp(this.getClass().getName(), commandLineOptions);\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"sebb@apache.org","authorName":"Sebastian Bazley","commitYear":"2013","diff":"\"@@ -1,82 +1,82 @@\\n-public void testPrintHelpLongLines() throws ParseException, IOException {\\r\\n+public void testPrintHelpLongLines() {\\r\\n     final String OPT = \\\"-\\\";\\r\\n     final String OPT_COLUMN_NAMES = \\\"l\\\";\\r\\n     final String OPT_CONNECTION = \\\"c\\\";\\r\\n     final String OPT_DESCRIPTION = \\\"e\\\";\\r\\n     final String OPT_DRIVER = \\\"d\\\";\\r\\n     final String OPT_DRIVER_INFO = \\\"n\\\";\\r\\n     final String OPT_FILE_BINDING = \\\"b\\\";\\r\\n     final String OPT_FILE_JDBC = \\\"j\\\";\\r\\n     final String OPT_FILE_SFMD = \\\"f\\\";\\r\\n     final String OPT_HELP = \\\"h\\\";\\r\\n     final String OPT_HELP_ = \\\"help\\\";\\r\\n     final String OPT_INTERACTIVE = \\\"i\\\";\\r\\n     final String OPT_JDBC_TO_SFMD = \\\"2\\\";\\r\\n     final String OPT_JDBC_TO_SFMD_L = \\\"jdbc2sfmd\\\";\\r\\n     final String OPT_METADATA = \\\"m\\\";\\r\\n     final String OPT_PARAM_MODES_INT = \\\"o\\\";\\r\\n     final String OPT_PARAM_MODES_NAME = \\\"O\\\";\\r\\n     final String OPT_PARAM_NAMES = \\\"a\\\";\\r\\n     final String OPT_PARAM_TYPES_INT = \\\"y\\\";\\r\\n     final String OPT_PARAM_TYPES_NAME = \\\"Y\\\";\\r\\n     final String OPT_PASSWORD = \\\"p\\\";\\r\\n     final String OPT_PASSWORD_L = \\\"password\\\";\\r\\n     final String OPT_SQL = \\\"s\\\";\\r\\n     final String OPT_SQL_L = \\\"sql\\\";\\r\\n     final String OPT_SQL_SPLIT_DEFAULT = \\\"###\\\";\\r\\n     final String OPT_SQL_SPLIT_L = \\\"splitSql\\\";\\r\\n     final String OPT_STACK_TRACE = \\\"t\\\";\\r\\n     final String OPT_TIMING = \\\"g\\\";\\r\\n     final String OPT_TRIM_L = \\\"trim\\\";\\r\\n     final String OPT_USER = \\\"u\\\";\\r\\n     final String OPT_WRITE_TO_FILE = \\\"w\\\";\\r\\n     final String _PMODE_IN = \\\"IN\\\";\\r\\n     final String _PMODE_INOUT = \\\"INOUT\\\";\\r\\n     final String _PMODE_OUT = \\\"OUT\\\";\\r\\n     final String _PMODE_UNK = \\\"Unknown\\\";\\r\\n     final String PMODES = _PMODE_IN + \\\", \\\" + _PMODE_INOUT + \\\", \\\" + _PMODE_OUT + \\\", \\\" + _PMODE_UNK;\\r\\n     Options commandLineOptions;\\r\\n     commandLineOptions = new Options();\\r\\n     commandLineOptions.addOption(OPT_HELP, OPT_HELP_, false, \\\"Prints help and quits\\\");\\r\\n     commandLineOptions.addOption(OPT_DRIVER, \\\"driver\\\", true, \\\"JDBC driver class name\\\");\\r\\n     commandLineOptions.addOption(OPT_DRIVER_INFO, \\\"info\\\", false, \\\"Prints driver information and properties. If \\\" + OPT + OPT_CONNECTION + \\\" is not specified, all drivers on the classpath are displayed.\\\");\\r\\n     commandLineOptions.addOption(OPT_CONNECTION, \\\"url\\\", true, \\\"Connection URL\\\");\\r\\n     commandLineOptions.addOption(OPT_USER, \\\"user\\\", true, \\\"A database user name\\\");\\r\\n     commandLineOptions.addOption(OPT_PASSWORD, OPT_PASSWORD_L, true, \\\"The database password for the user specified with the \\\" + OPT + OPT_USER + \\\" option. You can obfuscate the password with org.mortbay.jetty.security.Password, see http://docs.codehaus.org/display/JETTY/Securing+Passwords\\\");\\r\\n     commandLineOptions.addOption(OPT_SQL, OPT_SQL_L, true, \\\"Runs SQL or {call stored_procedure(?, ?)} or {?=call function(?, ?)}\\\");\\r\\n     commandLineOptions.addOption(OPT_FILE_SFMD, \\\"sfmd\\\", true, \\\"Writes a SFMD file for the given SQL\\\");\\r\\n     commandLineOptions.addOption(OPT_FILE_BINDING, \\\"jdbc\\\", true, \\\"Writes a JDBC binding node file for the given SQL\\\");\\r\\n     commandLineOptions.addOption(OPT_FILE_JDBC, \\\"node\\\", true, \\\"Writes a JDBC node file for the given SQL (internal debugging)\\\");\\r\\n     commandLineOptions.addOption(OPT_WRITE_TO_FILE, \\\"outfile\\\", true, \\\"Writes the SQL output to the given file\\\");\\r\\n     commandLineOptions.addOption(OPT_DESCRIPTION, \\\"description\\\", true, \\\"SFMD description. A default description is used if omited. Example: \\\" + OPT + OPT_DESCRIPTION + \\\" \\\\\\\"Runs such and such\\\\\\\"\\\");\\r\\n     commandLineOptions.addOption(OPT_INTERACTIVE, \\\"interactive\\\", false, \\\"Runs in interactive mode, reading and writing from the console, 'go' or '/' sends a statement\\\");\\r\\n     commandLineOptions.addOption(OPT_TIMING, \\\"printTiming\\\", false, \\\"Prints timing information\\\");\\r\\n     commandLineOptions.addOption(OPT_METADATA, \\\"printMetaData\\\", false, \\\"Prints metadata information\\\");\\r\\n     commandLineOptions.addOption(OPT_STACK_TRACE, \\\"printStack\\\", false, \\\"Prints stack traces on errors\\\");\\r\\n     Option option = new Option(OPT_COLUMN_NAMES, \\\"columnNames\\\", true, \\\"Column XML names; default names column labels. Example: \\\" + OPT + OPT_COLUMN_NAMES + \\\" \\\\\\\"cname1 cname2\\\\\\\"\\\");\\r\\n     commandLineOptions.addOption(option);\\r\\n     option = new Option(OPT_PARAM_NAMES, \\\"paramNames\\\", true, \\\"Parameter XML names; default names are param1, param2, etc. Example: \\\" + OPT + OPT_PARAM_NAMES + \\\" \\\\\\\"pname1 pname2\\\\\\\"\\\");\\r\\n     commandLineOptions.addOption(option);\\r\\n     OptionGroup pOutTypesOptionGroup = new OptionGroup();\\r\\n     String pOutTypesOptionGroupDoc = OPT + OPT_PARAM_TYPES_INT + \\\" and \\\" + OPT + OPT_PARAM_TYPES_NAME + \\\" are mutually exclusive.\\\";\\r\\n     final String typesClassName = Types.class.getName();\\r\\n     option = new Option(OPT_PARAM_TYPES_INT, \\\"paramTypes\\\", true, \\\"Parameter types from \\\" + typesClassName + \\\". \\\" + pOutTypesOptionGroupDoc + \\\" Example: \\\" + OPT + OPT_PARAM_TYPES_INT + \\\" \\\\\\\"-10 12\\\\\\\"\\\");\\r\\n     commandLineOptions.addOption(option);\\r\\n     option = new Option(OPT_PARAM_TYPES_NAME, \\\"paramTypeNames\\\", true, \\\"Parameter \\\" + typesClassName + \\\" names. \\\" + pOutTypesOptionGroupDoc + \\\" Example: \\\" + OPT + OPT_PARAM_TYPES_NAME + \\\" \\\\\\\"CURSOR VARCHAR\\\\\\\"\\\");\\r\\n     commandLineOptions.addOption(option);\\r\\n     commandLineOptions.addOptionGroup(pOutTypesOptionGroup);\\r\\n     OptionGroup modesOptionGroup = new OptionGroup();\\r\\n     String modesOptionGroupDoc = OPT + OPT_PARAM_MODES_INT + \\\" and \\\" + OPT + OPT_PARAM_MODES_NAME + \\\" are mutually exclusive.\\\";\\r\\n     option = new Option(OPT_PARAM_MODES_INT, \\\"paramModes\\\", true, \\\"Parameters modes (\\\" + ParameterMetaData.parameterModeIn + \\\"=IN, \\\" + ParameterMetaData.parameterModeInOut + \\\"=INOUT, \\\" + ParameterMetaData.parameterModeOut + \\\"=OUT, \\\" + ParameterMetaData.parameterModeUnknown + \\\"=Unknown\\\" + \\\"). \\\" + modesOptionGroupDoc + \\\" Example for 2 parameters, OUT and IN: \\\" + OPT + OPT_PARAM_MODES_INT + \\\" \\\\\\\"\\\" + ParameterMetaData.parameterModeOut + \\\" \\\" + ParameterMetaData.parameterModeIn + \\\"\\\\\\\"\\\");\\r\\n     modesOptionGroup.addOption(option);\\r\\n     option = new Option(OPT_PARAM_MODES_NAME, \\\"paramModeNames\\\", true, \\\"Parameters mode names (\\\" + PMODES + \\\"). \\\" + modesOptionGroupDoc + \\\" Example for 2 parameters, OUT and IN: \\\" + OPT + OPT_PARAM_MODES_NAME + \\\" \\\\\\\"\\\" + _PMODE_OUT + \\\" \\\" + _PMODE_IN + \\\"\\\\\\\"\\\");\\r\\n     modesOptionGroup.addOption(option);\\r\\n     commandLineOptions.addOptionGroup(modesOptionGroup);\\r\\n     option = new Option(null, OPT_TRIM_L, true, \\\"Trims leading and trailing spaces from all column values. Column XML names can be optionally specified to set which columns to trim.\\\");\\r\\n     option.setOptionalArg(true);\\r\\n     commandLineOptions.addOption(option);\\r\\n     option = new Option(OPT_JDBC_TO_SFMD, OPT_JDBC_TO_SFMD_L, true, \\\"Converts the JDBC file in the first argument to an SMFD file specified in the second argument.\\\");\\r\\n     option.setArgs(2);\\r\\n     commandLineOptions.addOption(option);\\r\\n     new HelpFormatter().printHelp(this.getClass().getName(), commandLineOptions);\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"bayard@apache.org","authorName":"Henri Yandell","commitYear":"2009","diff":"\"\""},{"authorEmail":"bayard@apache.org","authorName":"Henri Yandell","commitYear":"2009","diff":"\"@@ -1,82 +1,82 @@\\n public void testPrintHelpLongLines() throws ParseException, IOException {\\r\\n     final String OPT = \\\"-\\\";\\r\\n     final String OPT_COLUMN_NAMES = \\\"l\\\";\\r\\n     final String OPT_CONNECTION = \\\"c\\\";\\r\\n     final String OPT_DESCRIPTION = \\\"e\\\";\\r\\n     final String OPT_DRIVER = \\\"d\\\";\\r\\n     final String OPT_DRIVER_INFO = \\\"n\\\";\\r\\n     final String OPT_FILE_BINDING = \\\"b\\\";\\r\\n     final String OPT_FILE_JDBC = \\\"j\\\";\\r\\n     final String OPT_FILE_SFMD = \\\"f\\\";\\r\\n     final String OPT_HELP = \\\"h\\\";\\r\\n     final String OPT_HELP_ = \\\"help\\\";\\r\\n     final String OPT_INTERACTIVE = \\\"i\\\";\\r\\n     final String OPT_JDBC_TO_SFMD = \\\"2\\\";\\r\\n     final String OPT_JDBC_TO_SFMD_L = \\\"jdbc2sfmd\\\";\\r\\n     final String OPT_METADATA = \\\"m\\\";\\r\\n     final String OPT_PARAM_MODES_INT = \\\"o\\\";\\r\\n     final String OPT_PARAM_MODES_NAME = \\\"O\\\";\\r\\n     final String OPT_PARAM_NAMES = \\\"a\\\";\\r\\n     final String OPT_PARAM_TYPES_INT = \\\"y\\\";\\r\\n     final String OPT_PARAM_TYPES_NAME = \\\"Y\\\";\\r\\n     final String OPT_PASSWORD = \\\"p\\\";\\r\\n     final String OPT_PASSWORD_L = \\\"password\\\";\\r\\n     final String OPT_SQL = \\\"s\\\";\\r\\n     final String OPT_SQL_L = \\\"sql\\\";\\r\\n     final String OPT_SQL_SPLIT_DEFAULT = \\\"###\\\";\\r\\n     final String OPT_SQL_SPLIT_L = \\\"splitSql\\\";\\r\\n     final String OPT_STACK_TRACE = \\\"t\\\";\\r\\n     final String OPT_TIMING = \\\"g\\\";\\r\\n     final String OPT_TRIM_L = \\\"trim\\\";\\r\\n     final String OPT_USER = \\\"u\\\";\\r\\n     final String OPT_WRITE_TO_FILE = \\\"w\\\";\\r\\n     final String _PMODE_IN = \\\"IN\\\";\\r\\n     final String _PMODE_INOUT = \\\"INOUT\\\";\\r\\n     final String _PMODE_OUT = \\\"OUT\\\";\\r\\n     final String _PMODE_UNK = \\\"Unknown\\\";\\r\\n     final String PMODES = _PMODE_IN + \\\", \\\" + _PMODE_INOUT + \\\", \\\" + _PMODE_OUT + \\\", \\\" + _PMODE_UNK;\\r\\n     Options commandLineOptions;\\r\\n     commandLineOptions = new Options();\\r\\n     commandLineOptions.addOption(OPT_HELP, OPT_HELP_, false, \\\"Prints help and quits\\\");\\r\\n     commandLineOptions.addOption(OPT_DRIVER, \\\"driver\\\", true, \\\"JDBC driver class name\\\");\\r\\n     commandLineOptions.addOption(OPT_DRIVER_INFO, \\\"info\\\", false, \\\"Prints driver information and properties. If \\\" + OPT + OPT_CONNECTION + \\\" is not specified, all drivers on the classpath are displayed.\\\");\\r\\n     commandLineOptions.addOption(OPT_CONNECTION, \\\"url\\\", true, \\\"Connection URL\\\");\\r\\n     commandLineOptions.addOption(OPT_USER, \\\"user\\\", true, \\\"A database user name\\\");\\r\\n     commandLineOptions.addOption(OPT_PASSWORD, OPT_PASSWORD_L, true, \\\"The database password for the user specified with the \\\" + OPT + OPT_USER + \\\" option. You can obfuscate the password with org.mortbay.jetty.security.Password, see http://docs.codehaus.org/display/JETTY/Securing+Passwords\\\");\\r\\n     commandLineOptions.addOption(OPT_SQL, OPT_SQL_L, true, \\\"Runs SQL or {call stored_procedure(?, ?)} or {?=call function(?, ?)}\\\");\\r\\n     commandLineOptions.addOption(OPT_FILE_SFMD, \\\"sfmd\\\", true, \\\"Writes a SFMD file for the given SQL\\\");\\r\\n     commandLineOptions.addOption(OPT_FILE_BINDING, \\\"jdbc\\\", true, \\\"Writes a JDBC binding node file for the given SQL\\\");\\r\\n     commandLineOptions.addOption(OPT_FILE_JDBC, \\\"node\\\", true, \\\"Writes a JDBC node file for the given SQL (internal debugging)\\\");\\r\\n     commandLineOptions.addOption(OPT_WRITE_TO_FILE, \\\"outfile\\\", true, \\\"Writes the SQL output to the given file\\\");\\r\\n     commandLineOptions.addOption(OPT_DESCRIPTION, \\\"description\\\", true, \\\"SFMD description. A default description is used if omited. Example: \\\" + OPT + OPT_DESCRIPTION + \\\" \\\\\\\"Runs such and such\\\\\\\"\\\");\\r\\n     commandLineOptions.addOption(OPT_INTERACTIVE, \\\"interactive\\\", false, \\\"Runs in interactive mode, reading and writing from the console, 'go' or '/' sends a statement\\\");\\r\\n     commandLineOptions.addOption(OPT_TIMING, \\\"printTiming\\\", false, \\\"Prints timing information\\\");\\r\\n     commandLineOptions.addOption(OPT_METADATA, \\\"printMetaData\\\", false, \\\"Prints metadata information\\\");\\r\\n     commandLineOptions.addOption(OPT_STACK_TRACE, \\\"printStack\\\", false, \\\"Prints stack traces on errors\\\");\\r\\n     Option option = new Option(OPT_COLUMN_NAMES, \\\"columnNames\\\", true, \\\"Column XML names; default names column labels. Example: \\\" + OPT + OPT_COLUMN_NAMES + \\\" \\\\\\\"cname1 cname2\\\\\\\"\\\");\\r\\n     commandLineOptions.addOption(option);\\r\\n     option = new Option(OPT_PARAM_NAMES, \\\"paramNames\\\", true, \\\"Parameter XML names; default names are param1, param2, etc. Example: \\\" + OPT + OPT_PARAM_NAMES + \\\" \\\\\\\"pname1 pname2\\\\\\\"\\\");\\r\\n     commandLineOptions.addOption(option);\\r\\n     OptionGroup pOutTypesOptionGroup = new OptionGroup();\\r\\n     String pOutTypesOptionGroupDoc = OPT + OPT_PARAM_TYPES_INT + \\\" and \\\" + OPT + OPT_PARAM_TYPES_NAME + \\\" are mutually exclusive.\\\";\\r\\n     final String typesClassName = Types.class.getName();\\r\\n     option = new Option(OPT_PARAM_TYPES_INT, \\\"paramTypes\\\", true, \\\"Parameter types from \\\" + typesClassName + \\\". \\\" + pOutTypesOptionGroupDoc + \\\" Example: \\\" + OPT + OPT_PARAM_TYPES_INT + \\\" \\\\\\\"-10 12\\\\\\\"\\\");\\r\\n     commandLineOptions.addOption(option);\\r\\n     option = new Option(OPT_PARAM_TYPES_NAME, \\\"paramTypeNames\\\", true, \\\"Parameter \\\" + typesClassName + \\\" names. \\\" + pOutTypesOptionGroupDoc + \\\" Example: \\\" + OPT + OPT_PARAM_TYPES_NAME + \\\" \\\\\\\"CURSOR VARCHAR\\\\\\\"\\\");\\r\\n     commandLineOptions.addOption(option);\\r\\n     commandLineOptions.addOptionGroup(pOutTypesOptionGroup);\\r\\n     OptionGroup modesOptionGroup = new OptionGroup();\\r\\n     String modesOptionGroupDoc = OPT + OPT_PARAM_MODES_INT + \\\" and \\\" + OPT + OPT_PARAM_MODES_NAME + \\\" are mutually exclusive.\\\";\\r\\n     option = new Option(OPT_PARAM_MODES_INT, \\\"paramModes\\\", true, \\\"Parameters modes (\\\" + ParameterMetaData.parameterModeIn + \\\"=IN, \\\" + ParameterMetaData.parameterModeInOut + \\\"=INOUT, \\\" + ParameterMetaData.parameterModeOut + \\\"=OUT, \\\" + ParameterMetaData.parameterModeUnknown + \\\"=Unknown\\\" + \\\"). \\\" + modesOptionGroupDoc + \\\" Example for 2 parameters, OUT and IN: \\\" + OPT + OPT_PARAM_MODES_INT + \\\" \\\\\\\"\\\" + ParameterMetaData.parameterModeOut + \\\" \\\" + ParameterMetaData.parameterModeIn + \\\"\\\\\\\"\\\");\\r\\n     modesOptionGroup.addOption(option);\\r\\n     option = new Option(OPT_PARAM_MODES_NAME, \\\"paramModeNames\\\", true, \\\"Parameters mode names (\\\" + PMODES + \\\"). \\\" + modesOptionGroupDoc + \\\" Example for 2 parameters, OUT and IN: \\\" + OPT + OPT_PARAM_MODES_NAME + \\\" \\\\\\\"\\\" + _PMODE_OUT + \\\" \\\" + _PMODE_IN + \\\"\\\\\\\"\\\");\\r\\n     modesOptionGroup.addOption(option);\\r\\n     commandLineOptions.addOptionGroup(modesOptionGroup);\\r\\n     option = new Option(null, OPT_TRIM_L, true, \\\"Trims leading and trailing spaces from all column values. Column XML names can be optionally specified to set which columns to trim.\\\");\\r\\n     option.setOptionalArg(true);\\r\\n     commandLineOptions.addOption(option);\\r\\n     option = new Option(OPT_JDBC_TO_SFMD, OPT_JDBC_TO_SFMD_L, true, \\\"Converts the JDBC file in the first argument to an SMFD file specified in the second argument.\\\");\\r\\n     option.setArgs(2);\\r\\n     commandLineOptions.addOption(option);\\r\\n-    new HelpFormatter().printHelp(this.getClass().getName(), options);\\r\\n+    new HelpFormatter().printHelp(this.getClass().getName(), commandLineOptions);\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"bayard@apache.org","authorName":"Henri Yandell","commitYear":"2009","diff":"\"@@ -1,82 +1,82 @@\\n public void testPrintHelpLongLines() throws ParseException, IOException {\\r\\n     final String OPT = \\\"-\\\";\\r\\n     final String OPT_COLUMN_NAMES = \\\"l\\\";\\r\\n     final String OPT_CONNECTION = \\\"c\\\";\\r\\n     final String OPT_DESCRIPTION = \\\"e\\\";\\r\\n     final String OPT_DRIVER = \\\"d\\\";\\r\\n     final String OPT_DRIVER_INFO = \\\"n\\\";\\r\\n     final String OPT_FILE_BINDING = \\\"b\\\";\\r\\n     final String OPT_FILE_JDBC = \\\"j\\\";\\r\\n     final String OPT_FILE_SFMD = \\\"f\\\";\\r\\n     final String OPT_HELP = \\\"h\\\";\\r\\n     final String OPT_HELP_ = \\\"help\\\";\\r\\n     final String OPT_INTERACTIVE = \\\"i\\\";\\r\\n     final String OPT_JDBC_TO_SFMD = \\\"2\\\";\\r\\n     final String OPT_JDBC_TO_SFMD_L = \\\"jdbc2sfmd\\\";\\r\\n     final String OPT_METADATA = \\\"m\\\";\\r\\n     final String OPT_PARAM_MODES_INT = \\\"o\\\";\\r\\n     final String OPT_PARAM_MODES_NAME = \\\"O\\\";\\r\\n     final String OPT_PARAM_NAMES = \\\"a\\\";\\r\\n     final String OPT_PARAM_TYPES_INT = \\\"y\\\";\\r\\n     final String OPT_PARAM_TYPES_NAME = \\\"Y\\\";\\r\\n     final String OPT_PASSWORD = \\\"p\\\";\\r\\n     final String OPT_PASSWORD_L = \\\"password\\\";\\r\\n     final String OPT_SQL = \\\"s\\\";\\r\\n     final String OPT_SQL_L = \\\"sql\\\";\\r\\n     final String OPT_SQL_SPLIT_DEFAULT = \\\"###\\\";\\r\\n     final String OPT_SQL_SPLIT_L = \\\"splitSql\\\";\\r\\n     final String OPT_STACK_TRACE = \\\"t\\\";\\r\\n     final String OPT_TIMING = \\\"g\\\";\\r\\n     final String OPT_TRIM_L = \\\"trim\\\";\\r\\n     final String OPT_USER = \\\"u\\\";\\r\\n     final String OPT_WRITE_TO_FILE = \\\"w\\\";\\r\\n     final String _PMODE_IN = \\\"IN\\\";\\r\\n     final String _PMODE_INOUT = \\\"INOUT\\\";\\r\\n     final String _PMODE_OUT = \\\"OUT\\\";\\r\\n     final String _PMODE_UNK = \\\"Unknown\\\";\\r\\n     final String PMODES = _PMODE_IN + \\\", \\\" + _PMODE_INOUT + \\\", \\\" + _PMODE_OUT + \\\", \\\" + _PMODE_UNK;\\r\\n     Options commandLineOptions;\\r\\n     commandLineOptions = new Options();\\r\\n     commandLineOptions.addOption(OPT_HELP, OPT_HELP_, false, \\\"Prints help and quits\\\");\\r\\n     commandLineOptions.addOption(OPT_DRIVER, \\\"driver\\\", true, \\\"JDBC driver class name\\\");\\r\\n     commandLineOptions.addOption(OPT_DRIVER_INFO, \\\"info\\\", false, \\\"Prints driver information and properties. If \\\" + OPT + OPT_CONNECTION + \\\" is not specified, all drivers on the classpath are displayed.\\\");\\r\\n     commandLineOptions.addOption(OPT_CONNECTION, \\\"url\\\", true, \\\"Connection URL\\\");\\r\\n     commandLineOptions.addOption(OPT_USER, \\\"user\\\", true, \\\"A database user name\\\");\\r\\n     commandLineOptions.addOption(OPT_PASSWORD, OPT_PASSWORD_L, true, \\\"The database password for the user specified with the \\\" + OPT + OPT_USER + \\\" option. You can obfuscate the password with org.mortbay.jetty.security.Password, see http://docs.codehaus.org/display/JETTY/Securing+Passwords\\\");\\r\\n     commandLineOptions.addOption(OPT_SQL, OPT_SQL_L, true, \\\"Runs SQL or {call stored_procedure(?, ?)} or {?=call function(?, ?)}\\\");\\r\\n     commandLineOptions.addOption(OPT_FILE_SFMD, \\\"sfmd\\\", true, \\\"Writes a SFMD file for the given SQL\\\");\\r\\n     commandLineOptions.addOption(OPT_FILE_BINDING, \\\"jdbc\\\", true, \\\"Writes a JDBC binding node file for the given SQL\\\");\\r\\n     commandLineOptions.addOption(OPT_FILE_JDBC, \\\"node\\\", true, \\\"Writes a JDBC node file for the given SQL (internal debugging)\\\");\\r\\n     commandLineOptions.addOption(OPT_WRITE_TO_FILE, \\\"outfile\\\", true, \\\"Writes the SQL output to the given file\\\");\\r\\n     commandLineOptions.addOption(OPT_DESCRIPTION, \\\"description\\\", true, \\\"SFMD description. A default description is used if omited. Example: \\\" + OPT + OPT_DESCRIPTION + \\\" \\\\\\\"Runs such and such\\\\\\\"\\\");\\r\\n     commandLineOptions.addOption(OPT_INTERACTIVE, \\\"interactive\\\", false, \\\"Runs in interactive mode, reading and writing from the console, 'go' or '/' sends a statement\\\");\\r\\n     commandLineOptions.addOption(OPT_TIMING, \\\"printTiming\\\", false, \\\"Prints timing information\\\");\\r\\n     commandLineOptions.addOption(OPT_METADATA, \\\"printMetaData\\\", false, \\\"Prints metadata information\\\");\\r\\n     commandLineOptions.addOption(OPT_STACK_TRACE, \\\"printStack\\\", false, \\\"Prints stack traces on errors\\\");\\r\\n     Option option = new Option(OPT_COLUMN_NAMES, \\\"columnNames\\\", true, \\\"Column XML names; default names column labels. Example: \\\" + OPT + OPT_COLUMN_NAMES + \\\" \\\\\\\"cname1 cname2\\\\\\\"\\\");\\r\\n     commandLineOptions.addOption(option);\\r\\n     option = new Option(OPT_PARAM_NAMES, \\\"paramNames\\\", true, \\\"Parameter XML names; default names are param1, param2, etc. Example: \\\" + OPT + OPT_PARAM_NAMES + \\\" \\\\\\\"pname1 pname2\\\\\\\"\\\");\\r\\n     commandLineOptions.addOption(option);\\r\\n     OptionGroup pOutTypesOptionGroup = new OptionGroup();\\r\\n     String pOutTypesOptionGroupDoc = OPT + OPT_PARAM_TYPES_INT + \\\" and \\\" + OPT + OPT_PARAM_TYPES_NAME + \\\" are mutually exclusive.\\\";\\r\\n     final String typesClassName = Types.class.getName();\\r\\n     option = new Option(OPT_PARAM_TYPES_INT, \\\"paramTypes\\\", true, \\\"Parameter types from \\\" + typesClassName + \\\". \\\" + pOutTypesOptionGroupDoc + \\\" Example: \\\" + OPT + OPT_PARAM_TYPES_INT + \\\" \\\\\\\"-10 12\\\\\\\"\\\");\\r\\n     commandLineOptions.addOption(option);\\r\\n     option = new Option(OPT_PARAM_TYPES_NAME, \\\"paramTypeNames\\\", true, \\\"Parameter \\\" + typesClassName + \\\" names. \\\" + pOutTypesOptionGroupDoc + \\\" Example: \\\" + OPT + OPT_PARAM_TYPES_NAME + \\\" \\\\\\\"CURSOR VARCHAR\\\\\\\"\\\");\\r\\n     commandLineOptions.addOption(option);\\r\\n     commandLineOptions.addOptionGroup(pOutTypesOptionGroup);\\r\\n     OptionGroup modesOptionGroup = new OptionGroup();\\r\\n     String modesOptionGroupDoc = OPT + OPT_PARAM_MODES_INT + \\\" and \\\" + OPT + OPT_PARAM_MODES_NAME + \\\" are mutually exclusive.\\\";\\r\\n     option = new Option(OPT_PARAM_MODES_INT, \\\"paramModes\\\", true, \\\"Parameters modes (\\\" + ParameterMetaData.parameterModeIn + \\\"=IN, \\\" + ParameterMetaData.parameterModeInOut + \\\"=INOUT, \\\" + ParameterMetaData.parameterModeOut + \\\"=OUT, \\\" + ParameterMetaData.parameterModeUnknown + \\\"=Unknown\\\" + \\\"). \\\" + modesOptionGroupDoc + \\\" Example for 2 parameters, OUT and IN: \\\" + OPT + OPT_PARAM_MODES_INT + \\\" \\\\\\\"\\\" + ParameterMetaData.parameterModeOut + \\\" \\\" + ParameterMetaData.parameterModeIn + \\\"\\\\\\\"\\\");\\r\\n     modesOptionGroup.addOption(option);\\r\\n     option = new Option(OPT_PARAM_MODES_NAME, \\\"paramModeNames\\\", true, \\\"Parameters mode names (\\\" + PMODES + \\\"). \\\" + modesOptionGroupDoc + \\\" Example for 2 parameters, OUT and IN: \\\" + OPT + OPT_PARAM_MODES_NAME + \\\" \\\\\\\"\\\" + _PMODE_OUT + \\\" \\\" + _PMODE_IN + \\\"\\\\\\\"\\\");\\r\\n     modesOptionGroup.addOption(option);\\r\\n     commandLineOptions.addOptionGroup(modesOptionGroup);\\r\\n     option = new Option(null, OPT_TRIM_L, true, \\\"Trims leading and trailing spaces from all column values. Column XML names can be optionally specified to set which columns to trim.\\\");\\r\\n     option.setOptionalArg(true);\\r\\n     commandLineOptions.addOption(option);\\r\\n     option = new Option(OPT_JDBC_TO_SFMD, OPT_JDBC_TO_SFMD_L, true, \\\"Converts the JDBC file in the first argument to an SMFD file specified in the second argument.\\\");\\r\\n     option.setArgs(2);\\r\\n     commandLineOptions.addOption(option);\\r\\n-    this.testPrintHelp(commandLineOptions);\\r\\n+    new HelpFormatter().printHelp(this.getClass().getName(), options);\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2009","diff":"\"@@ -0,0 +1,82 @@\\n+public void testPrintHelpLongLines() throws ParseException, IOException {\\r\\n+    final String OPT = \\\"-\\\";\\r\\n+    final String OPT_COLUMN_NAMES = \\\"l\\\";\\r\\n+    final String OPT_CONNECTION = \\\"c\\\";\\r\\n+    final String OPT_DESCRIPTION = \\\"e\\\";\\r\\n+    final String OPT_DRIVER = \\\"d\\\";\\r\\n+    final String OPT_DRIVER_INFO = \\\"n\\\";\\r\\n+    final String OPT_FILE_BINDING = \\\"b\\\";\\r\\n+    final String OPT_FILE_JDBC = \\\"j\\\";\\r\\n+    final String OPT_FILE_SFMD = \\\"f\\\";\\r\\n+    final String OPT_HELP = \\\"h\\\";\\r\\n+    final String OPT_HELP_ = \\\"help\\\";\\r\\n+    final String OPT_INTERACTIVE = \\\"i\\\";\\r\\n+    final String OPT_JDBC_TO_SFMD = \\\"2\\\";\\r\\n+    final String OPT_JDBC_TO_SFMD_L = \\\"jdbc2sfmd\\\";\\r\\n+    final String OPT_METADATA = \\\"m\\\";\\r\\n+    final String OPT_PARAM_MODES_INT = \\\"o\\\";\\r\\n+    final String OPT_PARAM_MODES_NAME = \\\"O\\\";\\r\\n+    final String OPT_PARAM_NAMES = \\\"a\\\";\\r\\n+    final String OPT_PARAM_TYPES_INT = \\\"y\\\";\\r\\n+    final String OPT_PARAM_TYPES_NAME = \\\"Y\\\";\\r\\n+    final String OPT_PASSWORD = \\\"p\\\";\\r\\n+    final String OPT_PASSWORD_L = \\\"password\\\";\\r\\n+    final String OPT_SQL = \\\"s\\\";\\r\\n+    final String OPT_SQL_L = \\\"sql\\\";\\r\\n+    final String OPT_SQL_SPLIT_DEFAULT = \\\"###\\\";\\r\\n+    final String OPT_SQL_SPLIT_L = \\\"splitSql\\\";\\r\\n+    final String OPT_STACK_TRACE = \\\"t\\\";\\r\\n+    final String OPT_TIMING = \\\"g\\\";\\r\\n+    final String OPT_TRIM_L = \\\"trim\\\";\\r\\n+    final String OPT_USER = \\\"u\\\";\\r\\n+    final String OPT_WRITE_TO_FILE = \\\"w\\\";\\r\\n+    final String _PMODE_IN = \\\"IN\\\";\\r\\n+    final String _PMODE_INOUT = \\\"INOUT\\\";\\r\\n+    final String _PMODE_OUT = \\\"OUT\\\";\\r\\n+    final String _PMODE_UNK = \\\"Unknown\\\";\\r\\n+    final String PMODES = _PMODE_IN + \\\", \\\" + _PMODE_INOUT + \\\", \\\" + _PMODE_OUT + \\\", \\\" + _PMODE_UNK;\\r\\n+    Options commandLineOptions;\\r\\n+    commandLineOptions = new Options();\\r\\n+    commandLineOptions.addOption(OPT_HELP, OPT_HELP_, false, \\\"Prints help and quits\\\");\\r\\n+    commandLineOptions.addOption(OPT_DRIVER, \\\"driver\\\", true, \\\"JDBC driver class name\\\");\\r\\n+    commandLineOptions.addOption(OPT_DRIVER_INFO, \\\"info\\\", false, \\\"Prints driver information and properties. If \\\" + OPT + OPT_CONNECTION + \\\" is not specified, all drivers on the classpath are displayed.\\\");\\r\\n+    commandLineOptions.addOption(OPT_CONNECTION, \\\"url\\\", true, \\\"Connection URL\\\");\\r\\n+    commandLineOptions.addOption(OPT_USER, \\\"user\\\", true, \\\"A database user name\\\");\\r\\n+    commandLineOptions.addOption(OPT_PASSWORD, OPT_PASSWORD_L, true, \\\"The database password for the user specified with the \\\" + OPT + OPT_USER + \\\" option. You can obfuscate the password with org.mortbay.jetty.security.Password, see http://docs.codehaus.org/display/JETTY/Securing+Passwords\\\");\\r\\n+    commandLineOptions.addOption(OPT_SQL, OPT_SQL_L, true, \\\"Runs SQL or {call stored_procedure(?, ?)} or {?=call function(?, ?)}\\\");\\r\\n+    commandLineOptions.addOption(OPT_FILE_SFMD, \\\"sfmd\\\", true, \\\"Writes a SFMD file for the given SQL\\\");\\r\\n+    commandLineOptions.addOption(OPT_FILE_BINDING, \\\"jdbc\\\", true, \\\"Writes a JDBC binding node file for the given SQL\\\");\\r\\n+    commandLineOptions.addOption(OPT_FILE_JDBC, \\\"node\\\", true, \\\"Writes a JDBC node file for the given SQL (internal debugging)\\\");\\r\\n+    commandLineOptions.addOption(OPT_WRITE_TO_FILE, \\\"outfile\\\", true, \\\"Writes the SQL output to the given file\\\");\\r\\n+    commandLineOptions.addOption(OPT_DESCRIPTION, \\\"description\\\", true, \\\"SFMD description. A default description is used if omited. Example: \\\" + OPT + OPT_DESCRIPTION + \\\" \\\\\\\"Runs such and such\\\\\\\"\\\");\\r\\n+    commandLineOptions.addOption(OPT_INTERACTIVE, \\\"interactive\\\", false, \\\"Runs in interactive mode, reading and writing from the console, 'go' or '/' sends a statement\\\");\\r\\n+    commandLineOptions.addOption(OPT_TIMING, \\\"printTiming\\\", false, \\\"Prints timing information\\\");\\r\\n+    commandLineOptions.addOption(OPT_METADATA, \\\"printMetaData\\\", false, \\\"Prints metadata information\\\");\\r\\n+    commandLineOptions.addOption(OPT_STACK_TRACE, \\\"printStack\\\", false, \\\"Prints stack traces on errors\\\");\\r\\n+    Option option = new Option(OPT_COLUMN_NAMES, \\\"columnNames\\\", true, \\\"Column XML names; default names column labels. Example: \\\" + OPT + OPT_COLUMN_NAMES + \\\" \\\\\\\"cname1 cname2\\\\\\\"\\\");\\r\\n+    commandLineOptions.addOption(option);\\r\\n+    option = new Option(OPT_PARAM_NAMES, \\\"paramNames\\\", true, \\\"Parameter XML names; default names are param1, param2, etc. Example: \\\" + OPT + OPT_PARAM_NAMES + \\\" \\\\\\\"pname1 pname2\\\\\\\"\\\");\\r\\n+    commandLineOptions.addOption(option);\\r\\n+    OptionGroup pOutTypesOptionGroup = new OptionGroup();\\r\\n+    String pOutTypesOptionGroupDoc = OPT + OPT_PARAM_TYPES_INT + \\\" and \\\" + OPT + OPT_PARAM_TYPES_NAME + \\\" are mutually exclusive.\\\";\\r\\n+    final String typesClassName = Types.class.getName();\\r\\n+    option = new Option(OPT_PARAM_TYPES_INT, \\\"paramTypes\\\", true, \\\"Parameter types from \\\" + typesClassName + \\\". \\\" + pOutTypesOptionGroupDoc + \\\" Example: \\\" + OPT + OPT_PARAM_TYPES_INT + \\\" \\\\\\\"-10 12\\\\\\\"\\\");\\r\\n+    commandLineOptions.addOption(option);\\r\\n+    option = new Option(OPT_PARAM_TYPES_NAME, \\\"paramTypeNames\\\", true, \\\"Parameter \\\" + typesClassName + \\\" names. \\\" + pOutTypesOptionGroupDoc + \\\" Example: \\\" + OPT + OPT_PARAM_TYPES_NAME + \\\" \\\\\\\"CURSOR VARCHAR\\\\\\\"\\\");\\r\\n+    commandLineOptions.addOption(option);\\r\\n+    commandLineOptions.addOptionGroup(pOutTypesOptionGroup);\\r\\n+    OptionGroup modesOptionGroup = new OptionGroup();\\r\\n+    String modesOptionGroupDoc = OPT + OPT_PARAM_MODES_INT + \\\" and \\\" + OPT + OPT_PARAM_MODES_NAME + \\\" are mutually exclusive.\\\";\\r\\n+    option = new Option(OPT_PARAM_MODES_INT, \\\"paramModes\\\", true, \\\"Parameters modes (\\\" + ParameterMetaData.parameterModeIn + \\\"=IN, \\\" + ParameterMetaData.parameterModeInOut + \\\"=INOUT, \\\" + ParameterMetaData.parameterModeOut + \\\"=OUT, \\\" + ParameterMetaData.parameterModeUnknown + \\\"=Unknown\\\" + \\\"). \\\" + modesOptionGroupDoc + \\\" Example for 2 parameters, OUT and IN: \\\" + OPT + OPT_PARAM_MODES_INT + \\\" \\\\\\\"\\\" + ParameterMetaData.parameterModeOut + \\\" \\\" + ParameterMetaData.parameterModeIn + \\\"\\\\\\\"\\\");\\r\\n+    modesOptionGroup.addOption(option);\\r\\n+    option = new Option(OPT_PARAM_MODES_NAME, \\\"paramModeNames\\\", true, \\\"Parameters mode names (\\\" + PMODES + \\\"). \\\" + modesOptionGroupDoc + \\\" Example for 2 parameters, OUT and IN: \\\" + OPT + OPT_PARAM_MODES_NAME + \\\" \\\\\\\"\\\" + _PMODE_OUT + \\\" \\\" + _PMODE_IN + \\\"\\\\\\\"\\\");\\r\\n+    modesOptionGroup.addOption(option);\\r\\n+    commandLineOptions.addOptionGroup(modesOptionGroup);\\r\\n+    option = new Option(null, OPT_TRIM_L, true, \\\"Trims leading and trailing spaces from all column values. Column XML names can be optionally specified to set which columns to trim.\\\");\\r\\n+    option.setOptionalArg(true);\\r\\n+    commandLineOptions.addOption(option);\\r\\n+    option = new Option(OPT_JDBC_TO_SFMD, OPT_JDBC_TO_SFMD_L, true, \\\"Converts the JDBC file in the first argument to an SMFD file specified in the second argument.\\\");\\r\\n+    option.setArgs(2);\\r\\n+    commandLineOptions.addOption(option);\\r\\n+    this.testPrintHelp(commandLineOptions);\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\test\java\org\apache\commons\cli\bug\BugCLI18Test.java	testCLI18	org.apache.commons.cli.bug.BugCLI18Test.testCLI18()	33	45	1	[{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"\""},{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,10 +1,10 @@\\n @Test\\r\\n public void testCLI18() {\\r\\n-    Options options = new Options();\\r\\n+    final Options options = new Options();\\r\\n     options.addOption(new Option(\\\"a\\\", \\\"aaa\\\", false, \\\"aaaaaaa\\\"));\\r\\n     options.addOption(new Option(null, \\\"bbb\\\", false, \\\"bbbbbbb dksh fkshd fkhs dkfhsdk fhskd hksdks dhfowehfsdhfkjshf skfhkshf sf jkshfk sfh skfh skf f\\\"));\\r\\n     options.addOption(new Option(\\\"c\\\", null, false, \\\"ccccccc\\\"));\\r\\n-    HelpFormatter formatter = new HelpFormatter();\\r\\n-    StringWriter out = new StringWriter();\\r\\n+    final HelpFormatter formatter = new HelpFormatter();\\r\\n+    final StringWriter out = new StringWriter();\\r\\n     formatter.printHelp(new PrintWriter(out), 80, \\\"foobar\\\", \\\"dsfkfsh kdh hsd hsdh fkshdf ksdh fskdh fsdh fkshfk sfdkjhskjh fkjh fkjsh khsdkj hfskdhf skjdfh ksf khf s\\\", options, 2, 2, \\\"blort j jgj j jg jhghjghjgjhgjhg jgjhgj jhg jhg hjg jgjhghjg jhg hjg jhgjg jgjhghjg jg jgjhgjgjg jhg jhgjh\\\" + '\\\\r' + '\\\\n' + \\\"rarrr\\\", true);\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"tn@apache.org","authorName":"Thomas Neidhart","commitYear":"2013","diff":"\"@@ -1,9 +1,10 @@\\n+@Test\\r\\n public void testCLI18() {\\r\\n     Options options = new Options();\\r\\n     options.addOption(new Option(\\\"a\\\", \\\"aaa\\\", false, \\\"aaaaaaa\\\"));\\r\\n     options.addOption(new Option(null, \\\"bbb\\\", false, \\\"bbbbbbb dksh fkshd fkhs dkfhsdk fhskd hksdks dhfowehfsdhfkjshf skfhkshf sf jkshfk sfh skfh skf f\\\"));\\r\\n     options.addOption(new Option(\\\"c\\\", null, false, \\\"ccccccc\\\"));\\r\\n     HelpFormatter formatter = new HelpFormatter();\\r\\n     StringWriter out = new StringWriter();\\r\\n     formatter.printHelp(new PrintWriter(out), 80, \\\"foobar\\\", \\\"dsfkfsh kdh hsd hsdh fkshdf ksdh fskdh fsdh fkshfk sfdkjhskjh fkjh fkjsh khsdkj hfskdhf skjdfh ksf khf s\\\", options, 2, 2, \\\"blort j jgj j jg jhghjghjgjhgjhg jgjhgj jhg jhg hjg jgjhghjg jhg hjg jhgjg jgjhghjg jg jgjhgjgjg jhg jhgjh\\\" + '\\\\r' + '\\\\n' + \\\"rarrr\\\", true);\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2008","diff":"\"\""},{"authorEmail":"bayard@apache.org","authorName":"Henri Yandell","commitYear":"2006","diff":"\"@@ -0,0 +1,9 @@\\n+public void testCLI18() {\\r\\n+    Options options = new Options();\\r\\n+    options.addOption(new Option(\\\"a\\\", \\\"aaa\\\", false, \\\"aaaaaaa\\\"));\\r\\n+    options.addOption(new Option(null, \\\"bbb\\\", false, \\\"bbbbbbb dksh fkshd fkhs dkfhsdk fhskd hksdks dhfowehfsdhfkjshf skfhkshf sf jkshfk sfh skfh skf f\\\"));\\r\\n+    options.addOption(new Option(\\\"c\\\", null, false, \\\"ccccccc\\\"));\\r\\n+    HelpFormatter formatter = new HelpFormatter();\\r\\n+    StringWriter out = new StringWriter();\\r\\n+    formatter.printHelp(new PrintWriter(out), 80, \\\"foobar\\\", \\\"dsfkfsh kdh hsd hsdh fkshdf ksdh fskdh fsdh fkshfk sfdkjhskjh fkjh fkjsh khsdkj hfskdhf skjdfh ksf khf s\\\", options, 2, 2, \\\"blort j jgj j jg jhghjghjgjhgjhg jgjhgj jhg jhg hjg jgjhghjg jhg hjg jhgjg jgjhghjg jg jgjhgjgjg jhg jhgjh\\\" + '\\\\r' + '\\\\n' + \\\"rarrr\\\", true);\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\test\java\org\apache\commons\cli\bug\BugCLI252Test.java	getOptions	org.apache.commons.cli.bug.BugCLI252Test.getOptions()	31	36	1	[{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,6 +1,6 @@\\n private Options getOptions() {\\r\\n-    Options options = new Options();\\r\\n+    final Options options = new Options();\\r\\n     options.addOption(Option.builder().longOpt(\\\"prefix\\\").build());\\r\\n     options.addOption(Option.builder().longOpt(\\\"prefixplusplus\\\").build());\\r\\n     return options;\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"britter@apache.org","authorName":"Benedikt Ritter","commitYear":"2015","diff":"\"@@ -0,0 +1,6 @@\\n+private Options getOptions() {\\r\\n+    Options options = new Options();\\r\\n+    options.addOption(Option.builder().longOpt(\\\"prefix\\\").build());\\r\\n+    options.addOption(Option.builder().longOpt(\\\"prefixplusplus\\\").build());\\r\\n+    return options;\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\test\java\org\apache\commons\cli\bug\BugCLI252Test.java	testAmbiquousOptionName	org.apache.commons.cli.bug.BugCLI252Test.testAmbiquousOptionName()	39	43	1	[{"authorEmail":"142304+nhojpatrick@users.noreply.github.com","authorName":"John Patrick","commitYear":"2022","diff":"\"@@ -1,4 +1,4 @@\\n-@Test(expected = AmbiguousOptionException.class)\\r\\n-public void testAmbiquousOptionName() throws ParseException {\\r\\n-    new DefaultParser().parse(getOptions(), new String[] { \\\"--pref\\\" });\\r\\n+@Test\\r\\n+public void testAmbiquousOptionName() {\\r\\n+    assertThrows(AmbiguousOptionException.class, () -> new DefaultParser().parse(getOptions(), new String[] { \\\"--pref\\\" }));\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"\""},{"authorEmail":"britter@apache.org","authorName":"Benedikt Ritter","commitYear":"2015","diff":"\"@@ -0,0 +1,4 @@\\n+@Test(expected = AmbiguousOptionException.class)\\r\\n+public void testAmbiquousOptionName() throws ParseException {\\r\\n+    new DefaultParser().parse(getOptions(), new String[] { \\\"--pref\\\" });\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\test\java\org\apache\commons\cli\bug\BugCLI252Test.java	testExactOptionNameMatch	org.apache.commons.cli.bug.BugCLI252Test.testExactOptionNameMatch()	46	48	1	[{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"\""},{"authorEmail":"britter@apache.org","authorName":"Benedikt Ritter","commitYear":"2015","diff":"\"@@ -0,0 +1,4 @@\\n+@Test\\r\\n+public void testExactOptionNameMatch() throws ParseException {\\r\\n+    new DefaultParser().parse(getOptions(), new String[] { \\\"--prefix\\\" });\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\test\java\org\apache\commons\cli\bug\BugCLI265Test.java	setUp	org.apache.commons.cli.bug.BugCLI265Test.setUp()	44	53	1	[{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"@@ -1,9 +1,9 @@\\n @Before\\r\\n-public void setUp() throws Exception {\\r\\n+public void setUp() {\\r\\n     parser = new DefaultParser();\\r\\n     final Option optionT1 = Option.builder(\\\"t1\\\").hasArg().numberOfArgs(1).optionalArg(true).argName(\\\"t1_path\\\").build();\\r\\n     final Option optionA = Option.builder(\\\"a\\\").hasArg(false).build();\\r\\n     final Option optionB = Option.builder(\\\"b\\\").hasArg(false).build();\\r\\n     final Option optionLast = Option.builder(\\\"last\\\").hasArg(false).build();\\r\\n     options = new Options().addOption(optionT1).addOption(optionA).addOption(optionB).addOption(optionLast);\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,9 +1,9 @@\\n @Before\\r\\n public void setUp() throws Exception {\\r\\n     parser = new DefaultParser();\\r\\n-    Option optionT1 = Option.builder(\\\"t1\\\").hasArg().numberOfArgs(1).optionalArg(true).argName(\\\"t1_path\\\").build();\\r\\n-    Option optionA = Option.builder(\\\"a\\\").hasArg(false).build();\\r\\n-    Option optionB = Option.builder(\\\"b\\\").hasArg(false).build();\\r\\n-    Option optionLast = Option.builder(\\\"last\\\").hasArg(false).build();\\r\\n+    final Option optionT1 = Option.builder(\\\"t1\\\").hasArg().numberOfArgs(1).optionalArg(true).argName(\\\"t1_path\\\").build();\\r\\n+    final Option optionA = Option.builder(\\\"a\\\").hasArg(false).build();\\r\\n+    final Option optionB = Option.builder(\\\"b\\\").hasArg(false).build();\\r\\n+    final Option optionLast = Option.builder(\\\"last\\\").hasArg(false).build();\\r\\n     options = new Options().addOption(optionT1).addOption(optionA).addOption(optionB).addOption(optionLast);\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"britter@apache.org","authorName":"Benedikt Ritter","commitYear":"2016","diff":"\"@@ -1,7 +1,9 @@\\n @Before\\r\\n public void setUp() throws Exception {\\r\\n     parser = new DefaultParser();\\r\\n-    Option TYPE1 = Option.builder(\\\"t1\\\").hasArg().numberOfArgs(1).optionalArg(true).argName(\\\"t1_path\\\").build();\\r\\n-    Option LAST = Option.builder(\\\"last\\\").hasArg(false).build();\\r\\n-    options = new Options().addOption(TYPE1).addOption(LAST);\\r\\n+    Option optionT1 = Option.builder(\\\"t1\\\").hasArg().numberOfArgs(1).optionalArg(true).argName(\\\"t1_path\\\").build();\\r\\n+    Option optionA = Option.builder(\\\"a\\\").hasArg(false).build();\\r\\n+    Option optionB = Option.builder(\\\"b\\\").hasArg(false).build();\\r\\n+    Option optionLast = Option.builder(\\\"last\\\").hasArg(false).build();\\r\\n+    options = new Options().addOption(optionT1).addOption(optionA).addOption(optionB).addOption(optionLast);\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"britter@apache.org","authorName":"Benedikt Ritter","commitYear":"2016","diff":"\"@@ -0,0 +1,7 @@\\n+@Before\\r\\n+public void setUp() throws Exception {\\r\\n+    parser = new DefaultParser();\\r\\n+    Option TYPE1 = Option.builder(\\\"t1\\\").hasArg().numberOfArgs(1).optionalArg(true).argName(\\\"t1_path\\\").build();\\r\\n+    Option LAST = Option.builder(\\\"last\\\").hasArg(false).build();\\r\\n+    options = new Options().addOption(TYPE1).addOption(LAST);\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\test\java\org\apache\commons\cli\bug\BugCLI265Test.java	testShouldParseConcatenatedShortOptions	org.apache.commons.cli.bug.BugCLI265Test.testShouldParseConcatenatedShortOptions()	56	66	1	[{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2023","diff":"\"@@ -1,10 +1,10 @@\\n @Test\\r\\n-public void shouldParseConcatenatedShortOptions() throws Exception {\\r\\n+public void testShouldParseConcatenatedShortOptions() throws Exception {\\r\\n     final String[] concatenatedShortOptions = { \\\"-t1\\\", \\\"-ab\\\" };\\r\\n     final CommandLine commandLine = parser.parse(options, concatenatedShortOptions);\\r\\n     assertTrue(commandLine.hasOption(\\\"t1\\\"));\\r\\n     assertNull(commandLine.getOptionValue(\\\"t1\\\"));\\r\\n     assertTrue(commandLine.hasOption(\\\"a\\\"));\\r\\n     assertTrue(commandLine.hasOption(\\\"b\\\"));\\r\\n     assertFalse(commandLine.hasOption(\\\"last\\\"));\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"@@ -1,10 +1,10 @@\\n @Test\\r\\n public void shouldParseConcatenatedShortOptions() throws Exception {\\r\\n-    final String[] concatenatedShortOptions = new String[] { \\\"-t1\\\", \\\"-ab\\\" };\\r\\n+    final String[] concatenatedShortOptions = { \\\"-t1\\\", \\\"-ab\\\" };\\r\\n     final CommandLine commandLine = parser.parse(options, concatenatedShortOptions);\\r\\n     assertTrue(commandLine.hasOption(\\\"t1\\\"));\\r\\n     assertNull(commandLine.getOptionValue(\\\"t1\\\"));\\r\\n     assertTrue(commandLine.hasOption(\\\"a\\\"));\\r\\n     assertTrue(commandLine.hasOption(\\\"b\\\"));\\r\\n     assertFalse(commandLine.hasOption(\\\"last\\\"));\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,10 +1,10 @@\\n @Test\\r\\n public void shouldParseConcatenatedShortOptions() throws Exception {\\r\\n-    String[] concatenatedShortOptions = new String[] { \\\"-t1\\\", \\\"-ab\\\" };\\r\\n+    final String[] concatenatedShortOptions = new String[] { \\\"-t1\\\", \\\"-ab\\\" };\\r\\n     final CommandLine commandLine = parser.parse(options, concatenatedShortOptions);\\r\\n     assertTrue(commandLine.hasOption(\\\"t1\\\"));\\r\\n     assertNull(commandLine.getOptionValue(\\\"t1\\\"));\\r\\n     assertTrue(commandLine.hasOption(\\\"a\\\"));\\r\\n     assertTrue(commandLine.hasOption(\\\"b\\\"));\\r\\n     assertFalse(commandLine.hasOption(\\\"last\\\"));\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"britter@apache.org","authorName":"Benedikt Ritter","commitYear":"2016","diff":"\"@@ -0,0 +1,10 @@\\n+@Test\\r\\n+public void shouldParseConcatenatedShortOptions() throws Exception {\\r\\n+    String[] concatenatedShortOptions = new String[] { \\\"-t1\\\", \\\"-ab\\\" };\\r\\n+    final CommandLine commandLine = parser.parse(options, concatenatedShortOptions);\\r\\n+    assertTrue(commandLine.hasOption(\\\"t1\\\"));\\r\\n+    assertNull(commandLine.getOptionValue(\\\"t1\\\"));\\r\\n+    assertTrue(commandLine.hasOption(\\\"a\\\"));\\r\\n+    assertTrue(commandLine.hasOption(\\\"b\\\"));\\r\\n+    assertFalse(commandLine.hasOption(\\\"last\\\"));\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\test\java\org\apache\commons\cli\bug\BugCLI265Test.java	testShouldParseShortOptionWithoutValue	org.apache.commons.cli.bug.BugCLI265Test.testShouldParseShortOptionWithoutValue()	69	77	1	[{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2023","diff":"\"@@ -1,8 +1,8 @@\\n @Test\\r\\n-public void shouldParseShortOptionWithoutValue() throws Exception {\\r\\n+public void testShouldParseShortOptionWithoutValue() throws Exception {\\r\\n     final String[] twoShortOptions = { \\\"-t1\\\", \\\"-last\\\" };\\r\\n     final CommandLine commandLine = parser.parse(options, twoShortOptions);\\r\\n     assertTrue(commandLine.hasOption(\\\"t1\\\"));\\r\\n     assertNotEquals(\\\"Second option has been used as value for first option\\\", \\\"-last\\\", commandLine.getOptionValue(\\\"t1\\\"));\\r\\n     assertTrue(\\\"Second option has not been detected\\\", commandLine.hasOption(\\\"last\\\"));\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"@@ -1,8 +1,8 @@\\n @Test\\r\\n public void shouldParseShortOptionWithoutValue() throws Exception {\\r\\n-    final String[] twoShortOptions = new String[] { \\\"-t1\\\", \\\"-last\\\" };\\r\\n+    final String[] twoShortOptions = { \\\"-t1\\\", \\\"-last\\\" };\\r\\n     final CommandLine commandLine = parser.parse(options, twoShortOptions);\\r\\n     assertTrue(commandLine.hasOption(\\\"t1\\\"));\\r\\n     assertNotEquals(\\\"Second option has been used as value for first option\\\", \\\"-last\\\", commandLine.getOptionValue(\\\"t1\\\"));\\r\\n     assertTrue(\\\"Second option has not been detected\\\", commandLine.hasOption(\\\"last\\\"));\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,8 +1,8 @@\\n @Test\\r\\n public void shouldParseShortOptionWithoutValue() throws Exception {\\r\\n-    String[] twoShortOptions = new String[] { \\\"-t1\\\", \\\"-last\\\" };\\r\\n+    final String[] twoShortOptions = new String[] { \\\"-t1\\\", \\\"-last\\\" };\\r\\n     final CommandLine commandLine = parser.parse(options, twoShortOptions);\\r\\n     assertTrue(commandLine.hasOption(\\\"t1\\\"));\\r\\n     assertNotEquals(\\\"Second option has been used as value for first option\\\", \\\"-last\\\", commandLine.getOptionValue(\\\"t1\\\"));\\r\\n     assertTrue(\\\"Second option has not been detected\\\", commandLine.hasOption(\\\"last\\\"));\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"britter@apache.org","authorName":"Benedikt Ritter","commitYear":"2016","diff":"\"@@ -0,0 +1,8 @@\\n+@Test\\r\\n+public void shouldParseShortOptionWithoutValue() throws Exception {\\r\\n+    String[] twoShortOptions = new String[] { \\\"-t1\\\", \\\"-last\\\" };\\r\\n+    final CommandLine commandLine = parser.parse(options, twoShortOptions);\\r\\n+    assertTrue(commandLine.hasOption(\\\"t1\\\"));\\r\\n+    assertNotEquals(\\\"Second option has been used as value for first option\\\", \\\"-last\\\", commandLine.getOptionValue(\\\"t1\\\"));\\r\\n+    assertTrue(\\\"Second option has not been detected\\\", commandLine.hasOption(\\\"last\\\"));\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\test\java\org\apache\commons\cli\bug\BugCLI265Test.java	testShouldParseShortOptionWithValue	org.apache.commons.cli.bug.BugCLI265Test.testShouldParseShortOptionWithValue()	80	87	1	[{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2023","diff":"\"@@ -1,7 +1,7 @@\\n @Test\\r\\n-public void shouldParseShortOptionWithValue() throws Exception {\\r\\n+public void testShouldParseShortOptionWithValue() throws Exception {\\r\\n     final String[] shortOptionWithValue = { \\\"-t1\\\", \\\"path/to/my/db\\\" };\\r\\n     final CommandLine commandLine = parser.parse(options, shortOptionWithValue);\\r\\n     assertEquals(\\\"path/to/my/db\\\", commandLine.getOptionValue(\\\"t1\\\"));\\r\\n     assertFalse(commandLine.hasOption(\\\"last\\\"));\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"@@ -1,7 +1,7 @@\\n @Test\\r\\n public void shouldParseShortOptionWithValue() throws Exception {\\r\\n-    final String[] shortOptionWithValue = new String[] { \\\"-t1\\\", \\\"path/to/my/db\\\" };\\r\\n+    final String[] shortOptionWithValue = { \\\"-t1\\\", \\\"path/to/my/db\\\" };\\r\\n     final CommandLine commandLine = parser.parse(options, shortOptionWithValue);\\r\\n     assertEquals(\\\"path/to/my/db\\\", commandLine.getOptionValue(\\\"t1\\\"));\\r\\n     assertFalse(commandLine.hasOption(\\\"last\\\"));\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,7 +1,7 @@\\n @Test\\r\\n public void shouldParseShortOptionWithValue() throws Exception {\\r\\n-    String[] shortOptionWithValue = new String[] { \\\"-t1\\\", \\\"path/to/my/db\\\" };\\r\\n+    final String[] shortOptionWithValue = new String[] { \\\"-t1\\\", \\\"path/to/my/db\\\" };\\r\\n     final CommandLine commandLine = parser.parse(options, shortOptionWithValue);\\r\\n     assertEquals(\\\"path/to/my/db\\\", commandLine.getOptionValue(\\\"t1\\\"));\\r\\n     assertFalse(commandLine.hasOption(\\\"last\\\"));\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"britter@apache.org","authorName":"Benedikt Ritter","commitYear":"2016","diff":"\"@@ -0,0 +1,7 @@\\n+@Test\\r\\n+public void shouldParseShortOptionWithValue() throws Exception {\\r\\n+    String[] shortOptionWithValue = new String[] { \\\"-t1\\\", \\\"path/to/my/db\\\" };\\r\\n+    final CommandLine commandLine = parser.parse(options, shortOptionWithValue);\\r\\n+    assertEquals(\\\"path/to/my/db\\\", commandLine.getOptionValue(\\\"t1\\\"));\\r\\n+    assertFalse(commandLine.hasOption(\\\"last\\\"));\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\test\java\org\apache\commons\cli\bug\BugCLI266Test.java	buildOptionsGroup	org.apache.commons.cli.bug.BugCLI266Test.buildOptionsGroup(Options)	38	70	1	[{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"\""},{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,13 +1,13 @@\\n-private void buildOptionsGroup(Options options) {\\r\\n+private void buildOptionsGroup(final Options options) {\\r\\n     final OptionGroup firstGroup = new OptionGroup();\\r\\n     final OptionGroup secondGroup = new OptionGroup();\\r\\n     firstGroup.setRequired(true);\\r\\n     secondGroup.setRequired(true);\\r\\n     firstGroup.addOption(Option.builder(\\\"d\\\").longOpt(\\\"db\\\").hasArg().argName(\\\"table-name\\\").build());\\r\\n     firstGroup.addOption(Option.builder(\\\"f\\\").longOpt(\\\"flat-file\\\").hasArg().argName(\\\"input.csv\\\").build());\\r\\n     options.addOptionGroup(firstGroup);\\r\\n     secondGroup.addOption(Option.builder(\\\"x\\\").hasArg().argName(\\\"arg1\\\").build());\\r\\n     secondGroup.addOption(Option.builder(\\\"s\\\").build());\\r\\n     secondGroup.addOption(Option.builder(\\\"p\\\").hasArg().argName(\\\"arg1\\\").build());\\r\\n     options.addOptionGroup(secondGroup);\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,13 +1,13 @@\\n private void buildOptionsGroup(Options options) {\\r\\n-    OptionGroup firstGroup = new OptionGroup();\\r\\n-    OptionGroup secondGroup = new OptionGroup();\\r\\n+    final OptionGroup firstGroup = new OptionGroup();\\r\\n+    final OptionGroup secondGroup = new OptionGroup();\\r\\n     firstGroup.setRequired(true);\\r\\n     secondGroup.setRequired(true);\\r\\n     firstGroup.addOption(Option.builder(\\\"d\\\").longOpt(\\\"db\\\").hasArg().argName(\\\"table-name\\\").build());\\r\\n     firstGroup.addOption(Option.builder(\\\"f\\\").longOpt(\\\"flat-file\\\").hasArg().argName(\\\"input.csv\\\").build());\\r\\n     options.addOptionGroup(firstGroup);\\r\\n     secondGroup.addOption(Option.builder(\\\"x\\\").hasArg().argName(\\\"arg1\\\").build());\\r\\n     secondGroup.addOption(Option.builder(\\\"s\\\").build());\\r\\n     secondGroup.addOption(Option.builder(\\\"p\\\").hasArg().argName(\\\"arg1\\\").build());\\r\\n     options.addOptionGroup(secondGroup);\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"britter@apache.org","authorName":"Benedikt Ritter","commitYear":"2016","diff":"\"@@ -0,0 +1,13 @@\\n+private void buildOptionsGroup(Options options) {\\r\\n+    OptionGroup firstGroup = new OptionGroup();\\r\\n+    OptionGroup secondGroup = new OptionGroup();\\r\\n+    firstGroup.setRequired(true);\\r\\n+    secondGroup.setRequired(true);\\r\\n+    firstGroup.addOption(Option.builder(\\\"d\\\").longOpt(\\\"db\\\").hasArg().argName(\\\"table-name\\\").build());\\r\\n+    firstGroup.addOption(Option.builder(\\\"f\\\").longOpt(\\\"flat-file\\\").hasArg().argName(\\\"input.csv\\\").build());\\r\\n+    options.addOptionGroup(firstGroup);\\r\\n+    secondGroup.addOption(Option.builder(\\\"x\\\").hasArg().argName(\\\"arg1\\\").build());\\r\\n+    secondGroup.addOption(Option.builder(\\\"s\\\").build());\\r\\n+    secondGroup.addOption(Option.builder(\\\"p\\\").hasArg().argName(\\\"arg1\\\").build());\\r\\n+    options.addOptionGroup(secondGroup);\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\test\java\org\apache\commons\cli\bug\BugCLI266Test.java	getOptions	org.apache.commons.cli.bug.BugCLI266Test.getOptions()	72	104	1	[{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"\""},{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,13 +1,13 @@\\n private Options getOptions() {\\r\\n-    Options options = new Options();\\r\\n-    Option help = Option.builder(\\\"h\\\").longOpt(\\\"help\\\").desc(\\\"Prints this help message\\\").build();\\r\\n+    final Options options = new Options();\\r\\n+    final Option help = Option.builder(\\\"h\\\").longOpt(\\\"help\\\").desc(\\\"Prints this help message\\\").build();\\r\\n     options.addOption(help);\\r\\n     buildOptionsGroup(options);\\r\\n-    Option t = Option.builder(\\\"t\\\").required().hasArg().argName(\\\"file\\\").build();\\r\\n-    Option w = Option.builder(\\\"w\\\").required().hasArg().argName(\\\"word\\\").build();\\r\\n-    Option o = Option.builder(\\\"o\\\").hasArg().argName(\\\"directory\\\").build();\\r\\n+    final Option t = Option.builder(\\\"t\\\").required().hasArg().argName(\\\"file\\\").build();\\r\\n+    final Option w = Option.builder(\\\"w\\\").required().hasArg().argName(\\\"word\\\").build();\\r\\n+    final Option o = Option.builder(\\\"o\\\").hasArg().argName(\\\"directory\\\").build();\\r\\n     options.addOption(t);\\r\\n     options.addOption(w);\\r\\n     options.addOption(o);\\r\\n     return options;\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"britter@apache.org","authorName":"Benedikt Ritter","commitYear":"2016","diff":"\"@@ -0,0 +1,13 @@\\n+private Options getOptions() {\\r\\n+    Options options = new Options();\\r\\n+    Option help = Option.builder(\\\"h\\\").longOpt(\\\"help\\\").desc(\\\"Prints this help message\\\").build();\\r\\n+    options.addOption(help);\\r\\n+    buildOptionsGroup(options);\\r\\n+    Option t = Option.builder(\\\"t\\\").required().hasArg().argName(\\\"file\\\").build();\\r\\n+    Option w = Option.builder(\\\"w\\\").required().hasArg().argName(\\\"word\\\").build();\\r\\n+    Option o = Option.builder(\\\"o\\\").hasArg().argName(\\\"directory\\\").build();\\r\\n+    options.addOption(t);\\r\\n+    options.addOption(w);\\r\\n+    options.addOption(o);\\r\\n+    return options;\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\test\java\org\apache\commons\cli\bug\BugCLI266Test.java	testOptionComparatorDefaultOrder	org.apache.commons.cli.bug.BugCLI266Test.testOptionComparatorDefaultOrder()	107	116	2	[{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"@@ -1,11 +1,11 @@\\n @Test\\r\\n-public void testOptionComparatorDefaultOrder() throws ParseException {\\r\\n+public void testOptionComparatorDefaultOrder() {\\r\\n     final HelpFormatter formatter = new HelpFormatter();\\r\\n     final List<Option> options = new ArrayList<>(getOptions().getOptions());\\r\\n     Collections.sort(options, formatter.getOptionComparator());\\r\\n     int i = 0;\\r\\n     for (final Option o : options) {\\r\\n         Assert.assertEquals(o.getOpt(), sortOrder.get(i));\\r\\n         i++;\\r\\n     }\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"\""},{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2020","diff":"\"@@ -1,11 +1,11 @@\\n @Test\\r\\n public void testOptionComparatorDefaultOrder() throws ParseException {\\r\\n     final HelpFormatter formatter = new HelpFormatter();\\r\\n-    final List<Option> options = new ArrayList<Option>(getOptions().getOptions());\\r\\n+    final List<Option> options = new ArrayList<>(getOptions().getOptions());\\r\\n     Collections.sort(options, formatter.getOptionComparator());\\r\\n     int i = 0;\\r\\n     for (final Option o : options) {\\r\\n         Assert.assertEquals(o.getOpt(), sortOrder.get(i));\\r\\n         i++;\\r\\n     }\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,11 +1,11 @@\\n @Test\\r\\n public void testOptionComparatorDefaultOrder() throws ParseException {\\r\\n-    HelpFormatter formatter = new HelpFormatter();\\r\\n-    List<Option> options = new ArrayList<Option>(getOptions().getOptions());\\r\\n+    final HelpFormatter formatter = new HelpFormatter();\\r\\n+    final List<Option> options = new ArrayList<Option>(getOptions().getOptions());\\r\\n     Collections.sort(options, formatter.getOptionComparator());\\r\\n     int i = 0;\\r\\n-    for (Option o : options) {\\r\\n+    for (final Option o : options) {\\r\\n         Assert.assertEquals(o.getOpt(), sortOrder.get(i));\\r\\n         i++;\\r\\n     }\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"britter@apache.org","authorName":"Benedikt Ritter","commitYear":"2016","diff":"\"@@ -0,0 +1,11 @@\\n+@Test\\r\\n+public void testOptionComparatorDefaultOrder() throws ParseException {\\r\\n+    HelpFormatter formatter = new HelpFormatter();\\r\\n+    List<Option> options = new ArrayList<Option>(getOptions().getOptions());\\r\\n+    Collections.sort(options, formatter.getOptionComparator());\\r\\n+    int i = 0;\\r\\n+    for (Option o : options) {\\r\\n+        Assert.assertEquals(o.getOpt(), sortOrder.get(i));\\r\\n+        i++;\\r\\n+    }\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\test\java\org\apache\commons\cli\bug\BugCLI266Test.java	testOptionComparatorInsertedOrder	org.apache.commons.cli.bug.BugCLI266Test.testOptionComparatorInsertedOrder()	119	126	2	[{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"@@ -1,9 +1,9 @@\\n @Test\\r\\n-public void testOptionComparatorInsertedOrder() throws ParseException {\\r\\n+public void testOptionComparatorInsertedOrder() {\\r\\n     final Collection<Option> options = getOptions().getOptions();\\r\\n     int i = 0;\\r\\n     for (final Option o : options) {\\r\\n         Assert.assertEquals(o.getOpt(), insertedOrder.get(i));\\r\\n         i++;\\r\\n     }\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"\""},{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,9 +1,9 @@\\n @Test\\r\\n public void testOptionComparatorInsertedOrder() throws ParseException {\\r\\n-    Collection<Option> options = getOptions().getOptions();\\r\\n+    final Collection<Option> options = getOptions().getOptions();\\r\\n     int i = 0;\\r\\n-    for (Option o : options) {\\r\\n+    for (final Option o : options) {\\r\\n         Assert.assertEquals(o.getOpt(), insertedOrder.get(i));\\r\\n         i++;\\r\\n     }\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"britter@apache.org","authorName":"Benedikt Ritter","commitYear":"2016","diff":"\"@@ -0,0 +1,9 @@\\n+@Test\\r\\n+public void testOptionComparatorInsertedOrder() throws ParseException {\\r\\n+    Collection<Option> options = getOptions().getOptions();\\r\\n+    int i = 0;\\r\\n+    for (Option o : options) {\\r\\n+        Assert.assertEquals(o.getOpt(), insertedOrder.get(i));\\r\\n+        i++;\\r\\n+    }\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\test\java\org\apache\commons\cli\bug\BugCLI71Test.java	setUp	org.apache.commons.cli.bug.BugCLI71Test.setUp()	38	50	1	[{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"\""},{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,11 +1,11 @@\\n @Before\\r\\n public void setUp() {\\r\\n     options = new Options();\\r\\n-    Option algorithm = new Option(\\\"a\\\", \\\"algo\\\", true, \\\"the algorithm which it to perform executing\\\");\\r\\n+    final Option algorithm = new Option(\\\"a\\\", \\\"algo\\\", true, \\\"the algorithm which it to perform executing\\\");\\r\\n     algorithm.setArgName(\\\"algorithm name\\\");\\r\\n     options.addOption(algorithm);\\r\\n-    Option key = new Option(\\\"k\\\", \\\"key\\\", true, \\\"the key the setted algorithm uses to process\\\");\\r\\n+    final Option key = new Option(\\\"k\\\", \\\"key\\\", true, \\\"the key the setted algorithm uses to process\\\");\\r\\n     algorithm.setArgName(\\\"value\\\");\\r\\n     options.addOption(key);\\r\\n     parser = new PosixParser();\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"tn@apache.org","authorName":"Thomas Neidhart","commitYear":"2013","diff":"\"@@ -1,11 +1,11 @@\\n-@Override\\r\\n+@Before\\r\\n public void setUp() {\\r\\n     options = new Options();\\r\\n     Option algorithm = new Option(\\\"a\\\", \\\"algo\\\", true, \\\"the algorithm which it to perform executing\\\");\\r\\n     algorithm.setArgName(\\\"algorithm name\\\");\\r\\n     options.addOption(algorithm);\\r\\n     Option key = new Option(\\\"k\\\", \\\"key\\\", true, \\\"the key the setted algorithm uses to process\\\");\\r\\n     algorithm.setArgName(\\\"value\\\");\\r\\n     options.addOption(key);\\r\\n     parser = new PosixParser();\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"sebb@apache.org","authorName":"Sebastian Bazley","commitYear":"2013","diff":"\"@@ -1,10 +1,11 @@\\n+@Override\\r\\n public void setUp() {\\r\\n     options = new Options();\\r\\n     Option algorithm = new Option(\\\"a\\\", \\\"algo\\\", true, \\\"the algorithm which it to perform executing\\\");\\r\\n     algorithm.setArgName(\\\"algorithm name\\\");\\r\\n     options.addOption(algorithm);\\r\\n     Option key = new Option(\\\"k\\\", \\\"key\\\", true, \\\"the key the setted algorithm uses to process\\\");\\r\\n     algorithm.setArgName(\\\"value\\\");\\r\\n     options.addOption(key);\\r\\n     parser = new PosixParser();\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"bayard@apache.org","authorName":"Henri Yandell","commitYear":"2007","diff":"\"@@ -0,0 +1,10 @@\\n+public void setUp() {\\r\\n+    options = new Options();\\r\\n+    Option algorithm = new Option(\\\"a\\\", \\\"algo\\\", true, \\\"the algorithm which it to perform executing\\\");\\r\\n+    algorithm.setArgName(\\\"algorithm name\\\");\\r\\n+    options.addOption(algorithm);\\r\\n+    Option key = new Option(\\\"k\\\", \\\"key\\\", true, \\\"the key the setted algorithm uses to process\\\");\\r\\n+    algorithm.setArgName(\\\"value\\\");\\r\\n+    options.addOption(key);\\r\\n+    parser = new PosixParser();\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\test\java\org\apache\commons\cli\bug\BugCLI71Test.java	testBasic	org.apache.commons.cli.bug.BugCLI71Test.testBasic()	53	58	1	[{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"@@ -1,7 +1,7 @@\\n @Test\\r\\n public void testBasic() throws Exception {\\r\\n-    final String[] args = new String[] { \\\"-a\\\", \\\"Caesar\\\", \\\"-k\\\", \\\"A\\\" };\\r\\n+    final String[] args = { \\\"-a\\\", \\\"Caesar\\\", \\\"-k\\\", \\\"A\\\" };\\r\\n     final CommandLine line = parser.parse(options, args);\\r\\n     assertEquals(\\\"Caesar\\\", line.getOptionValue(\\\"a\\\"));\\r\\n     assertEquals(\\\"A\\\", line.getOptionValue(\\\"k\\\"));\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,7 +1,7 @@\\n @Test\\r\\n public void testBasic() throws Exception {\\r\\n-    String[] args = new String[] { \\\"-a\\\", \\\"Caesar\\\", \\\"-k\\\", \\\"A\\\" };\\r\\n-    CommandLine line = parser.parse(options, args);\\r\\n+    final String[] args = new String[] { \\\"-a\\\", \\\"Caesar\\\", \\\"-k\\\", \\\"A\\\" };\\r\\n+    final CommandLine line = parser.parse(options, args);\\r\\n     assertEquals(\\\"Caesar\\\", line.getOptionValue(\\\"a\\\"));\\r\\n     assertEquals(\\\"A\\\", line.getOptionValue(\\\"k\\\"));\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"tn@apache.org","authorName":"Thomas Neidhart","commitYear":"2013","diff":"\"@@ -1,6 +1,7 @@\\n+@Test\\r\\n public void testBasic() throws Exception {\\r\\n     String[] args = new String[] { \\\"-a\\\", \\\"Caesar\\\", \\\"-k\\\", \\\"A\\\" };\\r\\n     CommandLine line = parser.parse(options, args);\\r\\n     assertEquals(\\\"Caesar\\\", line.getOptionValue(\\\"a\\\"));\\r\\n     assertEquals(\\\"A\\\", line.getOptionValue(\\\"k\\\"));\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"bayard@apache.org","authorName":"Henri Yandell","commitYear":"2007","diff":"\"@@ -0,0 +1,6 @@\\n+public void testBasic() throws Exception {\\r\\n+    String[] args = new String[] { \\\"-a\\\", \\\"Caesar\\\", \\\"-k\\\", \\\"A\\\" };\\r\\n+    CommandLine line = parser.parse(options, args);\\r\\n+    assertEquals(\\\"Caesar\\\", line.getOptionValue(\\\"a\\\"));\\r\\n+    assertEquals(\\\"A\\\", line.getOptionValue(\\\"k\\\"));\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\test\java\org\apache\commons\cli\bug\BugCLI71Test.java	testGetsDefaultIfOptional	org.apache.commons.cli.bug.BugCLI71Test.testGetsDefaultIfOptional()	61	68	1	[{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"@@ -1,8 +1,8 @@\\n @Test\\r\\n public void testGetsDefaultIfOptional() throws Exception {\\r\\n-    final String[] args = new String[] { \\\"-k\\\", \\\"-a\\\", \\\"Caesar\\\" };\\r\\n+    final String[] args = { \\\"-k\\\", \\\"-a\\\", \\\"Caesar\\\" };\\r\\n     options.getOption(\\\"k\\\").setOptionalArg(true);\\r\\n     final CommandLine line = parser.parse(options, args);\\r\\n     assertEquals(\\\"Caesar\\\", line.getOptionValue(\\\"a\\\"));\\r\\n     assertEquals(\\\"a\\\", line.getOptionValue('k', \\\"a\\\"));\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2019","diff":"\"\""},{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,8 +1,8 @@\\n @Test\\r\\n public void testGetsDefaultIfOptional() throws Exception {\\r\\n-    String[] args = new String[] { \\\"-k\\\", \\\"-a\\\", \\\"Caesar\\\" };\\r\\n+    final String[] args = new String[] { \\\"-k\\\", \\\"-a\\\", \\\"Caesar\\\" };\\r\\n     options.getOption(\\\"k\\\").setOptionalArg(true);\\r\\n-    CommandLine line = parser.parse(options, args);\\r\\n+    final CommandLine line = parser.parse(options, args);\\r\\n     assertEquals(\\\"Caesar\\\", line.getOptionValue(\\\"a\\\"));\\r\\n     assertEquals(\\\"a\\\", line.getOptionValue('k', \\\"a\\\"));\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"tn@apache.org","authorName":"Thomas Neidhart","commitYear":"2013","diff":"\"@@ -1,7 +1,8 @@\\n+@Test\\r\\n public void testGetsDefaultIfOptional() throws Exception {\\r\\n     String[] args = new String[] { \\\"-k\\\", \\\"-a\\\", \\\"Caesar\\\" };\\r\\n     options.getOption(\\\"k\\\").setOptionalArg(true);\\r\\n     CommandLine line = parser.parse(options, args);\\r\\n     assertEquals(\\\"Caesar\\\", line.getOptionValue(\\\"a\\\"));\\r\\n     assertEquals(\\\"a\\\", line.getOptionValue('k', \\\"a\\\"));\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2010","diff":"\"@@ -1,7 +1,7 @@\\n public void testGetsDefaultIfOptional() throws Exception {\\r\\n     String[] args = new String[] { \\\"-k\\\", \\\"-a\\\", \\\"Caesar\\\" };\\r\\n     options.getOption(\\\"k\\\").setOptionalArg(true);\\r\\n     CommandLine line = parser.parse(options, args);\\r\\n     assertEquals(\\\"Caesar\\\", line.getOptionValue(\\\"a\\\"));\\r\\n-    assertEquals(\\\"a\\\", line.getOptionValue(\\\"k\\\", \\\"a\\\"));\\r\\n+    assertEquals(\\\"a\\\", line.getOptionValue('k', \\\"a\\\"));\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"bayard@apache.org","authorName":"Henri Yandell","commitYear":"2007","diff":"\"@@ -0,0 +1,7 @@\\n+public void testGetsDefaultIfOptional() throws Exception {\\r\\n+    String[] args = new String[] { \\\"-k\\\", \\\"-a\\\", \\\"Caesar\\\" };\\r\\n+    options.getOption(\\\"k\\\").setOptionalArg(true);\\r\\n+    CommandLine line = parser.parse(options, args);\\r\\n+    assertEquals(\\\"Caesar\\\", line.getOptionValue(\\\"a\\\"));\\r\\n+    assertEquals(\\\"a\\\", line.getOptionValue(\\\"k\\\", \\\"a\\\"));\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\test\java\org\apache\commons\cli\bug\BugCLI71Test.java	testLackOfError	org.apache.commons.cli.bug.BugCLI71Test.testLackOfError()	71	79	3	[{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"@@ -1,10 +1,10 @@\\n @Test\\r\\n public void testLackOfError() throws Exception {\\r\\n-    final String[] args = new String[] { \\\"-k\\\", \\\"-a\\\", \\\"Caesar\\\" };\\r\\n+    final String[] args = { \\\"-k\\\", \\\"-a\\\", \\\"Caesar\\\" };\\r\\n     try {\\r\\n         parser.parse(options, args);\\r\\n         fail(\\\"MissingArgumentException expected\\\");\\r\\n     } catch (final MissingArgumentException e) {\\r\\n         assertEquals(\\\"option missing an argument\\\", \\\"k\\\", e.getOption().getOpt());\\r\\n     }\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,10 +1,10 @@\\n @Test\\r\\n public void testLackOfError() throws Exception {\\r\\n-    String[] args = new String[] { \\\"-k\\\", \\\"-a\\\", \\\"Caesar\\\" };\\r\\n+    final String[] args = new String[] { \\\"-k\\\", \\\"-a\\\", \\\"Caesar\\\" };\\r\\n     try {\\r\\n         parser.parse(options, args);\\r\\n         fail(\\\"MissingArgumentException expected\\\");\\r\\n-    } catch (MissingArgumentException e) {\\r\\n+    } catch (final MissingArgumentException e) {\\r\\n         assertEquals(\\\"option missing an argument\\\", \\\"k\\\", e.getOption().getOpt());\\r\\n     }\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"tn@apache.org","authorName":"Thomas Neidhart","commitYear":"2013","diff":"\"@@ -1,9 +1,10 @@\\n+@Test\\r\\n public void testLackOfError() throws Exception {\\r\\n     String[] args = new String[] { \\\"-k\\\", \\\"-a\\\", \\\"Caesar\\\" };\\r\\n     try {\\r\\n         parser.parse(options, args);\\r\\n         fail(\\\"MissingArgumentException expected\\\");\\r\\n     } catch (MissingArgumentException e) {\\r\\n         assertEquals(\\\"option missing an argument\\\", \\\"k\\\", e.getOption().getOpt());\\r\\n     }\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"sebb@apache.org","authorName":"Sebastian Bazley","commitYear":"2013","diff":"\"@@ -1,9 +1,9 @@\\n public void testLackOfError() throws Exception {\\r\\n     String[] args = new String[] { \\\"-k\\\", \\\"-a\\\", \\\"Caesar\\\" };\\r\\n     try {\\r\\n-        CommandLine line = parser.parse(options, args);\\r\\n+        parser.parse(options, args);\\r\\n         fail(\\\"MissingArgumentException expected\\\");\\r\\n     } catch (MissingArgumentException e) {\\r\\n         assertEquals(\\\"option missing an argument\\\", \\\"k\\\", e.getOption().getOpt());\\r\\n     }\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2008","diff":"\"@@ -1,8 +1,9 @@\\n public void testLackOfError() throws Exception {\\r\\n     String[] args = new String[] { \\\"-k\\\", \\\"-a\\\", \\\"Caesar\\\" };\\r\\n     try {\\r\\n         CommandLine line = parser.parse(options, args);\\r\\n         fail(\\\"MissingArgumentException expected\\\");\\r\\n-    } catch (MissingArgumentException mae) {\\r\\n+    } catch (MissingArgumentException e) {\\r\\n+        assertEquals(\\\"option missing an argument\\\", \\\"k\\\", e.getOption().getOpt());\\r\\n     }\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"bayard@apache.org","authorName":"Henri Yandell","commitYear":"2007","diff":"\"@@ -0,0 +1,8 @@\\n+public void testLackOfError() throws Exception {\\r\\n+    String[] args = new String[] { \\\"-k\\\", \\\"-a\\\", \\\"Caesar\\\" };\\r\\n+    try {\\r\\n+        CommandLine line = parser.parse(options, args);\\r\\n+        fail(\\\"MissingArgumentException expected\\\");\\r\\n+    } catch (MissingArgumentException mae) {\\r\\n+    }\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\test\java\org\apache\commons\cli\bug\BugCLI71Test.java	testMistakenArgument	org.apache.commons.cli.bug.BugCLI71Test.testMistakenArgument()	82	89	1	[{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"@@ -1,9 +1,9 @@\\n @Test\\r\\n public void testMistakenArgument() throws Exception {\\r\\n-    String[] args = new String[] { \\\"-a\\\", \\\"Caesar\\\", \\\"-k\\\", \\\"A\\\" };\\r\\n+    String[] args = { \\\"-a\\\", \\\"Caesar\\\", \\\"-k\\\", \\\"A\\\" };\\r\\n     CommandLine line = parser.parse(options, args);\\r\\n     args = new String[] { \\\"-a\\\", \\\"Caesar\\\", \\\"-k\\\", \\\"a\\\" };\\r\\n     line = parser.parse(options, args);\\r\\n     assertEquals(\\\"Caesar\\\", line.getOptionValue(\\\"a\\\"));\\r\\n     assertEquals(\\\"a\\\", line.getOptionValue(\\\"k\\\"));\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"tn@apache.org","authorName":"Thomas Neidhart","commitYear":"2013","diff":"\"@@ -1,8 +1,9 @@\\n+@Test\\r\\n public void testMistakenArgument() throws Exception {\\r\\n     String[] args = new String[] { \\\"-a\\\", \\\"Caesar\\\", \\\"-k\\\", \\\"A\\\" };\\r\\n     CommandLine line = parser.parse(options, args);\\r\\n     args = new String[] { \\\"-a\\\", \\\"Caesar\\\", \\\"-k\\\", \\\"a\\\" };\\r\\n     line = parser.parse(options, args);\\r\\n     assertEquals(\\\"Caesar\\\", line.getOptionValue(\\\"a\\\"));\\r\\n     assertEquals(\\\"a\\\", line.getOptionValue(\\\"k\\\"));\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"bayard@apache.org","authorName":"Henri Yandell","commitYear":"2007","diff":"\"@@ -0,0 +1,8 @@\\n+public void testMistakenArgument() throws Exception {\\r\\n+    String[] args = new String[] { \\\"-a\\\", \\\"Caesar\\\", \\\"-k\\\", \\\"A\\\" };\\r\\n+    CommandLine line = parser.parse(options, args);\\r\\n+    args = new String[] { \\\"-a\\\", \\\"Caesar\\\", \\\"-k\\\", \\\"a\\\" };\\r\\n+    line = parser.parse(options, args);\\r\\n+    assertEquals(\\\"Caesar\\\", line.getOptionValue(\\\"a\\\"));\\r\\n+    assertEquals(\\\"a\\\", line.getOptionValue(\\\"k\\\"));\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\test\java\org\apache\commons\cli\bug\BugsTest.java	test11456	org.apache.commons.cli.bug.BugsTest.test11456()	49	71	1	[{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"@@ -1,17 +1,17 @@\\n @Test\\r\\n public void test11456() throws Exception {\\r\\n     Options options = new Options();\\r\\n     options.addOption(OptionBuilder.hasOptionalArg().create('a'));\\r\\n     options.addOption(OptionBuilder.hasArg().create('b'));\\r\\n-    String[] args = new String[] { \\\"-a\\\", \\\"-bvalue\\\" };\\r\\n+    String[] args = { \\\"-a\\\", \\\"-bvalue\\\" };\\r\\n     CommandLineParser parser = new PosixParser();\\r\\n     CommandLine cmd = parser.parse(options, args);\\r\\n     assertEquals(cmd.getOptionValue('b'), \\\"value\\\");\\r\\n     options = new Options();\\r\\n     options.addOption(OptionBuilder.hasOptionalArg().create('a'));\\r\\n     options.addOption(OptionBuilder.hasArg().create('b'));\\r\\n     args = new String[] { \\\"-a\\\", \\\"-b\\\", \\\"value\\\" };\\r\\n     parser = new GnuParser();\\r\\n     cmd = parser.parse(options, args);\\r\\n     assertEquals(cmd.getOptionValue('b'), \\\"value\\\");\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2019","diff":"\"\""},{"authorEmail":"tn@apache.org","authorName":"Thomas Neidhart","commitYear":"2013","diff":"\"@@ -1,16 +1,17 @@\\n+@Test\\r\\n public void test11456() throws Exception {\\r\\n     Options options = new Options();\\r\\n     options.addOption(OptionBuilder.hasOptionalArg().create('a'));\\r\\n     options.addOption(OptionBuilder.hasArg().create('b'));\\r\\n     String[] args = new String[] { \\\"-a\\\", \\\"-bvalue\\\" };\\r\\n     CommandLineParser parser = new PosixParser();\\r\\n     CommandLine cmd = parser.parse(options, args);\\r\\n     assertEquals(cmd.getOptionValue('b'), \\\"value\\\");\\r\\n     options = new Options();\\r\\n     options.addOption(OptionBuilder.hasOptionalArg().create('a'));\\r\\n     options.addOption(OptionBuilder.hasArg().create('b'));\\r\\n     args = new String[] { \\\"-a\\\", \\\"-b\\\", \\\"value\\\" };\\r\\n     parser = new GnuParser();\\r\\n     cmd = parser.parse(options, args);\\r\\n     assertEquals(cmd.getOptionValue('b'), \\\"value\\\");\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2008","diff":"\"\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2008","diff":"\"@@ -1,24 +1,16 @@\\n-public void test11456() {\\r\\n+public void test11456() throws Exception {\\r\\n     Options options = new Options();\\r\\n     options.addOption(OptionBuilder.hasOptionalArg().create('a'));\\r\\n     options.addOption(OptionBuilder.hasArg().create('b'));\\r\\n     String[] args = new String[] { \\\"-a\\\", \\\"-bvalue\\\" };\\r\\n     CommandLineParser parser = new PosixParser();\\r\\n-    try {\\r\\n-        CommandLine cmd = parser.parse(options, args);\\r\\n-        assertEquals(cmd.getOptionValue('b'), \\\"value\\\");\\r\\n-    } catch (ParseException exp) {\\r\\n-        fail(\\\"Unexpected Exception: \\\" + exp.getMessage());\\r\\n-    }\\r\\n+    CommandLine cmd = parser.parse(options, args);\\r\\n+    assertEquals(cmd.getOptionValue('b'), \\\"value\\\");\\r\\n     options = new Options();\\r\\n     options.addOption(OptionBuilder.hasOptionalArg().create('a'));\\r\\n     options.addOption(OptionBuilder.hasArg().create('b'));\\r\\n     args = new String[] { \\\"-a\\\", \\\"-b\\\", \\\"value\\\" };\\r\\n     parser = new GnuParser();\\r\\n-    try {\\r\\n-        CommandLine cmd = parser.parse(options, args);\\r\\n-        assertEquals(cmd.getOptionValue('b'), \\\"value\\\");\\r\\n-    } catch (ParseException exp) {\\r\\n-        fail(\\\"Unexpected Exception: \\\" + exp.getMessage());\\r\\n-    }\\r\\n+    cmd = parser.parse(options, args);\\r\\n+    assertEquals(cmd.getOptionValue('b'), \\\"value\\\");\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -1,24 +1,24 @@\\n public void test11456() {\\r\\n     Options options = new Options();\\r\\n     options.addOption(OptionBuilder.hasOptionalArg().create('a'));\\r\\n     options.addOption(OptionBuilder.hasArg().create('b'));\\r\\n     String[] args = new String[] { \\\"-a\\\", \\\"-bvalue\\\" };\\r\\n-    CommandLineParser parser = CommandLineParserFactory.newParser();\\r\\n+    CommandLineParser parser = new PosixParser();\\r\\n     try {\\r\\n         CommandLine cmd = parser.parse(options, args);\\r\\n         assertEquals(cmd.getOptionValue('b'), \\\"value\\\");\\r\\n     } catch (ParseException exp) {\\r\\n         fail(\\\"Unexpected Exception: \\\" + exp.getMessage());\\r\\n     }\\r\\n     options = new Options();\\r\\n     options.addOption(OptionBuilder.hasOptionalArg().create('a'));\\r\\n     options.addOption(OptionBuilder.hasArg().create('b'));\\r\\n     args = new String[] { \\\"-a\\\", \\\"-b\\\", \\\"value\\\" };\\r\\n-    parser = CommandLineParserFactory.newParser(\\\"org.apache.commons.cli.GnuParser\\\");\\r\\n+    parser = new GnuParser();\\r\\n     try {\\r\\n         CommandLine cmd = parser.parse(options, args);\\r\\n         assertEquals(cmd.getOptionValue('b'), \\\"value\\\");\\r\\n     } catch (ParseException exp) {\\r\\n         fail(\\\"Unexpected Exception: \\\" + exp.getMessage());\\r\\n     }\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -0,0 +1,24 @@\\n+public void test11456() {\\r\\n+    Options options = new Options();\\r\\n+    options.addOption(OptionBuilder.hasOptionalArg().create('a'));\\r\\n+    options.addOption(OptionBuilder.hasArg().create('b'));\\r\\n+    String[] args = new String[] { \\\"-a\\\", \\\"-bvalue\\\" };\\r\\n+    CommandLineParser parser = CommandLineParserFactory.newParser();\\r\\n+    try {\\r\\n+        CommandLine cmd = parser.parse(options, args);\\r\\n+        assertEquals(cmd.getOptionValue('b'), \\\"value\\\");\\r\\n+    } catch (ParseException exp) {\\r\\n+        fail(\\\"Unexpected Exception: \\\" + exp.getMessage());\\r\\n+    }\\r\\n+    options = new Options();\\r\\n+    options.addOption(OptionBuilder.hasOptionalArg().create('a'));\\r\\n+    options.addOption(OptionBuilder.hasArg().create('b'));\\r\\n+    args = new String[] { \\\"-a\\\", \\\"-b\\\", \\\"value\\\" };\\r\\n+    parser = CommandLineParserFactory.newParser(\\\"org.apache.commons.cli.GnuParser\\\");\\r\\n+    try {\\r\\n+        CommandLine cmd = parser.parse(options, args);\\r\\n+        assertEquals(cmd.getOptionValue('b'), \\\"value\\\");\\r\\n+    } catch (ParseException exp) {\\r\\n+        fail(\\\"Unexpected Exception: \\\" + exp.getMessage());\\r\\n+    }\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\test\java\org\apache\commons\cli\bug\BugsTest.java	test11457	org.apache.commons.cli.bug.BugsTest.test11457()	74	83	1	[{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"@@ -1,9 +1,9 @@\\n @Test\\r\\n public void test11457() throws Exception {\\r\\n     final Options options = new Options();\\r\\n     options.addOption(OptionBuilder.withLongOpt(\\\"verbose\\\").create());\\r\\n-    final String[] args = new String[] { \\\"--verbose\\\" };\\r\\n+    final String[] args = { \\\"--verbose\\\" };\\r\\n     final CommandLineParser parser = new PosixParser();\\r\\n     final CommandLine cmd = parser.parse(options, args);\\r\\n     assertTrue(cmd.hasOption(\\\"verbose\\\"));\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,9 +1,9 @@\\n @Test\\r\\n public void test11457() throws Exception {\\r\\n-    Options options = new Options();\\r\\n+    final Options options = new Options();\\r\\n     options.addOption(OptionBuilder.withLongOpt(\\\"verbose\\\").create());\\r\\n-    String[] args = new String[] { \\\"--verbose\\\" };\\r\\n-    CommandLineParser parser = new PosixParser();\\r\\n-    CommandLine cmd = parser.parse(options, args);\\r\\n+    final String[] args = new String[] { \\\"--verbose\\\" };\\r\\n+    final CommandLineParser parser = new PosixParser();\\r\\n+    final CommandLine cmd = parser.parse(options, args);\\r\\n     assertTrue(cmd.hasOption(\\\"verbose\\\"));\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"tn@apache.org","authorName":"Thomas Neidhart","commitYear":"2013","diff":"\"@@ -1,8 +1,9 @@\\n+@Test\\r\\n public void test11457() throws Exception {\\r\\n     Options options = new Options();\\r\\n     options.addOption(OptionBuilder.withLongOpt(\\\"verbose\\\").create());\\r\\n     String[] args = new String[] { \\\"--verbose\\\" };\\r\\n     CommandLineParser parser = new PosixParser();\\r\\n     CommandLine cmd = parser.parse(options, args);\\r\\n     assertTrue(cmd.hasOption(\\\"verbose\\\"));\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2008","diff":"\"\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2008","diff":"\"@@ -1,13 +1,8 @@\\n-public void test11457() {\\r\\n+public void test11457() throws Exception {\\r\\n     Options options = new Options();\\r\\n     options.addOption(OptionBuilder.withLongOpt(\\\"verbose\\\").create());\\r\\n     String[] args = new String[] { \\\"--verbose\\\" };\\r\\n     CommandLineParser parser = new PosixParser();\\r\\n-    try {\\r\\n-        CommandLine cmd = parser.parse(options, args);\\r\\n-        assertTrue(cmd.hasOption(\\\"verbose\\\"));\\r\\n-    } catch (ParseException exp) {\\r\\n-        exp.printStackTrace();\\r\\n-        fail(\\\"Unexpected Exception: \\\" + exp.getMessage());\\r\\n-    }\\r\\n+    CommandLine cmd = parser.parse(options, args);\\r\\n+    assertTrue(cmd.hasOption(\\\"verbose\\\"));\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -1,13 +1,13 @@\\n public void test11457() {\\r\\n     Options options = new Options();\\r\\n     options.addOption(OptionBuilder.withLongOpt(\\\"verbose\\\").create());\\r\\n     String[] args = new String[] { \\\"--verbose\\\" };\\r\\n-    CommandLineParser parser = CommandLineParserFactory.newParser();\\r\\n+    CommandLineParser parser = new PosixParser();\\r\\n     try {\\r\\n         CommandLine cmd = parser.parse(options, args);\\r\\n         assertTrue(cmd.hasOption(\\\"verbose\\\"));\\r\\n     } catch (ParseException exp) {\\r\\n         exp.printStackTrace();\\r\\n         fail(\\\"Unexpected Exception: \\\" + exp.getMessage());\\r\\n     }\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -0,0 +1,13 @@\\n+public void test11457() {\\r\\n+    Options options = new Options();\\r\\n+    options.addOption(OptionBuilder.withLongOpt(\\\"verbose\\\").create());\\r\\n+    String[] args = new String[] { \\\"--verbose\\\" };\\r\\n+    CommandLineParser parser = CommandLineParserFactory.newParser();\\r\\n+    try {\\r\\n+        CommandLine cmd = parser.parse(options, args);\\r\\n+        assertTrue(cmd.hasOption(\\\"verbose\\\"));\\r\\n+    } catch (ParseException exp) {\\r\\n+        exp.printStackTrace();\\r\\n+        fail(\\\"Unexpected Exception: \\\" + exp.getMessage());\\r\\n+    }\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\test\java\org\apache\commons\cli\bug\BugsTest.java	test11458	org.apache.commons.cli.bug.BugsTest.test11458()	86	124	7	[{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"@@ -1,33 +1,33 @@\\n @Test\\r\\n public void test11458() throws Exception {\\r\\n     final Options options = new Options();\\r\\n     options.addOption(OptionBuilder.withValueSeparator('=').hasArgs().create('D'));\\r\\n     options.addOption(OptionBuilder.withValueSeparator(':').hasArgs().create('p'));\\r\\n-    final String[] args = new String[] { \\\"-DJAVA_HOME=/opt/java\\\", \\\"-pfile1:file2:file3\\\" };\\r\\n+    final String[] args = { \\\"-DJAVA_HOME=/opt/java\\\", \\\"-pfile1:file2:file3\\\" };\\r\\n     final CommandLineParser parser = new PosixParser();\\r\\n     final CommandLine cmd = parser.parse(options, args);\\r\\n     String[] values = cmd.getOptionValues('D');\\r\\n     assertEquals(values[0], \\\"JAVA_HOME\\\");\\r\\n     assertEquals(values[1], \\\"/opt/java\\\");\\r\\n     values = cmd.getOptionValues('p');\\r\\n     assertEquals(values[0], \\\"file1\\\");\\r\\n     assertEquals(values[1], \\\"file2\\\");\\r\\n     assertEquals(values[2], \\\"file3\\\");\\r\\n     final Iterator<Option> iter = cmd.iterator();\\r\\n     while (iter.hasNext()) {\\r\\n         final Option opt = iter.next();\\r\\n         switch(opt.getId()) {\\r\\n             case 'D':\\r\\n                 assertEquals(opt.getValue(0), \\\"JAVA_HOME\\\");\\r\\n                 assertEquals(opt.getValue(1), \\\"/opt/java\\\");\\r\\n                 break;\\r\\n             case 'p':\\r\\n                 assertEquals(opt.getValue(0), \\\"file1\\\");\\r\\n                 assertEquals(opt.getValue(1), \\\"file2\\\");\\r\\n                 assertEquals(opt.getValue(2), \\\"file3\\\");\\r\\n                 break;\\r\\n             default:\\r\\n                 fail(\\\"-D option not found\\\");\\r\\n         }\\r\\n     }\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,33 +1,33 @@\\n @Test\\r\\n public void test11458() throws Exception {\\r\\n-    Options options = new Options();\\r\\n+    final Options options = new Options();\\r\\n     options.addOption(OptionBuilder.withValueSeparator('=').hasArgs().create('D'));\\r\\n     options.addOption(OptionBuilder.withValueSeparator(':').hasArgs().create('p'));\\r\\n-    String[] args = new String[] { \\\"-DJAVA_HOME=/opt/java\\\", \\\"-pfile1:file2:file3\\\" };\\r\\n-    CommandLineParser parser = new PosixParser();\\r\\n-    CommandLine cmd = parser.parse(options, args);\\r\\n+    final String[] args = new String[] { \\\"-DJAVA_HOME=/opt/java\\\", \\\"-pfile1:file2:file3\\\" };\\r\\n+    final CommandLineParser parser = new PosixParser();\\r\\n+    final CommandLine cmd = parser.parse(options, args);\\r\\n     String[] values = cmd.getOptionValues('D');\\r\\n     assertEquals(values[0], \\\"JAVA_HOME\\\");\\r\\n     assertEquals(values[1], \\\"/opt/java\\\");\\r\\n     values = cmd.getOptionValues('p');\\r\\n     assertEquals(values[0], \\\"file1\\\");\\r\\n     assertEquals(values[1], \\\"file2\\\");\\r\\n     assertEquals(values[2], \\\"file3\\\");\\r\\n-    Iterator<Option> iter = cmd.iterator();\\r\\n+    final Iterator<Option> iter = cmd.iterator();\\r\\n     while (iter.hasNext()) {\\r\\n-        Option opt = iter.next();\\r\\n+        final Option opt = iter.next();\\r\\n         switch(opt.getId()) {\\r\\n             case 'D':\\r\\n                 assertEquals(opt.getValue(0), \\\"JAVA_HOME\\\");\\r\\n                 assertEquals(opt.getValue(1), \\\"/opt/java\\\");\\r\\n                 break;\\r\\n             case 'p':\\r\\n                 assertEquals(opt.getValue(0), \\\"file1\\\");\\r\\n                 assertEquals(opt.getValue(1), \\\"file2\\\");\\r\\n                 assertEquals(opt.getValue(2), \\\"file3\\\");\\r\\n                 break;\\r\\n             default:\\r\\n                 fail(\\\"-D option not found\\\");\\r\\n         }\\r\\n     }\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"tn@apache.org","authorName":"Thomas Neidhart","commitYear":"2013","diff":"\"@@ -1,32 +1,33 @@\\n+@Test\\r\\n public void test11458() throws Exception {\\r\\n     Options options = new Options();\\r\\n     options.addOption(OptionBuilder.withValueSeparator('=').hasArgs().create('D'));\\r\\n     options.addOption(OptionBuilder.withValueSeparator(':').hasArgs().create('p'));\\r\\n     String[] args = new String[] { \\\"-DJAVA_HOME=/opt/java\\\", \\\"-pfile1:file2:file3\\\" };\\r\\n     CommandLineParser parser = new PosixParser();\\r\\n     CommandLine cmd = parser.parse(options, args);\\r\\n     String[] values = cmd.getOptionValues('D');\\r\\n     assertEquals(values[0], \\\"JAVA_HOME\\\");\\r\\n     assertEquals(values[1], \\\"/opt/java\\\");\\r\\n     values = cmd.getOptionValues('p');\\r\\n     assertEquals(values[0], \\\"file1\\\");\\r\\n     assertEquals(values[1], \\\"file2\\\");\\r\\n     assertEquals(values[2], \\\"file3\\\");\\r\\n     Iterator<Option> iter = cmd.iterator();\\r\\n     while (iter.hasNext()) {\\r\\n         Option opt = iter.next();\\r\\n         switch(opt.getId()) {\\r\\n             case 'D':\\r\\n                 assertEquals(opt.getValue(0), \\\"JAVA_HOME\\\");\\r\\n                 assertEquals(opt.getValue(1), \\\"/opt/java\\\");\\r\\n                 break;\\r\\n             case 'p':\\r\\n                 assertEquals(opt.getValue(0), \\\"file1\\\");\\r\\n                 assertEquals(opt.getValue(1), \\\"file2\\\");\\r\\n                 assertEquals(opt.getValue(2), \\\"file3\\\");\\r\\n                 break;\\r\\n             default:\\r\\n                 fail(\\\"-D option not found\\\");\\r\\n         }\\r\\n     }\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"sebb@apache.org","authorName":"Sebastian Bazley","commitYear":"2013","diff":"\"@@ -1,32 +1,32 @@\\n public void test11458() throws Exception {\\r\\n     Options options = new Options();\\r\\n     options.addOption(OptionBuilder.withValueSeparator('=').hasArgs().create('D'));\\r\\n     options.addOption(OptionBuilder.withValueSeparator(':').hasArgs().create('p'));\\r\\n     String[] args = new String[] { \\\"-DJAVA_HOME=/opt/java\\\", \\\"-pfile1:file2:file3\\\" };\\r\\n     CommandLineParser parser = new PosixParser();\\r\\n     CommandLine cmd = parser.parse(options, args);\\r\\n     String[] values = cmd.getOptionValues('D');\\r\\n     assertEquals(values[0], \\\"JAVA_HOME\\\");\\r\\n     assertEquals(values[1], \\\"/opt/java\\\");\\r\\n     values = cmd.getOptionValues('p');\\r\\n     assertEquals(values[0], \\\"file1\\\");\\r\\n     assertEquals(values[1], \\\"file2\\\");\\r\\n     assertEquals(values[2], \\\"file3\\\");\\r\\n-    Iterator iter = cmd.iterator();\\r\\n+    Iterator<Option> iter = cmd.iterator();\\r\\n     while (iter.hasNext()) {\\r\\n-        Option opt = (Option) iter.next();\\r\\n+        Option opt = iter.next();\\r\\n         switch(opt.getId()) {\\r\\n             case 'D':\\r\\n                 assertEquals(opt.getValue(0), \\\"JAVA_HOME\\\");\\r\\n                 assertEquals(opt.getValue(1), \\\"/opt/java\\\");\\r\\n                 break;\\r\\n             case 'p':\\r\\n                 assertEquals(opt.getValue(0), \\\"file1\\\");\\r\\n                 assertEquals(opt.getValue(1), \\\"file2\\\");\\r\\n                 assertEquals(opt.getValue(2), \\\"file3\\\");\\r\\n                 break;\\r\\n             default:\\r\\n                 fail(\\\"-D option not found\\\");\\r\\n         }\\r\\n     }\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2008","diff":"\"\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2008","diff":"\"@@ -1,36 +1,32 @@\\n-public void test11458() {\\r\\n+public void test11458() throws Exception {\\r\\n     Options options = new Options();\\r\\n     options.addOption(OptionBuilder.withValueSeparator('=').hasArgs().create('D'));\\r\\n     options.addOption(OptionBuilder.withValueSeparator(':').hasArgs().create('p'));\\r\\n     String[] args = new String[] { \\\"-DJAVA_HOME=/opt/java\\\", \\\"-pfile1:file2:file3\\\" };\\r\\n     CommandLineParser parser = new PosixParser();\\r\\n-    try {\\r\\n-        CommandLine cmd = parser.parse(options, args);\\r\\n-        String[] values = cmd.getOptionValues('D');\\r\\n-        assertEquals(values[0], \\\"JAVA_HOME\\\");\\r\\n-        assertEquals(values[1], \\\"/opt/java\\\");\\r\\n-        values = cmd.getOptionValues('p');\\r\\n-        assertEquals(values[0], \\\"file1\\\");\\r\\n-        assertEquals(values[1], \\\"file2\\\");\\r\\n-        assertEquals(values[2], \\\"file3\\\");\\r\\n-        java.util.Iterator iter = cmd.iterator();\\r\\n-        while (iter.hasNext()) {\\r\\n-            Option opt = (Option) iter.next();\\r\\n-            switch(opt.getId()) {\\r\\n-                case 'D':\\r\\n-                    assertEquals(opt.getValue(0), \\\"JAVA_HOME\\\");\\r\\n-                    assertEquals(opt.getValue(1), \\\"/opt/java\\\");\\r\\n-                    break;\\r\\n-                case 'p':\\r\\n-                    assertEquals(opt.getValue(0), \\\"file1\\\");\\r\\n-                    assertEquals(opt.getValue(1), \\\"file2\\\");\\r\\n-                    assertEquals(opt.getValue(2), \\\"file3\\\");\\r\\n-                    break;\\r\\n-                default:\\r\\n-                    fail(\\\"-D option not found\\\");\\r\\n-            }\\r\\n+    CommandLine cmd = parser.parse(options, args);\\r\\n+    String[] values = cmd.getOptionValues('D');\\r\\n+    assertEquals(values[0], \\\"JAVA_HOME\\\");\\r\\n+    assertEquals(values[1], \\\"/opt/java\\\");\\r\\n+    values = cmd.getOptionValues('p');\\r\\n+    assertEquals(values[0], \\\"file1\\\");\\r\\n+    assertEquals(values[1], \\\"file2\\\");\\r\\n+    assertEquals(values[2], \\\"file3\\\");\\r\\n+    Iterator iter = cmd.iterator();\\r\\n+    while (iter.hasNext()) {\\r\\n+        Option opt = (Option) iter.next();\\r\\n+        switch(opt.getId()) {\\r\\n+            case 'D':\\r\\n+                assertEquals(opt.getValue(0), \\\"JAVA_HOME\\\");\\r\\n+                assertEquals(opt.getValue(1), \\\"/opt/java\\\");\\r\\n+                break;\\r\\n+            case 'p':\\r\\n+                assertEquals(opt.getValue(0), \\\"file1\\\");\\r\\n+                assertEquals(opt.getValue(1), \\\"file2\\\");\\r\\n+                assertEquals(opt.getValue(2), \\\"file3\\\");\\r\\n+                break;\\r\\n+            default:\\r\\n+                fail(\\\"-D option not found\\\");\\r\\n         }\\r\\n-    } catch (ParseException exp) {\\r\\n-        fail(\\\"Unexpected Exception:\\\\nMessage:\\\" + exp.getMessage() + \\\"Type: \\\" + exp.getClass().getName());\\r\\n     }\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -1,36 +1,36 @@\\n public void test11458() {\\r\\n     Options options = new Options();\\r\\n     options.addOption(OptionBuilder.withValueSeparator('=').hasArgs().create('D'));\\r\\n     options.addOption(OptionBuilder.withValueSeparator(':').hasArgs().create('p'));\\r\\n     String[] args = new String[] { \\\"-DJAVA_HOME=/opt/java\\\", \\\"-pfile1:file2:file3\\\" };\\r\\n-    CommandLineParser parser = CommandLineParserFactory.newParser();\\r\\n+    CommandLineParser parser = new PosixParser();\\r\\n     try {\\r\\n         CommandLine cmd = parser.parse(options, args);\\r\\n         String[] values = cmd.getOptionValues('D');\\r\\n         assertEquals(values[0], \\\"JAVA_HOME\\\");\\r\\n         assertEquals(values[1], \\\"/opt/java\\\");\\r\\n         values = cmd.getOptionValues('p');\\r\\n         assertEquals(values[0], \\\"file1\\\");\\r\\n         assertEquals(values[1], \\\"file2\\\");\\r\\n         assertEquals(values[2], \\\"file3\\\");\\r\\n         java.util.Iterator iter = cmd.iterator();\\r\\n         while (iter.hasNext()) {\\r\\n             Option opt = (Option) iter.next();\\r\\n             switch(opt.getId()) {\\r\\n                 case 'D':\\r\\n                     assertEquals(opt.getValue(0), \\\"JAVA_HOME\\\");\\r\\n                     assertEquals(opt.getValue(1), \\\"/opt/java\\\");\\r\\n                     break;\\r\\n                 case 'p':\\r\\n                     assertEquals(opt.getValue(0), \\\"file1\\\");\\r\\n                     assertEquals(opt.getValue(1), \\\"file2\\\");\\r\\n                     assertEquals(opt.getValue(2), \\\"file3\\\");\\r\\n                     break;\\r\\n                 default:\\r\\n                     fail(\\\"-D option not found\\\");\\r\\n             }\\r\\n         }\\r\\n     } catch (ParseException exp) {\\r\\n         fail(\\\"Unexpected Exception:\\\\nMessage:\\\" + exp.getMessage() + \\\"Type: \\\" + exp.getClass().getName());\\r\\n     }\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -0,0 +1,36 @@\\n+public void test11458() {\\r\\n+    Options options = new Options();\\r\\n+    options.addOption(OptionBuilder.withValueSeparator('=').hasArgs().create('D'));\\r\\n+    options.addOption(OptionBuilder.withValueSeparator(':').hasArgs().create('p'));\\r\\n+    String[] args = new String[] { \\\"-DJAVA_HOME=/opt/java\\\", \\\"-pfile1:file2:file3\\\" };\\r\\n+    CommandLineParser parser = CommandLineParserFactory.newParser();\\r\\n+    try {\\r\\n+        CommandLine cmd = parser.parse(options, args);\\r\\n+        String[] values = cmd.getOptionValues('D');\\r\\n+        assertEquals(values[0], \\\"JAVA_HOME\\\");\\r\\n+        assertEquals(values[1], \\\"/opt/java\\\");\\r\\n+        values = cmd.getOptionValues('p');\\r\\n+        assertEquals(values[0], \\\"file1\\\");\\r\\n+        assertEquals(values[1], \\\"file2\\\");\\r\\n+        assertEquals(values[2], \\\"file3\\\");\\r\\n+        java.util.Iterator iter = cmd.iterator();\\r\\n+        while (iter.hasNext()) {\\r\\n+            Option opt = (Option) iter.next();\\r\\n+            switch(opt.getId()) {\\r\\n+                case 'D':\\r\\n+                    assertEquals(opt.getValue(0), \\\"JAVA_HOME\\\");\\r\\n+                    assertEquals(opt.getValue(1), \\\"/opt/java\\\");\\r\\n+                    break;\\r\\n+                case 'p':\\r\\n+                    assertEquals(opt.getValue(0), \\\"file1\\\");\\r\\n+                    assertEquals(opt.getValue(1), \\\"file2\\\");\\r\\n+                    assertEquals(opt.getValue(2), \\\"file3\\\");\\r\\n+                    break;\\r\\n+                default:\\r\\n+                    fail(\\\"-D option not found\\\");\\r\\n+            }\\r\\n+        }\\r\\n+    } catch (ParseException exp) {\\r\\n+        fail(\\\"Unexpected Exception:\\\\nMessage:\\\" + exp.getMessage() + \\\"Type: \\\" + exp.getClass().getName());\\r\\n+    }\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\test\java\org\apache\commons\cli\bug\BugsTest.java	test11680	org.apache.commons.cli.bug.BugsTest.test11680()	127	142	1	[{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2023","diff":"\"@@ -1,11 +1,13 @@\\n @Test\\r\\n public void test11680() throws Exception {\\r\\n     final Options options = new Options();\\r\\n     options.addOption(\\\"f\\\", true, \\\"foobar\\\");\\r\\n     options.addOption(\\\"m\\\", true, \\\"missing\\\");\\r\\n     final String[] args = { \\\"-f\\\", \\\"foo\\\" };\\r\\n     final CommandLineParser parser = new PosixParser();\\r\\n     final CommandLine cmd = parser.parse(options, args);\\r\\n     cmd.getOptionValue(\\\"f\\\", \\\"default f\\\");\\r\\n     cmd.getOptionValue(\\\"m\\\", \\\"default m\\\");\\r\\n+    assertNull(cmd.getOptionValue((String) null, null));\\r\\n+    assertEquals(\\\"default\\\", cmd.getOptionValue((String) null, \\\"default\\\"));\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"@@ -1,11 +1,11 @@\\n @Test\\r\\n public void test11680() throws Exception {\\r\\n     final Options options = new Options();\\r\\n     options.addOption(\\\"f\\\", true, \\\"foobar\\\");\\r\\n     options.addOption(\\\"m\\\", true, \\\"missing\\\");\\r\\n-    final String[] args = new String[] { \\\"-f\\\", \\\"foo\\\" };\\r\\n+    final String[] args = { \\\"-f\\\", \\\"foo\\\" };\\r\\n     final CommandLineParser parser = new PosixParser();\\r\\n     final CommandLine cmd = parser.parse(options, args);\\r\\n     cmd.getOptionValue(\\\"f\\\", \\\"default f\\\");\\r\\n     cmd.getOptionValue(\\\"m\\\", \\\"default m\\\");\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,11 +1,11 @@\\n @Test\\r\\n public void test11680() throws Exception {\\r\\n-    Options options = new Options();\\r\\n+    final Options options = new Options();\\r\\n     options.addOption(\\\"f\\\", true, \\\"foobar\\\");\\r\\n     options.addOption(\\\"m\\\", true, \\\"missing\\\");\\r\\n-    String[] args = new String[] { \\\"-f\\\", \\\"foo\\\" };\\r\\n-    CommandLineParser parser = new PosixParser();\\r\\n-    CommandLine cmd = parser.parse(options, args);\\r\\n+    final String[] args = new String[] { \\\"-f\\\", \\\"foo\\\" };\\r\\n+    final CommandLineParser parser = new PosixParser();\\r\\n+    final CommandLine cmd = parser.parse(options, args);\\r\\n     cmd.getOptionValue(\\\"f\\\", \\\"default f\\\");\\r\\n     cmd.getOptionValue(\\\"m\\\", \\\"default m\\\");\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"tn@apache.org","authorName":"Thomas Neidhart","commitYear":"2013","diff":"\"@@ -1,10 +1,11 @@\\n+@Test\\r\\n public void test11680() throws Exception {\\r\\n     Options options = new Options();\\r\\n     options.addOption(\\\"f\\\", true, \\\"foobar\\\");\\r\\n     options.addOption(\\\"m\\\", true, \\\"missing\\\");\\r\\n     String[] args = new String[] { \\\"-f\\\", \\\"foo\\\" };\\r\\n     CommandLineParser parser = new PosixParser();\\r\\n     CommandLine cmd = parser.parse(options, args);\\r\\n     cmd.getOptionValue(\\\"f\\\", \\\"default f\\\");\\r\\n     cmd.getOptionValue(\\\"m\\\", \\\"default m\\\");\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2008","diff":"\"@@ -1,18 +1,10 @@\\n-public void test11680() {\\r\\n+public void test11680() throws Exception {\\r\\n     Options options = new Options();\\r\\n     options.addOption(\\\"f\\\", true, \\\"foobar\\\");\\r\\n     options.addOption(\\\"m\\\", true, \\\"missing\\\");\\r\\n     String[] args = new String[] { \\\"-f\\\", \\\"foo\\\" };\\r\\n     CommandLineParser parser = new PosixParser();\\r\\n-    try {\\r\\n-        CommandLine cmd = parser.parse(options, args);\\r\\n-        try {\\r\\n-            cmd.getOptionValue(\\\"f\\\", \\\"default f\\\");\\r\\n-            cmd.getOptionValue(\\\"m\\\", \\\"default m\\\");\\r\\n-        } catch (NullPointerException exp) {\\r\\n-            fail(\\\"NullPointer caught: \\\" + exp.getMessage());\\r\\n-        }\\r\\n-    } catch (ParseException exp) {\\r\\n-        fail(\\\"Unexpected Exception: \\\" + exp.getMessage());\\r\\n-    }\\r\\n+    CommandLine cmd = parser.parse(options, args);\\r\\n+    cmd.getOptionValue(\\\"f\\\", \\\"default f\\\");\\r\\n+    cmd.getOptionValue(\\\"m\\\", \\\"default m\\\");\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -1,18 +1,18 @@\\n public void test11680() {\\r\\n     Options options = new Options();\\r\\n     options.addOption(\\\"f\\\", true, \\\"foobar\\\");\\r\\n     options.addOption(\\\"m\\\", true, \\\"missing\\\");\\r\\n     String[] args = new String[] { \\\"-f\\\", \\\"foo\\\" };\\r\\n-    CommandLineParser parser = CommandLineParserFactory.newParser();\\r\\n+    CommandLineParser parser = new PosixParser();\\r\\n     try {\\r\\n         CommandLine cmd = parser.parse(options, args);\\r\\n         try {\\r\\n             cmd.getOptionValue(\\\"f\\\", \\\"default f\\\");\\r\\n             cmd.getOptionValue(\\\"m\\\", \\\"default m\\\");\\r\\n         } catch (NullPointerException exp) {\\r\\n             fail(\\\"NullPointer caught: \\\" + exp.getMessage());\\r\\n         }\\r\\n     } catch (ParseException exp) {\\r\\n         fail(\\\"Unexpected Exception: \\\" + exp.getMessage());\\r\\n     }\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -0,0 +1,18 @@\\n+public void test11680() {\\r\\n+    Options options = new Options();\\r\\n+    options.addOption(\\\"f\\\", true, \\\"foobar\\\");\\r\\n+    options.addOption(\\\"m\\\", true, \\\"missing\\\");\\r\\n+    String[] args = new String[] { \\\"-f\\\", \\\"foo\\\" };\\r\\n+    CommandLineParser parser = CommandLineParserFactory.newParser();\\r\\n+    try {\\r\\n+        CommandLine cmd = parser.parse(options, args);\\r\\n+        try {\\r\\n+            cmd.getOptionValue(\\\"f\\\", \\\"default f\\\");\\r\\n+            cmd.getOptionValue(\\\"m\\\", \\\"default m\\\");\\r\\n+        } catch (NullPointerException exp) {\\r\\n+            fail(\\\"NullPointer caught: \\\" + exp.getMessage());\\r\\n+        }\\r\\n+    } catch (ParseException exp) {\\r\\n+        fail(\\\"Unexpected Exception: \\\" + exp.getMessage());\\r\\n+    }\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\test\java\org\apache\commons\cli\bug\BugsTest.java	test12210	org.apache.commons.cli.bug.BugsTest.test12210()	145	194	5	[{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"@@ -1,27 +1,27 @@\\n @Test\\r\\n public void test12210() throws Exception {\\r\\n     final Options mainOptions = new Options();\\r\\n-    String[] argv = new String[] { \\\"-exec\\\", \\\"-exec_opt1\\\", \\\"-exec_opt2\\\" };\\r\\n+    String[] argv = { \\\"-exec\\\", \\\"-exec_opt1\\\", \\\"-exec_opt2\\\" };\\r\\n     final OptionGroup grp = new OptionGroup();\\r\\n     grp.addOption(new Option(\\\"exec\\\", false, \\\"description for this option\\\"));\\r\\n     grp.addOption(new Option(\\\"rep\\\", false, \\\"description for this option\\\"));\\r\\n     mainOptions.addOptionGroup(grp);\\r\\n     final Options execOptions = new Options();\\r\\n     execOptions.addOption(\\\"exec_opt1\\\", false, \\\" desc\\\");\\r\\n     execOptions.addOption(\\\"exec_opt2\\\", false, \\\" desc\\\");\\r\\n     final Options repOptions = new Options();\\r\\n     repOptions.addOption(\\\"repopto\\\", false, \\\"desc\\\");\\r\\n     repOptions.addOption(\\\"repoptt\\\", false, \\\"desc\\\");\\r\\n     final GnuParser parser = new GnuParser();\\r\\n     CommandLine cmd = parser.parse(mainOptions, argv, true);\\r\\n     argv = cmd.getArgs();\\r\\n     if (cmd.hasOption(\\\"exec\\\")) {\\r\\n         cmd = parser.parse(execOptions, argv, false);\\r\\n         assertTrue(cmd.hasOption(\\\"exec_opt1\\\"));\\r\\n         assertTrue(cmd.hasOption(\\\"exec_opt2\\\"));\\r\\n     } else if (cmd.hasOption(\\\"rep\\\")) {\\r\\n         cmd = parser.parse(repOptions, argv, false);\\r\\n     } else {\\r\\n         fail(\\\"exec option not found\\\");\\r\\n     }\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,27 +1,27 @@\\n @Test\\r\\n public void test12210() throws Exception {\\r\\n-    Options mainOptions = new Options();\\r\\n+    final Options mainOptions = new Options();\\r\\n     String[] argv = new String[] { \\\"-exec\\\", \\\"-exec_opt1\\\", \\\"-exec_opt2\\\" };\\r\\n-    OptionGroup grp = new OptionGroup();\\r\\n+    final OptionGroup grp = new OptionGroup();\\r\\n     grp.addOption(new Option(\\\"exec\\\", false, \\\"description for this option\\\"));\\r\\n     grp.addOption(new Option(\\\"rep\\\", false, \\\"description for this option\\\"));\\r\\n     mainOptions.addOptionGroup(grp);\\r\\n-    Options execOptions = new Options();\\r\\n+    final Options execOptions = new Options();\\r\\n     execOptions.addOption(\\\"exec_opt1\\\", false, \\\" desc\\\");\\r\\n     execOptions.addOption(\\\"exec_opt2\\\", false, \\\" desc\\\");\\r\\n-    Options repOptions = new Options();\\r\\n+    final Options repOptions = new Options();\\r\\n     repOptions.addOption(\\\"repopto\\\", false, \\\"desc\\\");\\r\\n     repOptions.addOption(\\\"repoptt\\\", false, \\\"desc\\\");\\r\\n-    GnuParser parser = new GnuParser();\\r\\n+    final GnuParser parser = new GnuParser();\\r\\n     CommandLine cmd = parser.parse(mainOptions, argv, true);\\r\\n     argv = cmd.getArgs();\\r\\n     if (cmd.hasOption(\\\"exec\\\")) {\\r\\n         cmd = parser.parse(execOptions, argv, false);\\r\\n         assertTrue(cmd.hasOption(\\\"exec_opt1\\\"));\\r\\n         assertTrue(cmd.hasOption(\\\"exec_opt2\\\"));\\r\\n     } else if (cmd.hasOption(\\\"rep\\\")) {\\r\\n         cmd = parser.parse(repOptions, argv, false);\\r\\n     } else {\\r\\n         fail(\\\"exec option not found\\\");\\r\\n     }\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"tn@apache.org","authorName":"Thomas Neidhart","commitYear":"2013","diff":"\"@@ -1,26 +1,27 @@\\n+@Test\\r\\n public void test12210() throws Exception {\\r\\n     Options mainOptions = new Options();\\r\\n     String[] argv = new String[] { \\\"-exec\\\", \\\"-exec_opt1\\\", \\\"-exec_opt2\\\" };\\r\\n     OptionGroup grp = new OptionGroup();\\r\\n     grp.addOption(new Option(\\\"exec\\\", false, \\\"description for this option\\\"));\\r\\n     grp.addOption(new Option(\\\"rep\\\", false, \\\"description for this option\\\"));\\r\\n     mainOptions.addOptionGroup(grp);\\r\\n     Options execOptions = new Options();\\r\\n     execOptions.addOption(\\\"exec_opt1\\\", false, \\\" desc\\\");\\r\\n     execOptions.addOption(\\\"exec_opt2\\\", false, \\\" desc\\\");\\r\\n     Options repOptions = new Options();\\r\\n     repOptions.addOption(\\\"repopto\\\", false, \\\"desc\\\");\\r\\n     repOptions.addOption(\\\"repoptt\\\", false, \\\"desc\\\");\\r\\n     GnuParser parser = new GnuParser();\\r\\n     CommandLine cmd = parser.parse(mainOptions, argv, true);\\r\\n     argv = cmd.getArgs();\\r\\n     if (cmd.hasOption(\\\"exec\\\")) {\\r\\n         cmd = parser.parse(execOptions, argv, false);\\r\\n         assertTrue(cmd.hasOption(\\\"exec_opt1\\\"));\\r\\n         assertTrue(cmd.hasOption(\\\"exec_opt2\\\"));\\r\\n     } else if (cmd.hasOption(\\\"rep\\\")) {\\r\\n         cmd = parser.parse(repOptions, argv, false);\\r\\n     } else {\\r\\n         fail(\\\"exec option not found\\\");\\r\\n     }\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2008","diff":"\"@@ -1,30 +1,26 @@\\n-public void test12210() {\\r\\n+public void test12210() throws Exception {\\r\\n     Options mainOptions = new Options();\\r\\n     String[] argv = new String[] { \\\"-exec\\\", \\\"-exec_opt1\\\", \\\"-exec_opt2\\\" };\\r\\n     OptionGroup grp = new OptionGroup();\\r\\n     grp.addOption(new Option(\\\"exec\\\", false, \\\"description for this option\\\"));\\r\\n     grp.addOption(new Option(\\\"rep\\\", false, \\\"description for this option\\\"));\\r\\n     mainOptions.addOptionGroup(grp);\\r\\n     Options execOptions = new Options();\\r\\n     execOptions.addOption(\\\"exec_opt1\\\", false, \\\" desc\\\");\\r\\n     execOptions.addOption(\\\"exec_opt2\\\", false, \\\" desc\\\");\\r\\n     Options repOptions = new Options();\\r\\n     repOptions.addOption(\\\"repopto\\\", false, \\\"desc\\\");\\r\\n     repOptions.addOption(\\\"repoptt\\\", false, \\\"desc\\\");\\r\\n     GnuParser parser = new GnuParser();\\r\\n-    try {\\r\\n-        CommandLine cmd = parser.parse(mainOptions, argv, true);\\r\\n-        argv = cmd.getArgs();\\r\\n-        if (cmd.hasOption(\\\"exec\\\")) {\\r\\n-            cmd = parser.parse(execOptions, argv, false);\\r\\n-            assertTrue(cmd.hasOption(\\\"exec_opt1\\\"));\\r\\n-            assertTrue(cmd.hasOption(\\\"exec_opt2\\\"));\\r\\n-        } else if (cmd.hasOption(\\\"rep\\\")) {\\r\\n-            cmd = parser.parse(repOptions, argv, false);\\r\\n-        } else {\\r\\n-            fail(\\\"exec option not found\\\");\\r\\n-        }\\r\\n-    } catch (ParseException exp) {\\r\\n-        fail(\\\"Unexpected exception: \\\" + exp.getMessage());\\r\\n+    CommandLine cmd = parser.parse(mainOptions, argv, true);\\r\\n+    argv = cmd.getArgs();\\r\\n+    if (cmd.hasOption(\\\"exec\\\")) {\\r\\n+        cmd = parser.parse(execOptions, argv, false);\\r\\n+        assertTrue(cmd.hasOption(\\\"exec_opt1\\\"));\\r\\n+        assertTrue(cmd.hasOption(\\\"exec_opt2\\\"));\\r\\n+    } else if (cmd.hasOption(\\\"rep\\\")) {\\r\\n+        cmd = parser.parse(repOptions, argv, false);\\r\\n+    } else {\\r\\n+        fail(\\\"exec option not found\\\");\\r\\n     }\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -1,30 +1,30 @@\\n public void test12210() {\\r\\n     Options mainOptions = new Options();\\r\\n-    String[] argv = new String[] { \\\"-exec\\\", \\\"-execopto\\\", \\\"-execoptt\\\" };\\r\\n+    String[] argv = new String[] { \\\"-exec\\\", \\\"-exec_opt1\\\", \\\"-exec_opt2\\\" };\\r\\n     OptionGroup grp = new OptionGroup();\\r\\n     grp.addOption(new Option(\\\"exec\\\", false, \\\"description for this option\\\"));\\r\\n     grp.addOption(new Option(\\\"rep\\\", false, \\\"description for this option\\\"));\\r\\n     mainOptions.addOptionGroup(grp);\\r\\n     Options execOptions = new Options();\\r\\n-    execOptions.addOption(\\\"execopto\\\", false, \\\" desc\\\");\\r\\n-    execOptions.addOption(\\\"execoptt\\\", false, \\\" desc\\\");\\r\\n+    execOptions.addOption(\\\"exec_opt1\\\", false, \\\" desc\\\");\\r\\n+    execOptions.addOption(\\\"exec_opt2\\\", false, \\\" desc\\\");\\r\\n     Options repOptions = new Options();\\r\\n     repOptions.addOption(\\\"repopto\\\", false, \\\"desc\\\");\\r\\n     repOptions.addOption(\\\"repoptt\\\", false, \\\"desc\\\");\\r\\n     GnuParser parser = new GnuParser();\\r\\n     try {\\r\\n         CommandLine cmd = parser.parse(mainOptions, argv, true);\\r\\n         argv = cmd.getArgs();\\r\\n         if (cmd.hasOption(\\\"exec\\\")) {\\r\\n             cmd = parser.parse(execOptions, argv, false);\\r\\n-            assertTrue(cmd.hasOption(\\\"execopto\\\"));\\r\\n-            assertTrue(cmd.hasOption(\\\"execoptt\\\"));\\r\\n+            assertTrue(cmd.hasOption(\\\"exec_opt1\\\"));\\r\\n+            assertTrue(cmd.hasOption(\\\"exec_opt2\\\"));\\r\\n         } else if (cmd.hasOption(\\\"rep\\\")) {\\r\\n             cmd = parser.parse(repOptions, argv, false);\\r\\n         } else {\\r\\n             fail(\\\"exec option not found\\\");\\r\\n         }\\r\\n     } catch (ParseException exp) {\\r\\n         fail(\\\"Unexpected exception: \\\" + exp.getMessage());\\r\\n     }\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -0,0 +1,30 @@\\n+public void test12210() {\\r\\n+    Options mainOptions = new Options();\\r\\n+    String[] argv = new String[] { \\\"-exec\\\", \\\"-execopto\\\", \\\"-execoptt\\\" };\\r\\n+    OptionGroup grp = new OptionGroup();\\r\\n+    grp.addOption(new Option(\\\"exec\\\", false, \\\"description for this option\\\"));\\r\\n+    grp.addOption(new Option(\\\"rep\\\", false, \\\"description for this option\\\"));\\r\\n+    mainOptions.addOptionGroup(grp);\\r\\n+    Options execOptions = new Options();\\r\\n+    execOptions.addOption(\\\"execopto\\\", false, \\\" desc\\\");\\r\\n+    execOptions.addOption(\\\"execoptt\\\", false, \\\" desc\\\");\\r\\n+    Options repOptions = new Options();\\r\\n+    repOptions.addOption(\\\"repopto\\\", false, \\\"desc\\\");\\r\\n+    repOptions.addOption(\\\"repoptt\\\", false, \\\"desc\\\");\\r\\n+    GnuParser parser = new GnuParser();\\r\\n+    try {\\r\\n+        CommandLine cmd = parser.parse(mainOptions, argv, true);\\r\\n+        argv = cmd.getArgs();\\r\\n+        if (cmd.hasOption(\\\"exec\\\")) {\\r\\n+            cmd = parser.parse(execOptions, argv, false);\\r\\n+            assertTrue(cmd.hasOption(\\\"execopto\\\"));\\r\\n+            assertTrue(cmd.hasOption(\\\"execoptt\\\"));\\r\\n+        } else if (cmd.hasOption(\\\"rep\\\")) {\\r\\n+            cmd = parser.parse(repOptions, argv, false);\\r\\n+        } else {\\r\\n+            fail(\\\"exec option not found\\\");\\r\\n+        }\\r\\n+    } catch (ParseException exp) {\\r\\n+        fail(\\\"Unexpected exception: \\\" + exp.getMessage());\\r\\n+    }\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\test\java\org\apache\commons\cli\bug\BugsTest.java	test13425	org.apache.commons.cli.bug.BugsTest.test13425()	197	222	3	[{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"\""},{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2019","diff":"\"\""},{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,15 +1,15 @@\\n @Test\\r\\n public void test13425() throws Exception {\\r\\n-    Options options = new Options();\\r\\n-    Option oldpass = OptionBuilder.withLongOpt(\\\"old-password\\\").withDescription(\\\"Use this option to specify the old password\\\").hasArg().create('o');\\r\\n-    Option newpass = OptionBuilder.withLongOpt(\\\"new-password\\\").withDescription(\\\"Use this option to specify the new password\\\").hasArg().create('n');\\r\\n-    String[] args = { \\\"-o\\\", \\\"-n\\\", \\\"newpassword\\\" };\\r\\n+    final Options options = new Options();\\r\\n+    final Option oldpass = OptionBuilder.withLongOpt(\\\"old-password\\\").withDescription(\\\"Use this option to specify the old password\\\").hasArg().create('o');\\r\\n+    final Option newpass = OptionBuilder.withLongOpt(\\\"new-password\\\").withDescription(\\\"Use this option to specify the new password\\\").hasArg().create('n');\\r\\n+    final String[] args = { \\\"-o\\\", \\\"-n\\\", \\\"newpassword\\\" };\\r\\n     options.addOption(oldpass);\\r\\n     options.addOption(newpass);\\r\\n-    Parser parser = new PosixParser();\\r\\n+    final Parser parser = new PosixParser();\\r\\n     try {\\r\\n         parser.parse(options, args);\\r\\n         fail(\\\"MissingArgumentException not caught.\\\");\\r\\n-    } catch (MissingArgumentException expected) {\\r\\n+    } catch (final MissingArgumentException expected) {\\r\\n     }\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"tn@apache.org","authorName":"Thomas Neidhart","commitYear":"2013","diff":"\"@@ -1,14 +1,15 @@\\n+@Test\\r\\n public void test13425() throws Exception {\\r\\n     Options options = new Options();\\r\\n     Option oldpass = OptionBuilder.withLongOpt(\\\"old-password\\\").withDescription(\\\"Use this option to specify the old password\\\").hasArg().create('o');\\r\\n     Option newpass = OptionBuilder.withLongOpt(\\\"new-password\\\").withDescription(\\\"Use this option to specify the new password\\\").hasArg().create('n');\\r\\n     String[] args = { \\\"-o\\\", \\\"-n\\\", \\\"newpassword\\\" };\\r\\n     options.addOption(oldpass);\\r\\n     options.addOption(newpass);\\r\\n     Parser parser = new PosixParser();\\r\\n     try {\\r\\n         parser.parse(options, args);\\r\\n         fail(\\\"MissingArgumentException not caught.\\\");\\r\\n     } catch (MissingArgumentException expected) {\\r\\n     }\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"sebb@apache.org","authorName":"Sebastian Bazley","commitYear":"2013","diff":"\"@@ -1,16 +1,14 @@\\n public void test13425() throws Exception {\\r\\n     Options options = new Options();\\r\\n     Option oldpass = OptionBuilder.withLongOpt(\\\"old-password\\\").withDescription(\\\"Use this option to specify the old password\\\").hasArg().create('o');\\r\\n     Option newpass = OptionBuilder.withLongOpt(\\\"new-password\\\").withDescription(\\\"Use this option to specify the new password\\\").hasArg().create('n');\\r\\n     String[] args = { \\\"-o\\\", \\\"-n\\\", \\\"newpassword\\\" };\\r\\n     options.addOption(oldpass);\\r\\n     options.addOption(newpass);\\r\\n     Parser parser = new PosixParser();\\r\\n     try {\\r\\n         parser.parse(options, args);\\r\\n-    } catch (Exception exp) {\\r\\n-        assertTrue(exp != null);\\r\\n-        return;\\r\\n+        fail(\\\"MissingArgumentException not caught.\\\");\\r\\n+    } catch (MissingArgumentException expected) {\\r\\n     }\\r\\n-    fail(\\\"MissingArgumentException not caught.\\\");\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2008","diff":"\"@@ -1,16 +1,16 @@\\n-public void test13425() {\\r\\n+public void test13425() throws Exception {\\r\\n     Options options = new Options();\\r\\n     Option oldpass = OptionBuilder.withLongOpt(\\\"old-password\\\").withDescription(\\\"Use this option to specify the old password\\\").hasArg().create('o');\\r\\n     Option newpass = OptionBuilder.withLongOpt(\\\"new-password\\\").withDescription(\\\"Use this option to specify the new password\\\").hasArg().create('n');\\r\\n     String[] args = { \\\"-o\\\", \\\"-n\\\", \\\"newpassword\\\" };\\r\\n     options.addOption(oldpass);\\r\\n     options.addOption(newpass);\\r\\n     Parser parser = new PosixParser();\\r\\n     try {\\r\\n-        CommandLine line = parser.parse(options, args);\\r\\n+        parser.parse(options, args);\\r\\n     } catch (Exception exp) {\\r\\n         assertTrue(exp != null);\\r\\n         return;\\r\\n     }\\r\\n     fail(\\\"MissingArgumentException not caught.\\\");\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -0,0 +1,16 @@\\n+public void test13425() {\\r\\n+    Options options = new Options();\\r\\n+    Option oldpass = OptionBuilder.withLongOpt(\\\"old-password\\\").withDescription(\\\"Use this option to specify the old password\\\").hasArg().create('o');\\r\\n+    Option newpass = OptionBuilder.withLongOpt(\\\"new-password\\\").withDescription(\\\"Use this option to specify the new password\\\").hasArg().create('n');\\r\\n+    String[] args = { \\\"-o\\\", \\\"-n\\\", \\\"newpassword\\\" };\\r\\n+    options.addOption(oldpass);\\r\\n+    options.addOption(newpass);\\r\\n+    Parser parser = new PosixParser();\\r\\n+    try {\\r\\n+        CommandLine line = parser.parse(options, args);\\r\\n+    } catch (Exception exp) {\\r\\n+        assertTrue(exp != null);\\r\\n+        return;\\r\\n+    }\\r\\n+    fail(\\\"MissingArgumentException not caught.\\\");\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\test\java\org\apache\commons\cli\bug\BugsTest.java	test13666	org.apache.commons.cli.bug.BugsTest.test13666()	225	249	3	[{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"\""},{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2019","diff":"\"\""},{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,20 +1,20 @@\\n @Test\\r\\n public void test13666() throws Exception {\\r\\n-    Options options = new Options();\\r\\n-    Option dir = OptionBuilder.withDescription(\\\"dir\\\").hasArg().create('d');\\r\\n+    final Options options = new Options();\\r\\n+    final Option dir = OptionBuilder.withDescription(\\\"dir\\\").hasArg().create('d');\\r\\n     options.addOption(dir);\\r\\n     final PrintStream oldSystemOut = System.out;\\r\\n     try {\\r\\n         final ByteArrayOutputStream bytes = new ByteArrayOutputStream();\\r\\n         final PrintStream print = new PrintStream(bytes);\\r\\n         print.println();\\r\\n         final String eol = bytes.toString();\\r\\n         bytes.reset();\\r\\n         System.setOut(new PrintStream(bytes));\\r\\n-        HelpFormatter formatter = new HelpFormatter();\\r\\n+        final HelpFormatter formatter = new HelpFormatter();\\r\\n         formatter.printHelp(\\\"dir\\\", options);\\r\\n         assertEquals(\\\"usage: dir\\\" + eol + \\\" -d <arg>   dir\\\" + eol, bytes.toString());\\r\\n     } finally {\\r\\n         System.setOut(oldSystemOut);\\r\\n     }\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"tn@apache.org","authorName":"Thomas Neidhart","commitYear":"2013","diff":"\"@@ -1,19 +1,20 @@\\n+@Test\\r\\n public void test13666() throws Exception {\\r\\n     Options options = new Options();\\r\\n     Option dir = OptionBuilder.withDescription(\\\"dir\\\").hasArg().create('d');\\r\\n     options.addOption(dir);\\r\\n     final PrintStream oldSystemOut = System.out;\\r\\n     try {\\r\\n         final ByteArrayOutputStream bytes = new ByteArrayOutputStream();\\r\\n         final PrintStream print = new PrintStream(bytes);\\r\\n         print.println();\\r\\n         final String eol = bytes.toString();\\r\\n         bytes.reset();\\r\\n         System.setOut(new PrintStream(bytes));\\r\\n         HelpFormatter formatter = new HelpFormatter();\\r\\n         formatter.printHelp(\\\"dir\\\", options);\\r\\n         assertEquals(\\\"usage: dir\\\" + eol + \\\" -d <arg>   dir\\\" + eol, bytes.toString());\\r\\n     } finally {\\r\\n         System.setOut(oldSystemOut);\\r\\n     }\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2008","diff":"\"\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2008","diff":"\"@@ -1,23 +1,19 @@\\n-public void test13666() {\\r\\n+public void test13666() throws Exception {\\r\\n     Options options = new Options();\\r\\n     Option dir = OptionBuilder.withDescription(\\\"dir\\\").hasArg().create('d');\\r\\n     options.addOption(dir);\\r\\n     final PrintStream oldSystemOut = System.out;\\r\\n     try {\\r\\n         final ByteArrayOutputStream bytes = new ByteArrayOutputStream();\\r\\n         final PrintStream print = new PrintStream(bytes);\\r\\n         print.println();\\r\\n         final String eol = bytes.toString();\\r\\n         bytes.reset();\\r\\n         System.setOut(new PrintStream(bytes));\\r\\n-        try {\\r\\n-            HelpFormatter formatter = new HelpFormatter();\\r\\n-            formatter.printHelp(\\\"dir\\\", options);\\r\\n-        } catch (Exception exp) {\\r\\n-            fail(\\\"Unexpected Exception: \\\" + exp.getMessage());\\r\\n-        }\\r\\n+        HelpFormatter formatter = new HelpFormatter();\\r\\n+        formatter.printHelp(\\\"dir\\\", options);\\r\\n         assertEquals(\\\"usage: dir\\\" + eol + \\\" -d <arg>   dir\\\" + eol, bytes.toString());\\r\\n     } finally {\\r\\n         System.setOut(oldSystemOut);\\r\\n     }\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"roxspring@apache.org","authorName":"Robert James Oxspring","commitYear":"2004","diff":"\"@@ -1,11 +1,23 @@\\n public void test13666() {\\r\\n     Options options = new Options();\\r\\n     Option dir = OptionBuilder.withDescription(\\\"dir\\\").hasArg().create('d');\\r\\n     options.addOption(dir);\\r\\n+    final PrintStream oldSystemOut = System.out;\\r\\n     try {\\r\\n-        HelpFormatter formatter = new HelpFormatter();\\r\\n-        formatter.printHelp(\\\"dir\\\", options);\\r\\n-    } catch (Exception exp) {\\r\\n-        fail(\\\"Unexpected Exception: \\\" + exp.getMessage());\\r\\n+        final ByteArrayOutputStream bytes = new ByteArrayOutputStream();\\r\\n+        final PrintStream print = new PrintStream(bytes);\\r\\n+        print.println();\\r\\n+        final String eol = bytes.toString();\\r\\n+        bytes.reset();\\r\\n+        System.setOut(new PrintStream(bytes));\\r\\n+        try {\\r\\n+            HelpFormatter formatter = new HelpFormatter();\\r\\n+            formatter.printHelp(\\\"dir\\\", options);\\r\\n+        } catch (Exception exp) {\\r\\n+            fail(\\\"Unexpected Exception: \\\" + exp.getMessage());\\r\\n+        }\\r\\n+        assertEquals(\\\"usage: dir\\\" + eol + \\\" -d <arg>   dir\\\" + eol, bytes.toString());\\r\\n+    } finally {\\r\\n+        System.setOut(oldSystemOut);\\r\\n     }\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -0,0 +1,11 @@\\n+public void test13666() {\\r\\n+    Options options = new Options();\\r\\n+    Option dir = OptionBuilder.withDescription(\\\"dir\\\").hasArg().create('d');\\r\\n+    options.addOption(dir);\\r\\n+    try {\\r\\n+        HelpFormatter formatter = new HelpFormatter();\\r\\n+        formatter.printHelp(\\\"dir\\\", options);\\r\\n+    } catch (Exception exp) {\\r\\n+        fail(\\\"Unexpected Exception: \\\" + exp.getMessage());\\r\\n+    }\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\test\java\org\apache\commons\cli\bug\BugsTest.java	test13935	org.apache.commons.cli.bug.BugsTest.test13935()	252	293	5	[{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"@@ -1,35 +1,35 @@\\n @Test\\r\\n public void test13935() throws Exception {\\r\\n     final OptionGroup directions = new OptionGroup();\\r\\n     final Option left = new Option(\\\"l\\\", \\\"left\\\", false, \\\"go left\\\");\\r\\n     final Option right = new Option(\\\"r\\\", \\\"right\\\", false, \\\"go right\\\");\\r\\n     final Option straight = new Option(\\\"s\\\", \\\"straight\\\", false, \\\"go straight\\\");\\r\\n     final Option forward = new Option(\\\"f\\\", \\\"forward\\\", false, \\\"go forward\\\");\\r\\n     forward.setRequired(true);\\r\\n     directions.addOption(left);\\r\\n     directions.addOption(right);\\r\\n     directions.setRequired(true);\\r\\n     final Options opts = new Options();\\r\\n     opts.addOptionGroup(directions);\\r\\n     opts.addOption(straight);\\r\\n     final CommandLineParser parser = new PosixParser();\\r\\n-    String[] args = new String[] {};\\r\\n+    String[] args = {};\\r\\n     try {\\r\\n         parser.parse(opts, args);\\r\\n         fail(\\\"Expected ParseException\\\");\\r\\n     } catch (final ParseException expected) {\\r\\n     }\\r\\n     args = new String[] { \\\"-s\\\" };\\r\\n     try {\\r\\n         parser.parse(opts, args);\\r\\n         fail(\\\"Expected ParseException\\\");\\r\\n     } catch (final ParseException expected) {\\r\\n     }\\r\\n     args = new String[] { \\\"-s\\\", \\\"-l\\\" };\\r\\n     CommandLine line = parser.parse(opts, args);\\r\\n     assertNotNull(line);\\r\\n     opts.addOption(forward);\\r\\n     args = new String[] { \\\"-s\\\", \\\"-l\\\", \\\"-f\\\" };\\r\\n     line = parser.parse(opts, args);\\r\\n     assertNotNull(line);\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,35 +1,35 @@\\n @Test\\r\\n public void test13935() throws Exception {\\r\\n-    OptionGroup directions = new OptionGroup();\\r\\n-    Option left = new Option(\\\"l\\\", \\\"left\\\", false, \\\"go left\\\");\\r\\n-    Option right = new Option(\\\"r\\\", \\\"right\\\", false, \\\"go right\\\");\\r\\n-    Option straight = new Option(\\\"s\\\", \\\"straight\\\", false, \\\"go straight\\\");\\r\\n-    Option forward = new Option(\\\"f\\\", \\\"forward\\\", false, \\\"go forward\\\");\\r\\n+    final OptionGroup directions = new OptionGroup();\\r\\n+    final Option left = new Option(\\\"l\\\", \\\"left\\\", false, \\\"go left\\\");\\r\\n+    final Option right = new Option(\\\"r\\\", \\\"right\\\", false, \\\"go right\\\");\\r\\n+    final Option straight = new Option(\\\"s\\\", \\\"straight\\\", false, \\\"go straight\\\");\\r\\n+    final Option forward = new Option(\\\"f\\\", \\\"forward\\\", false, \\\"go forward\\\");\\r\\n     forward.setRequired(true);\\r\\n     directions.addOption(left);\\r\\n     directions.addOption(right);\\r\\n     directions.setRequired(true);\\r\\n-    Options opts = new Options();\\r\\n+    final Options opts = new Options();\\r\\n     opts.addOptionGroup(directions);\\r\\n     opts.addOption(straight);\\r\\n-    CommandLineParser parser = new PosixParser();\\r\\n+    final CommandLineParser parser = new PosixParser();\\r\\n     String[] args = new String[] {};\\r\\n     try {\\r\\n         parser.parse(opts, args);\\r\\n         fail(\\\"Expected ParseException\\\");\\r\\n-    } catch (ParseException expected) {\\r\\n+    } catch (final ParseException expected) {\\r\\n     }\\r\\n     args = new String[] { \\\"-s\\\" };\\r\\n     try {\\r\\n         parser.parse(opts, args);\\r\\n         fail(\\\"Expected ParseException\\\");\\r\\n-    } catch (ParseException expected) {\\r\\n+    } catch (final ParseException expected) {\\r\\n     }\\r\\n     args = new String[] { \\\"-s\\\", \\\"-l\\\" };\\r\\n     CommandLine line = parser.parse(opts, args);\\r\\n     assertNotNull(line);\\r\\n     opts.addOption(forward);\\r\\n     args = new String[] { \\\"-s\\\", \\\"-l\\\", \\\"-f\\\" };\\r\\n     line = parser.parse(opts, args);\\r\\n     assertNotNull(line);\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"tn@apache.org","authorName":"Thomas Neidhart","commitYear":"2013","diff":"\"@@ -1,34 +1,35 @@\\n+@Test\\r\\n public void test13935() throws Exception {\\r\\n     OptionGroup directions = new OptionGroup();\\r\\n     Option left = new Option(\\\"l\\\", \\\"left\\\", false, \\\"go left\\\");\\r\\n     Option right = new Option(\\\"r\\\", \\\"right\\\", false, \\\"go right\\\");\\r\\n     Option straight = new Option(\\\"s\\\", \\\"straight\\\", false, \\\"go straight\\\");\\r\\n     Option forward = new Option(\\\"f\\\", \\\"forward\\\", false, \\\"go forward\\\");\\r\\n     forward.setRequired(true);\\r\\n     directions.addOption(left);\\r\\n     directions.addOption(right);\\r\\n     directions.setRequired(true);\\r\\n     Options opts = new Options();\\r\\n     opts.addOptionGroup(directions);\\r\\n     opts.addOption(straight);\\r\\n     CommandLineParser parser = new PosixParser();\\r\\n     String[] args = new String[] {};\\r\\n     try {\\r\\n         parser.parse(opts, args);\\r\\n         fail(\\\"Expected ParseException\\\");\\r\\n     } catch (ParseException expected) {\\r\\n     }\\r\\n     args = new String[] { \\\"-s\\\" };\\r\\n     try {\\r\\n         parser.parse(opts, args);\\r\\n         fail(\\\"Expected ParseException\\\");\\r\\n     } catch (ParseException expected) {\\r\\n     }\\r\\n     args = new String[] { \\\"-s\\\", \\\"-l\\\" };\\r\\n     CommandLine line = parser.parse(opts, args);\\r\\n     assertNotNull(line);\\r\\n     opts.addOption(forward);\\r\\n     args = new String[] { \\\"-s\\\", \\\"-l\\\", \\\"-f\\\" };\\r\\n     line = parser.parse(opts, args);\\r\\n     assertNotNull(line);\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"sebb@apache.org","authorName":"Sebastian Bazley","commitYear":"2013","diff":"\"@@ -1,49 +1,34 @@\\n public void test13935() throws Exception {\\r\\n     OptionGroup directions = new OptionGroup();\\r\\n     Option left = new Option(\\\"l\\\", \\\"left\\\", false, \\\"go left\\\");\\r\\n     Option right = new Option(\\\"r\\\", \\\"right\\\", false, \\\"go right\\\");\\r\\n     Option straight = new Option(\\\"s\\\", \\\"straight\\\", false, \\\"go straight\\\");\\r\\n     Option forward = new Option(\\\"f\\\", \\\"forward\\\", false, \\\"go forward\\\");\\r\\n     forward.setRequired(true);\\r\\n     directions.addOption(left);\\r\\n     directions.addOption(right);\\r\\n     directions.setRequired(true);\\r\\n     Options opts = new Options();\\r\\n     opts.addOptionGroup(directions);\\r\\n     opts.addOption(straight);\\r\\n     CommandLineParser parser = new PosixParser();\\r\\n-    boolean exception = false;\\r\\n     String[] args = new String[] {};\\r\\n     try {\\r\\n         parser.parse(opts, args);\\r\\n-    } catch (ParseException exp) {\\r\\n-        exception = true;\\r\\n+        fail(\\\"Expected ParseException\\\");\\r\\n+    } catch (ParseException expected) {\\r\\n     }\\r\\n-    if (!exception) {\\r\\n-        fail(\\\"Expected exception not caught.\\\");\\r\\n-    }\\r\\n-    exception = false;\\r\\n     args = new String[] { \\\"-s\\\" };\\r\\n     try {\\r\\n         parser.parse(opts, args);\\r\\n-    } catch (ParseException exp) {\\r\\n-        exception = true;\\r\\n+        fail(\\\"Expected ParseException\\\");\\r\\n+    } catch (ParseException expected) {\\r\\n     }\\r\\n-    if (!exception) {\\r\\n-        fail(\\\"Expected exception not caught.\\\");\\r\\n-    }\\r\\n-    exception = false;\\r\\n     args = new String[] { \\\"-s\\\", \\\"-l\\\" };\\r\\n-    try {\\r\\n-        parser.parse(opts, args);\\r\\n-    } catch (ParseException exp) {\\r\\n-        fail(\\\"Unexpected exception: \\\" + exp.getClass().getName() + \\\":\\\" + exp.getMessage());\\r\\n-    }\\r\\n+    CommandLine line = parser.parse(opts, args);\\r\\n+    assertNotNull(line);\\r\\n     opts.addOption(forward);\\r\\n     args = new String[] { \\\"-s\\\", \\\"-l\\\", \\\"-f\\\" };\\r\\n-    try {\\r\\n-        parser.parse(opts, args);\\r\\n-    } catch (ParseException exp) {\\r\\n-        fail(\\\"Unexpected exception: \\\" + exp.getClass().getName() + \\\":\\\" + exp.getMessage());\\r\\n-    }\\r\\n+    line = parser.parse(opts, args);\\r\\n+    assertNotNull(line);\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"sebb@apache.org","authorName":"Sebastian Bazley","commitYear":"2013","diff":"\"@@ -1,49 +1,49 @@\\n public void test13935() throws Exception {\\r\\n     OptionGroup directions = new OptionGroup();\\r\\n     Option left = new Option(\\\"l\\\", \\\"left\\\", false, \\\"go left\\\");\\r\\n     Option right = new Option(\\\"r\\\", \\\"right\\\", false, \\\"go right\\\");\\r\\n     Option straight = new Option(\\\"s\\\", \\\"straight\\\", false, \\\"go straight\\\");\\r\\n     Option forward = new Option(\\\"f\\\", \\\"forward\\\", false, \\\"go forward\\\");\\r\\n     forward.setRequired(true);\\r\\n     directions.addOption(left);\\r\\n     directions.addOption(right);\\r\\n     directions.setRequired(true);\\r\\n     Options opts = new Options();\\r\\n     opts.addOptionGroup(directions);\\r\\n     opts.addOption(straight);\\r\\n     CommandLineParser parser = new PosixParser();\\r\\n     boolean exception = false;\\r\\n     String[] args = new String[] {};\\r\\n     try {\\r\\n-        CommandLine line = parser.parse(opts, args);\\r\\n+        parser.parse(opts, args);\\r\\n     } catch (ParseException exp) {\\r\\n         exception = true;\\r\\n     }\\r\\n     if (!exception) {\\r\\n         fail(\\\"Expected exception not caught.\\\");\\r\\n     }\\r\\n     exception = false;\\r\\n     args = new String[] { \\\"-s\\\" };\\r\\n     try {\\r\\n-        CommandLine line = parser.parse(opts, args);\\r\\n+        parser.parse(opts, args);\\r\\n     } catch (ParseException exp) {\\r\\n         exception = true;\\r\\n     }\\r\\n     if (!exception) {\\r\\n         fail(\\\"Expected exception not caught.\\\");\\r\\n     }\\r\\n     exception = false;\\r\\n     args = new String[] { \\\"-s\\\", \\\"-l\\\" };\\r\\n     try {\\r\\n         parser.parse(opts, args);\\r\\n     } catch (ParseException exp) {\\r\\n         fail(\\\"Unexpected exception: \\\" + exp.getClass().getName() + \\\":\\\" + exp.getMessage());\\r\\n     }\\r\\n     opts.addOption(forward);\\r\\n     args = new String[] { \\\"-s\\\", \\\"-l\\\", \\\"-f\\\" };\\r\\n     try {\\r\\n         parser.parse(opts, args);\\r\\n     } catch (ParseException exp) {\\r\\n         fail(\\\"Unexpected exception: \\\" + exp.getClass().getName() + \\\":\\\" + exp.getMessage());\\r\\n     }\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2008","diff":"\"\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2008","diff":"\"@@ -1,49 +1,49 @@\\n-public void test13935() {\\r\\n+public void test13935() throws Exception {\\r\\n     OptionGroup directions = new OptionGroup();\\r\\n     Option left = new Option(\\\"l\\\", \\\"left\\\", false, \\\"go left\\\");\\r\\n     Option right = new Option(\\\"r\\\", \\\"right\\\", false, \\\"go right\\\");\\r\\n     Option straight = new Option(\\\"s\\\", \\\"straight\\\", false, \\\"go straight\\\");\\r\\n     Option forward = new Option(\\\"f\\\", \\\"forward\\\", false, \\\"go forward\\\");\\r\\n     forward.setRequired(true);\\r\\n     directions.addOption(left);\\r\\n     directions.addOption(right);\\r\\n     directions.setRequired(true);\\r\\n     Options opts = new Options();\\r\\n     opts.addOptionGroup(directions);\\r\\n     opts.addOption(straight);\\r\\n     CommandLineParser parser = new PosixParser();\\r\\n     boolean exception = false;\\r\\n     String[] args = new String[] {};\\r\\n     try {\\r\\n         CommandLine line = parser.parse(opts, args);\\r\\n     } catch (ParseException exp) {\\r\\n         exception = true;\\r\\n     }\\r\\n     if (!exception) {\\r\\n         fail(\\\"Expected exception not caught.\\\");\\r\\n     }\\r\\n     exception = false;\\r\\n     args = new String[] { \\\"-s\\\" };\\r\\n     try {\\r\\n         CommandLine line = parser.parse(opts, args);\\r\\n     } catch (ParseException exp) {\\r\\n         exception = true;\\r\\n     }\\r\\n     if (!exception) {\\r\\n         fail(\\\"Expected exception not caught.\\\");\\r\\n     }\\r\\n     exception = false;\\r\\n     args = new String[] { \\\"-s\\\", \\\"-l\\\" };\\r\\n     try {\\r\\n-        CommandLine line = parser.parse(opts, args);\\r\\n+        parser.parse(opts, args);\\r\\n     } catch (ParseException exp) {\\r\\n         fail(\\\"Unexpected exception: \\\" + exp.getClass().getName() + \\\":\\\" + exp.getMessage());\\r\\n     }\\r\\n     opts.addOption(forward);\\r\\n     args = new String[] { \\\"-s\\\", \\\"-l\\\", \\\"-f\\\" };\\r\\n     try {\\r\\n-        CommandLine line = parser.parse(opts, args);\\r\\n+        parser.parse(opts, args);\\r\\n     } catch (ParseException exp) {\\r\\n         fail(\\\"Unexpected exception: \\\" + exp.getClass().getName() + \\\":\\\" + exp.getMessage());\\r\\n     }\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -1,49 +1,49 @@\\n public void test13935() {\\r\\n     OptionGroup directions = new OptionGroup();\\r\\n     Option left = new Option(\\\"l\\\", \\\"left\\\", false, \\\"go left\\\");\\r\\n     Option right = new Option(\\\"r\\\", \\\"right\\\", false, \\\"go right\\\");\\r\\n     Option straight = new Option(\\\"s\\\", \\\"straight\\\", false, \\\"go straight\\\");\\r\\n     Option forward = new Option(\\\"f\\\", \\\"forward\\\", false, \\\"go forward\\\");\\r\\n     forward.setRequired(true);\\r\\n     directions.addOption(left);\\r\\n     directions.addOption(right);\\r\\n     directions.setRequired(true);\\r\\n     Options opts = new Options();\\r\\n     opts.addOptionGroup(directions);\\r\\n     opts.addOption(straight);\\r\\n     CommandLineParser parser = new PosixParser();\\r\\n     boolean exception = false;\\r\\n     String[] args = new String[] {};\\r\\n     try {\\r\\n         CommandLine line = parser.parse(opts, args);\\r\\n     } catch (ParseException exp) {\\r\\n         exception = true;\\r\\n     }\\r\\n     if (!exception) {\\r\\n         fail(\\\"Expected exception not caught.\\\");\\r\\n     }\\r\\n     exception = false;\\r\\n     args = new String[] { \\\"-s\\\" };\\r\\n     try {\\r\\n         CommandLine line = parser.parse(opts, args);\\r\\n     } catch (ParseException exp) {\\r\\n         exception = true;\\r\\n     }\\r\\n     if (!exception) {\\r\\n         fail(\\\"Expected exception not caught.\\\");\\r\\n     }\\r\\n     exception = false;\\r\\n     args = new String[] { \\\"-s\\\", \\\"-l\\\" };\\r\\n     try {\\r\\n         CommandLine line = parser.parse(opts, args);\\r\\n     } catch (ParseException exp) {\\r\\n-        fail(\\\"Unexpected exception: \\\" + exp.getMessage());\\r\\n+        fail(\\\"Unexpected exception: \\\" + exp.getClass().getName() + \\\":\\\" + exp.getMessage());\\r\\n     }\\r\\n     opts.addOption(forward);\\r\\n     args = new String[] { \\\"-s\\\", \\\"-l\\\", \\\"-f\\\" };\\r\\n     try {\\r\\n         CommandLine line = parser.parse(opts, args);\\r\\n     } catch (ParseException exp) {\\r\\n-        fail(\\\"Unexpected exception: \\\" + exp.getMessage());\\r\\n+        fail(\\\"Unexpected exception: \\\" + exp.getClass().getName() + \\\":\\\" + exp.getMessage());\\r\\n     }\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -0,0 +1,49 @@\\n+public void test13935() {\\r\\n+    OptionGroup directions = new OptionGroup();\\r\\n+    Option left = new Option(\\\"l\\\", \\\"left\\\", false, \\\"go left\\\");\\r\\n+    Option right = new Option(\\\"r\\\", \\\"right\\\", false, \\\"go right\\\");\\r\\n+    Option straight = new Option(\\\"s\\\", \\\"straight\\\", false, \\\"go straight\\\");\\r\\n+    Option forward = new Option(\\\"f\\\", \\\"forward\\\", false, \\\"go forward\\\");\\r\\n+    forward.setRequired(true);\\r\\n+    directions.addOption(left);\\r\\n+    directions.addOption(right);\\r\\n+    directions.setRequired(true);\\r\\n+    Options opts = new Options();\\r\\n+    opts.addOptionGroup(directions);\\r\\n+    opts.addOption(straight);\\r\\n+    CommandLineParser parser = new PosixParser();\\r\\n+    boolean exception = false;\\r\\n+    String[] args = new String[] {};\\r\\n+    try {\\r\\n+        CommandLine line = parser.parse(opts, args);\\r\\n+    } catch (ParseException exp) {\\r\\n+        exception = true;\\r\\n+    }\\r\\n+    if (!exception) {\\r\\n+        fail(\\\"Expected exception not caught.\\\");\\r\\n+    }\\r\\n+    exception = false;\\r\\n+    args = new String[] { \\\"-s\\\" };\\r\\n+    try {\\r\\n+        CommandLine line = parser.parse(opts, args);\\r\\n+    } catch (ParseException exp) {\\r\\n+        exception = true;\\r\\n+    }\\r\\n+    if (!exception) {\\r\\n+        fail(\\\"Expected exception not caught.\\\");\\r\\n+    }\\r\\n+    exception = false;\\r\\n+    args = new String[] { \\\"-s\\\", \\\"-l\\\" };\\r\\n+    try {\\r\\n+        CommandLine line = parser.parse(opts, args);\\r\\n+    } catch (ParseException exp) {\\r\\n+        fail(\\\"Unexpected exception: \\\" + exp.getMessage());\\r\\n+    }\\r\\n+    opts.addOption(forward);\\r\\n+    args = new String[] { \\\"-s\\\", \\\"-l\\\", \\\"-f\\\" };\\r\\n+    try {\\r\\n+        CommandLine line = parser.parse(opts, args);\\r\\n+    } catch (ParseException exp) {\\r\\n+        fail(\\\"Unexpected exception: \\\" + exp.getMessage());\\r\\n+    }\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\test\java\org\apache\commons\cli\bug\BugsTest.java	test14786	org.apache.commons.cli.bug.BugsTest.test14786()	296	308	1	[{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"@@ -1,11 +1,11 @@\\n @Test\\r\\n public void test14786() throws Exception {\\r\\n     final Option o = OptionBuilder.isRequired().withDescription(\\\"test\\\").create(\\\"test\\\");\\r\\n     final Options opts = new Options();\\r\\n     opts.addOption(o);\\r\\n     opts.addOption(o);\\r\\n     final CommandLineParser parser = new GnuParser();\\r\\n-    final String[] args = new String[] { \\\"-test\\\" };\\r\\n+    final String[] args = { \\\"-test\\\" };\\r\\n     final CommandLine line = parser.parse(opts, args);\\r\\n     assertTrue(line.hasOption(\\\"test\\\"));\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,11 +1,11 @@\\n @Test\\r\\n public void test14786() throws Exception {\\r\\n-    Option o = OptionBuilder.isRequired().withDescription(\\\"test\\\").create(\\\"test\\\");\\r\\n-    Options opts = new Options();\\r\\n+    final Option o = OptionBuilder.isRequired().withDescription(\\\"test\\\").create(\\\"test\\\");\\r\\n+    final Options opts = new Options();\\r\\n     opts.addOption(o);\\r\\n     opts.addOption(o);\\r\\n-    CommandLineParser parser = new GnuParser();\\r\\n-    String[] args = new String[] { \\\"-test\\\" };\\r\\n-    CommandLine line = parser.parse(opts, args);\\r\\n+    final CommandLineParser parser = new GnuParser();\\r\\n+    final String[] args = new String[] { \\\"-test\\\" };\\r\\n+    final CommandLine line = parser.parse(opts, args);\\r\\n     assertTrue(line.hasOption(\\\"test\\\"));\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"tn@apache.org","authorName":"Thomas Neidhart","commitYear":"2013","diff":"\"@@ -1,10 +1,11 @@\\n+@Test\\r\\n public void test14786() throws Exception {\\r\\n     Option o = OptionBuilder.isRequired().withDescription(\\\"test\\\").create(\\\"test\\\");\\r\\n     Options opts = new Options();\\r\\n     opts.addOption(o);\\r\\n     opts.addOption(o);\\r\\n     CommandLineParser parser = new GnuParser();\\r\\n     String[] args = new String[] { \\\"-test\\\" };\\r\\n     CommandLine line = parser.parse(opts, args);\\r\\n     assertTrue(line.hasOption(\\\"test\\\"));\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2003","diff":"\"@@ -1,13 +1,10 @@\\n-public void test14786() {\\r\\n+public void test14786() throws Exception {\\r\\n     Option o = OptionBuilder.isRequired().withDescription(\\\"test\\\").create(\\\"test\\\");\\r\\n     Options opts = new Options();\\r\\n     opts.addOption(o);\\r\\n     opts.addOption(o);\\r\\n     CommandLineParser parser = new GnuParser();\\r\\n     String[] args = new String[] { \\\"-test\\\" };\\r\\n-    try {\\r\\n-        CommandLine line = parser.parse(opts, args);\\r\\n-    } catch (ParseException exp) {\\r\\n-        fail(\\\"Unexpected exception:\\\" + exp.getMessage());\\r\\n-    }\\r\\n+    CommandLine line = parser.parse(opts, args);\\r\\n+    assertTrue(line.hasOption(\\\"test\\\"));\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -0,0 +1,13 @@\\n+public void test14786() {\\r\\n+    Option o = OptionBuilder.isRequired().withDescription(\\\"test\\\").create(\\\"test\\\");\\r\\n+    Options opts = new Options();\\r\\n+    opts.addOption(o);\\r\\n+    opts.addOption(o);\\r\\n+    CommandLineParser parser = new GnuParser();\\r\\n+    String[] args = new String[] { \\\"-test\\\" };\\r\\n+    try {\\r\\n+        CommandLine line = parser.parse(opts, args);\\r\\n+    } catch (ParseException exp) {\\r\\n+        fail(\\\"Unexpected exception:\\\" + exp.getMessage());\\r\\n+    }\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\test\java\org\apache\commons\cli\bug\BugsTest.java	test15046	org.apache.commons.cli.bug.BugsTest.test15046()	311	325	1	[{"authorEmail":"arturobernalg@gmail.com","authorName":"Arturo Bernal","commitYear":"2021","diff":"\"@@ -1,12 +1,12 @@\\n @Test\\r\\n public void test15046() throws Exception {\\r\\n     final CommandLineParser parser = new PosixParser();\\r\\n     final String[] cliArgs = { \\\"-z\\\", \\\"c\\\" };\\r\\n     final Options options = new Options();\\r\\n     options.addOption(new Option(\\\"z\\\", \\\"timezone\\\", true, \\\"affected option\\\"));\\r\\n     parser.parse(options, cliArgs);\\r\\n     options.addOption(\\\"c\\\", \\\"conflict\\\", true, \\\"conflict option\\\");\\r\\n     final CommandLine line = parser.parse(options, cliArgs);\\r\\n     assertEquals(line.getOptionValue('z'), \\\"c\\\");\\r\\n-    assertTrue(!line.hasOption(\\\"c\\\"));\\r\\n+    assertFalse(line.hasOption(\\\"c\\\"));\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"@@ -1,12 +1,12 @@\\n @Test\\r\\n public void test15046() throws Exception {\\r\\n     final CommandLineParser parser = new PosixParser();\\r\\n-    final String[] CLI_ARGS = new String[] { \\\"-z\\\", \\\"c\\\" };\\r\\n+    final String[] cliArgs = { \\\"-z\\\", \\\"c\\\" };\\r\\n     final Options options = new Options();\\r\\n     options.addOption(new Option(\\\"z\\\", \\\"timezone\\\", true, \\\"affected option\\\"));\\r\\n-    parser.parse(options, CLI_ARGS);\\r\\n+    parser.parse(options, cliArgs);\\r\\n     options.addOption(\\\"c\\\", \\\"conflict\\\", true, \\\"conflict option\\\");\\r\\n-    final CommandLine line = parser.parse(options, CLI_ARGS);\\r\\n+    final CommandLine line = parser.parse(options, cliArgs);\\r\\n     assertEquals(line.getOptionValue('z'), \\\"c\\\");\\r\\n     assertTrue(!line.hasOption(\\\"c\\\"));\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2019","diff":"\"\""},{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,12 +1,12 @@\\n @Test\\r\\n public void test15046() throws Exception {\\r\\n-    CommandLineParser parser = new PosixParser();\\r\\n-    String[] CLI_ARGS = new String[] { \\\"-z\\\", \\\"c\\\" };\\r\\n-    Options options = new Options();\\r\\n+    final CommandLineParser parser = new PosixParser();\\r\\n+    final String[] CLI_ARGS = new String[] { \\\"-z\\\", \\\"c\\\" };\\r\\n+    final Options options = new Options();\\r\\n     options.addOption(new Option(\\\"z\\\", \\\"timezone\\\", true, \\\"affected option\\\"));\\r\\n     parser.parse(options, CLI_ARGS);\\r\\n     options.addOption(\\\"c\\\", \\\"conflict\\\", true, \\\"conflict option\\\");\\r\\n-    CommandLine line = parser.parse(options, CLI_ARGS);\\r\\n+    final CommandLine line = parser.parse(options, CLI_ARGS);\\r\\n     assertEquals(line.getOptionValue('z'), \\\"c\\\");\\r\\n     assertTrue(!line.hasOption(\\\"c\\\"));\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"tn@apache.org","authorName":"Thomas Neidhart","commitYear":"2013","diff":"\"@@ -1,11 +1,12 @@\\n+@Test\\r\\n public void test15046() throws Exception {\\r\\n     CommandLineParser parser = new PosixParser();\\r\\n     String[] CLI_ARGS = new String[] { \\\"-z\\\", \\\"c\\\" };\\r\\n     Options options = new Options();\\r\\n     options.addOption(new Option(\\\"z\\\", \\\"timezone\\\", true, \\\"affected option\\\"));\\r\\n     parser.parse(options, CLI_ARGS);\\r\\n     options.addOption(\\\"c\\\", \\\"conflict\\\", true, \\\"conflict option\\\");\\r\\n     CommandLine line = parser.parse(options, CLI_ARGS);\\r\\n     assertEquals(line.getOptionValue('z'), \\\"c\\\");\\r\\n     assertTrue(!line.hasOption(\\\"c\\\"));\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2008","diff":"\"@@ -1,12 +1,11 @@\\n public void test15046() throws Exception {\\r\\n     CommandLineParser parser = new PosixParser();\\r\\n-    final String[] CLI_ARGS = new String[] { \\\"-z\\\", \\\"c\\\" };\\r\\n-    Option option = new Option(\\\"z\\\", \\\"timezone\\\", true, \\\"affected option\\\");\\r\\n-    Options cliOptions = new Options();\\r\\n-    cliOptions.addOption(option);\\r\\n-    parser.parse(cliOptions, CLI_ARGS);\\r\\n-    cliOptions.addOption(\\\"c\\\", \\\"conflict\\\", true, \\\"conflict option\\\");\\r\\n-    CommandLine line = parser.parse(cliOptions, CLI_ARGS);\\r\\n-    assertEquals(option.getValue(), \\\"c\\\");\\r\\n+    String[] CLI_ARGS = new String[] { \\\"-z\\\", \\\"c\\\" };\\r\\n+    Options options = new Options();\\r\\n+    options.addOption(new Option(\\\"z\\\", \\\"timezone\\\", true, \\\"affected option\\\"));\\r\\n+    parser.parse(options, CLI_ARGS);\\r\\n+    options.addOption(\\\"c\\\", \\\"conflict\\\", true, \\\"conflict option\\\");\\r\\n+    CommandLine line = parser.parse(options, CLI_ARGS);\\r\\n+    assertEquals(line.getOptionValue('z'), \\\"c\\\");\\r\\n     assertTrue(!line.hasOption(\\\"c\\\"));\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2003","diff":"\"@@ -0,0 +1,12 @@\\n+public void test15046() throws Exception {\\r\\n+    CommandLineParser parser = new PosixParser();\\r\\n+    final String[] CLI_ARGS = new String[] { \\\"-z\\\", \\\"c\\\" };\\r\\n+    Option option = new Option(\\\"z\\\", \\\"timezone\\\", true, \\\"affected option\\\");\\r\\n+    Options cliOptions = new Options();\\r\\n+    cliOptions.addOption(option);\\r\\n+    parser.parse(cliOptions, CLI_ARGS);\\r\\n+    cliOptions.addOption(\\\"c\\\", \\\"conflict\\\", true, \\\"conflict option\\\");\\r\\n+    CommandLine line = parser.parse(cliOptions, CLI_ARGS);\\r\\n+    assertEquals(option.getValue(), \\\"c\\\");\\r\\n+    assertTrue(!line.hasOption(\\\"c\\\"));\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\test\java\org\apache\commons\cli\bug\BugsTest.java	test15648	org.apache.commons.cli.bug.BugsTest.test15648()	328	336	1	[{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"@@ -1,10 +1,10 @@\\n @Test\\r\\n public void test15648() throws Exception {\\r\\n     final CommandLineParser parser = new PosixParser();\\r\\n-    final String[] args = new String[] { \\\"-m\\\", \\\"\\\\\\\"Two Words\\\\\\\"\\\" };\\r\\n+    final String[] args = { \\\"-m\\\", \\\"\\\\\\\"Two Words\\\\\\\"\\\" };\\r\\n     final Option m = OptionBuilder.hasArgs().create(\\\"m\\\");\\r\\n     final Options options = new Options();\\r\\n     options.addOption(m);\\r\\n     final CommandLine line = parser.parse(options, args);\\r\\n     assertEquals(\\\"Two Words\\\", line.getOptionValue(\\\"m\\\"));\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,10 +1,10 @@\\n @Test\\r\\n public void test15648() throws Exception {\\r\\n-    CommandLineParser parser = new PosixParser();\\r\\n+    final CommandLineParser parser = new PosixParser();\\r\\n     final String[] args = new String[] { \\\"-m\\\", \\\"\\\\\\\"Two Words\\\\\\\"\\\" };\\r\\n-    Option m = OptionBuilder.hasArgs().create(\\\"m\\\");\\r\\n-    Options options = new Options();\\r\\n+    final Option m = OptionBuilder.hasArgs().create(\\\"m\\\");\\r\\n+    final Options options = new Options();\\r\\n     options.addOption(m);\\r\\n-    CommandLine line = parser.parse(options, args);\\r\\n+    final CommandLine line = parser.parse(options, args);\\r\\n     assertEquals(\\\"Two Words\\\", line.getOptionValue(\\\"m\\\"));\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"tn@apache.org","authorName":"Thomas Neidhart","commitYear":"2013","diff":"\"@@ -1,9 +1,10 @@\\n+@Test\\r\\n public void test15648() throws Exception {\\r\\n     CommandLineParser parser = new PosixParser();\\r\\n     final String[] args = new String[] { \\\"-m\\\", \\\"\\\\\\\"Two Words\\\\\\\"\\\" };\\r\\n     Option m = OptionBuilder.hasArgs().create(\\\"m\\\");\\r\\n     Options options = new Options();\\r\\n     options.addOption(m);\\r\\n     CommandLine line = parser.parse(options, args);\\r\\n     assertEquals(\\\"Two Words\\\", line.getOptionValue(\\\"m\\\"));\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2003","diff":"\"@@ -1,9 +1,9 @@\\n public void test15648() throws Exception {\\r\\n     CommandLineParser parser = new PosixParser();\\r\\n     final String[] args = new String[] { \\\"-m\\\", \\\"\\\\\\\"Two Words\\\\\\\"\\\" };\\r\\n     Option m = OptionBuilder.hasArgs().create(\\\"m\\\");\\r\\n     Options options = new Options();\\r\\n     options.addOption(m);\\r\\n     CommandLine line = parser.parse(options, args);\\r\\n-    assertEquals(\\\"\\\\\\\"Two Words\\\\\\\"\\\", line.getOptionValue(\\\"m\\\"));\\r\\n+    assertEquals(\\\"Two Words\\\", line.getOptionValue(\\\"m\\\"));\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2003","diff":"\"@@ -0,0 +1,9 @@\\n+public void test15648() throws Exception {\\r\\n+    CommandLineParser parser = new PosixParser();\\r\\n+    final String[] args = new String[] { \\\"-m\\\", \\\"\\\\\\\"Two Words\\\\\\\"\\\" };\\r\\n+    Option m = OptionBuilder.hasArgs().create(\\\"m\\\");\\r\\n+    Options options = new Options();\\r\\n+    options.addOption(m);\\r\\n+    CommandLine line = parser.parse(options, args);\\r\\n+    assertEquals(\\\"\\\\\\\"Two Words\\\\\\\"\\\", line.getOptionValue(\\\"m\\\"));\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\test\java\org\apache\commons\cli\bug\BugsTest.java	test31148	org.apache.commons.cli.bug.BugsTest.test31148()	339	354	1	[{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"@@ -1,14 +1,14 @@\\n @Test\\r\\n public void test31148() throws ParseException {\\r\\n     final Option multiArgOption = new Option(\\\"o\\\", \\\"option with multiple args\\\");\\r\\n     multiArgOption.setArgs(1);\\r\\n     final Options options = new Options();\\r\\n     options.addOption(multiArgOption);\\r\\n     final Parser parser = new PosixParser();\\r\\n-    final String[] args = new String[] {};\\r\\n+    final String[] args = {};\\r\\n     final Properties props = new Properties();\\r\\n     props.setProperty(\\\"o\\\", \\\"ovalue\\\");\\r\\n     final CommandLine cl = parser.parse(options, args, props);\\r\\n     assertTrue(cl.hasOption('o'));\\r\\n     assertEquals(\\\"ovalue\\\", cl.getOptionValue('o'));\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2019","diff":"\"\""},{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,14 +1,14 @@\\n @Test\\r\\n public void test31148() throws ParseException {\\r\\n-    Option multiArgOption = new Option(\\\"o\\\", \\\"option with multiple args\\\");\\r\\n+    final Option multiArgOption = new Option(\\\"o\\\", \\\"option with multiple args\\\");\\r\\n     multiArgOption.setArgs(1);\\r\\n-    Options options = new Options();\\r\\n+    final Options options = new Options();\\r\\n     options.addOption(multiArgOption);\\r\\n-    Parser parser = new PosixParser();\\r\\n-    String[] args = new String[] {};\\r\\n-    Properties props = new Properties();\\r\\n+    final Parser parser = new PosixParser();\\r\\n+    final String[] args = new String[] {};\\r\\n+    final Properties props = new Properties();\\r\\n     props.setProperty(\\\"o\\\", \\\"ovalue\\\");\\r\\n-    CommandLine cl = parser.parse(options, args, props);\\r\\n+    final CommandLine cl = parser.parse(options, args, props);\\r\\n     assertTrue(cl.hasOption('o'));\\r\\n     assertEquals(\\\"ovalue\\\", cl.getOptionValue('o'));\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"tn@apache.org","authorName":"Thomas Neidhart","commitYear":"2013","diff":"\"@@ -1,13 +1,14 @@\\n+@Test\\r\\n public void test31148() throws ParseException {\\r\\n     Option multiArgOption = new Option(\\\"o\\\", \\\"option with multiple args\\\");\\r\\n     multiArgOption.setArgs(1);\\r\\n     Options options = new Options();\\r\\n     options.addOption(multiArgOption);\\r\\n     Parser parser = new PosixParser();\\r\\n     String[] args = new String[] {};\\r\\n     Properties props = new Properties();\\r\\n     props.setProperty(\\\"o\\\", \\\"ovalue\\\");\\r\\n     CommandLine cl = parser.parse(options, args, props);\\r\\n     assertTrue(cl.hasOption('o'));\\r\\n     assertEquals(\\\"ovalue\\\", cl.getOptionValue('o'));\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"roxspring@apache.org","authorName":"Robert James Oxspring","commitYear":"2004","diff":"\"@@ -0,0 +1,13 @@\\n+public void test31148() throws ParseException {\\r\\n+    Option multiArgOption = new Option(\\\"o\\\", \\\"option with multiple args\\\");\\r\\n+    multiArgOption.setArgs(1);\\r\\n+    Options options = new Options();\\r\\n+    options.addOption(multiArgOption);\\r\\n+    Parser parser = new PosixParser();\\r\\n+    String[] args = new String[] {};\\r\\n+    Properties props = new Properties();\\r\\n+    props.setProperty(\\\"o\\\", \\\"ovalue\\\");\\r\\n+    CommandLine cl = parser.parse(options, args, props);\\r\\n+    assertTrue(cl.hasOption('o'));\\r\\n+    assertEquals(\\\"ovalue\\\", cl.getOptionValue('o'));\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\test\java\org\apache\commons\cli\CommandLineTest.java	testBuilder	org.apache.commons.cli.CommandLineTest.testBuilder()	32	41	1	[{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"@@ -1,10 +1,10 @@\\n @Test\\r\\n-public void testBuilder() throws Exception {\\r\\n+public void testBuilder() {\\r\\n     final CommandLine.Builder builder = new CommandLine.Builder();\\r\\n     builder.addArg(\\\"foo\\\").addArg(\\\"bar\\\");\\r\\n     builder.addOption(Option.builder(\\\"T\\\").build());\\r\\n     final CommandLine cmd = builder.build();\\r\\n     assertEquals(\\\"foo\\\", cmd.getArgs()[0]);\\r\\n     assertEquals(\\\"bar\\\", cmd.getArgList().get(1));\\r\\n     assertEquals(\\\"T\\\", cmd.getOptions()[0].getOpt());\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"\""},{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,10 +1,10 @@\\n @Test\\r\\n public void testBuilder() throws Exception {\\r\\n-    CommandLine.Builder builder = new CommandLine.Builder();\\r\\n+    final CommandLine.Builder builder = new CommandLine.Builder();\\r\\n     builder.addArg(\\\"foo\\\").addArg(\\\"bar\\\");\\r\\n     builder.addOption(Option.builder(\\\"T\\\").build());\\r\\n-    CommandLine cmd = builder.build();\\r\\n+    final CommandLine cmd = builder.build();\\r\\n     assertEquals(\\\"foo\\\", cmd.getArgs()[0]);\\r\\n     assertEquals(\\\"bar\\\", cmd.getArgList().get(1));\\r\\n     assertEquals(\\\"T\\\", cmd.getOptions()[0].getOpt());\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"rfscholte@apache.org","authorName":"Robert Scholte","commitYear":"2017","diff":"\"@@ -0,0 +1,10 @@\\n+@Test\\r\\n+public void testBuilder() throws Exception {\\r\\n+    CommandLine.Builder builder = new CommandLine.Builder();\\r\\n+    builder.addArg(\\\"foo\\\").addArg(\\\"bar\\\");\\r\\n+    builder.addOption(Option.builder(\\\"T\\\").build());\\r\\n+    CommandLine cmd = builder.build();\\r\\n+    assertEquals(\\\"foo\\\", cmd.getArgs()[0]);\\r\\n+    assertEquals(\\\"bar\\\", cmd.getArgList().get(1));\\r\\n+    assertEquals(\\\"T\\\", cmd.getOptions()[0].getOpt());\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\test\java\org\apache\commons\cli\CommandLineTest.java	testBuilderNullArgs	org.apache.commons.cli.CommandLineTest.testBuilderNullArgs()	44	52	1	[{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2023","diff":"\"@@ -1,10 +1,9 @@\\n @Test\\r\\n-public void testBuilderNulls() {\\r\\n+public void testBuilderNullArgs() {\\r\\n     final CommandLine.Builder builder = new CommandLine.Builder();\\r\\n-    builder.addArg(\\\"foo\\\").addArg(\\\"bar\\\");\\r\\n-    builder.addOption(null);\\r\\n+    builder.addArg(null).addArg(null);\\r\\n+    builder.addOption(Option.builder(\\\"T\\\").build());\\r\\n     final CommandLine cmd = builder.build();\\r\\n-    assertEquals(\\\"foo\\\", cmd.getArgs()[0]);\\r\\n-    assertEquals(\\\"bar\\\", cmd.getArgList().get(1));\\r\\n-    assertEquals(0, cmd.getOptions().length);\\r\\n+    assertEquals(0, cmd.getArgs().length);\\r\\n+    assertEquals(\\\"T\\\", cmd.getOptions()[0].getOpt());\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2023","diff":"\"@@ -0,0 +1,10 @@\\n+@Test\\r\\n+public void testBuilderNulls() {\\r\\n+    final CommandLine.Builder builder = new CommandLine.Builder();\\r\\n+    builder.addArg(\\\"foo\\\").addArg(\\\"bar\\\");\\r\\n+    builder.addOption(null);\\r\\n+    final CommandLine cmd = builder.build();\\r\\n+    assertEquals(\\\"foo\\\", cmd.getArgs()[0]);\\r\\n+    assertEquals(\\\"bar\\\", cmd.getArgList().get(1));\\r\\n+    assertEquals(0, cmd.getOptions().length);\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\test\java\org\apache\commons\cli\CommandLineTest.java	testBuilderNullOption	org.apache.commons.cli.CommandLineTest.testBuilderNullOption()	55	66	1	[{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2023","diff":"\"@@ -1,10 +1,12 @@\\n @Test\\r\\n-public void testBuilderNulls() {\\r\\n+public void testBuilderNullOption() {\\r\\n     final CommandLine.Builder builder = new CommandLine.Builder();\\r\\n     builder.addArg(\\\"foo\\\").addArg(\\\"bar\\\");\\r\\n     builder.addOption(null);\\r\\n+    builder.addOption(null);\\r\\n+    builder.addOption(null);\\r\\n     final CommandLine cmd = builder.build();\\r\\n     assertEquals(\\\"foo\\\", cmd.getArgs()[0]);\\r\\n     assertEquals(\\\"bar\\\", cmd.getArgList().get(1));\\r\\n     assertEquals(0, cmd.getOptions().length);\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2023","diff":"\"@@ -0,0 +1,10 @@\\n+@Test\\r\\n+public void testBuilderNulls() {\\r\\n+    final CommandLine.Builder builder = new CommandLine.Builder();\\r\\n+    builder.addArg(\\\"foo\\\").addArg(\\\"bar\\\");\\r\\n+    builder.addOption(null);\\r\\n+    final CommandLine cmd = builder.build();\\r\\n+    assertEquals(\\\"foo\\\", cmd.getArgs()[0]);\\r\\n+    assertEquals(\\\"bar\\\", cmd.getArgList().get(1));\\r\\n+    assertEquals(0, cmd.getOptions().length);\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\test\java\org\apache\commons\cli\CommandLineTest.java	testGetOptionProperties	org.apache.commons.cli.CommandLineTest.testGetOptionProperties()	69	88	1	[{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"@@ -1,17 +1,17 @@\\n @Test\\r\\n public void testGetOptionProperties() throws Exception {\\r\\n-    final String[] args = new String[] { \\\"-Dparam1=value1\\\", \\\"-Dparam2=value2\\\", \\\"-Dparam3\\\", \\\"-Dparam4=value4\\\", \\\"-D\\\", \\\"--property\\\", \\\"foo=bar\\\" };\\r\\n+    final String[] args = { \\\"-Dparam1=value1\\\", \\\"-Dparam2=value2\\\", \\\"-Dparam3\\\", \\\"-Dparam4=value4\\\", \\\"-D\\\", \\\"--property\\\", \\\"foo=bar\\\" };\\r\\n     final Options options = new Options();\\r\\n     options.addOption(OptionBuilder.withValueSeparator().hasOptionalArgs(2).create('D'));\\r\\n     options.addOption(OptionBuilder.withValueSeparator().hasArgs(2).withLongOpt(\\\"property\\\").create());\\r\\n     final Parser parser = new GnuParser();\\r\\n     final CommandLine cl = parser.parse(options, args);\\r\\n     final Properties props = cl.getOptionProperties(\\\"D\\\");\\r\\n     assertNotNull(\\\"null properties\\\", props);\\r\\n     assertEquals(\\\"number of properties in \\\" + props, 4, props.size());\\r\\n     assertEquals(\\\"property 1\\\", \\\"value1\\\", props.getProperty(\\\"param1\\\"));\\r\\n     assertEquals(\\\"property 2\\\", \\\"value2\\\", props.getProperty(\\\"param2\\\"));\\r\\n     assertEquals(\\\"property 3\\\", \\\"true\\\", props.getProperty(\\\"param3\\\"));\\r\\n     assertEquals(\\\"property 4\\\", \\\"value4\\\", props.getProperty(\\\"param4\\\"));\\r\\n     assertEquals(\\\"property with long format\\\", \\\"bar\\\", cl.getOptionProperties(\\\"property\\\").getProperty(\\\"foo\\\"));\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,17 +1,17 @@\\n @Test\\r\\n public void testGetOptionProperties() throws Exception {\\r\\n-    String[] args = new String[] { \\\"-Dparam1=value1\\\", \\\"-Dparam2=value2\\\", \\\"-Dparam3\\\", \\\"-Dparam4=value4\\\", \\\"-D\\\", \\\"--property\\\", \\\"foo=bar\\\" };\\r\\n-    Options options = new Options();\\r\\n+    final String[] args = new String[] { \\\"-Dparam1=value1\\\", \\\"-Dparam2=value2\\\", \\\"-Dparam3\\\", \\\"-Dparam4=value4\\\", \\\"-D\\\", \\\"--property\\\", \\\"foo=bar\\\" };\\r\\n+    final Options options = new Options();\\r\\n     options.addOption(OptionBuilder.withValueSeparator().hasOptionalArgs(2).create('D'));\\r\\n     options.addOption(OptionBuilder.withValueSeparator().hasArgs(2).withLongOpt(\\\"property\\\").create());\\r\\n-    Parser parser = new GnuParser();\\r\\n-    CommandLine cl = parser.parse(options, args);\\r\\n-    Properties props = cl.getOptionProperties(\\\"D\\\");\\r\\n+    final Parser parser = new GnuParser();\\r\\n+    final CommandLine cl = parser.parse(options, args);\\r\\n+    final Properties props = cl.getOptionProperties(\\\"D\\\");\\r\\n     assertNotNull(\\\"null properties\\\", props);\\r\\n     assertEquals(\\\"number of properties in \\\" + props, 4, props.size());\\r\\n     assertEquals(\\\"property 1\\\", \\\"value1\\\", props.getProperty(\\\"param1\\\"));\\r\\n     assertEquals(\\\"property 2\\\", \\\"value2\\\", props.getProperty(\\\"param2\\\"));\\r\\n     assertEquals(\\\"property 3\\\", \\\"true\\\", props.getProperty(\\\"param3\\\"));\\r\\n     assertEquals(\\\"property 4\\\", \\\"value4\\\", props.getProperty(\\\"param4\\\"));\\r\\n     assertEquals(\\\"property with long format\\\", \\\"bar\\\", cl.getOptionProperties(\\\"property\\\").getProperty(\\\"foo\\\"));\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"tn@apache.org","authorName":"Thomas Neidhart","commitYear":"2013","diff":"\"@@ -1,16 +1,17 @@\\n+@Test\\r\\n public void testGetOptionProperties() throws Exception {\\r\\n     String[] args = new String[] { \\\"-Dparam1=value1\\\", \\\"-Dparam2=value2\\\", \\\"-Dparam3\\\", \\\"-Dparam4=value4\\\", \\\"-D\\\", \\\"--property\\\", \\\"foo=bar\\\" };\\r\\n     Options options = new Options();\\r\\n     options.addOption(OptionBuilder.withValueSeparator().hasOptionalArgs(2).create('D'));\\r\\n     options.addOption(OptionBuilder.withValueSeparator().hasArgs(2).withLongOpt(\\\"property\\\").create());\\r\\n     Parser parser = new GnuParser();\\r\\n     CommandLine cl = parser.parse(options, args);\\r\\n     Properties props = cl.getOptionProperties(\\\"D\\\");\\r\\n     assertNotNull(\\\"null properties\\\", props);\\r\\n     assertEquals(\\\"number of properties in \\\" + props, 4, props.size());\\r\\n     assertEquals(\\\"property 1\\\", \\\"value1\\\", props.getProperty(\\\"param1\\\"));\\r\\n     assertEquals(\\\"property 2\\\", \\\"value2\\\", props.getProperty(\\\"param2\\\"));\\r\\n     assertEquals(\\\"property 3\\\", \\\"true\\\", props.getProperty(\\\"param3\\\"));\\r\\n     assertEquals(\\\"property 4\\\", \\\"value4\\\", props.getProperty(\\\"param4\\\"));\\r\\n     assertEquals(\\\"property with long format\\\", \\\"bar\\\", cl.getOptionProperties(\\\"property\\\").getProperty(\\\"foo\\\"));\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2008","diff":"\"@@ -0,0 +1,16 @@\\n+public void testGetOptionProperties() throws Exception {\\r\\n+    String[] args = new String[] { \\\"-Dparam1=value1\\\", \\\"-Dparam2=value2\\\", \\\"-Dparam3\\\", \\\"-Dparam4=value4\\\", \\\"-D\\\", \\\"--property\\\", \\\"foo=bar\\\" };\\r\\n+    Options options = new Options();\\r\\n+    options.addOption(OptionBuilder.withValueSeparator().hasOptionalArgs(2).create('D'));\\r\\n+    options.addOption(OptionBuilder.withValueSeparator().hasArgs(2).withLongOpt(\\\"property\\\").create());\\r\\n+    Parser parser = new GnuParser();\\r\\n+    CommandLine cl = parser.parse(options, args);\\r\\n+    Properties props = cl.getOptionProperties(\\\"D\\\");\\r\\n+    assertNotNull(\\\"null properties\\\", props);\\r\\n+    assertEquals(\\\"number of properties in \\\" + props, 4, props.size());\\r\\n+    assertEquals(\\\"property 1\\\", \\\"value1\\\", props.getProperty(\\\"param1\\\"));\\r\\n+    assertEquals(\\\"property 2\\\", \\\"value2\\\", props.getProperty(\\\"param2\\\"));\\r\\n+    assertEquals(\\\"property 3\\\", \\\"true\\\", props.getProperty(\\\"param3\\\"));\\r\\n+    assertEquals(\\\"property 4\\\", \\\"value4\\\", props.getProperty(\\\"param4\\\"));\\r\\n+    assertEquals(\\\"property with long format\\\", \\\"bar\\\", cl.getOptionProperties(\\\"property\\\").getProperty(\\\"foo\\\"));\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\test\java\org\apache\commons\cli\CommandLineTest.java	testGetOptionPropertiesWithOption	org.apache.commons.cli.CommandLineTest.testGetOptionPropertiesWithOption()	91	112	1	[{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"@@ -1,19 +1,19 @@\\n @Test\\r\\n public void testGetOptionPropertiesWithOption() throws Exception {\\r\\n-    final String[] args = new String[] { \\\"-Dparam1=value1\\\", \\\"-Dparam2=value2\\\", \\\"-Dparam3\\\", \\\"-Dparam4=value4\\\", \\\"-D\\\", \\\"--property\\\", \\\"foo=bar\\\" };\\r\\n+    final String[] args = { \\\"-Dparam1=value1\\\", \\\"-Dparam2=value2\\\", \\\"-Dparam3\\\", \\\"-Dparam4=value4\\\", \\\"-D\\\", \\\"--property\\\", \\\"foo=bar\\\" };\\r\\n     final Options options = new Options();\\r\\n-    final Option option_D = OptionBuilder.withValueSeparator().hasOptionalArgs(2).create('D');\\r\\n-    final Option option_property = OptionBuilder.withValueSeparator().hasArgs(2).withLongOpt(\\\"property\\\").create();\\r\\n-    options.addOption(option_D);\\r\\n-    options.addOption(option_property);\\r\\n+    final Option optionD = OptionBuilder.withValueSeparator().hasOptionalArgs(2).create('D');\\r\\n+    final Option optionProperty = OptionBuilder.withValueSeparator().hasArgs(2).withLongOpt(\\\"property\\\").create();\\r\\n+    options.addOption(optionD);\\r\\n+    options.addOption(optionProperty);\\r\\n     final Parser parser = new GnuParser();\\r\\n     final CommandLine cl = parser.parse(options, args);\\r\\n-    final Properties props = cl.getOptionProperties(option_D);\\r\\n+    final Properties props = cl.getOptionProperties(optionD);\\r\\n     assertNotNull(\\\"null properties\\\", props);\\r\\n     assertEquals(\\\"number of properties in \\\" + props, 4, props.size());\\r\\n     assertEquals(\\\"property 1\\\", \\\"value1\\\", props.getProperty(\\\"param1\\\"));\\r\\n     assertEquals(\\\"property 2\\\", \\\"value2\\\", props.getProperty(\\\"param2\\\"));\\r\\n     assertEquals(\\\"property 3\\\", \\\"true\\\", props.getProperty(\\\"param3\\\"));\\r\\n     assertEquals(\\\"property 4\\\", \\\"value4\\\", props.getProperty(\\\"param4\\\"));\\r\\n-    assertEquals(\\\"property with long format\\\", \\\"bar\\\", cl.getOptionProperties(option_property).getProperty(\\\"foo\\\"));\\r\\n+    assertEquals(\\\"property with long format\\\", \\\"bar\\\", cl.getOptionProperties(optionProperty).getProperty(\\\"foo\\\"));\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,19 +1,19 @@\\n @Test\\r\\n public void testGetOptionPropertiesWithOption() throws Exception {\\r\\n-    String[] args = new String[] { \\\"-Dparam1=value1\\\", \\\"-Dparam2=value2\\\", \\\"-Dparam3\\\", \\\"-Dparam4=value4\\\", \\\"-D\\\", \\\"--property\\\", \\\"foo=bar\\\" };\\r\\n-    Options options = new Options();\\r\\n-    Option option_D = OptionBuilder.withValueSeparator().hasOptionalArgs(2).create('D');\\r\\n-    Option option_property = OptionBuilder.withValueSeparator().hasArgs(2).withLongOpt(\\\"property\\\").create();\\r\\n+    final String[] args = new String[] { \\\"-Dparam1=value1\\\", \\\"-Dparam2=value2\\\", \\\"-Dparam3\\\", \\\"-Dparam4=value4\\\", \\\"-D\\\", \\\"--property\\\", \\\"foo=bar\\\" };\\r\\n+    final Options options = new Options();\\r\\n+    final Option option_D = OptionBuilder.withValueSeparator().hasOptionalArgs(2).create('D');\\r\\n+    final Option option_property = OptionBuilder.withValueSeparator().hasArgs(2).withLongOpt(\\\"property\\\").create();\\r\\n     options.addOption(option_D);\\r\\n     options.addOption(option_property);\\r\\n-    Parser parser = new GnuParser();\\r\\n-    CommandLine cl = parser.parse(options, args);\\r\\n-    Properties props = cl.getOptionProperties(option_D);\\r\\n+    final Parser parser = new GnuParser();\\r\\n+    final CommandLine cl = parser.parse(options, args);\\r\\n+    final Properties props = cl.getOptionProperties(option_D);\\r\\n     assertNotNull(\\\"null properties\\\", props);\\r\\n     assertEquals(\\\"number of properties in \\\" + props, 4, props.size());\\r\\n     assertEquals(\\\"property 1\\\", \\\"value1\\\", props.getProperty(\\\"param1\\\"));\\r\\n     assertEquals(\\\"property 2\\\", \\\"value2\\\", props.getProperty(\\\"param2\\\"));\\r\\n     assertEquals(\\\"property 3\\\", \\\"true\\\", props.getProperty(\\\"param3\\\"));\\r\\n     assertEquals(\\\"property 4\\\", \\\"value4\\\", props.getProperty(\\\"param4\\\"));\\r\\n     assertEquals(\\\"property with long format\\\", \\\"bar\\\", cl.getOptionProperties(option_property).getProperty(\\\"foo\\\"));\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"britter@apache.org","authorName":"Benedikt Ritter","commitYear":"2017","diff":"\"@@ -0,0 +1,19 @@\\n+@Test\\r\\n+public void testGetOptionPropertiesWithOption() throws Exception {\\r\\n+    String[] args = new String[] { \\\"-Dparam1=value1\\\", \\\"-Dparam2=value2\\\", \\\"-Dparam3\\\", \\\"-Dparam4=value4\\\", \\\"-D\\\", \\\"--property\\\", \\\"foo=bar\\\" };\\r\\n+    Options options = new Options();\\r\\n+    Option option_D = OptionBuilder.withValueSeparator().hasOptionalArgs(2).create('D');\\r\\n+    Option option_property = OptionBuilder.withValueSeparator().hasArgs(2).withLongOpt(\\\"property\\\").create();\\r\\n+    options.addOption(option_D);\\r\\n+    options.addOption(option_property);\\r\\n+    Parser parser = new GnuParser();\\r\\n+    CommandLine cl = parser.parse(options, args);\\r\\n+    Properties props = cl.getOptionProperties(option_D);\\r\\n+    assertNotNull(\\\"null properties\\\", props);\\r\\n+    assertEquals(\\\"number of properties in \\\" + props, 4, props.size());\\r\\n+    assertEquals(\\\"property 1\\\", \\\"value1\\\", props.getProperty(\\\"param1\\\"));\\r\\n+    assertEquals(\\\"property 2\\\", \\\"value2\\\", props.getProperty(\\\"param2\\\"));\\r\\n+    assertEquals(\\\"property 3\\\", \\\"true\\\", props.getProperty(\\\"param3\\\"));\\r\\n+    assertEquals(\\\"property 4\\\", \\\"value4\\\", props.getProperty(\\\"param4\\\"));\\r\\n+    assertEquals(\\\"property with long format\\\", \\\"bar\\\", cl.getOptionProperties(option_property).getProperty(\\\"foo\\\"));\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\test\java\org\apache\commons\cli\CommandLineTest.java	testGetOptions	org.apache.commons.cli.CommandLineTest.testGetOptions()	115	125	1	[{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2019","diff":"\"\""},{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,10 +1,10 @@\\n @Test\\r\\n public void testGetOptions() {\\r\\n-    CommandLine cmd = new CommandLine();\\r\\n+    final CommandLine cmd = new CommandLine();\\r\\n     assertNotNull(cmd.getOptions());\\r\\n     assertEquals(0, cmd.getOptions().length);\\r\\n     cmd.addOption(new Option(\\\"a\\\", null));\\r\\n     cmd.addOption(new Option(\\\"b\\\", null));\\r\\n     cmd.addOption(new Option(\\\"c\\\", null));\\r\\n     assertEquals(3, cmd.getOptions().length);\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"tn@apache.org","authorName":"Thomas Neidhart","commitYear":"2013","diff":"\"@@ -1,9 +1,10 @@\\n+@Test\\r\\n public void testGetOptions() {\\r\\n     CommandLine cmd = new CommandLine();\\r\\n     assertNotNull(cmd.getOptions());\\r\\n     assertEquals(0, cmd.getOptions().length);\\r\\n     cmd.addOption(new Option(\\\"a\\\", null));\\r\\n     cmd.addOption(new Option(\\\"b\\\", null));\\r\\n     cmd.addOption(new Option(\\\"c\\\", null));\\r\\n     assertEquals(3, cmd.getOptions().length);\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2010","diff":"\"@@ -0,0 +1,9 @@\\n+public void testGetOptions() {\\r\\n+    CommandLine cmd = new CommandLine();\\r\\n+    assertNotNull(cmd.getOptions());\\r\\n+    assertEquals(0, cmd.getOptions().length);\\r\\n+    cmd.addOption(new Option(\\\"a\\\", null));\\r\\n+    cmd.addOption(new Option(\\\"b\\\", null));\\r\\n+    cmd.addOption(new Option(\\\"c\\\", null));\\r\\n+    assertEquals(3, cmd.getOptions().length);\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\test\java\org\apache\commons\cli\CommandLineTest.java	testGetParsedOptionValue	org.apache.commons.cli.CommandLineTest.testGetParsedOptionValue()	128	138	1	[{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"\""},{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2019","diff":"\"\""},{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,10 +1,10 @@\\n @Test\\r\\n public void testGetParsedOptionValue() throws Exception {\\r\\n-    Options options = new Options();\\r\\n+    final Options options = new Options();\\r\\n     options.addOption(OptionBuilder.hasArg().withType(Number.class).create(\\\"i\\\"));\\r\\n     options.addOption(OptionBuilder.hasArg().create(\\\"f\\\"));\\r\\n-    CommandLineParser parser = new DefaultParser();\\r\\n-    CommandLine cmd = parser.parse(options, new String[] { \\\"-i\\\", \\\"123\\\", \\\"-f\\\", \\\"foo\\\" });\\r\\n+    final CommandLineParser parser = new DefaultParser();\\r\\n+    final CommandLine cmd = parser.parse(options, new String[] { \\\"-i\\\", \\\"123\\\", \\\"-f\\\", \\\"foo\\\" });\\r\\n     assertEquals(123, ((Number) cmd.getParsedOptionValue(\\\"i\\\")).intValue());\\r\\n     assertEquals(\\\"foo\\\", cmd.getParsedOptionValue(\\\"f\\\"));\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"tn@apache.org","authorName":"Thomas Neidhart","commitYear":"2013","diff":"\"@@ -1,9 +1,10 @@\\n+@Test\\r\\n public void testGetParsedOptionValue() throws Exception {\\r\\n     Options options = new Options();\\r\\n     options.addOption(OptionBuilder.hasArg().withType(Number.class).create(\\\"i\\\"));\\r\\n     options.addOption(OptionBuilder.hasArg().create(\\\"f\\\"));\\r\\n     CommandLineParser parser = new DefaultParser();\\r\\n     CommandLine cmd = parser.parse(options, new String[] { \\\"-i\\\", \\\"123\\\", \\\"-f\\\", \\\"foo\\\" });\\r\\n     assertEquals(123, ((Number) cmd.getParsedOptionValue(\\\"i\\\")).intValue());\\r\\n     assertEquals(\\\"foo\\\", cmd.getParsedOptionValue(\\\"f\\\"));\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2011","diff":"\"@@ -0,0 +1,9 @@\\n+public void testGetParsedOptionValue() throws Exception {\\r\\n+    Options options = new Options();\\r\\n+    options.addOption(OptionBuilder.hasArg().withType(Number.class).create(\\\"i\\\"));\\r\\n+    options.addOption(OptionBuilder.hasArg().create(\\\"f\\\"));\\r\\n+    CommandLineParser parser = new DefaultParser();\\r\\n+    CommandLine cmd = parser.parse(options, new String[] { \\\"-i\\\", \\\"123\\\", \\\"-f\\\", \\\"foo\\\" });\\r\\n+    assertEquals(123, ((Number) cmd.getParsedOptionValue(\\\"i\\\")).intValue());\\r\\n+    assertEquals(\\\"foo\\\", cmd.getParsedOptionValue(\\\"f\\\"));\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\test\java\org\apache\commons\cli\CommandLineTest.java	testGetParsedOptionValueWithChar	org.apache.commons.cli.CommandLineTest.testGetParsedOptionValueWithChar()	141	151	1	[{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"\""},{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2019","diff":"\"\""},{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,10 +1,10 @@\\n @Test\\r\\n public void testGetParsedOptionValueWithChar() throws Exception {\\r\\n-    Options options = new Options();\\r\\n+    final Options options = new Options();\\r\\n     options.addOption(Option.builder(\\\"i\\\").hasArg().type(Number.class).build());\\r\\n     options.addOption(Option.builder(\\\"f\\\").hasArg().build());\\r\\n-    CommandLineParser parser = new DefaultParser();\\r\\n-    CommandLine cmd = parser.parse(options, new String[] { \\\"-i\\\", \\\"123\\\", \\\"-f\\\", \\\"foo\\\" });\\r\\n+    final CommandLineParser parser = new DefaultParser();\\r\\n+    final CommandLine cmd = parser.parse(options, new String[] { \\\"-i\\\", \\\"123\\\", \\\"-f\\\", \\\"foo\\\" });\\r\\n     assertEquals(123, ((Number) cmd.getParsedOptionValue('i')).intValue());\\r\\n     assertEquals(\\\"foo\\\", cmd.getParsedOptionValue('f'));\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"britter@apache.org","authorName":"Benedikt Ritter","commitYear":"2017","diff":"\"@@ -0,0 +1,10 @@\\n+@Test\\r\\n+public void testGetParsedOptionValueWithChar() throws Exception {\\r\\n+    Options options = new Options();\\r\\n+    options.addOption(Option.builder(\\\"i\\\").hasArg().type(Number.class).build());\\r\\n+    options.addOption(Option.builder(\\\"f\\\").hasArg().build());\\r\\n+    CommandLineParser parser = new DefaultParser();\\r\\n+    CommandLine cmd = parser.parse(options, new String[] { \\\"-i\\\", \\\"123\\\", \\\"-f\\\", \\\"foo\\\" });\\r\\n+    assertEquals(123, ((Number) cmd.getParsedOptionValue('i')).intValue());\\r\\n+    assertEquals(\\\"foo\\\", cmd.getParsedOptionValue('f'));\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\test\java\org\apache\commons\cli\CommandLineTest.java	testGetParsedOptionValueWithOption	org.apache.commons.cli.CommandLineTest.testGetParsedOptionValueWithOption()	154	166	1	[{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"@@ -1,12 +1,12 @@\\n @Test\\r\\n public void testGetParsedOptionValueWithOption() throws Exception {\\r\\n     final Options options = new Options();\\r\\n-    final Option opt_i = Option.builder(\\\"i\\\").hasArg().type(Number.class).build();\\r\\n-    final Option opt_f = Option.builder(\\\"f\\\").hasArg().build();\\r\\n-    options.addOption(opt_i);\\r\\n-    options.addOption(opt_f);\\r\\n+    final Option optI = Option.builder(\\\"i\\\").hasArg().type(Number.class).build();\\r\\n+    final Option optF = Option.builder(\\\"f\\\").hasArg().build();\\r\\n+    options.addOption(optI);\\r\\n+    options.addOption(optF);\\r\\n     final CommandLineParser parser = new DefaultParser();\\r\\n     final CommandLine cmd = parser.parse(options, new String[] { \\\"-i\\\", \\\"123\\\", \\\"-f\\\", \\\"foo\\\" });\\r\\n-    assertEquals(123, ((Number) cmd.getParsedOptionValue(opt_i)).intValue());\\r\\n-    assertEquals(\\\"foo\\\", cmd.getParsedOptionValue(opt_f));\\r\\n+    assertEquals(123, ((Number) cmd.getParsedOptionValue(optI)).intValue());\\r\\n+    assertEquals(\\\"foo\\\", cmd.getParsedOptionValue(optF));\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2019","diff":"\"\""},{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,12 +1,12 @@\\n @Test\\r\\n public void testGetParsedOptionValueWithOption() throws Exception {\\r\\n-    Options options = new Options();\\r\\n-    Option opt_i = Option.builder(\\\"i\\\").hasArg().type(Number.class).build();\\r\\n-    Option opt_f = Option.builder(\\\"f\\\").hasArg().build();\\r\\n+    final Options options = new Options();\\r\\n+    final Option opt_i = Option.builder(\\\"i\\\").hasArg().type(Number.class).build();\\r\\n+    final Option opt_f = Option.builder(\\\"f\\\").hasArg().build();\\r\\n     options.addOption(opt_i);\\r\\n     options.addOption(opt_f);\\r\\n-    CommandLineParser parser = new DefaultParser();\\r\\n-    CommandLine cmd = parser.parse(options, new String[] { \\\"-i\\\", \\\"123\\\", \\\"-f\\\", \\\"foo\\\" });\\r\\n+    final CommandLineParser parser = new DefaultParser();\\r\\n+    final CommandLine cmd = parser.parse(options, new String[] { \\\"-i\\\", \\\"123\\\", \\\"-f\\\", \\\"foo\\\" });\\r\\n     assertEquals(123, ((Number) cmd.getParsedOptionValue(opt_i)).intValue());\\r\\n     assertEquals(\\\"foo\\\", cmd.getParsedOptionValue(opt_f));\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"britter@apache.org","authorName":"Benedikt Ritter","commitYear":"2017","diff":"\"@@ -0,0 +1,12 @@\\n+@Test\\r\\n+public void testGetParsedOptionValueWithOption() throws Exception {\\r\\n+    Options options = new Options();\\r\\n+    Option opt_i = Option.builder(\\\"i\\\").hasArg().type(Number.class).build();\\r\\n+    Option opt_f = Option.builder(\\\"f\\\").hasArg().build();\\r\\n+    options.addOption(opt_i);\\r\\n+    options.addOption(opt_f);\\r\\n+    CommandLineParser parser = new DefaultParser();\\r\\n+    CommandLine cmd = parser.parse(options, new String[] { \\\"-i\\\", \\\"123\\\", \\\"-f\\\", \\\"foo\\\" });\\r\\n+    assertEquals(123, ((Number) cmd.getParsedOptionValue(opt_i)).intValue());\\r\\n+    assertEquals(\\\"foo\\\", cmd.getParsedOptionValue(opt_f));\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\test\java\org\apache\commons\cli\CommandLineTest.java	testNullhOption	org.apache.commons.cli.CommandLineTest.testNullhOption()	169	179	1	[{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"@@ -1,12 +1,12 @@\\n @Test\\r\\n public void testNullhOption() throws Exception {\\r\\n     final Options options = new Options();\\r\\n-    final Option opt_i = Option.builder(\\\"i\\\").hasArg().type(Number.class).build();\\r\\n-    final Option opt_f = Option.builder(\\\"f\\\").hasArg().build();\\r\\n-    options.addOption(opt_i);\\r\\n-    options.addOption(opt_f);\\r\\n+    final Option optI = Option.builder(\\\"i\\\").hasArg().type(Number.class).build();\\r\\n+    final Option optF = Option.builder(\\\"f\\\").hasArg().build();\\r\\n+    options.addOption(optI);\\r\\n+    options.addOption(optF);\\r\\n     final CommandLineParser parser = new DefaultParser();\\r\\n     final CommandLine cmd = parser.parse(options, new String[] { \\\"-i\\\", \\\"123\\\", \\\"-f\\\", \\\"foo\\\" });\\r\\n     assertNull(cmd.getOptionValue((Option) null));\\r\\n     assertNull(cmd.getParsedOptionValue((Option) null));\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,12 +1,12 @@\\n @Test\\r\\n public void testNullhOption() throws Exception {\\r\\n-    Options options = new Options();\\r\\n-    Option opt_i = Option.builder(\\\"i\\\").hasArg().type(Number.class).build();\\r\\n-    Option opt_f = Option.builder(\\\"f\\\").hasArg().build();\\r\\n+    final Options options = new Options();\\r\\n+    final Option opt_i = Option.builder(\\\"i\\\").hasArg().type(Number.class).build();\\r\\n+    final Option opt_f = Option.builder(\\\"f\\\").hasArg().build();\\r\\n     options.addOption(opt_i);\\r\\n     options.addOption(opt_f);\\r\\n-    CommandLineParser parser = new DefaultParser();\\r\\n-    CommandLine cmd = parser.parse(options, new String[] { \\\"-i\\\", \\\"123\\\", \\\"-f\\\", \\\"foo\\\" });\\r\\n+    final CommandLineParser parser = new DefaultParser();\\r\\n+    final CommandLine cmd = parser.parse(options, new String[] { \\\"-i\\\", \\\"123\\\", \\\"-f\\\", \\\"foo\\\" });\\r\\n     assertNull(cmd.getOptionValue((Option) null));\\r\\n     assertNull(cmd.getParsedOptionValue((Option) null));\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"britter@apache.org","authorName":"Benedikt Ritter","commitYear":"2017","diff":"\"@@ -0,0 +1,12 @@\\n+@Test\\r\\n+public void testNullhOption() throws Exception {\\r\\n+    Options options = new Options();\\r\\n+    Option opt_i = Option.builder(\\\"i\\\").hasArg().type(Number.class).build();\\r\\n+    Option opt_f = Option.builder(\\\"f\\\").hasArg().build();\\r\\n+    options.addOption(opt_i);\\r\\n+    options.addOption(opt_f);\\r\\n+    CommandLineParser parser = new DefaultParser();\\r\\n+    CommandLine cmd = parser.parse(options, new String[] { \\\"-i\\\", \\\"123\\\", \\\"-f\\\", \\\"foo\\\" });\\r\\n+    assertNull(cmd.getOptionValue((Option) null));\\r\\n+    assertNull(cmd.getParsedOptionValue((Option) null));\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\test\java\org\apache\commons\cli\DefaultParserTest.java	setUp	org.apache.commons.cli.DefaultParserTest.setUp()	29	32	1	[{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2020","diff":"\"@@ -1,5 +1,6 @@\\n+@Override\\r\\n @Before\\r\\n public void setUp() {\\r\\n     super.setUp();\\r\\n     parser = new DefaultParser();\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"tn@apache.org","authorName":"Thomas Neidhart","commitYear":"2013","diff":"\"@@ -1,5 +1,5 @@\\n-@Override\\r\\n+@Before\\r\\n public void setUp() {\\r\\n     super.setUp();\\r\\n     parser = new DefaultParser();\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"sebb@apache.org","authorName":"Sebastian Bazley","commitYear":"2013","diff":"\"@@ -1,4 +1,5 @@\\n+@Override\\r\\n public void setUp() {\\r\\n     super.setUp();\\r\\n     parser = new DefaultParser();\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2009","diff":"\"@@ -0,0 +1,4 @@\\n+public void setUp() {\\r\\n+    super.setUp();\\r\\n+    parser = new DefaultParser();\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\test\java\org\apache\commons\cli\DefaultParserTest.java	testBuilder	org.apache.commons.cli.DefaultParserTest.testBuilder()	35	41	1	[{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"@@ -1,5 +1,5 @@\\n @Test\\r\\n-public void testBuilder() throws Exception {\\r\\n+public void testBuilder() {\\r\\n     parser = DefaultParser.builder().setStripLeadingAndTrailingQuotes(false).setAllowPartialMatching(false).build();\\r\\n     assertEquals(DefaultParser.class, parser.getClass());\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"stoty@apache.org","authorName":"Istvan Toth","commitYear":"2021","diff":"\"@@ -0,0 +1,5 @@\\n+@Test\\r\\n+public void testBuilder() throws Exception {\\r\\n+    parser = DefaultParser.builder().setStripLeadingAndTrailingQuotes(false).setAllowPartialMatching(false).build();\\r\\n+    assertEquals(DefaultParser.class, parser.getClass());\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\test\java\org\apache\commons\cli\DefaultParserTest.java	testLongOptionQuoteHandlingWithoutStrip	org.apache.commons.cli.DefaultParserTest.testLongOptionQuoteHandlingWithoutStrip()	44	51	1	[{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"@@ -1,7 +1,7 @@\\n @Test\\r\\n public void testLongOptionQuoteHandlingWithoutStrip() throws Exception {\\r\\n     parser = DefaultParser.builder().setStripLeadingAndTrailingQuotes(false).build();\\r\\n-    final String[] args = new String[] { \\\"--bfile\\\", \\\"\\\\\\\"quoted string\\\\\\\"\\\" };\\r\\n+    final String[] args = { \\\"--bfile\\\", \\\"\\\\\\\"quoted string\\\\\\\"\\\" };\\r\\n     final CommandLine cl = parser.parse(options, args);\\r\\n     assertEquals(\\\"Confirm --bfile \\\\\\\"arg\\\\\\\" keeps quotes\\\", \\\"\\\\\\\"quoted string\\\\\\\"\\\", cl.getOptionValue(\\\"b\\\"));\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"stoty@apache.org","authorName":"Istvan Toth","commitYear":"2021","diff":"\"@@ -0,0 +1,7 @@\\n+@Test\\r\\n+public void testLongOptionQuoteHandlingWithoutStrip() throws Exception {\\r\\n+    parser = DefaultParser.builder().setStripLeadingAndTrailingQuotes(false).build();\\r\\n+    final String[] args = new String[] { \\\"--bfile\\\", \\\"\\\\\\\"quoted string\\\\\\\"\\\" };\\r\\n+    final CommandLine cl = parser.parse(options, args);\\r\\n+    assertEquals(\\\"Confirm --bfile \\\\\\\"arg\\\\\\\" keeps quotes\\\", \\\"\\\\\\\"quoted string\\\\\\\"\\\", cl.getOptionValue(\\\"b\\\"));\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\test\java\org\apache\commons\cli\DefaultParserTest.java	testLongOptionQuoteHandlingWithStrip	org.apache.commons.cli.DefaultParserTest.testLongOptionQuoteHandlingWithStrip()	54	61	1	[{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"@@ -1,7 +1,7 @@\\n @Test\\r\\n public void testLongOptionQuoteHandlingWithStrip() throws Exception {\\r\\n     parser = DefaultParser.builder().setStripLeadingAndTrailingQuotes(true).build();\\r\\n-    final String[] args = new String[] { \\\"--bfile\\\", \\\"\\\\\\\"quoted string\\\\\\\"\\\" };\\r\\n+    final String[] args = { \\\"--bfile\\\", \\\"\\\\\\\"quoted string\\\\\\\"\\\" };\\r\\n     final CommandLine cl = parser.parse(options, args);\\r\\n     assertEquals(\\\"Confirm --bfile \\\\\\\"arg\\\\\\\" strips quotes\\\", \\\"quoted string\\\", cl.getOptionValue(\\\"b\\\"));\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"stoty@apache.org","authorName":"Istvan Toth","commitYear":"2021","diff":"\"@@ -0,0 +1,7 @@\\n+@Test\\r\\n+public void testLongOptionQuoteHandlingWithStrip() throws Exception {\\r\\n+    parser = DefaultParser.builder().setStripLeadingAndTrailingQuotes(true).build();\\r\\n+    final String[] args = new String[] { \\\"--bfile\\\", \\\"\\\\\\\"quoted string\\\\\\\"\\\" };\\r\\n+    final CommandLine cl = parser.parse(options, args);\\r\\n+    assertEquals(\\\"Confirm --bfile \\\\\\\"arg\\\\\\\" strips quotes\\\", \\\"quoted string\\\", cl.getOptionValue(\\\"b\\\"));\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\test\java\org\apache\commons\cli\DefaultParserTest.java	testLongOptionWithEqualsQuoteHandling	org.apache.commons.cli.DefaultParserTest.testLongOptionWithEqualsQuoteHandling()	65	71	1	[{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"@@ -1,7 +1,7 @@\\n @Override\\r\\n @Test\\r\\n public void testLongOptionWithEqualsQuoteHandling() throws Exception {\\r\\n-    final String[] args = new String[] { \\\"--bfile=\\\\\\\"quoted string\\\\\\\"\\\" };\\r\\n+    final String[] args = { \\\"--bfile=\\\\\\\"quoted string\\\\\\\"\\\" };\\r\\n     final CommandLine cl = parser.parse(options, args);\\r\\n     assertEquals(\\\"Confirm --bfile=\\\\\\\"arg\\\\\\\" strips quotes\\\", \\\"\\\\\\\"quoted string\\\\\\\"\\\", cl.getOptionValue(\\\"b\\\"));\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"stoty@apache.org","authorName":"Istvan Toth","commitYear":"2021","diff":"\"@@ -0,0 +1,7 @@\\n+@Override\\r\\n+@Test\\r\\n+public void testLongOptionWithEqualsQuoteHandling() throws Exception {\\r\\n+    final String[] args = new String[] { \\\"--bfile=\\\\\\\"quoted string\\\\\\\"\\\" };\\r\\n+    final CommandLine cl = parser.parse(options, args);\\r\\n+    assertEquals(\\\"Confirm --bfile=\\\\\\\"arg\\\\\\\" strips quotes\\\", \\\"\\\\\\\"quoted string\\\\\\\"\\\", cl.getOptionValue(\\\"b\\\"));\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\test\java\org\apache\commons\cli\DefaultParserTest.java	testLongOptionWithEqualsQuoteHandlingWithoutStrip	org.apache.commons.cli.DefaultParserTest.testLongOptionWithEqualsQuoteHandlingWithoutStrip()	74	81	1	[{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"@@ -1,7 +1,7 @@\\n @Test\\r\\n public void testLongOptionWithEqualsQuoteHandlingWithoutStrip() throws Exception {\\r\\n     parser = DefaultParser.builder().setStripLeadingAndTrailingQuotes(false).build();\\r\\n-    final String[] args = new String[] { \\\"--bfile=\\\\\\\"quoted string\\\\\\\"\\\" };\\r\\n+    final String[] args = { \\\"--bfile=\\\\\\\"quoted string\\\\\\\"\\\" };\\r\\n     final CommandLine cl = parser.parse(options, args);\\r\\n     assertEquals(\\\"Confirm --bfile=\\\\\\\"arg\\\\\\\" keeps quotes\\\", \\\"\\\\\\\"quoted string\\\\\\\"\\\", cl.getOptionValue(\\\"b\\\"));\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"stoty@apache.org","authorName":"Istvan Toth","commitYear":"2021","diff":"\"@@ -0,0 +1,7 @@\\n+@Test\\r\\n+public void testLongOptionWithEqualsQuoteHandlingWithoutStrip() throws Exception {\\r\\n+    parser = DefaultParser.builder().setStripLeadingAndTrailingQuotes(false).build();\\r\\n+    final String[] args = new String[] { \\\"--bfile=\\\\\\\"quoted string\\\\\\\"\\\" };\\r\\n+    final CommandLine cl = parser.parse(options, args);\\r\\n+    assertEquals(\\\"Confirm --bfile=\\\\\\\"arg\\\\\\\" keeps quotes\\\", \\\"\\\\\\\"quoted string\\\\\\\"\\\", cl.getOptionValue(\\\"b\\\"));\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\test\java\org\apache\commons\cli\DefaultParserTest.java	testLongOptionWithEqualsQuoteHandlingWithStrip	org.apache.commons.cli.DefaultParserTest.testLongOptionWithEqualsQuoteHandlingWithStrip()	84	91	1	[{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"@@ -1,7 +1,7 @@\\n @Test\\r\\n public void testLongOptionWithEqualsQuoteHandlingWithStrip() throws Exception {\\r\\n     parser = DefaultParser.builder().setStripLeadingAndTrailingQuotes(true).build();\\r\\n-    final String[] args = new String[] { \\\"--bfile=\\\\\\\"quoted string\\\\\\\"\\\" };\\r\\n+    final String[] args = { \\\"--bfile=\\\\\\\"quoted string\\\\\\\"\\\" };\\r\\n     final CommandLine cl = parser.parse(options, args);\\r\\n     assertEquals(\\\"Confirm --bfile=\\\\\\\"arg\\\\\\\" strips quotes\\\", \\\"quoted string\\\", cl.getOptionValue(\\\"b\\\"));\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"stoty@apache.org","authorName":"Istvan Toth","commitYear":"2021","diff":"\"@@ -0,0 +1,7 @@\\n+@Test\\r\\n+public void testLongOptionWithEqualsQuoteHandlingWithStrip() throws Exception {\\r\\n+    parser = DefaultParser.builder().setStripLeadingAndTrailingQuotes(true).build();\\r\\n+    final String[] args = new String[] { \\\"--bfile=\\\\\\\"quoted string\\\\\\\"\\\" };\\r\\n+    final CommandLine cl = parser.parse(options, args);\\r\\n+    assertEquals(\\\"Confirm --bfile=\\\\\\\"arg\\\\\\\" strips quotes\\\", \\\"quoted string\\\", cl.getOptionValue(\\\"b\\\"));\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\test\java\org\apache\commons\cli\DefaultParserTest.java	testShortOptionConcatenatedQuoteHandling	org.apache.commons.cli.DefaultParserTest.testShortOptionConcatenatedQuoteHandling()	95	102	1	[{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2022","diff":"\"\""},{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"@@ -1,7 +1,7 @@\\n @Override\\r\\n @Test\\r\\n public void testShortOptionConcatenatedQuoteHandling() throws Exception {\\r\\n-    final String[] args = new String[] { \\\"-b\\\\\\\"quoted string\\\\\\\"\\\" };\\r\\n+    final String[] args = { \\\"-b\\\\\\\"quoted string\\\\\\\"\\\" };\\r\\n     final CommandLine cl = parser.parse(options, args);\\r\\n     assertEquals(\\\"Confirm -b\\\\\\\"arg\\\\\\\" keeps quotes\\\", \\\"\\\\\\\"quoted string\\\\\\\"\\\", cl.getOptionValue(\\\"b\\\"));\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"stoty@apache.org","authorName":"Istvan Toth","commitYear":"2021","diff":"\"@@ -0,0 +1,7 @@\\n+@Override\\r\\n+@Test\\r\\n+public void testShortOptionConcatenatedQuoteHandling() throws Exception {\\r\\n+    final String[] args = new String[] { \\\"-b\\\\\\\"quoted string\\\\\\\"\\\" };\\r\\n+    final CommandLine cl = parser.parse(options, args);\\r\\n+    assertEquals(\\\"Confirm -b\\\\\\\"arg\\\\\\\" keeps quotes\\\", \\\"\\\\\\\"quoted string\\\\\\\"\\\", cl.getOptionValue(\\\"b\\\"));\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\test\java\org\apache\commons\cli\DefaultParserTest.java	testShortOptionQuoteHandlingWithoutStrip	org.apache.commons.cli.DefaultParserTest.testShortOptionQuoteHandlingWithoutStrip()	105	112	1	[{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"@@ -1,7 +1,7 @@\\n @Test\\r\\n public void testShortOptionQuoteHandlingWithoutStrip() throws Exception {\\r\\n     parser = DefaultParser.builder().setStripLeadingAndTrailingQuotes(false).build();\\r\\n-    final String[] args = new String[] { \\\"-b\\\", \\\"\\\\\\\"quoted string\\\\\\\"\\\" };\\r\\n+    final String[] args = { \\\"-b\\\", \\\"\\\\\\\"quoted string\\\\\\\"\\\" };\\r\\n     final CommandLine cl = parser.parse(options, args);\\r\\n     assertEquals(\\\"Confirm -b \\\\\\\"arg\\\\\\\" keeps quotes\\\", \\\"\\\\\\\"quoted string\\\\\\\"\\\", cl.getOptionValue(\\\"b\\\"));\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"stoty@apache.org","authorName":"Istvan Toth","commitYear":"2021","diff":"\"@@ -0,0 +1,7 @@\\n+@Test\\r\\n+public void testShortOptionQuoteHandlingWithoutStrip() throws Exception {\\r\\n+    parser = DefaultParser.builder().setStripLeadingAndTrailingQuotes(false).build();\\r\\n+    final String[] args = new String[] { \\\"-b\\\", \\\"\\\\\\\"quoted string\\\\\\\"\\\" };\\r\\n+    final CommandLine cl = parser.parse(options, args);\\r\\n+    assertEquals(\\\"Confirm -b \\\\\\\"arg\\\\\\\" keeps quotes\\\", \\\"\\\\\\\"quoted string\\\\\\\"\\\", cl.getOptionValue(\\\"b\\\"));\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\test\java\org\apache\commons\cli\DefaultParserTest.java	testShortOptionQuoteHandlingWithStrip	org.apache.commons.cli.DefaultParserTest.testShortOptionQuoteHandlingWithStrip()	115	122	1	[{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"@@ -1,7 +1,7 @@\\n @Test\\r\\n public void testShortOptionQuoteHandlingWithStrip() throws Exception {\\r\\n     parser = DefaultParser.builder().setStripLeadingAndTrailingQuotes(true).build();\\r\\n-    final String[] args = new String[] { \\\"-b\\\", \\\"\\\\\\\"quoted string\\\\\\\"\\\" };\\r\\n+    final String[] args = { \\\"-b\\\", \\\"\\\\\\\"quoted string\\\\\\\"\\\" };\\r\\n     final CommandLine cl = parser.parse(options, args);\\r\\n     assertEquals(\\\"Confirm -b \\\\\\\"arg\\\\\\\" strips quotes\\\", \\\"quoted string\\\", cl.getOptionValue(\\\"b\\\"));\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"stoty@apache.org","authorName":"Istvan Toth","commitYear":"2021","diff":"\"@@ -0,0 +1,7 @@\\n+@Test\\r\\n+public void testShortOptionQuoteHandlingWithStrip() throws Exception {\\r\\n+    parser = DefaultParser.builder().setStripLeadingAndTrailingQuotes(true).build();\\r\\n+    final String[] args = new String[] { \\\"-b\\\", \\\"\\\\\\\"quoted string\\\\\\\"\\\" };\\r\\n+    final CommandLine cl = parser.parse(options, args);\\r\\n+    assertEquals(\\\"Confirm -b \\\\\\\"arg\\\\\\\" strips quotes\\\", \\\"quoted string\\\", cl.getOptionValue(\\\"b\\\"));\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\test\java\org\apache\commons\cli\DisablePartialMatchingTest.java	testDisablePartialMatching	org.apache.commons.cli.DisablePartialMatchingTest.testDisablePartialMatching()	27	41	1	[{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"\""},{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2020","diff":"\"@@ -1,12 +1,12 @@\\n @Test\\r\\n public void testDisablePartialMatching() throws Exception {\\r\\n-    CommandLineParser parser = new DefaultParser(false);\\r\\n+    final CommandLineParser parser = new DefaultParser(false);\\r\\n     final Options options = new Options();\\r\\n     options.addOption(new Option(\\\"d\\\", \\\"debug\\\", false, \\\"Turn on debug.\\\"));\\r\\n     options.addOption(new Option(\\\"e\\\", \\\"extract\\\", false, \\\"Turn on extract.\\\"));\\r\\n     options.addOption(new Option(\\\"o\\\", \\\"option\\\", true, \\\"Turn on option with argument.\\\"));\\r\\n-    CommandLine line = parser.parse(options, new String[] { \\\"-de\\\", \\\"--option=foobar\\\" });\\r\\n+    final CommandLine line = parser.parse(options, new String[] { \\\"-de\\\", \\\"--option=foobar\\\" });\\r\\n     assertTrue(\\\"There should be an option debug in any case...\\\", line.hasOption(\\\"debug\\\"));\\r\\n     assertTrue(\\\"There should be an extract option because partial matching is off\\\", line.hasOption(\\\"extract\\\"));\\r\\n     assertTrue(\\\"There should be an option option with a argument value\\\", line.hasOption(\\\"option\\\"));\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"rubin@raaftech.com","authorName":"Rubin Simons","commitYear":"2017","diff":"\"@@ -1,10 +1,12 @@\\n @Test\\r\\n public void testDisablePartialMatching() throws Exception {\\r\\n     CommandLineParser parser = new DefaultParser(false);\\r\\n     final Options options = new Options();\\r\\n     options.addOption(new Option(\\\"d\\\", \\\"debug\\\", false, \\\"Turn on debug.\\\"));\\r\\n     options.addOption(new Option(\\\"e\\\", \\\"extract\\\", false, \\\"Turn on extract.\\\"));\\r\\n-    CommandLine line = parser.parse(options, new String[] { \\\"-de\\\" });\\r\\n+    options.addOption(new Option(\\\"o\\\", \\\"option\\\", true, \\\"Turn on option with argument.\\\"));\\r\\n+    CommandLine line = parser.parse(options, new String[] { \\\"-de\\\", \\\"--option=foobar\\\" });\\r\\n     assertTrue(\\\"There should be an option debug in any case...\\\", line.hasOption(\\\"debug\\\"));\\r\\n     assertTrue(\\\"There should be an extract option because partial matching is off\\\", line.hasOption(\\\"extract\\\"));\\r\\n+    assertTrue(\\\"There should be an option option with a argument value\\\", line.hasOption(\\\"option\\\"));\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"rubin@raaftech.com","authorName":"Rubin Simons","commitYear":"2017","diff":"\"@@ -0,0 +1,10 @@\\n+@Test\\r\\n+public void testDisablePartialMatching() throws Exception {\\r\\n+    CommandLineParser parser = new DefaultParser(false);\\r\\n+    final Options options = new Options();\\r\\n+    options.addOption(new Option(\\\"d\\\", \\\"debug\\\", false, \\\"Turn on debug.\\\"));\\r\\n+    options.addOption(new Option(\\\"e\\\", \\\"extract\\\", false, \\\"Turn on extract.\\\"));\\r\\n+    CommandLine line = parser.parse(options, new String[] { \\\"-de\\\" });\\r\\n+    assertTrue(\\\"There should be an option debug in any case...\\\", line.hasOption(\\\"debug\\\"));\\r\\n+    assertTrue(\\\"There should be an extract option because partial matching is off\\\", line.hasOption(\\\"extract\\\"));\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\test\java\org\apache\commons\cli\DisablePartialMatchingTest.java	testRegularPartialMatching	org.apache.commons.cli.DisablePartialMatchingTest.testRegularPartialMatching()	44	58	1	[{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"\""},{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2020","diff":"\"@@ -1,12 +1,12 @@\\n @Test\\r\\n public void testRegularPartialMatching() throws Exception {\\r\\n-    CommandLineParser parser = new DefaultParser();\\r\\n+    final CommandLineParser parser = new DefaultParser();\\r\\n     final Options options = new Options();\\r\\n     options.addOption(new Option(\\\"d\\\", \\\"debug\\\", false, \\\"Turn on debug.\\\"));\\r\\n     options.addOption(new Option(\\\"e\\\", \\\"extract\\\", false, \\\"Turn on extract.\\\"));\\r\\n     options.addOption(new Option(\\\"o\\\", \\\"option\\\", true, \\\"Turn on option with argument.\\\"));\\r\\n-    CommandLine line = parser.parse(options, new String[] { \\\"-de\\\", \\\"--option=foobar\\\" });\\r\\n+    final CommandLine line = parser.parse(options, new String[] { \\\"-de\\\", \\\"--option=foobar\\\" });\\r\\n     assertTrue(\\\"There should be an option debug in any case...\\\", line.hasOption(\\\"debug\\\"));\\r\\n     assertFalse(\\\"There should not be an extract option because partial matching only selects debug\\\", line.hasOption(\\\"extract\\\"));\\r\\n     assertTrue(\\\"There should be an option option with a argument value\\\", line.hasOption(\\\"option\\\"));\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"rubin@raaftech.com","authorName":"Rubin Simons","commitYear":"2017","diff":"\"@@ -1,10 +1,12 @@\\n @Test\\r\\n public void testRegularPartialMatching() throws Exception {\\r\\n     CommandLineParser parser = new DefaultParser();\\r\\n     final Options options = new Options();\\r\\n     options.addOption(new Option(\\\"d\\\", \\\"debug\\\", false, \\\"Turn on debug.\\\"));\\r\\n     options.addOption(new Option(\\\"e\\\", \\\"extract\\\", false, \\\"Turn on extract.\\\"));\\r\\n-    CommandLine line = parser.parse(options, new String[] { \\\"-de\\\" });\\r\\n+    options.addOption(new Option(\\\"o\\\", \\\"option\\\", true, \\\"Turn on option with argument.\\\"));\\r\\n+    CommandLine line = parser.parse(options, new String[] { \\\"-de\\\", \\\"--option=foobar\\\" });\\r\\n     assertTrue(\\\"There should be an option debug in any case...\\\", line.hasOption(\\\"debug\\\"));\\r\\n     assertFalse(\\\"There should not be an extract option because partial matching only selects debug\\\", line.hasOption(\\\"extract\\\"));\\r\\n+    assertTrue(\\\"There should be an option option with a argument value\\\", line.hasOption(\\\"option\\\"));\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"rubin@raaftech.com","authorName":"Rubin Simons","commitYear":"2017","diff":"\"@@ -0,0 +1,10 @@\\n+@Test\\r\\n+public void testRegularPartialMatching() throws Exception {\\r\\n+    CommandLineParser parser = new DefaultParser();\\r\\n+    final Options options = new Options();\\r\\n+    options.addOption(new Option(\\\"d\\\", \\\"debug\\\", false, \\\"Turn on debug.\\\"));\\r\\n+    options.addOption(new Option(\\\"e\\\", \\\"extract\\\", false, \\\"Turn on extract.\\\"));\\r\\n+    CommandLine line = parser.parse(options, new String[] { \\\"-de\\\" });\\r\\n+    assertTrue(\\\"There should be an option debug in any case...\\\", line.hasOption(\\\"debug\\\"));\\r\\n+    assertFalse(\\\"There should not be an extract option because partial matching only selects debug\\\", line.hasOption(\\\"extract\\\"));\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\test\java\org\apache\commons\cli\GnuParserTest.java	setUp	org.apache.commons.cli.GnuParserTest.setUp()	28	31	1	[{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2020","diff":"\"@@ -1,5 +1,6 @@\\n+@Override\\r\\n @Before\\r\\n public void setUp() {\\r\\n     super.setUp();\\r\\n     parser = new GnuParser();\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"tn@apache.org","authorName":"Thomas Neidhart","commitYear":"2013","diff":"\"@@ -1,5 +1,5 @@\\n-@Override\\r\\n+@Before\\r\\n public void setUp() {\\r\\n     super.setUp();\\r\\n     parser = new GnuParser();\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"sebb@apache.org","authorName":"Sebastian Bazley","commitYear":"2013","diff":"\"@@ -1,4 +1,5 @@\\n+@Override\\r\\n public void setUp() {\\r\\n     super.setUp();\\r\\n     parser = new GnuParser();\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2008","diff":"\"@@ -1,4 +1,4 @@\\n public void setUp() {\\r\\n-    options = new Options().addOption(\\\"a\\\", \\\"enable-a\\\", false, \\\"turn [a] on or off\\\").addOption(\\\"b\\\", \\\"bfile\\\", true, \\\"set the value of [b]\\\").addOption(\\\"c\\\", \\\"copt\\\", false, \\\"turn [c] on or off\\\");\\r\\n+    super.setUp();\\r\\n     parser = new GnuParser();\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2008","diff":"\"@@ -1,4 +1,4 @@\\n public void setUp() {\\r\\n-    _options = new Options().addOption(\\\"a\\\", \\\"enable-a\\\", false, \\\"turn [a] on or off\\\").addOption(\\\"b\\\", \\\"bfile\\\", true, \\\"set the value of [b]\\\").addOption(\\\"c\\\", \\\"copt\\\", false, \\\"turn [c] on or off\\\");\\r\\n-    _parser = new GnuParser();\\r\\n+    options = new Options().addOption(\\\"a\\\", \\\"enable-a\\\", false, \\\"turn [a] on or off\\\").addOption(\\\"b\\\", \\\"bfile\\\", true, \\\"set the value of [b]\\\").addOption(\\\"c\\\", \\\"copt\\\", false, \\\"turn [c] on or off\\\");\\r\\n+    parser = new GnuParser();\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -1,4 +1,4 @@\\n public void setUp() {\\r\\n     _options = new Options().addOption(\\\"a\\\", \\\"enable-a\\\", false, \\\"turn [a] on or off\\\").addOption(\\\"b\\\", \\\"bfile\\\", true, \\\"set the value of [b]\\\").addOption(\\\"c\\\", \\\"copt\\\", false, \\\"turn [c] on or off\\\");\\r\\n-    _parser = CommandLineParserFactory.newParser(\\\"org.apache.commons.cli.GnuParser\\\");\\r\\n+    _parser = new GnuParser();\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -1,5 +1,4 @@\\n public void setUp() {\\r\\n-    System.setProperty(\\\"org.apache.commons.cli.parser\\\", \\\"org.apache.commons.cli.GnuParser\\\");\\r\\n     _options = new Options().addOption(\\\"a\\\", \\\"enable-a\\\", false, \\\"turn [a] on or off\\\").addOption(\\\"b\\\", \\\"bfile\\\", true, \\\"set the value of [b]\\\").addOption(\\\"c\\\", \\\"copt\\\", false, \\\"turn [c] on or off\\\");\\r\\n-    _parser = CommandLineParserFactory.newParser();\\r\\n+    _parser = CommandLineParserFactory.newParser(\\\"org.apache.commons.cli.GnuParser\\\");\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -0,0 +1,5 @@\\n+public void setUp() {\\r\\n+    System.setProperty(\\\"org.apache.commons.cli.parser\\\", \\\"org.apache.commons.cli.GnuParser\\\");\\r\\n+    _options = new Options().addOption(\\\"a\\\", \\\"enable-a\\\", false, \\\"turn [a] on or off\\\").addOption(\\\"b\\\", \\\"bfile\\\", true, \\\"set the value of [b]\\\").addOption(\\\"c\\\", \\\"copt\\\", false, \\\"turn [c] on or off\\\");\\r\\n+    _parser = CommandLineParserFactory.newParser();\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\test\java\org\apache\commons\cli\GnuParserTest.java	testAmbiguousLongWithoutEqualSingleDash	org.apache.commons.cli.GnuParserTest.testAmbiguousLongWithoutEqualSingleDash()	36	37	1	[{"authorEmail":"britter@apache.org","authorName":"Benedikt Ritter","commitYear":"2016","diff":"\"@@ -1,3 +1,5 @@\\n @Override\\r\\n+@Test\\r\\n+@Ignore(\\\"not supported by the GnuParser\\\")\\r\\n public void testAmbiguousLongWithoutEqualSingleDash() throws Exception {\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"sebb@apache.org","authorName":"Sebastian Bazley","commitYear":"2013","diff":"\"@@ -1,2 +1,3 @@\\n+@Override\\r\\n public void testAmbiguousLongWithoutEqualSingleDash() throws Exception {\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2009","diff":"\"@@ -0,0 +1,2 @@\\n+public void testAmbiguousLongWithoutEqualSingleDash() throws Exception {\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\test\java\org\apache\commons\cli\GnuParserTest.java	testAmbiguousLongWithoutEqualSingleDash2	org.apache.commons.cli.GnuParserTest.testAmbiguousLongWithoutEqualSingleDash2()	42	43	1	[{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2023","diff":"\"@@ -0,0 +1,5 @@\\n+@Override\\r\\n+@Test\\r\\n+@Ignore(\\\"not supported by the GnuParser\\\")\\r\\n+public void testAmbiguousLongWithoutEqualSingleDash2() throws Exception {\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\test\java\org\apache\commons\cli\GnuParserTest.java	testAmbiguousPartialLongOption1	org.apache.commons.cli.GnuParserTest.testAmbiguousPartialLongOption1()	48	49	1	[{"authorEmail":"britter@apache.org","authorName":"Benedikt Ritter","commitYear":"2016","diff":"\"@@ -1,3 +1,5 @@\\n @Override\\r\\n+@Test\\r\\n+@Ignore(\\\"not supported by the GnuParser\\\")\\r\\n public void testAmbiguousPartialLongOption1() throws Exception {\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"sebb@apache.org","authorName":"Sebastian Bazley","commitYear":"2013","diff":"\"@@ -1,2 +1,3 @@\\n+@Override\\r\\n public void testAmbiguousPartialLongOption1() throws Exception {\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2009","diff":"\"@@ -0,0 +1,2 @@\\n+public void testAmbiguousPartialLongOption1() throws Exception {\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\test\java\org\apache\commons\cli\GnuParserTest.java	testAmbiguousPartialLongOption2	org.apache.commons.cli.GnuParserTest.testAmbiguousPartialLongOption2()	54	55	1	[{"authorEmail":"britter@apache.org","authorName":"Benedikt Ritter","commitYear":"2016","diff":"\"@@ -1,3 +1,5 @@\\n @Override\\r\\n+@Test\\r\\n+@Ignore(\\\"not supported by the GnuParser\\\")\\r\\n public void testAmbiguousPartialLongOption2() throws Exception {\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"sebb@apache.org","authorName":"Sebastian Bazley","commitYear":"2013","diff":"\"@@ -1,2 +1,3 @@\\n+@Override\\r\\n public void testAmbiguousPartialLongOption2() throws Exception {\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2009","diff":"\"@@ -0,0 +1,2 @@\\n+public void testAmbiguousPartialLongOption2() throws Exception {\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\test\java\org\apache\commons\cli\GnuParserTest.java	testAmbiguousPartialLongOption3	org.apache.commons.cli.GnuParserTest.testAmbiguousPartialLongOption3()	60	61	1	[{"authorEmail":"britter@apache.org","authorName":"Benedikt Ritter","commitYear":"2016","diff":"\"@@ -1,3 +1,5 @@\\n @Override\\r\\n+@Test\\r\\n+@Ignore(\\\"not supported by the GnuParser\\\")\\r\\n public void testAmbiguousPartialLongOption3() throws Exception {\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"sebb@apache.org","authorName":"Sebastian Bazley","commitYear":"2013","diff":"\"@@ -1,2 +1,3 @@\\n+@Override\\r\\n public void testAmbiguousPartialLongOption3() throws Exception {\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2009","diff":"\"@@ -1,2 +1,2 @@\\n-public void testPartialLongOptionWithShort() throws Exception {\\r\\n+public void testAmbiguousPartialLongOption3() throws Exception {\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2009","diff":"\"@@ -0,0 +1,2 @@\\n+public void testPartialLongOptionWithShort() throws Exception {\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\test\java\org\apache\commons\cli\GnuParserTest.java	testAmbiguousPartialLongOption4	org.apache.commons.cli.GnuParserTest.testAmbiguousPartialLongOption4()	66	67	1	[{"authorEmail":"britter@apache.org","authorName":"Benedikt Ritter","commitYear":"2016","diff":"\"@@ -1,3 +1,5 @@\\n @Override\\r\\n+@Test\\r\\n+@Ignore(\\\"not supported by the GnuParser\\\")\\r\\n public void testAmbiguousPartialLongOption4() throws Exception {\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"sebb@apache.org","authorName":"Sebastian Bazley","commitYear":"2013","diff":"\"@@ -1,2 +1,3 @@\\n+@Override\\r\\n public void testAmbiguousPartialLongOption4() throws Exception {\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2009","diff":"\"@@ -1,2 +1,2 @@\\n-public void testPartialLongOptionWithShort() throws Exception {\\r\\n+public void testAmbiguousPartialLongOption4() throws Exception {\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2009","diff":"\"@@ -0,0 +1,2 @@\\n+public void testPartialLongOptionWithShort() throws Exception {\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\test\java\org\apache\commons\cli\GnuParserTest.java	testBursting	org.apache.commons.cli.GnuParserTest.testBursting()	72	73	1	[{"authorEmail":"britter@apache.org","authorName":"Benedikt Ritter","commitYear":"2016","diff":"\"@@ -1,3 +1,5 @@\\n @Override\\r\\n+@Test\\r\\n+@Ignore(\\\"not supported by the GnuParser\\\")\\r\\n public void testBursting() throws Exception {\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"sebb@apache.org","authorName":"Sebastian Bazley","commitYear":"2013","diff":"\"@@ -1,2 +1,3 @@\\n+@Override\\r\\n public void testBursting() throws Exception {\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2009","diff":"\"@@ -0,0 +1,2 @@\\n+public void testBursting() throws Exception {\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\test\java\org\apache\commons\cli\GnuParserTest.java	testDoubleDash2	org.apache.commons.cli.GnuParserTest.testDoubleDash2()	78	79	1	[{"authorEmail":"britter@apache.org","authorName":"Benedikt Ritter","commitYear":"2016","diff":"\"@@ -1,3 +1,5 @@\\n @Override\\r\\n+@Test\\r\\n+@Ignore(\\\"not supported by the GnuParser\\\")\\r\\n public void testDoubleDash2() throws Exception {\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"sebb@apache.org","authorName":"Sebastian Bazley","commitYear":"2013","diff":"\"@@ -1,2 +1,3 @@\\n+@Override\\r\\n public void testDoubleDash2() throws Exception {\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2009","diff":"\"@@ -0,0 +1,2 @@\\n+public void testDoubleDash2() throws Exception {\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\test\java\org\apache\commons\cli\GnuParserTest.java	testLongWithoutEqualSingleDash	org.apache.commons.cli.GnuParserTest.testLongWithoutEqualSingleDash()	84	85	1	[{"authorEmail":"britter@apache.org","authorName":"Benedikt Ritter","commitYear":"2016","diff":"\"@@ -1,3 +1,5 @@\\n @Override\\r\\n+@Test\\r\\n+@Ignore(\\\"not supported by the GnuParser\\\")\\r\\n public void testLongWithoutEqualSingleDash() throws Exception {\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"sebb@apache.org","authorName":"Sebastian Bazley","commitYear":"2013","diff":"\"@@ -1,2 +1,3 @@\\n+@Override\\r\\n public void testLongWithoutEqualSingleDash() throws Exception {\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2009","diff":"\"@@ -0,0 +1,2 @@\\n+public void testLongWithoutEqualSingleDash() throws Exception {\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\test\java\org\apache\commons\cli\GnuParserTest.java	testLongWithUnexpectedArgument1	org.apache.commons.cli.GnuParserTest.testLongWithUnexpectedArgument1()	90	91	1	[{"authorEmail":"britter@apache.org","authorName":"Benedikt Ritter","commitYear":"2016","diff":"\"@@ -1,3 +1,5 @@\\n @Override\\r\\n+@Test\\r\\n+@Ignore(\\\"not supported by the GnuParser\\\")\\r\\n public void testLongWithUnexpectedArgument1() throws Exception {\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"sebb@apache.org","authorName":"Sebastian Bazley","commitYear":"2013","diff":"\"@@ -1,2 +1,3 @@\\n+@Override\\r\\n public void testLongWithUnexpectedArgument1() throws Exception {\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2009","diff":"\"@@ -0,0 +1,2 @@\\n+public void testLongWithUnexpectedArgument1() throws Exception {\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\test\java\org\apache\commons\cli\GnuParserTest.java	testLongWithUnexpectedArgument2	org.apache.commons.cli.GnuParserTest.testLongWithUnexpectedArgument2()	96	97	1	[{"authorEmail":"britter@apache.org","authorName":"Benedikt Ritter","commitYear":"2016","diff":"\"@@ -1,3 +1,5 @@\\n @Override\\r\\n+@Test\\r\\n+@Ignore(\\\"not supported by the GnuParser\\\")\\r\\n public void testLongWithUnexpectedArgument2() throws Exception {\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"sebb@apache.org","authorName":"Sebastian Bazley","commitYear":"2013","diff":"\"@@ -1,2 +1,3 @@\\n+@Override\\r\\n public void testLongWithUnexpectedArgument2() throws Exception {\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2009","diff":"\"@@ -0,0 +1,2 @@\\n+public void testLongWithUnexpectedArgument2() throws Exception {\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\test\java\org\apache\commons\cli\GnuParserTest.java	testMissingArgWithBursting	org.apache.commons.cli.GnuParserTest.testMissingArgWithBursting()	102	103	1	[{"authorEmail":"britter@apache.org","authorName":"Benedikt Ritter","commitYear":"2016","diff":"\"@@ -1,3 +1,5 @@\\n @Override\\r\\n+@Test\\r\\n+@Ignore(\\\"not supported by the GnuParser\\\")\\r\\n public void testMissingArgWithBursting() throws Exception {\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"sebb@apache.org","authorName":"Sebastian Bazley","commitYear":"2013","diff":"\"@@ -1,2 +1,3 @@\\n+@Override\\r\\n public void testMissingArgWithBursting() throws Exception {\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2009","diff":"\"@@ -0,0 +1,2 @@\\n+public void testMissingArgWithBursting() throws Exception {\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\test\java\org\apache\commons\cli\GnuParserTest.java	testNegativeOption	org.apache.commons.cli.GnuParserTest.testNegativeOption()	108	109	1	[{"authorEmail":"britter@apache.org","authorName":"Benedikt Ritter","commitYear":"2016","diff":"\"@@ -1,3 +1,5 @@\\n @Override\\r\\n+@Test\\r\\n+@Ignore(\\\"not supported by the GnuParser (CLI-184)\\\")\\r\\n public void testNegativeOption() throws Exception {\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"sebb@apache.org","authorName":"Sebastian Bazley","commitYear":"2013","diff":"\"@@ -1,2 +1,3 @@\\n+@Override\\r\\n public void testNegativeOption() throws Exception {\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2009","diff":"\"@@ -0,0 +1,2 @@\\n+public void testNegativeOption() throws Exception {\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\test\java\org\apache\commons\cli\GnuParserTest.java	testPartialLongOptionSingleDash	org.apache.commons.cli.GnuParserTest.testPartialLongOptionSingleDash()	114	115	1	[{"authorEmail":"britter@apache.org","authorName":"Benedikt Ritter","commitYear":"2016","diff":"\"@@ -1,3 +1,5 @@\\n @Override\\r\\n+@Test\\r\\n+@Ignore(\\\"not supported by the GnuParser\\\")\\r\\n public void testPartialLongOptionSingleDash() throws Exception {\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"sebb@apache.org","authorName":"Sebastian Bazley","commitYear":"2013","diff":"\"@@ -1,2 +1,3 @@\\n+@Override\\r\\n public void testPartialLongOptionSingleDash() throws Exception {\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2009","diff":"\"@@ -1,2 +1,2 @@\\n-public void testPartialLongOptionWithShort() throws Exception {\\r\\n+public void testPartialLongOptionSingleDash() throws Exception {\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2009","diff":"\"@@ -0,0 +1,2 @@\\n+public void testPartialLongOptionWithShort() throws Exception {\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\test\java\org\apache\commons\cli\GnuParserTest.java	testShortWithUnexpectedArgument	org.apache.commons.cli.GnuParserTest.testShortWithUnexpectedArgument()	120	121	1	[{"authorEmail":"britter@apache.org","authorName":"Benedikt Ritter","commitYear":"2016","diff":"\"@@ -1,3 +1,5 @@\\n @Override\\r\\n+@Test\\r\\n+@Ignore(\\\"not supported by the GnuParser\\\")\\r\\n public void testShortWithUnexpectedArgument() throws Exception {\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"sebb@apache.org","authorName":"Sebastian Bazley","commitYear":"2013","diff":"\"@@ -1,2 +1,3 @@\\n+@Override\\r\\n public void testShortWithUnexpectedArgument() throws Exception {\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2009","diff":"\"@@ -0,0 +1,2 @@\\n+public void testShortWithUnexpectedArgument() throws Exception {\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\test\java\org\apache\commons\cli\GnuParserTest.java	testStopBursting	org.apache.commons.cli.GnuParserTest.testStopBursting()	126	127	1	[{"authorEmail":"britter@apache.org","authorName":"Benedikt Ritter","commitYear":"2016","diff":"\"@@ -1,3 +1,5 @@\\n @Override\\r\\n+@Test\\r\\n+@Ignore(\\\"not supported by the GnuParser\\\")\\r\\n public void testStopBursting() throws Exception {\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"sebb@apache.org","authorName":"Sebastian Bazley","commitYear":"2013","diff":"\"@@ -1,2 +1,3 @@\\n+@Override\\r\\n public void testStopBursting() throws Exception {\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2009","diff":"\"@@ -0,0 +1,2 @@\\n+public void testStopBursting() throws Exception {\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\test\java\org\apache\commons\cli\GnuParserTest.java	testStopBursting2	org.apache.commons.cli.GnuParserTest.testStopBursting2()	132	133	1	[{"authorEmail":"britter@apache.org","authorName":"Benedikt Ritter","commitYear":"2016","diff":"\"@@ -1,3 +1,5 @@\\n @Override\\r\\n+@Test\\r\\n+@Ignore(\\\"not supported by the GnuParser\\\")\\r\\n public void testStopBursting2() throws Exception {\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"sebb@apache.org","authorName":"Sebastian Bazley","commitYear":"2013","diff":"\"@@ -1,2 +1,3 @@\\n+@Override\\r\\n public void testStopBursting2() throws Exception {\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2009","diff":"\"@@ -0,0 +1,2 @@\\n+public void testStopBursting2() throws Exception {\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\test\java\org\apache\commons\cli\GnuParserTest.java	testUnambiguousPartialLongOption1	org.apache.commons.cli.GnuParserTest.testUnambiguousPartialLongOption1()	138	139	1	[{"authorEmail":"britter@apache.org","authorName":"Benedikt Ritter","commitYear":"2016","diff":"\"@@ -1,3 +1,5 @@\\n @Override\\r\\n+@Test\\r\\n+@Ignore(\\\"not supported by the GnuParser\\\")\\r\\n public void testUnambiguousPartialLongOption1() throws Exception {\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"sebb@apache.org","authorName":"Sebastian Bazley","commitYear":"2013","diff":"\"@@ -1,2 +1,3 @@\\n+@Override\\r\\n public void testUnambiguousPartialLongOption1() throws Exception {\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2009","diff":"\"@@ -0,0 +1,2 @@\\n+public void testUnambiguousPartialLongOption1() throws Exception {\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\test\java\org\apache\commons\cli\GnuParserTest.java	testUnambiguousPartialLongOption2	org.apache.commons.cli.GnuParserTest.testUnambiguousPartialLongOption2()	144	145	1	[{"authorEmail":"britter@apache.org","authorName":"Benedikt Ritter","commitYear":"2016","diff":"\"@@ -1,3 +1,5 @@\\n @Override\\r\\n+@Test\\r\\n+@Ignore(\\\"not supported by the GnuParser\\\")\\r\\n public void testUnambiguousPartialLongOption2() throws Exception {\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"sebb@apache.org","authorName":"Sebastian Bazley","commitYear":"2013","diff":"\"@@ -1,2 +1,3 @@\\n+@Override\\r\\n public void testUnambiguousPartialLongOption2() throws Exception {\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2009","diff":"\"@@ -0,0 +1,2 @@\\n+public void testUnambiguousPartialLongOption2() throws Exception {\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\test\java\org\apache\commons\cli\GnuParserTest.java	testUnambiguousPartialLongOption3	org.apache.commons.cli.GnuParserTest.testUnambiguousPartialLongOption3()	150	151	1	[{"authorEmail":"britter@apache.org","authorName":"Benedikt Ritter","commitYear":"2016","diff":"\"@@ -1,3 +1,5 @@\\n @Override\\r\\n+@Test\\r\\n+@Ignore(\\\"not supported by the GnuParser\\\")\\r\\n public void testUnambiguousPartialLongOption3() throws Exception {\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"sebb@apache.org","authorName":"Sebastian Bazley","commitYear":"2013","diff":"\"@@ -1,2 +1,3 @@\\n+@Override\\r\\n public void testUnambiguousPartialLongOption3() throws Exception {\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2009","diff":"\"@@ -1,2 +1,2 @@\\n-public void testPartialLongOptionWithShort() throws Exception {\\r\\n+public void testUnambiguousPartialLongOption3() throws Exception {\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2009","diff":"\"@@ -0,0 +1,2 @@\\n+public void testPartialLongOptionWithShort() throws Exception {\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\test\java\org\apache\commons\cli\GnuParserTest.java	testUnambiguousPartialLongOption4	org.apache.commons.cli.GnuParserTest.testUnambiguousPartialLongOption4()	156	157	1	[{"authorEmail":"britter@apache.org","authorName":"Benedikt Ritter","commitYear":"2016","diff":"\"@@ -1,3 +1,5 @@\\n @Override\\r\\n+@Test\\r\\n+@Ignore(\\\"not supported by the GnuParser\\\")\\r\\n public void testUnambiguousPartialLongOption4() throws Exception {\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"sebb@apache.org","authorName":"Sebastian Bazley","commitYear":"2013","diff":"\"@@ -1,2 +1,3 @@\\n+@Override\\r\\n public void testUnambiguousPartialLongOption4() throws Exception {\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2009","diff":"\"@@ -1,2 +1,2 @@\\n-public void testPartialLongOptionWithShort() throws Exception {\\r\\n+public void testUnambiguousPartialLongOption4() throws Exception {\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2009","diff":"\"@@ -0,0 +1,2 @@\\n+public void testPartialLongOptionWithShort() throws Exception {\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\test\java\org\apache\commons\cli\GnuParserTest.java	testUnrecognizedOptionWithBursting	org.apache.commons.cli.GnuParserTest.testUnrecognizedOptionWithBursting()	162	163	1	[{"authorEmail":"britter@apache.org","authorName":"Benedikt Ritter","commitYear":"2016","diff":"\"@@ -1,3 +1,5 @@\\n @Override\\r\\n+@Test\\r\\n+@Ignore(\\\"not supported by the GnuParser\\\")\\r\\n public void testUnrecognizedOptionWithBursting() throws Exception {\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"sebb@apache.org","authorName":"Sebastian Bazley","commitYear":"2013","diff":"\"@@ -1,2 +1,3 @@\\n+@Override\\r\\n public void testUnrecognizedOptionWithBursting() throws Exception {\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2009","diff":"\"@@ -0,0 +1,2 @@\\n+public void testUnrecognizedOptionWithBursting() throws Exception {\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\test\java\org\apache\commons\cli\HelpFormatterTest.java	testAccessors	org.apache.commons.cli.HelpFormatterTest.testAccessors()	37	63	1	[{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,20 +1,20 @@\\n @Test\\r\\n public void testAccessors() {\\r\\n-    HelpFormatter formatter = new HelpFormatter();\\r\\n+    final HelpFormatter formatter = new HelpFormatter();\\r\\n     formatter.setArgName(\\\"argname\\\");\\r\\n     assertEquals(\\\"arg name\\\", \\\"argname\\\", formatter.getArgName());\\r\\n     formatter.setDescPadding(3);\\r\\n     assertEquals(\\\"desc padding\\\", 3, formatter.getDescPadding());\\r\\n     formatter.setLeftPadding(7);\\r\\n     assertEquals(\\\"left padding\\\", 7, formatter.getLeftPadding());\\r\\n     formatter.setLongOptPrefix(\\\"~~\\\");\\r\\n     assertEquals(\\\"long opt prefix\\\", \\\"~~\\\", formatter.getLongOptPrefix());\\r\\n     formatter.setNewLine(\\\"\\\\n\\\");\\r\\n     assertEquals(\\\"new line\\\", \\\"\\\\n\\\", formatter.getNewLine());\\r\\n     formatter.setOptPrefix(\\\"~\\\");\\r\\n     assertEquals(\\\"opt prefix\\\", \\\"~\\\", formatter.getOptPrefix());\\r\\n     formatter.setSyntaxPrefix(\\\"-> \\\");\\r\\n     assertEquals(\\\"syntax prefix\\\", \\\"-> \\\", formatter.getSyntaxPrefix());\\r\\n     formatter.setWidth(80);\\r\\n     assertEquals(\\\"width\\\", 80, formatter.getWidth());\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"tn@apache.org","authorName":"Thomas Neidhart","commitYear":"2013","diff":"\"@@ -1,19 +1,20 @@\\n+@Test\\r\\n public void testAccessors() {\\r\\n     HelpFormatter formatter = new HelpFormatter();\\r\\n     formatter.setArgName(\\\"argname\\\");\\r\\n     assertEquals(\\\"arg name\\\", \\\"argname\\\", formatter.getArgName());\\r\\n     formatter.setDescPadding(3);\\r\\n     assertEquals(\\\"desc padding\\\", 3, formatter.getDescPadding());\\r\\n     formatter.setLeftPadding(7);\\r\\n     assertEquals(\\\"left padding\\\", 7, formatter.getLeftPadding());\\r\\n     formatter.setLongOptPrefix(\\\"~~\\\");\\r\\n     assertEquals(\\\"long opt prefix\\\", \\\"~~\\\", formatter.getLongOptPrefix());\\r\\n     formatter.setNewLine(\\\"\\\\n\\\");\\r\\n     assertEquals(\\\"new line\\\", \\\"\\\\n\\\", formatter.getNewLine());\\r\\n     formatter.setOptPrefix(\\\"~\\\");\\r\\n     assertEquals(\\\"opt prefix\\\", \\\"~\\\", formatter.getOptPrefix());\\r\\n     formatter.setSyntaxPrefix(\\\"-> \\\");\\r\\n     assertEquals(\\\"syntax prefix\\\", \\\"-> \\\", formatter.getSyntaxPrefix());\\r\\n     formatter.setWidth(80);\\r\\n     assertEquals(\\\"width\\\", 80, formatter.getWidth());\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2008","diff":"\"@@ -0,0 +1,19 @@\\n+public void testAccessors() {\\r\\n+    HelpFormatter formatter = new HelpFormatter();\\r\\n+    formatter.setArgName(\\\"argname\\\");\\r\\n+    assertEquals(\\\"arg name\\\", \\\"argname\\\", formatter.getArgName());\\r\\n+    formatter.setDescPadding(3);\\r\\n+    assertEquals(\\\"desc padding\\\", 3, formatter.getDescPadding());\\r\\n+    formatter.setLeftPadding(7);\\r\\n+    assertEquals(\\\"left padding\\\", 7, formatter.getLeftPadding());\\r\\n+    formatter.setLongOptPrefix(\\\"~~\\\");\\r\\n+    assertEquals(\\\"long opt prefix\\\", \\\"~~\\\", formatter.getLongOptPrefix());\\r\\n+    formatter.setNewLine(\\\"\\\\n\\\");\\r\\n+    assertEquals(\\\"new line\\\", \\\"\\\\n\\\", formatter.getNewLine());\\r\\n+    formatter.setOptPrefix(\\\"~\\\");\\r\\n+    assertEquals(\\\"opt prefix\\\", \\\"~\\\", formatter.getOptPrefix());\\r\\n+    formatter.setSyntaxPrefix(\\\"-> \\\");\\r\\n+    assertEquals(\\\"syntax prefix\\\", \\\"-> \\\", formatter.getSyntaxPrefix());\\r\\n+    formatter.setWidth(80);\\r\\n+    assertEquals(\\\"width\\\", 80, formatter.getWidth());\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\test\java\org\apache\commons\cli\HelpFormatterTest.java	testAutomaticUsage	org.apache.commons.cli.HelpFormatterTest.testAutomaticUsage()	66	85	1	[{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"@@ -1,19 +1,19 @@\\n @Test\\r\\n-public void testAutomaticUsage() throws Exception {\\r\\n+public void testAutomaticUsage() {\\r\\n     final HelpFormatter hf = new HelpFormatter();\\r\\n     Options options;\\r\\n     String expected = \\\"usage: app [-a]\\\";\\r\\n     final ByteArrayOutputStream out = new ByteArrayOutputStream();\\r\\n     final PrintWriter pw = new PrintWriter(out);\\r\\n     options = new Options().addOption(\\\"a\\\", false, \\\"aaaa aaaa aaaa aaaa aaaa\\\");\\r\\n     hf.printUsage(pw, 60, \\\"app\\\", options);\\r\\n     pw.flush();\\r\\n     assertEquals(\\\"simple auto usage\\\", expected, out.toString().trim());\\r\\n     out.reset();\\r\\n     expected = \\\"usage: app [-a] [-b]\\\";\\r\\n     options = new Options().addOption(\\\"a\\\", false, \\\"aaaa aaaa aaaa aaaa aaaa\\\").addOption(\\\"b\\\", false, \\\"bbb\\\");\\r\\n     hf.printUsage(pw, 60, \\\"app\\\", options);\\r\\n     pw.flush();\\r\\n     assertEquals(\\\"simple auto usage\\\", expected, out.toString().trim());\\r\\n     out.reset();\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"\""},{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2020","diff":"\"@@ -1,19 +1,19 @@\\n @Test\\r\\n public void testAutomaticUsage() throws Exception {\\r\\n     final HelpFormatter hf = new HelpFormatter();\\r\\n-    Options options = null;\\r\\n+    Options options;\\r\\n     String expected = \\\"usage: app [-a]\\\";\\r\\n     final ByteArrayOutputStream out = new ByteArrayOutputStream();\\r\\n     final PrintWriter pw = new PrintWriter(out);\\r\\n     options = new Options().addOption(\\\"a\\\", false, \\\"aaaa aaaa aaaa aaaa aaaa\\\");\\r\\n     hf.printUsage(pw, 60, \\\"app\\\", options);\\r\\n     pw.flush();\\r\\n     assertEquals(\\\"simple auto usage\\\", expected, out.toString().trim());\\r\\n     out.reset();\\r\\n     expected = \\\"usage: app [-a] [-b]\\\";\\r\\n     options = new Options().addOption(\\\"a\\\", false, \\\"aaaa aaaa aaaa aaaa aaaa\\\").addOption(\\\"b\\\", false, \\\"bbb\\\");\\r\\n     hf.printUsage(pw, 60, \\\"app\\\", options);\\r\\n     pw.flush();\\r\\n     assertEquals(\\\"simple auto usage\\\", expected, out.toString().trim());\\r\\n     out.reset();\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,19 +1,19 @@\\n @Test\\r\\n public void testAutomaticUsage() throws Exception {\\r\\n-    HelpFormatter hf = new HelpFormatter();\\r\\n+    final HelpFormatter hf = new HelpFormatter();\\r\\n     Options options = null;\\r\\n     String expected = \\\"usage: app [-a]\\\";\\r\\n-    ByteArrayOutputStream out = new ByteArrayOutputStream();\\r\\n-    PrintWriter pw = new PrintWriter(out);\\r\\n+    final ByteArrayOutputStream out = new ByteArrayOutputStream();\\r\\n+    final PrintWriter pw = new PrintWriter(out);\\r\\n     options = new Options().addOption(\\\"a\\\", false, \\\"aaaa aaaa aaaa aaaa aaaa\\\");\\r\\n     hf.printUsage(pw, 60, \\\"app\\\", options);\\r\\n     pw.flush();\\r\\n     assertEquals(\\\"simple auto usage\\\", expected, out.toString().trim());\\r\\n     out.reset();\\r\\n     expected = \\\"usage: app [-a] [-b]\\\";\\r\\n     options = new Options().addOption(\\\"a\\\", false, \\\"aaaa aaaa aaaa aaaa aaaa\\\").addOption(\\\"b\\\", false, \\\"bbb\\\");\\r\\n     hf.printUsage(pw, 60, \\\"app\\\", options);\\r\\n     pw.flush();\\r\\n     assertEquals(\\\"simple auto usage\\\", expected, out.toString().trim());\\r\\n     out.reset();\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"tn@apache.org","authorName":"Thomas Neidhart","commitYear":"2013","diff":"\"@@ -1,18 +1,19 @@\\n+@Test\\r\\n public void testAutomaticUsage() throws Exception {\\r\\n     HelpFormatter hf = new HelpFormatter();\\r\\n     Options options = null;\\r\\n     String expected = \\\"usage: app [-a]\\\";\\r\\n     ByteArrayOutputStream out = new ByteArrayOutputStream();\\r\\n     PrintWriter pw = new PrintWriter(out);\\r\\n     options = new Options().addOption(\\\"a\\\", false, \\\"aaaa aaaa aaaa aaaa aaaa\\\");\\r\\n     hf.printUsage(pw, 60, \\\"app\\\", options);\\r\\n     pw.flush();\\r\\n     assertEquals(\\\"simple auto usage\\\", expected, out.toString().trim());\\r\\n     out.reset();\\r\\n     expected = \\\"usage: app [-a] [-b]\\\";\\r\\n     options = new Options().addOption(\\\"a\\\", false, \\\"aaaa aaaa aaaa aaaa aaaa\\\").addOption(\\\"b\\\", false, \\\"bbb\\\");\\r\\n     hf.printUsage(pw, 60, \\\"app\\\", options);\\r\\n     pw.flush();\\r\\n     assertEquals(\\\"simple auto usage\\\", expected, out.toString().trim());\\r\\n     out.reset();\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2008","diff":"\"\""},{"authorEmail":"roxspring@apache.org","authorName":"Robert James Oxspring","commitYear":"2004","diff":"\"@@ -1,18 +1,18 @@\\n public void testAutomaticUsage() throws Exception {\\r\\n     HelpFormatter hf = new HelpFormatter();\\r\\n     Options options = null;\\r\\n     String expected = \\\"usage: app [-a]\\\";\\r\\n     ByteArrayOutputStream out = new ByteArrayOutputStream();\\r\\n     PrintWriter pw = new PrintWriter(out);\\r\\n     options = new Options().addOption(\\\"a\\\", false, \\\"aaaa aaaa aaaa aaaa aaaa\\\");\\r\\n     hf.printUsage(pw, 60, \\\"app\\\", options);\\r\\n     pw.flush();\\r\\n     assertEquals(\\\"simple auto usage\\\", expected, out.toString().trim());\\r\\n     out.reset();\\r\\n-    expected = \\\"usage: app [-b] [-a]\\\";\\r\\n+    expected = \\\"usage: app [-a] [-b]\\\";\\r\\n     options = new Options().addOption(\\\"a\\\", false, \\\"aaaa aaaa aaaa aaaa aaaa\\\").addOption(\\\"b\\\", false, \\\"bbb\\\");\\r\\n     hf.printUsage(pw, 60, \\\"app\\\", options);\\r\\n     pw.flush();\\r\\n     assertEquals(\\\"simple auto usage\\\", expected, out.toString().trim());\\r\\n     out.reset();\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jstrachan@apache.org","authorName":"James Strachan","commitYear":"2002","diff":"\"@@ -1,18 +1,18 @@\\n public void testAutomaticUsage() throws Exception {\\r\\n     HelpFormatter hf = new HelpFormatter();\\r\\n     Options options = null;\\r\\n-    String expected = \\\"usage: app [-a]\\\\n\\\";\\r\\n+    String expected = \\\"usage: app [-a]\\\";\\r\\n     ByteArrayOutputStream out = new ByteArrayOutputStream();\\r\\n     PrintWriter pw = new PrintWriter(out);\\r\\n     options = new Options().addOption(\\\"a\\\", false, \\\"aaaa aaaa aaaa aaaa aaaa\\\");\\r\\n     hf.printUsage(pw, 60, \\\"app\\\", options);\\r\\n     pw.flush();\\r\\n-    assertEquals(\\\"simple auto usage\\\", expected, out.toString());\\r\\n+    assertEquals(\\\"simple auto usage\\\", expected, out.toString().trim());\\r\\n     out.reset();\\r\\n-    expected = \\\"usage: app [-b] [-a]\\\\n\\\";\\r\\n+    expected = \\\"usage: app [-b] [-a]\\\";\\r\\n     options = new Options().addOption(\\\"a\\\", false, \\\"aaaa aaaa aaaa aaaa aaaa\\\").addOption(\\\"b\\\", false, \\\"bbb\\\");\\r\\n     hf.printUsage(pw, 60, \\\"app\\\", options);\\r\\n     pw.flush();\\r\\n-    assertEquals(\\\"simple auto usage\\\", expected, out.toString());\\r\\n+    assertEquals(\\\"simple auto usage\\\", expected, out.toString().trim());\\r\\n     out.reset();\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -0,0 +1,18 @@\\n+public void testAutomaticUsage() throws Exception {\\r\\n+    HelpFormatter hf = new HelpFormatter();\\r\\n+    Options options = null;\\r\\n+    String expected = \\\"usage: app [-a]\\\\n\\\";\\r\\n+    ByteArrayOutputStream out = new ByteArrayOutputStream();\\r\\n+    PrintWriter pw = new PrintWriter(out);\\r\\n+    options = new Options().addOption(\\\"a\\\", false, \\\"aaaa aaaa aaaa aaaa aaaa\\\");\\r\\n+    hf.printUsage(pw, 60, \\\"app\\\", options);\\r\\n+    pw.flush();\\r\\n+    assertEquals(\\\"simple auto usage\\\", expected, out.toString());\\r\\n+    out.reset();\\r\\n+    expected = \\\"usage: app [-b] [-a]\\\\n\\\";\\r\\n+    options = new Options().addOption(\\\"a\\\", false, \\\"aaaa aaaa aaaa aaaa aaaa\\\").addOption(\\\"b\\\", false, \\\"bbb\\\");\\r\\n+    hf.printUsage(pw, 60, \\\"app\\\", options);\\r\\n+    pw.flush();\\r\\n+    assertEquals(\\\"simple auto usage\\\", expected, out.toString());\\r\\n+    out.reset();\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\test\java\org\apache\commons\cli\HelpFormatterTest.java	testDefaultArgName	org.apache.commons.cli.HelpFormatterTest.testDefaultArgName()	88	101	1	[{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2019","diff":"\"\""},{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,11 +1,11 @@\\n @Test\\r\\n public void testDefaultArgName() {\\r\\n-    Option option = Option.builder(\\\"f\\\").hasArg().required(true).build();\\r\\n-    Options options = new Options();\\r\\n+    final Option option = Option.builder(\\\"f\\\").hasArg().required(true).build();\\r\\n+    final Options options = new Options();\\r\\n     options.addOption(option);\\r\\n-    StringWriter out = new StringWriter();\\r\\n-    HelpFormatter formatter = new HelpFormatter();\\r\\n+    final StringWriter out = new StringWriter();\\r\\n+    final HelpFormatter formatter = new HelpFormatter();\\r\\n     formatter.setArgName(\\\"argument\\\");\\r\\n     formatter.printUsage(new PrintWriter(out), 80, \\\"app\\\", options);\\r\\n     assertEquals(\\\"usage: app -f <argument>\\\" + EOL, out.toString());\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"tn@apache.org","authorName":"Thomas Neidhart","commitYear":"2013","diff":"\"@@ -1,11 +1,11 @@\\n @Test\\r\\n public void testDefaultArgName() {\\r\\n-    Option option = OptionBuilder.hasArg().isRequired().create(\\\"f\\\");\\r\\n+    Option option = Option.builder(\\\"f\\\").hasArg().required(true).build();\\r\\n     Options options = new Options();\\r\\n     options.addOption(option);\\r\\n     StringWriter out = new StringWriter();\\r\\n     HelpFormatter formatter = new HelpFormatter();\\r\\n     formatter.setArgName(\\\"argument\\\");\\r\\n     formatter.printUsage(new PrintWriter(out), 80, \\\"app\\\", options);\\r\\n     assertEquals(\\\"usage: app -f <argument>\\\" + EOL, out.toString());\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"tn@apache.org","authorName":"Thomas Neidhart","commitYear":"2013","diff":"\"@@ -1,10 +1,11 @@\\n+@Test\\r\\n public void testDefaultArgName() {\\r\\n     Option option = OptionBuilder.hasArg().isRequired().create(\\\"f\\\");\\r\\n     Options options = new Options();\\r\\n     options.addOption(option);\\r\\n     StringWriter out = new StringWriter();\\r\\n     HelpFormatter formatter = new HelpFormatter();\\r\\n     formatter.setArgName(\\\"argument\\\");\\r\\n     formatter.printUsage(new PrintWriter(out), 80, \\\"app\\\", options);\\r\\n     assertEquals(\\\"usage: app -f <argument>\\\" + EOL, out.toString());\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2010","diff":"\"@@ -0,0 +1,10 @@\\n+public void testDefaultArgName() {\\r\\n+    Option option = OptionBuilder.hasArg().isRequired().create(\\\"f\\\");\\r\\n+    Options options = new Options();\\r\\n+    options.addOption(option);\\r\\n+    StringWriter out = new StringWriter();\\r\\n+    HelpFormatter formatter = new HelpFormatter();\\r\\n+    formatter.setArgName(\\\"argument\\\");\\r\\n+    formatter.printUsage(new PrintWriter(out), 80, \\\"app\\\", options);\\r\\n+    assertEquals(\\\"usage: app -f <argument>\\\" + EOL, out.toString());\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\test\java\org\apache\commons\cli\HelpFormatterTest.java	testFindWrapPos	org.apache.commons.cli.HelpFormatterTest.testFindWrapPos()	104	128	1	[{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"@@ -1,16 +1,16 @@\\n @Test\\r\\n-public void testFindWrapPos() throws Exception {\\r\\n+public void testFindWrapPos() {\\r\\n     final HelpFormatter hf = new HelpFormatter();\\r\\n     String text = \\\"This is a test.\\\";\\r\\n     assertEquals(\\\"wrap position\\\", 7, hf.findWrapPos(text, 8, 0));\\r\\n     assertEquals(\\\"wrap position 2\\\", -1, hf.findWrapPos(text, 8, 8));\\r\\n     text = \\\"aaaa aa\\\";\\r\\n     assertEquals(\\\"wrap position 3\\\", 3, hf.findWrapPos(text, 3, 0));\\r\\n     text = \\\"aaaaaa aaaaaa\\\";\\r\\n     assertEquals(\\\"wrap position 4\\\", 6, hf.findWrapPos(text, 6, 0));\\r\\n     assertEquals(\\\"wrap position 4\\\", -1, hf.findWrapPos(text, 6, 7));\\r\\n     text = \\\"aaaaaa\\\\n aaaaaa\\\";\\r\\n     assertEquals(\\\"wrap position 5\\\", 7, hf.findWrapPos(text, 6, 0));\\r\\n     text = \\\"aaaaaa\\\\t aaaaaa\\\";\\r\\n     assertEquals(\\\"wrap position 6\\\", 7, hf.findWrapPos(text, 6, 0));\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2019","diff":"\"\""},{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,16 +1,16 @@\\n @Test\\r\\n public void testFindWrapPos() throws Exception {\\r\\n-    HelpFormatter hf = new HelpFormatter();\\r\\n+    final HelpFormatter hf = new HelpFormatter();\\r\\n     String text = \\\"This is a test.\\\";\\r\\n     assertEquals(\\\"wrap position\\\", 7, hf.findWrapPos(text, 8, 0));\\r\\n     assertEquals(\\\"wrap position 2\\\", -1, hf.findWrapPos(text, 8, 8));\\r\\n     text = \\\"aaaa aa\\\";\\r\\n     assertEquals(\\\"wrap position 3\\\", 3, hf.findWrapPos(text, 3, 0));\\r\\n     text = \\\"aaaaaa aaaaaa\\\";\\r\\n     assertEquals(\\\"wrap position 4\\\", 6, hf.findWrapPos(text, 6, 0));\\r\\n     assertEquals(\\\"wrap position 4\\\", -1, hf.findWrapPos(text, 6, 7));\\r\\n     text = \\\"aaaaaa\\\\n aaaaaa\\\";\\r\\n     assertEquals(\\\"wrap position 5\\\", 7, hf.findWrapPos(text, 6, 0));\\r\\n     text = \\\"aaaaaa\\\\t aaaaaa\\\";\\r\\n     assertEquals(\\\"wrap position 6\\\", 7, hf.findWrapPos(text, 6, 0));\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"tn@apache.org","authorName":"Thomas Neidhart","commitYear":"2013","diff":"\"@@ -1,15 +1,16 @@\\n+@Test\\r\\n public void testFindWrapPos() throws Exception {\\r\\n     HelpFormatter hf = new HelpFormatter();\\r\\n     String text = \\\"This is a test.\\\";\\r\\n     assertEquals(\\\"wrap position\\\", 7, hf.findWrapPos(text, 8, 0));\\r\\n     assertEquals(\\\"wrap position 2\\\", -1, hf.findWrapPos(text, 8, 8));\\r\\n     text = \\\"aaaa aa\\\";\\r\\n     assertEquals(\\\"wrap position 3\\\", 3, hf.findWrapPos(text, 3, 0));\\r\\n     text = \\\"aaaaaa aaaaaa\\\";\\r\\n     assertEquals(\\\"wrap position 4\\\", 6, hf.findWrapPos(text, 6, 0));\\r\\n     assertEquals(\\\"wrap position 4\\\", -1, hf.findWrapPos(text, 6, 7));\\r\\n     text = \\\"aaaaaa\\\\n aaaaaa\\\";\\r\\n     assertEquals(\\\"wrap position 5\\\", 7, hf.findWrapPos(text, 6, 0));\\r\\n     text = \\\"aaaaaa\\\\t aaaaaa\\\";\\r\\n     assertEquals(\\\"wrap position 6\\\", 7, hf.findWrapPos(text, 6, 0));\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"tn@apache.org","authorName":"Thomas Neidhart","commitYear":"2013","diff":"\"@@ -1,11 +1,15 @@\\n public void testFindWrapPos() throws Exception {\\r\\n     HelpFormatter hf = new HelpFormatter();\\r\\n     String text = \\\"This is a test.\\\";\\r\\n     assertEquals(\\\"wrap position\\\", 7, hf.findWrapPos(text, 8, 0));\\r\\n     assertEquals(\\\"wrap position 2\\\", -1, hf.findWrapPos(text, 8, 8));\\r\\n     text = \\\"aaaa aa\\\";\\r\\n     assertEquals(\\\"wrap position 3\\\", 3, hf.findWrapPos(text, 3, 0));\\r\\n     text = \\\"aaaaaa aaaaaa\\\";\\r\\n     assertEquals(\\\"wrap position 4\\\", 6, hf.findWrapPos(text, 6, 0));\\r\\n     assertEquals(\\\"wrap position 4\\\", -1, hf.findWrapPos(text, 6, 7));\\r\\n+    text = \\\"aaaaaa\\\\n aaaaaa\\\";\\r\\n+    assertEquals(\\\"wrap position 5\\\", 7, hf.findWrapPos(text, 6, 0));\\r\\n+    text = \\\"aaaaaa\\\\t aaaaaa\\\";\\r\\n+    assertEquals(\\\"wrap position 6\\\", 7, hf.findWrapPos(text, 6, 0));\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2010","diff":"\"@@ -1,8 +1,11 @@\\n public void testFindWrapPos() throws Exception {\\r\\n     HelpFormatter hf = new HelpFormatter();\\r\\n     String text = \\\"This is a test.\\\";\\r\\n     assertEquals(\\\"wrap position\\\", 7, hf.findWrapPos(text, 8, 0));\\r\\n     assertEquals(\\\"wrap position 2\\\", -1, hf.findWrapPos(text, 8, 8));\\r\\n     text = \\\"aaaa aa\\\";\\r\\n-    assertEquals(\\\"wrap position 3\\\", 4, hf.findWrapPos(text, 3, 0));\\r\\n+    assertEquals(\\\"wrap position 3\\\", 3, hf.findWrapPos(text, 3, 0));\\r\\n+    text = \\\"aaaaaa aaaaaa\\\";\\r\\n+    assertEquals(\\\"wrap position 4\\\", 6, hf.findWrapPos(text, 6, 0));\\r\\n+    assertEquals(\\\"wrap position 4\\\", -1, hf.findWrapPos(text, 6, 7));\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2010","diff":"\"\""},{"authorEmail":"joehni@apache.org","authorName":"Joerg Schaible","commitYear":"2009","diff":"\"\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2008","diff":"\"\""},{"authorEmail":"jstrachan@apache.org","authorName":"James Strachan","commitYear":"2002","diff":"\"@@ -0,0 +1,8 @@\\n+public void testFindWrapPos() throws Exception {\\r\\n+    HelpFormatter hf = new HelpFormatter();\\r\\n+    String text = \\\"This is a test.\\\";\\r\\n+    assertEquals(\\\"wrap position\\\", 7, hf.findWrapPos(text, 8, 0));\\r\\n+    assertEquals(\\\"wrap position 2\\\", -1, hf.findWrapPos(text, 8, 8));\\r\\n+    text = \\\"aaaa aa\\\";\\r\\n+    assertEquals(\\\"wrap position 3\\\", 4, hf.findWrapPos(text, 3, 0));\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\test\java\org\apache\commons\cli\HelpFormatterTest.java	testHeaderStartingWithLineSeparator	org.apache.commons.cli.HelpFormatterTest.testHeaderStartingWithLineSeparator()	131	148	1	[{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"\""},{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"\""},{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,10 +1,10 @@\\n @Test\\r\\n public void testHeaderStartingWithLineSeparator() {\\r\\n-    Options options = new Options();\\r\\n-    HelpFormatter formatter = new HelpFormatter();\\r\\n-    String header = EOL + \\\"Header\\\";\\r\\n-    String footer = \\\"Footer\\\";\\r\\n-    StringWriter out = new StringWriter();\\r\\n+    final Options options = new Options();\\r\\n+    final HelpFormatter formatter = new HelpFormatter();\\r\\n+    final String header = EOL + \\\"Header\\\";\\r\\n+    final String footer = \\\"Footer\\\";\\r\\n+    final StringWriter out = new StringWriter();\\r\\n     formatter.printHelp(new PrintWriter(out), 80, \\\"foobar\\\", header, options, 2, 2, footer, true);\\r\\n     assertEquals(\\\"usage: foobar\\\" + EOL + \\\"\\\" + EOL + \\\"Header\\\" + EOL + \\\"\\\" + EOL + \\\"Footer\\\" + EOL, out.toString());\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"tn@apache.org","authorName":"Thomas Neidhart","commitYear":"2013","diff":"\"@@ -1,9 +1,10 @@\\n+@Test\\r\\n public void testHeaderStartingWithLineSeparator() {\\r\\n     Options options = new Options();\\r\\n     HelpFormatter formatter = new HelpFormatter();\\r\\n     String header = EOL + \\\"Header\\\";\\r\\n     String footer = \\\"Footer\\\";\\r\\n     StringWriter out = new StringWriter();\\r\\n     formatter.printHelp(new PrintWriter(out), 80, \\\"foobar\\\", header, options, 2, 2, footer, true);\\r\\n     assertEquals(\\\"usage: foobar\\\" + EOL + \\\"\\\" + EOL + \\\"Header\\\" + EOL + \\\"\\\" + EOL + \\\"Footer\\\" + EOL, out.toString());\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2008","diff":"\"@@ -0,0 +1,9 @@\\n+public void testHeaderStartingWithLineSeparator() {\\r\\n+    Options options = new Options();\\r\\n+    HelpFormatter formatter = new HelpFormatter();\\r\\n+    String header = EOL + \\\"Header\\\";\\r\\n+    String footer = \\\"Footer\\\";\\r\\n+    StringWriter out = new StringWriter();\\r\\n+    formatter.printHelp(new PrintWriter(out), 80, \\\"foobar\\\", header, options, 2, 2, footer, true);\\r\\n+    assertEquals(\\\"usage: foobar\\\" + EOL + \\\"\\\" + EOL + \\\"Header\\\" + EOL + \\\"\\\" + EOL + \\\"Footer\\\" + EOL, out.toString());\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\test\java\org\apache\commons\cli\HelpFormatterTest.java	testHelpWithLongOptSeparator	org.apache.commons.cli.HelpFormatterTest.testHelpWithLongOptSeparator()	151	176	1	[{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"@@ -1,14 +1,14 @@\\n @Test\\r\\n-public void testHelpWithLongOptSeparator() throws Exception {\\r\\n+public void testHelpWithLongOptSeparator() {\\r\\n     final Options options = new Options();\\r\\n     options.addOption(\\\"f\\\", true, \\\"the file\\\");\\r\\n     options.addOption(Option.builder(\\\"s\\\").longOpt(\\\"size\\\").desc(\\\"the size\\\").hasArg().argName(\\\"SIZE\\\").build());\\r\\n     options.addOption(Option.builder().longOpt(\\\"age\\\").desc(\\\"the age\\\").hasArg().build());\\r\\n     final HelpFormatter formatter = new HelpFormatter();\\r\\n     assertEquals(HelpFormatter.DEFAULT_LONG_OPT_SEPARATOR, formatter.getLongOptSeparator());\\r\\n     formatter.setLongOptSeparator(\\\"=\\\");\\r\\n     assertEquals(\\\"=\\\", formatter.getLongOptSeparator());\\r\\n     final StringWriter out = new StringWriter();\\r\\n     formatter.printHelp(new PrintWriter(out), 80, \\\"create\\\", \\\"header\\\", options, 2, 2, \\\"footer\\\");\\r\\n     assertEquals(\\\"usage: create\\\" + EOL + \\\"header\\\" + EOL + \\\"     --age=<arg>    the age\\\" + EOL + \\\"  -f <arg>          the file\\\" + EOL + \\\"  -s,--size=<SIZE>  the size\\\" + EOL + \\\"footer\\\" + EOL, out.toString());\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"\""},{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2019","diff":"\"\""},{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,14 +1,14 @@\\n @Test\\r\\n public void testHelpWithLongOptSeparator() throws Exception {\\r\\n-    Options options = new Options();\\r\\n+    final Options options = new Options();\\r\\n     options.addOption(\\\"f\\\", true, \\\"the file\\\");\\r\\n     options.addOption(Option.builder(\\\"s\\\").longOpt(\\\"size\\\").desc(\\\"the size\\\").hasArg().argName(\\\"SIZE\\\").build());\\r\\n     options.addOption(Option.builder().longOpt(\\\"age\\\").desc(\\\"the age\\\").hasArg().build());\\r\\n-    HelpFormatter formatter = new HelpFormatter();\\r\\n+    final HelpFormatter formatter = new HelpFormatter();\\r\\n     assertEquals(HelpFormatter.DEFAULT_LONG_OPT_SEPARATOR, formatter.getLongOptSeparator());\\r\\n     formatter.setLongOptSeparator(\\\"=\\\");\\r\\n     assertEquals(\\\"=\\\", formatter.getLongOptSeparator());\\r\\n-    StringWriter out = new StringWriter();\\r\\n+    final StringWriter out = new StringWriter();\\r\\n     formatter.printHelp(new PrintWriter(out), 80, \\\"create\\\", \\\"header\\\", options, 2, 2, \\\"footer\\\");\\r\\n     assertEquals(\\\"usage: create\\\" + EOL + \\\"header\\\" + EOL + \\\"     --age=<arg>    the age\\\" + EOL + \\\"  -f <arg>          the file\\\" + EOL + \\\"  -s,--size=<SIZE>  the size\\\" + EOL + \\\"footer\\\" + EOL, out.toString());\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"tn@apache.org","authorName":"Thomas Neidhart","commitYear":"2013","diff":"\"@@ -1,14 +1,14 @@\\n @Test\\r\\n public void testHelpWithLongOptSeparator() throws Exception {\\r\\n     Options options = new Options();\\r\\n     options.addOption(\\\"f\\\", true, \\\"the file\\\");\\r\\n-    options.addOption(OptionBuilder.withLongOpt(\\\"size\\\").withDescription(\\\"the size\\\").hasArg().withArgName(\\\"SIZE\\\").create('s'));\\r\\n-    options.addOption(OptionBuilder.withLongOpt(\\\"age\\\").withDescription(\\\"the age\\\").hasArg().create());\\r\\n+    options.addOption(Option.builder(\\\"s\\\").longOpt(\\\"size\\\").desc(\\\"the size\\\").hasArg().argName(\\\"SIZE\\\").build());\\r\\n+    options.addOption(Option.builder().longOpt(\\\"age\\\").desc(\\\"the age\\\").hasArg().build());\\r\\n     HelpFormatter formatter = new HelpFormatter();\\r\\n     assertEquals(HelpFormatter.DEFAULT_LONG_OPT_SEPARATOR, formatter.getLongOptSeparator());\\r\\n     formatter.setLongOptSeparator(\\\"=\\\");\\r\\n     assertEquals(\\\"=\\\", formatter.getLongOptSeparator());\\r\\n     StringWriter out = new StringWriter();\\r\\n     formatter.printHelp(new PrintWriter(out), 80, \\\"create\\\", \\\"header\\\", options, 2, 2, \\\"footer\\\");\\r\\n     assertEquals(\\\"usage: create\\\" + EOL + \\\"header\\\" + EOL + \\\"     --age=<arg>    the age\\\" + EOL + \\\"  -f <arg>          the file\\\" + EOL + \\\"  -s,--size=<SIZE>  the size\\\" + EOL + \\\"footer\\\" + EOL, out.toString());\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"tn@apache.org","authorName":"Thomas Neidhart","commitYear":"2013","diff":"\"@@ -1,13 +1,14 @@\\n+@Test\\r\\n public void testHelpWithLongOptSeparator() throws Exception {\\r\\n     Options options = new Options();\\r\\n     options.addOption(\\\"f\\\", true, \\\"the file\\\");\\r\\n     options.addOption(OptionBuilder.withLongOpt(\\\"size\\\").withDescription(\\\"the size\\\").hasArg().withArgName(\\\"SIZE\\\").create('s'));\\r\\n     options.addOption(OptionBuilder.withLongOpt(\\\"age\\\").withDescription(\\\"the age\\\").hasArg().create());\\r\\n     HelpFormatter formatter = new HelpFormatter();\\r\\n     assertEquals(HelpFormatter.DEFAULT_LONG_OPT_SEPARATOR, formatter.getLongOptSeparator());\\r\\n     formatter.setLongOptSeparator(\\\"=\\\");\\r\\n     assertEquals(\\\"=\\\", formatter.getLongOptSeparator());\\r\\n     StringWriter out = new StringWriter();\\r\\n     formatter.printHelp(new PrintWriter(out), 80, \\\"create\\\", \\\"header\\\", options, 2, 2, \\\"footer\\\");\\r\\n     assertEquals(\\\"usage: create\\\" + EOL + \\\"header\\\" + EOL + \\\"     --age=<arg>    the age\\\" + EOL + \\\"  -f <arg>          the file\\\" + EOL + \\\"  -s,--size=<SIZE>  the size\\\" + EOL + \\\"footer\\\" + EOL, out.toString());\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2010","diff":"\"@@ -0,0 +1,13 @@\\n+public void testHelpWithLongOptSeparator() throws Exception {\\r\\n+    Options options = new Options();\\r\\n+    options.addOption(\\\"f\\\", true, \\\"the file\\\");\\r\\n+    options.addOption(OptionBuilder.withLongOpt(\\\"size\\\").withDescription(\\\"the size\\\").hasArg().withArgName(\\\"SIZE\\\").create('s'));\\r\\n+    options.addOption(OptionBuilder.withLongOpt(\\\"age\\\").withDescription(\\\"the age\\\").hasArg().create());\\r\\n+    HelpFormatter formatter = new HelpFormatter();\\r\\n+    assertEquals(HelpFormatter.DEFAULT_LONG_OPT_SEPARATOR, formatter.getLongOptSeparator());\\r\\n+    formatter.setLongOptSeparator(\\\"=\\\");\\r\\n+    assertEquals(\\\"=\\\", formatter.getLongOptSeparator());\\r\\n+    StringWriter out = new StringWriter();\\r\\n+    formatter.printHelp(new PrintWriter(out), 80, \\\"create\\\", \\\"header\\\", options, 2, 2, \\\"footer\\\");\\r\\n+    assertEquals(\\\"usage: create\\\" + EOL + \\\"header\\\" + EOL + \\\"     --age=<arg>    the age\\\" + EOL + \\\"  -f <arg>          the file\\\" + EOL + \\\"  -s,--size=<SIZE>  the size\\\" + EOL + \\\"footer\\\" + EOL, out.toString());\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\test\java\org\apache\commons\cli\HelpFormatterTest.java	testIndentedHeaderAndFooter	org.apache.commons.cli.HelpFormatterTest.testIndentedHeaderAndFooter()	179	197	1	[{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"\""},{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,10 +1,10 @@\\n @Test\\r\\n public void testIndentedHeaderAndFooter() {\\r\\n-    Options options = new Options();\\r\\n-    HelpFormatter formatter = new HelpFormatter();\\r\\n-    String header = \\\"  Header1\\\\n  Header2\\\";\\r\\n-    String footer = \\\"  Footer1\\\\n  Footer2\\\";\\r\\n-    StringWriter out = new StringWriter();\\r\\n+    final Options options = new Options();\\r\\n+    final HelpFormatter formatter = new HelpFormatter();\\r\\n+    final String header = \\\"  Header1\\\\n  Header2\\\";\\r\\n+    final String footer = \\\"  Footer1\\\\n  Footer2\\\";\\r\\n+    final StringWriter out = new StringWriter();\\r\\n     formatter.printHelp(new PrintWriter(out), 80, \\\"foobar\\\", header, options, 2, 2, footer, true);\\r\\n     assertEquals(\\\"usage: foobar\\\" + EOL + \\\"  Header1\\\" + EOL + \\\"  Header2\\\" + EOL + \\\"\\\" + EOL + \\\"  Footer1\\\" + EOL + \\\"  Footer2\\\" + EOL, out.toString());\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"tn@apache.org","authorName":"Thomas Neidhart","commitYear":"2013","diff":"\"@@ -1,9 +1,10 @@\\n+@Test\\r\\n public void testIndentedHeaderAndFooter() {\\r\\n     Options options = new Options();\\r\\n     HelpFormatter formatter = new HelpFormatter();\\r\\n     String header = \\\"  Header1\\\\n  Header2\\\";\\r\\n     String footer = \\\"  Footer1\\\\n  Footer2\\\";\\r\\n     StringWriter out = new StringWriter();\\r\\n     formatter.printHelp(new PrintWriter(out), 80, \\\"foobar\\\", header, options, 2, 2, footer, true);\\r\\n     assertEquals(\\\"usage: foobar\\\" + EOL + \\\"  Header1\\\" + EOL + \\\"  Header2\\\" + EOL + \\\"\\\" + EOL + \\\"  Footer1\\\" + EOL + \\\"  Footer2\\\" + EOL, out.toString());\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2010","diff":"\"@@ -0,0 +1,9 @@\\n+public void testIndentedHeaderAndFooter() {\\r\\n+    Options options = new Options();\\r\\n+    HelpFormatter formatter = new HelpFormatter();\\r\\n+    String header = \\\"  Header1\\\\n  Header2\\\";\\r\\n+    String footer = \\\"  Footer1\\\\n  Footer2\\\";\\r\\n+    StringWriter out = new StringWriter();\\r\\n+    formatter.printHelp(new PrintWriter(out), 80, \\\"foobar\\\", header, options, 2, 2, footer, true);\\r\\n+    assertEquals(\\\"usage: foobar\\\" + EOL + \\\"  Header1\\\" + EOL + \\\"  Header2\\\" + EOL + \\\"\\\" + EOL + \\\"  Footer1\\\" + EOL + \\\"  Footer2\\\" + EOL, out.toString());\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\test\java\org\apache\commons\cli\HelpFormatterTest.java	testOptionWithoutShortFormat	org.apache.commons.cli.HelpFormatterTest.testOptionWithoutShortFormat()	200	218	1	[{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"\""},{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"\""},{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,11 +1,11 @@\\n @Test\\r\\n public void testOptionWithoutShortFormat() {\\r\\n-    Options options = new Options();\\r\\n+    final Options options = new Options();\\r\\n     options.addOption(new Option(\\\"a\\\", \\\"aaa\\\", false, \\\"aaaaaaa\\\"));\\r\\n     options.addOption(new Option(null, \\\"bbb\\\", false, \\\"bbbbbbb\\\"));\\r\\n     options.addOption(new Option(\\\"c\\\", null, false, \\\"ccccccc\\\"));\\r\\n-    HelpFormatter formatter = new HelpFormatter();\\r\\n-    StringWriter out = new StringWriter();\\r\\n+    final HelpFormatter formatter = new HelpFormatter();\\r\\n+    final StringWriter out = new StringWriter();\\r\\n     formatter.printHelp(new PrintWriter(out), 80, \\\"foobar\\\", \\\"\\\", options, 2, 2, \\\"\\\", true);\\r\\n     assertEquals(\\\"usage: foobar [-a] [--bbb] [-c]\\\" + EOL + \\\"  -a,--aaa  aaaaaaa\\\" + EOL + \\\"     --bbb  bbbbbbb\\\" + EOL + \\\"  -c        ccccccc\\\" + EOL, out.toString());\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"tn@apache.org","authorName":"Thomas Neidhart","commitYear":"2013","diff":"\"@@ -1,10 +1,11 @@\\n+@Test\\r\\n public void testOptionWithoutShortFormat() {\\r\\n     Options options = new Options();\\r\\n     options.addOption(new Option(\\\"a\\\", \\\"aaa\\\", false, \\\"aaaaaaa\\\"));\\r\\n     options.addOption(new Option(null, \\\"bbb\\\", false, \\\"bbbbbbb\\\"));\\r\\n     options.addOption(new Option(\\\"c\\\", null, false, \\\"ccccccc\\\"));\\r\\n     HelpFormatter formatter = new HelpFormatter();\\r\\n     StringWriter out = new StringWriter();\\r\\n     formatter.printHelp(new PrintWriter(out), 80, \\\"foobar\\\", \\\"\\\", options, 2, 2, \\\"\\\", true);\\r\\n     assertEquals(\\\"usage: foobar [-a] [--bbb] [-c]\\\" + EOL + \\\"  -a,--aaa  aaaaaaa\\\" + EOL + \\\"     --bbb  bbbbbbb\\\" + EOL + \\\"  -c        ccccccc\\\" + EOL, out.toString());\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2008","diff":"\"@@ -0,0 +1,10 @@\\n+public void testOptionWithoutShortFormat() {\\r\\n+    Options options = new Options();\\r\\n+    options.addOption(new Option(\\\"a\\\", \\\"aaa\\\", false, \\\"aaaaaaa\\\"));\\r\\n+    options.addOption(new Option(null, \\\"bbb\\\", false, \\\"bbbbbbb\\\"));\\r\\n+    options.addOption(new Option(\\\"c\\\", null, false, \\\"ccccccc\\\"));\\r\\n+    HelpFormatter formatter = new HelpFormatter();\\r\\n+    StringWriter out = new StringWriter();\\r\\n+    formatter.printHelp(new PrintWriter(out), 80, \\\"foobar\\\", \\\"\\\", options, 2, 2, \\\"\\\", true);\\r\\n+    assertEquals(\\\"usage: foobar [-a] [--bbb] [-c]\\\" + EOL + \\\"  -a,--aaa  aaaaaaa\\\" + EOL + \\\"     --bbb  bbbbbbb\\\" + EOL + \\\"  -c        ccccccc\\\" + EOL, out.toString());\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\test\java\org\apache\commons\cli\HelpFormatterTest.java	testOptionWithoutShortFormat2	org.apache.commons.cli.HelpFormatterTest.testOptionWithoutShortFormat2()	221	293	1	[{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2023","diff":"\"@@ -1,27 +1,27 @@\\n @Test\\r\\n public void testOptionWithoutShortFormat2() {\\r\\n     final Option help = new Option(\\\"h\\\", \\\"help\\\", false, \\\"print this message\\\");\\r\\n     final Option version = new Option(\\\"v\\\", \\\"version\\\", false, \\\"print version information\\\");\\r\\n     final Option newRun = new Option(\\\"n\\\", \\\"new\\\", false, \\\"Create NLT cache entries only for new items\\\");\\r\\n     final Option trackerRun = new Option(\\\"t\\\", \\\"tracker\\\", false, \\\"Create NLT cache entries only for tracker items\\\");\\r\\n     final Option timeLimit = Option.builder(\\\"l\\\").longOpt(\\\"limit\\\").hasArg().valueSeparator().desc(\\\"Set time limit for execution, in mintues\\\").build();\\r\\n     final Option age = Option.builder(\\\"a\\\").longOpt(\\\"age\\\").hasArg().valueSeparator().desc(\\\"Age (in days) of cache item before being recomputed\\\").build();\\r\\n     final Option server = Option.builder(\\\"s\\\").longOpt(\\\"server\\\").hasArg().valueSeparator().desc(\\\"The NLT server address\\\").build();\\r\\n     final Option numResults = Option.builder(\\\"r\\\").longOpt(\\\"results\\\").hasArg().valueSeparator().desc(\\\"Number of results per item\\\").build();\\r\\n     final Option configFile = Option.builder().longOpt(\\\"config\\\").hasArg().valueSeparator().desc(\\\"Use the specified configuration file\\\").build();\\r\\n     final Options mOptions = new Options();\\r\\n     mOptions.addOption(help);\\r\\n     mOptions.addOption(version);\\r\\n     mOptions.addOption(newRun);\\r\\n     mOptions.addOption(trackerRun);\\r\\n     mOptions.addOption(timeLimit);\\r\\n     mOptions.addOption(age);\\r\\n     mOptions.addOption(server);\\r\\n     mOptions.addOption(numResults);\\r\\n     mOptions.addOption(configFile);\\r\\n     final HelpFormatter formatter = new HelpFormatter();\\r\\n-    final String eol = System.getProperty(\\\"line.separator\\\");\\r\\n+    final String eol = System.lineSeparator();\\r\\n     final StringWriter out = new StringWriter();\\r\\n     formatter.printHelp(new PrintWriter(out), 80, \\\"commandline\\\", \\\"header\\\", mOptions, 2, 2, \\\"footer\\\", true);\\r\\n     assertEquals(\\\"usage: commandline [-a <arg>] [--config <arg>] [-h] [-l <arg>] [-n] [-r <arg>]\\\" + eol + \\\"       [-s <arg>] [-t] [-v]\\\" + eol + \\\"header\\\" + eol + \\\"  -a,--age <arg>      Age (in days) of cache item before being recomputed\\\" + eol + \\\"     --config <arg>   Use the specified configuration file\\\" + eol + \\\"  -h,--help           print this message\\\" + eol + \\\"  -l,--limit <arg>    Set time limit for execution, in mintues\\\" + eol + \\\"  -n,--new            Create NLT cache entries only for new items\\\" + eol + \\\"  -r,--results <arg>  Number of results per item\\\" + eol + \\\"  -s,--server <arg>   The NLT server address\\\" + eol + \\\"  -t,--tracker        Create NLT cache entries only for tracker items\\\" + eol + \\\"  -v,--version        print version information\\\" + eol + \\\"footer\\\" + eol, out.toString());\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"\""},{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"@@ -1,27 +1,27 @@\\n @Test\\r\\n public void testOptionWithoutShortFormat2() {\\r\\n     final Option help = new Option(\\\"h\\\", \\\"help\\\", false, \\\"print this message\\\");\\r\\n     final Option version = new Option(\\\"v\\\", \\\"version\\\", false, \\\"print version information\\\");\\r\\n     final Option newRun = new Option(\\\"n\\\", \\\"new\\\", false, \\\"Create NLT cache entries only for new items\\\");\\r\\n     final Option trackerRun = new Option(\\\"t\\\", \\\"tracker\\\", false, \\\"Create NLT cache entries only for tracker items\\\");\\r\\n     final Option timeLimit = Option.builder(\\\"l\\\").longOpt(\\\"limit\\\").hasArg().valueSeparator().desc(\\\"Set time limit for execution, in mintues\\\").build();\\r\\n     final Option age = Option.builder(\\\"a\\\").longOpt(\\\"age\\\").hasArg().valueSeparator().desc(\\\"Age (in days) of cache item before being recomputed\\\").build();\\r\\n     final Option server = Option.builder(\\\"s\\\").longOpt(\\\"server\\\").hasArg().valueSeparator().desc(\\\"The NLT server address\\\").build();\\r\\n     final Option numResults = Option.builder(\\\"r\\\").longOpt(\\\"results\\\").hasArg().valueSeparator().desc(\\\"Number of results per item\\\").build();\\r\\n     final Option configFile = Option.builder().longOpt(\\\"config\\\").hasArg().valueSeparator().desc(\\\"Use the specified configuration file\\\").build();\\r\\n     final Options mOptions = new Options();\\r\\n     mOptions.addOption(help);\\r\\n     mOptions.addOption(version);\\r\\n     mOptions.addOption(newRun);\\r\\n     mOptions.addOption(trackerRun);\\r\\n     mOptions.addOption(timeLimit);\\r\\n     mOptions.addOption(age);\\r\\n     mOptions.addOption(server);\\r\\n     mOptions.addOption(numResults);\\r\\n     mOptions.addOption(configFile);\\r\\n     final HelpFormatter formatter = new HelpFormatter();\\r\\n-    final String EOL = System.getProperty(\\\"line.separator\\\");\\r\\n+    final String eol = System.getProperty(\\\"line.separator\\\");\\r\\n     final StringWriter out = new StringWriter();\\r\\n     formatter.printHelp(new PrintWriter(out), 80, \\\"commandline\\\", \\\"header\\\", mOptions, 2, 2, \\\"footer\\\", true);\\r\\n-    assertEquals(\\\"usage: commandline [-a <arg>] [--config <arg>] [-h] [-l <arg>] [-n] [-r <arg>]\\\" + EOL + \\\"       [-s <arg>] [-t] [-v]\\\" + EOL + \\\"header\\\" + EOL + \\\"  -a,--age <arg>      Age (in days) of cache item before being recomputed\\\" + EOL + \\\"     --config <arg>   Use the specified configuration file\\\" + EOL + \\\"  -h,--help           print this message\\\" + EOL + \\\"  -l,--limit <arg>    Set time limit for execution, in mintues\\\" + EOL + \\\"  -n,--new            Create NLT cache entries only for new items\\\" + EOL + \\\"  -r,--results <arg>  Number of results per item\\\" + EOL + \\\"  -s,--server <arg>   The NLT server address\\\" + EOL + \\\"  -t,--tracker        Create NLT cache entries only for tracker items\\\" + EOL + \\\"  -v,--version        print version information\\\" + EOL + \\\"footer\\\" + EOL, out.toString());\\r\\n+    assertEquals(\\\"usage: commandline [-a <arg>] [--config <arg>] [-h] [-l <arg>] [-n] [-r <arg>]\\\" + eol + \\\"       [-s <arg>] [-t] [-v]\\\" + eol + \\\"header\\\" + eol + \\\"  -a,--age <arg>      Age (in days) of cache item before being recomputed\\\" + eol + \\\"     --config <arg>   Use the specified configuration file\\\" + eol + \\\"  -h,--help           print this message\\\" + eol + \\\"  -l,--limit <arg>    Set time limit for execution, in mintues\\\" + eol + \\\"  -n,--new            Create NLT cache entries only for new items\\\" + eol + \\\"  -r,--results <arg>  Number of results per item\\\" + eol + \\\"  -s,--server <arg>   The NLT server address\\\" + eol + \\\"  -t,--tracker        Create NLT cache entries only for tracker items\\\" + eol + \\\"  -v,--version        print version information\\\" + eol + \\\"footer\\\" + eol, out.toString());\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2019","diff":"\"\""},{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,27 +1,27 @@\\n @Test\\r\\n public void testOptionWithoutShortFormat2() {\\r\\n-    Option help = new Option(\\\"h\\\", \\\"help\\\", false, \\\"print this message\\\");\\r\\n-    Option version = new Option(\\\"v\\\", \\\"version\\\", false, \\\"print version information\\\");\\r\\n-    Option newRun = new Option(\\\"n\\\", \\\"new\\\", false, \\\"Create NLT cache entries only for new items\\\");\\r\\n-    Option trackerRun = new Option(\\\"t\\\", \\\"tracker\\\", false, \\\"Create NLT cache entries only for tracker items\\\");\\r\\n-    Option timeLimit = Option.builder(\\\"l\\\").longOpt(\\\"limit\\\").hasArg().valueSeparator().desc(\\\"Set time limit for execution, in mintues\\\").build();\\r\\n-    Option age = Option.builder(\\\"a\\\").longOpt(\\\"age\\\").hasArg().valueSeparator().desc(\\\"Age (in days) of cache item before being recomputed\\\").build();\\r\\n-    Option server = Option.builder(\\\"s\\\").longOpt(\\\"server\\\").hasArg().valueSeparator().desc(\\\"The NLT server address\\\").build();\\r\\n-    Option numResults = Option.builder(\\\"r\\\").longOpt(\\\"results\\\").hasArg().valueSeparator().desc(\\\"Number of results per item\\\").build();\\r\\n-    Option configFile = Option.builder().longOpt(\\\"config\\\").hasArg().valueSeparator().desc(\\\"Use the specified configuration file\\\").build();\\r\\n-    Options mOptions = new Options();\\r\\n+    final Option help = new Option(\\\"h\\\", \\\"help\\\", false, \\\"print this message\\\");\\r\\n+    final Option version = new Option(\\\"v\\\", \\\"version\\\", false, \\\"print version information\\\");\\r\\n+    final Option newRun = new Option(\\\"n\\\", \\\"new\\\", false, \\\"Create NLT cache entries only for new items\\\");\\r\\n+    final Option trackerRun = new Option(\\\"t\\\", \\\"tracker\\\", false, \\\"Create NLT cache entries only for tracker items\\\");\\r\\n+    final Option timeLimit = Option.builder(\\\"l\\\").longOpt(\\\"limit\\\").hasArg().valueSeparator().desc(\\\"Set time limit for execution, in mintues\\\").build();\\r\\n+    final Option age = Option.builder(\\\"a\\\").longOpt(\\\"age\\\").hasArg().valueSeparator().desc(\\\"Age (in days) of cache item before being recomputed\\\").build();\\r\\n+    final Option server = Option.builder(\\\"s\\\").longOpt(\\\"server\\\").hasArg().valueSeparator().desc(\\\"The NLT server address\\\").build();\\r\\n+    final Option numResults = Option.builder(\\\"r\\\").longOpt(\\\"results\\\").hasArg().valueSeparator().desc(\\\"Number of results per item\\\").build();\\r\\n+    final Option configFile = Option.builder().longOpt(\\\"config\\\").hasArg().valueSeparator().desc(\\\"Use the specified configuration file\\\").build();\\r\\n+    final Options mOptions = new Options();\\r\\n     mOptions.addOption(help);\\r\\n     mOptions.addOption(version);\\r\\n     mOptions.addOption(newRun);\\r\\n     mOptions.addOption(trackerRun);\\r\\n     mOptions.addOption(timeLimit);\\r\\n     mOptions.addOption(age);\\r\\n     mOptions.addOption(server);\\r\\n     mOptions.addOption(numResults);\\r\\n     mOptions.addOption(configFile);\\r\\n-    HelpFormatter formatter = new HelpFormatter();\\r\\n+    final HelpFormatter formatter = new HelpFormatter();\\r\\n     final String EOL = System.getProperty(\\\"line.separator\\\");\\r\\n-    StringWriter out = new StringWriter();\\r\\n+    final StringWriter out = new StringWriter();\\r\\n     formatter.printHelp(new PrintWriter(out), 80, \\\"commandline\\\", \\\"header\\\", mOptions, 2, 2, \\\"footer\\\", true);\\r\\n     assertEquals(\\\"usage: commandline [-a <arg>] [--config <arg>] [-h] [-l <arg>] [-n] [-r <arg>]\\\" + EOL + \\\"       [-s <arg>] [-t] [-v]\\\" + EOL + \\\"header\\\" + EOL + \\\"  -a,--age <arg>      Age (in days) of cache item before being recomputed\\\" + EOL + \\\"     --config <arg>   Use the specified configuration file\\\" + EOL + \\\"  -h,--help           print this message\\\" + EOL + \\\"  -l,--limit <arg>    Set time limit for execution, in mintues\\\" + EOL + \\\"  -n,--new            Create NLT cache entries only for new items\\\" + EOL + \\\"  -r,--results <arg>  Number of results per item\\\" + EOL + \\\"  -s,--server <arg>   The NLT server address\\\" + EOL + \\\"  -t,--tracker        Create NLT cache entries only for tracker items\\\" + EOL + \\\"  -v,--version        print version information\\\" + EOL + \\\"footer\\\" + EOL, out.toString());\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"tn@apache.org","authorName":"Thomas Neidhart","commitYear":"2013","diff":"\"@@ -1,27 +1,27 @@\\n @Test\\r\\n public void testOptionWithoutShortFormat2() {\\r\\n     Option help = new Option(\\\"h\\\", \\\"help\\\", false, \\\"print this message\\\");\\r\\n     Option version = new Option(\\\"v\\\", \\\"version\\\", false, \\\"print version information\\\");\\r\\n     Option newRun = new Option(\\\"n\\\", \\\"new\\\", false, \\\"Create NLT cache entries only for new items\\\");\\r\\n     Option trackerRun = new Option(\\\"t\\\", \\\"tracker\\\", false, \\\"Create NLT cache entries only for tracker items\\\");\\r\\n-    Option timeLimit = OptionBuilder.withLongOpt(\\\"limit\\\").hasArg().withValueSeparator().withDescription(\\\"Set time limit for execution, in mintues\\\").create(\\\"l\\\");\\r\\n-    Option age = OptionBuilder.withLongOpt(\\\"age\\\").hasArg().withValueSeparator().withDescription(\\\"Age (in days) of cache item before being recomputed\\\").create(\\\"a\\\");\\r\\n-    Option server = OptionBuilder.withLongOpt(\\\"server\\\").hasArg().withValueSeparator().withDescription(\\\"The NLT server address\\\").create(\\\"s\\\");\\r\\n-    Option numResults = OptionBuilder.withLongOpt(\\\"results\\\").hasArg().withValueSeparator().withDescription(\\\"Number of results per item\\\").create(\\\"r\\\");\\r\\n-    Option configFile = OptionBuilder.withLongOpt(\\\"config\\\").hasArg().withValueSeparator().withDescription(\\\"Use the specified configuration file\\\").create();\\r\\n+    Option timeLimit = Option.builder(\\\"l\\\").longOpt(\\\"limit\\\").hasArg().valueSeparator().desc(\\\"Set time limit for execution, in mintues\\\").build();\\r\\n+    Option age = Option.builder(\\\"a\\\").longOpt(\\\"age\\\").hasArg().valueSeparator().desc(\\\"Age (in days) of cache item before being recomputed\\\").build();\\r\\n+    Option server = Option.builder(\\\"s\\\").longOpt(\\\"server\\\").hasArg().valueSeparator().desc(\\\"The NLT server address\\\").build();\\r\\n+    Option numResults = Option.builder(\\\"r\\\").longOpt(\\\"results\\\").hasArg().valueSeparator().desc(\\\"Number of results per item\\\").build();\\r\\n+    Option configFile = Option.builder().longOpt(\\\"config\\\").hasArg().valueSeparator().desc(\\\"Use the specified configuration file\\\").build();\\r\\n     Options mOptions = new Options();\\r\\n     mOptions.addOption(help);\\r\\n     mOptions.addOption(version);\\r\\n     mOptions.addOption(newRun);\\r\\n     mOptions.addOption(trackerRun);\\r\\n     mOptions.addOption(timeLimit);\\r\\n     mOptions.addOption(age);\\r\\n     mOptions.addOption(server);\\r\\n     mOptions.addOption(numResults);\\r\\n     mOptions.addOption(configFile);\\r\\n     HelpFormatter formatter = new HelpFormatter();\\r\\n     final String EOL = System.getProperty(\\\"line.separator\\\");\\r\\n     StringWriter out = new StringWriter();\\r\\n     formatter.printHelp(new PrintWriter(out), 80, \\\"commandline\\\", \\\"header\\\", mOptions, 2, 2, \\\"footer\\\", true);\\r\\n     assertEquals(\\\"usage: commandline [-a <arg>] [--config <arg>] [-h] [-l <arg>] [-n] [-r <arg>]\\\" + EOL + \\\"       [-s <arg>] [-t] [-v]\\\" + EOL + \\\"header\\\" + EOL + \\\"  -a,--age <arg>      Age (in days) of cache item before being recomputed\\\" + EOL + \\\"     --config <arg>   Use the specified configuration file\\\" + EOL + \\\"  -h,--help           print this message\\\" + EOL + \\\"  -l,--limit <arg>    Set time limit for execution, in mintues\\\" + EOL + \\\"  -n,--new            Create NLT cache entries only for new items\\\" + EOL + \\\"  -r,--results <arg>  Number of results per item\\\" + EOL + \\\"  -s,--server <arg>   The NLT server address\\\" + EOL + \\\"  -t,--tracker        Create NLT cache entries only for tracker items\\\" + EOL + \\\"  -v,--version        print version information\\\" + EOL + \\\"footer\\\" + EOL, out.toString());\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"tn@apache.org","authorName":"Thomas Neidhart","commitYear":"2013","diff":"\"@@ -1,26 +1,27 @@\\n+@Test\\r\\n public void testOptionWithoutShortFormat2() {\\r\\n     Option help = new Option(\\\"h\\\", \\\"help\\\", false, \\\"print this message\\\");\\r\\n     Option version = new Option(\\\"v\\\", \\\"version\\\", false, \\\"print version information\\\");\\r\\n     Option newRun = new Option(\\\"n\\\", \\\"new\\\", false, \\\"Create NLT cache entries only for new items\\\");\\r\\n     Option trackerRun = new Option(\\\"t\\\", \\\"tracker\\\", false, \\\"Create NLT cache entries only for tracker items\\\");\\r\\n     Option timeLimit = OptionBuilder.withLongOpt(\\\"limit\\\").hasArg().withValueSeparator().withDescription(\\\"Set time limit for execution, in mintues\\\").create(\\\"l\\\");\\r\\n     Option age = OptionBuilder.withLongOpt(\\\"age\\\").hasArg().withValueSeparator().withDescription(\\\"Age (in days) of cache item before being recomputed\\\").create(\\\"a\\\");\\r\\n     Option server = OptionBuilder.withLongOpt(\\\"server\\\").hasArg().withValueSeparator().withDescription(\\\"The NLT server address\\\").create(\\\"s\\\");\\r\\n     Option numResults = OptionBuilder.withLongOpt(\\\"results\\\").hasArg().withValueSeparator().withDescription(\\\"Number of results per item\\\").create(\\\"r\\\");\\r\\n     Option configFile = OptionBuilder.withLongOpt(\\\"config\\\").hasArg().withValueSeparator().withDescription(\\\"Use the specified configuration file\\\").create();\\r\\n     Options mOptions = new Options();\\r\\n     mOptions.addOption(help);\\r\\n     mOptions.addOption(version);\\r\\n     mOptions.addOption(newRun);\\r\\n     mOptions.addOption(trackerRun);\\r\\n     mOptions.addOption(timeLimit);\\r\\n     mOptions.addOption(age);\\r\\n     mOptions.addOption(server);\\r\\n     mOptions.addOption(numResults);\\r\\n     mOptions.addOption(configFile);\\r\\n     HelpFormatter formatter = new HelpFormatter();\\r\\n     final String EOL = System.getProperty(\\\"line.separator\\\");\\r\\n     StringWriter out = new StringWriter();\\r\\n     formatter.printHelp(new PrintWriter(out), 80, \\\"commandline\\\", \\\"header\\\", mOptions, 2, 2, \\\"footer\\\", true);\\r\\n     assertEquals(\\\"usage: commandline [-a <arg>] [--config <arg>] [-h] [-l <arg>] [-n] [-r <arg>]\\\" + EOL + \\\"       [-s <arg>] [-t] [-v]\\\" + EOL + \\\"header\\\" + EOL + \\\"  -a,--age <arg>      Age (in days) of cache item before being recomputed\\\" + EOL + \\\"     --config <arg>   Use the specified configuration file\\\" + EOL + \\\"  -h,--help           print this message\\\" + EOL + \\\"  -l,--limit <arg>    Set time limit for execution, in mintues\\\" + EOL + \\\"  -n,--new            Create NLT cache entries only for new items\\\" + EOL + \\\"  -r,--results <arg>  Number of results per item\\\" + EOL + \\\"  -s,--server <arg>   The NLT server address\\\" + EOL + \\\"  -t,--tracker        Create NLT cache entries only for tracker items\\\" + EOL + \\\"  -v,--version        print version information\\\" + EOL + \\\"footer\\\" + EOL, out.toString());\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2008","diff":"\"@@ -0,0 +1,26 @@\\n+public void testOptionWithoutShortFormat2() {\\r\\n+    Option help = new Option(\\\"h\\\", \\\"help\\\", false, \\\"print this message\\\");\\r\\n+    Option version = new Option(\\\"v\\\", \\\"version\\\", false, \\\"print version information\\\");\\r\\n+    Option newRun = new Option(\\\"n\\\", \\\"new\\\", false, \\\"Create NLT cache entries only for new items\\\");\\r\\n+    Option trackerRun = new Option(\\\"t\\\", \\\"tracker\\\", false, \\\"Create NLT cache entries only for tracker items\\\");\\r\\n+    Option timeLimit = OptionBuilder.withLongOpt(\\\"limit\\\").hasArg().withValueSeparator().withDescription(\\\"Set time limit for execution, in mintues\\\").create(\\\"l\\\");\\r\\n+    Option age = OptionBuilder.withLongOpt(\\\"age\\\").hasArg().withValueSeparator().withDescription(\\\"Age (in days) of cache item before being recomputed\\\").create(\\\"a\\\");\\r\\n+    Option server = OptionBuilder.withLongOpt(\\\"server\\\").hasArg().withValueSeparator().withDescription(\\\"The NLT server address\\\").create(\\\"s\\\");\\r\\n+    Option numResults = OptionBuilder.withLongOpt(\\\"results\\\").hasArg().withValueSeparator().withDescription(\\\"Number of results per item\\\").create(\\\"r\\\");\\r\\n+    Option configFile = OptionBuilder.withLongOpt(\\\"config\\\").hasArg().withValueSeparator().withDescription(\\\"Use the specified configuration file\\\").create();\\r\\n+    Options mOptions = new Options();\\r\\n+    mOptions.addOption(help);\\r\\n+    mOptions.addOption(version);\\r\\n+    mOptions.addOption(newRun);\\r\\n+    mOptions.addOption(trackerRun);\\r\\n+    mOptions.addOption(timeLimit);\\r\\n+    mOptions.addOption(age);\\r\\n+    mOptions.addOption(server);\\r\\n+    mOptions.addOption(numResults);\\r\\n+    mOptions.addOption(configFile);\\r\\n+    HelpFormatter formatter = new HelpFormatter();\\r\\n+    final String EOL = System.getProperty(\\\"line.separator\\\");\\r\\n+    StringWriter out = new StringWriter();\\r\\n+    formatter.printHelp(new PrintWriter(out), 80, \\\"commandline\\\", \\\"header\\\", mOptions, 2, 2, \\\"footer\\\", true);\\r\\n+    assertEquals(\\\"usage: commandline [-a <arg>] [--config <arg>] [-h] [-l <arg>] [-n] [-r <arg>]\\\" + EOL + \\\"       [-s <arg>] [-t] [-v]\\\" + EOL + \\\"header\\\" + EOL + \\\"  -a,--age <arg>      Age (in days) of cache item before being recomputed\\\" + EOL + \\\"     --config <arg>   Use the specified configuration file\\\" + EOL + \\\"  -h,--help           print this message\\\" + EOL + \\\"  -l,--limit <arg>    Set time limit for execution, in mintues\\\" + EOL + \\\"  -n,--new            Create NLT cache entries only for new items\\\" + EOL + \\\"  -r,--results <arg>  Number of results per item\\\" + EOL + \\\"  -s,--server <arg>   The NLT server address\\\" + EOL + \\\"  -t,--tracker        Create NLT cache entries only for tracker items\\\" + EOL + \\\"  -v,--version        print version information\\\" + EOL + \\\"footer\\\" + EOL, out.toString());\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\test\java\org\apache\commons\cli\HelpFormatterTest.java	testPrintHelpNewlineFooter	org.apache.commons.cli.HelpFormatterTest.testPrintHelpNewlineFooter()	296	320	1	[{"authorEmail":"jakub.jakub.nowak@gmail.com","authorName":"Jakub Nowak","commitYear":"2021","diff":"\"@@ -0,0 +1,12 @@\\n+@Test\\r\\n+public void testPrintHelpNewlineFooter() {\\r\\n+    final HelpFormatter formatter = new HelpFormatter();\\r\\n+    final ByteArrayOutputStream out = new ByteArrayOutputStream();\\r\\n+    final PrintWriter pw = new PrintWriter(out);\\r\\n+    final Options options = new Options();\\r\\n+    options.addOption(\\\"a\\\", \\\"b\\\");\\r\\n+    formatter.printHelp(pw, 80, \\\"test\\\" + EOL, \\\"header\\\" + EOL, options, 0, 0, EOL);\\r\\n+    final String expected = \\\"usage: test\\\" + EOL + \\\"header\\\" + EOL + \\\"-ab\\\" + EOL + EOL;\\r\\n+    pw.flush();\\r\\n+    assertEquals(\\\"footer newline\\\", expected, out.toString());\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\test\java\org\apache\commons\cli\HelpFormatterTest.java	testPrintHelpNewlineHeader	org.apache.commons.cli.HelpFormatterTest.testPrintHelpNewlineHeader()	323	347	1	[{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"@@ -1,12 +1,12 @@\\n @Test\\r\\n public void testPrintHelpNewlineHeader() {\\r\\n     final HelpFormatter formatter = new HelpFormatter();\\r\\n     final ByteArrayOutputStream out = new ByteArrayOutputStream();\\r\\n     final PrintWriter pw = new PrintWriter(out);\\r\\n     final Options options = new Options();\\r\\n     options.addOption(\\\"a\\\", \\\"b\\\");\\r\\n     formatter.printHelp(pw, 80, \\\"test\\\" + EOL, EOL, options, 0, 0, \\\"footer\\\" + EOL);\\r\\n-    String expected = \\\"usage: test\\\" + EOL + EOL + \\\"-ab\\\" + EOL + \\\"footer\\\" + EOL;\\r\\n+    final String expected = \\\"usage: test\\\" + EOL + EOL + \\\"-ab\\\" + EOL + \\\"footer\\\" + EOL;\\r\\n     pw.flush();\\r\\n     assertEquals(\\\"header newline\\\", expected, out.toString());\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jakub.jakub.nowak@gmail.com","authorName":"Jakub Nowak","commitYear":"2021","diff":"\"@@ -0,0 +1,12 @@\\n+@Test\\r\\n+public void testPrintHelpNewlineHeader() {\\r\\n+    final HelpFormatter formatter = new HelpFormatter();\\r\\n+    final ByteArrayOutputStream out = new ByteArrayOutputStream();\\r\\n+    final PrintWriter pw = new PrintWriter(out);\\r\\n+    final Options options = new Options();\\r\\n+    options.addOption(\\\"a\\\", \\\"b\\\");\\r\\n+    formatter.printHelp(pw, 80, \\\"test\\\" + EOL, EOL, options, 0, 0, \\\"footer\\\" + EOL);\\r\\n+    String expected = \\\"usage: test\\\" + EOL + EOL + \\\"-ab\\\" + EOL + \\\"footer\\\" + EOL;\\r\\n+    pw.flush();\\r\\n+    assertEquals(\\\"header newline\\\", expected, out.toString());\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\test\java\org\apache\commons\cli\HelpFormatterTest.java	testPrintHelpWithEmptySyntax	org.apache.commons.cli.HelpFormatterTest.testPrintHelpWithEmptySyntax()	350	365	5	[{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"\""},{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,14 +1,14 @@\\n @Test\\r\\n public void testPrintHelpWithEmptySyntax() {\\r\\n-    HelpFormatter formatter = new HelpFormatter();\\r\\n+    final HelpFormatter formatter = new HelpFormatter();\\r\\n     try {\\r\\n         formatter.printHelp(null, new Options());\\r\\n         fail(\\\"null command line syntax should be rejected\\\");\\r\\n-    } catch (IllegalArgumentException e) {\\r\\n+    } catch (final IllegalArgumentException e) {\\r\\n     }\\r\\n     try {\\r\\n         formatter.printHelp(\\\"\\\", new Options());\\r\\n         fail(\\\"empty command line syntax should be rejected\\\");\\r\\n-    } catch (IllegalArgumentException e) {\\r\\n+    } catch (final IllegalArgumentException e) {\\r\\n     }\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"tn@apache.org","authorName":"Thomas Neidhart","commitYear":"2013","diff":"\"@@ -1,13 +1,14 @@\\n+@Test\\r\\n public void testPrintHelpWithEmptySyntax() {\\r\\n     HelpFormatter formatter = new HelpFormatter();\\r\\n     try {\\r\\n         formatter.printHelp(null, new Options());\\r\\n         fail(\\\"null command line syntax should be rejected\\\");\\r\\n     } catch (IllegalArgumentException e) {\\r\\n     }\\r\\n     try {\\r\\n         formatter.printHelp(\\\"\\\", new Options());\\r\\n         fail(\\\"empty command line syntax should be rejected\\\");\\r\\n     } catch (IllegalArgumentException e) {\\r\\n     }\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2008","diff":"\"@@ -0,0 +1,13 @@\\n+public void testPrintHelpWithEmptySyntax() {\\r\\n+    HelpFormatter formatter = new HelpFormatter();\\r\\n+    try {\\r\\n+        formatter.printHelp(null, new Options());\\r\\n+        fail(\\\"null command line syntax should be rejected\\\");\\r\\n+    } catch (IllegalArgumentException e) {\\r\\n+    }\\r\\n+    try {\\r\\n+        formatter.printHelp(\\\"\\\", new Options());\\r\\n+        fail(\\\"empty command line syntax should be rejected\\\");\\r\\n+    } catch (IllegalArgumentException e) {\\r\\n+    }\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\test\java\org\apache\commons\cli\HelpFormatterTest.java	testPrintOptionGroupUsage	org.apache.commons.cli.HelpFormatterTest.testPrintOptionGroupUsage()	368	383	1	[{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,13 +1,13 @@\\n @Test\\r\\n public void testPrintOptionGroupUsage() {\\r\\n-    OptionGroup group = new OptionGroup();\\r\\n+    final OptionGroup group = new OptionGroup();\\r\\n     group.addOption(Option.builder(\\\"a\\\").build());\\r\\n     group.addOption(Option.builder(\\\"b\\\").build());\\r\\n     group.addOption(Option.builder(\\\"c\\\").build());\\r\\n-    Options options = new Options();\\r\\n+    final Options options = new Options();\\r\\n     options.addOptionGroup(group);\\r\\n-    StringWriter out = new StringWriter();\\r\\n-    HelpFormatter formatter = new HelpFormatter();\\r\\n+    final StringWriter out = new StringWriter();\\r\\n+    final HelpFormatter formatter = new HelpFormatter();\\r\\n     formatter.printUsage(new PrintWriter(out), 80, \\\"app\\\", options);\\r\\n     assertEquals(\\\"usage: app [-a | -b | -c]\\\" + EOL, out.toString());\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"tn@apache.org","authorName":"Thomas Neidhart","commitYear":"2013","diff":"\"@@ -1,13 +1,13 @@\\n @Test\\r\\n public void testPrintOptionGroupUsage() {\\r\\n     OptionGroup group = new OptionGroup();\\r\\n-    group.addOption(OptionBuilder.create(\\\"a\\\"));\\r\\n-    group.addOption(OptionBuilder.create(\\\"b\\\"));\\r\\n-    group.addOption(OptionBuilder.create(\\\"c\\\"));\\r\\n+    group.addOption(Option.builder(\\\"a\\\").build());\\r\\n+    group.addOption(Option.builder(\\\"b\\\").build());\\r\\n+    group.addOption(Option.builder(\\\"c\\\").build());\\r\\n     Options options = new Options();\\r\\n     options.addOptionGroup(group);\\r\\n     StringWriter out = new StringWriter();\\r\\n     HelpFormatter formatter = new HelpFormatter();\\r\\n     formatter.printUsage(new PrintWriter(out), 80, \\\"app\\\", options);\\r\\n     assertEquals(\\\"usage: app [-a | -b | -c]\\\" + EOL, out.toString());\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"tn@apache.org","authorName":"Thomas Neidhart","commitYear":"2013","diff":"\"@@ -1,12 +1,13 @@\\n+@Test\\r\\n public void testPrintOptionGroupUsage() {\\r\\n     OptionGroup group = new OptionGroup();\\r\\n     group.addOption(OptionBuilder.create(\\\"a\\\"));\\r\\n     group.addOption(OptionBuilder.create(\\\"b\\\"));\\r\\n     group.addOption(OptionBuilder.create(\\\"c\\\"));\\r\\n     Options options = new Options();\\r\\n     options.addOptionGroup(group);\\r\\n     StringWriter out = new StringWriter();\\r\\n     HelpFormatter formatter = new HelpFormatter();\\r\\n     formatter.printUsage(new PrintWriter(out), 80, \\\"app\\\", options);\\r\\n     assertEquals(\\\"usage: app [-a | -b | -c]\\\" + EOL, out.toString());\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2008","diff":"\"@@ -0,0 +1,12 @@\\n+public void testPrintOptionGroupUsage() {\\r\\n+    OptionGroup group = new OptionGroup();\\r\\n+    group.addOption(OptionBuilder.create(\\\"a\\\"));\\r\\n+    group.addOption(OptionBuilder.create(\\\"b\\\"));\\r\\n+    group.addOption(OptionBuilder.create(\\\"c\\\"));\\r\\n+    Options options = new Options();\\r\\n+    options.addOptionGroup(group);\\r\\n+    StringWriter out = new StringWriter();\\r\\n+    HelpFormatter formatter = new HelpFormatter();\\r\\n+    formatter.printUsage(new PrintWriter(out), 80, \\\"app\\\", options);\\r\\n+    assertEquals(\\\"usage: app [-a | -b | -c]\\\" + EOL, out.toString());\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\test\java\org\apache\commons\cli\HelpFormatterTest.java	testPrintOptions	org.apache.commons.cli.HelpFormatterTest.testPrintOptions()	386	425	1	[{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"@@ -1,35 +1,35 @@\\n @Test\\r\\n-public void testPrintOptions() throws Exception {\\r\\n+public void testPrintOptions() {\\r\\n     final StringBuffer sb = new StringBuffer();\\r\\n     final HelpFormatter hf = new HelpFormatter();\\r\\n     final int leftPad = 1;\\r\\n     final int descPad = 3;\\r\\n     final String lpad = hf.createPadding(leftPad);\\r\\n     final String dpad = hf.createPadding(descPad);\\r\\n     Options options;\\r\\n     String expected;\\r\\n     options = new Options().addOption(\\\"a\\\", false, \\\"aaaa aaaa aaaa aaaa aaaa\\\");\\r\\n     expected = lpad + \\\"-a\\\" + dpad + \\\"aaaa aaaa aaaa aaaa aaaa\\\";\\r\\n     hf.renderOptions(sb, 60, options, leftPad, descPad);\\r\\n     assertEquals(\\\"simple non-wrapped option\\\", expected, sb.toString());\\r\\n     int nextLineTabStop = leftPad + descPad + \\\"-a\\\".length();\\r\\n     expected = lpad + \\\"-a\\\" + dpad + \\\"aaaa aaaa aaaa\\\" + EOL + hf.createPadding(nextLineTabStop) + \\\"aaaa aaaa\\\";\\r\\n     sb.setLength(0);\\r\\n     hf.renderOptions(sb, nextLineTabStop + 17, options, leftPad, descPad);\\r\\n     assertEquals(\\\"simple wrapped option\\\", expected, sb.toString());\\r\\n     options = new Options().addOption(\\\"a\\\", \\\"aaa\\\", false, \\\"dddd dddd dddd dddd\\\");\\r\\n     expected = lpad + \\\"-a,--aaa\\\" + dpad + \\\"dddd dddd dddd dddd\\\";\\r\\n     sb.setLength(0);\\r\\n     hf.renderOptions(sb, 60, options, leftPad, descPad);\\r\\n     assertEquals(\\\"long non-wrapped option\\\", expected, sb.toString());\\r\\n     nextLineTabStop = leftPad + descPad + \\\"-a,--aaa\\\".length();\\r\\n     expected = lpad + \\\"-a,--aaa\\\" + dpad + \\\"dddd dddd\\\" + EOL + hf.createPadding(nextLineTabStop) + \\\"dddd dddd\\\";\\r\\n     sb.setLength(0);\\r\\n     hf.renderOptions(sb, 25, options, leftPad, descPad);\\r\\n     assertEquals(\\\"long wrapped option\\\", expected, sb.toString());\\r\\n     options = new Options().addOption(\\\"a\\\", \\\"aaa\\\", false, \\\"dddd dddd dddd dddd\\\").addOption(\\\"b\\\", false, \\\"feeee eeee eeee eeee\\\");\\r\\n     expected = lpad + \\\"-a,--aaa\\\" + dpad + \\\"dddd dddd\\\" + EOL + hf.createPadding(nextLineTabStop) + \\\"dddd dddd\\\" + EOL + lpad + \\\"-b      \\\" + dpad + \\\"feeee eeee\\\" + EOL + hf.createPadding(nextLineTabStop) + \\\"eeee eeee\\\";\\r\\n     sb.setLength(0);\\r\\n     hf.renderOptions(sb, 25, options, leftPad, descPad);\\r\\n     assertEquals(\\\"multiple wrapped options\\\", expected, sb.toString());\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"\""},{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2020","diff":"\"@@ -1,35 +1,35 @@\\n @Test\\r\\n public void testPrintOptions() throws Exception {\\r\\n     final StringBuffer sb = new StringBuffer();\\r\\n     final HelpFormatter hf = new HelpFormatter();\\r\\n     final int leftPad = 1;\\r\\n     final int descPad = 3;\\r\\n     final String lpad = hf.createPadding(leftPad);\\r\\n     final String dpad = hf.createPadding(descPad);\\r\\n-    Options options = null;\\r\\n-    String expected = null;\\r\\n+    Options options;\\r\\n+    String expected;\\r\\n     options = new Options().addOption(\\\"a\\\", false, \\\"aaaa aaaa aaaa aaaa aaaa\\\");\\r\\n     expected = lpad + \\\"-a\\\" + dpad + \\\"aaaa aaaa aaaa aaaa aaaa\\\";\\r\\n     hf.renderOptions(sb, 60, options, leftPad, descPad);\\r\\n     assertEquals(\\\"simple non-wrapped option\\\", expected, sb.toString());\\r\\n     int nextLineTabStop = leftPad + descPad + \\\"-a\\\".length();\\r\\n     expected = lpad + \\\"-a\\\" + dpad + \\\"aaaa aaaa aaaa\\\" + EOL + hf.createPadding(nextLineTabStop) + \\\"aaaa aaaa\\\";\\r\\n     sb.setLength(0);\\r\\n     hf.renderOptions(sb, nextLineTabStop + 17, options, leftPad, descPad);\\r\\n     assertEquals(\\\"simple wrapped option\\\", expected, sb.toString());\\r\\n     options = new Options().addOption(\\\"a\\\", \\\"aaa\\\", false, \\\"dddd dddd dddd dddd\\\");\\r\\n     expected = lpad + \\\"-a,--aaa\\\" + dpad + \\\"dddd dddd dddd dddd\\\";\\r\\n     sb.setLength(0);\\r\\n     hf.renderOptions(sb, 60, options, leftPad, descPad);\\r\\n     assertEquals(\\\"long non-wrapped option\\\", expected, sb.toString());\\r\\n     nextLineTabStop = leftPad + descPad + \\\"-a,--aaa\\\".length();\\r\\n     expected = lpad + \\\"-a,--aaa\\\" + dpad + \\\"dddd dddd\\\" + EOL + hf.createPadding(nextLineTabStop) + \\\"dddd dddd\\\";\\r\\n     sb.setLength(0);\\r\\n     hf.renderOptions(sb, 25, options, leftPad, descPad);\\r\\n     assertEquals(\\\"long wrapped option\\\", expected, sb.toString());\\r\\n     options = new Options().addOption(\\\"a\\\", \\\"aaa\\\", false, \\\"dddd dddd dddd dddd\\\").addOption(\\\"b\\\", false, \\\"feeee eeee eeee eeee\\\");\\r\\n     expected = lpad + \\\"-a,--aaa\\\" + dpad + \\\"dddd dddd\\\" + EOL + hf.createPadding(nextLineTabStop) + \\\"dddd dddd\\\" + EOL + lpad + \\\"-b      \\\" + dpad + \\\"feeee eeee\\\" + EOL + hf.createPadding(nextLineTabStop) + \\\"eeee eeee\\\";\\r\\n     sb.setLength(0);\\r\\n     hf.renderOptions(sb, 25, options, leftPad, descPad);\\r\\n     assertEquals(\\\"multiple wrapped options\\\", expected, sb.toString());\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,35 +1,35 @@\\n @Test\\r\\n public void testPrintOptions() throws Exception {\\r\\n-    StringBuffer sb = new StringBuffer();\\r\\n-    HelpFormatter hf = new HelpFormatter();\\r\\n+    final StringBuffer sb = new StringBuffer();\\r\\n+    final HelpFormatter hf = new HelpFormatter();\\r\\n     final int leftPad = 1;\\r\\n     final int descPad = 3;\\r\\n     final String lpad = hf.createPadding(leftPad);\\r\\n     final String dpad = hf.createPadding(descPad);\\r\\n     Options options = null;\\r\\n     String expected = null;\\r\\n     options = new Options().addOption(\\\"a\\\", false, \\\"aaaa aaaa aaaa aaaa aaaa\\\");\\r\\n     expected = lpad + \\\"-a\\\" + dpad + \\\"aaaa aaaa aaaa aaaa aaaa\\\";\\r\\n     hf.renderOptions(sb, 60, options, leftPad, descPad);\\r\\n     assertEquals(\\\"simple non-wrapped option\\\", expected, sb.toString());\\r\\n     int nextLineTabStop = leftPad + descPad + \\\"-a\\\".length();\\r\\n     expected = lpad + \\\"-a\\\" + dpad + \\\"aaaa aaaa aaaa\\\" + EOL + hf.createPadding(nextLineTabStop) + \\\"aaaa aaaa\\\";\\r\\n     sb.setLength(0);\\r\\n     hf.renderOptions(sb, nextLineTabStop + 17, options, leftPad, descPad);\\r\\n     assertEquals(\\\"simple wrapped option\\\", expected, sb.toString());\\r\\n     options = new Options().addOption(\\\"a\\\", \\\"aaa\\\", false, \\\"dddd dddd dddd dddd\\\");\\r\\n     expected = lpad + \\\"-a,--aaa\\\" + dpad + \\\"dddd dddd dddd dddd\\\";\\r\\n     sb.setLength(0);\\r\\n     hf.renderOptions(sb, 60, options, leftPad, descPad);\\r\\n     assertEquals(\\\"long non-wrapped option\\\", expected, sb.toString());\\r\\n     nextLineTabStop = leftPad + descPad + \\\"-a,--aaa\\\".length();\\r\\n     expected = lpad + \\\"-a,--aaa\\\" + dpad + \\\"dddd dddd\\\" + EOL + hf.createPadding(nextLineTabStop) + \\\"dddd dddd\\\";\\r\\n     sb.setLength(0);\\r\\n     hf.renderOptions(sb, 25, options, leftPad, descPad);\\r\\n     assertEquals(\\\"long wrapped option\\\", expected, sb.toString());\\r\\n     options = new Options().addOption(\\\"a\\\", \\\"aaa\\\", false, \\\"dddd dddd dddd dddd\\\").addOption(\\\"b\\\", false, \\\"feeee eeee eeee eeee\\\");\\r\\n     expected = lpad + \\\"-a,--aaa\\\" + dpad + \\\"dddd dddd\\\" + EOL + hf.createPadding(nextLineTabStop) + \\\"dddd dddd\\\" + EOL + lpad + \\\"-b      \\\" + dpad + \\\"feeee eeee\\\" + EOL + hf.createPadding(nextLineTabStop) + \\\"eeee eeee\\\";\\r\\n     sb.setLength(0);\\r\\n     hf.renderOptions(sb, 25, options, leftPad, descPad);\\r\\n     assertEquals(\\\"multiple wrapped options\\\", expected, sb.toString());\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"tn@apache.org","authorName":"Thomas Neidhart","commitYear":"2013","diff":"\"@@ -1,34 +1,35 @@\\n+@Test\\r\\n public void testPrintOptions() throws Exception {\\r\\n     StringBuffer sb = new StringBuffer();\\r\\n     HelpFormatter hf = new HelpFormatter();\\r\\n     final int leftPad = 1;\\r\\n     final int descPad = 3;\\r\\n     final String lpad = hf.createPadding(leftPad);\\r\\n     final String dpad = hf.createPadding(descPad);\\r\\n     Options options = null;\\r\\n     String expected = null;\\r\\n     options = new Options().addOption(\\\"a\\\", false, \\\"aaaa aaaa aaaa aaaa aaaa\\\");\\r\\n     expected = lpad + \\\"-a\\\" + dpad + \\\"aaaa aaaa aaaa aaaa aaaa\\\";\\r\\n     hf.renderOptions(sb, 60, options, leftPad, descPad);\\r\\n     assertEquals(\\\"simple non-wrapped option\\\", expected, sb.toString());\\r\\n     int nextLineTabStop = leftPad + descPad + \\\"-a\\\".length();\\r\\n     expected = lpad + \\\"-a\\\" + dpad + \\\"aaaa aaaa aaaa\\\" + EOL + hf.createPadding(nextLineTabStop) + \\\"aaaa aaaa\\\";\\r\\n     sb.setLength(0);\\r\\n     hf.renderOptions(sb, nextLineTabStop + 17, options, leftPad, descPad);\\r\\n     assertEquals(\\\"simple wrapped option\\\", expected, sb.toString());\\r\\n     options = new Options().addOption(\\\"a\\\", \\\"aaa\\\", false, \\\"dddd dddd dddd dddd\\\");\\r\\n     expected = lpad + \\\"-a,--aaa\\\" + dpad + \\\"dddd dddd dddd dddd\\\";\\r\\n     sb.setLength(0);\\r\\n     hf.renderOptions(sb, 60, options, leftPad, descPad);\\r\\n     assertEquals(\\\"long non-wrapped option\\\", expected, sb.toString());\\r\\n     nextLineTabStop = leftPad + descPad + \\\"-a,--aaa\\\".length();\\r\\n     expected = lpad + \\\"-a,--aaa\\\" + dpad + \\\"dddd dddd\\\" + EOL + hf.createPadding(nextLineTabStop) + \\\"dddd dddd\\\";\\r\\n     sb.setLength(0);\\r\\n     hf.renderOptions(sb, 25, options, leftPad, descPad);\\r\\n     assertEquals(\\\"long wrapped option\\\", expected, sb.toString());\\r\\n     options = new Options().addOption(\\\"a\\\", \\\"aaa\\\", false, \\\"dddd dddd dddd dddd\\\").addOption(\\\"b\\\", false, \\\"feeee eeee eeee eeee\\\");\\r\\n     expected = lpad + \\\"-a,--aaa\\\" + dpad + \\\"dddd dddd\\\" + EOL + hf.createPadding(nextLineTabStop) + \\\"dddd dddd\\\" + EOL + lpad + \\\"-b      \\\" + dpad + \\\"feeee eeee\\\" + EOL + hf.createPadding(nextLineTabStop) + \\\"eeee eeee\\\";\\r\\n     sb.setLength(0);\\r\\n     hf.renderOptions(sb, 25, options, leftPad, descPad);\\r\\n     assertEquals(\\\"multiple wrapped options\\\", expected, sb.toString());\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2010","diff":"\"@@ -1,34 +1,34 @@\\n public void testPrintOptions() throws Exception {\\r\\n     StringBuffer sb = new StringBuffer();\\r\\n     HelpFormatter hf = new HelpFormatter();\\r\\n     final int leftPad = 1;\\r\\n     final int descPad = 3;\\r\\n     final String lpad = hf.createPadding(leftPad);\\r\\n     final String dpad = hf.createPadding(descPad);\\r\\n     Options options = null;\\r\\n     String expected = null;\\r\\n     options = new Options().addOption(\\\"a\\\", false, \\\"aaaa aaaa aaaa aaaa aaaa\\\");\\r\\n     expected = lpad + \\\"-a\\\" + dpad + \\\"aaaa aaaa aaaa aaaa aaaa\\\";\\r\\n     hf.renderOptions(sb, 60, options, leftPad, descPad);\\r\\n     assertEquals(\\\"simple non-wrapped option\\\", expected, sb.toString());\\r\\n     int nextLineTabStop = leftPad + descPad + \\\"-a\\\".length();\\r\\n-    expected = lpad + \\\"-a\\\" + dpad + \\\"aaaa aaaa aaaa\\\" + hf.getNewLine() + hf.createPadding(nextLineTabStop) + \\\"aaaa aaaa\\\";\\r\\n+    expected = lpad + \\\"-a\\\" + dpad + \\\"aaaa aaaa aaaa\\\" + EOL + hf.createPadding(nextLineTabStop) + \\\"aaaa aaaa\\\";\\r\\n     sb.setLength(0);\\r\\n     hf.renderOptions(sb, nextLineTabStop + 17, options, leftPad, descPad);\\r\\n     assertEquals(\\\"simple wrapped option\\\", expected, sb.toString());\\r\\n     options = new Options().addOption(\\\"a\\\", \\\"aaa\\\", false, \\\"dddd dddd dddd dddd\\\");\\r\\n     expected = lpad + \\\"-a,--aaa\\\" + dpad + \\\"dddd dddd dddd dddd\\\";\\r\\n     sb.setLength(0);\\r\\n     hf.renderOptions(sb, 60, options, leftPad, descPad);\\r\\n     assertEquals(\\\"long non-wrapped option\\\", expected, sb.toString());\\r\\n     nextLineTabStop = leftPad + descPad + \\\"-a,--aaa\\\".length();\\r\\n-    expected = lpad + \\\"-a,--aaa\\\" + dpad + \\\"dddd dddd\\\" + hf.getNewLine() + hf.createPadding(nextLineTabStop) + \\\"dddd dddd\\\";\\r\\n+    expected = lpad + \\\"-a,--aaa\\\" + dpad + \\\"dddd dddd\\\" + EOL + hf.createPadding(nextLineTabStop) + \\\"dddd dddd\\\";\\r\\n     sb.setLength(0);\\r\\n     hf.renderOptions(sb, 25, options, leftPad, descPad);\\r\\n     assertEquals(\\\"long wrapped option\\\", expected, sb.toString());\\r\\n     options = new Options().addOption(\\\"a\\\", \\\"aaa\\\", false, \\\"dddd dddd dddd dddd\\\").addOption(\\\"b\\\", false, \\\"feeee eeee eeee eeee\\\");\\r\\n-    expected = lpad + \\\"-a,--aaa\\\" + dpad + \\\"dddd dddd\\\" + hf.getNewLine() + hf.createPadding(nextLineTabStop) + \\\"dddd dddd\\\" + hf.getNewLine() + lpad + \\\"-b      \\\" + dpad + \\\"feeee eeee\\\" + hf.getNewLine() + hf.createPadding(nextLineTabStop) + \\\"eeee eeee\\\";\\r\\n+    expected = lpad + \\\"-a,--aaa\\\" + dpad + \\\"dddd dddd\\\" + EOL + hf.createPadding(nextLineTabStop) + \\\"dddd dddd\\\" + EOL + lpad + \\\"-b      \\\" + dpad + \\\"feeee eeee\\\" + EOL + hf.createPadding(nextLineTabStop) + \\\"eeee eeee\\\";\\r\\n     sb.setLength(0);\\r\\n     hf.renderOptions(sb, 25, options, leftPad, descPad);\\r\\n     assertEquals(\\\"multiple wrapped options\\\", expected, sb.toString());\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2008","diff":"\"\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -1,34 +1,34 @@\\n public void testPrintOptions() throws Exception {\\r\\n     StringBuffer sb = new StringBuffer();\\r\\n     HelpFormatter hf = new HelpFormatter();\\r\\n     final int leftPad = 1;\\r\\n     final int descPad = 3;\\r\\n     final String lpad = hf.createPadding(leftPad);\\r\\n     final String dpad = hf.createPadding(descPad);\\r\\n     Options options = null;\\r\\n     String expected = null;\\r\\n     options = new Options().addOption(\\\"a\\\", false, \\\"aaaa aaaa aaaa aaaa aaaa\\\");\\r\\n     expected = lpad + \\\"-a\\\" + dpad + \\\"aaaa aaaa aaaa aaaa aaaa\\\";\\r\\n     hf.renderOptions(sb, 60, options, leftPad, descPad);\\r\\n     assertEquals(\\\"simple non-wrapped option\\\", expected, sb.toString());\\r\\n     int nextLineTabStop = leftPad + descPad + \\\"-a\\\".length();\\r\\n-    expected = lpad + \\\"-a\\\" + dpad + \\\"aaaa aaaa aaaa\\\" + hf.defaultNewLine + hf.createPadding(nextLineTabStop) + \\\"aaaa aaaa\\\";\\r\\n+    expected = lpad + \\\"-a\\\" + dpad + \\\"aaaa aaaa aaaa\\\" + hf.getNewLine() + hf.createPadding(nextLineTabStop) + \\\"aaaa aaaa\\\";\\r\\n     sb.setLength(0);\\r\\n     hf.renderOptions(sb, nextLineTabStop + 17, options, leftPad, descPad);\\r\\n     assertEquals(\\\"simple wrapped option\\\", expected, sb.toString());\\r\\n     options = new Options().addOption(\\\"a\\\", \\\"aaa\\\", false, \\\"dddd dddd dddd dddd\\\");\\r\\n     expected = lpad + \\\"-a,--aaa\\\" + dpad + \\\"dddd dddd dddd dddd\\\";\\r\\n     sb.setLength(0);\\r\\n     hf.renderOptions(sb, 60, options, leftPad, descPad);\\r\\n     assertEquals(\\\"long non-wrapped option\\\", expected, sb.toString());\\r\\n     nextLineTabStop = leftPad + descPad + \\\"-a,--aaa\\\".length();\\r\\n-    expected = lpad + \\\"-a,--aaa\\\" + dpad + \\\"dddd dddd\\\" + hf.defaultNewLine + hf.createPadding(nextLineTabStop) + \\\"dddd dddd\\\";\\r\\n+    expected = lpad + \\\"-a,--aaa\\\" + dpad + \\\"dddd dddd\\\" + hf.getNewLine() + hf.createPadding(nextLineTabStop) + \\\"dddd dddd\\\";\\r\\n     sb.setLength(0);\\r\\n     hf.renderOptions(sb, 25, options, leftPad, descPad);\\r\\n     assertEquals(\\\"long wrapped option\\\", expected, sb.toString());\\r\\n     options = new Options().addOption(\\\"a\\\", \\\"aaa\\\", false, \\\"dddd dddd dddd dddd\\\").addOption(\\\"b\\\", false, \\\"feeee eeee eeee eeee\\\");\\r\\n-    expected = lpad + \\\"-a,--aaa\\\" + dpad + \\\"dddd dddd\\\" + hf.defaultNewLine + hf.createPadding(nextLineTabStop) + \\\"dddd dddd\\\" + hf.defaultNewLine + lpad + \\\"-b      \\\" + dpad + \\\"feeee eeee\\\" + hf.defaultNewLine + hf.createPadding(nextLineTabStop) + \\\"eeee eeee\\\";\\r\\n+    expected = lpad + \\\"-a,--aaa\\\" + dpad + \\\"dddd dddd\\\" + hf.getNewLine() + hf.createPadding(nextLineTabStop) + \\\"dddd dddd\\\" + hf.getNewLine() + lpad + \\\"-b      \\\" + dpad + \\\"feeee eeee\\\" + hf.getNewLine() + hf.createPadding(nextLineTabStop) + \\\"eeee eeee\\\";\\r\\n     sb.setLength(0);\\r\\n     hf.renderOptions(sb, 25, options, leftPad, descPad);\\r\\n     assertEquals(\\\"multiple wrapped options\\\", expected, sb.toString());\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -1,34 +1,34 @@\\n public void testPrintOptions() throws Exception {\\r\\n     StringBuffer sb = new StringBuffer();\\r\\n     HelpFormatter hf = new HelpFormatter();\\r\\n     final int leftPad = 1;\\r\\n     final int descPad = 3;\\r\\n     final String lpad = hf.createPadding(leftPad);\\r\\n     final String dpad = hf.createPadding(descPad);\\r\\n     Options options = null;\\r\\n     String expected = null;\\r\\n-    options = new Options().addOption('a', false, \\\"aaaa aaaa aaaa aaaa aaaa\\\");\\r\\n+    options = new Options().addOption(\\\"a\\\", false, \\\"aaaa aaaa aaaa aaaa aaaa\\\");\\r\\n     expected = lpad + \\\"-a\\\" + dpad + \\\"aaaa aaaa aaaa aaaa aaaa\\\";\\r\\n     hf.renderOptions(sb, 60, options, leftPad, descPad);\\r\\n     assertEquals(\\\"simple non-wrapped option\\\", expected, sb.toString());\\r\\n     int nextLineTabStop = leftPad + descPad + \\\"-a\\\".length();\\r\\n     expected = lpad + \\\"-a\\\" + dpad + \\\"aaaa aaaa aaaa\\\" + hf.defaultNewLine + hf.createPadding(nextLineTabStop) + \\\"aaaa aaaa\\\";\\r\\n     sb.setLength(0);\\r\\n     hf.renderOptions(sb, nextLineTabStop + 17, options, leftPad, descPad);\\r\\n     assertEquals(\\\"simple wrapped option\\\", expected, sb.toString());\\r\\n-    options = new Options().addOption('a', \\\"aaa\\\", false, \\\"dddd dddd dddd dddd\\\");\\r\\n+    options = new Options().addOption(\\\"a\\\", \\\"aaa\\\", false, \\\"dddd dddd dddd dddd\\\");\\r\\n     expected = lpad + \\\"-a,--aaa\\\" + dpad + \\\"dddd dddd dddd dddd\\\";\\r\\n     sb.setLength(0);\\r\\n     hf.renderOptions(sb, 60, options, leftPad, descPad);\\r\\n     assertEquals(\\\"long non-wrapped option\\\", expected, sb.toString());\\r\\n     nextLineTabStop = leftPad + descPad + \\\"-a,--aaa\\\".length();\\r\\n     expected = lpad + \\\"-a,--aaa\\\" + dpad + \\\"dddd dddd\\\" + hf.defaultNewLine + hf.createPadding(nextLineTabStop) + \\\"dddd dddd\\\";\\r\\n     sb.setLength(0);\\r\\n     hf.renderOptions(sb, 25, options, leftPad, descPad);\\r\\n     assertEquals(\\\"long wrapped option\\\", expected, sb.toString());\\r\\n-    options = new Options().addOption('a', \\\"aaa\\\", false, \\\"dddd dddd dddd dddd\\\").addOption('b', false, \\\"feeee eeee eeee eeee\\\");\\r\\n+    options = new Options().addOption(\\\"a\\\", \\\"aaa\\\", false, \\\"dddd dddd dddd dddd\\\").addOption(\\\"b\\\", false, \\\"feeee eeee eeee eeee\\\");\\r\\n     expected = lpad + \\\"-a,--aaa\\\" + dpad + \\\"dddd dddd\\\" + hf.defaultNewLine + hf.createPadding(nextLineTabStop) + \\\"dddd dddd\\\" + hf.defaultNewLine + lpad + \\\"-b      \\\" + dpad + \\\"feeee eeee\\\" + hf.defaultNewLine + hf.createPadding(nextLineTabStop) + \\\"eeee eeee\\\";\\r\\n     sb.setLength(0);\\r\\n     hf.renderOptions(sb, 25, options, leftPad, descPad);\\r\\n     assertEquals(\\\"multiple wrapped options\\\", expected, sb.toString());\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jstrachan@apache.org","authorName":"James Strachan","commitYear":"2002","diff":"\"@@ -0,0 +1,34 @@\\n+public void testPrintOptions() throws Exception {\\r\\n+    StringBuffer sb = new StringBuffer();\\r\\n+    HelpFormatter hf = new HelpFormatter();\\r\\n+    final int leftPad = 1;\\r\\n+    final int descPad = 3;\\r\\n+    final String lpad = hf.createPadding(leftPad);\\r\\n+    final String dpad = hf.createPadding(descPad);\\r\\n+    Options options = null;\\r\\n+    String expected = null;\\r\\n+    options = new Options().addOption('a', false, \\\"aaaa aaaa aaaa aaaa aaaa\\\");\\r\\n+    expected = lpad + \\\"-a\\\" + dpad + \\\"aaaa aaaa aaaa aaaa aaaa\\\";\\r\\n+    hf.renderOptions(sb, 60, options, leftPad, descPad);\\r\\n+    assertEquals(\\\"simple non-wrapped option\\\", expected, sb.toString());\\r\\n+    int nextLineTabStop = leftPad + descPad + \\\"-a\\\".length();\\r\\n+    expected = lpad + \\\"-a\\\" + dpad + \\\"aaaa aaaa aaaa\\\" + hf.defaultNewLine + hf.createPadding(nextLineTabStop) + \\\"aaaa aaaa\\\";\\r\\n+    sb.setLength(0);\\r\\n+    hf.renderOptions(sb, nextLineTabStop + 17, options, leftPad, descPad);\\r\\n+    assertEquals(\\\"simple wrapped option\\\", expected, sb.toString());\\r\\n+    options = new Options().addOption('a', \\\"aaa\\\", false, \\\"dddd dddd dddd dddd\\\");\\r\\n+    expected = lpad + \\\"-a,--aaa\\\" + dpad + \\\"dddd dddd dddd dddd\\\";\\r\\n+    sb.setLength(0);\\r\\n+    hf.renderOptions(sb, 60, options, leftPad, descPad);\\r\\n+    assertEquals(\\\"long non-wrapped option\\\", expected, sb.toString());\\r\\n+    nextLineTabStop = leftPad + descPad + \\\"-a,--aaa\\\".length();\\r\\n+    expected = lpad + \\\"-a,--aaa\\\" + dpad + \\\"dddd dddd\\\" + hf.defaultNewLine + hf.createPadding(nextLineTabStop) + \\\"dddd dddd\\\";\\r\\n+    sb.setLength(0);\\r\\n+    hf.renderOptions(sb, 25, options, leftPad, descPad);\\r\\n+    assertEquals(\\\"long wrapped option\\\", expected, sb.toString());\\r\\n+    options = new Options().addOption('a', \\\"aaa\\\", false, \\\"dddd dddd dddd dddd\\\").addOption('b', false, \\\"feeee eeee eeee eeee\\\");\\r\\n+    expected = lpad + \\\"-a,--aaa\\\" + dpad + \\\"dddd dddd\\\" + hf.defaultNewLine + hf.createPadding(nextLineTabStop) + \\\"dddd dddd\\\" + hf.defaultNewLine + lpad + \\\"-b      \\\" + dpad + \\\"feeee eeee\\\" + hf.defaultNewLine + hf.createPadding(nextLineTabStop) + \\\"eeee eeee\\\";\\r\\n+    sb.setLength(0);\\r\\n+    hf.renderOptions(sb, 25, options, leftPad, descPad);\\r\\n+    assertEquals(\\\"multiple wrapped options\\\", expected, sb.toString());\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\test\java\org\apache\commons\cli\HelpFormatterTest.java	testPrintOptionWithEmptyArgNameUsage	org.apache.commons.cli.HelpFormatterTest.testPrintOptionWithEmptyArgNameUsage()	428	442	1	[{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,12 +1,12 @@\\n @Test\\r\\n public void testPrintOptionWithEmptyArgNameUsage() {\\r\\n-    Option option = new Option(\\\"f\\\", true, null);\\r\\n+    final Option option = new Option(\\\"f\\\", true, null);\\r\\n     option.setArgName(\\\"\\\");\\r\\n     option.setRequired(true);\\r\\n-    Options options = new Options();\\r\\n+    final Options options = new Options();\\r\\n     options.addOption(option);\\r\\n-    StringWriter out = new StringWriter();\\r\\n-    HelpFormatter formatter = new HelpFormatter();\\r\\n+    final StringWriter out = new StringWriter();\\r\\n+    final HelpFormatter formatter = new HelpFormatter();\\r\\n     formatter.printUsage(new PrintWriter(out), 80, \\\"app\\\", options);\\r\\n     assertEquals(\\\"usage: app -f\\\" + EOL, out.toString());\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"tn@apache.org","authorName":"Thomas Neidhart","commitYear":"2013","diff":"\"@@ -1,11 +1,12 @@\\n+@Test\\r\\n public void testPrintOptionWithEmptyArgNameUsage() {\\r\\n     Option option = new Option(\\\"f\\\", true, null);\\r\\n     option.setArgName(\\\"\\\");\\r\\n     option.setRequired(true);\\r\\n     Options options = new Options();\\r\\n     options.addOption(option);\\r\\n     StringWriter out = new StringWriter();\\r\\n     HelpFormatter formatter = new HelpFormatter();\\r\\n     formatter.printUsage(new PrintWriter(out), 80, \\\"app\\\", options);\\r\\n     assertEquals(\\\"usage: app -f\\\" + EOL, out.toString());\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2008","diff":"\"@@ -0,0 +1,11 @@\\n+public void testPrintOptionWithEmptyArgNameUsage() {\\r\\n+    Option option = new Option(\\\"f\\\", true, null);\\r\\n+    option.setArgName(\\\"\\\");\\r\\n+    option.setRequired(true);\\r\\n+    Options options = new Options();\\r\\n+    options.addOption(option);\\r\\n+    StringWriter out = new StringWriter();\\r\\n+    HelpFormatter formatter = new HelpFormatter();\\r\\n+    formatter.printUsage(new PrintWriter(out), 80, \\\"app\\\", options);\\r\\n+    assertEquals(\\\"usage: app -f\\\" + EOL, out.toString());\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\test\java\org\apache\commons\cli\HelpFormatterTest.java	testPrintRequiredOptionGroupUsage	org.apache.commons.cli.HelpFormatterTest.testPrintRequiredOptionGroupUsage()	445	461	1	[{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,14 +1,14 @@\\n @Test\\r\\n public void testPrintRequiredOptionGroupUsage() {\\r\\n-    OptionGroup group = new OptionGroup();\\r\\n+    final OptionGroup group = new OptionGroup();\\r\\n     group.addOption(Option.builder(\\\"a\\\").build());\\r\\n     group.addOption(Option.builder(\\\"b\\\").build());\\r\\n     group.addOption(Option.builder(\\\"c\\\").build());\\r\\n     group.setRequired(true);\\r\\n-    Options options = new Options();\\r\\n+    final Options options = new Options();\\r\\n     options.addOptionGroup(group);\\r\\n-    StringWriter out = new StringWriter();\\r\\n-    HelpFormatter formatter = new HelpFormatter();\\r\\n+    final StringWriter out = new StringWriter();\\r\\n+    final HelpFormatter formatter = new HelpFormatter();\\r\\n     formatter.printUsage(new PrintWriter(out), 80, \\\"app\\\", options);\\r\\n     assertEquals(\\\"usage: app -a | -b | -c\\\" + EOL, out.toString());\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"tn@apache.org","authorName":"Thomas Neidhart","commitYear":"2013","diff":"\"@@ -1,14 +1,14 @@\\n @Test\\r\\n public void testPrintRequiredOptionGroupUsage() {\\r\\n     OptionGroup group = new OptionGroup();\\r\\n-    group.addOption(OptionBuilder.create(\\\"a\\\"));\\r\\n-    group.addOption(OptionBuilder.create(\\\"b\\\"));\\r\\n-    group.addOption(OptionBuilder.create(\\\"c\\\"));\\r\\n+    group.addOption(Option.builder(\\\"a\\\").build());\\r\\n+    group.addOption(Option.builder(\\\"b\\\").build());\\r\\n+    group.addOption(Option.builder(\\\"c\\\").build());\\r\\n     group.setRequired(true);\\r\\n     Options options = new Options();\\r\\n     options.addOptionGroup(group);\\r\\n     StringWriter out = new StringWriter();\\r\\n     HelpFormatter formatter = new HelpFormatter();\\r\\n     formatter.printUsage(new PrintWriter(out), 80, \\\"app\\\", options);\\r\\n     assertEquals(\\\"usage: app -a | -b | -c\\\" + EOL, out.toString());\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"tn@apache.org","authorName":"Thomas Neidhart","commitYear":"2013","diff":"\"@@ -1,13 +1,14 @@\\n+@Test\\r\\n public void testPrintRequiredOptionGroupUsage() {\\r\\n     OptionGroup group = new OptionGroup();\\r\\n     group.addOption(OptionBuilder.create(\\\"a\\\"));\\r\\n     group.addOption(OptionBuilder.create(\\\"b\\\"));\\r\\n     group.addOption(OptionBuilder.create(\\\"c\\\"));\\r\\n     group.setRequired(true);\\r\\n     Options options = new Options();\\r\\n     options.addOptionGroup(group);\\r\\n     StringWriter out = new StringWriter();\\r\\n     HelpFormatter formatter = new HelpFormatter();\\r\\n     formatter.printUsage(new PrintWriter(out), 80, \\\"app\\\", options);\\r\\n     assertEquals(\\\"usage: app -a | -b | -c\\\" + EOL, out.toString());\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2008","diff":"\"@@ -0,0 +1,13 @@\\n+public void testPrintRequiredOptionGroupUsage() {\\r\\n+    OptionGroup group = new OptionGroup();\\r\\n+    group.addOption(OptionBuilder.create(\\\"a\\\"));\\r\\n+    group.addOption(OptionBuilder.create(\\\"b\\\"));\\r\\n+    group.addOption(OptionBuilder.create(\\\"c\\\"));\\r\\n+    group.setRequired(true);\\r\\n+    Options options = new Options();\\r\\n+    options.addOptionGroup(group);\\r\\n+    StringWriter out = new StringWriter();\\r\\n+    HelpFormatter formatter = new HelpFormatter();\\r\\n+    formatter.printUsage(new PrintWriter(out), 80, \\\"app\\\", options);\\r\\n+    assertEquals(\\\"usage: app -a | -b | -c\\\" + EOL, out.toString());\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\test\java\org\apache\commons\cli\HelpFormatterTest.java	testPrintSortedUsage	org.apache.commons.cli.HelpFormatterTest.testPrintSortedUsage()	465	478	1	[{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2023","diff":"\"@@ -1,18 +1,12 @@\\n @Test\\r\\n public void testPrintSortedUsage() {\\r\\n     final Options opts = new Options();\\r\\n     opts.addOption(new Option(\\\"a\\\", \\\"first\\\"));\\r\\n     opts.addOption(new Option(\\\"b\\\", \\\"second\\\"));\\r\\n     opts.addOption(new Option(\\\"c\\\", \\\"third\\\"));\\r\\n     final HelpFormatter helpFormatter = new HelpFormatter();\\r\\n-    helpFormatter.setOptionComparator(new Comparator<Option>() {\\r\\n-\\r\\n-        @Override\\r\\n-        public int compare(final Option opt1, final Option opt2) {\\r\\n-            return opt2.getKey().compareToIgnoreCase(opt1.getKey());\\r\\n-        }\\r\\n-    });\\r\\n+    helpFormatter.setOptionComparator((opt1, opt2) -> opt2.getKey().compareToIgnoreCase(opt1.getKey()));\\r\\n     final StringWriter out = new StringWriter();\\r\\n     helpFormatter.printUsage(new PrintWriter(out), 80, \\\"app\\\", opts);\\r\\n     assertEquals(\\\"usage: app [-c] [-b] [-a]\\\" + EOL, out.toString());\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"\""},{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2020","diff":"\"@@ -1,17 +1,18 @@\\n @Test\\r\\n public void testPrintSortedUsage() {\\r\\n     final Options opts = new Options();\\r\\n     opts.addOption(new Option(\\\"a\\\", \\\"first\\\"));\\r\\n     opts.addOption(new Option(\\\"b\\\", \\\"second\\\"));\\r\\n     opts.addOption(new Option(\\\"c\\\", \\\"third\\\"));\\r\\n     final HelpFormatter helpFormatter = new HelpFormatter();\\r\\n     helpFormatter.setOptionComparator(new Comparator<Option>() {\\r\\n \\r\\n+        @Override\\r\\n         public int compare(final Option opt1, final Option opt2) {\\r\\n             return opt2.getKey().compareToIgnoreCase(opt1.getKey());\\r\\n         }\\r\\n     });\\r\\n     final StringWriter out = new StringWriter();\\r\\n     helpFormatter.printUsage(new PrintWriter(out), 80, \\\"app\\\", opts);\\r\\n     assertEquals(\\\"usage: app [-c] [-b] [-a]\\\" + EOL, out.toString());\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,17 +1,17 @@\\n @Test\\r\\n public void testPrintSortedUsage() {\\r\\n     final Options opts = new Options();\\r\\n     opts.addOption(new Option(\\\"a\\\", \\\"first\\\"));\\r\\n     opts.addOption(new Option(\\\"b\\\", \\\"second\\\"));\\r\\n     opts.addOption(new Option(\\\"c\\\", \\\"third\\\"));\\r\\n     final HelpFormatter helpFormatter = new HelpFormatter();\\r\\n     helpFormatter.setOptionComparator(new Comparator<Option>() {\\r\\n \\r\\n-        public int compare(Option opt1, Option opt2) {\\r\\n+        public int compare(final Option opt1, final Option opt2) {\\r\\n             return opt2.getKey().compareToIgnoreCase(opt1.getKey());\\r\\n         }\\r\\n     });\\r\\n     final StringWriter out = new StringWriter();\\r\\n     helpFormatter.printUsage(new PrintWriter(out), 80, \\\"app\\\", opts);\\r\\n     assertEquals(\\\"usage: app [-c] [-b] [-a]\\\" + EOL, out.toString());\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,17 +1,17 @@\\n @Test\\r\\n public void testPrintSortedUsage() {\\r\\n-    Options opts = new Options();\\r\\n+    final Options opts = new Options();\\r\\n     opts.addOption(new Option(\\\"a\\\", \\\"first\\\"));\\r\\n     opts.addOption(new Option(\\\"b\\\", \\\"second\\\"));\\r\\n     opts.addOption(new Option(\\\"c\\\", \\\"third\\\"));\\r\\n-    HelpFormatter helpFormatter = new HelpFormatter();\\r\\n+    final HelpFormatter helpFormatter = new HelpFormatter();\\r\\n     helpFormatter.setOptionComparator(new Comparator<Option>() {\\r\\n \\r\\n         public int compare(Option opt1, Option opt2) {\\r\\n             return opt2.getKey().compareToIgnoreCase(opt1.getKey());\\r\\n         }\\r\\n     });\\r\\n-    StringWriter out = new StringWriter();\\r\\n+    final StringWriter out = new StringWriter();\\r\\n     helpFormatter.printUsage(new PrintWriter(out), 80, \\\"app\\\", opts);\\r\\n     assertEquals(\\\"usage: app [-c] [-b] [-a]\\\" + EOL, out.toString());\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"tn@apache.org","authorName":"Thomas Neidhart","commitYear":"2013","diff":"\"@@ -1,16 +1,17 @@\\n+@Test\\r\\n public void testPrintSortedUsage() {\\r\\n     Options opts = new Options();\\r\\n     opts.addOption(new Option(\\\"a\\\", \\\"first\\\"));\\r\\n     opts.addOption(new Option(\\\"b\\\", \\\"second\\\"));\\r\\n     opts.addOption(new Option(\\\"c\\\", \\\"third\\\"));\\r\\n     HelpFormatter helpFormatter = new HelpFormatter();\\r\\n     helpFormatter.setOptionComparator(new Comparator<Option>() {\\r\\n \\r\\n         public int compare(Option opt1, Option opt2) {\\r\\n             return opt2.getKey().compareToIgnoreCase(opt1.getKey());\\r\\n         }\\r\\n     });\\r\\n     StringWriter out = new StringWriter();\\r\\n     helpFormatter.printUsage(new PrintWriter(out), 80, \\\"app\\\", opts);\\r\\n     assertEquals(\\\"usage: app [-c] [-b] [-a]\\\" + EOL, out.toString());\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2011","diff":"\"@@ -1,18 +1,16 @@\\n public void testPrintSortedUsage() {\\r\\n     Options opts = new Options();\\r\\n     opts.addOption(new Option(\\\"a\\\", \\\"first\\\"));\\r\\n     opts.addOption(new Option(\\\"b\\\", \\\"second\\\"));\\r\\n     opts.addOption(new Option(\\\"c\\\", \\\"third\\\"));\\r\\n     HelpFormatter helpFormatter = new HelpFormatter();\\r\\n-    helpFormatter.setOptionComparator(new Comparator() {\\r\\n+    helpFormatter.setOptionComparator(new Comparator<Option>() {\\r\\n \\r\\n-        public int compare(Object o1, Object o2) {\\r\\n-            Option opt1 = (Option) o1;\\r\\n-            Option opt2 = (Option) o2;\\r\\n+        public int compare(Option opt1, Option opt2) {\\r\\n             return opt2.getKey().compareToIgnoreCase(opt1.getKey());\\r\\n         }\\r\\n     });\\r\\n     StringWriter out = new StringWriter();\\r\\n     helpFormatter.printUsage(new PrintWriter(out), 80, \\\"app\\\", opts);\\r\\n     assertEquals(\\\"usage: app [-c] [-b] [-a]\\\" + EOL, out.toString());\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2008","diff":"\"@@ -1,23 +1,18 @@\\n public void testPrintSortedUsage() {\\r\\n-    Option optionA = new Option(\\\"a\\\", \\\"first\\\");\\r\\n-    Option optionB = new Option(\\\"b\\\", \\\"second\\\");\\r\\n-    Option optionC = new Option(\\\"c\\\", \\\"third\\\");\\r\\n     Options opts = new Options();\\r\\n-    opts.addOption(optionA);\\r\\n-    opts.addOption(optionB);\\r\\n-    opts.addOption(optionC);\\r\\n+    opts.addOption(new Option(\\\"a\\\", \\\"first\\\"));\\r\\n+    opts.addOption(new Option(\\\"b\\\", \\\"second\\\"));\\r\\n+    opts.addOption(new Option(\\\"c\\\", \\\"third\\\"));\\r\\n     HelpFormatter helpFormatter = new HelpFormatter();\\r\\n     helpFormatter.setOptionComparator(new Comparator() {\\r\\n \\r\\n         public int compare(Object o1, Object o2) {\\r\\n             Option opt1 = (Option) o1;\\r\\n             Option opt2 = (Option) o2;\\r\\n             return opt2.getKey().compareToIgnoreCase(opt1.getKey());\\r\\n         }\\r\\n     });\\r\\n-    ByteArrayOutputStream bytesOut = new ByteArrayOutputStream();\\r\\n-    PrintWriter printWriter = new PrintWriter(bytesOut);\\r\\n-    helpFormatter.printUsage(printWriter, 80, \\\"app\\\", opts);\\r\\n-    printWriter.close();\\r\\n-    assertEquals(\\\"usage: app [-c] [-b] [-a]\\\" + EOL, bytesOut.toString());\\r\\n+    StringWriter out = new StringWriter();\\r\\n+    helpFormatter.printUsage(new PrintWriter(out), 80, \\\"app\\\", opts);\\r\\n+    assertEquals(\\\"usage: app [-c] [-b] [-a]\\\" + EOL, out.toString());\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"bayard@apache.org","authorName":"Henri Yandell","commitYear":"2008","diff":"\"@@ -0,0 +1,23 @@\\n+public void testPrintSortedUsage() {\\r\\n+    Option optionA = new Option(\\\"a\\\", \\\"first\\\");\\r\\n+    Option optionB = new Option(\\\"b\\\", \\\"second\\\");\\r\\n+    Option optionC = new Option(\\\"c\\\", \\\"third\\\");\\r\\n+    Options opts = new Options();\\r\\n+    opts.addOption(optionA);\\r\\n+    opts.addOption(optionB);\\r\\n+    opts.addOption(optionC);\\r\\n+    HelpFormatter helpFormatter = new HelpFormatter();\\r\\n+    helpFormatter.setOptionComparator(new Comparator() {\\r\\n+\\r\\n+        public int compare(Object o1, Object o2) {\\r\\n+            Option opt1 = (Option) o1;\\r\\n+            Option opt2 = (Option) o2;\\r\\n+            return opt2.getKey().compareToIgnoreCase(opt1.getKey());\\r\\n+        }\\r\\n+    });\\r\\n+    ByteArrayOutputStream bytesOut = new ByteArrayOutputStream();\\r\\n+    PrintWriter printWriter = new PrintWriter(bytesOut);\\r\\n+    helpFormatter.printUsage(printWriter, 80, \\\"app\\\", opts);\\r\\n+    printWriter.close();\\r\\n+    assertEquals(\\\"usage: app [-c] [-b] [-a]\\\" + EOL, bytesOut.toString());\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\test\java\org\apache\commons\cli\HelpFormatterTest.java	testPrintSortedUsageWithNullComparator	org.apache.commons.cli.HelpFormatterTest.testPrintSortedUsageWithNullComparator()	481	494	1	[{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,12 +1,12 @@\\n @Test\\r\\n public void testPrintSortedUsageWithNullComparator() {\\r\\n-    Options opts = new Options();\\r\\n+    final Options opts = new Options();\\r\\n     opts.addOption(new Option(\\\"c\\\", \\\"first\\\"));\\r\\n     opts.addOption(new Option(\\\"b\\\", \\\"second\\\"));\\r\\n     opts.addOption(new Option(\\\"a\\\", \\\"third\\\"));\\r\\n-    HelpFormatter helpFormatter = new HelpFormatter();\\r\\n+    final HelpFormatter helpFormatter = new HelpFormatter();\\r\\n     helpFormatter.setOptionComparator(null);\\r\\n-    StringWriter out = new StringWriter();\\r\\n+    final StringWriter out = new StringWriter();\\r\\n     helpFormatter.printUsage(new PrintWriter(out), 80, \\\"app\\\", opts);\\r\\n     assertEquals(\\\"usage: app [-c] [-b] [-a]\\\" + EOL, out.toString());\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"tn@apache.org","authorName":"Thomas Neidhart","commitYear":"2013","diff":"\"@@ -1,11 +1,12 @@\\n+@Test\\r\\n public void testPrintSortedUsageWithNullComparator() {\\r\\n     Options opts = new Options();\\r\\n     opts.addOption(new Option(\\\"c\\\", \\\"first\\\"));\\r\\n     opts.addOption(new Option(\\\"b\\\", \\\"second\\\"));\\r\\n     opts.addOption(new Option(\\\"a\\\", \\\"third\\\"));\\r\\n     HelpFormatter helpFormatter = new HelpFormatter();\\r\\n     helpFormatter.setOptionComparator(null);\\r\\n     StringWriter out = new StringWriter();\\r\\n     helpFormatter.printUsage(new PrintWriter(out), 80, \\\"app\\\", opts);\\r\\n     assertEquals(\\\"usage: app [-c] [-b] [-a]\\\" + EOL, out.toString());\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2011","diff":"\"@@ -1,11 +1,11 @@\\n public void testPrintSortedUsageWithNullComparator() {\\r\\n     Options opts = new Options();\\r\\n-    opts.addOption(new Option(\\\"a\\\", \\\"first\\\"));\\r\\n+    opts.addOption(new Option(\\\"c\\\", \\\"first\\\"));\\r\\n     opts.addOption(new Option(\\\"b\\\", \\\"second\\\"));\\r\\n-    opts.addOption(new Option(\\\"c\\\", \\\"third\\\"));\\r\\n+    opts.addOption(new Option(\\\"a\\\", \\\"third\\\"));\\r\\n     HelpFormatter helpFormatter = new HelpFormatter();\\r\\n     helpFormatter.setOptionComparator(null);\\r\\n     StringWriter out = new StringWriter();\\r\\n     helpFormatter.printUsage(new PrintWriter(out), 80, \\\"app\\\", opts);\\r\\n-    assertEquals(\\\"usage: app [-a] [-b] [-c]\\\" + EOL, out.toString());\\r\\n+    assertEquals(\\\"usage: app [-c] [-b] [-a]\\\" + EOL, out.toString());\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2008","diff":"\"@@ -0,0 +1,11 @@\\n+public void testPrintSortedUsageWithNullComparator() {\\r\\n+    Options opts = new Options();\\r\\n+    opts.addOption(new Option(\\\"a\\\", \\\"first\\\"));\\r\\n+    opts.addOption(new Option(\\\"b\\\", \\\"second\\\"));\\r\\n+    opts.addOption(new Option(\\\"c\\\", \\\"third\\\"));\\r\\n+    HelpFormatter helpFormatter = new HelpFormatter();\\r\\n+    helpFormatter.setOptionComparator(null);\\r\\n+    StringWriter out = new StringWriter();\\r\\n+    helpFormatter.printUsage(new PrintWriter(out), 80, \\\"app\\\", opts);\\r\\n+    assertEquals(\\\"usage: app [-a] [-b] [-c]\\\" + EOL, out.toString());\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\test\java\org\apache\commons\cli\HelpFormatterTest.java	testPrintUsage	org.apache.commons.cli.HelpFormatterTest.testPrintUsage()	499	513	2	[{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"@@ -1,16 +1,16 @@\\n @Test\\r\\n public void testPrintUsage() {\\r\\n     final Option optionA = new Option(\\\"a\\\", \\\"first\\\");\\r\\n     final Option optionB = new Option(\\\"b\\\", \\\"second\\\");\\r\\n     final Option optionC = new Option(\\\"c\\\", \\\"third\\\");\\r\\n     final Options opts = new Options();\\r\\n     opts.addOption(optionA);\\r\\n     opts.addOption(optionB);\\r\\n     opts.addOption(optionC);\\r\\n     final HelpFormatter helpFormatter = new HelpFormatter();\\r\\n     final ByteArrayOutputStream bytesOut = new ByteArrayOutputStream();\\r\\n-    try (final PrintWriter printWriter = new PrintWriter(bytesOut)) {\\r\\n+    try (PrintWriter printWriter = new PrintWriter(bytesOut)) {\\r\\n         helpFormatter.printUsage(printWriter, 80, \\\"app\\\", opts);\\r\\n     }\\r\\n     assertEquals(\\\"usage: app [-a] [-b] [-c]\\\" + EOL, bytesOut.toString());\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"@@ -1,16 +1,16 @@\\n @Test\\r\\n public void testPrintUsage() {\\r\\n     final Option optionA = new Option(\\\"a\\\", \\\"first\\\");\\r\\n     final Option optionB = new Option(\\\"b\\\", \\\"second\\\");\\r\\n     final Option optionC = new Option(\\\"c\\\", \\\"third\\\");\\r\\n     final Options opts = new Options();\\r\\n     opts.addOption(optionA);\\r\\n     opts.addOption(optionB);\\r\\n     opts.addOption(optionC);\\r\\n     final HelpFormatter helpFormatter = new HelpFormatter();\\r\\n     final ByteArrayOutputStream bytesOut = new ByteArrayOutputStream();\\r\\n-    final PrintWriter printWriter = new PrintWriter(bytesOut);\\r\\n-    helpFormatter.printUsage(printWriter, 80, \\\"app\\\", opts);\\r\\n-    printWriter.close();\\r\\n+    try (final PrintWriter printWriter = new PrintWriter(bytesOut)) {\\r\\n+        helpFormatter.printUsage(printWriter, 80, \\\"app\\\", opts);\\r\\n+    }\\r\\n     assertEquals(\\\"usage: app [-a] [-b] [-c]\\\" + EOL, bytesOut.toString());\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,16 +1,16 @@\\n @Test\\r\\n public void testPrintUsage() {\\r\\n-    Option optionA = new Option(\\\"a\\\", \\\"first\\\");\\r\\n-    Option optionB = new Option(\\\"b\\\", \\\"second\\\");\\r\\n-    Option optionC = new Option(\\\"c\\\", \\\"third\\\");\\r\\n-    Options opts = new Options();\\r\\n+    final Option optionA = new Option(\\\"a\\\", \\\"first\\\");\\r\\n+    final Option optionB = new Option(\\\"b\\\", \\\"second\\\");\\r\\n+    final Option optionC = new Option(\\\"c\\\", \\\"third\\\");\\r\\n+    final Options opts = new Options();\\r\\n     opts.addOption(optionA);\\r\\n     opts.addOption(optionB);\\r\\n     opts.addOption(optionC);\\r\\n-    HelpFormatter helpFormatter = new HelpFormatter();\\r\\n-    ByteArrayOutputStream bytesOut = new ByteArrayOutputStream();\\r\\n-    PrintWriter printWriter = new PrintWriter(bytesOut);\\r\\n+    final HelpFormatter helpFormatter = new HelpFormatter();\\r\\n+    final ByteArrayOutputStream bytesOut = new ByteArrayOutputStream();\\r\\n+    final PrintWriter printWriter = new PrintWriter(bytesOut);\\r\\n     helpFormatter.printUsage(printWriter, 80, \\\"app\\\", opts);\\r\\n     printWriter.close();\\r\\n     assertEquals(\\\"usage: app [-a] [-b] [-c]\\\" + EOL, bytesOut.toString());\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"tn@apache.org","authorName":"Thomas Neidhart","commitYear":"2013","diff":"\"@@ -1,15 +1,16 @@\\n+@Test\\r\\n public void testPrintUsage() {\\r\\n     Option optionA = new Option(\\\"a\\\", \\\"first\\\");\\r\\n     Option optionB = new Option(\\\"b\\\", \\\"second\\\");\\r\\n     Option optionC = new Option(\\\"c\\\", \\\"third\\\");\\r\\n     Options opts = new Options();\\r\\n     opts.addOption(optionA);\\r\\n     opts.addOption(optionB);\\r\\n     opts.addOption(optionC);\\r\\n     HelpFormatter helpFormatter = new HelpFormatter();\\r\\n     ByteArrayOutputStream bytesOut = new ByteArrayOutputStream();\\r\\n     PrintWriter printWriter = new PrintWriter(bytesOut);\\r\\n     helpFormatter.printUsage(printWriter, 80, \\\"app\\\", opts);\\r\\n     printWriter.close();\\r\\n     assertEquals(\\\"usage: app [-a] [-b] [-c]\\\" + EOL, bytesOut.toString());\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"bayard@apache.org","authorName":"Henri Yandell","commitYear":"2007","diff":"\"@@ -0,0 +1,15 @@\\n+public void testPrintUsage() {\\r\\n+    Option optionA = new Option(\\\"a\\\", \\\"first\\\");\\r\\n+    Option optionB = new Option(\\\"b\\\", \\\"second\\\");\\r\\n+    Option optionC = new Option(\\\"c\\\", \\\"third\\\");\\r\\n+    Options opts = new Options();\\r\\n+    opts.addOption(optionA);\\r\\n+    opts.addOption(optionB);\\r\\n+    opts.addOption(optionC);\\r\\n+    HelpFormatter helpFormatter = new HelpFormatter();\\r\\n+    ByteArrayOutputStream bytesOut = new ByteArrayOutputStream();\\r\\n+    PrintWriter printWriter = new PrintWriter(bytesOut);\\r\\n+    helpFormatter.printUsage(printWriter, 80, \\\"app\\\", opts);\\r\\n+    printWriter.close();\\r\\n+    assertEquals(\\\"usage: app [-a] [-b] [-c]\\\" + EOL, bytesOut.toString());\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\test\java\org\apache\commons\cli\HelpFormatterTest.java	testRenderWrappedTextMultiLine	org.apache.commons.cli.HelpFormatterTest.testRenderWrappedTextMultiLine()	516	529	1	[{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"\""},{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,9 +1,9 @@\\n @Test\\r\\n public void testRenderWrappedTextMultiLine() {\\r\\n-    int width = 16;\\r\\n-    int padding = 0;\\r\\n-    String expected = \\\"aaaa aaaa aaaa\\\" + EOL + \\\"aaaaaa\\\" + EOL + \\\"aaaaa\\\";\\r\\n-    StringBuffer sb = new StringBuffer();\\r\\n+    final int width = 16;\\r\\n+    final int padding = 0;\\r\\n+    final String expected = \\\"aaaa aaaa aaaa\\\" + EOL + \\\"aaaaaa\\\" + EOL + \\\"aaaaa\\\";\\r\\n+    final StringBuffer sb = new StringBuffer();\\r\\n     new HelpFormatter().renderWrappedText(sb, width, padding, expected);\\r\\n     assertEquals(\\\"multi line text\\\", expected, sb.toString());\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"britter@apache.org","authorName":"Benedikt Ritter","commitYear":"2015","diff":"\"@@ -1,10 +1,9 @@\\n @Test\\r\\n public void testRenderWrappedTextMultiLine() {\\r\\n     int width = 16;\\r\\n     int padding = 0;\\r\\n-    String text = \\\"aaaa aaaa aaaa\\\" + EOL + \\\"aaaaaa\\\" + EOL + \\\"aaaaa\\\";\\r\\n-    String expected = text;\\r\\n+    String expected = \\\"aaaa aaaa aaaa\\\" + EOL + \\\"aaaaaa\\\" + EOL + \\\"aaaaa\\\";\\r\\n     StringBuffer sb = new StringBuffer();\\r\\n-    new HelpFormatter().renderWrappedText(sb, width, padding, text);\\r\\n+    new HelpFormatter().renderWrappedText(sb, width, padding, expected);\\r\\n     assertEquals(\\\"multi line text\\\", expected, sb.toString());\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"tn@apache.org","authorName":"Thomas Neidhart","commitYear":"2013","diff":"\"@@ -1,9 +1,10 @@\\n+@Test\\r\\n public void testRenderWrappedTextMultiLine() {\\r\\n     int width = 16;\\r\\n     int padding = 0;\\r\\n     String text = \\\"aaaa aaaa aaaa\\\" + EOL + \\\"aaaaaa\\\" + EOL + \\\"aaaaa\\\";\\r\\n     String expected = text;\\r\\n     StringBuffer sb = new StringBuffer();\\r\\n     new HelpFormatter().renderWrappedText(sb, width, padding, text);\\r\\n     assertEquals(\\\"multi line text\\\", expected, sb.toString());\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2010","diff":"\"@@ -0,0 +1,9 @@\\n+public void testRenderWrappedTextMultiLine() {\\r\\n+    int width = 16;\\r\\n+    int padding = 0;\\r\\n+    String text = \\\"aaaa aaaa aaaa\\\" + EOL + \\\"aaaaaa\\\" + EOL + \\\"aaaaa\\\";\\r\\n+    String expected = text;\\r\\n+    StringBuffer sb = new StringBuffer();\\r\\n+    new HelpFormatter().renderWrappedText(sb, width, padding, text);\\r\\n+    assertEquals(\\\"multi line text\\\", expected, sb.toString());\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\test\java\org\apache\commons\cli\HelpFormatterTest.java	testRenderWrappedTextMultiLinePadded	org.apache.commons.cli.HelpFormatterTest.testRenderWrappedTextMultiLinePadded()	532	548	1	[{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"\""},{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2019","diff":"\"\""},{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,10 +1,10 @@\\n @Test\\r\\n public void testRenderWrappedTextMultiLinePadded() {\\r\\n-    int width = 16;\\r\\n-    int padding = 4;\\r\\n-    String text = \\\"aaaa aaaa aaaa\\\" + EOL + \\\"aaaaaa\\\" + EOL + \\\"aaaaa\\\";\\r\\n-    String expected = \\\"aaaa aaaa aaaa\\\" + EOL + \\\"    aaaaaa\\\" + EOL + \\\"    aaaaa\\\";\\r\\n-    StringBuffer sb = new StringBuffer();\\r\\n+    final int width = 16;\\r\\n+    final int padding = 4;\\r\\n+    final String text = \\\"aaaa aaaa aaaa\\\" + EOL + \\\"aaaaaa\\\" + EOL + \\\"aaaaa\\\";\\r\\n+    final String expected = \\\"aaaa aaaa aaaa\\\" + EOL + \\\"    aaaaaa\\\" + EOL + \\\"    aaaaa\\\";\\r\\n+    final StringBuffer sb = new StringBuffer();\\r\\n     new HelpFormatter().renderWrappedText(sb, width, padding, text);\\r\\n     assertEquals(\\\"multi-line padded text\\\", expected, sb.toString());\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"tn@apache.org","authorName":"Thomas Neidhart","commitYear":"2013","diff":"\"@@ -1,9 +1,10 @@\\n+@Test\\r\\n public void testRenderWrappedTextMultiLinePadded() {\\r\\n     int width = 16;\\r\\n     int padding = 4;\\r\\n     String text = \\\"aaaa aaaa aaaa\\\" + EOL + \\\"aaaaaa\\\" + EOL + \\\"aaaaa\\\";\\r\\n     String expected = \\\"aaaa aaaa aaaa\\\" + EOL + \\\"    aaaaaa\\\" + EOL + \\\"    aaaaa\\\";\\r\\n     StringBuffer sb = new StringBuffer();\\r\\n     new HelpFormatter().renderWrappedText(sb, width, padding, text);\\r\\n     assertEquals(\\\"multi-line padded text\\\", expected, sb.toString());\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2010","diff":"\"@@ -0,0 +1,9 @@\\n+public void testRenderWrappedTextMultiLinePadded() {\\r\\n+    int width = 16;\\r\\n+    int padding = 4;\\r\\n+    String text = \\\"aaaa aaaa aaaa\\\" + EOL + \\\"aaaaaa\\\" + EOL + \\\"aaaaa\\\";\\r\\n+    String expected = \\\"aaaa aaaa aaaa\\\" + EOL + \\\"    aaaaaa\\\" + EOL + \\\"    aaaaa\\\";\\r\\n+    StringBuffer sb = new StringBuffer();\\r\\n+    new HelpFormatter().renderWrappedText(sb, width, padding, text);\\r\\n+    assertEquals(\\\"multi-line padded text\\\", expected, sb.toString());\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\test\java\org\apache\commons\cli\HelpFormatterTest.java	testRenderWrappedTextSingleLine	org.apache.commons.cli.HelpFormatterTest.testRenderWrappedTextSingleLine()	551	561	1	[{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"\""},{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2019","diff":"\"\""},{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,10 +1,10 @@\\n @Test\\r\\n public void testRenderWrappedTextSingleLine() {\\r\\n-    int width = 12;\\r\\n-    int padding = 0;\\r\\n-    String text = \\\"This is a test.\\\";\\r\\n-    String expected = \\\"This is a\\\" + EOL + \\\"test.\\\";\\r\\n-    StringBuffer sb = new StringBuffer();\\r\\n+    final int width = 12;\\r\\n+    final int padding = 0;\\r\\n+    final String text = \\\"This is a test.\\\";\\r\\n+    final String expected = \\\"This is a\\\" + EOL + \\\"test.\\\";\\r\\n+    final StringBuffer sb = new StringBuffer();\\r\\n     new HelpFormatter().renderWrappedText(sb, width, padding, text);\\r\\n     assertEquals(\\\"single line text\\\", expected, sb.toString());\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"tn@apache.org","authorName":"Thomas Neidhart","commitYear":"2013","diff":"\"@@ -1,9 +1,10 @@\\n+@Test\\r\\n public void testRenderWrappedTextSingleLine() {\\r\\n     int width = 12;\\r\\n     int padding = 0;\\r\\n     String text = \\\"This is a test.\\\";\\r\\n     String expected = \\\"This is a\\\" + EOL + \\\"test.\\\";\\r\\n     StringBuffer sb = new StringBuffer();\\r\\n     new HelpFormatter().renderWrappedText(sb, width, padding, text);\\r\\n     assertEquals(\\\"single line text\\\", expected, sb.toString());\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2010","diff":"\"@@ -0,0 +1,9 @@\\n+public void testRenderWrappedTextSingleLine() {\\r\\n+    int width = 12;\\r\\n+    int padding = 0;\\r\\n+    String text = \\\"This is a test.\\\";\\r\\n+    String expected = \\\"This is a\\\" + EOL + \\\"test.\\\";\\r\\n+    StringBuffer sb = new StringBuffer();\\r\\n+    new HelpFormatter().renderWrappedText(sb, width, padding, text);\\r\\n+    assertEquals(\\\"single line text\\\", expected, sb.toString());\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\test\java\org\apache\commons\cli\HelpFormatterTest.java	testRenderWrappedTextSingleLinePadded	org.apache.commons.cli.HelpFormatterTest.testRenderWrappedTextSingleLinePadded()	564	574	1	[{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"\""},{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2019","diff":"\"\""},{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,10 +1,10 @@\\n @Test\\r\\n public void testRenderWrappedTextSingleLinePadded() {\\r\\n-    int width = 12;\\r\\n-    int padding = 4;\\r\\n-    String text = \\\"This is a test.\\\";\\r\\n-    String expected = \\\"This is a\\\" + EOL + \\\"    test.\\\";\\r\\n-    StringBuffer sb = new StringBuffer();\\r\\n+    final int width = 12;\\r\\n+    final int padding = 4;\\r\\n+    final String text = \\\"This is a test.\\\";\\r\\n+    final String expected = \\\"This is a\\\" + EOL + \\\"    test.\\\";\\r\\n+    final StringBuffer sb = new StringBuffer();\\r\\n     new HelpFormatter().renderWrappedText(sb, width, padding, text);\\r\\n     assertEquals(\\\"single line padded text\\\", expected, sb.toString());\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"tn@apache.org","authorName":"Thomas Neidhart","commitYear":"2013","diff":"\"@@ -1,9 +1,10 @@\\n+@Test\\r\\n public void testRenderWrappedTextSingleLinePadded() {\\r\\n     int width = 12;\\r\\n     int padding = 4;\\r\\n     String text = \\\"This is a test.\\\";\\r\\n     String expected = \\\"This is a\\\" + EOL + \\\"    test.\\\";\\r\\n     StringBuffer sb = new StringBuffer();\\r\\n     new HelpFormatter().renderWrappedText(sb, width, padding, text);\\r\\n     assertEquals(\\\"single line padded text\\\", expected, sb.toString());\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2010","diff":"\"@@ -0,0 +1,9 @@\\n+public void testRenderWrappedTextSingleLinePadded() {\\r\\n+    int width = 12;\\r\\n+    int padding = 4;\\r\\n+    String text = \\\"This is a test.\\\";\\r\\n+    String expected = \\\"This is a\\\" + EOL + \\\"    test.\\\";\\r\\n+    StringBuffer sb = new StringBuffer();\\r\\n+    new HelpFormatter().renderWrappedText(sb, width, padding, text);\\r\\n+    assertEquals(\\\"single line padded text\\\", expected, sb.toString());\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\test\java\org\apache\commons\cli\HelpFormatterTest.java	testRenderWrappedTextSingleLinePadded2	org.apache.commons.cli.HelpFormatterTest.testRenderWrappedTextSingleLinePadded2()	577	592	1	[{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"\""},{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2019","diff":"\"\""},{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,10 +1,10 @@\\n @Test\\r\\n public void testRenderWrappedTextSingleLinePadded2() {\\r\\n-    int width = 53;\\r\\n-    int padding = 24;\\r\\n-    String text = \\\"  -p,--period <PERIOD>  PERIOD is time duration of form \\\" + \\\"DATE[-DATE] where DATE has form YYYY[MM[DD]]\\\";\\r\\n-    String expected = \\\"  -p,--period <PERIOD>  PERIOD is time duration of\\\" + EOL + \\\"                        form DATE[-DATE] where DATE\\\" + EOL + \\\"                        has form YYYY[MM[DD]]\\\";\\r\\n-    StringBuffer sb = new StringBuffer();\\r\\n+    final int width = 53;\\r\\n+    final int padding = 24;\\r\\n+    final String text = \\\"  -p,--period <PERIOD>  PERIOD is time duration of form \\\" + \\\"DATE[-DATE] where DATE has form YYYY[MM[DD]]\\\";\\r\\n+    final String expected = \\\"  -p,--period <PERIOD>  PERIOD is time duration of\\\" + EOL + \\\"                        form DATE[-DATE] where DATE\\\" + EOL + \\\"                        has form YYYY[MM[DD]]\\\";\\r\\n+    final StringBuffer sb = new StringBuffer();\\r\\n     new HelpFormatter().renderWrappedText(sb, width, padding, text);\\r\\n     assertEquals(\\\"single line padded text 2\\\", expected, sb.toString());\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"tn@apache.org","authorName":"Thomas Neidhart","commitYear":"2013","diff":"\"@@ -1,9 +1,10 @@\\n+@Test\\r\\n public void testRenderWrappedTextSingleLinePadded2() {\\r\\n     int width = 53;\\r\\n     int padding = 24;\\r\\n     String text = \\\"  -p,--period <PERIOD>  PERIOD is time duration of form \\\" + \\\"DATE[-DATE] where DATE has form YYYY[MM[DD]]\\\";\\r\\n     String expected = \\\"  -p,--period <PERIOD>  PERIOD is time duration of\\\" + EOL + \\\"                        form DATE[-DATE] where DATE\\\" + EOL + \\\"                        has form YYYY[MM[DD]]\\\";\\r\\n     StringBuffer sb = new StringBuffer();\\r\\n     new HelpFormatter().renderWrappedText(sb, width, padding, text);\\r\\n     assertEquals(\\\"single line padded text 2\\\", expected, sb.toString());\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2010","diff":"\"@@ -0,0 +1,9 @@\\n+public void testRenderWrappedTextSingleLinePadded2() {\\r\\n+    int width = 53;\\r\\n+    int padding = 24;\\r\\n+    String text = \\\"  -p,--period <PERIOD>  PERIOD is time duration of form \\\" + \\\"DATE[-DATE] where DATE has form YYYY[MM[DD]]\\\";\\r\\n+    String expected = \\\"  -p,--period <PERIOD>  PERIOD is time duration of\\\" + EOL + \\\"                        form DATE[-DATE] where DATE\\\" + EOL + \\\"                        has form YYYY[MM[DD]]\\\";\\r\\n+    StringBuffer sb = new StringBuffer();\\r\\n+    new HelpFormatter().renderWrappedText(sb, width, padding, text);\\r\\n+    assertEquals(\\\"single line padded text 2\\\", expected, sb.toString());\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\test\java\org\apache\commons\cli\HelpFormatterTest.java	testRenderWrappedTextWordCut	org.apache.commons.cli.HelpFormatterTest.testRenderWrappedTextWordCut()	595	604	1	[{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"\""},{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2019","diff":"\"\""},{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,10 +1,10 @@\\n @Test\\r\\n public void testRenderWrappedTextWordCut() {\\r\\n-    int width = 7;\\r\\n-    int padding = 0;\\r\\n-    String text = \\\"Thisisatest.\\\";\\r\\n-    String expected = \\\"Thisisa\\\" + EOL + \\\"test.\\\";\\r\\n-    StringBuffer sb = new StringBuffer();\\r\\n+    final int width = 7;\\r\\n+    final int padding = 0;\\r\\n+    final String text = \\\"Thisisatest.\\\";\\r\\n+    final String expected = \\\"Thisisa\\\" + EOL + \\\"test.\\\";\\r\\n+    final StringBuffer sb = new StringBuffer();\\r\\n     new HelpFormatter().renderWrappedText(sb, width, padding, text);\\r\\n     assertEquals(\\\"cut and wrap\\\", expected, sb.toString());\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"tn@apache.org","authorName":"Thomas Neidhart","commitYear":"2013","diff":"\"@@ -1,9 +1,10 @@\\n+@Test\\r\\n public void testRenderWrappedTextWordCut() {\\r\\n     int width = 7;\\r\\n     int padding = 0;\\r\\n     String text = \\\"Thisisatest.\\\";\\r\\n     String expected = \\\"Thisisa\\\" + EOL + \\\"test.\\\";\\r\\n     StringBuffer sb = new StringBuffer();\\r\\n     new HelpFormatter().renderWrappedText(sb, width, padding, text);\\r\\n     assertEquals(\\\"cut and wrap\\\", expected, sb.toString());\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2010","diff":"\"@@ -0,0 +1,9 @@\\n+public void testRenderWrappedTextWordCut() {\\r\\n+    int width = 7;\\r\\n+    int padding = 0;\\r\\n+    String text = \\\"Thisisatest.\\\";\\r\\n+    String expected = \\\"Thisisa\\\" + EOL + \\\"test.\\\";\\r\\n+    StringBuffer sb = new StringBuffer();\\r\\n+    new HelpFormatter().renderWrappedText(sb, width, padding, text);\\r\\n+    assertEquals(\\\"cut and wrap\\\", expected, sb.toString());\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\test\java\org\apache\commons\cli\HelpFormatterTest.java	testRtrim	org.apache.commons.cli.HelpFormatterTest.testRtrim()	607	613	1	[{"authorEmail":"arturobernalg@gmail.com","authorName":"Arturo Bernal","commitYear":"2021","diff":"\"@@ -1,7 +1,7 @@\\n @Test\\r\\n public void testRtrim() {\\r\\n     final HelpFormatter formatter = new HelpFormatter();\\r\\n-    assertEquals(null, formatter.rtrim(null));\\r\\n+    assertNull(formatter.rtrim(null));\\r\\n     assertEquals(\\\"\\\", formatter.rtrim(\\\"\\\"));\\r\\n     assertEquals(\\\"  foo\\\", formatter.rtrim(\\\"  foo  \\\"));\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,7 +1,7 @@\\n @Test\\r\\n public void testRtrim() {\\r\\n-    HelpFormatter formatter = new HelpFormatter();\\r\\n+    final HelpFormatter formatter = new HelpFormatter();\\r\\n     assertEquals(null, formatter.rtrim(null));\\r\\n     assertEquals(\\\"\\\", formatter.rtrim(\\\"\\\"));\\r\\n     assertEquals(\\\"  foo\\\", formatter.rtrim(\\\"  foo  \\\"));\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"tn@apache.org","authorName":"Thomas Neidhart","commitYear":"2013","diff":"\"@@ -1,6 +1,7 @@\\n+@Test\\r\\n public void testRtrim() {\\r\\n     HelpFormatter formatter = new HelpFormatter();\\r\\n     assertEquals(null, formatter.rtrim(null));\\r\\n     assertEquals(\\\"\\\", formatter.rtrim(\\\"\\\"));\\r\\n     assertEquals(\\\"  foo\\\", formatter.rtrim(\\\"  foo  \\\"));\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2008","diff":"\"@@ -1,11 +1,6 @@\\n public void testRtrim() {\\r\\n-    HelpFormatter formatter = new HelpFormatter() {\\r\\n-\\r\\n-        public String rtrim(String s) {\\r\\n-            return super.rtrim(s);\\r\\n-        }\\r\\n-    };\\r\\n+    HelpFormatter formatter = new HelpFormatter();\\r\\n     assertEquals(null, formatter.rtrim(null));\\r\\n     assertEquals(\\\"\\\", formatter.rtrim(\\\"\\\"));\\r\\n     assertEquals(\\\"  foo\\\", formatter.rtrim(\\\"  foo  \\\"));\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2008","diff":"\"@@ -0,0 +1,11 @@\\n+public void testRtrim() {\\r\\n+    HelpFormatter formatter = new HelpFormatter() {\\r\\n+\\r\\n+        public String rtrim(String s) {\\r\\n+            return super.rtrim(s);\\r\\n+        }\\r\\n+    };\\r\\n+    assertEquals(null, formatter.rtrim(null));\\r\\n+    assertEquals(\\\"\\\", formatter.rtrim(\\\"\\\"));\\r\\n+    assertEquals(\\\"  foo\\\", formatter.rtrim(\\\"  foo  \\\"));\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\test\java\org\apache\commons\cli\HelpFormatterTest.java	testUsageWithLongOptSeparator	org.apache.commons.cli.HelpFormatterTest.testUsageWithLongOptSeparator()	616	630	1	[{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"@@ -1,12 +1,12 @@\\n @Test\\r\\n-public void testUsageWithLongOptSeparator() throws Exception {\\r\\n+public void testUsageWithLongOptSeparator() {\\r\\n     final Options options = new Options();\\r\\n     options.addOption(\\\"f\\\", true, \\\"the file\\\");\\r\\n     options.addOption(Option.builder(\\\"s\\\").longOpt(\\\"size\\\").desc(\\\"the size\\\").hasArg().argName(\\\"SIZE\\\").build());\\r\\n     options.addOption(Option.builder().longOpt(\\\"age\\\").desc(\\\"the age\\\").hasArg().build());\\r\\n     final HelpFormatter formatter = new HelpFormatter();\\r\\n     formatter.setLongOptSeparator(\\\"=\\\");\\r\\n     final StringWriter out = new StringWriter();\\r\\n     formatter.printUsage(new PrintWriter(out), 80, \\\"create\\\", options);\\r\\n     assertEquals(\\\"usage: create [--age=<arg>] [-f <arg>] [-s <SIZE>]\\\", out.toString().trim());\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"\""},{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2019","diff":"\"\""},{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,12 +1,12 @@\\n @Test\\r\\n public void testUsageWithLongOptSeparator() throws Exception {\\r\\n-    Options options = new Options();\\r\\n+    final Options options = new Options();\\r\\n     options.addOption(\\\"f\\\", true, \\\"the file\\\");\\r\\n     options.addOption(Option.builder(\\\"s\\\").longOpt(\\\"size\\\").desc(\\\"the size\\\").hasArg().argName(\\\"SIZE\\\").build());\\r\\n     options.addOption(Option.builder().longOpt(\\\"age\\\").desc(\\\"the age\\\").hasArg().build());\\r\\n-    HelpFormatter formatter = new HelpFormatter();\\r\\n+    final HelpFormatter formatter = new HelpFormatter();\\r\\n     formatter.setLongOptSeparator(\\\"=\\\");\\r\\n-    StringWriter out = new StringWriter();\\r\\n+    final StringWriter out = new StringWriter();\\r\\n     formatter.printUsage(new PrintWriter(out), 80, \\\"create\\\", options);\\r\\n     assertEquals(\\\"usage: create [--age=<arg>] [-f <arg>] [-s <SIZE>]\\\", out.toString().trim());\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"tn@apache.org","authorName":"Thomas Neidhart","commitYear":"2013","diff":"\"@@ -1,12 +1,12 @@\\n @Test\\r\\n public void testUsageWithLongOptSeparator() throws Exception {\\r\\n     Options options = new Options();\\r\\n     options.addOption(\\\"f\\\", true, \\\"the file\\\");\\r\\n-    options.addOption(OptionBuilder.withLongOpt(\\\"size\\\").withDescription(\\\"the size\\\").hasArg().withArgName(\\\"SIZE\\\").create('s'));\\r\\n-    options.addOption(OptionBuilder.withLongOpt(\\\"age\\\").withDescription(\\\"the age\\\").hasArg().create());\\r\\n+    options.addOption(Option.builder(\\\"s\\\").longOpt(\\\"size\\\").desc(\\\"the size\\\").hasArg().argName(\\\"SIZE\\\").build());\\r\\n+    options.addOption(Option.builder().longOpt(\\\"age\\\").desc(\\\"the age\\\").hasArg().build());\\r\\n     HelpFormatter formatter = new HelpFormatter();\\r\\n     formatter.setLongOptSeparator(\\\"=\\\");\\r\\n     StringWriter out = new StringWriter();\\r\\n     formatter.printUsage(new PrintWriter(out), 80, \\\"create\\\", options);\\r\\n     assertEquals(\\\"usage: create [--age=<arg>] [-f <arg>] [-s <SIZE>]\\\", out.toString().trim());\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"tn@apache.org","authorName":"Thomas Neidhart","commitYear":"2013","diff":"\"@@ -1,11 +1,12 @@\\n+@Test\\r\\n public void testUsageWithLongOptSeparator() throws Exception {\\r\\n     Options options = new Options();\\r\\n     options.addOption(\\\"f\\\", true, \\\"the file\\\");\\r\\n     options.addOption(OptionBuilder.withLongOpt(\\\"size\\\").withDescription(\\\"the size\\\").hasArg().withArgName(\\\"SIZE\\\").create('s'));\\r\\n     options.addOption(OptionBuilder.withLongOpt(\\\"age\\\").withDescription(\\\"the age\\\").hasArg().create());\\r\\n     HelpFormatter formatter = new HelpFormatter();\\r\\n     formatter.setLongOptSeparator(\\\"=\\\");\\r\\n     StringWriter out = new StringWriter();\\r\\n     formatter.printUsage(new PrintWriter(out), 80, \\\"create\\\", options);\\r\\n     assertEquals(\\\"usage: create [--age=<arg>] [-f <arg>] [-s <SIZE>]\\\", out.toString().trim());\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2010","diff":"\"@@ -0,0 +1,11 @@\\n+public void testUsageWithLongOptSeparator() throws Exception {\\r\\n+    Options options = new Options();\\r\\n+    options.addOption(\\\"f\\\", true, \\\"the file\\\");\\r\\n+    options.addOption(OptionBuilder.withLongOpt(\\\"size\\\").withDescription(\\\"the size\\\").hasArg().withArgName(\\\"SIZE\\\").create('s'));\\r\\n+    options.addOption(OptionBuilder.withLongOpt(\\\"age\\\").withDescription(\\\"the age\\\").hasArg().create());\\r\\n+    HelpFormatter formatter = new HelpFormatter();\\r\\n+    formatter.setLongOptSeparator(\\\"=\\\");\\r\\n+    StringWriter out = new StringWriter();\\r\\n+    formatter.printUsage(new PrintWriter(out), 80, \\\"create\\\", options);\\r\\n+    assertEquals(\\\"usage: create [--age=<arg>] [-f <arg>] [-s <SIZE>]\\\", out.toString().trim());\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\test\java\org\apache\commons\cli\OptionBuilderTest.java	testBaseOptionCharOpt	org.apache.commons.cli.OptionBuilderTest.testBaseOptionCharOpt()	31	37	1	[{"authorEmail":"arturobernalg@gmail.com","authorName":"Arturo Bernal","commitYear":"2021","diff":"\"@@ -1,7 +1,7 @@\\n @Test\\r\\n public void testBaseOptionCharOpt() {\\r\\n     final Option base = OptionBuilder.withDescription(\\\"option description\\\").create('o');\\r\\n     assertEquals(\\\"o\\\", base.getOpt());\\r\\n     assertEquals(\\\"option description\\\", base.getDescription());\\r\\n-    assertTrue(!base.hasArg());\\r\\n+    assertFalse(base.hasArg());\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"\""},{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,7 +1,7 @@\\n @Test\\r\\n public void testBaseOptionCharOpt() {\\r\\n-    Option base = OptionBuilder.withDescription(\\\"option description\\\").create('o');\\r\\n+    final Option base = OptionBuilder.withDescription(\\\"option description\\\").create('o');\\r\\n     assertEquals(\\\"o\\\", base.getOpt());\\r\\n     assertEquals(\\\"option description\\\", base.getDescription());\\r\\n     assertTrue(!base.hasArg());\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"tn@apache.org","authorName":"Thomas Neidhart","commitYear":"2013","diff":"\"@@ -1,6 +1,7 @@\\n+@Test\\r\\n public void testBaseOptionCharOpt() {\\r\\n     Option base = OptionBuilder.withDescription(\\\"option description\\\").create('o');\\r\\n     assertEquals(\\\"o\\\", base.getOpt());\\r\\n     assertEquals(\\\"option description\\\", base.getDescription());\\r\\n     assertTrue(!base.hasArg());\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -0,0 +1,6 @@\\n+public void testBaseOptionCharOpt() {\\r\\n+    Option base = OptionBuilder.withDescription(\\\"option description\\\").create('o');\\r\\n+    assertEquals(\\\"o\\\", base.getOpt());\\r\\n+    assertEquals(\\\"option description\\\", base.getDescription());\\r\\n+    assertTrue(!base.hasArg());\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\test\java\org\apache\commons\cli\OptionBuilderTest.java	testBaseOptionStringOpt	org.apache.commons.cli.OptionBuilderTest.testBaseOptionStringOpt()	40	46	1	[{"authorEmail":"arturobernalg@gmail.com","authorName":"Arturo Bernal","commitYear":"2021","diff":"\"@@ -1,7 +1,7 @@\\n @Test\\r\\n public void testBaseOptionStringOpt() {\\r\\n     final Option base = OptionBuilder.withDescription(\\\"option description\\\").create(\\\"o\\\");\\r\\n     assertEquals(\\\"o\\\", base.getOpt());\\r\\n     assertEquals(\\\"option description\\\", base.getDescription());\\r\\n-    assertTrue(!base.hasArg());\\r\\n+    assertFalse(base.hasArg());\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"\""},{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,7 +1,7 @@\\n @Test\\r\\n public void testBaseOptionStringOpt() {\\r\\n-    Option base = OptionBuilder.withDescription(\\\"option description\\\").create(\\\"o\\\");\\r\\n+    final Option base = OptionBuilder.withDescription(\\\"option description\\\").create(\\\"o\\\");\\r\\n     assertEquals(\\\"o\\\", base.getOpt());\\r\\n     assertEquals(\\\"option description\\\", base.getDescription());\\r\\n     assertTrue(!base.hasArg());\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"tn@apache.org","authorName":"Thomas Neidhart","commitYear":"2013","diff":"\"@@ -1,6 +1,7 @@\\n+@Test\\r\\n public void testBaseOptionStringOpt() {\\r\\n     Option base = OptionBuilder.withDescription(\\\"option description\\\").create(\\\"o\\\");\\r\\n     assertEquals(\\\"o\\\", base.getOpt());\\r\\n     assertEquals(\\\"option description\\\", base.getDescription());\\r\\n     assertTrue(!base.hasArg());\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -0,0 +1,6 @@\\n+public void testBaseOptionStringOpt() {\\r\\n+    Option base = OptionBuilder.withDescription(\\\"option description\\\").create(\\\"o\\\");\\r\\n+    assertEquals(\\\"o\\\", base.getOpt());\\r\\n+    assertEquals(\\\"option description\\\", base.getDescription());\\r\\n+    assertTrue(!base.hasArg());\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\test\java\org\apache\commons\cli\OptionBuilderTest.java	testBuilderIsResettedAlways	org.apache.commons.cli.OptionBuilderTest.testBuilderIsResettedAlways()	49	65	5	[{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"\""},{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,15 +1,15 @@\\n @Test\\r\\n public void testBuilderIsResettedAlways() {\\r\\n     try {\\r\\n         OptionBuilder.withDescription(\\\"JUnit\\\").create('\\\"');\\r\\n         fail(\\\"IllegalArgumentException expected\\\");\\r\\n-    } catch (IllegalArgumentException e) {\\r\\n+    } catch (final IllegalArgumentException e) {\\r\\n     }\\r\\n     assertNull(\\\"we inherited a description\\\", OptionBuilder.create('x').getDescription());\\r\\n     try {\\r\\n         OptionBuilder.withDescription(\\\"JUnit\\\").create();\\r\\n         fail(\\\"IllegalArgumentException expected\\\");\\r\\n-    } catch (IllegalArgumentException e) {\\r\\n+    } catch (final IllegalArgumentException e) {\\r\\n     }\\r\\n     assertNull(\\\"we inherited a description\\\", OptionBuilder.create('x').getDescription());\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"tn@apache.org","authorName":"Thomas Neidhart","commitYear":"2013","diff":"\"@@ -1,14 +1,15 @@\\n+@Test\\r\\n public void testBuilderIsResettedAlways() {\\r\\n     try {\\r\\n         OptionBuilder.withDescription(\\\"JUnit\\\").create('\\\"');\\r\\n         fail(\\\"IllegalArgumentException expected\\\");\\r\\n     } catch (IllegalArgumentException e) {\\r\\n     }\\r\\n     assertNull(\\\"we inherited a description\\\", OptionBuilder.create('x').getDescription());\\r\\n     try {\\r\\n         OptionBuilder.withDescription(\\\"JUnit\\\").create();\\r\\n         fail(\\\"IllegalArgumentException expected\\\");\\r\\n     } catch (IllegalArgumentException e) {\\r\\n     }\\r\\n     assertNull(\\\"we inherited a description\\\", OptionBuilder.create('x').getDescription());\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"bayard@apache.org","authorName":"Henri Yandell","commitYear":"2009","diff":"\"@@ -0,0 +1,14 @@\\n+public void testBuilderIsResettedAlways() {\\r\\n+    try {\\r\\n+        OptionBuilder.withDescription(\\\"JUnit\\\").create('\\\"');\\r\\n+        fail(\\\"IllegalArgumentException expected\\\");\\r\\n+    } catch (IllegalArgumentException e) {\\r\\n+    }\\r\\n+    assertNull(\\\"we inherited a description\\\", OptionBuilder.create('x').getDescription());\\r\\n+    try {\\r\\n+        OptionBuilder.withDescription(\\\"JUnit\\\").create();\\r\\n+        fail(\\\"IllegalArgumentException expected\\\");\\r\\n+    } catch (IllegalArgumentException e) {\\r\\n+    }\\r\\n+    assertNull(\\\"we inherited a description\\\", OptionBuilder.create('x').getDescription());\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\test\java\org\apache\commons\cli\OptionBuilderTest.java	testCompleteOption	org.apache.commons.cli.OptionBuilderTest.testCompleteOption()	68	86	1	[{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"\""},{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,11 +1,11 @@\\n @Test\\r\\n public void testCompleteOption() {\\r\\n-    Option simple = OptionBuilder.withLongOpt(\\\"simple option\\\").hasArg().isRequired().hasArgs().withType(Float.class).withDescription(\\\"this is a simple option\\\").create('s');\\r\\n+    final Option simple = OptionBuilder.withLongOpt(\\\"simple option\\\").hasArg().isRequired().hasArgs().withType(Float.class).withDescription(\\\"this is a simple option\\\").create('s');\\r\\n     assertEquals(\\\"s\\\", simple.getOpt());\\r\\n     assertEquals(\\\"simple option\\\", simple.getLongOpt());\\r\\n     assertEquals(\\\"this is a simple option\\\", simple.getDescription());\\r\\n     assertEquals(simple.getType(), Float.class);\\r\\n     assertTrue(simple.hasArg());\\r\\n     assertTrue(simple.isRequired());\\r\\n     assertTrue(simple.hasArgs());\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"tn@apache.org","authorName":"Thomas Neidhart","commitYear":"2013","diff":"\"@@ -1,10 +1,11 @@\\n+@Test\\r\\n public void testCompleteOption() {\\r\\n     Option simple = OptionBuilder.withLongOpt(\\\"simple option\\\").hasArg().isRequired().hasArgs().withType(Float.class).withDescription(\\\"this is a simple option\\\").create('s');\\r\\n     assertEquals(\\\"s\\\", simple.getOpt());\\r\\n     assertEquals(\\\"simple option\\\", simple.getLongOpt());\\r\\n     assertEquals(\\\"this is a simple option\\\", simple.getDescription());\\r\\n     assertEquals(simple.getType(), Float.class);\\r\\n     assertTrue(simple.hasArg());\\r\\n     assertTrue(simple.isRequired());\\r\\n     assertTrue(simple.hasArgs());\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2011","diff":"\"@@ -1,10 +1,10 @@\\n public void testCompleteOption() {\\r\\n-    Option simple = OptionBuilder.withLongOpt(\\\"simple option\\\").hasArg().isRequired().hasArgs().withType(new Float(10)).withDescription(\\\"this is a simple option\\\").create('s');\\r\\n+    Option simple = OptionBuilder.withLongOpt(\\\"simple option\\\").hasArg().isRequired().hasArgs().withType(Float.class).withDescription(\\\"this is a simple option\\\").create('s');\\r\\n     assertEquals(\\\"s\\\", simple.getOpt());\\r\\n     assertEquals(\\\"simple option\\\", simple.getLongOpt());\\r\\n     assertEquals(\\\"this is a simple option\\\", simple.getDescription());\\r\\n-    assertEquals(simple.getType().getClass(), Float.class);\\r\\n+    assertEquals(simple.getType(), Float.class);\\r\\n     assertTrue(simple.hasArg());\\r\\n     assertTrue(simple.isRequired());\\r\\n     assertTrue(simple.hasArgs());\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -1,10 +1,10 @@\\n public void testCompleteOption() {\\r\\n-    Option simple = OptionBuilder.withLongOpt(\\\"simple option\\\").hasArg().isRequired().hasMultipleArgs().withType(new Float(10)).withDescription(\\\"this is a simple option\\\").create('s');\\r\\n+    Option simple = OptionBuilder.withLongOpt(\\\"simple option\\\").hasArg().isRequired().hasArgs().withType(new Float(10)).withDescription(\\\"this is a simple option\\\").create('s');\\r\\n     assertEquals(\\\"s\\\", simple.getOpt());\\r\\n     assertEquals(\\\"simple option\\\", simple.getLongOpt());\\r\\n     assertEquals(\\\"this is a simple option\\\", simple.getDescription());\\r\\n     assertEquals(simple.getType().getClass(), Float.class);\\r\\n     assertTrue(simple.hasArg());\\r\\n     assertTrue(simple.isRequired());\\r\\n-    assertTrue(simple.hasMultipleArgs());\\r\\n+    assertTrue(simple.hasArgs());\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -0,0 +1,10 @@\\n+public void testCompleteOption() {\\r\\n+    Option simple = OptionBuilder.withLongOpt(\\\"simple option\\\").hasArg().isRequired().hasMultipleArgs().withType(new Float(10)).withDescription(\\\"this is a simple option\\\").create('s');\\r\\n+    assertEquals(\\\"s\\\", simple.getOpt());\\r\\n+    assertEquals(\\\"simple option\\\", simple.getLongOpt());\\r\\n+    assertEquals(\\\"this is a simple option\\\", simple.getDescription());\\r\\n+    assertEquals(simple.getType().getClass(), Float.class);\\r\\n+    assertTrue(simple.hasArg());\\r\\n+    assertTrue(simple.isRequired());\\r\\n+    assertTrue(simple.hasMultipleArgs());\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\test\java\org\apache\commons\cli\OptionBuilderTest.java	testCreateIncompleteOption	org.apache.commons.cli.OptionBuilderTest.testCreateIncompleteOption()	89	99	3	[{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"\""},{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2019","diff":"\"\""},{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,9 +1,9 @@\\n @Test\\r\\n public void testCreateIncompleteOption() {\\r\\n     try {\\r\\n         OptionBuilder.hasArg().create();\\r\\n         fail(\\\"Incomplete option should be rejected\\\");\\r\\n-    } catch (IllegalArgumentException e) {\\r\\n+    } catch (final IllegalArgumentException e) {\\r\\n         OptionBuilder.create(\\\"opt\\\");\\r\\n     }\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"tn@apache.org","authorName":"Thomas Neidhart","commitYear":"2013","diff":"\"@@ -1,8 +1,9 @@\\n+@Test\\r\\n public void testCreateIncompleteOption() {\\r\\n     try {\\r\\n         OptionBuilder.hasArg().create();\\r\\n         fail(\\\"Incomplete option should be rejected\\\");\\r\\n     } catch (IllegalArgumentException e) {\\r\\n         OptionBuilder.create(\\\"opt\\\");\\r\\n     }\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"bayard@apache.org","authorName":"Henri Yandell","commitYear":"2009","diff":"\"@@ -1,7 +1,8 @@\\n public void testCreateIncompleteOption() {\\r\\n     try {\\r\\n         OptionBuilder.hasArg().create();\\r\\n         fail(\\\"Incomplete option should be rejected\\\");\\r\\n     } catch (IllegalArgumentException e) {\\r\\n+        OptionBuilder.create(\\\"opt\\\");\\r\\n     }\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2008","diff":"\"@@ -0,0 +1,7 @@\\n+public void testCreateIncompleteOption() {\\r\\n+    try {\\r\\n+        OptionBuilder.hasArg().create();\\r\\n+        fail(\\\"Incomplete option should be rejected\\\");\\r\\n+    } catch (IllegalArgumentException e) {\\r\\n+    }\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\test\java\org\apache\commons\cli\OptionBuilderTest.java	testIllegalOptions	org.apache.commons.cli.OptionBuilderTest.testIllegalOptions()	102	126	7	[{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"\""},{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2019","diff":"\"\""},{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,18 +1,18 @@\\n @Test\\r\\n public void testIllegalOptions() {\\r\\n     try {\\r\\n         OptionBuilder.withDescription(\\\"option description\\\").create('\\\"');\\r\\n         fail(\\\"IllegalArgumentException not caught\\\");\\r\\n-    } catch (IllegalArgumentException exp) {\\r\\n+    } catch (final IllegalArgumentException exp) {\\r\\n     }\\r\\n     try {\\r\\n         OptionBuilder.create(\\\"opt`\\\");\\r\\n         fail(\\\"IllegalArgumentException not caught\\\");\\r\\n-    } catch (IllegalArgumentException exp) {\\r\\n+    } catch (final IllegalArgumentException exp) {\\r\\n     }\\r\\n     try {\\r\\n         OptionBuilder.create(\\\"opt\\\");\\r\\n-    } catch (IllegalArgumentException exp) {\\r\\n+    } catch (final IllegalArgumentException exp) {\\r\\n         fail(\\\"IllegalArgumentException caught\\\");\\r\\n     }\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"tn@apache.org","authorName":"Thomas Neidhart","commitYear":"2013","diff":"\"@@ -1,17 +1,18 @@\\n+@Test\\r\\n public void testIllegalOptions() {\\r\\n     try {\\r\\n         OptionBuilder.withDescription(\\\"option description\\\").create('\\\"');\\r\\n         fail(\\\"IllegalArgumentException not caught\\\");\\r\\n     } catch (IllegalArgumentException exp) {\\r\\n     }\\r\\n     try {\\r\\n         OptionBuilder.create(\\\"opt`\\\");\\r\\n         fail(\\\"IllegalArgumentException not caught\\\");\\r\\n     } catch (IllegalArgumentException exp) {\\r\\n     }\\r\\n     try {\\r\\n         OptionBuilder.create(\\\"opt\\\");\\r\\n     } catch (IllegalArgumentException exp) {\\r\\n         fail(\\\"IllegalArgumentException caught\\\");\\r\\n     }\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"sebb@apache.org","authorName":"Sebastian Bazley","commitYear":"2013","diff":"\"@@ -1,17 +1,17 @@\\n public void testIllegalOptions() {\\r\\n     try {\\r\\n         OptionBuilder.withDescription(\\\"option description\\\").create('\\\"');\\r\\n         fail(\\\"IllegalArgumentException not caught\\\");\\r\\n     } catch (IllegalArgumentException exp) {\\r\\n     }\\r\\n     try {\\r\\n-        Option opt = OptionBuilder.create(\\\"opt`\\\");\\r\\n+        OptionBuilder.create(\\\"opt`\\\");\\r\\n         fail(\\\"IllegalArgumentException not caught\\\");\\r\\n     } catch (IllegalArgumentException exp) {\\r\\n     }\\r\\n     try {\\r\\n-        Option opt = OptionBuilder.create(\\\"opt\\\");\\r\\n+        OptionBuilder.create(\\\"opt\\\");\\r\\n     } catch (IllegalArgumentException exp) {\\r\\n         fail(\\\"IllegalArgumentException caught\\\");\\r\\n     }\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2008","diff":"\"@@ -1,17 +1,17 @@\\n public void testIllegalOptions() {\\r\\n     try {\\r\\n-        Option opt = OptionBuilder.withDescription(\\\"option description\\\").create('\\\"');\\r\\n+        OptionBuilder.withDescription(\\\"option description\\\").create('\\\"');\\r\\n         fail(\\\"IllegalArgumentException not caught\\\");\\r\\n     } catch (IllegalArgumentException exp) {\\r\\n     }\\r\\n     try {\\r\\n         Option opt = OptionBuilder.create(\\\"opt`\\\");\\r\\n         fail(\\\"IllegalArgumentException not caught\\\");\\r\\n     } catch (IllegalArgumentException exp) {\\r\\n     }\\r\\n     try {\\r\\n         Option opt = OptionBuilder.create(\\\"opt\\\");\\r\\n     } catch (IllegalArgumentException exp) {\\r\\n         fail(\\\"IllegalArgumentException caught\\\");\\r\\n     }\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -1,22 +1,17 @@\\n public void testIllegalOptions() {\\r\\n     try {\\r\\n         Option opt = OptionBuilder.withDescription(\\\"option description\\\").create('\\\"');\\r\\n         fail(\\\"IllegalArgumentException not caught\\\");\\r\\n     } catch (IllegalArgumentException exp) {\\r\\n     }\\r\\n     try {\\r\\n         Option opt = OptionBuilder.create(\\\"opt`\\\");\\r\\n         fail(\\\"IllegalArgumentException not caught\\\");\\r\\n     } catch (IllegalArgumentException exp) {\\r\\n     }\\r\\n     try {\\r\\n-        Option opt = OptionBuilder.create(null);\\r\\n-        fail(\\\"IllegalArgumentException not caught\\\");\\r\\n-    } catch (IllegalArgumentException exp) {\\r\\n-    }\\r\\n-    try {\\r\\n         Option opt = OptionBuilder.create(\\\"opt\\\");\\r\\n     } catch (IllegalArgumentException exp) {\\r\\n         fail(\\\"IllegalArgumentException caught\\\");\\r\\n     }\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -0,0 +1,22 @@\\n+public void testIllegalOptions() {\\r\\n+    try {\\r\\n+        Option opt = OptionBuilder.withDescription(\\\"option description\\\").create('\\\"');\\r\\n+        fail(\\\"IllegalArgumentException not caught\\\");\\r\\n+    } catch (IllegalArgumentException exp) {\\r\\n+    }\\r\\n+    try {\\r\\n+        Option opt = OptionBuilder.create(\\\"opt`\\\");\\r\\n+        fail(\\\"IllegalArgumentException not caught\\\");\\r\\n+    } catch (IllegalArgumentException exp) {\\r\\n+    }\\r\\n+    try {\\r\\n+        Option opt = OptionBuilder.create(null);\\r\\n+        fail(\\\"IllegalArgumentException not caught\\\");\\r\\n+    } catch (IllegalArgumentException exp) {\\r\\n+    }\\r\\n+    try {\\r\\n+        Option opt = OptionBuilder.create(\\\"opt\\\");\\r\\n+    } catch (IllegalArgumentException exp) {\\r\\n+        fail(\\\"IllegalArgumentException caught\\\");\\r\\n+    }\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\test\java\org\apache\commons\cli\OptionBuilderTest.java	testOptionArgNumbers	org.apache.commons.cli.OptionBuilderTest.testOptionArgNumbers()	129	136	1	[{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"\""},{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,5 +1,5 @@\\n @Test\\r\\n public void testOptionArgNumbers() {\\r\\n-    Option opt = OptionBuilder.withDescription(\\\"option description\\\").hasArgs(2).create('o');\\r\\n+    final Option opt = OptionBuilder.withDescription(\\\"option description\\\").hasArgs(2).create('o');\\r\\n     assertEquals(2, opt.getArgs());\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"tn@apache.org","authorName":"Thomas Neidhart","commitYear":"2013","diff":"\"@@ -1,4 +1,5 @@\\n+@Test\\r\\n public void testOptionArgNumbers() {\\r\\n     Option opt = OptionBuilder.withDescription(\\\"option description\\\").hasArgs(2).create('o');\\r\\n     assertEquals(2, opt.getArgs());\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -0,0 +1,4 @@\\n+public void testOptionArgNumbers() {\\r\\n+    Option opt = OptionBuilder.withDescription(\\\"option description\\\").hasArgs(2).create('o');\\r\\n+    assertEquals(2, opt.getArgs());\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\test\java\org\apache\commons\cli\OptionBuilderTest.java	testSpecialOptChars	org.apache.commons.cli.OptionBuilderTest.testSpecialOptChars()	139	155	3	[{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"\""},{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2019","diff":"\"\""},{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,12 +1,12 @@\\n @Test\\r\\n public void testSpecialOptChars() throws Exception {\\r\\n-    Option opt1 = OptionBuilder.withDescription(\\\"help options\\\").create('?');\\r\\n+    final Option opt1 = OptionBuilder.withDescription(\\\"help options\\\").create('?');\\r\\n     assertEquals(\\\"?\\\", opt1.getOpt());\\r\\n-    Option opt2 = OptionBuilder.withDescription(\\\"read from stdin\\\").create('@');\\r\\n+    final Option opt2 = OptionBuilder.withDescription(\\\"read from stdin\\\").create('@');\\r\\n     assertEquals(\\\"@\\\", opt2.getOpt());\\r\\n     try {\\r\\n         OptionBuilder.create(' ');\\r\\n         fail(\\\"IllegalArgumentException not caught\\\");\\r\\n-    } catch (IllegalArgumentException e) {\\r\\n+    } catch (final IllegalArgumentException e) {\\r\\n     }\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"britter@apache.org","authorName":"Benedikt Ritter","commitYear":"2015","diff":"\"\""},{"authorEmail":"tn@apache.org","authorName":"Thomas Neidhart","commitYear":"2013","diff":"\"@@ -1,11 +1,12 @@\\n+@Test\\r\\n public void testSpecialOptChars() throws Exception {\\r\\n     Option opt1 = OptionBuilder.withDescription(\\\"help options\\\").create('?');\\r\\n     assertEquals(\\\"?\\\", opt1.getOpt());\\r\\n     Option opt2 = OptionBuilder.withDescription(\\\"read from stdin\\\").create('@');\\r\\n     assertEquals(\\\"@\\\", opt2.getOpt());\\r\\n     try {\\r\\n         OptionBuilder.create(' ');\\r\\n         fail(\\\"IllegalArgumentException not caught\\\");\\r\\n     } catch (IllegalArgumentException e) {\\r\\n     }\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2010","diff":"\"@@ -1,6 +1,11 @@\\n public void testSpecialOptChars() throws Exception {\\r\\n     Option opt1 = OptionBuilder.withDescription(\\\"help options\\\").create('?');\\r\\n     assertEquals(\\\"?\\\", opt1.getOpt());\\r\\n     Option opt2 = OptionBuilder.withDescription(\\\"read from stdin\\\").create('@');\\r\\n     assertEquals(\\\"@\\\", opt2.getOpt());\\r\\n+    try {\\r\\n+        OptionBuilder.create(' ');\\r\\n+        fail(\\\"IllegalArgumentException not caught\\\");\\r\\n+    } catch (IllegalArgumentException e) {\\r\\n+    }\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2008","diff":"\"@@ -1,14 +1,6 @@\\n-public void testSpecialOptChars() {\\r\\n-    try {\\r\\n-        Option opt = OptionBuilder.withDescription(\\\"help options\\\").create('?');\\r\\n-        assertEquals(\\\"?\\\", opt.getOpt());\\r\\n-    } catch (IllegalArgumentException arg) {\\r\\n-        fail(\\\"IllegalArgumentException caught\\\");\\r\\n-    }\\r\\n-    try {\\r\\n-        Option opt = OptionBuilder.withDescription(\\\"read from stdin\\\").create('@');\\r\\n-        assertEquals(\\\"@\\\", opt.getOpt());\\r\\n-    } catch (IllegalArgumentException arg) {\\r\\n-        fail(\\\"IllegalArgumentException caught\\\");\\r\\n-    }\\r\\n+public void testSpecialOptChars() throws Exception {\\r\\n+    Option opt1 = OptionBuilder.withDescription(\\\"help options\\\").create('?');\\r\\n+    assertEquals(\\\"?\\\", opt1.getOpt());\\r\\n+    Option opt2 = OptionBuilder.withDescription(\\\"read from stdin\\\").create('@');\\r\\n+    assertEquals(\\\"@\\\", opt2.getOpt());\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -0,0 +1,14 @@\\n+public void testSpecialOptChars() {\\r\\n+    try {\\r\\n+        Option opt = OptionBuilder.withDescription(\\\"help options\\\").create('?');\\r\\n+        assertEquals(\\\"?\\\", opt.getOpt());\\r\\n+    } catch (IllegalArgumentException arg) {\\r\\n+        fail(\\\"IllegalArgumentException caught\\\");\\r\\n+    }\\r\\n+    try {\\r\\n+        Option opt = OptionBuilder.withDescription(\\\"read from stdin\\\").create('@');\\r\\n+        assertEquals(\\\"@\\\", opt.getOpt());\\r\\n+    } catch (IllegalArgumentException arg) {\\r\\n+        fail(\\\"IllegalArgumentException caught\\\");\\r\\n+    }\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\test\java\org\apache\commons\cli\OptionBuilderTest.java	testTwoCompleteOptions	org.apache.commons.cli.OptionBuilderTest.testTwoCompleteOptions()	158	191	1	[{"authorEmail":"arturobernalg@gmail.com","authorName":"Arturo Bernal","commitYear":"2021","diff":"\"@@ -1,19 +1,19 @@\\n @Test\\r\\n public void testTwoCompleteOptions() {\\r\\n     Option simple = OptionBuilder.withLongOpt(\\\"simple option\\\").hasArg().isRequired().hasArgs().withType(Float.class).withDescription(\\\"this is a simple option\\\").create('s');\\r\\n     assertEquals(\\\"s\\\", simple.getOpt());\\r\\n     assertEquals(\\\"simple option\\\", simple.getLongOpt());\\r\\n     assertEquals(\\\"this is a simple option\\\", simple.getDescription());\\r\\n     assertEquals(simple.getType(), Float.class);\\r\\n     assertTrue(simple.hasArg());\\r\\n     assertTrue(simple.isRequired());\\r\\n     assertTrue(simple.hasArgs());\\r\\n     simple = OptionBuilder.withLongOpt(\\\"dimple option\\\").hasArg().withDescription(\\\"this is a dimple option\\\").create('d');\\r\\n     assertEquals(\\\"d\\\", simple.getOpt());\\r\\n     assertEquals(\\\"dimple option\\\", simple.getLongOpt());\\r\\n     assertEquals(\\\"this is a dimple option\\\", simple.getDescription());\\r\\n     assertEquals(String.class, simple.getType());\\r\\n     assertTrue(simple.hasArg());\\r\\n-    assertTrue(!simple.isRequired());\\r\\n-    assertTrue(!simple.hasArgs());\\r\\n+    assertFalse(simple.isRequired());\\r\\n+    assertFalse(simple.hasArgs());\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"\""},{"authorEmail":"tn@apache.org","authorName":"Thomas Neidhart","commitYear":"2013","diff":"\"@@ -1,18 +1,19 @@\\n+@Test\\r\\n public void testTwoCompleteOptions() {\\r\\n     Option simple = OptionBuilder.withLongOpt(\\\"simple option\\\").hasArg().isRequired().hasArgs().withType(Float.class).withDescription(\\\"this is a simple option\\\").create('s');\\r\\n     assertEquals(\\\"s\\\", simple.getOpt());\\r\\n     assertEquals(\\\"simple option\\\", simple.getLongOpt());\\r\\n     assertEquals(\\\"this is a simple option\\\", simple.getDescription());\\r\\n     assertEquals(simple.getType(), Float.class);\\r\\n     assertTrue(simple.hasArg());\\r\\n     assertTrue(simple.isRequired());\\r\\n     assertTrue(simple.hasArgs());\\r\\n     simple = OptionBuilder.withLongOpt(\\\"dimple option\\\").hasArg().withDescription(\\\"this is a dimple option\\\").create('d');\\r\\n     assertEquals(\\\"d\\\", simple.getOpt());\\r\\n     assertEquals(\\\"dimple option\\\", simple.getLongOpt());\\r\\n     assertEquals(\\\"this is a dimple option\\\", simple.getDescription());\\r\\n     assertEquals(String.class, simple.getType());\\r\\n     assertTrue(simple.hasArg());\\r\\n     assertTrue(!simple.isRequired());\\r\\n     assertTrue(!simple.hasArgs());\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2011","diff":"\"@@ -1,18 +1,18 @@\\n public void testTwoCompleteOptions() {\\r\\n-    Option simple = OptionBuilder.withLongOpt(\\\"simple option\\\").hasArg().isRequired().hasArgs().withType(new Float(10)).withDescription(\\\"this is a simple option\\\").create('s');\\r\\n+    Option simple = OptionBuilder.withLongOpt(\\\"simple option\\\").hasArg().isRequired().hasArgs().withType(Float.class).withDescription(\\\"this is a simple option\\\").create('s');\\r\\n     assertEquals(\\\"s\\\", simple.getOpt());\\r\\n     assertEquals(\\\"simple option\\\", simple.getLongOpt());\\r\\n     assertEquals(\\\"this is a simple option\\\", simple.getDescription());\\r\\n-    assertEquals(simple.getType().getClass(), Float.class);\\r\\n+    assertEquals(simple.getType(), Float.class);\\r\\n     assertTrue(simple.hasArg());\\r\\n     assertTrue(simple.isRequired());\\r\\n     assertTrue(simple.hasArgs());\\r\\n     simple = OptionBuilder.withLongOpt(\\\"dimple option\\\").hasArg().withDescription(\\\"this is a dimple option\\\").create('d');\\r\\n     assertEquals(\\\"d\\\", simple.getOpt());\\r\\n     assertEquals(\\\"dimple option\\\", simple.getLongOpt());\\r\\n     assertEquals(\\\"this is a dimple option\\\", simple.getDescription());\\r\\n-    assertNull(simple.getType());\\r\\n+    assertEquals(String.class, simple.getType());\\r\\n     assertTrue(simple.hasArg());\\r\\n     assertTrue(!simple.isRequired());\\r\\n     assertTrue(!simple.hasArgs());\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -1,18 +1,18 @@\\n public void testTwoCompleteOptions() {\\r\\n-    Option simple = OptionBuilder.withLongOpt(\\\"simple option\\\").hasArg().isRequired().hasMultipleArgs().withType(new Float(10)).withDescription(\\\"this is a simple option\\\").create('s');\\r\\n+    Option simple = OptionBuilder.withLongOpt(\\\"simple option\\\").hasArg().isRequired().hasArgs().withType(new Float(10)).withDescription(\\\"this is a simple option\\\").create('s');\\r\\n     assertEquals(\\\"s\\\", simple.getOpt());\\r\\n     assertEquals(\\\"simple option\\\", simple.getLongOpt());\\r\\n     assertEquals(\\\"this is a simple option\\\", simple.getDescription());\\r\\n     assertEquals(simple.getType().getClass(), Float.class);\\r\\n     assertTrue(simple.hasArg());\\r\\n     assertTrue(simple.isRequired());\\r\\n-    assertTrue(simple.hasMultipleArgs());\\r\\n+    assertTrue(simple.hasArgs());\\r\\n     simple = OptionBuilder.withLongOpt(\\\"dimple option\\\").hasArg().withDescription(\\\"this is a dimple option\\\").create('d');\\r\\n     assertEquals(\\\"d\\\", simple.getOpt());\\r\\n     assertEquals(\\\"dimple option\\\", simple.getLongOpt());\\r\\n     assertEquals(\\\"this is a dimple option\\\", simple.getDescription());\\r\\n     assertNull(simple.getType());\\r\\n     assertTrue(simple.hasArg());\\r\\n     assertTrue(!simple.isRequired());\\r\\n-    assertTrue(!simple.hasMultipleArgs());\\r\\n+    assertTrue(!simple.hasArgs());\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -0,0 +1,18 @@\\n+public void testTwoCompleteOptions() {\\r\\n+    Option simple = OptionBuilder.withLongOpt(\\\"simple option\\\").hasArg().isRequired().hasMultipleArgs().withType(new Float(10)).withDescription(\\\"this is a simple option\\\").create('s');\\r\\n+    assertEquals(\\\"s\\\", simple.getOpt());\\r\\n+    assertEquals(\\\"simple option\\\", simple.getLongOpt());\\r\\n+    assertEquals(\\\"this is a simple option\\\", simple.getDescription());\\r\\n+    assertEquals(simple.getType().getClass(), Float.class);\\r\\n+    assertTrue(simple.hasArg());\\r\\n+    assertTrue(simple.isRequired());\\r\\n+    assertTrue(simple.hasMultipleArgs());\\r\\n+    simple = OptionBuilder.withLongOpt(\\\"dimple option\\\").hasArg().withDescription(\\\"this is a dimple option\\\").create('d');\\r\\n+    assertEquals(\\\"d\\\", simple.getOpt());\\r\\n+    assertEquals(\\\"dimple option\\\", simple.getLongOpt());\\r\\n+    assertEquals(\\\"this is a dimple option\\\", simple.getDescription());\\r\\n+    assertNull(simple.getType());\\r\\n+    assertTrue(simple.hasArg());\\r\\n+    assertTrue(!simple.isRequired());\\r\\n+    assertTrue(!simple.hasMultipleArgs());\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\test\java\org\apache\commons\cli\OptionGroupTest.java	setUp	org.apache.commons.cli.OptionGroupTest.setUp()	37	61	1	[{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"@@ -1,22 +1,22 @@\\n @Before\\r\\n public void setUp() {\\r\\n     final Option file = new Option(\\\"f\\\", \\\"file\\\", false, \\\"file to process\\\");\\r\\n     final Option dir = new Option(\\\"d\\\", \\\"directory\\\", false, \\\"directory to process\\\");\\r\\n     final OptionGroup group = new OptionGroup();\\r\\n     group.addOption(file);\\r\\n     group.addOption(dir);\\r\\n-    _options = new Options().addOptionGroup(group);\\r\\n+    options = new Options().addOptionGroup(group);\\r\\n     final Option section = new Option(\\\"s\\\", \\\"section\\\", false, \\\"section to process\\\");\\r\\n     final Option chapter = new Option(\\\"c\\\", \\\"chapter\\\", false, \\\"chapter to process\\\");\\r\\n     final OptionGroup group2 = new OptionGroup();\\r\\n     group2.addOption(section);\\r\\n     group2.addOption(chapter);\\r\\n-    _options.addOptionGroup(group2);\\r\\n+    options.addOptionGroup(group2);\\r\\n     final Option importOpt = new Option(null, \\\"import\\\", false, \\\"section to process\\\");\\r\\n     final Option exportOpt = new Option(null, \\\"export\\\", false, \\\"chapter to process\\\");\\r\\n     final OptionGroup group3 = new OptionGroup();\\r\\n     group3.addOption(importOpt);\\r\\n     group3.addOption(exportOpt);\\r\\n-    _options.addOptionGroup(group3);\\r\\n-    _options.addOption(\\\"r\\\", \\\"revision\\\", false, \\\"revision number\\\");\\r\\n+    options.addOptionGroup(group3);\\r\\n+    options.addOption(\\\"r\\\", \\\"revision\\\", false, \\\"revision number\\\");\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,22 +1,22 @@\\n @Before\\r\\n public void setUp() {\\r\\n-    Option file = new Option(\\\"f\\\", \\\"file\\\", false, \\\"file to process\\\");\\r\\n-    Option dir = new Option(\\\"d\\\", \\\"directory\\\", false, \\\"directory to process\\\");\\r\\n-    OptionGroup group = new OptionGroup();\\r\\n+    final Option file = new Option(\\\"f\\\", \\\"file\\\", false, \\\"file to process\\\");\\r\\n+    final Option dir = new Option(\\\"d\\\", \\\"directory\\\", false, \\\"directory to process\\\");\\r\\n+    final OptionGroup group = new OptionGroup();\\r\\n     group.addOption(file);\\r\\n     group.addOption(dir);\\r\\n     _options = new Options().addOptionGroup(group);\\r\\n-    Option section = new Option(\\\"s\\\", \\\"section\\\", false, \\\"section to process\\\");\\r\\n-    Option chapter = new Option(\\\"c\\\", \\\"chapter\\\", false, \\\"chapter to process\\\");\\r\\n-    OptionGroup group2 = new OptionGroup();\\r\\n+    final Option section = new Option(\\\"s\\\", \\\"section\\\", false, \\\"section to process\\\");\\r\\n+    final Option chapter = new Option(\\\"c\\\", \\\"chapter\\\", false, \\\"chapter to process\\\");\\r\\n+    final OptionGroup group2 = new OptionGroup();\\r\\n     group2.addOption(section);\\r\\n     group2.addOption(chapter);\\r\\n     _options.addOptionGroup(group2);\\r\\n-    Option importOpt = new Option(null, \\\"import\\\", false, \\\"section to process\\\");\\r\\n-    Option exportOpt = new Option(null, \\\"export\\\", false, \\\"chapter to process\\\");\\r\\n-    OptionGroup group3 = new OptionGroup();\\r\\n+    final Option importOpt = new Option(null, \\\"import\\\", false, \\\"section to process\\\");\\r\\n+    final Option exportOpt = new Option(null, \\\"export\\\", false, \\\"chapter to process\\\");\\r\\n+    final OptionGroup group3 = new OptionGroup();\\r\\n     group3.addOption(importOpt);\\r\\n     group3.addOption(exportOpt);\\r\\n     _options.addOptionGroup(group3);\\r\\n     _options.addOption(\\\"r\\\", \\\"revision\\\", false, \\\"revision number\\\");\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"tn@apache.org","authorName":"Thomas Neidhart","commitYear":"2013","diff":"\"@@ -1,22 +1,22 @@\\n-@Override\\r\\n+@Before\\r\\n public void setUp() {\\r\\n     Option file = new Option(\\\"f\\\", \\\"file\\\", false, \\\"file to process\\\");\\r\\n     Option dir = new Option(\\\"d\\\", \\\"directory\\\", false, \\\"directory to process\\\");\\r\\n     OptionGroup group = new OptionGroup();\\r\\n     group.addOption(file);\\r\\n     group.addOption(dir);\\r\\n     _options = new Options().addOptionGroup(group);\\r\\n     Option section = new Option(\\\"s\\\", \\\"section\\\", false, \\\"section to process\\\");\\r\\n     Option chapter = new Option(\\\"c\\\", \\\"chapter\\\", false, \\\"chapter to process\\\");\\r\\n     OptionGroup group2 = new OptionGroup();\\r\\n     group2.addOption(section);\\r\\n     group2.addOption(chapter);\\r\\n     _options.addOptionGroup(group2);\\r\\n     Option importOpt = new Option(null, \\\"import\\\", false, \\\"section to process\\\");\\r\\n     Option exportOpt = new Option(null, \\\"export\\\", false, \\\"chapter to process\\\");\\r\\n     OptionGroup group3 = new OptionGroup();\\r\\n     group3.addOption(importOpt);\\r\\n     group3.addOption(exportOpt);\\r\\n     _options.addOptionGroup(group3);\\r\\n     _options.addOption(\\\"r\\\", \\\"revision\\\", false, \\\"revision number\\\");\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"sebb@apache.org","authorName":"Sebastian Bazley","commitYear":"2013","diff":"\"@@ -1,21 +1,22 @@\\n+@Override\\r\\n public void setUp() {\\r\\n     Option file = new Option(\\\"f\\\", \\\"file\\\", false, \\\"file to process\\\");\\r\\n     Option dir = new Option(\\\"d\\\", \\\"directory\\\", false, \\\"directory to process\\\");\\r\\n     OptionGroup group = new OptionGroup();\\r\\n     group.addOption(file);\\r\\n     group.addOption(dir);\\r\\n     _options = new Options().addOptionGroup(group);\\r\\n     Option section = new Option(\\\"s\\\", \\\"section\\\", false, \\\"section to process\\\");\\r\\n     Option chapter = new Option(\\\"c\\\", \\\"chapter\\\", false, \\\"chapter to process\\\");\\r\\n     OptionGroup group2 = new OptionGroup();\\r\\n     group2.addOption(section);\\r\\n     group2.addOption(chapter);\\r\\n     _options.addOptionGroup(group2);\\r\\n     Option importOpt = new Option(null, \\\"import\\\", false, \\\"section to process\\\");\\r\\n     Option exportOpt = new Option(null, \\\"export\\\", false, \\\"chapter to process\\\");\\r\\n     OptionGroup group3 = new OptionGroup();\\r\\n     group3.addOption(importOpt);\\r\\n     group3.addOption(exportOpt);\\r\\n     _options.addOptionGroup(group3);\\r\\n     _options.addOption(\\\"r\\\", \\\"revision\\\", false, \\\"revision number\\\");\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -1,15 +1,21 @@\\n public void setUp() {\\r\\n     Option file = new Option(\\\"f\\\", \\\"file\\\", false, \\\"file to process\\\");\\r\\n     Option dir = new Option(\\\"d\\\", \\\"directory\\\", false, \\\"directory to process\\\");\\r\\n     OptionGroup group = new OptionGroup();\\r\\n     group.addOption(file);\\r\\n     group.addOption(dir);\\r\\n     _options = new Options().addOptionGroup(group);\\r\\n     Option section = new Option(\\\"s\\\", \\\"section\\\", false, \\\"section to process\\\");\\r\\n     Option chapter = new Option(\\\"c\\\", \\\"chapter\\\", false, \\\"chapter to process\\\");\\r\\n     OptionGroup group2 = new OptionGroup();\\r\\n     group2.addOption(section);\\r\\n     group2.addOption(chapter);\\r\\n     _options.addOptionGroup(group2);\\r\\n+    Option importOpt = new Option(null, \\\"import\\\", false, \\\"section to process\\\");\\r\\n+    Option exportOpt = new Option(null, \\\"export\\\", false, \\\"chapter to process\\\");\\r\\n+    OptionGroup group3 = new OptionGroup();\\r\\n+    group3.addOption(importOpt);\\r\\n+    group3.addOption(exportOpt);\\r\\n+    _options.addOptionGroup(group3);\\r\\n     _options.addOption(\\\"r\\\", \\\"revision\\\", false, \\\"revision number\\\");\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -1,15 +1,15 @@\\n public void setUp() {\\r\\n-    Option file = new Option('f', \\\"file\\\", false, \\\"file to process\\\");\\r\\n-    Option dir = new Option('d', \\\"directory\\\", false, \\\"directory to process\\\");\\r\\n+    Option file = new Option(\\\"f\\\", \\\"file\\\", false, \\\"file to process\\\");\\r\\n+    Option dir = new Option(\\\"d\\\", \\\"directory\\\", false, \\\"directory to process\\\");\\r\\n     OptionGroup group = new OptionGroup();\\r\\n     group.addOption(file);\\r\\n     group.addOption(dir);\\r\\n     _options = new Options().addOptionGroup(group);\\r\\n-    Option section = new Option('s', \\\"section\\\", false, \\\"section to process\\\");\\r\\n-    Option chapter = new Option('c', \\\"chapter\\\", false, \\\"chapter to process\\\");\\r\\n+    Option section = new Option(\\\"s\\\", \\\"section\\\", false, \\\"section to process\\\");\\r\\n+    Option chapter = new Option(\\\"c\\\", \\\"chapter\\\", false, \\\"chapter to process\\\");\\r\\n     OptionGroup group2 = new OptionGroup();\\r\\n     group2.addOption(section);\\r\\n     group2.addOption(chapter);\\r\\n     _options.addOptionGroup(group2);\\r\\n-    _options.addOption('r', \\\"revision\\\", false, \\\"revision number\\\");\\r\\n+    _options.addOption(\\\"r\\\", \\\"revision\\\", false, \\\"revision number\\\");\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jstrachan@apache.org","authorName":"James Strachan","commitYear":"2002","diff":"\"@@ -0,0 +1,15 @@\\n+public void setUp() {\\r\\n+    Option file = new Option('f', \\\"file\\\", false, \\\"file to process\\\");\\r\\n+    Option dir = new Option('d', \\\"directory\\\", false, \\\"directory to process\\\");\\r\\n+    OptionGroup group = new OptionGroup();\\r\\n+    group.addOption(file);\\r\\n+    group.addOption(dir);\\r\\n+    _options = new Options().addOptionGroup(group);\\r\\n+    Option section = new Option('s', \\\"section\\\", false, \\\"section to process\\\");\\r\\n+    Option chapter = new Option('c', \\\"chapter\\\", false, \\\"chapter to process\\\");\\r\\n+    OptionGroup group2 = new OptionGroup();\\r\\n+    group2.addOption(section);\\r\\n+    group2.addOption(chapter);\\r\\n+    _options.addOptionGroup(group2);\\r\\n+    _options.addOption('r', \\\"revision\\\", false, \\\"revision number\\\");\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\test\java\org\apache\commons\cli\OptionGroupTest.java	testGetNames	org.apache.commons.cli.OptionGroupTest.testGetNames()	64	73	1	[{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,10 +1,10 @@\\n @Test\\r\\n public void testGetNames() {\\r\\n-    OptionGroup group = new OptionGroup();\\r\\n+    final OptionGroup group = new OptionGroup();\\r\\n     group.addOption(OptionBuilder.create('a'));\\r\\n     group.addOption(OptionBuilder.create('b'));\\r\\n     assertNotNull(\\\"null names\\\", group.getNames());\\r\\n     assertEquals(2, group.getNames().size());\\r\\n     assertTrue(group.getNames().contains(\\\"a\\\"));\\r\\n     assertTrue(group.getNames().contains(\\\"b\\\"));\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"tn@apache.org","authorName":"Thomas Neidhart","commitYear":"2013","diff":"\"@@ -1,9 +1,10 @@\\n+@Test\\r\\n public void testGetNames() {\\r\\n     OptionGroup group = new OptionGroup();\\r\\n     group.addOption(OptionBuilder.create('a'));\\r\\n     group.addOption(OptionBuilder.create('b'));\\r\\n     assertNotNull(\\\"null names\\\", group.getNames());\\r\\n     assertEquals(2, group.getNames().size());\\r\\n     assertTrue(group.getNames().contains(\\\"a\\\"));\\r\\n     assertTrue(group.getNames().contains(\\\"b\\\"));\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2008","diff":"\"@@ -0,0 +1,9 @@\\n+public void testGetNames() {\\r\\n+    OptionGroup group = new OptionGroup();\\r\\n+    group.addOption(OptionBuilder.create('a'));\\r\\n+    group.addOption(OptionBuilder.create('b'));\\r\\n+    assertNotNull(\\\"null names\\\", group.getNames());\\r\\n+    assertEquals(2, group.getNames().size());\\r\\n+    assertTrue(group.getNames().contains(\\\"a\\\"));\\r\\n+    assertTrue(group.getNames().contains(\\\"b\\\"));\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\test\java\org\apache\commons\cli\OptionGroupTest.java	testNoOptionsExtraArgs	org.apache.commons.cli.OptionGroupTest.testNoOptionsExtraArgs()	76	87	1	[{"authorEmail":"arturobernalg@gmail.com","authorName":"Arturo Bernal","commitYear":"2021","diff":"\"@@ -1,11 +1,11 @@\\n @Test\\r\\n public void testNoOptionsExtraArgs() throws Exception {\\r\\n     final String[] args = { \\\"arg1\\\", \\\"arg2\\\" };\\r\\n     final CommandLine cl = parser.parse(options, args);\\r\\n-    assertTrue(\\\"Confirm -r is NOT set\\\", !cl.hasOption(\\\"r\\\"));\\r\\n-    assertTrue(\\\"Confirm -f is NOT set\\\", !cl.hasOption(\\\"f\\\"));\\r\\n-    assertTrue(\\\"Confirm -d is NOT set\\\", !cl.hasOption(\\\"d\\\"));\\r\\n-    assertTrue(\\\"Confirm -s is NOT set\\\", !cl.hasOption(\\\"s\\\"));\\r\\n-    assertTrue(\\\"Confirm -c is NOT set\\\", !cl.hasOption(\\\"c\\\"));\\r\\n-    assertTrue(\\\"Confirm TWO extra args\\\", cl.getArgList().size() == 2);\\r\\n+    assertFalse(\\\"Confirm -r is NOT set\\\", cl.hasOption(\\\"r\\\"));\\r\\n+    assertFalse(\\\"Confirm -f is NOT set\\\", cl.hasOption(\\\"f\\\"));\\r\\n+    assertFalse(\\\"Confirm -d is NOT set\\\", cl.hasOption(\\\"d\\\"));\\r\\n+    assertFalse(\\\"Confirm -s is NOT set\\\", cl.hasOption(\\\"s\\\"));\\r\\n+    assertFalse(\\\"Confirm -c is NOT set\\\", cl.hasOption(\\\"c\\\"));\\r\\n+    assertEquals(\\\"Confirm TWO extra args\\\", 2, cl.getArgList().size());\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"@@ -1,11 +1,11 @@\\n @Test\\r\\n public void testNoOptionsExtraArgs() throws Exception {\\r\\n-    final String[] args = new String[] { \\\"arg1\\\", \\\"arg2\\\" };\\r\\n-    final CommandLine cl = parser.parse(_options, args);\\r\\n+    final String[] args = { \\\"arg1\\\", \\\"arg2\\\" };\\r\\n+    final CommandLine cl = parser.parse(options, args);\\r\\n     assertTrue(\\\"Confirm -r is NOT set\\\", !cl.hasOption(\\\"r\\\"));\\r\\n     assertTrue(\\\"Confirm -f is NOT set\\\", !cl.hasOption(\\\"f\\\"));\\r\\n     assertTrue(\\\"Confirm -d is NOT set\\\", !cl.hasOption(\\\"d\\\"));\\r\\n     assertTrue(\\\"Confirm -s is NOT set\\\", !cl.hasOption(\\\"s\\\"));\\r\\n     assertTrue(\\\"Confirm -c is NOT set\\\", !cl.hasOption(\\\"c\\\"));\\r\\n     assertTrue(\\\"Confirm TWO extra args\\\", cl.getArgList().size() == 2);\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,11 +1,11 @@\\n @Test\\r\\n public void testNoOptionsExtraArgs() throws Exception {\\r\\n-    String[] args = new String[] { \\\"arg1\\\", \\\"arg2\\\" };\\r\\n-    CommandLine cl = parser.parse(_options, args);\\r\\n+    final String[] args = new String[] { \\\"arg1\\\", \\\"arg2\\\" };\\r\\n+    final CommandLine cl = parser.parse(_options, args);\\r\\n     assertTrue(\\\"Confirm -r is NOT set\\\", !cl.hasOption(\\\"r\\\"));\\r\\n     assertTrue(\\\"Confirm -f is NOT set\\\", !cl.hasOption(\\\"f\\\"));\\r\\n     assertTrue(\\\"Confirm -d is NOT set\\\", !cl.hasOption(\\\"d\\\"));\\r\\n     assertTrue(\\\"Confirm -s is NOT set\\\", !cl.hasOption(\\\"s\\\"));\\r\\n     assertTrue(\\\"Confirm -c is NOT set\\\", !cl.hasOption(\\\"c\\\"));\\r\\n     assertTrue(\\\"Confirm TWO extra args\\\", cl.getArgList().size() == 2);\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"tn@apache.org","authorName":"Thomas Neidhart","commitYear":"2013","diff":"\"@@ -1,10 +1,11 @@\\n+@Test\\r\\n public void testNoOptionsExtraArgs() throws Exception {\\r\\n     String[] args = new String[] { \\\"arg1\\\", \\\"arg2\\\" };\\r\\n     CommandLine cl = parser.parse(_options, args);\\r\\n     assertTrue(\\\"Confirm -r is NOT set\\\", !cl.hasOption(\\\"r\\\"));\\r\\n     assertTrue(\\\"Confirm -f is NOT set\\\", !cl.hasOption(\\\"f\\\"));\\r\\n     assertTrue(\\\"Confirm -d is NOT set\\\", !cl.hasOption(\\\"d\\\"));\\r\\n     assertTrue(\\\"Confirm -s is NOT set\\\", !cl.hasOption(\\\"s\\\"));\\r\\n     assertTrue(\\\"Confirm -c is NOT set\\\", !cl.hasOption(\\\"c\\\"));\\r\\n     assertTrue(\\\"Confirm TWO extra args\\\", cl.getArgList().size() == 2);\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2008","diff":"\"@@ -1,14 +1,10 @@\\n-public void testNoOptionsExtraArgs() {\\r\\n+public void testNoOptionsExtraArgs() throws Exception {\\r\\n     String[] args = new String[] { \\\"arg1\\\", \\\"arg2\\\" };\\r\\n-    try {\\r\\n-        CommandLine cl = parser.parse(_options, args);\\r\\n-        assertTrue(\\\"Confirm -r is NOT set\\\", !cl.hasOption(\\\"r\\\"));\\r\\n-        assertTrue(\\\"Confirm -f is NOT set\\\", !cl.hasOption(\\\"f\\\"));\\r\\n-        assertTrue(\\\"Confirm -d is NOT set\\\", !cl.hasOption(\\\"d\\\"));\\r\\n-        assertTrue(\\\"Confirm -s is NOT set\\\", !cl.hasOption(\\\"s\\\"));\\r\\n-        assertTrue(\\\"Confirm -c is NOT set\\\", !cl.hasOption(\\\"c\\\"));\\r\\n-        assertTrue(\\\"Confirm TWO extra args\\\", cl.getArgList().size() == 2);\\r\\n-    } catch (ParseException e) {\\r\\n-        fail(e.toString());\\r\\n-    }\\r\\n+    CommandLine cl = parser.parse(_options, args);\\r\\n+    assertTrue(\\\"Confirm -r is NOT set\\\", !cl.hasOption(\\\"r\\\"));\\r\\n+    assertTrue(\\\"Confirm -f is NOT set\\\", !cl.hasOption(\\\"f\\\"));\\r\\n+    assertTrue(\\\"Confirm -d is NOT set\\\", !cl.hasOption(\\\"d\\\"));\\r\\n+    assertTrue(\\\"Confirm -s is NOT set\\\", !cl.hasOption(\\\"s\\\"));\\r\\n+    assertTrue(\\\"Confirm -c is NOT set\\\", !cl.hasOption(\\\"c\\\"));\\r\\n+    assertTrue(\\\"Confirm TWO extra args\\\", cl.getArgList().size() == 2);\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -1,14 +1,14 @@\\n public void testNoOptionsExtraArgs() {\\r\\n     String[] args = new String[] { \\\"arg1\\\", \\\"arg2\\\" };\\r\\n     try {\\r\\n-        CommandLine cl = _options.parse(args);\\r\\n+        CommandLine cl = parser.parse(_options, args);\\r\\n         assertTrue(\\\"Confirm -r is NOT set\\\", !cl.hasOption(\\\"r\\\"));\\r\\n         assertTrue(\\\"Confirm -f is NOT set\\\", !cl.hasOption(\\\"f\\\"));\\r\\n         assertTrue(\\\"Confirm -d is NOT set\\\", !cl.hasOption(\\\"d\\\"));\\r\\n         assertTrue(\\\"Confirm -s is NOT set\\\", !cl.hasOption(\\\"s\\\"));\\r\\n         assertTrue(\\\"Confirm -c is NOT set\\\", !cl.hasOption(\\\"c\\\"));\\r\\n         assertTrue(\\\"Confirm TWO extra args\\\", cl.getArgList().size() == 2);\\r\\n     } catch (ParseException e) {\\r\\n         fail(e.toString());\\r\\n     }\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -1,14 +1,14 @@\\n public void testNoOptionsExtraArgs() {\\r\\n     String[] args = new String[] { \\\"arg1\\\", \\\"arg2\\\" };\\r\\n     try {\\r\\n         CommandLine cl = _options.parse(args);\\r\\n-        assertTrue(\\\"Confirm -r is NOT set\\\", !cl.hasOption('r'));\\r\\n-        assertTrue(\\\"Confirm -f is NOT set\\\", !cl.hasOption('f'));\\r\\n-        assertTrue(\\\"Confirm -d is NOT set\\\", !cl.hasOption('d'));\\r\\n-        assertTrue(\\\"Confirm -s is NOT set\\\", !cl.hasOption('s'));\\r\\n-        assertTrue(\\\"Confirm -c is NOT set\\\", !cl.hasOption('c'));\\r\\n+        assertTrue(\\\"Confirm -r is NOT set\\\", !cl.hasOption(\\\"r\\\"));\\r\\n+        assertTrue(\\\"Confirm -f is NOT set\\\", !cl.hasOption(\\\"f\\\"));\\r\\n+        assertTrue(\\\"Confirm -d is NOT set\\\", !cl.hasOption(\\\"d\\\"));\\r\\n+        assertTrue(\\\"Confirm -s is NOT set\\\", !cl.hasOption(\\\"s\\\"));\\r\\n+        assertTrue(\\\"Confirm -c is NOT set\\\", !cl.hasOption(\\\"c\\\"));\\r\\n         assertTrue(\\\"Confirm TWO extra args\\\", cl.getArgList().size() == 2);\\r\\n     } catch (ParseException e) {\\r\\n         fail(e.toString());\\r\\n     }\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jstrachan@apache.org","authorName":"James Strachan","commitYear":"2002","diff":"\"@@ -0,0 +1,14 @@\\n+public void testNoOptionsExtraArgs() {\\r\\n+    String[] args = new String[] { \\\"arg1\\\", \\\"arg2\\\" };\\r\\n+    try {\\r\\n+        CommandLine cl = _options.parse(args);\\r\\n+        assertTrue(\\\"Confirm -r is NOT set\\\", !cl.hasOption('r'));\\r\\n+        assertTrue(\\\"Confirm -f is NOT set\\\", !cl.hasOption('f'));\\r\\n+        assertTrue(\\\"Confirm -d is NOT set\\\", !cl.hasOption('d'));\\r\\n+        assertTrue(\\\"Confirm -s is NOT set\\\", !cl.hasOption('s'));\\r\\n+        assertTrue(\\\"Confirm -c is NOT set\\\", !cl.hasOption('c'));\\r\\n+        assertTrue(\\\"Confirm TWO extra args\\\", cl.getArgList().size() == 2);\\r\\n+    } catch (ParseException e) {\\r\\n+        fail(e.toString());\\r\\n+    }\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\test\java\org\apache\commons\cli\OptionGroupTest.java	testSingleLongOption	org.apache.commons.cli.OptionGroupTest.testSingleLongOption()	90	101	1	[{"authorEmail":"arturobernalg@gmail.com","authorName":"Arturo Bernal","commitYear":"2021","diff":"\"@@ -1,11 +1,11 @@\\n @Test\\r\\n public void testSingleLongOption() throws Exception {\\r\\n     final String[] args = { \\\"--file\\\" };\\r\\n     final CommandLine cl = parser.parse(options, args);\\r\\n-    assertTrue(\\\"Confirm -r is NOT set\\\", !cl.hasOption(\\\"r\\\"));\\r\\n+    assertFalse(\\\"Confirm -r is NOT set\\\", cl.hasOption(\\\"r\\\"));\\r\\n     assertTrue(\\\"Confirm -f is set\\\", cl.hasOption(\\\"f\\\"));\\r\\n-    assertTrue(\\\"Confirm -d is NOT set\\\", !cl.hasOption(\\\"d\\\"));\\r\\n-    assertTrue(\\\"Confirm -s is NOT set\\\", !cl.hasOption(\\\"s\\\"));\\r\\n-    assertTrue(\\\"Confirm -c is NOT set\\\", !cl.hasOption(\\\"c\\\"));\\r\\n+    assertFalse(\\\"Confirm -d is NOT set\\\", cl.hasOption(\\\"d\\\"));\\r\\n+    assertFalse(\\\"Confirm -s is NOT set\\\", cl.hasOption(\\\"s\\\"));\\r\\n+    assertFalse(\\\"Confirm -c is NOT set\\\", cl.hasOption(\\\"c\\\"));\\r\\n     assertTrue(\\\"Confirm no extra args\\\", cl.getArgList().isEmpty());\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"@@ -1,11 +1,11 @@\\n @Test\\r\\n public void testSingleLongOption() throws Exception {\\r\\n-    final String[] args = new String[] { \\\"--file\\\" };\\r\\n-    final CommandLine cl = parser.parse(_options, args);\\r\\n+    final String[] args = { \\\"--file\\\" };\\r\\n+    final CommandLine cl = parser.parse(options, args);\\r\\n     assertTrue(\\\"Confirm -r is NOT set\\\", !cl.hasOption(\\\"r\\\"));\\r\\n     assertTrue(\\\"Confirm -f is set\\\", cl.hasOption(\\\"f\\\"));\\r\\n     assertTrue(\\\"Confirm -d is NOT set\\\", !cl.hasOption(\\\"d\\\"));\\r\\n     assertTrue(\\\"Confirm -s is NOT set\\\", !cl.hasOption(\\\"s\\\"));\\r\\n     assertTrue(\\\"Confirm -c is NOT set\\\", !cl.hasOption(\\\"c\\\"));\\r\\n     assertTrue(\\\"Confirm no extra args\\\", cl.getArgList().isEmpty());\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"@@ -1,11 +1,11 @@\\n @Test\\r\\n public void testSingleLongOption() throws Exception {\\r\\n     final String[] args = new String[] { \\\"--file\\\" };\\r\\n     final CommandLine cl = parser.parse(_options, args);\\r\\n     assertTrue(\\\"Confirm -r is NOT set\\\", !cl.hasOption(\\\"r\\\"));\\r\\n     assertTrue(\\\"Confirm -f is set\\\", cl.hasOption(\\\"f\\\"));\\r\\n     assertTrue(\\\"Confirm -d is NOT set\\\", !cl.hasOption(\\\"d\\\"));\\r\\n     assertTrue(\\\"Confirm -s is NOT set\\\", !cl.hasOption(\\\"s\\\"));\\r\\n     assertTrue(\\\"Confirm -c is NOT set\\\", !cl.hasOption(\\\"c\\\"));\\r\\n-    assertTrue(\\\"Confirm no extra args\\\", cl.getArgList().size() == 0);\\r\\n+    assertTrue(\\\"Confirm no extra args\\\", cl.getArgList().isEmpty());\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,11 +1,11 @@\\n @Test\\r\\n public void testSingleLongOption() throws Exception {\\r\\n-    String[] args = new String[] { \\\"--file\\\" };\\r\\n-    CommandLine cl = parser.parse(_options, args);\\r\\n+    final String[] args = new String[] { \\\"--file\\\" };\\r\\n+    final CommandLine cl = parser.parse(_options, args);\\r\\n     assertTrue(\\\"Confirm -r is NOT set\\\", !cl.hasOption(\\\"r\\\"));\\r\\n     assertTrue(\\\"Confirm -f is set\\\", cl.hasOption(\\\"f\\\"));\\r\\n     assertTrue(\\\"Confirm -d is NOT set\\\", !cl.hasOption(\\\"d\\\"));\\r\\n     assertTrue(\\\"Confirm -s is NOT set\\\", !cl.hasOption(\\\"s\\\"));\\r\\n     assertTrue(\\\"Confirm -c is NOT set\\\", !cl.hasOption(\\\"c\\\"));\\r\\n     assertTrue(\\\"Confirm no extra args\\\", cl.getArgList().size() == 0);\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"tn@apache.org","authorName":"Thomas Neidhart","commitYear":"2013","diff":"\"@@ -1,10 +1,11 @@\\n+@Test\\r\\n public void testSingleLongOption() throws Exception {\\r\\n     String[] args = new String[] { \\\"--file\\\" };\\r\\n     CommandLine cl = parser.parse(_options, args);\\r\\n     assertTrue(\\\"Confirm -r is NOT set\\\", !cl.hasOption(\\\"r\\\"));\\r\\n     assertTrue(\\\"Confirm -f is set\\\", cl.hasOption(\\\"f\\\"));\\r\\n     assertTrue(\\\"Confirm -d is NOT set\\\", !cl.hasOption(\\\"d\\\"));\\r\\n     assertTrue(\\\"Confirm -s is NOT set\\\", !cl.hasOption(\\\"s\\\"));\\r\\n     assertTrue(\\\"Confirm -c is NOT set\\\", !cl.hasOption(\\\"c\\\"));\\r\\n     assertTrue(\\\"Confirm no extra args\\\", cl.getArgList().size() == 0);\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2008","diff":"\"@@ -1,14 +1,10 @@\\n-public void testSingleLongOption() {\\r\\n+public void testSingleLongOption() throws Exception {\\r\\n     String[] args = new String[] { \\\"--file\\\" };\\r\\n-    try {\\r\\n-        CommandLine cl = parser.parse(_options, args);\\r\\n-        assertTrue(\\\"Confirm -r is NOT set\\\", !cl.hasOption(\\\"r\\\"));\\r\\n-        assertTrue(\\\"Confirm -f is set\\\", cl.hasOption(\\\"f\\\"));\\r\\n-        assertTrue(\\\"Confirm -d is NOT set\\\", !cl.hasOption(\\\"d\\\"));\\r\\n-        assertTrue(\\\"Confirm -s is NOT set\\\", !cl.hasOption(\\\"s\\\"));\\r\\n-        assertTrue(\\\"Confirm -c is NOT set\\\", !cl.hasOption(\\\"c\\\"));\\r\\n-        assertTrue(\\\"Confirm no extra args\\\", cl.getArgList().size() == 0);\\r\\n-    } catch (ParseException e) {\\r\\n-        fail(e.toString());\\r\\n-    }\\r\\n+    CommandLine cl = parser.parse(_options, args);\\r\\n+    assertTrue(\\\"Confirm -r is NOT set\\\", !cl.hasOption(\\\"r\\\"));\\r\\n+    assertTrue(\\\"Confirm -f is set\\\", cl.hasOption(\\\"f\\\"));\\r\\n+    assertTrue(\\\"Confirm -d is NOT set\\\", !cl.hasOption(\\\"d\\\"));\\r\\n+    assertTrue(\\\"Confirm -s is NOT set\\\", !cl.hasOption(\\\"s\\\"));\\r\\n+    assertTrue(\\\"Confirm -c is NOT set\\\", !cl.hasOption(\\\"c\\\"));\\r\\n+    assertTrue(\\\"Confirm no extra args\\\", cl.getArgList().size() == 0);\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -1,14 +1,14 @@\\n public void testSingleLongOption() {\\r\\n     String[] args = new String[] { \\\"--file\\\" };\\r\\n     try {\\r\\n-        CommandLine cl = _options.parse(args);\\r\\n+        CommandLine cl = parser.parse(_options, args);\\r\\n         assertTrue(\\\"Confirm -r is NOT set\\\", !cl.hasOption(\\\"r\\\"));\\r\\n         assertTrue(\\\"Confirm -f is set\\\", cl.hasOption(\\\"f\\\"));\\r\\n         assertTrue(\\\"Confirm -d is NOT set\\\", !cl.hasOption(\\\"d\\\"));\\r\\n         assertTrue(\\\"Confirm -s is NOT set\\\", !cl.hasOption(\\\"s\\\"));\\r\\n         assertTrue(\\\"Confirm -c is NOT set\\\", !cl.hasOption(\\\"c\\\"));\\r\\n         assertTrue(\\\"Confirm no extra args\\\", cl.getArgList().size() == 0);\\r\\n     } catch (ParseException e) {\\r\\n         fail(e.toString());\\r\\n     }\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -1,14 +1,14 @@\\n public void testSingleLongOption() {\\r\\n     String[] args = new String[] { \\\"--file\\\" };\\r\\n     try {\\r\\n         CommandLine cl = _options.parse(args);\\r\\n-        assertTrue(\\\"Confirm -r is NOT set\\\", !cl.hasOption('r'));\\r\\n-        assertTrue(\\\"Confirm -f is set\\\", cl.hasOption('f'));\\r\\n-        assertTrue(\\\"Confirm -d is NOT set\\\", !cl.hasOption('d'));\\r\\n-        assertTrue(\\\"Confirm -s is NOT set\\\", !cl.hasOption('s'));\\r\\n-        assertTrue(\\\"Confirm -c is NOT set\\\", !cl.hasOption('c'));\\r\\n+        assertTrue(\\\"Confirm -r is NOT set\\\", !cl.hasOption(\\\"r\\\"));\\r\\n+        assertTrue(\\\"Confirm -f is set\\\", cl.hasOption(\\\"f\\\"));\\r\\n+        assertTrue(\\\"Confirm -d is NOT set\\\", !cl.hasOption(\\\"d\\\"));\\r\\n+        assertTrue(\\\"Confirm -s is NOT set\\\", !cl.hasOption(\\\"s\\\"));\\r\\n+        assertTrue(\\\"Confirm -c is NOT set\\\", !cl.hasOption(\\\"c\\\"));\\r\\n         assertTrue(\\\"Confirm no extra args\\\", cl.getArgList().size() == 0);\\r\\n     } catch (ParseException e) {\\r\\n         fail(e.toString());\\r\\n     }\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jstrachan@apache.org","authorName":"James Strachan","commitYear":"2002","diff":"\"@@ -0,0 +1,14 @@\\n+public void testSingleLongOption() {\\r\\n+    String[] args = new String[] { \\\"--file\\\" };\\r\\n+    try {\\r\\n+        CommandLine cl = _options.parse(args);\\r\\n+        assertTrue(\\\"Confirm -r is NOT set\\\", !cl.hasOption('r'));\\r\\n+        assertTrue(\\\"Confirm -f is set\\\", cl.hasOption('f'));\\r\\n+        assertTrue(\\\"Confirm -d is NOT set\\\", !cl.hasOption('d'));\\r\\n+        assertTrue(\\\"Confirm -s is NOT set\\\", !cl.hasOption('s'));\\r\\n+        assertTrue(\\\"Confirm -c is NOT set\\\", !cl.hasOption('c'));\\r\\n+        assertTrue(\\\"Confirm no extra args\\\", cl.getArgList().size() == 0);\\r\\n+    } catch (ParseException e) {\\r\\n+        fail(e.toString());\\r\\n+    }\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\test\java\org\apache\commons\cli\OptionGroupTest.java	testSingleOption	org.apache.commons.cli.OptionGroupTest.testSingleOption()	104	115	1	[{"authorEmail":"arturobernalg@gmail.com","authorName":"Arturo Bernal","commitYear":"2021","diff":"\"@@ -1,11 +1,11 @@\\n @Test\\r\\n public void testSingleOption() throws Exception {\\r\\n     final String[] args = { \\\"-r\\\" };\\r\\n     final CommandLine cl = parser.parse(options, args);\\r\\n     assertTrue(\\\"Confirm -r is set\\\", cl.hasOption(\\\"r\\\"));\\r\\n-    assertTrue(\\\"Confirm -f is NOT set\\\", !cl.hasOption(\\\"f\\\"));\\r\\n-    assertTrue(\\\"Confirm -d is NOT set\\\", !cl.hasOption(\\\"d\\\"));\\r\\n-    assertTrue(\\\"Confirm -s is NOT set\\\", !cl.hasOption(\\\"s\\\"));\\r\\n-    assertTrue(\\\"Confirm -c is NOT set\\\", !cl.hasOption(\\\"c\\\"));\\r\\n+    assertFalse(\\\"Confirm -f is NOT set\\\", cl.hasOption(\\\"f\\\"));\\r\\n+    assertFalse(\\\"Confirm -d is NOT set\\\", cl.hasOption(\\\"d\\\"));\\r\\n+    assertFalse(\\\"Confirm -s is NOT set\\\", cl.hasOption(\\\"s\\\"));\\r\\n+    assertFalse(\\\"Confirm -c is NOT set\\\", cl.hasOption(\\\"c\\\"));\\r\\n     assertTrue(\\\"Confirm no extra args\\\", cl.getArgList().isEmpty());\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"@@ -1,11 +1,11 @@\\n @Test\\r\\n public void testSingleOption() throws Exception {\\r\\n-    final String[] args = new String[] { \\\"-r\\\" };\\r\\n-    final CommandLine cl = parser.parse(_options, args);\\r\\n+    final String[] args = { \\\"-r\\\" };\\r\\n+    final CommandLine cl = parser.parse(options, args);\\r\\n     assertTrue(\\\"Confirm -r is set\\\", cl.hasOption(\\\"r\\\"));\\r\\n     assertTrue(\\\"Confirm -f is NOT set\\\", !cl.hasOption(\\\"f\\\"));\\r\\n     assertTrue(\\\"Confirm -d is NOT set\\\", !cl.hasOption(\\\"d\\\"));\\r\\n     assertTrue(\\\"Confirm -s is NOT set\\\", !cl.hasOption(\\\"s\\\"));\\r\\n     assertTrue(\\\"Confirm -c is NOT set\\\", !cl.hasOption(\\\"c\\\"));\\r\\n     assertTrue(\\\"Confirm no extra args\\\", cl.getArgList().isEmpty());\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"@@ -1,11 +1,11 @@\\n @Test\\r\\n public void testSingleOption() throws Exception {\\r\\n     final String[] args = new String[] { \\\"-r\\\" };\\r\\n     final CommandLine cl = parser.parse(_options, args);\\r\\n     assertTrue(\\\"Confirm -r is set\\\", cl.hasOption(\\\"r\\\"));\\r\\n     assertTrue(\\\"Confirm -f is NOT set\\\", !cl.hasOption(\\\"f\\\"));\\r\\n     assertTrue(\\\"Confirm -d is NOT set\\\", !cl.hasOption(\\\"d\\\"));\\r\\n     assertTrue(\\\"Confirm -s is NOT set\\\", !cl.hasOption(\\\"s\\\"));\\r\\n     assertTrue(\\\"Confirm -c is NOT set\\\", !cl.hasOption(\\\"c\\\"));\\r\\n-    assertTrue(\\\"Confirm no extra args\\\", cl.getArgList().size() == 0);\\r\\n+    assertTrue(\\\"Confirm no extra args\\\", cl.getArgList().isEmpty());\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,11 +1,11 @@\\n @Test\\r\\n public void testSingleOption() throws Exception {\\r\\n-    String[] args = new String[] { \\\"-r\\\" };\\r\\n-    CommandLine cl = parser.parse(_options, args);\\r\\n+    final String[] args = new String[] { \\\"-r\\\" };\\r\\n+    final CommandLine cl = parser.parse(_options, args);\\r\\n     assertTrue(\\\"Confirm -r is set\\\", cl.hasOption(\\\"r\\\"));\\r\\n     assertTrue(\\\"Confirm -f is NOT set\\\", !cl.hasOption(\\\"f\\\"));\\r\\n     assertTrue(\\\"Confirm -d is NOT set\\\", !cl.hasOption(\\\"d\\\"));\\r\\n     assertTrue(\\\"Confirm -s is NOT set\\\", !cl.hasOption(\\\"s\\\"));\\r\\n     assertTrue(\\\"Confirm -c is NOT set\\\", !cl.hasOption(\\\"c\\\"));\\r\\n     assertTrue(\\\"Confirm no extra args\\\", cl.getArgList().size() == 0);\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"tn@apache.org","authorName":"Thomas Neidhart","commitYear":"2013","diff":"\"@@ -1,10 +1,11 @@\\n+@Test\\r\\n public void testSingleOption() throws Exception {\\r\\n     String[] args = new String[] { \\\"-r\\\" };\\r\\n     CommandLine cl = parser.parse(_options, args);\\r\\n     assertTrue(\\\"Confirm -r is set\\\", cl.hasOption(\\\"r\\\"));\\r\\n     assertTrue(\\\"Confirm -f is NOT set\\\", !cl.hasOption(\\\"f\\\"));\\r\\n     assertTrue(\\\"Confirm -d is NOT set\\\", !cl.hasOption(\\\"d\\\"));\\r\\n     assertTrue(\\\"Confirm -s is NOT set\\\", !cl.hasOption(\\\"s\\\"));\\r\\n     assertTrue(\\\"Confirm -c is NOT set\\\", !cl.hasOption(\\\"c\\\"));\\r\\n     assertTrue(\\\"Confirm no extra args\\\", cl.getArgList().size() == 0);\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2008","diff":"\"@@ -1,14 +1,10 @@\\n-public void testSingleOption() {\\r\\n+public void testSingleOption() throws Exception {\\r\\n     String[] args = new String[] { \\\"-r\\\" };\\r\\n-    try {\\r\\n-        CommandLine cl = parser.parse(_options, args);\\r\\n-        assertTrue(\\\"Confirm -r is set\\\", cl.hasOption(\\\"r\\\"));\\r\\n-        assertTrue(\\\"Confirm -f is NOT set\\\", !cl.hasOption(\\\"f\\\"));\\r\\n-        assertTrue(\\\"Confirm -d is NOT set\\\", !cl.hasOption(\\\"d\\\"));\\r\\n-        assertTrue(\\\"Confirm -s is NOT set\\\", !cl.hasOption(\\\"s\\\"));\\r\\n-        assertTrue(\\\"Confirm -c is NOT set\\\", !cl.hasOption(\\\"c\\\"));\\r\\n-        assertTrue(\\\"Confirm no extra args\\\", cl.getArgList().size() == 0);\\r\\n-    } catch (ParseException e) {\\r\\n-        fail(e.toString());\\r\\n-    }\\r\\n+    CommandLine cl = parser.parse(_options, args);\\r\\n+    assertTrue(\\\"Confirm -r is set\\\", cl.hasOption(\\\"r\\\"));\\r\\n+    assertTrue(\\\"Confirm -f is NOT set\\\", !cl.hasOption(\\\"f\\\"));\\r\\n+    assertTrue(\\\"Confirm -d is NOT set\\\", !cl.hasOption(\\\"d\\\"));\\r\\n+    assertTrue(\\\"Confirm -s is NOT set\\\", !cl.hasOption(\\\"s\\\"));\\r\\n+    assertTrue(\\\"Confirm -c is NOT set\\\", !cl.hasOption(\\\"c\\\"));\\r\\n+    assertTrue(\\\"Confirm no extra args\\\", cl.getArgList().size() == 0);\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -1,14 +1,14 @@\\n public void testSingleOption() {\\r\\n     String[] args = new String[] { \\\"-r\\\" };\\r\\n     try {\\r\\n-        CommandLine cl = _options.parse(args);\\r\\n+        CommandLine cl = parser.parse(_options, args);\\r\\n         assertTrue(\\\"Confirm -r is set\\\", cl.hasOption(\\\"r\\\"));\\r\\n         assertTrue(\\\"Confirm -f is NOT set\\\", !cl.hasOption(\\\"f\\\"));\\r\\n         assertTrue(\\\"Confirm -d is NOT set\\\", !cl.hasOption(\\\"d\\\"));\\r\\n         assertTrue(\\\"Confirm -s is NOT set\\\", !cl.hasOption(\\\"s\\\"));\\r\\n         assertTrue(\\\"Confirm -c is NOT set\\\", !cl.hasOption(\\\"c\\\"));\\r\\n         assertTrue(\\\"Confirm no extra args\\\", cl.getArgList().size() == 0);\\r\\n     } catch (ParseException e) {\\r\\n         fail(e.toString());\\r\\n     }\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -1,14 +1,14 @@\\n public void testSingleOption() {\\r\\n     String[] args = new String[] { \\\"-r\\\" };\\r\\n     try {\\r\\n         CommandLine cl = _options.parse(args);\\r\\n-        assertTrue(\\\"Confirm -r is set\\\", cl.hasOption('r'));\\r\\n-        assertTrue(\\\"Confirm -f is NOT set\\\", !cl.hasOption('f'));\\r\\n-        assertTrue(\\\"Confirm -d is NOT set\\\", !cl.hasOption('d'));\\r\\n-        assertTrue(\\\"Confirm -s is NOT set\\\", !cl.hasOption('s'));\\r\\n-        assertTrue(\\\"Confirm -c is NOT set\\\", !cl.hasOption('c'));\\r\\n+        assertTrue(\\\"Confirm -r is set\\\", cl.hasOption(\\\"r\\\"));\\r\\n+        assertTrue(\\\"Confirm -f is NOT set\\\", !cl.hasOption(\\\"f\\\"));\\r\\n+        assertTrue(\\\"Confirm -d is NOT set\\\", !cl.hasOption(\\\"d\\\"));\\r\\n+        assertTrue(\\\"Confirm -s is NOT set\\\", !cl.hasOption(\\\"s\\\"));\\r\\n+        assertTrue(\\\"Confirm -c is NOT set\\\", !cl.hasOption(\\\"c\\\"));\\r\\n         assertTrue(\\\"Confirm no extra args\\\", cl.getArgList().size() == 0);\\r\\n     } catch (ParseException e) {\\r\\n         fail(e.toString());\\r\\n     }\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jstrachan@apache.org","authorName":"James Strachan","commitYear":"2002","diff":"\"@@ -0,0 +1,14 @@\\n+public void testSingleOption() {\\r\\n+    String[] args = new String[] { \\\"-r\\\" };\\r\\n+    try {\\r\\n+        CommandLine cl = _options.parse(args);\\r\\n+        assertTrue(\\\"Confirm -r is set\\\", cl.hasOption('r'));\\r\\n+        assertTrue(\\\"Confirm -f is NOT set\\\", !cl.hasOption('f'));\\r\\n+        assertTrue(\\\"Confirm -d is NOT set\\\", !cl.hasOption('d'));\\r\\n+        assertTrue(\\\"Confirm -s is NOT set\\\", !cl.hasOption('s'));\\r\\n+        assertTrue(\\\"Confirm -c is NOT set\\\", !cl.hasOption('c'));\\r\\n+        assertTrue(\\\"Confirm no extra args\\\", cl.getArgList().size() == 0);\\r\\n+    } catch (ParseException e) {\\r\\n+        fail(e.toString());\\r\\n+    }\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\test\java\org\apache\commons\cli\OptionGroupTest.java	testSingleOptionFromGroup	org.apache.commons.cli.OptionGroupTest.testSingleOptionFromGroup()	118	129	1	[{"authorEmail":"arturobernalg@gmail.com","authorName":"Arturo Bernal","commitYear":"2021","diff":"\"@@ -1,11 +1,11 @@\\n @Test\\r\\n public void testSingleOptionFromGroup() throws Exception {\\r\\n     final String[] args = { \\\"-f\\\" };\\r\\n     final CommandLine cl = parser.parse(options, args);\\r\\n-    assertTrue(\\\"Confirm -r is NOT set\\\", !cl.hasOption(\\\"r\\\"));\\r\\n+    assertFalse(\\\"Confirm -r is NOT set\\\", cl.hasOption(\\\"r\\\"));\\r\\n     assertTrue(\\\"Confirm -f is set\\\", cl.hasOption(\\\"f\\\"));\\r\\n-    assertTrue(\\\"Confirm -d is NOT set\\\", !cl.hasOption(\\\"d\\\"));\\r\\n-    assertTrue(\\\"Confirm -s is NOT set\\\", !cl.hasOption(\\\"s\\\"));\\r\\n-    assertTrue(\\\"Confirm -c is NOT set\\\", !cl.hasOption(\\\"c\\\"));\\r\\n+    assertFalse(\\\"Confirm -d is NOT set\\\", cl.hasOption(\\\"d\\\"));\\r\\n+    assertFalse(\\\"Confirm -s is NOT set\\\", cl.hasOption(\\\"s\\\"));\\r\\n+    assertFalse(\\\"Confirm -c is NOT set\\\", cl.hasOption(\\\"c\\\"));\\r\\n     assertTrue(\\\"Confirm no extra args\\\", cl.getArgList().isEmpty());\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"@@ -1,11 +1,11 @@\\n @Test\\r\\n public void testSingleOptionFromGroup() throws Exception {\\r\\n-    final String[] args = new String[] { \\\"-f\\\" };\\r\\n-    final CommandLine cl = parser.parse(_options, args);\\r\\n+    final String[] args = { \\\"-f\\\" };\\r\\n+    final CommandLine cl = parser.parse(options, args);\\r\\n     assertTrue(\\\"Confirm -r is NOT set\\\", !cl.hasOption(\\\"r\\\"));\\r\\n     assertTrue(\\\"Confirm -f is set\\\", cl.hasOption(\\\"f\\\"));\\r\\n     assertTrue(\\\"Confirm -d is NOT set\\\", !cl.hasOption(\\\"d\\\"));\\r\\n     assertTrue(\\\"Confirm -s is NOT set\\\", !cl.hasOption(\\\"s\\\"));\\r\\n     assertTrue(\\\"Confirm -c is NOT set\\\", !cl.hasOption(\\\"c\\\"));\\r\\n     assertTrue(\\\"Confirm no extra args\\\", cl.getArgList().isEmpty());\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"@@ -1,11 +1,11 @@\\n @Test\\r\\n public void testSingleOptionFromGroup() throws Exception {\\r\\n     final String[] args = new String[] { \\\"-f\\\" };\\r\\n     final CommandLine cl = parser.parse(_options, args);\\r\\n     assertTrue(\\\"Confirm -r is NOT set\\\", !cl.hasOption(\\\"r\\\"));\\r\\n     assertTrue(\\\"Confirm -f is set\\\", cl.hasOption(\\\"f\\\"));\\r\\n     assertTrue(\\\"Confirm -d is NOT set\\\", !cl.hasOption(\\\"d\\\"));\\r\\n     assertTrue(\\\"Confirm -s is NOT set\\\", !cl.hasOption(\\\"s\\\"));\\r\\n     assertTrue(\\\"Confirm -c is NOT set\\\", !cl.hasOption(\\\"c\\\"));\\r\\n-    assertTrue(\\\"Confirm no extra args\\\", cl.getArgList().size() == 0);\\r\\n+    assertTrue(\\\"Confirm no extra args\\\", cl.getArgList().isEmpty());\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,11 +1,11 @@\\n @Test\\r\\n public void testSingleOptionFromGroup() throws Exception {\\r\\n-    String[] args = new String[] { \\\"-f\\\" };\\r\\n-    CommandLine cl = parser.parse(_options, args);\\r\\n+    final String[] args = new String[] { \\\"-f\\\" };\\r\\n+    final CommandLine cl = parser.parse(_options, args);\\r\\n     assertTrue(\\\"Confirm -r is NOT set\\\", !cl.hasOption(\\\"r\\\"));\\r\\n     assertTrue(\\\"Confirm -f is set\\\", cl.hasOption(\\\"f\\\"));\\r\\n     assertTrue(\\\"Confirm -d is NOT set\\\", !cl.hasOption(\\\"d\\\"));\\r\\n     assertTrue(\\\"Confirm -s is NOT set\\\", !cl.hasOption(\\\"s\\\"));\\r\\n     assertTrue(\\\"Confirm -c is NOT set\\\", !cl.hasOption(\\\"c\\\"));\\r\\n     assertTrue(\\\"Confirm no extra args\\\", cl.getArgList().size() == 0);\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"tn@apache.org","authorName":"Thomas Neidhart","commitYear":"2013","diff":"\"@@ -1,10 +1,11 @@\\n+@Test\\r\\n public void testSingleOptionFromGroup() throws Exception {\\r\\n     String[] args = new String[] { \\\"-f\\\" };\\r\\n     CommandLine cl = parser.parse(_options, args);\\r\\n     assertTrue(\\\"Confirm -r is NOT set\\\", !cl.hasOption(\\\"r\\\"));\\r\\n     assertTrue(\\\"Confirm -f is set\\\", cl.hasOption(\\\"f\\\"));\\r\\n     assertTrue(\\\"Confirm -d is NOT set\\\", !cl.hasOption(\\\"d\\\"));\\r\\n     assertTrue(\\\"Confirm -s is NOT set\\\", !cl.hasOption(\\\"s\\\"));\\r\\n     assertTrue(\\\"Confirm -c is NOT set\\\", !cl.hasOption(\\\"c\\\"));\\r\\n     assertTrue(\\\"Confirm no extra args\\\", cl.getArgList().size() == 0);\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2008","diff":"\"@@ -1,14 +1,10 @@\\n-public void testSingleOptionFromGroup() {\\r\\n+public void testSingleOptionFromGroup() throws Exception {\\r\\n     String[] args = new String[] { \\\"-f\\\" };\\r\\n-    try {\\r\\n-        CommandLine cl = parser.parse(_options, args);\\r\\n-        assertTrue(\\\"Confirm -r is NOT set\\\", !cl.hasOption(\\\"r\\\"));\\r\\n-        assertTrue(\\\"Confirm -f is set\\\", cl.hasOption(\\\"f\\\"));\\r\\n-        assertTrue(\\\"Confirm -d is NOT set\\\", !cl.hasOption(\\\"d\\\"));\\r\\n-        assertTrue(\\\"Confirm -s is NOT set\\\", !cl.hasOption(\\\"s\\\"));\\r\\n-        assertTrue(\\\"Confirm -c is NOT set\\\", !cl.hasOption(\\\"c\\\"));\\r\\n-        assertTrue(\\\"Confirm no extra args\\\", cl.getArgList().size() == 0);\\r\\n-    } catch (ParseException e) {\\r\\n-        fail(e.toString());\\r\\n-    }\\r\\n+    CommandLine cl = parser.parse(_options, args);\\r\\n+    assertTrue(\\\"Confirm -r is NOT set\\\", !cl.hasOption(\\\"r\\\"));\\r\\n+    assertTrue(\\\"Confirm -f is set\\\", cl.hasOption(\\\"f\\\"));\\r\\n+    assertTrue(\\\"Confirm -d is NOT set\\\", !cl.hasOption(\\\"d\\\"));\\r\\n+    assertTrue(\\\"Confirm -s is NOT set\\\", !cl.hasOption(\\\"s\\\"));\\r\\n+    assertTrue(\\\"Confirm -c is NOT set\\\", !cl.hasOption(\\\"c\\\"));\\r\\n+    assertTrue(\\\"Confirm no extra args\\\", cl.getArgList().size() == 0);\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -1,14 +1,14 @@\\n public void testSingleOptionFromGroup() {\\r\\n     String[] args = new String[] { \\\"-f\\\" };\\r\\n     try {\\r\\n-        CommandLine cl = _options.parse(args);\\r\\n+        CommandLine cl = parser.parse(_options, args);\\r\\n         assertTrue(\\\"Confirm -r is NOT set\\\", !cl.hasOption(\\\"r\\\"));\\r\\n         assertTrue(\\\"Confirm -f is set\\\", cl.hasOption(\\\"f\\\"));\\r\\n         assertTrue(\\\"Confirm -d is NOT set\\\", !cl.hasOption(\\\"d\\\"));\\r\\n         assertTrue(\\\"Confirm -s is NOT set\\\", !cl.hasOption(\\\"s\\\"));\\r\\n         assertTrue(\\\"Confirm -c is NOT set\\\", !cl.hasOption(\\\"c\\\"));\\r\\n         assertTrue(\\\"Confirm no extra args\\\", cl.getArgList().size() == 0);\\r\\n     } catch (ParseException e) {\\r\\n         fail(e.toString());\\r\\n     }\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -1,14 +1,14 @@\\n public void testSingleOptionFromGroup() {\\r\\n     String[] args = new String[] { \\\"-f\\\" };\\r\\n     try {\\r\\n         CommandLine cl = _options.parse(args);\\r\\n-        assertTrue(\\\"Confirm -r is NOT set\\\", !cl.hasOption('r'));\\r\\n-        assertTrue(\\\"Confirm -f is set\\\", cl.hasOption('f'));\\r\\n-        assertTrue(\\\"Confirm -d is NOT set\\\", !cl.hasOption('d'));\\r\\n-        assertTrue(\\\"Confirm -s is NOT set\\\", !cl.hasOption('s'));\\r\\n-        assertTrue(\\\"Confirm -c is NOT set\\\", !cl.hasOption('c'));\\r\\n+        assertTrue(\\\"Confirm -r is NOT set\\\", !cl.hasOption(\\\"r\\\"));\\r\\n+        assertTrue(\\\"Confirm -f is set\\\", cl.hasOption(\\\"f\\\"));\\r\\n+        assertTrue(\\\"Confirm -d is NOT set\\\", !cl.hasOption(\\\"d\\\"));\\r\\n+        assertTrue(\\\"Confirm -s is NOT set\\\", !cl.hasOption(\\\"s\\\"));\\r\\n+        assertTrue(\\\"Confirm -c is NOT set\\\", !cl.hasOption(\\\"c\\\"));\\r\\n         assertTrue(\\\"Confirm no extra args\\\", cl.getArgList().size() == 0);\\r\\n     } catch (ParseException e) {\\r\\n         fail(e.toString());\\r\\n     }\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jstrachan@apache.org","authorName":"James Strachan","commitYear":"2002","diff":"\"@@ -0,0 +1,14 @@\\n+public void testSingleOptionFromGroup() {\\r\\n+    String[] args = new String[] { \\\"-f\\\" };\\r\\n+    try {\\r\\n+        CommandLine cl = _options.parse(args);\\r\\n+        assertTrue(\\\"Confirm -r is NOT set\\\", !cl.hasOption('r'));\\r\\n+        assertTrue(\\\"Confirm -f is set\\\", cl.hasOption('f'));\\r\\n+        assertTrue(\\\"Confirm -d is NOT set\\\", !cl.hasOption('d'));\\r\\n+        assertTrue(\\\"Confirm -s is NOT set\\\", !cl.hasOption('s'));\\r\\n+        assertTrue(\\\"Confirm -c is NOT set\\\", !cl.hasOption('c'));\\r\\n+        assertTrue(\\\"Confirm no extra args\\\", cl.getArgList().size() == 0);\\r\\n+    } catch (ParseException e) {\\r\\n+        fail(e.toString());\\r\\n+    }\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\test\java\org\apache\commons\cli\OptionGroupTest.java	testToString	org.apache.commons.cli.OptionGroupTest.testToString()	132	148	3	[{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,15 +1,15 @@\\n @Test\\r\\n public void testToString() {\\r\\n-    OptionGroup group1 = new OptionGroup();\\r\\n+    final OptionGroup group1 = new OptionGroup();\\r\\n     group1.addOption(new Option(null, \\\"foo\\\", false, \\\"Foo\\\"));\\r\\n     group1.addOption(new Option(null, \\\"bar\\\", false, \\\"Bar\\\"));\\r\\n     if (!\\\"[--bar Bar, --foo Foo]\\\".equals(group1.toString())) {\\r\\n         assertEquals(\\\"[--foo Foo, --bar Bar]\\\", group1.toString());\\r\\n     }\\r\\n-    OptionGroup group2 = new OptionGroup();\\r\\n+    final OptionGroup group2 = new OptionGroup();\\r\\n     group2.addOption(new Option(\\\"f\\\", \\\"foo\\\", false, \\\"Foo\\\"));\\r\\n     group2.addOption(new Option(\\\"b\\\", \\\"bar\\\", false, \\\"Bar\\\"));\\r\\n     if (!\\\"[-b Bar, -f Foo]\\\".equals(group2.toString())) {\\r\\n         assertEquals(\\\"[-f Foo, -b Bar]\\\", group2.toString());\\r\\n     }\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"tn@apache.org","authorName":"Thomas Neidhart","commitYear":"2013","diff":"\"@@ -1,14 +1,15 @@\\n+@Test\\r\\n public void testToString() {\\r\\n     OptionGroup group1 = new OptionGroup();\\r\\n     group1.addOption(new Option(null, \\\"foo\\\", false, \\\"Foo\\\"));\\r\\n     group1.addOption(new Option(null, \\\"bar\\\", false, \\\"Bar\\\"));\\r\\n     if (!\\\"[--bar Bar, --foo Foo]\\\".equals(group1.toString())) {\\r\\n         assertEquals(\\\"[--foo Foo, --bar Bar]\\\", group1.toString());\\r\\n     }\\r\\n     OptionGroup group2 = new OptionGroup();\\r\\n     group2.addOption(new Option(\\\"f\\\", \\\"foo\\\", false, \\\"Foo\\\"));\\r\\n     group2.addOption(new Option(\\\"b\\\", \\\"bar\\\", false, \\\"Bar\\\"));\\r\\n     if (!\\\"[-b Bar, -f Foo]\\\".equals(group2.toString())) {\\r\\n         assertEquals(\\\"[-f Foo, -b Bar]\\\", group2.toString());\\r\\n     }\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"joehni@apache.org","authorName":"Joerg Schaible","commitYear":"2009","diff":"\"@@ -1,14 +1,14 @@\\n public void testToString() {\\r\\n     OptionGroup group1 = new OptionGroup();\\r\\n     group1.addOption(new Option(null, \\\"foo\\\", false, \\\"Foo\\\"));\\r\\n     group1.addOption(new Option(null, \\\"bar\\\", false, \\\"Bar\\\"));\\r\\n-    assertEquals(\\\"[--foo Foo, --bar Bar]\\\".length(), group1.toString().length());\\r\\n-    assertTrue(group1.toString().contains(\\\"--foo Foo\\\"));\\r\\n-    assertTrue(group1.toString().contains(\\\"--bar Bar\\\"));\\r\\n+    if (!\\\"[--bar Bar, --foo Foo]\\\".equals(group1.toString())) {\\r\\n+        assertEquals(\\\"[--foo Foo, --bar Bar]\\\", group1.toString());\\r\\n+    }\\r\\n     OptionGroup group2 = new OptionGroup();\\r\\n     group2.addOption(new Option(\\\"f\\\", \\\"foo\\\", false, \\\"Foo\\\"));\\r\\n     group2.addOption(new Option(\\\"b\\\", \\\"bar\\\", false, \\\"Bar\\\"));\\r\\n-    assertEquals(\\\"[-f Foo, -b Bar]\\\".length(), group2.toString().length());\\r\\n-    assertTrue(group2.toString().contains(\\\"-f Foo\\\"));\\r\\n-    assertTrue(group2.toString().contains(\\\"-b Bar\\\"));\\r\\n+    if (!\\\"[-b Bar, -f Foo]\\\".equals(group2.toString())) {\\r\\n+        assertEquals(\\\"[-f Foo, -b Bar]\\\", group2.toString());\\r\\n+    }\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"bayard@apache.org","authorName":"Henri Yandell","commitYear":"2009","diff":"\"@@ -1,10 +1,14 @@\\n public void testToString() {\\r\\n     OptionGroup group1 = new OptionGroup();\\r\\n     group1.addOption(new Option(null, \\\"foo\\\", false, \\\"Foo\\\"));\\r\\n     group1.addOption(new Option(null, \\\"bar\\\", false, \\\"Bar\\\"));\\r\\n-    assertEquals(\\\"[--foo Foo, --bar Bar]\\\", group1.toString());\\r\\n+    assertEquals(\\\"[--foo Foo, --bar Bar]\\\".length(), group1.toString().length());\\r\\n+    assertTrue(group1.toString().contains(\\\"--foo Foo\\\"));\\r\\n+    assertTrue(group1.toString().contains(\\\"--bar Bar\\\"));\\r\\n     OptionGroup group2 = new OptionGroup();\\r\\n     group2.addOption(new Option(\\\"f\\\", \\\"foo\\\", false, \\\"Foo\\\"));\\r\\n     group2.addOption(new Option(\\\"b\\\", \\\"bar\\\", false, \\\"Bar\\\"));\\r\\n-    assertEquals(\\\"[-f Foo, -b Bar]\\\", group2.toString());\\r\\n+    assertEquals(\\\"[-f Foo, -b Bar]\\\".length(), group2.toString().length());\\r\\n+    assertTrue(group2.toString().contains(\\\"-f Foo\\\"));\\r\\n+    assertTrue(group2.toString().contains(\\\"-b Bar\\\"));\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2008","diff":"\"@@ -0,0 +1,10 @@\\n+public void testToString() {\\r\\n+    OptionGroup group1 = new OptionGroup();\\r\\n+    group1.addOption(new Option(null, \\\"foo\\\", false, \\\"Foo\\\"));\\r\\n+    group1.addOption(new Option(null, \\\"bar\\\", false, \\\"Bar\\\"));\\r\\n+    assertEquals(\\\"[--foo Foo, --bar Bar]\\\", group1.toString());\\r\\n+    OptionGroup group2 = new OptionGroup();\\r\\n+    group2.addOption(new Option(\\\"f\\\", \\\"foo\\\", false, \\\"Foo\\\"));\\r\\n+    group2.addOption(new Option(\\\"b\\\", \\\"bar\\\", false, \\\"Bar\\\"));\\r\\n+    assertEquals(\\\"[-f Foo, -b Bar]\\\", group2.toString());\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\test\java\org\apache\commons\cli\OptionGroupTest.java	testTwoLongOptionsFromGroup	org.apache.commons.cli.OptionGroupTest.testTwoLongOptionsFromGroup()	151	162	3	[{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"@@ -1,12 +1,12 @@\\n @Test\\r\\n public void testTwoLongOptionsFromGroup() throws Exception {\\r\\n-    final String[] args = new String[] { \\\"--file\\\", \\\"--directory\\\" };\\r\\n+    final String[] args = { \\\"--file\\\", \\\"--directory\\\" };\\r\\n     try {\\r\\n-        parser.parse(_options, args);\\r\\n+        parser.parse(options, args);\\r\\n         fail(\\\"two arguments from group not allowed\\\");\\r\\n     } catch (final AlreadySelectedException e) {\\r\\n         assertNotNull(\\\"null option group\\\", e.getOptionGroup());\\r\\n         assertEquals(\\\"selected option\\\", \\\"f\\\", e.getOptionGroup().getSelected());\\r\\n         assertEquals(\\\"option\\\", \\\"d\\\", e.getOption().getOpt());\\r\\n     }\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,12 +1,12 @@\\n @Test\\r\\n public void testTwoLongOptionsFromGroup() throws Exception {\\r\\n-    String[] args = new String[] { \\\"--file\\\", \\\"--directory\\\" };\\r\\n+    final String[] args = new String[] { \\\"--file\\\", \\\"--directory\\\" };\\r\\n     try {\\r\\n         parser.parse(_options, args);\\r\\n         fail(\\\"two arguments from group not allowed\\\");\\r\\n-    } catch (AlreadySelectedException e) {\\r\\n+    } catch (final AlreadySelectedException e) {\\r\\n         assertNotNull(\\\"null option group\\\", e.getOptionGroup());\\r\\n         assertEquals(\\\"selected option\\\", \\\"f\\\", e.getOptionGroup().getSelected());\\r\\n         assertEquals(\\\"option\\\", \\\"d\\\", e.getOption().getOpt());\\r\\n     }\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"tn@apache.org","authorName":"Thomas Neidhart","commitYear":"2013","diff":"\"@@ -1,11 +1,12 @@\\n+@Test\\r\\n public void testTwoLongOptionsFromGroup() throws Exception {\\r\\n     String[] args = new String[] { \\\"--file\\\", \\\"--directory\\\" };\\r\\n     try {\\r\\n         parser.parse(_options, args);\\r\\n         fail(\\\"two arguments from group not allowed\\\");\\r\\n     } catch (AlreadySelectedException e) {\\r\\n         assertNotNull(\\\"null option group\\\", e.getOptionGroup());\\r\\n         assertEquals(\\\"selected option\\\", \\\"f\\\", e.getOptionGroup().getSelected());\\r\\n         assertEquals(\\\"option\\\", \\\"d\\\", e.getOption().getOpt());\\r\\n     }\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2008","diff":"\"@@ -1,11 +1,11 @@\\n-public void testTwoLongOptionsFromGroup() {\\r\\n+public void testTwoLongOptionsFromGroup() throws Exception {\\r\\n     String[] args = new String[] { \\\"--file\\\", \\\"--directory\\\" };\\r\\n     try {\\r\\n         parser.parse(_options, args);\\r\\n         fail(\\\"two arguments from group not allowed\\\");\\r\\n-    } catch (ParseException e) {\\r\\n-        if (!(e instanceof AlreadySelectedException)) {\\r\\n-            fail(\\\"incorrect exception caught:\\\" + e.getMessage());\\r\\n-        }\\r\\n+    } catch (AlreadySelectedException e) {\\r\\n+        assertNotNull(\\\"null option group\\\", e.getOptionGroup());\\r\\n+        assertEquals(\\\"selected option\\\", \\\"f\\\", e.getOptionGroup().getSelected());\\r\\n+        assertEquals(\\\"option\\\", \\\"d\\\", e.getOption().getOpt());\\r\\n     }\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2008","diff":"\"@@ -1,11 +1,11 @@\\n public void testTwoLongOptionsFromGroup() {\\r\\n     String[] args = new String[] { \\\"--file\\\", \\\"--directory\\\" };\\r\\n     try {\\r\\n-        CommandLine cl = parser.parse(_options, args);\\r\\n+        parser.parse(_options, args);\\r\\n         fail(\\\"two arguments from group not allowed\\\");\\r\\n     } catch (ParseException e) {\\r\\n         if (!(e instanceof AlreadySelectedException)) {\\r\\n             fail(\\\"incorrect exception caught:\\\" + e.getMessage());\\r\\n         }\\r\\n     }\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -1,11 +1,11 @@\\n public void testTwoLongOptionsFromGroup() {\\r\\n     String[] args = new String[] { \\\"--file\\\", \\\"--directory\\\" };\\r\\n     try {\\r\\n-        CommandLine cl = _options.parse(args);\\r\\n+        CommandLine cl = parser.parse(_options, args);\\r\\n         fail(\\\"two arguments from group not allowed\\\");\\r\\n     } catch (ParseException e) {\\r\\n         if (!(e instanceof AlreadySelectedException)) {\\r\\n             fail(\\\"incorrect exception caught:\\\" + e.getMessage());\\r\\n         }\\r\\n     }\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jstrachan@apache.org","authorName":"James Strachan","commitYear":"2002","diff":"\"@@ -0,0 +1,11 @@\\n+public void testTwoLongOptionsFromGroup() {\\r\\n+    String[] args = new String[] { \\\"--file\\\", \\\"--directory\\\" };\\r\\n+    try {\\r\\n+        CommandLine cl = _options.parse(args);\\r\\n+        fail(\\\"two arguments from group not allowed\\\");\\r\\n+    } catch (ParseException e) {\\r\\n+        if (!(e instanceof AlreadySelectedException)) {\\r\\n+            fail(\\\"incorrect exception caught:\\\" + e.getMessage());\\r\\n+        }\\r\\n+    }\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\test\java\org\apache\commons\cli\OptionGroupTest.java	testTwoOptionsFromDifferentGroup	org.apache.commons.cli.OptionGroupTest.testTwoOptionsFromDifferentGroup()	165	175	1	[{"authorEmail":"arturobernalg@gmail.com","authorName":"Arturo Bernal","commitYear":"2021","diff":"\"@@ -1,11 +1,11 @@\\n @Test\\r\\n public void testTwoOptionsFromDifferentGroup() throws Exception {\\r\\n     final String[] args = { \\\"-f\\\", \\\"-s\\\" };\\r\\n     final CommandLine cl = parser.parse(options, args);\\r\\n-    assertTrue(\\\"Confirm -r is NOT set\\\", !cl.hasOption(\\\"r\\\"));\\r\\n+    assertFalse(\\\"Confirm -r is NOT set\\\", cl.hasOption(\\\"r\\\"));\\r\\n     assertTrue(\\\"Confirm -f is set\\\", cl.hasOption(\\\"f\\\"));\\r\\n-    assertTrue(\\\"Confirm -d is NOT set\\\", !cl.hasOption(\\\"d\\\"));\\r\\n+    assertFalse(\\\"Confirm -d is NOT set\\\", cl.hasOption(\\\"d\\\"));\\r\\n     assertTrue(\\\"Confirm -s is set\\\", cl.hasOption(\\\"s\\\"));\\r\\n-    assertTrue(\\\"Confirm -c is NOT set\\\", !cl.hasOption(\\\"c\\\"));\\r\\n+    assertFalse(\\\"Confirm -c is NOT set\\\", cl.hasOption(\\\"c\\\"));\\r\\n     assertTrue(\\\"Confirm NO extra args\\\", cl.getArgList().isEmpty());\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"@@ -1,11 +1,11 @@\\n @Test\\r\\n public void testTwoOptionsFromDifferentGroup() throws Exception {\\r\\n-    final String[] args = new String[] { \\\"-f\\\", \\\"-s\\\" };\\r\\n-    final CommandLine cl = parser.parse(_options, args);\\r\\n+    final String[] args = { \\\"-f\\\", \\\"-s\\\" };\\r\\n+    final CommandLine cl = parser.parse(options, args);\\r\\n     assertTrue(\\\"Confirm -r is NOT set\\\", !cl.hasOption(\\\"r\\\"));\\r\\n     assertTrue(\\\"Confirm -f is set\\\", cl.hasOption(\\\"f\\\"));\\r\\n     assertTrue(\\\"Confirm -d is NOT set\\\", !cl.hasOption(\\\"d\\\"));\\r\\n     assertTrue(\\\"Confirm -s is set\\\", cl.hasOption(\\\"s\\\"));\\r\\n     assertTrue(\\\"Confirm -c is NOT set\\\", !cl.hasOption(\\\"c\\\"));\\r\\n     assertTrue(\\\"Confirm NO extra args\\\", cl.getArgList().isEmpty());\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"@@ -1,11 +1,11 @@\\n @Test\\r\\n public void testTwoOptionsFromDifferentGroup() throws Exception {\\r\\n     final String[] args = new String[] { \\\"-f\\\", \\\"-s\\\" };\\r\\n     final CommandLine cl = parser.parse(_options, args);\\r\\n     assertTrue(\\\"Confirm -r is NOT set\\\", !cl.hasOption(\\\"r\\\"));\\r\\n     assertTrue(\\\"Confirm -f is set\\\", cl.hasOption(\\\"f\\\"));\\r\\n     assertTrue(\\\"Confirm -d is NOT set\\\", !cl.hasOption(\\\"d\\\"));\\r\\n     assertTrue(\\\"Confirm -s is set\\\", cl.hasOption(\\\"s\\\"));\\r\\n     assertTrue(\\\"Confirm -c is NOT set\\\", !cl.hasOption(\\\"c\\\"));\\r\\n-    assertTrue(\\\"Confirm NO extra args\\\", cl.getArgList().size() == 0);\\r\\n+    assertTrue(\\\"Confirm NO extra args\\\", cl.getArgList().isEmpty());\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,11 +1,11 @@\\n @Test\\r\\n public void testTwoOptionsFromDifferentGroup() throws Exception {\\r\\n-    String[] args = new String[] { \\\"-f\\\", \\\"-s\\\" };\\r\\n-    CommandLine cl = parser.parse(_options, args);\\r\\n+    final String[] args = new String[] { \\\"-f\\\", \\\"-s\\\" };\\r\\n+    final CommandLine cl = parser.parse(_options, args);\\r\\n     assertTrue(\\\"Confirm -r is NOT set\\\", !cl.hasOption(\\\"r\\\"));\\r\\n     assertTrue(\\\"Confirm -f is set\\\", cl.hasOption(\\\"f\\\"));\\r\\n     assertTrue(\\\"Confirm -d is NOT set\\\", !cl.hasOption(\\\"d\\\"));\\r\\n     assertTrue(\\\"Confirm -s is set\\\", cl.hasOption(\\\"s\\\"));\\r\\n     assertTrue(\\\"Confirm -c is NOT set\\\", !cl.hasOption(\\\"c\\\"));\\r\\n     assertTrue(\\\"Confirm NO extra args\\\", cl.getArgList().size() == 0);\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"tn@apache.org","authorName":"Thomas Neidhart","commitYear":"2013","diff":"\"@@ -1,10 +1,11 @@\\n+@Test\\r\\n public void testTwoOptionsFromDifferentGroup() throws Exception {\\r\\n     String[] args = new String[] { \\\"-f\\\", \\\"-s\\\" };\\r\\n     CommandLine cl = parser.parse(_options, args);\\r\\n     assertTrue(\\\"Confirm -r is NOT set\\\", !cl.hasOption(\\\"r\\\"));\\r\\n     assertTrue(\\\"Confirm -f is set\\\", cl.hasOption(\\\"f\\\"));\\r\\n     assertTrue(\\\"Confirm -d is NOT set\\\", !cl.hasOption(\\\"d\\\"));\\r\\n     assertTrue(\\\"Confirm -s is set\\\", cl.hasOption(\\\"s\\\"));\\r\\n     assertTrue(\\\"Confirm -c is NOT set\\\", !cl.hasOption(\\\"c\\\"));\\r\\n     assertTrue(\\\"Confirm NO extra args\\\", cl.getArgList().size() == 0);\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2008","diff":"\"@@ -1,14 +1,10 @@\\n-public void testTwoOptionsFromDifferentGroup() {\\r\\n+public void testTwoOptionsFromDifferentGroup() throws Exception {\\r\\n     String[] args = new String[] { \\\"-f\\\", \\\"-s\\\" };\\r\\n-    try {\\r\\n-        CommandLine cl = parser.parse(_options, args);\\r\\n-        assertTrue(\\\"Confirm -r is NOT set\\\", !cl.hasOption(\\\"r\\\"));\\r\\n-        assertTrue(\\\"Confirm -f is set\\\", cl.hasOption(\\\"f\\\"));\\r\\n-        assertTrue(\\\"Confirm -d is NOT set\\\", !cl.hasOption(\\\"d\\\"));\\r\\n-        assertTrue(\\\"Confirm -s is set\\\", cl.hasOption(\\\"s\\\"));\\r\\n-        assertTrue(\\\"Confirm -c is NOT set\\\", !cl.hasOption(\\\"c\\\"));\\r\\n-        assertTrue(\\\"Confirm NO extra args\\\", cl.getArgList().size() == 0);\\r\\n-    } catch (ParseException e) {\\r\\n-        fail(e.toString());\\r\\n-    }\\r\\n+    CommandLine cl = parser.parse(_options, args);\\r\\n+    assertTrue(\\\"Confirm -r is NOT set\\\", !cl.hasOption(\\\"r\\\"));\\r\\n+    assertTrue(\\\"Confirm -f is set\\\", cl.hasOption(\\\"f\\\"));\\r\\n+    assertTrue(\\\"Confirm -d is NOT set\\\", !cl.hasOption(\\\"d\\\"));\\r\\n+    assertTrue(\\\"Confirm -s is set\\\", cl.hasOption(\\\"s\\\"));\\r\\n+    assertTrue(\\\"Confirm -c is NOT set\\\", !cl.hasOption(\\\"c\\\"));\\r\\n+    assertTrue(\\\"Confirm NO extra args\\\", cl.getArgList().size() == 0);\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -1,14 +1,14 @@\\n public void testTwoOptionsFromDifferentGroup() {\\r\\n     String[] args = new String[] { \\\"-f\\\", \\\"-s\\\" };\\r\\n     try {\\r\\n-        CommandLine cl = _options.parse(args);\\r\\n+        CommandLine cl = parser.parse(_options, args);\\r\\n         assertTrue(\\\"Confirm -r is NOT set\\\", !cl.hasOption(\\\"r\\\"));\\r\\n         assertTrue(\\\"Confirm -f is set\\\", cl.hasOption(\\\"f\\\"));\\r\\n         assertTrue(\\\"Confirm -d is NOT set\\\", !cl.hasOption(\\\"d\\\"));\\r\\n         assertTrue(\\\"Confirm -s is set\\\", cl.hasOption(\\\"s\\\"));\\r\\n         assertTrue(\\\"Confirm -c is NOT set\\\", !cl.hasOption(\\\"c\\\"));\\r\\n         assertTrue(\\\"Confirm NO extra args\\\", cl.getArgList().size() == 0);\\r\\n     } catch (ParseException e) {\\r\\n         fail(e.toString());\\r\\n     }\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -1,14 +1,14 @@\\n public void testTwoOptionsFromDifferentGroup() {\\r\\n     String[] args = new String[] { \\\"-f\\\", \\\"-s\\\" };\\r\\n     try {\\r\\n         CommandLine cl = _options.parse(args);\\r\\n-        assertTrue(\\\"Confirm -r is NOT set\\\", !cl.hasOption('r'));\\r\\n-        assertTrue(\\\"Confirm -f is set\\\", cl.hasOption('f'));\\r\\n-        assertTrue(\\\"Confirm -d is NOT set\\\", !cl.hasOption('d'));\\r\\n-        assertTrue(\\\"Confirm -s is set\\\", cl.hasOption('s'));\\r\\n-        assertTrue(\\\"Confirm -c is NOT set\\\", !cl.hasOption('c'));\\r\\n+        assertTrue(\\\"Confirm -r is NOT set\\\", !cl.hasOption(\\\"r\\\"));\\r\\n+        assertTrue(\\\"Confirm -f is set\\\", cl.hasOption(\\\"f\\\"));\\r\\n+        assertTrue(\\\"Confirm -d is NOT set\\\", !cl.hasOption(\\\"d\\\"));\\r\\n+        assertTrue(\\\"Confirm -s is set\\\", cl.hasOption(\\\"s\\\"));\\r\\n+        assertTrue(\\\"Confirm -c is NOT set\\\", !cl.hasOption(\\\"c\\\"));\\r\\n         assertTrue(\\\"Confirm NO extra args\\\", cl.getArgList().size() == 0);\\r\\n     } catch (ParseException e) {\\r\\n         fail(e.toString());\\r\\n     }\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jstrachan@apache.org","authorName":"James Strachan","commitYear":"2002","diff":"\"@@ -0,0 +1,14 @@\\n+public void testTwoOptionsFromDifferentGroup() {\\r\\n+    String[] args = new String[] { \\\"-f\\\", \\\"-s\\\" };\\r\\n+    try {\\r\\n+        CommandLine cl = _options.parse(args);\\r\\n+        assertTrue(\\\"Confirm -r is NOT set\\\", !cl.hasOption('r'));\\r\\n+        assertTrue(\\\"Confirm -f is set\\\", cl.hasOption('f'));\\r\\n+        assertTrue(\\\"Confirm -d is NOT set\\\", !cl.hasOption('d'));\\r\\n+        assertTrue(\\\"Confirm -s is set\\\", cl.hasOption('s'));\\r\\n+        assertTrue(\\\"Confirm -c is NOT set\\\", !cl.hasOption('c'));\\r\\n+        assertTrue(\\\"Confirm NO extra args\\\", cl.getArgList().size() == 0);\\r\\n+    } catch (ParseException e) {\\r\\n+        fail(e.toString());\\r\\n+    }\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\test\java\org\apache\commons\cli\OptionGroupTest.java	testTwoOptionsFromGroup	org.apache.commons.cli.OptionGroupTest.testTwoOptionsFromGroup()	178	189	3	[{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"@@ -1,12 +1,12 @@\\n @Test\\r\\n public void testTwoOptionsFromGroup() throws Exception {\\r\\n-    final String[] args = new String[] { \\\"-f\\\", \\\"-d\\\" };\\r\\n+    final String[] args = { \\\"-f\\\", \\\"-d\\\" };\\r\\n     try {\\r\\n-        parser.parse(_options, args);\\r\\n+        parser.parse(options, args);\\r\\n         fail(\\\"two arguments from group not allowed\\\");\\r\\n     } catch (final AlreadySelectedException e) {\\r\\n         assertNotNull(\\\"null option group\\\", e.getOptionGroup());\\r\\n         assertEquals(\\\"selected option\\\", \\\"f\\\", e.getOptionGroup().getSelected());\\r\\n         assertEquals(\\\"option\\\", \\\"d\\\", e.getOption().getOpt());\\r\\n     }\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,12 +1,12 @@\\n @Test\\r\\n public void testTwoOptionsFromGroup() throws Exception {\\r\\n-    String[] args = new String[] { \\\"-f\\\", \\\"-d\\\" };\\r\\n+    final String[] args = new String[] { \\\"-f\\\", \\\"-d\\\" };\\r\\n     try {\\r\\n         parser.parse(_options, args);\\r\\n         fail(\\\"two arguments from group not allowed\\\");\\r\\n-    } catch (AlreadySelectedException e) {\\r\\n+    } catch (final AlreadySelectedException e) {\\r\\n         assertNotNull(\\\"null option group\\\", e.getOptionGroup());\\r\\n         assertEquals(\\\"selected option\\\", \\\"f\\\", e.getOptionGroup().getSelected());\\r\\n         assertEquals(\\\"option\\\", \\\"d\\\", e.getOption().getOpt());\\r\\n     }\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"tn@apache.org","authorName":"Thomas Neidhart","commitYear":"2013","diff":"\"@@ -1,11 +1,12 @@\\n+@Test\\r\\n public void testTwoOptionsFromGroup() throws Exception {\\r\\n     String[] args = new String[] { \\\"-f\\\", \\\"-d\\\" };\\r\\n     try {\\r\\n         parser.parse(_options, args);\\r\\n         fail(\\\"two arguments from group not allowed\\\");\\r\\n     } catch (AlreadySelectedException e) {\\r\\n         assertNotNull(\\\"null option group\\\", e.getOptionGroup());\\r\\n         assertEquals(\\\"selected option\\\", \\\"f\\\", e.getOptionGroup().getSelected());\\r\\n         assertEquals(\\\"option\\\", \\\"d\\\", e.getOption().getOpt());\\r\\n     }\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2008","diff":"\"@@ -1,11 +1,11 @@\\n-public void testTwoOptionsFromGroup() {\\r\\n+public void testTwoOptionsFromGroup() throws Exception {\\r\\n     String[] args = new String[] { \\\"-f\\\", \\\"-d\\\" };\\r\\n     try {\\r\\n         parser.parse(_options, args);\\r\\n         fail(\\\"two arguments from group not allowed\\\");\\r\\n-    } catch (ParseException e) {\\r\\n-        if (!(e instanceof AlreadySelectedException)) {\\r\\n-            fail(\\\"incorrect exception caught:\\\" + e.getMessage());\\r\\n-        }\\r\\n+    } catch (AlreadySelectedException e) {\\r\\n+        assertNotNull(\\\"null option group\\\", e.getOptionGroup());\\r\\n+        assertEquals(\\\"selected option\\\", \\\"f\\\", e.getOptionGroup().getSelected());\\r\\n+        assertEquals(\\\"option\\\", \\\"d\\\", e.getOption().getOpt());\\r\\n     }\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2008","diff":"\"@@ -1,11 +1,11 @@\\n public void testTwoOptionsFromGroup() {\\r\\n     String[] args = new String[] { \\\"-f\\\", \\\"-d\\\" };\\r\\n     try {\\r\\n-        CommandLine cl = parser.parse(_options, args);\\r\\n+        parser.parse(_options, args);\\r\\n         fail(\\\"two arguments from group not allowed\\\");\\r\\n     } catch (ParseException e) {\\r\\n         if (!(e instanceof AlreadySelectedException)) {\\r\\n             fail(\\\"incorrect exception caught:\\\" + e.getMessage());\\r\\n         }\\r\\n     }\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -1,11 +1,11 @@\\n public void testTwoOptionsFromGroup() {\\r\\n     String[] args = new String[] { \\\"-f\\\", \\\"-d\\\" };\\r\\n     try {\\r\\n-        CommandLine cl = _options.parse(args);\\r\\n+        CommandLine cl = parser.parse(_options, args);\\r\\n         fail(\\\"two arguments from group not allowed\\\");\\r\\n     } catch (ParseException e) {\\r\\n         if (!(e instanceof AlreadySelectedException)) {\\r\\n             fail(\\\"incorrect exception caught:\\\" + e.getMessage());\\r\\n         }\\r\\n     }\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jstrachan@apache.org","authorName":"James Strachan","commitYear":"2002","diff":"\"@@ -0,0 +1,11 @@\\n+public void testTwoOptionsFromGroup() {\\r\\n+    String[] args = new String[] { \\\"-f\\\", \\\"-d\\\" };\\r\\n+    try {\\r\\n+        CommandLine cl = _options.parse(args);\\r\\n+        fail(\\\"two arguments from group not allowed\\\");\\r\\n+    } catch (ParseException e) {\\r\\n+        if (!(e instanceof AlreadySelectedException)) {\\r\\n+            fail(\\\"incorrect exception caught:\\\" + e.getMessage());\\r\\n+        }\\r\\n+    }\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\test\java\org\apache\commons\cli\OptionGroupTest.java	testTwoOptionsFromGroupWithProperties	org.apache.commons.cli.OptionGroupTest.testTwoOptionsFromGroupWithProperties()	192	201	1	[{"authorEmail":"arturobernalg@gmail.com","authorName":"Arturo Bernal","commitYear":"2021","diff":"\"@@ -1,9 +1,9 @@\\n @Test\\r\\n public void testTwoOptionsFromGroupWithProperties() throws Exception {\\r\\n     final String[] args = { \\\"-f\\\" };\\r\\n     final Properties properties = new Properties();\\r\\n     properties.put(\\\"d\\\", \\\"true\\\");\\r\\n     final CommandLine cl = parser.parse(options, args, properties);\\r\\n     assertTrue(cl.hasOption(\\\"f\\\"));\\r\\n-    assertTrue(!cl.hasOption(\\\"d\\\"));\\r\\n+    assertFalse(cl.hasOption(\\\"d\\\"));\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"@@ -1,9 +1,9 @@\\n @Test\\r\\n public void testTwoOptionsFromGroupWithProperties() throws Exception {\\r\\n-    final String[] args = new String[] { \\\"-f\\\" };\\r\\n+    final String[] args = { \\\"-f\\\" };\\r\\n     final Properties properties = new Properties();\\r\\n     properties.put(\\\"d\\\", \\\"true\\\");\\r\\n-    final CommandLine cl = parser.parse(_options, args, properties);\\r\\n+    final CommandLine cl = parser.parse(options, args, properties);\\r\\n     assertTrue(cl.hasOption(\\\"f\\\"));\\r\\n     assertTrue(!cl.hasOption(\\\"d\\\"));\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2019","diff":"\"\""},{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,9 +1,9 @@\\n @Test\\r\\n public void testTwoOptionsFromGroupWithProperties() throws Exception {\\r\\n-    String[] args = new String[] { \\\"-f\\\" };\\r\\n-    Properties properties = new Properties();\\r\\n+    final String[] args = new String[] { \\\"-f\\\" };\\r\\n+    final Properties properties = new Properties();\\r\\n     properties.put(\\\"d\\\", \\\"true\\\");\\r\\n-    CommandLine cl = parser.parse(_options, args, properties);\\r\\n+    final CommandLine cl = parser.parse(_options, args, properties);\\r\\n     assertTrue(cl.hasOption(\\\"f\\\"));\\r\\n     assertTrue(!cl.hasOption(\\\"d\\\"));\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"tn@apache.org","authorName":"Thomas Neidhart","commitYear":"2013","diff":"\"@@ -1,8 +1,9 @@\\n+@Test\\r\\n public void testTwoOptionsFromGroupWithProperties() throws Exception {\\r\\n     String[] args = new String[] { \\\"-f\\\" };\\r\\n     Properties properties = new Properties();\\r\\n     properties.put(\\\"d\\\", \\\"true\\\");\\r\\n     CommandLine cl = parser.parse(_options, args, properties);\\r\\n     assertTrue(cl.hasOption(\\\"f\\\"));\\r\\n     assertTrue(!cl.hasOption(\\\"d\\\"));\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2010","diff":"\"@@ -0,0 +1,8 @@\\n+public void testTwoOptionsFromGroupWithProperties() throws Exception {\\r\\n+    String[] args = new String[] { \\\"-f\\\" };\\r\\n+    Properties properties = new Properties();\\r\\n+    properties.put(\\\"d\\\", \\\"true\\\");\\r\\n+    CommandLine cl = parser.parse(_options, args, properties);\\r\\n+    assertTrue(cl.hasOption(\\\"f\\\"));\\r\\n+    assertTrue(!cl.hasOption(\\\"d\\\"));\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\test\java\org\apache\commons\cli\OptionGroupTest.java	testTwoValidLongOptions	org.apache.commons.cli.OptionGroupTest.testTwoValidLongOptions()	204	215	1	[{"authorEmail":"arturobernalg@gmail.com","authorName":"Arturo Bernal","commitYear":"2021","diff":"\"@@ -1,11 +1,11 @@\\n @Test\\r\\n public void testTwoValidLongOptions() throws Exception {\\r\\n     final String[] args = { \\\"--revision\\\", \\\"--file\\\" };\\r\\n     final CommandLine cl = parser.parse(options, args);\\r\\n     assertTrue(\\\"Confirm -r is set\\\", cl.hasOption(\\\"r\\\"));\\r\\n     assertTrue(\\\"Confirm -f is set\\\", cl.hasOption(\\\"f\\\"));\\r\\n-    assertTrue(\\\"Confirm -d is NOT set\\\", !cl.hasOption(\\\"d\\\"));\\r\\n-    assertTrue(\\\"Confirm -s is NOT set\\\", !cl.hasOption(\\\"s\\\"));\\r\\n-    assertTrue(\\\"Confirm -c is NOT set\\\", !cl.hasOption(\\\"c\\\"));\\r\\n+    assertFalse(\\\"Confirm -d is NOT set\\\", cl.hasOption(\\\"d\\\"));\\r\\n+    assertFalse(\\\"Confirm -s is NOT set\\\", cl.hasOption(\\\"s\\\"));\\r\\n+    assertFalse(\\\"Confirm -c is NOT set\\\", cl.hasOption(\\\"c\\\"));\\r\\n     assertTrue(\\\"Confirm no extra args\\\", cl.getArgList().isEmpty());\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"@@ -1,11 +1,11 @@\\n @Test\\r\\n public void testTwoValidLongOptions() throws Exception {\\r\\n-    final String[] args = new String[] { \\\"--revision\\\", \\\"--file\\\" };\\r\\n-    final CommandLine cl = parser.parse(_options, args);\\r\\n+    final String[] args = { \\\"--revision\\\", \\\"--file\\\" };\\r\\n+    final CommandLine cl = parser.parse(options, args);\\r\\n     assertTrue(\\\"Confirm -r is set\\\", cl.hasOption(\\\"r\\\"));\\r\\n     assertTrue(\\\"Confirm -f is set\\\", cl.hasOption(\\\"f\\\"));\\r\\n     assertTrue(\\\"Confirm -d is NOT set\\\", !cl.hasOption(\\\"d\\\"));\\r\\n     assertTrue(\\\"Confirm -s is NOT set\\\", !cl.hasOption(\\\"s\\\"));\\r\\n     assertTrue(\\\"Confirm -c is NOT set\\\", !cl.hasOption(\\\"c\\\"));\\r\\n     assertTrue(\\\"Confirm no extra args\\\", cl.getArgList().isEmpty());\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"@@ -1,11 +1,11 @@\\n @Test\\r\\n public void testTwoValidLongOptions() throws Exception {\\r\\n     final String[] args = new String[] { \\\"--revision\\\", \\\"--file\\\" };\\r\\n     final CommandLine cl = parser.parse(_options, args);\\r\\n     assertTrue(\\\"Confirm -r is set\\\", cl.hasOption(\\\"r\\\"));\\r\\n     assertTrue(\\\"Confirm -f is set\\\", cl.hasOption(\\\"f\\\"));\\r\\n     assertTrue(\\\"Confirm -d is NOT set\\\", !cl.hasOption(\\\"d\\\"));\\r\\n     assertTrue(\\\"Confirm -s is NOT set\\\", !cl.hasOption(\\\"s\\\"));\\r\\n     assertTrue(\\\"Confirm -c is NOT set\\\", !cl.hasOption(\\\"c\\\"));\\r\\n-    assertTrue(\\\"Confirm no extra args\\\", cl.getArgList().size() == 0);\\r\\n+    assertTrue(\\\"Confirm no extra args\\\", cl.getArgList().isEmpty());\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,11 +1,11 @@\\n @Test\\r\\n public void testTwoValidLongOptions() throws Exception {\\r\\n-    String[] args = new String[] { \\\"--revision\\\", \\\"--file\\\" };\\r\\n-    CommandLine cl = parser.parse(_options, args);\\r\\n+    final String[] args = new String[] { \\\"--revision\\\", \\\"--file\\\" };\\r\\n+    final CommandLine cl = parser.parse(_options, args);\\r\\n     assertTrue(\\\"Confirm -r is set\\\", cl.hasOption(\\\"r\\\"));\\r\\n     assertTrue(\\\"Confirm -f is set\\\", cl.hasOption(\\\"f\\\"));\\r\\n     assertTrue(\\\"Confirm -d is NOT set\\\", !cl.hasOption(\\\"d\\\"));\\r\\n     assertTrue(\\\"Confirm -s is NOT set\\\", !cl.hasOption(\\\"s\\\"));\\r\\n     assertTrue(\\\"Confirm -c is NOT set\\\", !cl.hasOption(\\\"c\\\"));\\r\\n     assertTrue(\\\"Confirm no extra args\\\", cl.getArgList().size() == 0);\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"tn@apache.org","authorName":"Thomas Neidhart","commitYear":"2013","diff":"\"@@ -1,10 +1,11 @@\\n+@Test\\r\\n public void testTwoValidLongOptions() throws Exception {\\r\\n     String[] args = new String[] { \\\"--revision\\\", \\\"--file\\\" };\\r\\n     CommandLine cl = parser.parse(_options, args);\\r\\n     assertTrue(\\\"Confirm -r is set\\\", cl.hasOption(\\\"r\\\"));\\r\\n     assertTrue(\\\"Confirm -f is set\\\", cl.hasOption(\\\"f\\\"));\\r\\n     assertTrue(\\\"Confirm -d is NOT set\\\", !cl.hasOption(\\\"d\\\"));\\r\\n     assertTrue(\\\"Confirm -s is NOT set\\\", !cl.hasOption(\\\"s\\\"));\\r\\n     assertTrue(\\\"Confirm -c is NOT set\\\", !cl.hasOption(\\\"c\\\"));\\r\\n     assertTrue(\\\"Confirm no extra args\\\", cl.getArgList().size() == 0);\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2008","diff":"\"@@ -1,14 +1,10 @@\\n-public void testTwoValidLongOptions() {\\r\\n+public void testTwoValidLongOptions() throws Exception {\\r\\n     String[] args = new String[] { \\\"--revision\\\", \\\"--file\\\" };\\r\\n-    try {\\r\\n-        CommandLine cl = parser.parse(_options, args);\\r\\n-        assertTrue(\\\"Confirm -r is set\\\", cl.hasOption(\\\"r\\\"));\\r\\n-        assertTrue(\\\"Confirm -f is set\\\", cl.hasOption(\\\"f\\\"));\\r\\n-        assertTrue(\\\"Confirm -d is NOT set\\\", !cl.hasOption(\\\"d\\\"));\\r\\n-        assertTrue(\\\"Confirm -s is NOT set\\\", !cl.hasOption(\\\"s\\\"));\\r\\n-        assertTrue(\\\"Confirm -c is NOT set\\\", !cl.hasOption(\\\"c\\\"));\\r\\n-        assertTrue(\\\"Confirm no extra args\\\", cl.getArgList().size() == 0);\\r\\n-    } catch (ParseException e) {\\r\\n-        fail(e.toString());\\r\\n-    }\\r\\n+    CommandLine cl = parser.parse(_options, args);\\r\\n+    assertTrue(\\\"Confirm -r is set\\\", cl.hasOption(\\\"r\\\"));\\r\\n+    assertTrue(\\\"Confirm -f is set\\\", cl.hasOption(\\\"f\\\"));\\r\\n+    assertTrue(\\\"Confirm -d is NOT set\\\", !cl.hasOption(\\\"d\\\"));\\r\\n+    assertTrue(\\\"Confirm -s is NOT set\\\", !cl.hasOption(\\\"s\\\"));\\r\\n+    assertTrue(\\\"Confirm -c is NOT set\\\", !cl.hasOption(\\\"c\\\"));\\r\\n+    assertTrue(\\\"Confirm no extra args\\\", cl.getArgList().size() == 0);\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -1,14 +1,14 @@\\n public void testTwoValidLongOptions() {\\r\\n     String[] args = new String[] { \\\"--revision\\\", \\\"--file\\\" };\\r\\n     try {\\r\\n-        CommandLine cl = _options.parse(args);\\r\\n+        CommandLine cl = parser.parse(_options, args);\\r\\n         assertTrue(\\\"Confirm -r is set\\\", cl.hasOption(\\\"r\\\"));\\r\\n         assertTrue(\\\"Confirm -f is set\\\", cl.hasOption(\\\"f\\\"));\\r\\n         assertTrue(\\\"Confirm -d is NOT set\\\", !cl.hasOption(\\\"d\\\"));\\r\\n         assertTrue(\\\"Confirm -s is NOT set\\\", !cl.hasOption(\\\"s\\\"));\\r\\n         assertTrue(\\\"Confirm -c is NOT set\\\", !cl.hasOption(\\\"c\\\"));\\r\\n         assertTrue(\\\"Confirm no extra args\\\", cl.getArgList().size() == 0);\\r\\n     } catch (ParseException e) {\\r\\n         fail(e.toString());\\r\\n     }\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -1,14 +1,14 @@\\n public void testTwoValidLongOptions() {\\r\\n     String[] args = new String[] { \\\"--revision\\\", \\\"--file\\\" };\\r\\n     try {\\r\\n         CommandLine cl = _options.parse(args);\\r\\n-        assertTrue(\\\"Confirm -r is set\\\", cl.hasOption('r'));\\r\\n-        assertTrue(\\\"Confirm -f is set\\\", cl.hasOption('f'));\\r\\n-        assertTrue(\\\"Confirm -d is NOT set\\\", !cl.hasOption('d'));\\r\\n-        assertTrue(\\\"Confirm -s is NOT set\\\", !cl.hasOption('s'));\\r\\n-        assertTrue(\\\"Confirm -c is NOT set\\\", !cl.hasOption('c'));\\r\\n+        assertTrue(\\\"Confirm -r is set\\\", cl.hasOption(\\\"r\\\"));\\r\\n+        assertTrue(\\\"Confirm -f is set\\\", cl.hasOption(\\\"f\\\"));\\r\\n+        assertTrue(\\\"Confirm -d is NOT set\\\", !cl.hasOption(\\\"d\\\"));\\r\\n+        assertTrue(\\\"Confirm -s is NOT set\\\", !cl.hasOption(\\\"s\\\"));\\r\\n+        assertTrue(\\\"Confirm -c is NOT set\\\", !cl.hasOption(\\\"c\\\"));\\r\\n         assertTrue(\\\"Confirm no extra args\\\", cl.getArgList().size() == 0);\\r\\n     } catch (ParseException e) {\\r\\n         fail(e.toString());\\r\\n     }\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jstrachan@apache.org","authorName":"James Strachan","commitYear":"2002","diff":"\"@@ -0,0 +1,14 @@\\n+public void testTwoValidLongOptions() {\\r\\n+    String[] args = new String[] { \\\"--revision\\\", \\\"--file\\\" };\\r\\n+    try {\\r\\n+        CommandLine cl = _options.parse(args);\\r\\n+        assertTrue(\\\"Confirm -r is set\\\", cl.hasOption('r'));\\r\\n+        assertTrue(\\\"Confirm -f is set\\\", cl.hasOption('f'));\\r\\n+        assertTrue(\\\"Confirm -d is NOT set\\\", !cl.hasOption('d'));\\r\\n+        assertTrue(\\\"Confirm -s is NOT set\\\", !cl.hasOption('s'));\\r\\n+        assertTrue(\\\"Confirm -c is NOT set\\\", !cl.hasOption('c'));\\r\\n+        assertTrue(\\\"Confirm no extra args\\\", cl.getArgList().size() == 0);\\r\\n+    } catch (ParseException e) {\\r\\n+        fail(e.toString());\\r\\n+    }\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\test\java\org\apache\commons\cli\OptionGroupTest.java	testTwoValidOptions	org.apache.commons.cli.OptionGroupTest.testTwoValidOptions()	218	229	1	[{"authorEmail":"arturobernalg@gmail.com","authorName":"Arturo Bernal","commitYear":"2021","diff":"\"@@ -1,11 +1,11 @@\\n @Test\\r\\n public void testTwoValidOptions() throws Exception {\\r\\n     final String[] args = { \\\"-r\\\", \\\"-f\\\" };\\r\\n     final CommandLine cl = parser.parse(options, args);\\r\\n     assertTrue(\\\"Confirm -r is set\\\", cl.hasOption(\\\"r\\\"));\\r\\n     assertTrue(\\\"Confirm -f is set\\\", cl.hasOption(\\\"f\\\"));\\r\\n-    assertTrue(\\\"Confirm -d is NOT set\\\", !cl.hasOption(\\\"d\\\"));\\r\\n-    assertTrue(\\\"Confirm -s is NOT set\\\", !cl.hasOption(\\\"s\\\"));\\r\\n-    assertTrue(\\\"Confirm -c is NOT set\\\", !cl.hasOption(\\\"c\\\"));\\r\\n+    assertFalse(\\\"Confirm -d is NOT set\\\", cl.hasOption(\\\"d\\\"));\\r\\n+    assertFalse(\\\"Confirm -s is NOT set\\\", cl.hasOption(\\\"s\\\"));\\r\\n+    assertFalse(\\\"Confirm -c is NOT set\\\", cl.hasOption(\\\"c\\\"));\\r\\n     assertTrue(\\\"Confirm no extra args\\\", cl.getArgList().isEmpty());\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"@@ -1,11 +1,11 @@\\n @Test\\r\\n public void testTwoValidOptions() throws Exception {\\r\\n-    final String[] args = new String[] { \\\"-r\\\", \\\"-f\\\" };\\r\\n-    final CommandLine cl = parser.parse(_options, args);\\r\\n+    final String[] args = { \\\"-r\\\", \\\"-f\\\" };\\r\\n+    final CommandLine cl = parser.parse(options, args);\\r\\n     assertTrue(\\\"Confirm -r is set\\\", cl.hasOption(\\\"r\\\"));\\r\\n     assertTrue(\\\"Confirm -f is set\\\", cl.hasOption(\\\"f\\\"));\\r\\n     assertTrue(\\\"Confirm -d is NOT set\\\", !cl.hasOption(\\\"d\\\"));\\r\\n     assertTrue(\\\"Confirm -s is NOT set\\\", !cl.hasOption(\\\"s\\\"));\\r\\n     assertTrue(\\\"Confirm -c is NOT set\\\", !cl.hasOption(\\\"c\\\"));\\r\\n     assertTrue(\\\"Confirm no extra args\\\", cl.getArgList().isEmpty());\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"@@ -1,11 +1,11 @@\\n @Test\\r\\n public void testTwoValidOptions() throws Exception {\\r\\n     final String[] args = new String[] { \\\"-r\\\", \\\"-f\\\" };\\r\\n     final CommandLine cl = parser.parse(_options, args);\\r\\n     assertTrue(\\\"Confirm -r is set\\\", cl.hasOption(\\\"r\\\"));\\r\\n     assertTrue(\\\"Confirm -f is set\\\", cl.hasOption(\\\"f\\\"));\\r\\n     assertTrue(\\\"Confirm -d is NOT set\\\", !cl.hasOption(\\\"d\\\"));\\r\\n     assertTrue(\\\"Confirm -s is NOT set\\\", !cl.hasOption(\\\"s\\\"));\\r\\n     assertTrue(\\\"Confirm -c is NOT set\\\", !cl.hasOption(\\\"c\\\"));\\r\\n-    assertTrue(\\\"Confirm no extra args\\\", cl.getArgList().size() == 0);\\r\\n+    assertTrue(\\\"Confirm no extra args\\\", cl.getArgList().isEmpty());\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,11 +1,11 @@\\n @Test\\r\\n public void testTwoValidOptions() throws Exception {\\r\\n-    String[] args = new String[] { \\\"-r\\\", \\\"-f\\\" };\\r\\n-    CommandLine cl = parser.parse(_options, args);\\r\\n+    final String[] args = new String[] { \\\"-r\\\", \\\"-f\\\" };\\r\\n+    final CommandLine cl = parser.parse(_options, args);\\r\\n     assertTrue(\\\"Confirm -r is set\\\", cl.hasOption(\\\"r\\\"));\\r\\n     assertTrue(\\\"Confirm -f is set\\\", cl.hasOption(\\\"f\\\"));\\r\\n     assertTrue(\\\"Confirm -d is NOT set\\\", !cl.hasOption(\\\"d\\\"));\\r\\n     assertTrue(\\\"Confirm -s is NOT set\\\", !cl.hasOption(\\\"s\\\"));\\r\\n     assertTrue(\\\"Confirm -c is NOT set\\\", !cl.hasOption(\\\"c\\\"));\\r\\n     assertTrue(\\\"Confirm no extra args\\\", cl.getArgList().size() == 0);\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"tn@apache.org","authorName":"Thomas Neidhart","commitYear":"2013","diff":"\"@@ -1,10 +1,11 @@\\n+@Test\\r\\n public void testTwoValidOptions() throws Exception {\\r\\n     String[] args = new String[] { \\\"-r\\\", \\\"-f\\\" };\\r\\n     CommandLine cl = parser.parse(_options, args);\\r\\n     assertTrue(\\\"Confirm -r is set\\\", cl.hasOption(\\\"r\\\"));\\r\\n     assertTrue(\\\"Confirm -f is set\\\", cl.hasOption(\\\"f\\\"));\\r\\n     assertTrue(\\\"Confirm -d is NOT set\\\", !cl.hasOption(\\\"d\\\"));\\r\\n     assertTrue(\\\"Confirm -s is NOT set\\\", !cl.hasOption(\\\"s\\\"));\\r\\n     assertTrue(\\\"Confirm -c is NOT set\\\", !cl.hasOption(\\\"c\\\"));\\r\\n     assertTrue(\\\"Confirm no extra args\\\", cl.getArgList().size() == 0);\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2008","diff":"\"@@ -1,14 +1,10 @@\\n-public void testTwoValidOptions() {\\r\\n+public void testTwoValidOptions() throws Exception {\\r\\n     String[] args = new String[] { \\\"-r\\\", \\\"-f\\\" };\\r\\n-    try {\\r\\n-        CommandLine cl = parser.parse(_options, args);\\r\\n-        assertTrue(\\\"Confirm -r is set\\\", cl.hasOption(\\\"r\\\"));\\r\\n-        assertTrue(\\\"Confirm -f is set\\\", cl.hasOption(\\\"f\\\"));\\r\\n-        assertTrue(\\\"Confirm -d is NOT set\\\", !cl.hasOption(\\\"d\\\"));\\r\\n-        assertTrue(\\\"Confirm -s is NOT set\\\", !cl.hasOption(\\\"s\\\"));\\r\\n-        assertTrue(\\\"Confirm -c is NOT set\\\", !cl.hasOption(\\\"c\\\"));\\r\\n-        assertTrue(\\\"Confirm no extra args\\\", cl.getArgList().size() == 0);\\r\\n-    } catch (ParseException e) {\\r\\n-        fail(e.toString());\\r\\n-    }\\r\\n+    CommandLine cl = parser.parse(_options, args);\\r\\n+    assertTrue(\\\"Confirm -r is set\\\", cl.hasOption(\\\"r\\\"));\\r\\n+    assertTrue(\\\"Confirm -f is set\\\", cl.hasOption(\\\"f\\\"));\\r\\n+    assertTrue(\\\"Confirm -d is NOT set\\\", !cl.hasOption(\\\"d\\\"));\\r\\n+    assertTrue(\\\"Confirm -s is NOT set\\\", !cl.hasOption(\\\"s\\\"));\\r\\n+    assertTrue(\\\"Confirm -c is NOT set\\\", !cl.hasOption(\\\"c\\\"));\\r\\n+    assertTrue(\\\"Confirm no extra args\\\", cl.getArgList().size() == 0);\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -1,14 +1,14 @@\\n public void testTwoValidOptions() {\\r\\n     String[] args = new String[] { \\\"-r\\\", \\\"-f\\\" };\\r\\n     try {\\r\\n-        CommandLine cl = _options.parse(args);\\r\\n+        CommandLine cl = parser.parse(_options, args);\\r\\n         assertTrue(\\\"Confirm -r is set\\\", cl.hasOption(\\\"r\\\"));\\r\\n         assertTrue(\\\"Confirm -f is set\\\", cl.hasOption(\\\"f\\\"));\\r\\n         assertTrue(\\\"Confirm -d is NOT set\\\", !cl.hasOption(\\\"d\\\"));\\r\\n         assertTrue(\\\"Confirm -s is NOT set\\\", !cl.hasOption(\\\"s\\\"));\\r\\n         assertTrue(\\\"Confirm -c is NOT set\\\", !cl.hasOption(\\\"c\\\"));\\r\\n         assertTrue(\\\"Confirm no extra args\\\", cl.getArgList().size() == 0);\\r\\n     } catch (ParseException e) {\\r\\n         fail(e.toString());\\r\\n     }\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -1,14 +1,14 @@\\n public void testTwoValidOptions() {\\r\\n     String[] args = new String[] { \\\"-r\\\", \\\"-f\\\" };\\r\\n     try {\\r\\n         CommandLine cl = _options.parse(args);\\r\\n-        assertTrue(\\\"Confirm -r is set\\\", cl.hasOption('r'));\\r\\n-        assertTrue(\\\"Confirm -f is set\\\", cl.hasOption('f'));\\r\\n-        assertTrue(\\\"Confirm -d is NOT set\\\", !cl.hasOption('d'));\\r\\n-        assertTrue(\\\"Confirm -s is NOT set\\\", !cl.hasOption('s'));\\r\\n-        assertTrue(\\\"Confirm -c is NOT set\\\", !cl.hasOption('c'));\\r\\n+        assertTrue(\\\"Confirm -r is set\\\", cl.hasOption(\\\"r\\\"));\\r\\n+        assertTrue(\\\"Confirm -f is set\\\", cl.hasOption(\\\"f\\\"));\\r\\n+        assertTrue(\\\"Confirm -d is NOT set\\\", !cl.hasOption(\\\"d\\\"));\\r\\n+        assertTrue(\\\"Confirm -s is NOT set\\\", !cl.hasOption(\\\"s\\\"));\\r\\n+        assertTrue(\\\"Confirm -c is NOT set\\\", !cl.hasOption(\\\"c\\\"));\\r\\n         assertTrue(\\\"Confirm no extra args\\\", cl.getArgList().size() == 0);\\r\\n     } catch (ParseException e) {\\r\\n         fail(e.toString());\\r\\n     }\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jstrachan@apache.org","authorName":"James Strachan","commitYear":"2002","diff":"\"@@ -0,0 +1,14 @@\\n+public void testTwoValidOptions() {\\r\\n+    String[] args = new String[] { \\\"-r\\\", \\\"-f\\\" };\\r\\n+    try {\\r\\n+        CommandLine cl = _options.parse(args);\\r\\n+        assertTrue(\\\"Confirm -r is set\\\", cl.hasOption('r'));\\r\\n+        assertTrue(\\\"Confirm -f is set\\\", cl.hasOption('f'));\\r\\n+        assertTrue(\\\"Confirm -d is NOT set\\\", !cl.hasOption('d'));\\r\\n+        assertTrue(\\\"Confirm -s is NOT set\\\", !cl.hasOption('s'));\\r\\n+        assertTrue(\\\"Confirm -c is NOT set\\\", !cl.hasOption('c'));\\r\\n+        assertTrue(\\\"Confirm no extra args\\\", cl.getArgList().size() == 0);\\r\\n+    } catch (ParseException e) {\\r\\n+        fail(e.toString());\\r\\n+    }\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\test\java\org\apache\commons\cli\OptionGroupTest.java	testValidLongOnlyOptions	org.apache.commons.cli.OptionGroupTest.testValidLongOnlyOptions()	232	238	1	[{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"@@ -1,7 +1,7 @@\\n @Test\\r\\n public void testValidLongOnlyOptions() throws Exception {\\r\\n-    final CommandLine cl1 = parser.parse(_options, new String[] { \\\"--export\\\" });\\r\\n+    final CommandLine cl1 = parser.parse(options, new String[] { \\\"--export\\\" });\\r\\n     assertTrue(\\\"Confirm --export is set\\\", cl1.hasOption(\\\"export\\\"));\\r\\n-    final CommandLine cl2 = parser.parse(_options, new String[] { \\\"--import\\\" });\\r\\n+    final CommandLine cl2 = parser.parse(options, new String[] { \\\"--import\\\" });\\r\\n     assertTrue(\\\"Confirm --import is set\\\", cl2.hasOption(\\\"import\\\"));\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,7 +1,7 @@\\n @Test\\r\\n public void testValidLongOnlyOptions() throws Exception {\\r\\n-    CommandLine cl1 = parser.parse(_options, new String[] { \\\"--export\\\" });\\r\\n+    final CommandLine cl1 = parser.parse(_options, new String[] { \\\"--export\\\" });\\r\\n     assertTrue(\\\"Confirm --export is set\\\", cl1.hasOption(\\\"export\\\"));\\r\\n-    CommandLine cl2 = parser.parse(_options, new String[] { \\\"--import\\\" });\\r\\n+    final CommandLine cl2 = parser.parse(_options, new String[] { \\\"--import\\\" });\\r\\n     assertTrue(\\\"Confirm --import is set\\\", cl2.hasOption(\\\"import\\\"));\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"tn@apache.org","authorName":"Thomas Neidhart","commitYear":"2013","diff":"\"@@ -1,6 +1,7 @@\\n+@Test\\r\\n public void testValidLongOnlyOptions() throws Exception {\\r\\n     CommandLine cl1 = parser.parse(_options, new String[] { \\\"--export\\\" });\\r\\n     assertTrue(\\\"Confirm --export is set\\\", cl1.hasOption(\\\"export\\\"));\\r\\n     CommandLine cl2 = parser.parse(_options, new String[] { \\\"--import\\\" });\\r\\n     assertTrue(\\\"Confirm --import is set\\\", cl2.hasOption(\\\"import\\\"));\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2008","diff":"\"@@ -1,14 +1,6 @@\\n-public void testValidLongOnlyOptions() {\\r\\n-    try {\\r\\n-        CommandLine cl = parser.parse(_options, new String[] { \\\"--export\\\" });\\r\\n-        assertTrue(\\\"Confirm --export is set\\\", cl.hasOption(\\\"export\\\"));\\r\\n-    } catch (ParseException e) {\\r\\n-        fail(e.toString());\\r\\n-    }\\r\\n-    try {\\r\\n-        CommandLine cl = parser.parse(_options, new String[] { \\\"--import\\\" });\\r\\n-        assertTrue(\\\"Confirm --import is set\\\", cl.hasOption(\\\"import\\\"));\\r\\n-    } catch (ParseException e) {\\r\\n-        fail(e.toString());\\r\\n-    }\\r\\n+public void testValidLongOnlyOptions() throws Exception {\\r\\n+    CommandLine cl1 = parser.parse(_options, new String[] { \\\"--export\\\" });\\r\\n+    assertTrue(\\\"Confirm --export is set\\\", cl1.hasOption(\\\"export\\\"));\\r\\n+    CommandLine cl2 = parser.parse(_options, new String[] { \\\"--import\\\" });\\r\\n+    assertTrue(\\\"Confirm --import is set\\\", cl2.hasOption(\\\"import\\\"));\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -0,0 +1,14 @@\\n+public void testValidLongOnlyOptions() {\\r\\n+    try {\\r\\n+        CommandLine cl = parser.parse(_options, new String[] { \\\"--export\\\" });\\r\\n+        assertTrue(\\\"Confirm --export is set\\\", cl.hasOption(\\\"export\\\"));\\r\\n+    } catch (ParseException e) {\\r\\n+        fail(e.toString());\\r\\n+    }\\r\\n+    try {\\r\\n+        CommandLine cl = parser.parse(_options, new String[] { \\\"--import\\\" });\\r\\n+        assertTrue(\\\"Confirm --import is set\\\", cl.hasOption(\\\"import\\\"));\\r\\n+    } catch (ParseException e) {\\r\\n+        fail(e.toString());\\r\\n+    }\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\test\java\org\apache\commons\cli\OptionsTest.java	testDuplicateLong	org.apache.commons.cli.OptionsTest.testDuplicateLong()	33	38	1	[{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,7 +1,7 @@\\n @Test\\r\\n public void testDuplicateLong() {\\r\\n-    Options opts = new Options();\\r\\n+    final Options opts = new Options();\\r\\n     opts.addOption(\\\"a\\\", \\\"--a\\\", false, \\\"toggle -a\\\");\\r\\n     opts.addOption(\\\"a\\\", \\\"--a\\\", false, \\\"toggle -a*\\\");\\r\\n     assertEquals(\\\"last one in wins\\\", \\\"toggle -a*\\\", opts.getOption(\\\"a\\\").getDescription());\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"tn@apache.org","authorName":"Thomas Neidhart","commitYear":"2013","diff":"\"@@ -1,6 +1,7 @@\\n+@Test\\r\\n public void testDuplicateLong() {\\r\\n     Options opts = new Options();\\r\\n     opts.addOption(\\\"a\\\", \\\"--a\\\", false, \\\"toggle -a\\\");\\r\\n     opts.addOption(\\\"a\\\", \\\"--a\\\", false, \\\"toggle -a*\\\");\\r\\n     assertEquals(\\\"last one in wins\\\", \\\"toggle -a*\\\", opts.getOption(\\\"a\\\").getDescription());\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2008","diff":"\"\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -1,6 +1,6 @@\\n public void testDuplicateLong() {\\r\\n     Options opts = new Options();\\r\\n-    opts.addOption('a', \\\"--a\\\", false, \\\"toggle -a\\\");\\r\\n-    opts.addOption('a', \\\"--a\\\", false, \\\"toggle -a*\\\");\\r\\n-    assertEquals(\\\"last one in wins\\\", \\\"toggle -a*\\\", opts.getOption('a').getDescription());\\r\\n+    opts.addOption(\\\"a\\\", \\\"--a\\\", false, \\\"toggle -a\\\");\\r\\n+    opts.addOption(\\\"a\\\", \\\"--a\\\", false, \\\"toggle -a*\\\");\\r\\n+    assertEquals(\\\"last one in wins\\\", \\\"toggle -a*\\\", opts.getOption(\\\"a\\\").getDescription());\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jstrachan@apache.org","authorName":"James Strachan","commitYear":"2002","diff":"\"@@ -0,0 +1,6 @@\\n+public void testDuplicateLong() {\\r\\n+    Options opts = new Options();\\r\\n+    opts.addOption('a', \\\"--a\\\", false, \\\"toggle -a\\\");\\r\\n+    opts.addOption('a', \\\"--a\\\", false, \\\"toggle -a*\\\");\\r\\n+    assertEquals(\\\"last one in wins\\\", \\\"toggle -a*\\\", opts.getOption('a').getDescription());\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\test\java\org\apache\commons\cli\OptionsTest.java	testDuplicateSimple	org.apache.commons.cli.OptionsTest.testDuplicateSimple()	41	47	1	[{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,7 +1,7 @@\\n @Test\\r\\n public void testDuplicateSimple() {\\r\\n-    Options opts = new Options();\\r\\n+    final Options opts = new Options();\\r\\n     opts.addOption(\\\"a\\\", false, \\\"toggle -a\\\");\\r\\n     opts.addOption(\\\"a\\\", true, \\\"toggle -a*\\\");\\r\\n     assertEquals(\\\"last one in wins\\\", \\\"toggle -a*\\\", opts.getOption(\\\"a\\\").getDescription());\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"tn@apache.org","authorName":"Thomas Neidhart","commitYear":"2013","diff":"\"@@ -1,6 +1,7 @@\\n+@Test\\r\\n public void testDuplicateSimple() {\\r\\n     Options opts = new Options();\\r\\n     opts.addOption(\\\"a\\\", false, \\\"toggle -a\\\");\\r\\n     opts.addOption(\\\"a\\\", true, \\\"toggle -a*\\\");\\r\\n     assertEquals(\\\"last one in wins\\\", \\\"toggle -a*\\\", opts.getOption(\\\"a\\\").getDescription());\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2008","diff":"\"\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -1,6 +1,6 @@\\n public void testDuplicateSimple() {\\r\\n     Options opts = new Options();\\r\\n-    opts.addOption('a', false, \\\"toggle -a\\\");\\r\\n-    opts.addOption('a', true, \\\"toggle -a*\\\");\\r\\n-    assertEquals(\\\"last one in wins\\\", \\\"toggle -a*\\\", opts.getOption('a').getDescription());\\r\\n+    opts.addOption(\\\"a\\\", false, \\\"toggle -a\\\");\\r\\n+    opts.addOption(\\\"a\\\", true, \\\"toggle -a*\\\");\\r\\n+    assertEquals(\\\"last one in wins\\\", \\\"toggle -a*\\\", opts.getOption(\\\"a\\\").getDescription());\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jstrachan@apache.org","authorName":"James Strachan","commitYear":"2002","diff":"\"@@ -0,0 +1,6 @@\\n+public void testDuplicateSimple() {\\r\\n+    Options opts = new Options();\\r\\n+    opts.addOption('a', false, \\\"toggle -a\\\");\\r\\n+    opts.addOption('a', true, \\\"toggle -a*\\\");\\r\\n+    assertEquals(\\\"last one in wins\\\", \\\"toggle -a*\\\", opts.getOption('a').getDescription());\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\test\java\org\apache\commons\cli\OptionsTest.java	testGetMatchingOpts	org.apache.commons.cli.OptionsTest.testGetMatchingOpts()	50	58	1	[{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2019","diff":"\"\""},{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,9 +1,9 @@\\n @Test\\r\\n public void testGetMatchingOpts() {\\r\\n-    Options options = new Options();\\r\\n+    final Options options = new Options();\\r\\n     options.addOption(OptionBuilder.withLongOpt(\\\"version\\\").create());\\r\\n     options.addOption(OptionBuilder.withLongOpt(\\\"verbose\\\").create());\\r\\n     assertTrue(options.getMatchingOptions(\\\"foo\\\").isEmpty());\\r\\n     assertEquals(1, options.getMatchingOptions(\\\"version\\\").size());\\r\\n     assertEquals(2, options.getMatchingOptions(\\\"ver\\\").size());\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"tn@apache.org","authorName":"Thomas Neidhart","commitYear":"2013","diff":"\"@@ -1,8 +1,9 @@\\n+@Test\\r\\n public void testGetMatchingOpts() {\\r\\n     Options options = new Options();\\r\\n     options.addOption(OptionBuilder.withLongOpt(\\\"version\\\").create());\\r\\n     options.addOption(OptionBuilder.withLongOpt(\\\"verbose\\\").create());\\r\\n     assertTrue(options.getMatchingOptions(\\\"foo\\\").isEmpty());\\r\\n     assertEquals(1, options.getMatchingOptions(\\\"version\\\").size());\\r\\n     assertEquals(2, options.getMatchingOptions(\\\"ver\\\").size());\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2009","diff":"\"@@ -0,0 +1,8 @@\\n+public void testGetMatchingOpts() {\\r\\n+    Options options = new Options();\\r\\n+    options.addOption(OptionBuilder.withLongOpt(\\\"version\\\").create());\\r\\n+    options.addOption(OptionBuilder.withLongOpt(\\\"verbose\\\").create());\\r\\n+    assertTrue(options.getMatchingOptions(\\\"foo\\\").isEmpty());\\r\\n+    assertEquals(1, options.getMatchingOptions(\\\"version\\\").size());\\r\\n+    assertEquals(2, options.getMatchingOptions(\\\"ver\\\").size());\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\test\java\org\apache\commons\cli\OptionsTest.java	testGetOptionsGroups	org.apache.commons.cli.OptionsTest.testGetOptionsGroups()	61	77	1	[{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,14 +1,14 @@\\n @Test\\r\\n public void testGetOptionsGroups() {\\r\\n-    Options options = new Options();\\r\\n-    OptionGroup group1 = new OptionGroup();\\r\\n+    final Options options = new Options();\\r\\n+    final OptionGroup group1 = new OptionGroup();\\r\\n     group1.addOption(OptionBuilder.create('a'));\\r\\n     group1.addOption(OptionBuilder.create('b'));\\r\\n-    OptionGroup group2 = new OptionGroup();\\r\\n+    final OptionGroup group2 = new OptionGroup();\\r\\n     group2.addOption(OptionBuilder.create('x'));\\r\\n     group2.addOption(OptionBuilder.create('y'));\\r\\n     options.addOptionGroup(group1);\\r\\n     options.addOptionGroup(group2);\\r\\n     assertNotNull(options.getOptionGroups());\\r\\n     assertEquals(2, options.getOptionGroups().size());\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"tn@apache.org","authorName":"Thomas Neidhart","commitYear":"2013","diff":"\"@@ -1,13 +1,14 @@\\n+@Test\\r\\n public void testGetOptionsGroups() {\\r\\n     Options options = new Options();\\r\\n     OptionGroup group1 = new OptionGroup();\\r\\n     group1.addOption(OptionBuilder.create('a'));\\r\\n     group1.addOption(OptionBuilder.create('b'));\\r\\n     OptionGroup group2 = new OptionGroup();\\r\\n     group2.addOption(OptionBuilder.create('x'));\\r\\n     group2.addOption(OptionBuilder.create('y'));\\r\\n     options.addOptionGroup(group1);\\r\\n     options.addOptionGroup(group2);\\r\\n     assertNotNull(options.getOptionGroups());\\r\\n     assertEquals(2, options.getOptionGroups().size());\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2008","diff":"\"@@ -0,0 +1,13 @@\\n+public void testGetOptionsGroups() {\\r\\n+    Options options = new Options();\\r\\n+    OptionGroup group1 = new OptionGroup();\\r\\n+    group1.addOption(OptionBuilder.create('a'));\\r\\n+    group1.addOption(OptionBuilder.create('b'));\\r\\n+    OptionGroup group2 = new OptionGroup();\\r\\n+    group2.addOption(OptionBuilder.create('x'));\\r\\n+    group2.addOption(OptionBuilder.create('y'));\\r\\n+    options.addOptionGroup(group1);\\r\\n+    options.addOptionGroup(group2);\\r\\n+    assertNotNull(options.getOptionGroups());\\r\\n+    assertEquals(2, options.getOptionGroups().size());\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\test\java\org\apache\commons\cli\OptionsTest.java	testHelpOptions	org.apache.commons.cli.OptionsTest.testHelpOptions()	80	108	1	[{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2020","diff":"\"@@ -1,26 +1,26 @@\\n @Test\\r\\n public void testHelpOptions() {\\r\\n     final Option longOnly1 = OptionBuilder.withLongOpt(\\\"long-only1\\\").create();\\r\\n     final Option longOnly2 = OptionBuilder.withLongOpt(\\\"long-only2\\\").create();\\r\\n     final Option shortOnly1 = OptionBuilder.create(\\\"1\\\");\\r\\n     final Option shortOnly2 = OptionBuilder.create(\\\"2\\\");\\r\\n     final Option bothA = OptionBuilder.withLongOpt(\\\"bothA\\\").create(\\\"a\\\");\\r\\n     final Option bothB = OptionBuilder.withLongOpt(\\\"bothB\\\").create(\\\"b\\\");\\r\\n     final Options options = new Options();\\r\\n     options.addOption(longOnly1);\\r\\n     options.addOption(longOnly2);\\r\\n     options.addOption(shortOnly1);\\r\\n     options.addOption(shortOnly2);\\r\\n     options.addOption(bothA);\\r\\n     options.addOption(bothB);\\r\\n-    final Collection<Option> allOptions = new ArrayList<Option>();\\r\\n+    final Collection<Option> allOptions = new ArrayList<>();\\r\\n     allOptions.add(longOnly1);\\r\\n     allOptions.add(longOnly2);\\r\\n     allOptions.add(shortOnly1);\\r\\n     allOptions.add(shortOnly2);\\r\\n     allOptions.add(bothA);\\r\\n     allOptions.add(bothB);\\r\\n     final Collection<Option> helpOptions = options.helpOptions();\\r\\n     assertTrue(\\\"Everything in all should be in help\\\", helpOptions.containsAll(allOptions));\\r\\n     assertTrue(\\\"Everything in help should be in all\\\", allOptions.containsAll(helpOptions));\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2019","diff":"\"\""},{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,26 +1,26 @@\\n @Test\\r\\n public void testHelpOptions() {\\r\\n-    Option longOnly1 = OptionBuilder.withLongOpt(\\\"long-only1\\\").create();\\r\\n-    Option longOnly2 = OptionBuilder.withLongOpt(\\\"long-only2\\\").create();\\r\\n-    Option shortOnly1 = OptionBuilder.create(\\\"1\\\");\\r\\n-    Option shortOnly2 = OptionBuilder.create(\\\"2\\\");\\r\\n-    Option bothA = OptionBuilder.withLongOpt(\\\"bothA\\\").create(\\\"a\\\");\\r\\n-    Option bothB = OptionBuilder.withLongOpt(\\\"bothB\\\").create(\\\"b\\\");\\r\\n-    Options options = new Options();\\r\\n+    final Option longOnly1 = OptionBuilder.withLongOpt(\\\"long-only1\\\").create();\\r\\n+    final Option longOnly2 = OptionBuilder.withLongOpt(\\\"long-only2\\\").create();\\r\\n+    final Option shortOnly1 = OptionBuilder.create(\\\"1\\\");\\r\\n+    final Option shortOnly2 = OptionBuilder.create(\\\"2\\\");\\r\\n+    final Option bothA = OptionBuilder.withLongOpt(\\\"bothA\\\").create(\\\"a\\\");\\r\\n+    final Option bothB = OptionBuilder.withLongOpt(\\\"bothB\\\").create(\\\"b\\\");\\r\\n+    final Options options = new Options();\\r\\n     options.addOption(longOnly1);\\r\\n     options.addOption(longOnly2);\\r\\n     options.addOption(shortOnly1);\\r\\n     options.addOption(shortOnly2);\\r\\n     options.addOption(bothA);\\r\\n     options.addOption(bothB);\\r\\n-    Collection<Option> allOptions = new ArrayList<Option>();\\r\\n+    final Collection<Option> allOptions = new ArrayList<Option>();\\r\\n     allOptions.add(longOnly1);\\r\\n     allOptions.add(longOnly2);\\r\\n     allOptions.add(shortOnly1);\\r\\n     allOptions.add(shortOnly2);\\r\\n     allOptions.add(bothA);\\r\\n     allOptions.add(bothB);\\r\\n-    Collection<Option> helpOptions = options.helpOptions();\\r\\n+    final Collection<Option> helpOptions = options.helpOptions();\\r\\n     assertTrue(\\\"Everything in all should be in help\\\", helpOptions.containsAll(allOptions));\\r\\n     assertTrue(\\\"Everything in help should be in all\\\", allOptions.containsAll(helpOptions));\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"tn@apache.org","authorName":"Thomas Neidhart","commitYear":"2013","diff":"\"@@ -1,25 +1,26 @@\\n+@Test\\r\\n public void testHelpOptions() {\\r\\n     Option longOnly1 = OptionBuilder.withLongOpt(\\\"long-only1\\\").create();\\r\\n     Option longOnly2 = OptionBuilder.withLongOpt(\\\"long-only2\\\").create();\\r\\n     Option shortOnly1 = OptionBuilder.create(\\\"1\\\");\\r\\n     Option shortOnly2 = OptionBuilder.create(\\\"2\\\");\\r\\n     Option bothA = OptionBuilder.withLongOpt(\\\"bothA\\\").create(\\\"a\\\");\\r\\n     Option bothB = OptionBuilder.withLongOpt(\\\"bothB\\\").create(\\\"b\\\");\\r\\n     Options options = new Options();\\r\\n     options.addOption(longOnly1);\\r\\n     options.addOption(longOnly2);\\r\\n     options.addOption(shortOnly1);\\r\\n     options.addOption(shortOnly2);\\r\\n     options.addOption(bothA);\\r\\n     options.addOption(bothB);\\r\\n     Collection<Option> allOptions = new ArrayList<Option>();\\r\\n     allOptions.add(longOnly1);\\r\\n     allOptions.add(longOnly2);\\r\\n     allOptions.add(shortOnly1);\\r\\n     allOptions.add(shortOnly2);\\r\\n     allOptions.add(bothA);\\r\\n     allOptions.add(bothB);\\r\\n     Collection<Option> helpOptions = options.helpOptions();\\r\\n     assertTrue(\\\"Everything in all should be in help\\\", helpOptions.containsAll(allOptions));\\r\\n     assertTrue(\\\"Everything in help should be in all\\\", allOptions.containsAll(helpOptions));\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"sebb@apache.org","authorName":"Sebastian Bazley","commitYear":"2013","diff":"\"@@ -1,25 +1,25 @@\\n public void testHelpOptions() {\\r\\n     Option longOnly1 = OptionBuilder.withLongOpt(\\\"long-only1\\\").create();\\r\\n     Option longOnly2 = OptionBuilder.withLongOpt(\\\"long-only2\\\").create();\\r\\n     Option shortOnly1 = OptionBuilder.create(\\\"1\\\");\\r\\n     Option shortOnly2 = OptionBuilder.create(\\\"2\\\");\\r\\n     Option bothA = OptionBuilder.withLongOpt(\\\"bothA\\\").create(\\\"a\\\");\\r\\n     Option bothB = OptionBuilder.withLongOpt(\\\"bothB\\\").create(\\\"b\\\");\\r\\n     Options options = new Options();\\r\\n     options.addOption(longOnly1);\\r\\n     options.addOption(longOnly2);\\r\\n     options.addOption(shortOnly1);\\r\\n     options.addOption(shortOnly2);\\r\\n     options.addOption(bothA);\\r\\n     options.addOption(bothB);\\r\\n-    Collection allOptions = new ArrayList();\\r\\n+    Collection<Option> allOptions = new ArrayList<Option>();\\r\\n     allOptions.add(longOnly1);\\r\\n     allOptions.add(longOnly2);\\r\\n     allOptions.add(shortOnly1);\\r\\n     allOptions.add(shortOnly2);\\r\\n     allOptions.add(bothA);\\r\\n     allOptions.add(bothB);\\r\\n-    Collection helpOptions = options.helpOptions();\\r\\n+    Collection<Option> helpOptions = options.helpOptions();\\r\\n     assertTrue(\\\"Everything in all should be in help\\\", helpOptions.containsAll(allOptions));\\r\\n     assertTrue(\\\"Everything in help should be in all\\\", allOptions.containsAll(helpOptions));\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2008","diff":"\"\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2008","diff":"\"\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -0,0 +1,25 @@\\n+public void testHelpOptions() {\\r\\n+    Option longOnly1 = OptionBuilder.withLongOpt(\\\"long-only1\\\").create();\\r\\n+    Option longOnly2 = OptionBuilder.withLongOpt(\\\"long-only2\\\").create();\\r\\n+    Option shortOnly1 = OptionBuilder.create(\\\"1\\\");\\r\\n+    Option shortOnly2 = OptionBuilder.create(\\\"2\\\");\\r\\n+    Option bothA = OptionBuilder.withLongOpt(\\\"bothA\\\").create(\\\"a\\\");\\r\\n+    Option bothB = OptionBuilder.withLongOpt(\\\"bothB\\\").create(\\\"b\\\");\\r\\n+    Options options = new Options();\\r\\n+    options.addOption(longOnly1);\\r\\n+    options.addOption(longOnly2);\\r\\n+    options.addOption(shortOnly1);\\r\\n+    options.addOption(shortOnly2);\\r\\n+    options.addOption(bothA);\\r\\n+    options.addOption(bothB);\\r\\n+    Collection allOptions = new ArrayList();\\r\\n+    allOptions.add(longOnly1);\\r\\n+    allOptions.add(longOnly2);\\r\\n+    allOptions.add(shortOnly1);\\r\\n+    allOptions.add(shortOnly2);\\r\\n+    allOptions.add(bothA);\\r\\n+    allOptions.add(bothB);\\r\\n+    Collection helpOptions = options.helpOptions();\\r\\n+    assertTrue(\\\"Everything in all should be in help\\\", helpOptions.containsAll(allOptions));\\r\\n+    assertTrue(\\\"Everything in help should be in all\\\", allOptions.containsAll(helpOptions));\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\test\java\org\apache\commons\cli\OptionsTest.java	testLong	org.apache.commons.cli.OptionsTest.testLong()	111	119	1	[{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,8 +1,8 @@\\n @Test\\r\\n public void testLong() {\\r\\n-    Options opts = new Options();\\r\\n+    final Options opts = new Options();\\r\\n     opts.addOption(\\\"a\\\", \\\"--a\\\", false, \\\"toggle -a\\\");\\r\\n     opts.addOption(\\\"b\\\", \\\"--b\\\", true, \\\"set -b\\\");\\r\\n     assertTrue(opts.hasOption(\\\"a\\\"));\\r\\n     assertTrue(opts.hasOption(\\\"b\\\"));\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"tn@apache.org","authorName":"Thomas Neidhart","commitYear":"2013","diff":"\"@@ -1,7 +1,8 @@\\n+@Test\\r\\n public void testLong() {\\r\\n     Options opts = new Options();\\r\\n     opts.addOption(\\\"a\\\", \\\"--a\\\", false, \\\"toggle -a\\\");\\r\\n     opts.addOption(\\\"b\\\", \\\"--b\\\", true, \\\"set -b\\\");\\r\\n     assertTrue(opts.hasOption(\\\"a\\\"));\\r\\n     assertTrue(opts.hasOption(\\\"b\\\"));\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2008","diff":"\"@@ -1,5 +1,7 @@\\n public void testLong() {\\r\\n     Options opts = new Options();\\r\\n     opts.addOption(\\\"a\\\", \\\"--a\\\", false, \\\"toggle -a\\\");\\r\\n     opts.addOption(\\\"b\\\", \\\"--b\\\", true, \\\"set -b\\\");\\r\\n+    assertTrue(opts.hasOption(\\\"a\\\"));\\r\\n+    assertTrue(opts.hasOption(\\\"b\\\"));\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -1,5 +1,5 @@\\n public void testLong() {\\r\\n     Options opts = new Options();\\r\\n-    opts.addOption('a', \\\"--a\\\", false, \\\"toggle -a\\\");\\r\\n-    opts.addOption('b', \\\"--b\\\", true, \\\"set -b\\\");\\r\\n+    opts.addOption(\\\"a\\\", \\\"--a\\\", false, \\\"toggle -a\\\");\\r\\n+    opts.addOption(\\\"b\\\", \\\"--b\\\", true, \\\"set -b\\\");\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jstrachan@apache.org","authorName":"James Strachan","commitYear":"2002","diff":"\"@@ -0,0 +1,5 @@\\n+public void testLong() {\\r\\n+    Options opts = new Options();\\r\\n+    opts.addOption('a', \\\"--a\\\", false, \\\"toggle -a\\\");\\r\\n+    opts.addOption('b', \\\"--b\\\", true, \\\"set -b\\\");\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\test\java\org\apache\commons\cli\OptionsTest.java	testMissingOptionException	org.apache.commons.cli.OptionsTest.testMissingOptionException()	122	131	3	[{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"\""},{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,11 +1,11 @@\\n @Test\\r\\n public void testMissingOptionException() throws ParseException {\\r\\n-    Options options = new Options();\\r\\n+    final Options options = new Options();\\r\\n     options.addOption(OptionBuilder.isRequired().create(\\\"f\\\"));\\r\\n     try {\\r\\n         new PosixParser().parse(options, new String[0]);\\r\\n         fail(\\\"Expected MissingOptionException to be thrown\\\");\\r\\n-    } catch (MissingOptionException e) {\\r\\n+    } catch (final MissingOptionException e) {\\r\\n         assertEquals(\\\"Missing required option: f\\\", e.getMessage());\\r\\n     }\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"tn@apache.org","authorName":"Thomas Neidhart","commitYear":"2013","diff":"\"@@ -1,10 +1,11 @@\\n+@Test\\r\\n public void testMissingOptionException() throws ParseException {\\r\\n     Options options = new Options();\\r\\n     options.addOption(OptionBuilder.isRequired().create(\\\"f\\\"));\\r\\n     try {\\r\\n         new PosixParser().parse(options, new String[0]);\\r\\n         fail(\\\"Expected MissingOptionException to be thrown\\\");\\r\\n     } catch (MissingOptionException e) {\\r\\n         assertEquals(\\\"Missing required option: f\\\", e.getMessage());\\r\\n     }\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2008","diff":"\"\""},{"authorEmail":"bayard@apache.org","authorName":"Henri Yandell","commitYear":"2007","diff":"\"@@ -0,0 +1,10 @@\\n+public void testMissingOptionException() throws ParseException {\\r\\n+    Options options = new Options();\\r\\n+    options.addOption(OptionBuilder.isRequired().create(\\\"f\\\"));\\r\\n+    try {\\r\\n+        new PosixParser().parse(options, new String[0]);\\r\\n+        fail(\\\"Expected MissingOptionException to be thrown\\\");\\r\\n+    } catch (MissingOptionException e) {\\r\\n+        assertEquals(\\\"Missing required option: f\\\", e.getMessage());\\r\\n+    }\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\test\java\org\apache\commons\cli\OptionsTest.java	testMissingOptionsException	org.apache.commons.cli.OptionsTest.testMissingOptionsException()	134	144	3	[{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"\""},{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,12 +1,12 @@\\n @Test\\r\\n public void testMissingOptionsException() throws ParseException {\\r\\n-    Options options = new Options();\\r\\n+    final Options options = new Options();\\r\\n     options.addOption(OptionBuilder.isRequired().create(\\\"f\\\"));\\r\\n     options.addOption(OptionBuilder.isRequired().create(\\\"x\\\"));\\r\\n     try {\\r\\n         new PosixParser().parse(options, new String[0]);\\r\\n         fail(\\\"Expected MissingOptionException to be thrown\\\");\\r\\n-    } catch (MissingOptionException e) {\\r\\n+    } catch (final MissingOptionException e) {\\r\\n         assertEquals(\\\"Missing required options: f, x\\\", e.getMessage());\\r\\n     }\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"tn@apache.org","authorName":"Thomas Neidhart","commitYear":"2013","diff":"\"@@ -1,11 +1,12 @@\\n+@Test\\r\\n public void testMissingOptionsException() throws ParseException {\\r\\n     Options options = new Options();\\r\\n     options.addOption(OptionBuilder.isRequired().create(\\\"f\\\"));\\r\\n     options.addOption(OptionBuilder.isRequired().create(\\\"x\\\"));\\r\\n     try {\\r\\n         new PosixParser().parse(options, new String[0]);\\r\\n         fail(\\\"Expected MissingOptionException to be thrown\\\");\\r\\n     } catch (MissingOptionException e) {\\r\\n         assertEquals(\\\"Missing required options: f, x\\\", e.getMessage());\\r\\n     }\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2008","diff":"\"\""},{"authorEmail":"bayard@apache.org","authorName":"Henri Yandell","commitYear":"2008","diff":"\"@@ -1,11 +1,11 @@\\n public void testMissingOptionsException() throws ParseException {\\r\\n     Options options = new Options();\\r\\n     options.addOption(OptionBuilder.isRequired().create(\\\"f\\\"));\\r\\n     options.addOption(OptionBuilder.isRequired().create(\\\"x\\\"));\\r\\n     try {\\r\\n         new PosixParser().parse(options, new String[0]);\\r\\n         fail(\\\"Expected MissingOptionException to be thrown\\\");\\r\\n     } catch (MissingOptionException e) {\\r\\n-        assertEquals(\\\"Missing required options: fx\\\", e.getMessage());\\r\\n+        assertEquals(\\\"Missing required options: f, x\\\", e.getMessage());\\r\\n     }\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"bayard@apache.org","authorName":"Henri Yandell","commitYear":"2007","diff":"\"@@ -0,0 +1,11 @@\\n+public void testMissingOptionsException() throws ParseException {\\r\\n+    Options options = new Options();\\r\\n+    options.addOption(OptionBuilder.isRequired().create(\\\"f\\\"));\\r\\n+    options.addOption(OptionBuilder.isRequired().create(\\\"x\\\"));\\r\\n+    try {\\r\\n+        new PosixParser().parse(options, new String[0]);\\r\\n+        fail(\\\"Expected MissingOptionException to be thrown\\\");\\r\\n+    } catch (MissingOptionException e) {\\r\\n+        assertEquals(\\\"Missing required options: fx\\\", e.getMessage());\\r\\n+    }\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\test\java\org\apache\commons\cli\OptionsTest.java	testSimple	org.apache.commons.cli.OptionsTest.testSimple()	147	155	1	[{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,8 +1,8 @@\\n @Test\\r\\n public void testSimple() {\\r\\n-    Options opts = new Options();\\r\\n+    final Options opts = new Options();\\r\\n     opts.addOption(\\\"a\\\", false, \\\"toggle -a\\\");\\r\\n     opts.addOption(\\\"b\\\", true, \\\"toggle -b\\\");\\r\\n     assertTrue(opts.hasOption(\\\"a\\\"));\\r\\n     assertTrue(opts.hasOption(\\\"b\\\"));\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"tn@apache.org","authorName":"Thomas Neidhart","commitYear":"2013","diff":"\"@@ -1,7 +1,8 @@\\n+@Test\\r\\n public void testSimple() {\\r\\n     Options opts = new Options();\\r\\n     opts.addOption(\\\"a\\\", false, \\\"toggle -a\\\");\\r\\n     opts.addOption(\\\"b\\\", true, \\\"toggle -b\\\");\\r\\n     assertTrue(opts.hasOption(\\\"a\\\"));\\r\\n     assertTrue(opts.hasOption(\\\"b\\\"));\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2008","diff":"\"@@ -1,5 +1,7 @@\\n public void testSimple() {\\r\\n     Options opts = new Options();\\r\\n     opts.addOption(\\\"a\\\", false, \\\"toggle -a\\\");\\r\\n     opts.addOption(\\\"b\\\", true, \\\"toggle -b\\\");\\r\\n+    assertTrue(opts.hasOption(\\\"a\\\"));\\r\\n+    assertTrue(opts.hasOption(\\\"b\\\"));\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -1,5 +1,5 @@\\n public void testSimple() {\\r\\n     Options opts = new Options();\\r\\n-    opts.addOption('a', false, \\\"toggle -a\\\");\\r\\n-    opts.addOption('b', true, \\\"toggle -b\\\");\\r\\n+    opts.addOption(\\\"a\\\", false, \\\"toggle -a\\\");\\r\\n+    opts.addOption(\\\"b\\\", true, \\\"toggle -b\\\");\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jstrachan@apache.org","authorName":"James Strachan","commitYear":"2002","diff":"\"@@ -0,0 +1,5 @@\\n+public void testSimple() {\\r\\n+    Options opts = new Options();\\r\\n+    opts.addOption('a', false, \\\"toggle -a\\\");\\r\\n+    opts.addOption('b', true, \\\"toggle -b\\\");\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\test\java\org\apache\commons\cli\OptionsTest.java	testToString	org.apache.commons.cli.OptionsTest.testToString()	158	167	1	[{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,10 +1,10 @@\\n @Test\\r\\n public void testToString() {\\r\\n-    Options options = new Options();\\r\\n+    final Options options = new Options();\\r\\n     options.addOption(\\\"f\\\", \\\"foo\\\", true, \\\"Foo\\\");\\r\\n     options.addOption(\\\"b\\\", \\\"bar\\\", false, \\\"Bar\\\");\\r\\n-    String s = options.toString();\\r\\n+    final String s = options.toString();\\r\\n     assertNotNull(\\\"null string returned\\\", s);\\r\\n     assertTrue(\\\"foo option missing\\\", s.toLowerCase().contains(\\\"foo\\\"));\\r\\n     assertTrue(\\\"bar option missing\\\", s.toLowerCase().contains(\\\"bar\\\"));\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"britter@apache.org","authorName":"Benedikt Ritter","commitYear":"2015","diff":"\"@@ -1,10 +1,10 @@\\n @Test\\r\\n public void testToString() {\\r\\n     Options options = new Options();\\r\\n     options.addOption(\\\"f\\\", \\\"foo\\\", true, \\\"Foo\\\");\\r\\n     options.addOption(\\\"b\\\", \\\"bar\\\", false, \\\"Bar\\\");\\r\\n     String s = options.toString();\\r\\n     assertNotNull(\\\"null string returned\\\", s);\\r\\n-    assertTrue(\\\"foo option missing\\\", s.toLowerCase().indexOf(\\\"foo\\\") != -1);\\r\\n-    assertTrue(\\\"bar option missing\\\", s.toLowerCase().indexOf(\\\"bar\\\") != -1);\\r\\n+    assertTrue(\\\"foo option missing\\\", s.toLowerCase().contains(\\\"foo\\\"));\\r\\n+    assertTrue(\\\"bar option missing\\\", s.toLowerCase().contains(\\\"bar\\\"));\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"tn@apache.org","authorName":"Thomas Neidhart","commitYear":"2013","diff":"\"@@ -1,9 +1,10 @@\\n+@Test\\r\\n public void testToString() {\\r\\n     Options options = new Options();\\r\\n     options.addOption(\\\"f\\\", \\\"foo\\\", true, \\\"Foo\\\");\\r\\n     options.addOption(\\\"b\\\", \\\"bar\\\", false, \\\"Bar\\\");\\r\\n     String s = options.toString();\\r\\n     assertNotNull(\\\"null string returned\\\", s);\\r\\n     assertTrue(\\\"foo option missing\\\", s.toLowerCase().indexOf(\\\"foo\\\") != -1);\\r\\n     assertTrue(\\\"bar option missing\\\", s.toLowerCase().indexOf(\\\"bar\\\") != -1);\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2008","diff":"\"@@ -0,0 +1,9 @@\\n+public void testToString() {\\r\\n+    Options options = new Options();\\r\\n+    options.addOption(\\\"f\\\", \\\"foo\\\", true, \\\"Foo\\\");\\r\\n+    options.addOption(\\\"b\\\", \\\"bar\\\", false, \\\"Bar\\\");\\r\\n+    String s = options.toString();\\r\\n+    assertNotNull(\\\"null string returned\\\", s);\\r\\n+    assertTrue(\\\"foo option missing\\\", s.toLowerCase().indexOf(\\\"foo\\\") != -1);\\r\\n+    assertTrue(\\\"bar option missing\\\", s.toLowerCase().indexOf(\\\"bar\\\") != -1);\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\test\java\org\apache\commons\cli\OptionTest.java	getValue	org.apache.commons.cli.DefaultOption.getValue()	43	45	2	[{"authorEmail":"sebb@apache.org","authorName":"Sebastian Bazley","commitYear":"2013","diff":"\"@@ -1,3 +1,4 @@\\n+@Override\\r\\n public String getValue() {\\r\\n     return super.getValue() != null ? super.getValue() : defaultValue;\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"niallp@apache.org","authorName":"Niall Kegan Pemberton","commitYear":"2008","diff":"\"\""},{"authorEmail":"bayard@apache.org","authorName":"Henri Yandell","commitYear":"2007","diff":"\"@@ -0,0 +1,3 @@\\n+public String getValue() {\\r\\n+    return super.getValue() != null ? super.getValue() : defaultValue;\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\test\java\org\apache\commons\cli\OptionTest.java	addValue	org.apache.commons.cli.TestOption.addValue(String)	56	59	1	[{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,5 +1,5 @@\\n @Override\\r\\n-public boolean addValue(String value) {\\r\\n+public boolean addValue(final String value) {\\r\\n     addValueForProcessing(value);\\r\\n     return true;\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"sebb@apache.org","authorName":"Sebastian Bazley","commitYear":"2013","diff":"\"@@ -1,4 +1,5 @@\\n+@Override\\r\\n public boolean addValue(String value) {\\r\\n     addValueForProcessing(value);\\r\\n     return true;\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"niallp@apache.org","authorName":"Niall Kegan Pemberton","commitYear":"2008","diff":"\"\""},{"authorEmail":"bayard@apache.org","authorName":"Henri Yandell","commitYear":"2007","diff":"\"@@ -0,0 +1,4 @@\\n+public boolean addValue(String value) {\\r\\n+    addValueForProcessing(value);\\r\\n+    return true;\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\test\java\org\apache\commons\cli\OptionTest.java	checkOption	org.apache.commons.cli.OptionTest.checkOption(Option, String, String, String, int, String, boolean, boolean, char, Class<?>)	62	74	1	[{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"\""},{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,11 +1,11 @@\\n-private static void checkOption(Option option, String opt, String description, String longOpt, int numArgs, String argName, boolean required, boolean optionalArg, char valueSeparator, Class<?> cls) {\\r\\n+private static void checkOption(final Option option, final String opt, final String description, final String longOpt, final int numArgs, final String argName, final boolean required, final boolean optionalArg, final char valueSeparator, final Class<?> cls) {\\r\\n     assertEquals(opt, option.getOpt());\\r\\n     assertEquals(description, option.getDescription());\\r\\n     assertEquals(longOpt, option.getLongOpt());\\r\\n     assertEquals(numArgs, option.getArgs());\\r\\n     assertEquals(argName, option.getArgName());\\r\\n     assertEquals(required, option.isRequired());\\r\\n     assertEquals(optionalArg, option.hasOptionalArg());\\r\\n     assertEquals(valueSeparator, option.getValueSeparator());\\r\\n     assertEquals(cls, option.getType());\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"tn@apache.org","authorName":"Thomas Neidhart","commitYear":"2013","diff":"\"@@ -0,0 +1,11 @@\\n+private static void checkOption(Option option, String opt, String description, String longOpt, int numArgs, String argName, boolean required, boolean optionalArg, char valueSeparator, Class<?> cls) {\\r\\n+    assertEquals(opt, option.getOpt());\\r\\n+    assertEquals(description, option.getDescription());\\r\\n+    assertEquals(longOpt, option.getLongOpt());\\r\\n+    assertEquals(numArgs, option.getArgs());\\r\\n+    assertEquals(argName, option.getArgName());\\r\\n+    assertEquals(required, option.isRequired());\\r\\n+    assertEquals(optionalArg, option.hasOptionalArg());\\r\\n+    assertEquals(valueSeparator, option.getValueSeparator());\\r\\n+    assertEquals(cls, option.getType());\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\test\java\org\apache\commons\cli\OptionTest.java	testBuilderInsufficientParams1	org.apache.commons.cli.OptionTest.testBuilderInsufficientParams1()	77	80	1	[{"authorEmail":"142304+nhojpatrick@users.noreply.github.com","authorName":"John Patrick","commitYear":"2022","diff":"\"@@ -1,4 +1,4 @@\\n-@Test(expected = IllegalArgumentException.class)\\r\\n+@Test\\r\\n public void testBuilderInsufficientParams1() {\\r\\n-    Option.builder().desc(\\\"desc\\\").build();\\r\\n+    assertThrows(IllegalArgumentException.class, () -> Option.builder().desc(\\\"desc\\\").build());\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"tn@apache.org","authorName":"Thomas Neidhart","commitYear":"2013","diff":"\"@@ -0,0 +1,4 @@\\n+@Test(expected = IllegalArgumentException.class)\\r\\n+public void testBuilderInsufficientParams1() {\\r\\n+    Option.builder().desc(\\\"desc\\\").build();\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\test\java\org\apache\commons\cli\OptionTest.java	testBuilderInsufficientParams2	org.apache.commons.cli.OptionTest.testBuilderInsufficientParams2()	83	86	1	[{"authorEmail":"142304+nhojpatrick@users.noreply.github.com","authorName":"John Patrick","commitYear":"2022","diff":"\"@@ -1,4 +1,4 @@\\n-@Test(expected = IllegalArgumentException.class)\\r\\n+@Test\\r\\n public void testBuilderInsufficientParams2() {\\r\\n-    Option.builder(null).desc(\\\"desc\\\").build();\\r\\n+    assertThrows(IllegalArgumentException.class, () -> Option.builder(null).desc(\\\"desc\\\").build());\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"tn@apache.org","authorName":"Thomas Neidhart","commitYear":"2013","diff":"\"@@ -0,0 +1,4 @@\\n+@Test(expected = IllegalArgumentException.class)\\r\\n+public void testBuilderInsufficientParams2() {\\r\\n+    Option.builder(null).desc(\\\"desc\\\").build();\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\test\java\org\apache\commons\cli\OptionTest.java	testBuilderInvalidOptionName1	org.apache.commons.cli.OptionTest.testBuilderInvalidOptionName1()	89	92	1	[{"authorEmail":"142304+nhojpatrick@users.noreply.github.com","authorName":"John Patrick","commitYear":"2022","diff":"\"@@ -1,4 +1,4 @@\\n-@Test(expected = IllegalArgumentException.class)\\r\\n+@Test\\r\\n public void testBuilderInvalidOptionName1() {\\r\\n-    Option.builder().option(\\\"invalid?\\\");\\r\\n+    assertThrows(IllegalArgumentException.class, () -> Option.builder().option(\\\"invalid?\\\"));\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"waldemar.sojka@gmail.com","authorName":"Waldemar Sojka","commitYear":"2021","diff":"\"@@ -0,0 +1,4 @@\\n+@Test(expected = IllegalArgumentException.class)\\r\\n+public void testBuilderInvalidOptionName1() {\\r\\n+    Option.builder().option(\\\"invalid?\\\");\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\test\java\org\apache\commons\cli\OptionTest.java	testBuilderInvalidOptionName2	org.apache.commons.cli.OptionTest.testBuilderInvalidOptionName2()	95	98	1	[{"authorEmail":"142304+nhojpatrick@users.noreply.github.com","authorName":"John Patrick","commitYear":"2022","diff":"\"@@ -1,4 +1,4 @@\\n-@Test(expected = IllegalArgumentException.class)\\r\\n+@Test\\r\\n public void testBuilderInvalidOptionName2() {\\r\\n-    Option.builder().option(\\\"invalid@\\\");\\r\\n+    assertThrows(IllegalArgumentException.class, () -> Option.builder().option(\\\"invalid@\\\"));\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"waldemar.sojka@gmail.com","authorName":"Waldemar Sojka","commitYear":"2021","diff":"\"@@ -0,0 +1,4 @@\\n+@Test(expected = IllegalArgumentException.class)\\r\\n+public void testBuilderInvalidOptionName2() {\\r\\n+    Option.builder().option(\\\"invalid@\\\");\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\test\java\org\apache\commons\cli\OptionTest.java	testBuilderInvalidOptionName3	org.apache.commons.cli.OptionTest.testBuilderInvalidOptionName3()	101	104	1	[{"authorEmail":"142304+nhojpatrick@users.noreply.github.com","authorName":"John Patrick","commitYear":"2022","diff":"\"@@ -1,4 +1,4 @@\\n-@Test(expected = IllegalArgumentException.class)\\r\\n+@Test\\r\\n public void testBuilderInvalidOptionName3() {\\r\\n-    Option.builder(\\\"invalid?\\\");\\r\\n+    assertThrows(IllegalArgumentException.class, () -> Option.builder(\\\"invalid?\\\"));\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"waldemar.sojka@gmail.com","authorName":"Waldemar Sojka","commitYear":"2021","diff":"\"@@ -0,0 +1,4 @@\\n+@Test(expected = IllegalArgumentException.class)\\r\\n+public void testBuilderInvalidOptionName3() {\\r\\n+    Option.builder(\\\"invalid?\\\");\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\test\java\org\apache\commons\cli\OptionTest.java	testBuilderInvalidOptionName4	org.apache.commons.cli.OptionTest.testBuilderInvalidOptionName4()	107	110	1	[{"authorEmail":"142304+nhojpatrick@users.noreply.github.com","authorName":"John Patrick","commitYear":"2022","diff":"\"@@ -1,4 +1,4 @@\\n-@Test(expected = IllegalArgumentException.class)\\r\\n+@Test\\r\\n public void testBuilderInvalidOptionName4() {\\r\\n-    Option.builder(\\\"invalid@\\\");\\r\\n+    assertThrows(IllegalArgumentException.class, () -> Option.builder(\\\"invalid@\\\"));\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"waldemar.sojka@gmail.com","authorName":"Waldemar Sojka","commitYear":"2021","diff":"\"@@ -0,0 +1,4 @@\\n+@Test(expected = IllegalArgumentException.class)\\r\\n+public void testBuilderInvalidOptionName4() {\\r\\n+    Option.builder(\\\"invalid@\\\");\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\test\java\org\apache\commons\cli\OptionTest.java	testBuilderMethods	org.apache.commons.cli.OptionTest.testBuilderMethods()	113	142	1	[{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2023","diff":"\"@@ -1,19 +1,19 @@\\n @Test\\r\\n public void testBuilderMethods() {\\r\\n     final char defaultSeparator = (char) 0;\\r\\n     checkOption(Option.builder(\\\"a\\\").desc(\\\"desc\\\").build(), \\\"a\\\", \\\"desc\\\", null, Option.UNINITIALIZED, null, false, false, defaultSeparator, String.class);\\r\\n     checkOption(Option.builder(\\\"a\\\").desc(\\\"desc\\\").build(), \\\"a\\\", \\\"desc\\\", null, Option.UNINITIALIZED, null, false, false, defaultSeparator, String.class);\\r\\n     checkOption(Option.builder(\\\"a\\\").desc(\\\"desc\\\").longOpt(\\\"aaa\\\").build(), \\\"a\\\", \\\"desc\\\", \\\"aaa\\\", Option.UNINITIALIZED, null, false, false, defaultSeparator, String.class);\\r\\n     checkOption(Option.builder(\\\"a\\\").desc(\\\"desc\\\").hasArg(true).build(), \\\"a\\\", \\\"desc\\\", null, 1, null, false, false, defaultSeparator, String.class);\\r\\n     checkOption(Option.builder(\\\"a\\\").desc(\\\"desc\\\").hasArg(false).build(), \\\"a\\\", \\\"desc\\\", null, Option.UNINITIALIZED, null, false, false, defaultSeparator, String.class);\\r\\n     checkOption(Option.builder(\\\"a\\\").desc(\\\"desc\\\").hasArg(true).build(), \\\"a\\\", \\\"desc\\\", null, 1, null, false, false, defaultSeparator, String.class);\\r\\n     checkOption(Option.builder(\\\"a\\\").desc(\\\"desc\\\").numberOfArgs(3).build(), \\\"a\\\", \\\"desc\\\", null, 3, null, false, false, defaultSeparator, String.class);\\r\\n     checkOption(Option.builder(\\\"a\\\").desc(\\\"desc\\\").required(true).build(), \\\"a\\\", \\\"desc\\\", null, Option.UNINITIALIZED, null, true, false, defaultSeparator, String.class);\\r\\n     checkOption(Option.builder(\\\"a\\\").desc(\\\"desc\\\").required(false).build(), \\\"a\\\", \\\"desc\\\", null, Option.UNINITIALIZED, null, false, false, defaultSeparator, String.class);\\r\\n     checkOption(Option.builder(\\\"a\\\").desc(\\\"desc\\\").argName(\\\"arg1\\\").build(), \\\"a\\\", \\\"desc\\\", null, Option.UNINITIALIZED, \\\"arg1\\\", false, false, defaultSeparator, String.class);\\r\\n     checkOption(Option.builder(\\\"a\\\").desc(\\\"desc\\\").optionalArg(false).build(), \\\"a\\\", \\\"desc\\\", null, Option.UNINITIALIZED, null, false, false, defaultSeparator, String.class);\\r\\n-    checkOption(Option.builder(\\\"a\\\").desc(\\\"desc\\\").optionalArg(true).build(), \\\"a\\\", \\\"desc\\\", null, Option.UNINITIALIZED, null, false, true, defaultSeparator, String.class);\\r\\n+    checkOption(Option.builder(\\\"a\\\").desc(\\\"desc\\\").optionalArg(true).build(), \\\"a\\\", \\\"desc\\\", null, 1, null, false, true, defaultSeparator, String.class);\\r\\n     checkOption(Option.builder(\\\"a\\\").desc(\\\"desc\\\").valueSeparator(':').build(), \\\"a\\\", \\\"desc\\\", null, Option.UNINITIALIZED, null, false, false, ':', String.class);\\r\\n     checkOption(Option.builder(\\\"a\\\").desc(\\\"desc\\\").type(Integer.class).build(), \\\"a\\\", \\\"desc\\\", null, Option.UNINITIALIZED, null, false, false, defaultSeparator, Integer.class);\\r\\n     checkOption(Option.builder().option(\\\"a\\\").desc(\\\"desc\\\").type(Integer.class).build(), \\\"a\\\", \\\"desc\\\", null, Option.UNINITIALIZED, null, false, false, defaultSeparator, Integer.class);\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"@@ -1,19 +1,19 @@\\n @Test\\r\\n public void testBuilderMethods() {\\r\\n     final char defaultSeparator = (char) 0;\\r\\n     checkOption(Option.builder(\\\"a\\\").desc(\\\"desc\\\").build(), \\\"a\\\", \\\"desc\\\", null, Option.UNINITIALIZED, null, false, false, defaultSeparator, String.class);\\r\\n     checkOption(Option.builder(\\\"a\\\").desc(\\\"desc\\\").build(), \\\"a\\\", \\\"desc\\\", null, Option.UNINITIALIZED, null, false, false, defaultSeparator, String.class);\\r\\n     checkOption(Option.builder(\\\"a\\\").desc(\\\"desc\\\").longOpt(\\\"aaa\\\").build(), \\\"a\\\", \\\"desc\\\", \\\"aaa\\\", Option.UNINITIALIZED, null, false, false, defaultSeparator, String.class);\\r\\n     checkOption(Option.builder(\\\"a\\\").desc(\\\"desc\\\").hasArg(true).build(), \\\"a\\\", \\\"desc\\\", null, 1, null, false, false, defaultSeparator, String.class);\\r\\n     checkOption(Option.builder(\\\"a\\\").desc(\\\"desc\\\").hasArg(false).build(), \\\"a\\\", \\\"desc\\\", null, Option.UNINITIALIZED, null, false, false, defaultSeparator, String.class);\\r\\n     checkOption(Option.builder(\\\"a\\\").desc(\\\"desc\\\").hasArg(true).build(), \\\"a\\\", \\\"desc\\\", null, 1, null, false, false, defaultSeparator, String.class);\\r\\n     checkOption(Option.builder(\\\"a\\\").desc(\\\"desc\\\").numberOfArgs(3).build(), \\\"a\\\", \\\"desc\\\", null, 3, null, false, false, defaultSeparator, String.class);\\r\\n     checkOption(Option.builder(\\\"a\\\").desc(\\\"desc\\\").required(true).build(), \\\"a\\\", \\\"desc\\\", null, Option.UNINITIALIZED, null, true, false, defaultSeparator, String.class);\\r\\n     checkOption(Option.builder(\\\"a\\\").desc(\\\"desc\\\").required(false).build(), \\\"a\\\", \\\"desc\\\", null, Option.UNINITIALIZED, null, false, false, defaultSeparator, String.class);\\r\\n     checkOption(Option.builder(\\\"a\\\").desc(\\\"desc\\\").argName(\\\"arg1\\\").build(), \\\"a\\\", \\\"desc\\\", null, Option.UNINITIALIZED, \\\"arg1\\\", false, false, defaultSeparator, String.class);\\r\\n     checkOption(Option.builder(\\\"a\\\").desc(\\\"desc\\\").optionalArg(false).build(), \\\"a\\\", \\\"desc\\\", null, Option.UNINITIALIZED, null, false, false, defaultSeparator, String.class);\\r\\n     checkOption(Option.builder(\\\"a\\\").desc(\\\"desc\\\").optionalArg(true).build(), \\\"a\\\", \\\"desc\\\", null, Option.UNINITIALIZED, null, false, true, defaultSeparator, String.class);\\r\\n     checkOption(Option.builder(\\\"a\\\").desc(\\\"desc\\\").valueSeparator(':').build(), \\\"a\\\", \\\"desc\\\", null, Option.UNINITIALIZED, null, false, false, ':', String.class);\\r\\n     checkOption(Option.builder(\\\"a\\\").desc(\\\"desc\\\").type(Integer.class).build(), \\\"a\\\", \\\"desc\\\", null, Option.UNINITIALIZED, null, false, false, defaultSeparator, Integer.class);\\r\\n-    checkOption(Option.builder().opt(\\\"a\\\").desc(\\\"desc\\\").type(Integer.class).build(), \\\"a\\\", \\\"desc\\\", null, Option.UNINITIALIZED, null, false, false, defaultSeparator, Integer.class);\\r\\n+    checkOption(Option.builder().option(\\\"a\\\").desc(\\\"desc\\\").type(Integer.class).build(), \\\"a\\\", \\\"desc\\\", null, Option.UNINITIALIZED, null, false, false, defaultSeparator, Integer.class);\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"waldemar.sojka@gmail.com","authorName":"Waldemar Sojka","commitYear":"2021","diff":"\"@@ -1,18 +1,19 @@\\n @Test\\r\\n public void testBuilderMethods() {\\r\\n     final char defaultSeparator = (char) 0;\\r\\n     checkOption(Option.builder(\\\"a\\\").desc(\\\"desc\\\").build(), \\\"a\\\", \\\"desc\\\", null, Option.UNINITIALIZED, null, false, false, defaultSeparator, String.class);\\r\\n     checkOption(Option.builder(\\\"a\\\").desc(\\\"desc\\\").build(), \\\"a\\\", \\\"desc\\\", null, Option.UNINITIALIZED, null, false, false, defaultSeparator, String.class);\\r\\n     checkOption(Option.builder(\\\"a\\\").desc(\\\"desc\\\").longOpt(\\\"aaa\\\").build(), \\\"a\\\", \\\"desc\\\", \\\"aaa\\\", Option.UNINITIALIZED, null, false, false, defaultSeparator, String.class);\\r\\n     checkOption(Option.builder(\\\"a\\\").desc(\\\"desc\\\").hasArg(true).build(), \\\"a\\\", \\\"desc\\\", null, 1, null, false, false, defaultSeparator, String.class);\\r\\n     checkOption(Option.builder(\\\"a\\\").desc(\\\"desc\\\").hasArg(false).build(), \\\"a\\\", \\\"desc\\\", null, Option.UNINITIALIZED, null, false, false, defaultSeparator, String.class);\\r\\n     checkOption(Option.builder(\\\"a\\\").desc(\\\"desc\\\").hasArg(true).build(), \\\"a\\\", \\\"desc\\\", null, 1, null, false, false, defaultSeparator, String.class);\\r\\n     checkOption(Option.builder(\\\"a\\\").desc(\\\"desc\\\").numberOfArgs(3).build(), \\\"a\\\", \\\"desc\\\", null, 3, null, false, false, defaultSeparator, String.class);\\r\\n     checkOption(Option.builder(\\\"a\\\").desc(\\\"desc\\\").required(true).build(), \\\"a\\\", \\\"desc\\\", null, Option.UNINITIALIZED, null, true, false, defaultSeparator, String.class);\\r\\n     checkOption(Option.builder(\\\"a\\\").desc(\\\"desc\\\").required(false).build(), \\\"a\\\", \\\"desc\\\", null, Option.UNINITIALIZED, null, false, false, defaultSeparator, String.class);\\r\\n     checkOption(Option.builder(\\\"a\\\").desc(\\\"desc\\\").argName(\\\"arg1\\\").build(), \\\"a\\\", \\\"desc\\\", null, Option.UNINITIALIZED, \\\"arg1\\\", false, false, defaultSeparator, String.class);\\r\\n     checkOption(Option.builder(\\\"a\\\").desc(\\\"desc\\\").optionalArg(false).build(), \\\"a\\\", \\\"desc\\\", null, Option.UNINITIALIZED, null, false, false, defaultSeparator, String.class);\\r\\n     checkOption(Option.builder(\\\"a\\\").desc(\\\"desc\\\").optionalArg(true).build(), \\\"a\\\", \\\"desc\\\", null, Option.UNINITIALIZED, null, false, true, defaultSeparator, String.class);\\r\\n     checkOption(Option.builder(\\\"a\\\").desc(\\\"desc\\\").valueSeparator(':').build(), \\\"a\\\", \\\"desc\\\", null, Option.UNINITIALIZED, null, false, false, ':', String.class);\\r\\n     checkOption(Option.builder(\\\"a\\\").desc(\\\"desc\\\").type(Integer.class).build(), \\\"a\\\", \\\"desc\\\", null, Option.UNINITIALIZED, null, false, false, defaultSeparator, Integer.class);\\r\\n+    checkOption(Option.builder().opt(\\\"a\\\").desc(\\\"desc\\\").type(Integer.class).build(), \\\"a\\\", \\\"desc\\\", null, Option.UNINITIALIZED, null, false, false, defaultSeparator, Integer.class);\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"\""},{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,18 +1,18 @@\\n @Test\\r\\n public void testBuilderMethods() {\\r\\n-    char defaultSeparator = (char) 0;\\r\\n+    final char defaultSeparator = (char) 0;\\r\\n     checkOption(Option.builder(\\\"a\\\").desc(\\\"desc\\\").build(), \\\"a\\\", \\\"desc\\\", null, Option.UNINITIALIZED, null, false, false, defaultSeparator, String.class);\\r\\n     checkOption(Option.builder(\\\"a\\\").desc(\\\"desc\\\").build(), \\\"a\\\", \\\"desc\\\", null, Option.UNINITIALIZED, null, false, false, defaultSeparator, String.class);\\r\\n     checkOption(Option.builder(\\\"a\\\").desc(\\\"desc\\\").longOpt(\\\"aaa\\\").build(), \\\"a\\\", \\\"desc\\\", \\\"aaa\\\", Option.UNINITIALIZED, null, false, false, defaultSeparator, String.class);\\r\\n     checkOption(Option.builder(\\\"a\\\").desc(\\\"desc\\\").hasArg(true).build(), \\\"a\\\", \\\"desc\\\", null, 1, null, false, false, defaultSeparator, String.class);\\r\\n     checkOption(Option.builder(\\\"a\\\").desc(\\\"desc\\\").hasArg(false).build(), \\\"a\\\", \\\"desc\\\", null, Option.UNINITIALIZED, null, false, false, defaultSeparator, String.class);\\r\\n     checkOption(Option.builder(\\\"a\\\").desc(\\\"desc\\\").hasArg(true).build(), \\\"a\\\", \\\"desc\\\", null, 1, null, false, false, defaultSeparator, String.class);\\r\\n     checkOption(Option.builder(\\\"a\\\").desc(\\\"desc\\\").numberOfArgs(3).build(), \\\"a\\\", \\\"desc\\\", null, 3, null, false, false, defaultSeparator, String.class);\\r\\n     checkOption(Option.builder(\\\"a\\\").desc(\\\"desc\\\").required(true).build(), \\\"a\\\", \\\"desc\\\", null, Option.UNINITIALIZED, null, true, false, defaultSeparator, String.class);\\r\\n     checkOption(Option.builder(\\\"a\\\").desc(\\\"desc\\\").required(false).build(), \\\"a\\\", \\\"desc\\\", null, Option.UNINITIALIZED, null, false, false, defaultSeparator, String.class);\\r\\n     checkOption(Option.builder(\\\"a\\\").desc(\\\"desc\\\").argName(\\\"arg1\\\").build(), \\\"a\\\", \\\"desc\\\", null, Option.UNINITIALIZED, \\\"arg1\\\", false, false, defaultSeparator, String.class);\\r\\n     checkOption(Option.builder(\\\"a\\\").desc(\\\"desc\\\").optionalArg(false).build(), \\\"a\\\", \\\"desc\\\", null, Option.UNINITIALIZED, null, false, false, defaultSeparator, String.class);\\r\\n     checkOption(Option.builder(\\\"a\\\").desc(\\\"desc\\\").optionalArg(true).build(), \\\"a\\\", \\\"desc\\\", null, Option.UNINITIALIZED, null, false, true, defaultSeparator, String.class);\\r\\n     checkOption(Option.builder(\\\"a\\\").desc(\\\"desc\\\").valueSeparator(':').build(), \\\"a\\\", \\\"desc\\\", null, Option.UNINITIALIZED, null, false, false, ':', String.class);\\r\\n     checkOption(Option.builder(\\\"a\\\").desc(\\\"desc\\\").type(Integer.class).build(), \\\"a\\\", \\\"desc\\\", null, Option.UNINITIALIZED, null, false, false, defaultSeparator, Integer.class);\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"tn@apache.org","authorName":"Thomas Neidhart","commitYear":"2013","diff":"\"@@ -1,18 +1,18 @@\\n @Test\\r\\n public void testBuilderMethods() {\\r\\n     char defaultSeparator = (char) 0;\\r\\n-    checkOption(new Option.Builder(\\\"a\\\", \\\"desc\\\").build(), \\\"a\\\", \\\"desc\\\", null, Option.UNINITIALIZED, null, false, false, defaultSeparator, String.class);\\r\\n-    checkOption(new Option.Builder(\\\"a\\\", \\\"desc\\\").build(), \\\"a\\\", \\\"desc\\\", null, Option.UNINITIALIZED, null, false, false, defaultSeparator, String.class);\\r\\n-    checkOption(new Option.Builder(\\\"a\\\", \\\"desc\\\").longOpt(\\\"aaa\\\").build(), \\\"a\\\", \\\"desc\\\", \\\"aaa\\\", Option.UNINITIALIZED, null, false, false, defaultSeparator, String.class);\\r\\n-    checkOption(new Option.Builder(\\\"a\\\", \\\"desc\\\").hasArg(true).build(), \\\"a\\\", \\\"desc\\\", null, 1, null, false, false, defaultSeparator, String.class);\\r\\n-    checkOption(new Option.Builder(\\\"a\\\", \\\"desc\\\").hasArg(false).build(), \\\"a\\\", \\\"desc\\\", null, Option.UNINITIALIZED, null, false, false, defaultSeparator, String.class);\\r\\n-    checkOption(new Option.Builder(\\\"a\\\", \\\"desc\\\").hasArg(true).build(), \\\"a\\\", \\\"desc\\\", null, 1, null, false, false, defaultSeparator, String.class);\\r\\n-    checkOption(new Option.Builder(\\\"a\\\", \\\"desc\\\").numberOfArgs(3).build(), \\\"a\\\", \\\"desc\\\", null, 3, null, false, false, defaultSeparator, String.class);\\r\\n-    checkOption(new Option.Builder(\\\"a\\\", \\\"desc\\\").required(true).build(), \\\"a\\\", \\\"desc\\\", null, Option.UNINITIALIZED, null, true, false, defaultSeparator, String.class);\\r\\n-    checkOption(new Option.Builder(\\\"a\\\", \\\"desc\\\").required(false).build(), \\\"a\\\", \\\"desc\\\", null, Option.UNINITIALIZED, null, false, false, defaultSeparator, String.class);\\r\\n-    checkOption(new Option.Builder(\\\"a\\\", \\\"desc\\\").argName(\\\"arg1\\\").build(), \\\"a\\\", \\\"desc\\\", null, Option.UNINITIALIZED, \\\"arg1\\\", false, false, defaultSeparator, String.class);\\r\\n-    checkOption(new Option.Builder(\\\"a\\\", \\\"desc\\\").optionalArg(false).build(), \\\"a\\\", \\\"desc\\\", null, Option.UNINITIALIZED, null, false, false, defaultSeparator, String.class);\\r\\n-    checkOption(new Option.Builder(\\\"a\\\", \\\"desc\\\").optionalArg(true).build(), \\\"a\\\", \\\"desc\\\", null, Option.UNINITIALIZED, null, false, true, defaultSeparator, String.class);\\r\\n-    checkOption(new Option.Builder(\\\"a\\\", \\\"desc\\\").valueSeparator(':').build(), \\\"a\\\", \\\"desc\\\", null, Option.UNINITIALIZED, null, false, false, ':', String.class);\\r\\n-    checkOption(new Option.Builder(\\\"a\\\", \\\"desc\\\").type(Integer.class).build(), \\\"a\\\", \\\"desc\\\", null, Option.UNINITIALIZED, null, false, false, defaultSeparator, Integer.class);\\r\\n+    checkOption(Option.builder(\\\"a\\\").desc(\\\"desc\\\").build(), \\\"a\\\", \\\"desc\\\", null, Option.UNINITIALIZED, null, false, false, defaultSeparator, String.class);\\r\\n+    checkOption(Option.builder(\\\"a\\\").desc(\\\"desc\\\").build(), \\\"a\\\", \\\"desc\\\", null, Option.UNINITIALIZED, null, false, false, defaultSeparator, String.class);\\r\\n+    checkOption(Option.builder(\\\"a\\\").desc(\\\"desc\\\").longOpt(\\\"aaa\\\").build(), \\\"a\\\", \\\"desc\\\", \\\"aaa\\\", Option.UNINITIALIZED, null, false, false, defaultSeparator, String.class);\\r\\n+    checkOption(Option.builder(\\\"a\\\").desc(\\\"desc\\\").hasArg(true).build(), \\\"a\\\", \\\"desc\\\", null, 1, null, false, false, defaultSeparator, String.class);\\r\\n+    checkOption(Option.builder(\\\"a\\\").desc(\\\"desc\\\").hasArg(false).build(), \\\"a\\\", \\\"desc\\\", null, Option.UNINITIALIZED, null, false, false, defaultSeparator, String.class);\\r\\n+    checkOption(Option.builder(\\\"a\\\").desc(\\\"desc\\\").hasArg(true).build(), \\\"a\\\", \\\"desc\\\", null, 1, null, false, false, defaultSeparator, String.class);\\r\\n+    checkOption(Option.builder(\\\"a\\\").desc(\\\"desc\\\").numberOfArgs(3).build(), \\\"a\\\", \\\"desc\\\", null, 3, null, false, false, defaultSeparator, String.class);\\r\\n+    checkOption(Option.builder(\\\"a\\\").desc(\\\"desc\\\").required(true).build(), \\\"a\\\", \\\"desc\\\", null, Option.UNINITIALIZED, null, true, false, defaultSeparator, String.class);\\r\\n+    checkOption(Option.builder(\\\"a\\\").desc(\\\"desc\\\").required(false).build(), \\\"a\\\", \\\"desc\\\", null, Option.UNINITIALIZED, null, false, false, defaultSeparator, String.class);\\r\\n+    checkOption(Option.builder(\\\"a\\\").desc(\\\"desc\\\").argName(\\\"arg1\\\").build(), \\\"a\\\", \\\"desc\\\", null, Option.UNINITIALIZED, \\\"arg1\\\", false, false, defaultSeparator, String.class);\\r\\n+    checkOption(Option.builder(\\\"a\\\").desc(\\\"desc\\\").optionalArg(false).build(), \\\"a\\\", \\\"desc\\\", null, Option.UNINITIALIZED, null, false, false, defaultSeparator, String.class);\\r\\n+    checkOption(Option.builder(\\\"a\\\").desc(\\\"desc\\\").optionalArg(true).build(), \\\"a\\\", \\\"desc\\\", null, Option.UNINITIALIZED, null, false, true, defaultSeparator, String.class);\\r\\n+    checkOption(Option.builder(\\\"a\\\").desc(\\\"desc\\\").valueSeparator(':').build(), \\\"a\\\", \\\"desc\\\", null, Option.UNINITIALIZED, null, false, false, ':', String.class);\\r\\n+    checkOption(Option.builder(\\\"a\\\").desc(\\\"desc\\\").type(Integer.class).build(), \\\"a\\\", \\\"desc\\\", null, Option.UNINITIALIZED, null, false, false, defaultSeparator, Integer.class);\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"tn@apache.org","authorName":"Thomas Neidhart","commitYear":"2013","diff":"\"@@ -0,0 +1,18 @@\\n+@Test\\r\\n+public void testBuilderMethods() {\\r\\n+    char defaultSeparator = (char) 0;\\r\\n+    checkOption(new Option.Builder(\\\"a\\\", \\\"desc\\\").build(), \\\"a\\\", \\\"desc\\\", null, Option.UNINITIALIZED, null, false, false, defaultSeparator, String.class);\\r\\n+    checkOption(new Option.Builder(\\\"a\\\", \\\"desc\\\").build(), \\\"a\\\", \\\"desc\\\", null, Option.UNINITIALIZED, null, false, false, defaultSeparator, String.class);\\r\\n+    checkOption(new Option.Builder(\\\"a\\\", \\\"desc\\\").longOpt(\\\"aaa\\\").build(), \\\"a\\\", \\\"desc\\\", \\\"aaa\\\", Option.UNINITIALIZED, null, false, false, defaultSeparator, String.class);\\r\\n+    checkOption(new Option.Builder(\\\"a\\\", \\\"desc\\\").hasArg(true).build(), \\\"a\\\", \\\"desc\\\", null, 1, null, false, false, defaultSeparator, String.class);\\r\\n+    checkOption(new Option.Builder(\\\"a\\\", \\\"desc\\\").hasArg(false).build(), \\\"a\\\", \\\"desc\\\", null, Option.UNINITIALIZED, null, false, false, defaultSeparator, String.class);\\r\\n+    checkOption(new Option.Builder(\\\"a\\\", \\\"desc\\\").hasArg(true).build(), \\\"a\\\", \\\"desc\\\", null, 1, null, false, false, defaultSeparator, String.class);\\r\\n+    checkOption(new Option.Builder(\\\"a\\\", \\\"desc\\\").numberOfArgs(3).build(), \\\"a\\\", \\\"desc\\\", null, 3, null, false, false, defaultSeparator, String.class);\\r\\n+    checkOption(new Option.Builder(\\\"a\\\", \\\"desc\\\").required(true).build(), \\\"a\\\", \\\"desc\\\", null, Option.UNINITIALIZED, null, true, false, defaultSeparator, String.class);\\r\\n+    checkOption(new Option.Builder(\\\"a\\\", \\\"desc\\\").required(false).build(), \\\"a\\\", \\\"desc\\\", null, Option.UNINITIALIZED, null, false, false, defaultSeparator, String.class);\\r\\n+    checkOption(new Option.Builder(\\\"a\\\", \\\"desc\\\").argName(\\\"arg1\\\").build(), \\\"a\\\", \\\"desc\\\", null, Option.UNINITIALIZED, \\\"arg1\\\", false, false, defaultSeparator, String.class);\\r\\n+    checkOption(new Option.Builder(\\\"a\\\", \\\"desc\\\").optionalArg(false).build(), \\\"a\\\", \\\"desc\\\", null, Option.UNINITIALIZED, null, false, false, defaultSeparator, String.class);\\r\\n+    checkOption(new Option.Builder(\\\"a\\\", \\\"desc\\\").optionalArg(true).build(), \\\"a\\\", \\\"desc\\\", null, Option.UNINITIALIZED, null, false, true, defaultSeparator, String.class);\\r\\n+    checkOption(new Option.Builder(\\\"a\\\", \\\"desc\\\").valueSeparator(':').build(), \\\"a\\\", \\\"desc\\\", null, Option.UNINITIALIZED, null, false, false, ':', String.class);\\r\\n+    checkOption(new Option.Builder(\\\"a\\\", \\\"desc\\\").type(Integer.class).build(), \\\"a\\\", \\\"desc\\\", null, Option.UNINITIALIZED, null, false, false, defaultSeparator, Integer.class);\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\test\java\org\apache\commons\cli\OptionTest.java	testClear	org.apache.commons.cli.OptionTest.testClear()	145	152	1	[{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,9 +1,9 @@\\n @Test\\r\\n public void testClear() {\\r\\n-    TestOption option = new TestOption(\\\"x\\\", true, \\\"\\\");\\r\\n+    final TestOption option = new TestOption(\\\"x\\\", true, \\\"\\\");\\r\\n     assertEquals(0, option.getValuesList().size());\\r\\n     option.addValue(\\\"a\\\");\\r\\n     assertEquals(1, option.getValuesList().size());\\r\\n     option.clearValues();\\r\\n     assertEquals(0, option.getValuesList().size());\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"tn@apache.org","authorName":"Thomas Neidhart","commitYear":"2013","diff":"\"@@ -1,8 +1,9 @@\\n+@Test\\r\\n public void testClear() {\\r\\n     TestOption option = new TestOption(\\\"x\\\", true, \\\"\\\");\\r\\n     assertEquals(0, option.getValuesList().size());\\r\\n     option.addValue(\\\"a\\\");\\r\\n     assertEquals(1, option.getValuesList().size());\\r\\n     option.clearValues();\\r\\n     assertEquals(0, option.getValuesList().size());\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2008","diff":"\"\""},{"authorEmail":"niallp@apache.org","authorName":"Niall Kegan Pemberton","commitYear":"2008","diff":"\"\""},{"authorEmail":"bayard@apache.org","authorName":"Henri Yandell","commitYear":"2007","diff":"\"@@ -1,8 +1,8 @@\\n public void testClear() {\\r\\n-    Option option = new Option(\\\"x\\\", true, \\\"\\\");\\r\\n+    TestOption option = new TestOption(\\\"x\\\", true, \\\"\\\");\\r\\n     assertEquals(0, option.getValuesList().size());\\r\\n     option.addValue(\\\"a\\\");\\r\\n     assertEquals(1, option.getValuesList().size());\\r\\n     option.clearValues();\\r\\n     assertEquals(0, option.getValuesList().size());\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"bayard@apache.org","authorName":"Henri Yandell","commitYear":"2007","diff":"\"@@ -0,0 +1,8 @@\\n+public void testClear() {\\r\\n+    Option option = new Option(\\\"x\\\", true, \\\"\\\");\\r\\n+    assertEquals(0, option.getValuesList().size());\\r\\n+    option.addValue(\\\"a\\\");\\r\\n+    assertEquals(1, option.getValuesList().size());\\r\\n+    option.clearValues();\\r\\n+    assertEquals(0, option.getValuesList().size());\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\test\java\org\apache\commons\cli\OptionTest.java	testClone	org.apache.commons.cli.OptionTest.testClone()	156	169	1	[{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,15 +1,15 @@\\n @Test\\r\\n public void testClone() {\\r\\n-    TestOption a = new TestOption(\\\"a\\\", true, \\\"\\\");\\r\\n-    TestOption b = (TestOption) a.clone();\\r\\n+    final TestOption a = new TestOption(\\\"a\\\", true, \\\"\\\");\\r\\n+    final TestOption b = (TestOption) a.clone();\\r\\n     assertEquals(a, b);\\r\\n     assertNotSame(a, b);\\r\\n     a.setDescription(\\\"a\\\");\\r\\n     assertEquals(\\\"\\\", b.getDescription());\\r\\n     b.setArgs(2);\\r\\n     b.addValue(\\\"b1\\\");\\r\\n     b.addValue(\\\"b2\\\");\\r\\n     assertEquals(1, a.getArgs());\\r\\n     assertEquals(0, a.getValuesList().size());\\r\\n     assertEquals(2, b.getValues().length);\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"tn@apache.org","authorName":"Thomas Neidhart","commitYear":"2013","diff":"\"@@ -1,14 +1,15 @@\\n+@Test\\r\\n public void testClone() {\\r\\n     TestOption a = new TestOption(\\\"a\\\", true, \\\"\\\");\\r\\n     TestOption b = (TestOption) a.clone();\\r\\n     assertEquals(a, b);\\r\\n     assertNotSame(a, b);\\r\\n     a.setDescription(\\\"a\\\");\\r\\n     assertEquals(\\\"\\\", b.getDescription());\\r\\n     b.setArgs(2);\\r\\n     b.addValue(\\\"b1\\\");\\r\\n     b.addValue(\\\"b2\\\");\\r\\n     assertEquals(1, a.getArgs());\\r\\n     assertEquals(0, a.getValuesList().size());\\r\\n     assertEquals(2, b.getValues().length);\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"sebb@apache.org","authorName":"Sebastian Bazley","commitYear":"2013","diff":"\"@@ -1,14 +1,14 @@\\n-public void testClone() throws CloneNotSupportedException {\\r\\n+public void testClone() {\\r\\n     TestOption a = new TestOption(\\\"a\\\", true, \\\"\\\");\\r\\n     TestOption b = (TestOption) a.clone();\\r\\n     assertEquals(a, b);\\r\\n     assertNotSame(a, b);\\r\\n     a.setDescription(\\\"a\\\");\\r\\n     assertEquals(\\\"\\\", b.getDescription());\\r\\n     b.setArgs(2);\\r\\n     b.addValue(\\\"b1\\\");\\r\\n     b.addValue(\\\"b2\\\");\\r\\n     assertEquals(1, a.getArgs());\\r\\n     assertEquals(0, a.getValuesList().size());\\r\\n     assertEquals(2, b.getValues().length);\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"niallp@apache.org","authorName":"Niall Kegan Pemberton","commitYear":"2008","diff":"\"\""},{"authorEmail":"bayard@apache.org","authorName":"Henri Yandell","commitYear":"2007","diff":"\"@@ -1,14 +1,14 @@\\n public void testClone() throws CloneNotSupportedException {\\r\\n-    Option a = new Option(\\\"a\\\", true, \\\"\\\");\\r\\n-    Option b = (Option) a.clone();\\r\\n+    TestOption a = new TestOption(\\\"a\\\", true, \\\"\\\");\\r\\n+    TestOption b = (TestOption) a.clone();\\r\\n     assertEquals(a, b);\\r\\n     assertNotSame(a, b);\\r\\n     a.setDescription(\\\"a\\\");\\r\\n     assertEquals(\\\"\\\", b.getDescription());\\r\\n     b.setArgs(2);\\r\\n     b.addValue(\\\"b1\\\");\\r\\n     b.addValue(\\\"b2\\\");\\r\\n     assertEquals(1, a.getArgs());\\r\\n     assertEquals(0, a.getValuesList().size());\\r\\n     assertEquals(2, b.getValues().length);\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"bayard@apache.org","authorName":"Henri Yandell","commitYear":"2007","diff":"\"@@ -0,0 +1,14 @@\\n+public void testClone() throws CloneNotSupportedException {\\r\\n+    Option a = new Option(\\\"a\\\", true, \\\"\\\");\\r\\n+    Option b = (Option) a.clone();\\r\\n+    assertEquals(a, b);\\r\\n+    assertNotSame(a, b);\\r\\n+    a.setDescription(\\\"a\\\");\\r\\n+    assertEquals(\\\"\\\", b.getDescription());\\r\\n+    b.setArgs(2);\\r\\n+    b.addValue(\\\"b1\\\");\\r\\n+    b.addValue(\\\"b2\\\");\\r\\n+    assertEquals(1, a.getArgs());\\r\\n+    assertEquals(0, a.getValuesList().size());\\r\\n+    assertEquals(2, b.getValues().length);\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\test\java\org\apache\commons\cli\OptionTest.java	testGetValue	org.apache.commons.cli.OptionTest.testGetValue()	172	184	1	[{"authorEmail":"arturobernalg@gmail.com","authorName":"Arturo Bernal","commitYear":"2021","diff":"\"@@ -1,11 +1,11 @@\\n @Test\\r\\n public void testGetValue() {\\r\\n     final Option option = new Option(\\\"f\\\", null);\\r\\n     option.setArgs(Option.UNLIMITED_VALUES);\\r\\n     assertEquals(\\\"default\\\", option.getValue(\\\"default\\\"));\\r\\n-    assertEquals(null, option.getValue(0));\\r\\n+    assertNull(option.getValue(0));\\r\\n     option.addValueForProcessing(\\\"foo\\\");\\r\\n     assertEquals(\\\"foo\\\", option.getValue());\\r\\n     assertEquals(\\\"foo\\\", option.getValue(0));\\r\\n     assertEquals(\\\"foo\\\", option.getValue(\\\"default\\\"));\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2019","diff":"\"\""},{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,11 +1,11 @@\\n @Test\\r\\n public void testGetValue() {\\r\\n-    Option option = new Option(\\\"f\\\", null);\\r\\n+    final Option option = new Option(\\\"f\\\", null);\\r\\n     option.setArgs(Option.UNLIMITED_VALUES);\\r\\n     assertEquals(\\\"default\\\", option.getValue(\\\"default\\\"));\\r\\n     assertEquals(null, option.getValue(0));\\r\\n     option.addValueForProcessing(\\\"foo\\\");\\r\\n     assertEquals(\\\"foo\\\", option.getValue());\\r\\n     assertEquals(\\\"foo\\\", option.getValue(0));\\r\\n     assertEquals(\\\"foo\\\", option.getValue(\\\"default\\\"));\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"tn@apache.org","authorName":"Thomas Neidhart","commitYear":"2013","diff":"\"@@ -1,10 +1,11 @@\\n+@Test\\r\\n public void testGetValue() {\\r\\n     Option option = new Option(\\\"f\\\", null);\\r\\n     option.setArgs(Option.UNLIMITED_VALUES);\\r\\n     assertEquals(\\\"default\\\", option.getValue(\\\"default\\\"));\\r\\n     assertEquals(null, option.getValue(0));\\r\\n     option.addValueForProcessing(\\\"foo\\\");\\r\\n     assertEquals(\\\"foo\\\", option.getValue());\\r\\n     assertEquals(\\\"foo\\\", option.getValue(0));\\r\\n     assertEquals(\\\"foo\\\", option.getValue(\\\"default\\\"));\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2008","diff":"\"@@ -0,0 +1,10 @@\\n+public void testGetValue() {\\r\\n+    Option option = new Option(\\\"f\\\", null);\\r\\n+    option.setArgs(Option.UNLIMITED_VALUES);\\r\\n+    assertEquals(\\\"default\\\", option.getValue(\\\"default\\\"));\\r\\n+    assertEquals(null, option.getValue(0));\\r\\n+    option.addValueForProcessing(\\\"foo\\\");\\r\\n+    assertEquals(\\\"foo\\\", option.getValue());\\r\\n+    assertEquals(\\\"foo\\\", option.getValue(0));\\r\\n+    assertEquals(\\\"foo\\\", option.getValue(\\\"default\\\"));\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\test\java\org\apache\commons\cli\OptionTest.java	testHasArgName	org.apache.commons.cli.OptionTest.testHasArgName()	187	198	1	[{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,10 +1,10 @@\\n @Test\\r\\n public void testHasArgName() {\\r\\n-    Option option = new Option(\\\"f\\\", null);\\r\\n+    final Option option = new Option(\\\"f\\\", null);\\r\\n     option.setArgName(null);\\r\\n     assertFalse(option.hasArgName());\\r\\n     option.setArgName(\\\"\\\");\\r\\n     assertFalse(option.hasArgName());\\r\\n     option.setArgName(\\\"file\\\");\\r\\n     assertTrue(option.hasArgName());\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"tn@apache.org","authorName":"Thomas Neidhart","commitYear":"2013","diff":"\"@@ -1,9 +1,10 @@\\n+@Test\\r\\n public void testHasArgName() {\\r\\n     Option option = new Option(\\\"f\\\", null);\\r\\n     option.setArgName(null);\\r\\n     assertFalse(option.hasArgName());\\r\\n     option.setArgName(\\\"\\\");\\r\\n     assertFalse(option.hasArgName());\\r\\n     option.setArgName(\\\"file\\\");\\r\\n     assertTrue(option.hasArgName());\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2008","diff":"\"@@ -0,0 +1,9 @@\\n+public void testHasArgName() {\\r\\n+    Option option = new Option(\\\"f\\\", null);\\r\\n+    option.setArgName(null);\\r\\n+    assertFalse(option.hasArgName());\\r\\n+    option.setArgName(\\\"\\\");\\r\\n+    assertFalse(option.hasArgName());\\r\\n+    option.setArgName(\\\"file\\\");\\r\\n+    assertTrue(option.hasArgName());\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\test\java\org\apache\commons\cli\OptionTest.java	testHasArgs	org.apache.commons.cli.OptionTest.testHasArgs()	201	218	1	[{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,14 +1,14 @@\\n @Test\\r\\n public void testHasArgs() {\\r\\n-    Option option = new Option(\\\"f\\\", null);\\r\\n+    final Option option = new Option(\\\"f\\\", null);\\r\\n     option.setArgs(0);\\r\\n     assertFalse(option.hasArgs());\\r\\n     option.setArgs(1);\\r\\n     assertFalse(option.hasArgs());\\r\\n     option.setArgs(10);\\r\\n     assertTrue(option.hasArgs());\\r\\n     option.setArgs(Option.UNLIMITED_VALUES);\\r\\n     assertTrue(option.hasArgs());\\r\\n     option.setArgs(Option.UNINITIALIZED);\\r\\n     assertFalse(option.hasArgs());\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"tn@apache.org","authorName":"Thomas Neidhart","commitYear":"2013","diff":"\"@@ -1,13 +1,14 @@\\n+@Test\\r\\n public void testHasArgs() {\\r\\n     Option option = new Option(\\\"f\\\", null);\\r\\n     option.setArgs(0);\\r\\n     assertFalse(option.hasArgs());\\r\\n     option.setArgs(1);\\r\\n     assertFalse(option.hasArgs());\\r\\n     option.setArgs(10);\\r\\n     assertTrue(option.hasArgs());\\r\\n     option.setArgs(Option.UNLIMITED_VALUES);\\r\\n     assertTrue(option.hasArgs());\\r\\n     option.setArgs(Option.UNINITIALIZED);\\r\\n     assertFalse(option.hasArgs());\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2008","diff":"\"@@ -0,0 +1,13 @@\\n+public void testHasArgs() {\\r\\n+    Option option = new Option(\\\"f\\\", null);\\r\\n+    option.setArgs(0);\\r\\n+    assertFalse(option.hasArgs());\\r\\n+    option.setArgs(1);\\r\\n+    assertFalse(option.hasArgs());\\r\\n+    option.setArgs(10);\\r\\n+    assertTrue(option.hasArgs());\\r\\n+    option.setArgs(Option.UNLIMITED_VALUES);\\r\\n+    assertTrue(option.hasArgs());\\r\\n+    option.setArgs(Option.UNINITIALIZED);\\r\\n+    assertFalse(option.hasArgs());\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\test\java\org\apache\commons\cli\OptionTest.java	testHashCode	org.apache.commons.cli.OptionTest.testHashCode()	221	225	1	[{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"\""},{"authorEmail":"britter@apache.org","authorName":"Benedikt Ritter","commitYear":"2017","diff":"\"@@ -0,0 +1,6 @@\\n+@Test\\r\\n+public void testHashCode() {\\r\\n+    assertNotEquals(Option.builder(\\\"test\\\").build().hashCode(), Option.builder(\\\"test2\\\").build().hashCode());\\r\\n+    assertNotEquals(Option.builder(\\\"test\\\").build().hashCode(), Option.builder().longOpt(\\\"test\\\").build().hashCode());\\r\\n+    assertNotEquals(Option.builder(\\\"test\\\").build().hashCode(), Option.builder(\\\"test\\\").longOpt(\\\"long test\\\").build().hashCode());\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\test\java\org\apache\commons\cli\OptionTest.java	testSubclass	org.apache.commons.cli.OptionTest.testSubclass()	228	233	1	[{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,7 +1,7 @@\\n @Test\\r\\n public void testSubclass() {\\r\\n-    Option option = new DefaultOption(\\\"f\\\", \\\"file\\\", \\\"myfile.txt\\\");\\r\\n-    Option clone = (Option) option.clone();\\r\\n+    final Option option = new DefaultOption(\\\"f\\\", \\\"file\\\", \\\"myfile.txt\\\");\\r\\n+    final Option clone = (Option) option.clone();\\r\\n     assertEquals(\\\"myfile.txt\\\", clone.getValue());\\r\\n     assertEquals(DefaultOption.class, clone.getClass());\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"tn@apache.org","authorName":"Thomas Neidhart","commitYear":"2013","diff":"\"@@ -1,6 +1,7 @@\\n+@Test\\r\\n public void testSubclass() {\\r\\n     Option option = new DefaultOption(\\\"f\\\", \\\"file\\\", \\\"myfile.txt\\\");\\r\\n     Option clone = (Option) option.clone();\\r\\n     assertEquals(\\\"myfile.txt\\\", clone.getValue());\\r\\n     assertEquals(DefaultOption.class, clone.getClass());\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"sebb@apache.org","authorName":"Sebastian Bazley","commitYear":"2013","diff":"\"@@ -1,6 +1,6 @@\\n-public void testSubclass() throws CloneNotSupportedException {\\r\\n+public void testSubclass() {\\r\\n     Option option = new DefaultOption(\\\"f\\\", \\\"file\\\", \\\"myfile.txt\\\");\\r\\n     Option clone = (Option) option.clone();\\r\\n     assertEquals(\\\"myfile.txt\\\", clone.getValue());\\r\\n     assertEquals(DefaultOption.class, clone.getClass());\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"niallp@apache.org","authorName":"Niall Kegan Pemberton","commitYear":"2008","diff":"\"\""},{"authorEmail":"bayard@apache.org","authorName":"Henri Yandell","commitYear":"2007","diff":"\"@@ -0,0 +1,6 @@\\n+public void testSubclass() throws CloneNotSupportedException {\\r\\n+    Option option = new DefaultOption(\\\"f\\\", \\\"file\\\", \\\"myfile.txt\\\");\\r\\n+    Option clone = (Option) option.clone();\\r\\n+    assertEquals(\\\"myfile.txt\\\", clone.getValue());\\r\\n+    assertEquals(DefaultOption.class, clone.getClass());\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\test\java\org\apache\commons\cli\PatternOptionBuilderTest.java	testClassPattern	org.apache.commons.cli.PatternOptionBuilderTest.testClassPattern()	42	49	1	[{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"\""},{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,8 +1,8 @@\\n @Test\\r\\n public void testClassPattern() throws Exception {\\r\\n-    Options options = PatternOptionBuilder.parsePattern(\\\"c+d+\\\");\\r\\n-    CommandLineParser parser = new PosixParser();\\r\\n-    CommandLine line = parser.parse(options, new String[] { \\\"-c\\\", \\\"java.util.Calendar\\\", \\\"-d\\\", \\\"System.DateTime\\\" });\\r\\n+    final Options options = PatternOptionBuilder.parsePattern(\\\"c+d+\\\");\\r\\n+    final CommandLineParser parser = new PosixParser();\\r\\n+    final CommandLine line = parser.parse(options, new String[] { \\\"-c\\\", \\\"java.util.Calendar\\\", \\\"-d\\\", \\\"System.DateTime\\\" });\\r\\n     assertEquals(\\\"c value\\\", Calendar.class, line.getOptionObject(\\\"c\\\"));\\r\\n     assertNull(\\\"d value\\\", line.getOptionObject(\\\"d\\\"));\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"tn@apache.org","authorName":"Thomas Neidhart","commitYear":"2013","diff":"\"@@ -1,7 +1,8 @@\\n+@Test\\r\\n public void testClassPattern() throws Exception {\\r\\n     Options options = PatternOptionBuilder.parsePattern(\\\"c+d+\\\");\\r\\n     CommandLineParser parser = new PosixParser();\\r\\n     CommandLine line = parser.parse(options, new String[] { \\\"-c\\\", \\\"java.util.Calendar\\\", \\\"-d\\\", \\\"System.DateTime\\\" });\\r\\n     assertEquals(\\\"c value\\\", Calendar.class, line.getOptionObject(\\\"c\\\"));\\r\\n     assertNull(\\\"d value\\\", line.getOptionObject(\\\"d\\\"));\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2008","diff":"\"@@ -0,0 +1,7 @@\\n+public void testClassPattern() throws Exception {\\r\\n+    Options options = PatternOptionBuilder.parsePattern(\\\"c+d+\\\");\\r\\n+    CommandLineParser parser = new PosixParser();\\r\\n+    CommandLine line = parser.parse(options, new String[] { \\\"-c\\\", \\\"java.util.Calendar\\\", \\\"-d\\\", \\\"System.DateTime\\\" });\\r\\n+    assertEquals(\\\"c value\\\", Calendar.class, line.getOptionObject(\\\"c\\\"));\\r\\n+    assertNull(\\\"d value\\\", line.getOptionObject(\\\"d\\\"));\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\test\java\org\apache\commons\cli\PatternOptionBuilderTest.java	testEmptyPattern	org.apache.commons.cli.PatternOptionBuilderTest.testEmptyPattern()	52	55	1	[{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"@@ -1,5 +1,5 @@\\n @Test\\r\\n-public void testEmptyPattern() throws Exception {\\r\\n+public void testEmptyPattern() {\\r\\n     final Options options = PatternOptionBuilder.parsePattern(\\\"\\\");\\r\\n     assertTrue(options.getOptions().isEmpty());\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,5 +1,5 @@\\n @Test\\r\\n public void testEmptyPattern() throws Exception {\\r\\n-    Options options = PatternOptionBuilder.parsePattern(\\\"\\\");\\r\\n+    final Options options = PatternOptionBuilder.parsePattern(\\\"\\\");\\r\\n     assertTrue(options.getOptions().isEmpty());\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"tn@apache.org","authorName":"Thomas Neidhart","commitYear":"2013","diff":"\"@@ -1,4 +1,5 @@\\n+@Test\\r\\n public void testEmptyPattern() throws Exception {\\r\\n     Options options = PatternOptionBuilder.parsePattern(\\\"\\\");\\r\\n     assertTrue(options.getOptions().isEmpty());\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2008","diff":"\"@@ -0,0 +1,4 @@\\n+public void testEmptyPattern() throws Exception {\\r\\n+    Options options = PatternOptionBuilder.parsePattern(\\\"\\\");\\r\\n+    assertTrue(options.getOptions().isEmpty());\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\test\java\org\apache\commons\cli\PatternOptionBuilderTest.java	testExistingFilePattern	org.apache.commons.cli.PatternOptionBuilderTest.testExistingFilePattern()	58	67	1	[{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"\""},{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2020","diff":"\"@@ -1,9 +1,9 @@\\n @Test\\r\\n public void testExistingFilePattern() throws Exception {\\r\\n     final Options options = PatternOptionBuilder.parsePattern(\\\"g<\\\");\\r\\n     final CommandLineParser parser = new PosixParser();\\r\\n-    final CommandLine line = parser.parse(options, new String[] { \\\"-g\\\", \\\"src/test/resources/existing-readable.file\\\" });\\r\\n+    final CommandLine line = parser.parse(options, new String[] { \\\"-g\\\", \\\"src/test/resources/org/apache/commons/cli/existing-readable.file\\\" });\\r\\n     final Object parsedReadableFileStream = line.getOptionObject(\\\"g\\\");\\r\\n     assertNotNull(\\\"option g not parsed\\\", parsedReadableFileStream);\\r\\n     assertTrue(\\\"option g not FileInputStream\\\", parsedReadableFileStream instanceof FileInputStream);\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"schaumb@gmail.com","authorName":"Béla Schaum","commitYear":"2017","diff":"\"@@ -1,10 +1,9 @@\\n @Test\\r\\n public void testExistingFilePattern() throws Exception {\\r\\n-    final Options options = PatternOptionBuilder.parsePattern(\\\"f<g<\\\");\\r\\n+    final Options options = PatternOptionBuilder.parsePattern(\\\"g<\\\");\\r\\n     final CommandLineParser parser = new PosixParser();\\r\\n-    final CommandLine line = parser.parse(options, new String[] { \\\"-f\\\", \\\"non-existing.file\\\", \\\"-g\\\", \\\"src/test/resources/existing-readable.file\\\" });\\r\\n-    assertNull(\\\"option f parsed\\\", line.getOptionObject(\\\"f\\\"));\\r\\n-    Object parsedReadableFileStream = line.getOptionObject(\\\"g\\\");\\r\\n+    final CommandLine line = parser.parse(options, new String[] { \\\"-g\\\", \\\"src/test/resources/existing-readable.file\\\" });\\r\\n+    final Object parsedReadableFileStream = line.getOptionObject(\\\"g\\\");\\r\\n     assertNotNull(\\\"option g not parsed\\\", parsedReadableFileStream);\\r\\n-    assertEquals(\\\"option g not FileInputStream\\\", FileInputStream.class, parsedReadableFileStream.getClass());\\r\\n+    assertTrue(\\\"option g not FileInputStream\\\", parsedReadableFileStream instanceof FileInputStream);\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"schaumb@gmail.com","authorName":"Béla Schaum","commitYear":"2017","diff":"\"@@ -1,8 +1,10 @@\\n @Test\\r\\n public void testExistingFilePattern() throws Exception {\\r\\n     final Options options = PatternOptionBuilder.parsePattern(\\\"f<g<\\\");\\r\\n     final CommandLineParser parser = new PosixParser();\\r\\n-    final CommandLine line = parser.parse(options, new String[] { \\\"-f\\\", \\\"test.properties\\\", \\\"-g\\\", \\\"/dev/null\\\" });\\r\\n-    assertNotNull(\\\"option g not parsed, or not FileInputStream\\\", (FileInputStream) line.getOptionObject(\\\"g\\\"));\\r\\n-    assertNull(\\\"option f parsed\\\", (FileInputStream) line.getOptionObject(\\\"f\\\"));\\r\\n+    final CommandLine line = parser.parse(options, new String[] { \\\"-f\\\", \\\"non-existing.file\\\", \\\"-g\\\", \\\"src/test/resources/existing-readable.file\\\" });\\r\\n+    assertNull(\\\"option f parsed\\\", line.getOptionObject(\\\"f\\\"));\\r\\n+    Object parsedReadableFileStream = line.getOptionObject(\\\"g\\\");\\r\\n+    assertNotNull(\\\"option g not parsed\\\", parsedReadableFileStream);\\r\\n+    assertEquals(\\\"option g not FileInputStream\\\", FileInputStream.class, parsedReadableFileStream.getClass());\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,7 +1,7 @@\\n @Test\\r\\n public void testExistingFilePattern() throws Exception {\\r\\n-    Options options = PatternOptionBuilder.parsePattern(\\\"f<\\\");\\r\\n-    CommandLineParser parser = new PosixParser();\\r\\n-    CommandLine line = parser.parse(options, new String[] { \\\"-f\\\", \\\"test.properties\\\" });\\r\\n+    final Options options = PatternOptionBuilder.parsePattern(\\\"f<\\\");\\r\\n+    final CommandLineParser parser = new PosixParser();\\r\\n+    final CommandLine line = parser.parse(options, new String[] { \\\"-f\\\", \\\"test.properties\\\" });\\r\\n     assertEquals(\\\"f value\\\", new File(\\\"test.properties\\\"), line.getOptionObject(\\\"f\\\"));\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"schaumb@users.noreply.github.com","authorName":"Bela Schaum","commitYear":"2017","diff":"\"@@ -1,8 +1,8 @@\\n @Test\\r\\n public void testExistingFilePattern() throws Exception {\\r\\n     Options options = PatternOptionBuilder.parsePattern(\\\"f<g<\\\");\\r\\n     CommandLineParser parser = new PosixParser();\\r\\n-    CommandLine line = parser.parse(options, new String[] { \\\"-f\\\", \\\"test.properties\\\", \\\"-g\\\", \\\"build.xml\\\" });\\r\\n+    CommandLine line = parser.parse(options, new String[] { \\\"-f\\\", \\\"test.properties\\\", \\\"-g\\\", \\\"/dev/null\\\" });\\r\\n     assertNotNull(\\\"option g not parsed, or not FileInputStream\\\", (FileInputStream) line.getOptionObject(\\\"g\\\"));\\r\\n     assertNull(\\\"option f parsed\\\", (FileInputStream) line.getOptionObject(\\\"f\\\"));\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"schaumb@users.noreply.github.com","authorName":"Bela Schaum","commitYear":"2017","diff":"\"@@ -1,12 +1,8 @@\\n @Test\\r\\n public void testExistingFilePattern() throws Exception {\\r\\n     Options options = PatternOptionBuilder.parsePattern(\\\"f<g<\\\");\\r\\n     CommandLineParser parser = new PosixParser();\\r\\n     CommandLine line = parser.parse(options, new String[] { \\\"-f\\\", \\\"test.properties\\\", \\\"-g\\\", \\\"build.xml\\\" });\\r\\n     assertNotNull(\\\"option g not parsed, or not FileInputStream\\\", (FileInputStream) line.getOptionObject(\\\"g\\\"));\\r\\n-    try {\\r\\n-        line.getOptionObject(\\\"f\\\");\\r\\n-        fail(\\\"ParseException wasn't thrown\\\");\\r\\n-    } catch (ParseException e) {\\r\\n-    }\\r\\n+    assertNull(\\\"option f parsed\\\", (FileInputStream) line.getOptionObject(\\\"f\\\"));\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"schaumb@users.noreply.github.com","authorName":"Bela Schaum","commitYear":"2017","diff":"\"@@ -1,12 +1,12 @@\\n @Test\\r\\n public void testExistingFilePattern() throws Exception {\\r\\n     Options options = PatternOptionBuilder.parsePattern(\\\"f<g<\\\");\\r\\n     CommandLineParser parser = new PosixParser();\\r\\n     CommandLine line = parser.parse(options, new String[] { \\\"-f\\\", \\\"test.properties\\\", \\\"-g\\\", \\\"build.xml\\\" });\\r\\n-    assertNotNull((FileInputStream) line.getOptionObject(\\\"g\\\"));\\r\\n+    assertNotNull(\\\"option g not parsed, or not FileInputStream\\\", (FileInputStream) line.getOptionObject(\\\"g\\\"));\\r\\n     try {\\r\\n         line.getOptionObject(\\\"f\\\");\\r\\n         fail(\\\"ParseException wasn't thrown\\\");\\r\\n     } catch (ParseException e) {\\r\\n     }\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"schaumb@users.noreply.github.com","authorName":"Bela Schaum","commitYear":"2017","diff":"\"@@ -1,7 +1,12 @@\\n @Test\\r\\n public void testExistingFilePattern() throws Exception {\\r\\n-    Options options = PatternOptionBuilder.parsePattern(\\\"f<\\\");\\r\\n+    Options options = PatternOptionBuilder.parsePattern(\\\"f<g<\\\");\\r\\n     CommandLineParser parser = new PosixParser();\\r\\n-    CommandLine line = parser.parse(options, new String[] { \\\"-f\\\", \\\"test.properties\\\" });\\r\\n-    assertEquals(\\\"f value\\\", new File(\\\"test.properties\\\"), line.getOptionObject(\\\"f\\\"));\\r\\n+    CommandLine line = parser.parse(options, new String[] { \\\"-f\\\", \\\"test.properties\\\", \\\"-g\\\", \\\"build.xml\\\" });\\r\\n+    assertNotNull((FileInputStream) line.getOptionObject(\\\"g\\\"));\\r\\n+    try {\\r\\n+        line.getOptionObject(\\\"f\\\");\\r\\n+        fail(\\\"ParseException wasn't thrown\\\");\\r\\n+    } catch (ParseException e) {\\r\\n+    }\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"tn@apache.org","authorName":"Thomas Neidhart","commitYear":"2013","diff":"\"@@ -1,6 +1,7 @@\\n+@Test\\r\\n public void testExistingFilePattern() throws Exception {\\r\\n     Options options = PatternOptionBuilder.parsePattern(\\\"f<\\\");\\r\\n     CommandLineParser parser = new PosixParser();\\r\\n     CommandLine line = parser.parse(options, new String[] { \\\"-f\\\", \\\"test.properties\\\" });\\r\\n     assertEquals(\\\"f value\\\", new File(\\\"test.properties\\\"), line.getOptionObject(\\\"f\\\"));\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2008","diff":"\"@@ -0,0 +1,6 @@\\n+public void testExistingFilePattern() throws Exception {\\r\\n+    Options options = PatternOptionBuilder.parsePattern(\\\"f<\\\");\\r\\n+    CommandLineParser parser = new PosixParser();\\r\\n+    CommandLine line = parser.parse(options, new String[] { \\\"-f\\\", \\\"test.properties\\\" });\\r\\n+    assertEquals(\\\"f value\\\", new File(\\\"test.properties\\\"), line.getOptionObject(\\\"f\\\"));\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\test\java\org\apache\commons\cli\PatternOptionBuilderTest.java	testExistingFilePatternFileNotExist	org.apache.commons.cli.PatternOptionBuilderTest.testExistingFilePatternFileNotExist()	70	76	1	[{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"\""},{"authorEmail":"schaumb@gmail.com","authorName":"Béla Schaum","commitYear":"2017","diff":"\"@@ -0,0 +1,7 @@\\n+@Test\\r\\n+public void testExistingFilePatternFileNotExist() throws Exception {\\r\\n+    final Options options = PatternOptionBuilder.parsePattern(\\\"f<\\\");\\r\\n+    final CommandLineParser parser = new PosixParser();\\r\\n+    final CommandLine line = parser.parse(options, new String[] { \\\"-f\\\", \\\"non-existing.file\\\" });\\r\\n+    assertNull(\\\"option f parsed\\\", line.getOptionObject(\\\"f\\\"));\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\test\java\org\apache\commons\cli\PatternOptionBuilderTest.java	testNumberPattern	org.apache.commons.cli.PatternOptionBuilderTest.testNumberPattern()	79	91	1	[{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"@@ -1,11 +1,11 @@\\n @Test\\r\\n public void testNumberPattern() throws Exception {\\r\\n     final Options options = PatternOptionBuilder.parsePattern(\\\"n%d%x%\\\");\\r\\n     final CommandLineParser parser = new PosixParser();\\r\\n     final CommandLine line = parser.parse(options, new String[] { \\\"-n\\\", \\\"1\\\", \\\"-d\\\", \\\"2.1\\\", \\\"-x\\\", \\\"3,5\\\" });\\r\\n     assertEquals(\\\"n object class\\\", Long.class, line.getOptionObject(\\\"n\\\").getClass());\\r\\n-    assertEquals(\\\"n value\\\", new Long(1), line.getOptionObject(\\\"n\\\"));\\r\\n+    assertEquals(\\\"n value\\\", Long.valueOf(1), line.getOptionObject(\\\"n\\\"));\\r\\n     assertEquals(\\\"d object class\\\", Double.class, line.getOptionObject(\\\"d\\\").getClass());\\r\\n-    assertEquals(\\\"d value\\\", new Double(2.1), line.getOptionObject(\\\"d\\\"));\\r\\n+    assertEquals(\\\"d value\\\", Double.valueOf(2.1), line.getOptionObject(\\\"d\\\"));\\r\\n     assertNull(\\\"x object\\\", line.getOptionObject(\\\"x\\\"));\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,11 +1,11 @@\\n @Test\\r\\n public void testNumberPattern() throws Exception {\\r\\n-    Options options = PatternOptionBuilder.parsePattern(\\\"n%d%x%\\\");\\r\\n-    CommandLineParser parser = new PosixParser();\\r\\n-    CommandLine line = parser.parse(options, new String[] { \\\"-n\\\", \\\"1\\\", \\\"-d\\\", \\\"2.1\\\", \\\"-x\\\", \\\"3,5\\\" });\\r\\n+    final Options options = PatternOptionBuilder.parsePattern(\\\"n%d%x%\\\");\\r\\n+    final CommandLineParser parser = new PosixParser();\\r\\n+    final CommandLine line = parser.parse(options, new String[] { \\\"-n\\\", \\\"1\\\", \\\"-d\\\", \\\"2.1\\\", \\\"-x\\\", \\\"3,5\\\" });\\r\\n     assertEquals(\\\"n object class\\\", Long.class, line.getOptionObject(\\\"n\\\").getClass());\\r\\n     assertEquals(\\\"n value\\\", new Long(1), line.getOptionObject(\\\"n\\\"));\\r\\n     assertEquals(\\\"d object class\\\", Double.class, line.getOptionObject(\\\"d\\\").getClass());\\r\\n     assertEquals(\\\"d value\\\", new Double(2.1), line.getOptionObject(\\\"d\\\"));\\r\\n     assertNull(\\\"x object\\\", line.getOptionObject(\\\"x\\\"));\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"tn@apache.org","authorName":"Thomas Neidhart","commitYear":"2013","diff":"\"@@ -1,10 +1,11 @@\\n+@Test\\r\\n public void testNumberPattern() throws Exception {\\r\\n     Options options = PatternOptionBuilder.parsePattern(\\\"n%d%x%\\\");\\r\\n     CommandLineParser parser = new PosixParser();\\r\\n     CommandLine line = parser.parse(options, new String[] { \\\"-n\\\", \\\"1\\\", \\\"-d\\\", \\\"2.1\\\", \\\"-x\\\", \\\"3,5\\\" });\\r\\n     assertEquals(\\\"n object class\\\", Long.class, line.getOptionObject(\\\"n\\\").getClass());\\r\\n     assertEquals(\\\"n value\\\", new Long(1), line.getOptionObject(\\\"n\\\"));\\r\\n     assertEquals(\\\"d object class\\\", Double.class, line.getOptionObject(\\\"d\\\").getClass());\\r\\n     assertEquals(\\\"d value\\\", new Double(2.1), line.getOptionObject(\\\"d\\\"));\\r\\n     assertNull(\\\"x object\\\", line.getOptionObject(\\\"x\\\"));\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2008","diff":"\"@@ -0,0 +1,10 @@\\n+public void testNumberPattern() throws Exception {\\r\\n+    Options options = PatternOptionBuilder.parsePattern(\\\"n%d%x%\\\");\\r\\n+    CommandLineParser parser = new PosixParser();\\r\\n+    CommandLine line = parser.parse(options, new String[] { \\\"-n\\\", \\\"1\\\", \\\"-d\\\", \\\"2.1\\\", \\\"-x\\\", \\\"3,5\\\" });\\r\\n+    assertEquals(\\\"n object class\\\", Long.class, line.getOptionObject(\\\"n\\\").getClass());\\r\\n+    assertEquals(\\\"n value\\\", new Long(1), line.getOptionObject(\\\"n\\\"));\\r\\n+    assertEquals(\\\"d object class\\\", Double.class, line.getOptionObject(\\\"d\\\").getClass());\\r\\n+    assertEquals(\\\"d value\\\", new Double(2.1), line.getOptionObject(\\\"d\\\"));\\r\\n+    assertNull(\\\"x object\\\", line.getOptionObject(\\\"x\\\"));\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\test\java\org\apache\commons\cli\PatternOptionBuilderTest.java	testObjectPattern	org.apache.commons.cli.PatternOptionBuilderTest.testObjectPattern()	94	102	1	[{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"\""},{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,9 +1,9 @@\\n @Test\\r\\n public void testObjectPattern() throws Exception {\\r\\n-    Options options = PatternOptionBuilder.parsePattern(\\\"o@i@n@\\\");\\r\\n-    CommandLineParser parser = new PosixParser();\\r\\n-    CommandLine line = parser.parse(options, new String[] { \\\"-o\\\", \\\"java.lang.String\\\", \\\"-i\\\", \\\"java.util.Calendar\\\", \\\"-n\\\", \\\"System.DateTime\\\" });\\r\\n+    final Options options = PatternOptionBuilder.parsePattern(\\\"o@i@n@\\\");\\r\\n+    final CommandLineParser parser = new PosixParser();\\r\\n+    final CommandLine line = parser.parse(options, new String[] { \\\"-o\\\", \\\"java.lang.String\\\", \\\"-i\\\", \\\"java.util.Calendar\\\", \\\"-n\\\", \\\"System.DateTime\\\" });\\r\\n     assertEquals(\\\"o value\\\", \\\"\\\", line.getOptionObject(\\\"o\\\"));\\r\\n     assertNull(\\\"i value\\\", line.getOptionObject(\\\"i\\\"));\\r\\n     assertNull(\\\"n value\\\", line.getOptionObject(\\\"n\\\"));\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"tn@apache.org","authorName":"Thomas Neidhart","commitYear":"2013","diff":"\"@@ -1,8 +1,9 @@\\n+@Test\\r\\n public void testObjectPattern() throws Exception {\\r\\n     Options options = PatternOptionBuilder.parsePattern(\\\"o@i@n@\\\");\\r\\n     CommandLineParser parser = new PosixParser();\\r\\n     CommandLine line = parser.parse(options, new String[] { \\\"-o\\\", \\\"java.lang.String\\\", \\\"-i\\\", \\\"java.util.Calendar\\\", \\\"-n\\\", \\\"System.DateTime\\\" });\\r\\n     assertEquals(\\\"o value\\\", \\\"\\\", line.getOptionObject(\\\"o\\\"));\\r\\n     assertNull(\\\"i value\\\", line.getOptionObject(\\\"i\\\"));\\r\\n     assertNull(\\\"n value\\\", line.getOptionObject(\\\"n\\\"));\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2008","diff":"\"@@ -0,0 +1,8 @@\\n+public void testObjectPattern() throws Exception {\\r\\n+    Options options = PatternOptionBuilder.parsePattern(\\\"o@i@n@\\\");\\r\\n+    CommandLineParser parser = new PosixParser();\\r\\n+    CommandLine line = parser.parse(options, new String[] { \\\"-o\\\", \\\"java.lang.String\\\", \\\"-i\\\", \\\"java.util.Calendar\\\", \\\"-n\\\", \\\"System.DateTime\\\" });\\r\\n+    assertEquals(\\\"o value\\\", \\\"\\\", line.getOptionObject(\\\"o\\\"));\\r\\n+    assertNull(\\\"i value\\\", line.getOptionObject(\\\"i\\\"));\\r\\n+    assertNull(\\\"n value\\\", line.getOptionObject(\\\"n\\\"));\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\test\java\org\apache\commons\cli\PatternOptionBuilderTest.java	testRequiredOption	org.apache.commons.cli.PatternOptionBuilderTest.testRequiredOption()	105	116	3	[{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"\""},{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,12 +1,12 @@\\n @Test\\r\\n public void testRequiredOption() throws Exception {\\r\\n-    Options options = PatternOptionBuilder.parsePattern(\\\"!n%m%\\\");\\r\\n-    CommandLineParser parser = new PosixParser();\\r\\n+    final Options options = PatternOptionBuilder.parsePattern(\\\"!n%m%\\\");\\r\\n+    final CommandLineParser parser = new PosixParser();\\r\\n     try {\\r\\n         parser.parse(options, new String[] { \\\"\\\" });\\r\\n         fail(\\\"MissingOptionException wasn't thrown\\\");\\r\\n-    } catch (MissingOptionException e) {\\r\\n+    } catch (final MissingOptionException e) {\\r\\n         assertEquals(1, e.getMissingOptions().size());\\r\\n         assertTrue(e.getMissingOptions().contains(\\\"n\\\"));\\r\\n     }\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"tn@apache.org","authorName":"Thomas Neidhart","commitYear":"2013","diff":"\"@@ -1,11 +1,12 @@\\n+@Test\\r\\n public void testRequiredOption() throws Exception {\\r\\n     Options options = PatternOptionBuilder.parsePattern(\\\"!n%m%\\\");\\r\\n     CommandLineParser parser = new PosixParser();\\r\\n     try {\\r\\n         parser.parse(options, new String[] { \\\"\\\" });\\r\\n         fail(\\\"MissingOptionException wasn't thrown\\\");\\r\\n     } catch (MissingOptionException e) {\\r\\n         assertEquals(1, e.getMissingOptions().size());\\r\\n         assertTrue(e.getMissingOptions().contains(\\\"n\\\"));\\r\\n     }\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2008","diff":"\"@@ -0,0 +1,11 @@\\n+public void testRequiredOption() throws Exception {\\r\\n+    Options options = PatternOptionBuilder.parsePattern(\\\"!n%m%\\\");\\r\\n+    CommandLineParser parser = new PosixParser();\\r\\n+    try {\\r\\n+        parser.parse(options, new String[] { \\\"\\\" });\\r\\n+        fail(\\\"MissingOptionException wasn't thrown\\\");\\r\\n+    } catch (MissingOptionException e) {\\r\\n+        assertEquals(1, e.getMissingOptions().size());\\r\\n+        assertTrue(e.getMissingOptions().contains(\\\"n\\\"));\\r\\n+    }\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\test\java\org\apache\commons\cli\PatternOptionBuilderTest.java	testSimplePattern	org.apache.commons.cli.PatternOptionBuilderTest.testSimplePattern()	119	163	5	[{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"@@ -1,35 +1,35 @@\\n @Test\\r\\n public void testSimplePattern() throws Exception {\\r\\n     final Options options = PatternOptionBuilder.parsePattern(\\\"a:b@cde>f+n%t/m*z#\\\");\\r\\n-    final String[] args = new String[] { \\\"-c\\\", \\\"-a\\\", \\\"foo\\\", \\\"-b\\\", \\\"java.util.Vector\\\", \\\"-e\\\", \\\"build.xml\\\", \\\"-f\\\", \\\"java.util.Calendar\\\", \\\"-n\\\", \\\"4.5\\\", \\\"-t\\\", \\\"https://commons.apache.org\\\", \\\"-z\\\", \\\"Thu Jun 06 17:48:57 EDT 2002\\\", \\\"-m\\\", \\\"test*\\\" };\\r\\n+    final String[] args = { \\\"-c\\\", \\\"-a\\\", \\\"foo\\\", \\\"-b\\\", \\\"java.util.Vector\\\", \\\"-e\\\", \\\"build.xml\\\", \\\"-f\\\", \\\"java.util.Calendar\\\", \\\"-n\\\", \\\"4.5\\\", \\\"-t\\\", \\\"https://commons.apache.org\\\", \\\"-z\\\", \\\"Thu Jun 06 17:48:57 EDT 2002\\\", \\\"-m\\\", \\\"test*\\\" };\\r\\n     final CommandLineParser parser = new PosixParser();\\r\\n     final CommandLine line = parser.parse(options, args);\\r\\n     assertEquals(\\\"flag a\\\", \\\"foo\\\", line.getOptionValue(\\\"a\\\"));\\r\\n     assertEquals(\\\"string flag a\\\", \\\"foo\\\", line.getOptionObject(\\\"a\\\"));\\r\\n     assertEquals(\\\"object flag b\\\", new Vector<>(), line.getOptionObject(\\\"b\\\"));\\r\\n     assertTrue(\\\"boolean true flag c\\\", line.hasOption(\\\"c\\\"));\\r\\n     assertFalse(\\\"boolean false flag d\\\", line.hasOption(\\\"d\\\"));\\r\\n     assertEquals(\\\"file flag e\\\", new File(\\\"build.xml\\\"), line.getOptionObject(\\\"e\\\"));\\r\\n     assertEquals(\\\"class flag f\\\", Calendar.class, line.getOptionObject(\\\"f\\\"));\\r\\n-    assertEquals(\\\"number flag n\\\", new Double(4.5), line.getOptionObject(\\\"n\\\"));\\r\\n+    assertEquals(\\\"number flag n\\\", Double.valueOf(4.5), line.getOptionObject(\\\"n\\\"));\\r\\n     assertEquals(\\\"url flag t\\\", new URL(\\\"https://commons.apache.org\\\"), line.getOptionObject(\\\"t\\\"));\\r\\n     assertEquals(\\\"flag a\\\", \\\"foo\\\", line.getOptionValue('a'));\\r\\n     assertEquals(\\\"string flag a\\\", \\\"foo\\\", line.getOptionObject('a'));\\r\\n     assertEquals(\\\"object flag b\\\", new Vector<>(), line.getOptionObject('b'));\\r\\n     assertTrue(\\\"boolean true flag c\\\", line.hasOption('c'));\\r\\n     assertFalse(\\\"boolean false flag d\\\", line.hasOption('d'));\\r\\n     assertEquals(\\\"file flag e\\\", new File(\\\"build.xml\\\"), line.getOptionObject('e'));\\r\\n     assertEquals(\\\"class flag f\\\", Calendar.class, line.getOptionObject('f'));\\r\\n-    assertEquals(\\\"number flag n\\\", new Double(4.5), line.getOptionObject('n'));\\r\\n+    assertEquals(\\\"number flag n\\\", Double.valueOf(4.5), line.getOptionObject('n'));\\r\\n     assertEquals(\\\"url flag t\\\", new URL(\\\"https://commons.apache.org\\\"), line.getOptionObject('t'));\\r\\n     try {\\r\\n         assertEquals(\\\"files flag m\\\", new File[0], line.getOptionObject('m'));\\r\\n         fail(\\\"Multiple files are not supported yet, should have failed\\\");\\r\\n     } catch (final UnsupportedOperationException uoe) {\\r\\n     }\\r\\n     try {\\r\\n         assertEquals(\\\"date flag z\\\", new Date(1023400137276L), line.getOptionObject('z'));\\r\\n         fail(\\\"Date is not supported yet, should have failed\\\");\\r\\n     } catch (final UnsupportedOperationException uoe) {\\r\\n     }\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2020","diff":"\"@@ -1,35 +1,35 @@\\n @Test\\r\\n public void testSimplePattern() throws Exception {\\r\\n     final Options options = PatternOptionBuilder.parsePattern(\\\"a:b@cde>f+n%t/m*z#\\\");\\r\\n     final String[] args = new String[] { \\\"-c\\\", \\\"-a\\\", \\\"foo\\\", \\\"-b\\\", \\\"java.util.Vector\\\", \\\"-e\\\", \\\"build.xml\\\", \\\"-f\\\", \\\"java.util.Calendar\\\", \\\"-n\\\", \\\"4.5\\\", \\\"-t\\\", \\\"https://commons.apache.org\\\", \\\"-z\\\", \\\"Thu Jun 06 17:48:57 EDT 2002\\\", \\\"-m\\\", \\\"test*\\\" };\\r\\n     final CommandLineParser parser = new PosixParser();\\r\\n     final CommandLine line = parser.parse(options, args);\\r\\n     assertEquals(\\\"flag a\\\", \\\"foo\\\", line.getOptionValue(\\\"a\\\"));\\r\\n     assertEquals(\\\"string flag a\\\", \\\"foo\\\", line.getOptionObject(\\\"a\\\"));\\r\\n-    assertEquals(\\\"object flag b\\\", new Vector<Object>(), line.getOptionObject(\\\"b\\\"));\\r\\n+    assertEquals(\\\"object flag b\\\", new Vector<>(), line.getOptionObject(\\\"b\\\"));\\r\\n     assertTrue(\\\"boolean true flag c\\\", line.hasOption(\\\"c\\\"));\\r\\n     assertFalse(\\\"boolean false flag d\\\", line.hasOption(\\\"d\\\"));\\r\\n     assertEquals(\\\"file flag e\\\", new File(\\\"build.xml\\\"), line.getOptionObject(\\\"e\\\"));\\r\\n     assertEquals(\\\"class flag f\\\", Calendar.class, line.getOptionObject(\\\"f\\\"));\\r\\n     assertEquals(\\\"number flag n\\\", new Double(4.5), line.getOptionObject(\\\"n\\\"));\\r\\n     assertEquals(\\\"url flag t\\\", new URL(\\\"https://commons.apache.org\\\"), line.getOptionObject(\\\"t\\\"));\\r\\n     assertEquals(\\\"flag a\\\", \\\"foo\\\", line.getOptionValue('a'));\\r\\n     assertEquals(\\\"string flag a\\\", \\\"foo\\\", line.getOptionObject('a'));\\r\\n-    assertEquals(\\\"object flag b\\\", new Vector<Object>(), line.getOptionObject('b'));\\r\\n+    assertEquals(\\\"object flag b\\\", new Vector<>(), line.getOptionObject('b'));\\r\\n     assertTrue(\\\"boolean true flag c\\\", line.hasOption('c'));\\r\\n     assertFalse(\\\"boolean false flag d\\\", line.hasOption('d'));\\r\\n     assertEquals(\\\"file flag e\\\", new File(\\\"build.xml\\\"), line.getOptionObject('e'));\\r\\n     assertEquals(\\\"class flag f\\\", Calendar.class, line.getOptionObject('f'));\\r\\n     assertEquals(\\\"number flag n\\\", new Double(4.5), line.getOptionObject('n'));\\r\\n     assertEquals(\\\"url flag t\\\", new URL(\\\"https://commons.apache.org\\\"), line.getOptionObject('t'));\\r\\n     try {\\r\\n         assertEquals(\\\"files flag m\\\", new File[0], line.getOptionObject('m'));\\r\\n         fail(\\\"Multiple files are not supported yet, should have failed\\\");\\r\\n     } catch (final UnsupportedOperationException uoe) {\\r\\n     }\\r\\n     try {\\r\\n         assertEquals(\\\"date flag z\\\", new Date(1023400137276L), line.getOptionObject('z'));\\r\\n         fail(\\\"Date is not supported yet, should have failed\\\");\\r\\n     } catch (final UnsupportedOperationException uoe) {\\r\\n     }\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"gardgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2019","diff":"\"@@ -1,35 +1,35 @@\\n @Test\\r\\n public void testSimplePattern() throws Exception {\\r\\n     final Options options = PatternOptionBuilder.parsePattern(\\\"a:b@cde>f+n%t/m*z#\\\");\\r\\n-    final String[] args = new String[] { \\\"-c\\\", \\\"-a\\\", \\\"foo\\\", \\\"-b\\\", \\\"java.util.Vector\\\", \\\"-e\\\", \\\"build.xml\\\", \\\"-f\\\", \\\"java.util.Calendar\\\", \\\"-n\\\", \\\"4.5\\\", \\\"-t\\\", \\\"http://commons.apache.org\\\", \\\"-z\\\", \\\"Thu Jun 06 17:48:57 EDT 2002\\\", \\\"-m\\\", \\\"test*\\\" };\\r\\n+    final String[] args = new String[] { \\\"-c\\\", \\\"-a\\\", \\\"foo\\\", \\\"-b\\\", \\\"java.util.Vector\\\", \\\"-e\\\", \\\"build.xml\\\", \\\"-f\\\", \\\"java.util.Calendar\\\", \\\"-n\\\", \\\"4.5\\\", \\\"-t\\\", \\\"https://commons.apache.org\\\", \\\"-z\\\", \\\"Thu Jun 06 17:48:57 EDT 2002\\\", \\\"-m\\\", \\\"test*\\\" };\\r\\n     final CommandLineParser parser = new PosixParser();\\r\\n     final CommandLine line = parser.parse(options, args);\\r\\n     assertEquals(\\\"flag a\\\", \\\"foo\\\", line.getOptionValue(\\\"a\\\"));\\r\\n     assertEquals(\\\"string flag a\\\", \\\"foo\\\", line.getOptionObject(\\\"a\\\"));\\r\\n     assertEquals(\\\"object flag b\\\", new Vector<Object>(), line.getOptionObject(\\\"b\\\"));\\r\\n     assertTrue(\\\"boolean true flag c\\\", line.hasOption(\\\"c\\\"));\\r\\n     assertFalse(\\\"boolean false flag d\\\", line.hasOption(\\\"d\\\"));\\r\\n     assertEquals(\\\"file flag e\\\", new File(\\\"build.xml\\\"), line.getOptionObject(\\\"e\\\"));\\r\\n     assertEquals(\\\"class flag f\\\", Calendar.class, line.getOptionObject(\\\"f\\\"));\\r\\n     assertEquals(\\\"number flag n\\\", new Double(4.5), line.getOptionObject(\\\"n\\\"));\\r\\n-    assertEquals(\\\"url flag t\\\", new URL(\\\"http://commons.apache.org\\\"), line.getOptionObject(\\\"t\\\"));\\r\\n+    assertEquals(\\\"url flag t\\\", new URL(\\\"https://commons.apache.org\\\"), line.getOptionObject(\\\"t\\\"));\\r\\n     assertEquals(\\\"flag a\\\", \\\"foo\\\", line.getOptionValue('a'));\\r\\n     assertEquals(\\\"string flag a\\\", \\\"foo\\\", line.getOptionObject('a'));\\r\\n     assertEquals(\\\"object flag b\\\", new Vector<Object>(), line.getOptionObject('b'));\\r\\n     assertTrue(\\\"boolean true flag c\\\", line.hasOption('c'));\\r\\n     assertFalse(\\\"boolean false flag d\\\", line.hasOption('d'));\\r\\n     assertEquals(\\\"file flag e\\\", new File(\\\"build.xml\\\"), line.getOptionObject('e'));\\r\\n     assertEquals(\\\"class flag f\\\", Calendar.class, line.getOptionObject('f'));\\r\\n     assertEquals(\\\"number flag n\\\", new Double(4.5), line.getOptionObject('n'));\\r\\n-    assertEquals(\\\"url flag t\\\", new URL(\\\"http://commons.apache.org\\\"), line.getOptionObject('t'));\\r\\n+    assertEquals(\\\"url flag t\\\", new URL(\\\"https://commons.apache.org\\\"), line.getOptionObject('t'));\\r\\n     try {\\r\\n         assertEquals(\\\"files flag m\\\", new File[0], line.getOptionObject('m'));\\r\\n         fail(\\\"Multiple files are not supported yet, should have failed\\\");\\r\\n     } catch (final UnsupportedOperationException uoe) {\\r\\n     }\\r\\n     try {\\r\\n         assertEquals(\\\"date flag z\\\", new Date(1023400137276L), line.getOptionObject('z'));\\r\\n         fail(\\\"Date is not supported yet, should have failed\\\");\\r\\n     } catch (final UnsupportedOperationException uoe) {\\r\\n     }\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,35 +1,35 @@\\n @Test\\r\\n public void testSimplePattern() throws Exception {\\r\\n-    Options options = PatternOptionBuilder.parsePattern(\\\"a:b@cde>f+n%t/m*z#\\\");\\r\\n-    String[] args = new String[] { \\\"-c\\\", \\\"-a\\\", \\\"foo\\\", \\\"-b\\\", \\\"java.util.Vector\\\", \\\"-e\\\", \\\"build.xml\\\", \\\"-f\\\", \\\"java.util.Calendar\\\", \\\"-n\\\", \\\"4.5\\\", \\\"-t\\\", \\\"http://commons.apache.org\\\", \\\"-z\\\", \\\"Thu Jun 06 17:48:57 EDT 2002\\\", \\\"-m\\\", \\\"test*\\\" };\\r\\n-    CommandLineParser parser = new PosixParser();\\r\\n-    CommandLine line = parser.parse(options, args);\\r\\n+    final Options options = PatternOptionBuilder.parsePattern(\\\"a:b@cde>f+n%t/m*z#\\\");\\r\\n+    final String[] args = new String[] { \\\"-c\\\", \\\"-a\\\", \\\"foo\\\", \\\"-b\\\", \\\"java.util.Vector\\\", \\\"-e\\\", \\\"build.xml\\\", \\\"-f\\\", \\\"java.util.Calendar\\\", \\\"-n\\\", \\\"4.5\\\", \\\"-t\\\", \\\"http://commons.apache.org\\\", \\\"-z\\\", \\\"Thu Jun 06 17:48:57 EDT 2002\\\", \\\"-m\\\", \\\"test*\\\" };\\r\\n+    final CommandLineParser parser = new PosixParser();\\r\\n+    final CommandLine line = parser.parse(options, args);\\r\\n     assertEquals(\\\"flag a\\\", \\\"foo\\\", line.getOptionValue(\\\"a\\\"));\\r\\n     assertEquals(\\\"string flag a\\\", \\\"foo\\\", line.getOptionObject(\\\"a\\\"));\\r\\n     assertEquals(\\\"object flag b\\\", new Vector<Object>(), line.getOptionObject(\\\"b\\\"));\\r\\n     assertTrue(\\\"boolean true flag c\\\", line.hasOption(\\\"c\\\"));\\r\\n     assertFalse(\\\"boolean false flag d\\\", line.hasOption(\\\"d\\\"));\\r\\n     assertEquals(\\\"file flag e\\\", new File(\\\"build.xml\\\"), line.getOptionObject(\\\"e\\\"));\\r\\n     assertEquals(\\\"class flag f\\\", Calendar.class, line.getOptionObject(\\\"f\\\"));\\r\\n     assertEquals(\\\"number flag n\\\", new Double(4.5), line.getOptionObject(\\\"n\\\"));\\r\\n     assertEquals(\\\"url flag t\\\", new URL(\\\"http://commons.apache.org\\\"), line.getOptionObject(\\\"t\\\"));\\r\\n     assertEquals(\\\"flag a\\\", \\\"foo\\\", line.getOptionValue('a'));\\r\\n     assertEquals(\\\"string flag a\\\", \\\"foo\\\", line.getOptionObject('a'));\\r\\n     assertEquals(\\\"object flag b\\\", new Vector<Object>(), line.getOptionObject('b'));\\r\\n     assertTrue(\\\"boolean true flag c\\\", line.hasOption('c'));\\r\\n     assertFalse(\\\"boolean false flag d\\\", line.hasOption('d'));\\r\\n     assertEquals(\\\"file flag e\\\", new File(\\\"build.xml\\\"), line.getOptionObject('e'));\\r\\n     assertEquals(\\\"class flag f\\\", Calendar.class, line.getOptionObject('f'));\\r\\n     assertEquals(\\\"number flag n\\\", new Double(4.5), line.getOptionObject('n'));\\r\\n     assertEquals(\\\"url flag t\\\", new URL(\\\"http://commons.apache.org\\\"), line.getOptionObject('t'));\\r\\n     try {\\r\\n         assertEquals(\\\"files flag m\\\", new File[0], line.getOptionObject('m'));\\r\\n         fail(\\\"Multiple files are not supported yet, should have failed\\\");\\r\\n-    } catch (UnsupportedOperationException uoe) {\\r\\n+    } catch (final UnsupportedOperationException uoe) {\\r\\n     }\\r\\n     try {\\r\\n         assertEquals(\\\"date flag z\\\", new Date(1023400137276L), line.getOptionObject('z'));\\r\\n         fail(\\\"Date is not supported yet, should have failed\\\");\\r\\n-    } catch (UnsupportedOperationException uoe) {\\r\\n+    } catch (final UnsupportedOperationException uoe) {\\r\\n     }\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"tn@apache.org","authorName":"Thomas Neidhart","commitYear":"2013","diff":"\"@@ -1,34 +1,35 @@\\n+@Test\\r\\n public void testSimplePattern() throws Exception {\\r\\n     Options options = PatternOptionBuilder.parsePattern(\\\"a:b@cde>f+n%t/m*z#\\\");\\r\\n     String[] args = new String[] { \\\"-c\\\", \\\"-a\\\", \\\"foo\\\", \\\"-b\\\", \\\"java.util.Vector\\\", \\\"-e\\\", \\\"build.xml\\\", \\\"-f\\\", \\\"java.util.Calendar\\\", \\\"-n\\\", \\\"4.5\\\", \\\"-t\\\", \\\"http://commons.apache.org\\\", \\\"-z\\\", \\\"Thu Jun 06 17:48:57 EDT 2002\\\", \\\"-m\\\", \\\"test*\\\" };\\r\\n     CommandLineParser parser = new PosixParser();\\r\\n     CommandLine line = parser.parse(options, args);\\r\\n     assertEquals(\\\"flag a\\\", \\\"foo\\\", line.getOptionValue(\\\"a\\\"));\\r\\n     assertEquals(\\\"string flag a\\\", \\\"foo\\\", line.getOptionObject(\\\"a\\\"));\\r\\n     assertEquals(\\\"object flag b\\\", new Vector<Object>(), line.getOptionObject(\\\"b\\\"));\\r\\n     assertTrue(\\\"boolean true flag c\\\", line.hasOption(\\\"c\\\"));\\r\\n     assertFalse(\\\"boolean false flag d\\\", line.hasOption(\\\"d\\\"));\\r\\n     assertEquals(\\\"file flag e\\\", new File(\\\"build.xml\\\"), line.getOptionObject(\\\"e\\\"));\\r\\n     assertEquals(\\\"class flag f\\\", Calendar.class, line.getOptionObject(\\\"f\\\"));\\r\\n     assertEquals(\\\"number flag n\\\", new Double(4.5), line.getOptionObject(\\\"n\\\"));\\r\\n     assertEquals(\\\"url flag t\\\", new URL(\\\"http://commons.apache.org\\\"), line.getOptionObject(\\\"t\\\"));\\r\\n     assertEquals(\\\"flag a\\\", \\\"foo\\\", line.getOptionValue('a'));\\r\\n     assertEquals(\\\"string flag a\\\", \\\"foo\\\", line.getOptionObject('a'));\\r\\n     assertEquals(\\\"object flag b\\\", new Vector<Object>(), line.getOptionObject('b'));\\r\\n     assertTrue(\\\"boolean true flag c\\\", line.hasOption('c'));\\r\\n     assertFalse(\\\"boolean false flag d\\\", line.hasOption('d'));\\r\\n     assertEquals(\\\"file flag e\\\", new File(\\\"build.xml\\\"), line.getOptionObject('e'));\\r\\n     assertEquals(\\\"class flag f\\\", Calendar.class, line.getOptionObject('f'));\\r\\n     assertEquals(\\\"number flag n\\\", new Double(4.5), line.getOptionObject('n'));\\r\\n     assertEquals(\\\"url flag t\\\", new URL(\\\"http://commons.apache.org\\\"), line.getOptionObject('t'));\\r\\n     try {\\r\\n         assertEquals(\\\"files flag m\\\", new File[0], line.getOptionObject('m'));\\r\\n         fail(\\\"Multiple files are not supported yet, should have failed\\\");\\r\\n     } catch (UnsupportedOperationException uoe) {\\r\\n     }\\r\\n     try {\\r\\n         assertEquals(\\\"date flag z\\\", new Date(1023400137276L), line.getOptionObject('z'));\\r\\n         fail(\\\"Date is not supported yet, should have failed\\\");\\r\\n     } catch (UnsupportedOperationException uoe) {\\r\\n     }\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"sebb@apache.org","authorName":"Sebastian Bazley","commitYear":"2013","diff":"\"@@ -1,34 +1,34 @@\\n public void testSimplePattern() throws Exception {\\r\\n     Options options = PatternOptionBuilder.parsePattern(\\\"a:b@cde>f+n%t/m*z#\\\");\\r\\n     String[] args = new String[] { \\\"-c\\\", \\\"-a\\\", \\\"foo\\\", \\\"-b\\\", \\\"java.util.Vector\\\", \\\"-e\\\", \\\"build.xml\\\", \\\"-f\\\", \\\"java.util.Calendar\\\", \\\"-n\\\", \\\"4.5\\\", \\\"-t\\\", \\\"http://commons.apache.org\\\", \\\"-z\\\", \\\"Thu Jun 06 17:48:57 EDT 2002\\\", \\\"-m\\\", \\\"test*\\\" };\\r\\n     CommandLineParser parser = new PosixParser();\\r\\n     CommandLine line = parser.parse(options, args);\\r\\n     assertEquals(\\\"flag a\\\", \\\"foo\\\", line.getOptionValue(\\\"a\\\"));\\r\\n     assertEquals(\\\"string flag a\\\", \\\"foo\\\", line.getOptionObject(\\\"a\\\"));\\r\\n-    assertEquals(\\\"object flag b\\\", new Vector(), line.getOptionObject(\\\"b\\\"));\\r\\n+    assertEquals(\\\"object flag b\\\", new Vector<Object>(), line.getOptionObject(\\\"b\\\"));\\r\\n     assertTrue(\\\"boolean true flag c\\\", line.hasOption(\\\"c\\\"));\\r\\n     assertFalse(\\\"boolean false flag d\\\", line.hasOption(\\\"d\\\"));\\r\\n     assertEquals(\\\"file flag e\\\", new File(\\\"build.xml\\\"), line.getOptionObject(\\\"e\\\"));\\r\\n     assertEquals(\\\"class flag f\\\", Calendar.class, line.getOptionObject(\\\"f\\\"));\\r\\n     assertEquals(\\\"number flag n\\\", new Double(4.5), line.getOptionObject(\\\"n\\\"));\\r\\n     assertEquals(\\\"url flag t\\\", new URL(\\\"http://commons.apache.org\\\"), line.getOptionObject(\\\"t\\\"));\\r\\n     assertEquals(\\\"flag a\\\", \\\"foo\\\", line.getOptionValue('a'));\\r\\n     assertEquals(\\\"string flag a\\\", \\\"foo\\\", line.getOptionObject('a'));\\r\\n-    assertEquals(\\\"object flag b\\\", new Vector(), line.getOptionObject('b'));\\r\\n+    assertEquals(\\\"object flag b\\\", new Vector<Object>(), line.getOptionObject('b'));\\r\\n     assertTrue(\\\"boolean true flag c\\\", line.hasOption('c'));\\r\\n     assertFalse(\\\"boolean false flag d\\\", line.hasOption('d'));\\r\\n     assertEquals(\\\"file flag e\\\", new File(\\\"build.xml\\\"), line.getOptionObject('e'));\\r\\n     assertEquals(\\\"class flag f\\\", Calendar.class, line.getOptionObject('f'));\\r\\n     assertEquals(\\\"number flag n\\\", new Double(4.5), line.getOptionObject('n'));\\r\\n     assertEquals(\\\"url flag t\\\", new URL(\\\"http://commons.apache.org\\\"), line.getOptionObject('t'));\\r\\n     try {\\r\\n         assertEquals(\\\"files flag m\\\", new File[0], line.getOptionObject('m'));\\r\\n         fail(\\\"Multiple files are not supported yet, should have failed\\\");\\r\\n     } catch (UnsupportedOperationException uoe) {\\r\\n     }\\r\\n     try {\\r\\n         assertEquals(\\\"date flag z\\\", new Date(1023400137276L), line.getOptionObject('z'));\\r\\n         fail(\\\"Date is not supported yet, should have failed\\\");\\r\\n     } catch (UnsupportedOperationException uoe) {\\r\\n     }\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"bayard@apache.org","authorName":"Henri Yandell","commitYear":"2009","diff":"\"@@ -1,34 +1,34 @@\\n public void testSimplePattern() throws Exception {\\r\\n     Options options = PatternOptionBuilder.parsePattern(\\\"a:b@cde>f+n%t/m*z#\\\");\\r\\n     String[] args = new String[] { \\\"-c\\\", \\\"-a\\\", \\\"foo\\\", \\\"-b\\\", \\\"java.util.Vector\\\", \\\"-e\\\", \\\"build.xml\\\", \\\"-f\\\", \\\"java.util.Calendar\\\", \\\"-n\\\", \\\"4.5\\\", \\\"-t\\\", \\\"http://commons.apache.org\\\", \\\"-z\\\", \\\"Thu Jun 06 17:48:57 EDT 2002\\\", \\\"-m\\\", \\\"test*\\\" };\\r\\n     CommandLineParser parser = new PosixParser();\\r\\n     CommandLine line = parser.parse(options, args);\\r\\n     assertEquals(\\\"flag a\\\", \\\"foo\\\", line.getOptionValue(\\\"a\\\"));\\r\\n     assertEquals(\\\"string flag a\\\", \\\"foo\\\", line.getOptionObject(\\\"a\\\"));\\r\\n     assertEquals(\\\"object flag b\\\", new Vector(), line.getOptionObject(\\\"b\\\"));\\r\\n     assertTrue(\\\"boolean true flag c\\\", line.hasOption(\\\"c\\\"));\\r\\n     assertFalse(\\\"boolean false flag d\\\", line.hasOption(\\\"d\\\"));\\r\\n     assertEquals(\\\"file flag e\\\", new File(\\\"build.xml\\\"), line.getOptionObject(\\\"e\\\"));\\r\\n     assertEquals(\\\"class flag f\\\", Calendar.class, line.getOptionObject(\\\"f\\\"));\\r\\n     assertEquals(\\\"number flag n\\\", new Double(4.5), line.getOptionObject(\\\"n\\\"));\\r\\n     assertEquals(\\\"url flag t\\\", new URL(\\\"http://commons.apache.org\\\"), line.getOptionObject(\\\"t\\\"));\\r\\n     assertEquals(\\\"flag a\\\", \\\"foo\\\", line.getOptionValue('a'));\\r\\n     assertEquals(\\\"string flag a\\\", \\\"foo\\\", line.getOptionObject('a'));\\r\\n     assertEquals(\\\"object flag b\\\", new Vector(), line.getOptionObject('b'));\\r\\n     assertTrue(\\\"boolean true flag c\\\", line.hasOption('c'));\\r\\n     assertFalse(\\\"boolean false flag d\\\", line.hasOption('d'));\\r\\n     assertEquals(\\\"file flag e\\\", new File(\\\"build.xml\\\"), line.getOptionObject('e'));\\r\\n     assertEquals(\\\"class flag f\\\", Calendar.class, line.getOptionObject('f'));\\r\\n     assertEquals(\\\"number flag n\\\", new Double(4.5), line.getOptionObject('n'));\\r\\n     assertEquals(\\\"url flag t\\\", new URL(\\\"http://commons.apache.org\\\"), line.getOptionObject('t'));\\r\\n     try {\\r\\n         assertEquals(\\\"files flag m\\\", new File[0], line.getOptionObject('m'));\\r\\n         fail(\\\"Multiple files are not supported yet, should have failed\\\");\\r\\n     } catch (UnsupportedOperationException uoe) {\\r\\n     }\\r\\n     try {\\r\\n-        assertEquals(\\\"number flag z\\\", new Date(1023400137276L), line.getOptionObject('z'));\\r\\n+        assertEquals(\\\"date flag z\\\", new Date(1023400137276L), line.getOptionObject('z'));\\r\\n         fail(\\\"Date is not supported yet, should have failed\\\");\\r\\n     } catch (UnsupportedOperationException uoe) {\\r\\n     }\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"bayard@apache.org","authorName":"Henri Yandell","commitYear":"2009","diff":"\"@@ -1,24 +1,34 @@\\n public void testSimplePattern() throws Exception {\\r\\n-    Options options = PatternOptionBuilder.parsePattern(\\\"a:b@cde>f+n%t/\\\");\\r\\n-    String[] args = new String[] { \\\"-c\\\", \\\"-a\\\", \\\"foo\\\", \\\"-b\\\", \\\"java.util.Vector\\\", \\\"-e\\\", \\\"build.xml\\\", \\\"-f\\\", \\\"java.util.Calendar\\\", \\\"-n\\\", \\\"4.5\\\", \\\"-t\\\", \\\"http://commons.apache.org\\\" };\\r\\n+    Options options = PatternOptionBuilder.parsePattern(\\\"a:b@cde>f+n%t/m*z#\\\");\\r\\n+    String[] args = new String[] { \\\"-c\\\", \\\"-a\\\", \\\"foo\\\", \\\"-b\\\", \\\"java.util.Vector\\\", \\\"-e\\\", \\\"build.xml\\\", \\\"-f\\\", \\\"java.util.Calendar\\\", \\\"-n\\\", \\\"4.5\\\", \\\"-t\\\", \\\"http://commons.apache.org\\\", \\\"-z\\\", \\\"Thu Jun 06 17:48:57 EDT 2002\\\", \\\"-m\\\", \\\"test*\\\" };\\r\\n     CommandLineParser parser = new PosixParser();\\r\\n     CommandLine line = parser.parse(options, args);\\r\\n     assertEquals(\\\"flag a\\\", \\\"foo\\\", line.getOptionValue(\\\"a\\\"));\\r\\n     assertEquals(\\\"string flag a\\\", \\\"foo\\\", line.getOptionObject(\\\"a\\\"));\\r\\n     assertEquals(\\\"object flag b\\\", new Vector(), line.getOptionObject(\\\"b\\\"));\\r\\n     assertTrue(\\\"boolean true flag c\\\", line.hasOption(\\\"c\\\"));\\r\\n     assertFalse(\\\"boolean false flag d\\\", line.hasOption(\\\"d\\\"));\\r\\n     assertEquals(\\\"file flag e\\\", new File(\\\"build.xml\\\"), line.getOptionObject(\\\"e\\\"));\\r\\n     assertEquals(\\\"class flag f\\\", Calendar.class, line.getOptionObject(\\\"f\\\"));\\r\\n     assertEquals(\\\"number flag n\\\", new Double(4.5), line.getOptionObject(\\\"n\\\"));\\r\\n     assertEquals(\\\"url flag t\\\", new URL(\\\"http://commons.apache.org\\\"), line.getOptionObject(\\\"t\\\"));\\r\\n     assertEquals(\\\"flag a\\\", \\\"foo\\\", line.getOptionValue('a'));\\r\\n     assertEquals(\\\"string flag a\\\", \\\"foo\\\", line.getOptionObject('a'));\\r\\n     assertEquals(\\\"object flag b\\\", new Vector(), line.getOptionObject('b'));\\r\\n     assertTrue(\\\"boolean true flag c\\\", line.hasOption('c'));\\r\\n     assertFalse(\\\"boolean false flag d\\\", line.hasOption('d'));\\r\\n     assertEquals(\\\"file flag e\\\", new File(\\\"build.xml\\\"), line.getOptionObject('e'));\\r\\n     assertEquals(\\\"class flag f\\\", Calendar.class, line.getOptionObject('f'));\\r\\n     assertEquals(\\\"number flag n\\\", new Double(4.5), line.getOptionObject('n'));\\r\\n     assertEquals(\\\"url flag t\\\", new URL(\\\"http://commons.apache.org\\\"), line.getOptionObject('t'));\\r\\n+    try {\\r\\n+        assertEquals(\\\"files flag m\\\", new File[0], line.getOptionObject('m'));\\r\\n+        fail(\\\"Multiple files are not supported yet, should have failed\\\");\\r\\n+    } catch (UnsupportedOperationException uoe) {\\r\\n+    }\\r\\n+    try {\\r\\n+        assertEquals(\\\"number flag z\\\", new Date(1023400137276L), line.getOptionObject('z'));\\r\\n+        fail(\\\"Date is not supported yet, should have failed\\\");\\r\\n+    } catch (UnsupportedOperationException uoe) {\\r\\n+    }\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2008","diff":"\"@@ -1,24 +1,24 @@\\n public void testSimplePattern() throws Exception {\\r\\n     Options options = PatternOptionBuilder.parsePattern(\\\"a:b@cde>f+n%t/\\\");\\r\\n-    String[] args = new String[] { \\\"-c\\\", \\\"-a\\\", \\\"foo\\\", \\\"-b\\\", \\\"java.util.Vector\\\", \\\"-e\\\", \\\"build.xml\\\", \\\"-f\\\", \\\"java.util.Calendar\\\", \\\"-n\\\", \\\"4.5\\\", \\\"-t\\\", \\\"http://jakarta.apache.org/\\\" };\\r\\n+    String[] args = new String[] { \\\"-c\\\", \\\"-a\\\", \\\"foo\\\", \\\"-b\\\", \\\"java.util.Vector\\\", \\\"-e\\\", \\\"build.xml\\\", \\\"-f\\\", \\\"java.util.Calendar\\\", \\\"-n\\\", \\\"4.5\\\", \\\"-t\\\", \\\"http://commons.apache.org\\\" };\\r\\n     CommandLineParser parser = new PosixParser();\\r\\n     CommandLine line = parser.parse(options, args);\\r\\n     assertEquals(\\\"flag a\\\", \\\"foo\\\", line.getOptionValue(\\\"a\\\"));\\r\\n     assertEquals(\\\"string flag a\\\", \\\"foo\\\", line.getOptionObject(\\\"a\\\"));\\r\\n     assertEquals(\\\"object flag b\\\", new Vector(), line.getOptionObject(\\\"b\\\"));\\r\\n     assertTrue(\\\"boolean true flag c\\\", line.hasOption(\\\"c\\\"));\\r\\n     assertFalse(\\\"boolean false flag d\\\", line.hasOption(\\\"d\\\"));\\r\\n     assertEquals(\\\"file flag e\\\", new File(\\\"build.xml\\\"), line.getOptionObject(\\\"e\\\"));\\r\\n     assertEquals(\\\"class flag f\\\", Calendar.class, line.getOptionObject(\\\"f\\\"));\\r\\n     assertEquals(\\\"number flag n\\\", new Double(4.5), line.getOptionObject(\\\"n\\\"));\\r\\n-    assertEquals(\\\"url flag t\\\", new URL(\\\"http://jakarta.apache.org/\\\"), line.getOptionObject(\\\"t\\\"));\\r\\n+    assertEquals(\\\"url flag t\\\", new URL(\\\"http://commons.apache.org\\\"), line.getOptionObject(\\\"t\\\"));\\r\\n     assertEquals(\\\"flag a\\\", \\\"foo\\\", line.getOptionValue('a'));\\r\\n     assertEquals(\\\"string flag a\\\", \\\"foo\\\", line.getOptionObject('a'));\\r\\n     assertEquals(\\\"object flag b\\\", new Vector(), line.getOptionObject('b'));\\r\\n     assertTrue(\\\"boolean true flag c\\\", line.hasOption('c'));\\r\\n     assertFalse(\\\"boolean false flag d\\\", line.hasOption('d'));\\r\\n     assertEquals(\\\"file flag e\\\", new File(\\\"build.xml\\\"), line.getOptionObject('e'));\\r\\n     assertEquals(\\\"class flag f\\\", Calendar.class, line.getOptionObject('f'));\\r\\n     assertEquals(\\\"number flag n\\\", new Double(4.5), line.getOptionObject('n'));\\r\\n-    assertEquals(\\\"url flag t\\\", new URL(\\\"http://jakarta.apache.org/\\\"), line.getOptionObject('t'));\\r\\n+    assertEquals(\\\"url flag t\\\", new URL(\\\"http://commons.apache.org\\\"), line.getOptionObject('t'));\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2008","diff":"\"\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2008","diff":"\"@@ -1,24 +1,24 @@\\n public void testSimplePattern() throws Exception {\\r\\n     Options options = PatternOptionBuilder.parsePattern(\\\"a:b@cde>f+n%t/\\\");\\r\\n     String[] args = new String[] { \\\"-c\\\", \\\"-a\\\", \\\"foo\\\", \\\"-b\\\", \\\"java.util.Vector\\\", \\\"-e\\\", \\\"build.xml\\\", \\\"-f\\\", \\\"java.util.Calendar\\\", \\\"-n\\\", \\\"4.5\\\", \\\"-t\\\", \\\"http://jakarta.apache.org/\\\" };\\r\\n     CommandLineParser parser = new PosixParser();\\r\\n     CommandLine line = parser.parse(options, args);\\r\\n     assertEquals(\\\"flag a\\\", \\\"foo\\\", line.getOptionValue(\\\"a\\\"));\\r\\n     assertEquals(\\\"string flag a\\\", \\\"foo\\\", line.getOptionObject(\\\"a\\\"));\\r\\n-    assertEquals(\\\"object flag b\\\", new java.util.Vector(), line.getOptionObject(\\\"b\\\"));\\r\\n+    assertEquals(\\\"object flag b\\\", new Vector(), line.getOptionObject(\\\"b\\\"));\\r\\n     assertTrue(\\\"boolean true flag c\\\", line.hasOption(\\\"c\\\"));\\r\\n     assertFalse(\\\"boolean false flag d\\\", line.hasOption(\\\"d\\\"));\\r\\n-    assertEquals(\\\"file flag e\\\", new java.io.File(\\\"build.xml\\\"), line.getOptionObject(\\\"e\\\"));\\r\\n-    assertEquals(\\\"class flag f\\\", java.util.Calendar.class, line.getOptionObject(\\\"f\\\"));\\r\\n+    assertEquals(\\\"file flag e\\\", new File(\\\"build.xml\\\"), line.getOptionObject(\\\"e\\\"));\\r\\n+    assertEquals(\\\"class flag f\\\", Calendar.class, line.getOptionObject(\\\"f\\\"));\\r\\n     assertEquals(\\\"number flag n\\\", new Double(4.5), line.getOptionObject(\\\"n\\\"));\\r\\n-    assertEquals(\\\"url flag t\\\", new java.net.URL(\\\"http://jakarta.apache.org/\\\"), line.getOptionObject(\\\"t\\\"));\\r\\n+    assertEquals(\\\"url flag t\\\", new URL(\\\"http://jakarta.apache.org/\\\"), line.getOptionObject(\\\"t\\\"));\\r\\n     assertEquals(\\\"flag a\\\", \\\"foo\\\", line.getOptionValue('a'));\\r\\n     assertEquals(\\\"string flag a\\\", \\\"foo\\\", line.getOptionObject('a'));\\r\\n-    assertEquals(\\\"object flag b\\\", new java.util.Vector(), line.getOptionObject('b'));\\r\\n+    assertEquals(\\\"object flag b\\\", new Vector(), line.getOptionObject('b'));\\r\\n     assertTrue(\\\"boolean true flag c\\\", line.hasOption('c'));\\r\\n     assertFalse(\\\"boolean false flag d\\\", line.hasOption('d'));\\r\\n-    assertEquals(\\\"file flag e\\\", new java.io.File(\\\"build.xml\\\"), line.getOptionObject('e'));\\r\\n-    assertEquals(\\\"class flag f\\\", java.util.Calendar.class, line.getOptionObject('f'));\\r\\n+    assertEquals(\\\"file flag e\\\", new File(\\\"build.xml\\\"), line.getOptionObject('e'));\\r\\n+    assertEquals(\\\"class flag f\\\", Calendar.class, line.getOptionObject('f'));\\r\\n     assertEquals(\\\"number flag n\\\", new Double(4.5), line.getOptionObject('n'));\\r\\n-    assertEquals(\\\"url flag t\\\", new java.net.URL(\\\"http://jakarta.apache.org/\\\"), line.getOptionObject('t'));\\r\\n+    assertEquals(\\\"url flag t\\\", new URL(\\\"http://jakarta.apache.org/\\\"), line.getOptionObject('t'));\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2008","diff":"\"@@ -1,30 +1,24 @@\\n-public void testSimplePattern() {\\r\\n-    try {\\r\\n-        Options options = PatternOptionBuilder.parsePattern(\\\"a:b@cde>f+n%t/\\\");\\r\\n-        String[] args = new String[] { \\\"-c\\\", \\\"-a\\\", \\\"foo\\\", \\\"-b\\\", \\\"java.util.Vector\\\", \\\"-e\\\", \\\"build.xml\\\", \\\"-f\\\", \\\"java.util.Calendar\\\", \\\"-n\\\", \\\"4.5\\\", \\\"-t\\\", \\\"http://jakarta.apache.org/\\\" };\\r\\n-        CommandLineParser parser = new PosixParser();\\r\\n-        CommandLine line = parser.parse(options, args);\\r\\n-        assertEquals(\\\"flag a\\\", \\\"foo\\\", line.getOptionValue(\\\"a\\\"));\\r\\n-        assertEquals(\\\"string flag a\\\", \\\"foo\\\", line.getOptionObject(\\\"a\\\"));\\r\\n-        assertEquals(\\\"object flag b\\\", new java.util.Vector(), line.getOptionObject(\\\"b\\\"));\\r\\n-        assertTrue(\\\"boolean true flag c\\\", line.hasOption(\\\"c\\\"));\\r\\n-        assertFalse(\\\"boolean false flag d\\\", line.hasOption(\\\"d\\\"));\\r\\n-        assertEquals(\\\"file flag e\\\", new java.io.File(\\\"build.xml\\\"), line.getOptionObject(\\\"e\\\"));\\r\\n-        assertEquals(\\\"class flag f\\\", java.util.Calendar.class, line.getOptionObject(\\\"f\\\"));\\r\\n-        assertEquals(\\\"number flag n\\\", new Double(4.5), line.getOptionObject(\\\"n\\\"));\\r\\n-        assertEquals(\\\"url flag t\\\", new java.net.URL(\\\"http://jakarta.apache.org/\\\"), line.getOptionObject(\\\"t\\\"));\\r\\n-        assertEquals(\\\"flag a\\\", \\\"foo\\\", line.getOptionValue('a'));\\r\\n-        assertEquals(\\\"string flag a\\\", \\\"foo\\\", line.getOptionObject('a'));\\r\\n-        assertEquals(\\\"object flag b\\\", new java.util.Vector(), line.getOptionObject('b'));\\r\\n-        assertTrue(\\\"boolean true flag c\\\", line.hasOption('c'));\\r\\n-        assertFalse(\\\"boolean false flag d\\\", line.hasOption('d'));\\r\\n-        assertEquals(\\\"file flag e\\\", new java.io.File(\\\"build.xml\\\"), line.getOptionObject('e'));\\r\\n-        assertEquals(\\\"class flag f\\\", java.util.Calendar.class, line.getOptionObject('f'));\\r\\n-        assertEquals(\\\"number flag n\\\", new Double(4.5), line.getOptionObject('n'));\\r\\n-        assertEquals(\\\"url flag t\\\", new java.net.URL(\\\"http://jakarta.apache.org/\\\"), line.getOptionObject('t'));\\r\\n-    } catch (ParseException exp) {\\r\\n-        fail(exp.getMessage());\\r\\n-    } catch (java.net.MalformedURLException exp) {\\r\\n-        fail(exp.getMessage());\\r\\n-    }\\r\\n+public void testSimplePattern() throws Exception {\\r\\n+    Options options = PatternOptionBuilder.parsePattern(\\\"a:b@cde>f+n%t/\\\");\\r\\n+    String[] args = new String[] { \\\"-c\\\", \\\"-a\\\", \\\"foo\\\", \\\"-b\\\", \\\"java.util.Vector\\\", \\\"-e\\\", \\\"build.xml\\\", \\\"-f\\\", \\\"java.util.Calendar\\\", \\\"-n\\\", \\\"4.5\\\", \\\"-t\\\", \\\"http://jakarta.apache.org/\\\" };\\r\\n+    CommandLineParser parser = new PosixParser();\\r\\n+    CommandLine line = parser.parse(options, args);\\r\\n+    assertEquals(\\\"flag a\\\", \\\"foo\\\", line.getOptionValue(\\\"a\\\"));\\r\\n+    assertEquals(\\\"string flag a\\\", \\\"foo\\\", line.getOptionObject(\\\"a\\\"));\\r\\n+    assertEquals(\\\"object flag b\\\", new java.util.Vector(), line.getOptionObject(\\\"b\\\"));\\r\\n+    assertTrue(\\\"boolean true flag c\\\", line.hasOption(\\\"c\\\"));\\r\\n+    assertFalse(\\\"boolean false flag d\\\", line.hasOption(\\\"d\\\"));\\r\\n+    assertEquals(\\\"file flag e\\\", new java.io.File(\\\"build.xml\\\"), line.getOptionObject(\\\"e\\\"));\\r\\n+    assertEquals(\\\"class flag f\\\", java.util.Calendar.class, line.getOptionObject(\\\"f\\\"));\\r\\n+    assertEquals(\\\"number flag n\\\", new Double(4.5), line.getOptionObject(\\\"n\\\"));\\r\\n+    assertEquals(\\\"url flag t\\\", new java.net.URL(\\\"http://jakarta.apache.org/\\\"), line.getOptionObject(\\\"t\\\"));\\r\\n+    assertEquals(\\\"flag a\\\", \\\"foo\\\", line.getOptionValue('a'));\\r\\n+    assertEquals(\\\"string flag a\\\", \\\"foo\\\", line.getOptionObject('a'));\\r\\n+    assertEquals(\\\"object flag b\\\", new java.util.Vector(), line.getOptionObject('b'));\\r\\n+    assertTrue(\\\"boolean true flag c\\\", line.hasOption('c'));\\r\\n+    assertFalse(\\\"boolean false flag d\\\", line.hasOption('d'));\\r\\n+    assertEquals(\\\"file flag e\\\", new java.io.File(\\\"build.xml\\\"), line.getOptionObject('e'));\\r\\n+    assertEquals(\\\"class flag f\\\", java.util.Calendar.class, line.getOptionObject('f'));\\r\\n+    assertEquals(\\\"number flag n\\\", new Double(4.5), line.getOptionObject('n'));\\r\\n+    assertEquals(\\\"url flag t\\\", new java.net.URL(\\\"http://jakarta.apache.org/\\\"), line.getOptionObject('t'));\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"bayard@apache.org","authorName":"Henri Yandell","commitYear":"2007","diff":"\"@@ -1,30 +1,30 @@\\n public void testSimplePattern() {\\r\\n     try {\\r\\n         Options options = PatternOptionBuilder.parsePattern(\\\"a:b@cde>f+n%t/\\\");\\r\\n         String[] args = new String[] { \\\"-c\\\", \\\"-a\\\", \\\"foo\\\", \\\"-b\\\", \\\"java.util.Vector\\\", \\\"-e\\\", \\\"build.xml\\\", \\\"-f\\\", \\\"java.util.Calendar\\\", \\\"-n\\\", \\\"4.5\\\", \\\"-t\\\", \\\"http://jakarta.apache.org/\\\" };\\r\\n         CommandLineParser parser = new PosixParser();\\r\\n         CommandLine line = parser.parse(options, args);\\r\\n         assertEquals(\\\"flag a\\\", \\\"foo\\\", line.getOptionValue(\\\"a\\\"));\\r\\n-        assertEquals(\\\"flag a\\\", \\\"foo\\\", line.getOptionValue('a'));\\r\\n         assertEquals(\\\"string flag a\\\", \\\"foo\\\", line.getOptionObject(\\\"a\\\"));\\r\\n-        assertEquals(\\\"string flag a\\\", \\\"foo\\\", line.getOptionObject('a'));\\r\\n         assertEquals(\\\"object flag b\\\", new java.util.Vector(), line.getOptionObject(\\\"b\\\"));\\r\\n-        assertEquals(\\\"object flag b\\\", new java.util.Vector(), line.getOptionObject('b'));\\r\\n-        assertEquals(\\\"boolean true flag c\\\", true, line.hasOption(\\\"c\\\"));\\r\\n-        assertEquals(\\\"boolean true flag c\\\", true, line.hasOption('c'));\\r\\n-        assertEquals(\\\"boolean false flag d\\\", false, line.hasOption(\\\"d\\\"));\\r\\n-        assertEquals(\\\"boolean false flag d\\\", false, line.hasOption('d'));\\r\\n+        assertTrue(\\\"boolean true flag c\\\", line.hasOption(\\\"c\\\"));\\r\\n+        assertFalse(\\\"boolean false flag d\\\", line.hasOption(\\\"d\\\"));\\r\\n         assertEquals(\\\"file flag e\\\", new java.io.File(\\\"build.xml\\\"), line.getOptionObject(\\\"e\\\"));\\r\\n-        assertEquals(\\\"file flag e\\\", new java.io.File(\\\"build.xml\\\"), line.getOptionObject('e'));\\r\\n         assertEquals(\\\"class flag f\\\", java.util.Calendar.class, line.getOptionObject(\\\"f\\\"));\\r\\n-        assertEquals(\\\"class flag f\\\", java.util.Calendar.class, line.getOptionObject('f'));\\r\\n         assertEquals(\\\"number flag n\\\", new Double(4.5), line.getOptionObject(\\\"n\\\"));\\r\\n-        assertEquals(\\\"number flag n\\\", new Double(4.5), line.getOptionObject('n'));\\r\\n         assertEquals(\\\"url flag t\\\", new java.net.URL(\\\"http://jakarta.apache.org/\\\"), line.getOptionObject(\\\"t\\\"));\\r\\n+        assertEquals(\\\"flag a\\\", \\\"foo\\\", line.getOptionValue('a'));\\r\\n+        assertEquals(\\\"string flag a\\\", \\\"foo\\\", line.getOptionObject('a'));\\r\\n+        assertEquals(\\\"object flag b\\\", new java.util.Vector(), line.getOptionObject('b'));\\r\\n+        assertTrue(\\\"boolean true flag c\\\", line.hasOption('c'));\\r\\n+        assertFalse(\\\"boolean false flag d\\\", line.hasOption('d'));\\r\\n+        assertEquals(\\\"file flag e\\\", new java.io.File(\\\"build.xml\\\"), line.getOptionObject('e'));\\r\\n+        assertEquals(\\\"class flag f\\\", java.util.Calendar.class, line.getOptionObject('f'));\\r\\n+        assertEquals(\\\"number flag n\\\", new Double(4.5), line.getOptionObject('n'));\\r\\n         assertEquals(\\\"url flag t\\\", new java.net.URL(\\\"http://jakarta.apache.org/\\\"), line.getOptionObject('t'));\\r\\n     } catch (ParseException exp) {\\r\\n         fail(exp.getMessage());\\r\\n     } catch (java.net.MalformedURLException exp) {\\r\\n         fail(exp.getMessage());\\r\\n     }\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"bayard@apache.org","authorName":"Henri Yandell","commitYear":"2007","diff":"\"@@ -1,30 +1,30 @@\\n public void testSimplePattern() {\\r\\n     try {\\r\\n         Options options = PatternOptionBuilder.parsePattern(\\\"a:b@cde>f+n%t/\\\");\\r\\n         String[] args = new String[] { \\\"-c\\\", \\\"-a\\\", \\\"foo\\\", \\\"-b\\\", \\\"java.util.Vector\\\", \\\"-e\\\", \\\"build.xml\\\", \\\"-f\\\", \\\"java.util.Calendar\\\", \\\"-n\\\", \\\"4.5\\\", \\\"-t\\\", \\\"http://jakarta.apache.org/\\\" };\\r\\n         CommandLineParser parser = new PosixParser();\\r\\n         CommandLine line = parser.parse(options, args);\\r\\n         assertEquals(\\\"flag a\\\", \\\"foo\\\", line.getOptionValue(\\\"a\\\"));\\r\\n         assertEquals(\\\"flag a\\\", \\\"foo\\\", line.getOptionValue('a'));\\r\\n         assertEquals(\\\"string flag a\\\", \\\"foo\\\", line.getOptionObject(\\\"a\\\"));\\r\\n         assertEquals(\\\"string flag a\\\", \\\"foo\\\", line.getOptionObject('a'));\\r\\n         assertEquals(\\\"object flag b\\\", new java.util.Vector(), line.getOptionObject(\\\"b\\\"));\\r\\n         assertEquals(\\\"object flag b\\\", new java.util.Vector(), line.getOptionObject('b'));\\r\\n         assertEquals(\\\"boolean true flag c\\\", true, line.hasOption(\\\"c\\\"));\\r\\n         assertEquals(\\\"boolean true flag c\\\", true, line.hasOption('c'));\\r\\n         assertEquals(\\\"boolean false flag d\\\", false, line.hasOption(\\\"d\\\"));\\r\\n         assertEquals(\\\"boolean false flag d\\\", false, line.hasOption('d'));\\r\\n         assertEquals(\\\"file flag e\\\", new java.io.File(\\\"build.xml\\\"), line.getOptionObject(\\\"e\\\"));\\r\\n         assertEquals(\\\"file flag e\\\", new java.io.File(\\\"build.xml\\\"), line.getOptionObject('e'));\\r\\n         assertEquals(\\\"class flag f\\\", java.util.Calendar.class, line.getOptionObject(\\\"f\\\"));\\r\\n         assertEquals(\\\"class flag f\\\", java.util.Calendar.class, line.getOptionObject('f'));\\r\\n-        assertEquals(\\\"number flag n\\\", new Float(4.5), line.getOptionObject(\\\"n\\\"));\\r\\n-        assertEquals(\\\"number flag n\\\", new Float(4.5), line.getOptionObject('n'));\\r\\n+        assertEquals(\\\"number flag n\\\", new Double(4.5), line.getOptionObject(\\\"n\\\"));\\r\\n+        assertEquals(\\\"number flag n\\\", new Double(4.5), line.getOptionObject('n'));\\r\\n         assertEquals(\\\"url flag t\\\", new java.net.URL(\\\"http://jakarta.apache.org/\\\"), line.getOptionObject(\\\"t\\\"));\\r\\n         assertEquals(\\\"url flag t\\\", new java.net.URL(\\\"http://jakarta.apache.org/\\\"), line.getOptionObject('t'));\\r\\n     } catch (ParseException exp) {\\r\\n         fail(exp.getMessage());\\r\\n     } catch (java.net.MalformedURLException exp) {\\r\\n         fail(exp.getMessage());\\r\\n     }\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -1,30 +1,30 @@\\n public void testSimplePattern() {\\r\\n     try {\\r\\n         Options options = PatternOptionBuilder.parsePattern(\\\"a:b@cde>f+n%t/\\\");\\r\\n         String[] args = new String[] { \\\"-c\\\", \\\"-a\\\", \\\"foo\\\", \\\"-b\\\", \\\"java.util.Vector\\\", \\\"-e\\\", \\\"build.xml\\\", \\\"-f\\\", \\\"java.util.Calendar\\\", \\\"-n\\\", \\\"4.5\\\", \\\"-t\\\", \\\"http://jakarta.apache.org/\\\" };\\r\\n-        CommandLineParser parser = CommandLineParserFactory.newParser();\\r\\n+        CommandLineParser parser = new PosixParser();\\r\\n         CommandLine line = parser.parse(options, args);\\r\\n         assertEquals(\\\"flag a\\\", \\\"foo\\\", line.getOptionValue(\\\"a\\\"));\\r\\n         assertEquals(\\\"flag a\\\", \\\"foo\\\", line.getOptionValue('a'));\\r\\n         assertEquals(\\\"string flag a\\\", \\\"foo\\\", line.getOptionObject(\\\"a\\\"));\\r\\n         assertEquals(\\\"string flag a\\\", \\\"foo\\\", line.getOptionObject('a'));\\r\\n         assertEquals(\\\"object flag b\\\", new java.util.Vector(), line.getOptionObject(\\\"b\\\"));\\r\\n         assertEquals(\\\"object flag b\\\", new java.util.Vector(), line.getOptionObject('b'));\\r\\n         assertEquals(\\\"boolean true flag c\\\", true, line.hasOption(\\\"c\\\"));\\r\\n         assertEquals(\\\"boolean true flag c\\\", true, line.hasOption('c'));\\r\\n         assertEquals(\\\"boolean false flag d\\\", false, line.hasOption(\\\"d\\\"));\\r\\n         assertEquals(\\\"boolean false flag d\\\", false, line.hasOption('d'));\\r\\n         assertEquals(\\\"file flag e\\\", new java.io.File(\\\"build.xml\\\"), line.getOptionObject(\\\"e\\\"));\\r\\n         assertEquals(\\\"file flag e\\\", new java.io.File(\\\"build.xml\\\"), line.getOptionObject('e'));\\r\\n         assertEquals(\\\"class flag f\\\", java.util.Calendar.class, line.getOptionObject(\\\"f\\\"));\\r\\n         assertEquals(\\\"class flag f\\\", java.util.Calendar.class, line.getOptionObject('f'));\\r\\n         assertEquals(\\\"number flag n\\\", new Float(4.5), line.getOptionObject(\\\"n\\\"));\\r\\n         assertEquals(\\\"number flag n\\\", new Float(4.5), line.getOptionObject('n'));\\r\\n         assertEquals(\\\"url flag t\\\", new java.net.URL(\\\"http://jakarta.apache.org/\\\"), line.getOptionObject(\\\"t\\\"));\\r\\n         assertEquals(\\\"url flag t\\\", new java.net.URL(\\\"http://jakarta.apache.org/\\\"), line.getOptionObject('t'));\\r\\n     } catch (ParseException exp) {\\r\\n         fail(exp.getMessage());\\r\\n     } catch (java.net.MalformedURLException exp) {\\r\\n         fail(exp.getMessage());\\r\\n     }\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -1,21 +1,30 @@\\n public void testSimplePattern() {\\r\\n     try {\\r\\n         Options options = PatternOptionBuilder.parsePattern(\\\"a:b@cde>f+n%t/\\\");\\r\\n         String[] args = new String[] { \\\"-c\\\", \\\"-a\\\", \\\"foo\\\", \\\"-b\\\", \\\"java.util.Vector\\\", \\\"-e\\\", \\\"build.xml\\\", \\\"-f\\\", \\\"java.util.Calendar\\\", \\\"-n\\\", \\\"4.5\\\", \\\"-t\\\", \\\"http://jakarta.apache.org/\\\" };\\r\\n         CommandLineParser parser = CommandLineParserFactory.newParser();\\r\\n         CommandLine line = parser.parse(options, args);\\r\\n         assertEquals(\\\"flag a\\\", \\\"foo\\\", line.getOptionValue(\\\"a\\\"));\\r\\n+        assertEquals(\\\"flag a\\\", \\\"foo\\\", line.getOptionValue('a'));\\r\\n         assertEquals(\\\"string flag a\\\", \\\"foo\\\", line.getOptionObject(\\\"a\\\"));\\r\\n+        assertEquals(\\\"string flag a\\\", \\\"foo\\\", line.getOptionObject('a'));\\r\\n         assertEquals(\\\"object flag b\\\", new java.util.Vector(), line.getOptionObject(\\\"b\\\"));\\r\\n+        assertEquals(\\\"object flag b\\\", new java.util.Vector(), line.getOptionObject('b'));\\r\\n         assertEquals(\\\"boolean true flag c\\\", true, line.hasOption(\\\"c\\\"));\\r\\n+        assertEquals(\\\"boolean true flag c\\\", true, line.hasOption('c'));\\r\\n         assertEquals(\\\"boolean false flag d\\\", false, line.hasOption(\\\"d\\\"));\\r\\n+        assertEquals(\\\"boolean false flag d\\\", false, line.hasOption('d'));\\r\\n         assertEquals(\\\"file flag e\\\", new java.io.File(\\\"build.xml\\\"), line.getOptionObject(\\\"e\\\"));\\r\\n+        assertEquals(\\\"file flag e\\\", new java.io.File(\\\"build.xml\\\"), line.getOptionObject('e'));\\r\\n         assertEquals(\\\"class flag f\\\", java.util.Calendar.class, line.getOptionObject(\\\"f\\\"));\\r\\n+        assertEquals(\\\"class flag f\\\", java.util.Calendar.class, line.getOptionObject('f'));\\r\\n         assertEquals(\\\"number flag n\\\", new Float(4.5), line.getOptionObject(\\\"n\\\"));\\r\\n+        assertEquals(\\\"number flag n\\\", new Float(4.5), line.getOptionObject('n'));\\r\\n         assertEquals(\\\"url flag t\\\", new java.net.URL(\\\"http://jakarta.apache.org/\\\"), line.getOptionObject(\\\"t\\\"));\\r\\n+        assertEquals(\\\"url flag t\\\", new java.net.URL(\\\"http://jakarta.apache.org/\\\"), line.getOptionObject('t'));\\r\\n     } catch (ParseException exp) {\\r\\n         fail(exp.getMessage());\\r\\n     } catch (java.net.MalformedURLException exp) {\\r\\n         fail(exp.getMessage());\\r\\n     }\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -1,15 +1,21 @@\\n-public void testSimplePattern() throws Exception {\\r\\n-    Options options = PatternOptionBuilder.parsePattern(\\\"a:b@cde>f+n%t/\\\");\\r\\n-    String[] args = new String[] { \\\"-c\\\", \\\"-a\\\", \\\"foo\\\", \\\"-b\\\", \\\"java.util.Vector\\\", \\\"-e\\\", \\\"build.xml\\\", \\\"-f\\\", \\\"java.util.Calendar\\\", \\\"-n\\\", \\\"4.5\\\", \\\"-t\\\", \\\"http://jakarta.apache.org/\\\" };\\r\\n-    CommandLineParser parser = CommandLineParserFactory.newParser();\\r\\n-    CommandLine line = parser.parse(options, args);\\r\\n-    assertEquals(\\\"flag a\\\", \\\"foo\\\", line.getOptionValue(\\\"a\\\"));\\r\\n-    assertEquals(\\\"string flag a\\\", \\\"foo\\\", line.getOptionObject(\\\"a\\\"));\\r\\n-    assertEquals(\\\"object flag b\\\", new java.util.Vector(), line.getOptionObject(\\\"b\\\"));\\r\\n-    assertEquals(\\\"boolean true flag c\\\", true, line.hasOption(\\\"c\\\"));\\r\\n-    assertEquals(\\\"boolean false flag d\\\", false, line.hasOption(\\\"d\\\"));\\r\\n-    assertEquals(\\\"file flag e\\\", new java.io.File(\\\"build.xml\\\"), line.getOptionObject(\\\"e\\\"));\\r\\n-    assertEquals(\\\"class flag f\\\", java.util.Calendar.class, line.getOptionObject(\\\"f\\\"));\\r\\n-    assertEquals(\\\"number flag n\\\", new Float(4.5), line.getOptionObject(\\\"n\\\"));\\r\\n-    assertEquals(\\\"url flag t\\\", new java.net.URL(\\\"http://jakarta.apache.org/\\\"), line.getOptionObject(\\\"t\\\"));\\r\\n+public void testSimplePattern() {\\r\\n+    try {\\r\\n+        Options options = PatternOptionBuilder.parsePattern(\\\"a:b@cde>f+n%t/\\\");\\r\\n+        String[] args = new String[] { \\\"-c\\\", \\\"-a\\\", \\\"foo\\\", \\\"-b\\\", \\\"java.util.Vector\\\", \\\"-e\\\", \\\"build.xml\\\", \\\"-f\\\", \\\"java.util.Calendar\\\", \\\"-n\\\", \\\"4.5\\\", \\\"-t\\\", \\\"http://jakarta.apache.org/\\\" };\\r\\n+        CommandLineParser parser = CommandLineParserFactory.newParser();\\r\\n+        CommandLine line = parser.parse(options, args);\\r\\n+        assertEquals(\\\"flag a\\\", \\\"foo\\\", line.getOptionValue(\\\"a\\\"));\\r\\n+        assertEquals(\\\"string flag a\\\", \\\"foo\\\", line.getOptionObject(\\\"a\\\"));\\r\\n+        assertEquals(\\\"object flag b\\\", new java.util.Vector(), line.getOptionObject(\\\"b\\\"));\\r\\n+        assertEquals(\\\"boolean true flag c\\\", true, line.hasOption(\\\"c\\\"));\\r\\n+        assertEquals(\\\"boolean false flag d\\\", false, line.hasOption(\\\"d\\\"));\\r\\n+        assertEquals(\\\"file flag e\\\", new java.io.File(\\\"build.xml\\\"), line.getOptionObject(\\\"e\\\"));\\r\\n+        assertEquals(\\\"class flag f\\\", java.util.Calendar.class, line.getOptionObject(\\\"f\\\"));\\r\\n+        assertEquals(\\\"number flag n\\\", new Float(4.5), line.getOptionObject(\\\"n\\\"));\\r\\n+        assertEquals(\\\"url flag t\\\", new java.net.URL(\\\"http://jakarta.apache.org/\\\"), line.getOptionObject(\\\"t\\\"));\\r\\n+    } catch (ParseException exp) {\\r\\n+        fail(exp.getMessage());\\r\\n+    } catch (java.net.MalformedURLException exp) {\\r\\n+        fail(exp.getMessage());\\r\\n+    }\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -1,14 +1,15 @@\\n public void testSimplePattern() throws Exception {\\r\\n     Options options = PatternOptionBuilder.parsePattern(\\\"a:b@cde>f+n%t/\\\");\\r\\n     String[] args = new String[] { \\\"-c\\\", \\\"-a\\\", \\\"foo\\\", \\\"-b\\\", \\\"java.util.Vector\\\", \\\"-e\\\", \\\"build.xml\\\", \\\"-f\\\", \\\"java.util.Calendar\\\", \\\"-n\\\", \\\"4.5\\\", \\\"-t\\\", \\\"http://jakarta.apache.org/\\\" };\\r\\n-    CommandLine line = options.parse(args);\\r\\n+    CommandLineParser parser = CommandLineParserFactory.newParser();\\r\\n+    CommandLine line = parser.parse(options, args);\\r\\n     assertEquals(\\\"flag a\\\", \\\"foo\\\", line.getOptionValue(\\\"a\\\"));\\r\\n     assertEquals(\\\"string flag a\\\", \\\"foo\\\", line.getOptionObject(\\\"a\\\"));\\r\\n     assertEquals(\\\"object flag b\\\", new java.util.Vector(), line.getOptionObject(\\\"b\\\"));\\r\\n     assertEquals(\\\"boolean true flag c\\\", true, line.hasOption(\\\"c\\\"));\\r\\n     assertEquals(\\\"boolean false flag d\\\", false, line.hasOption(\\\"d\\\"));\\r\\n     assertEquals(\\\"file flag e\\\", new java.io.File(\\\"build.xml\\\"), line.getOptionObject(\\\"e\\\"));\\r\\n     assertEquals(\\\"class flag f\\\", java.util.Calendar.class, line.getOptionObject(\\\"f\\\"));\\r\\n     assertEquals(\\\"number flag n\\\", new Float(4.5), line.getOptionObject(\\\"n\\\"));\\r\\n     assertEquals(\\\"url flag t\\\", new java.net.URL(\\\"http://jakarta.apache.org/\\\"), line.getOptionObject(\\\"t\\\"));\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -1,14 +1,14 @@\\n public void testSimplePattern() throws Exception {\\r\\n     Options options = PatternOptionBuilder.parsePattern(\\\"a:b@cde>f+n%t/\\\");\\r\\n     String[] args = new String[] { \\\"-c\\\", \\\"-a\\\", \\\"foo\\\", \\\"-b\\\", \\\"java.util.Vector\\\", \\\"-e\\\", \\\"build.xml\\\", \\\"-f\\\", \\\"java.util.Calendar\\\", \\\"-n\\\", \\\"4.5\\\", \\\"-t\\\", \\\"http://jakarta.apache.org/\\\" };\\r\\n     CommandLine line = options.parse(args);\\r\\n-    assertEquals(\\\"flag a\\\", \\\"foo\\\", line.getOptionValue('a'));\\r\\n-    assertEquals(\\\"string flag a\\\", \\\"foo\\\", line.getOptionObject('a'));\\r\\n-    assertEquals(\\\"object flag b\\\", new java.util.Vector(), line.getOptionObject('b'));\\r\\n-    assertEquals(\\\"boolean true flag c\\\", true, line.hasOption('c'));\\r\\n-    assertEquals(\\\"boolean false flag d\\\", false, line.hasOption('d'));\\r\\n-    assertEquals(\\\"file flag e\\\", new java.io.File(\\\"build.xml\\\"), line.getOptionObject('e'));\\r\\n-    assertEquals(\\\"class flag f\\\", java.util.Calendar.class, line.getOptionObject('f'));\\r\\n-    assertEquals(\\\"number flag n\\\", new Float(4.5), line.getOptionObject('n'));\\r\\n-    assertEquals(\\\"url flag t\\\", new java.net.URL(\\\"http://jakarta.apache.org/\\\"), line.getOptionObject('t'));\\r\\n+    assertEquals(\\\"flag a\\\", \\\"foo\\\", line.getOptionValue(\\\"a\\\"));\\r\\n+    assertEquals(\\\"string flag a\\\", \\\"foo\\\", line.getOptionObject(\\\"a\\\"));\\r\\n+    assertEquals(\\\"object flag b\\\", new java.util.Vector(), line.getOptionObject(\\\"b\\\"));\\r\\n+    assertEquals(\\\"boolean true flag c\\\", true, line.hasOption(\\\"c\\\"));\\r\\n+    assertEquals(\\\"boolean false flag d\\\", false, line.hasOption(\\\"d\\\"));\\r\\n+    assertEquals(\\\"file flag e\\\", new java.io.File(\\\"build.xml\\\"), line.getOptionObject(\\\"e\\\"));\\r\\n+    assertEquals(\\\"class flag f\\\", java.util.Calendar.class, line.getOptionObject(\\\"f\\\"));\\r\\n+    assertEquals(\\\"number flag n\\\", new Float(4.5), line.getOptionObject(\\\"n\\\"));\\r\\n+    assertEquals(\\\"url flag t\\\", new java.net.URL(\\\"http://jakarta.apache.org/\\\"), line.getOptionObject(\\\"t\\\"));\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jstrachan@apache.org","authorName":"James Strachan","commitYear":"2002","diff":"\"@@ -0,0 +1,14 @@\\n+public void testSimplePattern() throws Exception {\\r\\n+    Options options = PatternOptionBuilder.parsePattern(\\\"a:b@cde>f+n%t/\\\");\\r\\n+    String[] args = new String[] { \\\"-c\\\", \\\"-a\\\", \\\"foo\\\", \\\"-b\\\", \\\"java.util.Vector\\\", \\\"-e\\\", \\\"build.xml\\\", \\\"-f\\\", \\\"java.util.Calendar\\\", \\\"-n\\\", \\\"4.5\\\", \\\"-t\\\", \\\"http://jakarta.apache.org/\\\" };\\r\\n+    CommandLine line = options.parse(args);\\r\\n+    assertEquals(\\\"flag a\\\", \\\"foo\\\", line.getOptionValue('a'));\\r\\n+    assertEquals(\\\"string flag a\\\", \\\"foo\\\", line.getOptionObject('a'));\\r\\n+    assertEquals(\\\"object flag b\\\", new java.util.Vector(), line.getOptionObject('b'));\\r\\n+    assertEquals(\\\"boolean true flag c\\\", true, line.hasOption('c'));\\r\\n+    assertEquals(\\\"boolean false flag d\\\", false, line.hasOption('d'));\\r\\n+    assertEquals(\\\"file flag e\\\", new java.io.File(\\\"build.xml\\\"), line.getOptionObject('e'));\\r\\n+    assertEquals(\\\"class flag f\\\", java.util.Calendar.class, line.getOptionObject('f'));\\r\\n+    assertEquals(\\\"number flag n\\\", new Float(4.5), line.getOptionObject('n'));\\r\\n+    assertEquals(\\\"url flag t\\\", new java.net.URL(\\\"http://jakarta.apache.org/\\\"), line.getOptionObject('t'));\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\test\java\org\apache\commons\cli\PatternOptionBuilderTest.java	testUntypedPattern	org.apache.commons.cli.PatternOptionBuilderTest.testUntypedPattern()	166	177	1	[{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"\""},{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,12 +1,12 @@\\n @Test\\r\\n public void testUntypedPattern() throws Exception {\\r\\n-    Options options = PatternOptionBuilder.parsePattern(\\\"abc\\\");\\r\\n-    CommandLineParser parser = new PosixParser();\\r\\n-    CommandLine line = parser.parse(options, new String[] { \\\"-abc\\\" });\\r\\n+    final Options options = PatternOptionBuilder.parsePattern(\\\"abc\\\");\\r\\n+    final CommandLineParser parser = new PosixParser();\\r\\n+    final CommandLine line = parser.parse(options, new String[] { \\\"-abc\\\" });\\r\\n     assertTrue(line.hasOption('a'));\\r\\n     assertNull(\\\"value a\\\", line.getOptionObject('a'));\\r\\n     assertTrue(line.hasOption('b'));\\r\\n     assertNull(\\\"value b\\\", line.getOptionObject('b'));\\r\\n     assertTrue(line.hasOption('c'));\\r\\n     assertNull(\\\"value c\\\", line.getOptionObject('c'));\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"tn@apache.org","authorName":"Thomas Neidhart","commitYear":"2013","diff":"\"@@ -1,11 +1,12 @@\\n+@Test\\r\\n public void testUntypedPattern() throws Exception {\\r\\n     Options options = PatternOptionBuilder.parsePattern(\\\"abc\\\");\\r\\n     CommandLineParser parser = new PosixParser();\\r\\n     CommandLine line = parser.parse(options, new String[] { \\\"-abc\\\" });\\r\\n     assertTrue(line.hasOption('a'));\\r\\n     assertNull(\\\"value a\\\", line.getOptionObject('a'));\\r\\n     assertTrue(line.hasOption('b'));\\r\\n     assertNull(\\\"value b\\\", line.getOptionObject('b'));\\r\\n     assertTrue(line.hasOption('c'));\\r\\n     assertNull(\\\"value c\\\", line.getOptionObject('c'));\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2008","diff":"\"@@ -0,0 +1,11 @@\\n+public void testUntypedPattern() throws Exception {\\r\\n+    Options options = PatternOptionBuilder.parsePattern(\\\"abc\\\");\\r\\n+    CommandLineParser parser = new PosixParser();\\r\\n+    CommandLine line = parser.parse(options, new String[] { \\\"-abc\\\" });\\r\\n+    assertTrue(line.hasOption('a'));\\r\\n+    assertNull(\\\"value a\\\", line.getOptionObject('a'));\\r\\n+    assertTrue(line.hasOption('b'));\\r\\n+    assertNull(\\\"value b\\\", line.getOptionObject('b'));\\r\\n+    assertTrue(line.hasOption('c'));\\r\\n+    assertNull(\\\"value c\\\", line.getOptionObject('c'));\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\test\java\org\apache\commons\cli\PatternOptionBuilderTest.java	testURLPattern	org.apache.commons.cli.PatternOptionBuilderTest.testURLPattern()	180	187	1	[{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"\""},{"authorEmail":"gardgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2019","diff":"\"@@ -1,8 +1,8 @@\\n @Test\\r\\n public void testURLPattern() throws Exception {\\r\\n     final Options options = PatternOptionBuilder.parsePattern(\\\"u/v/\\\");\\r\\n     final CommandLineParser parser = new PosixParser();\\r\\n-    final CommandLine line = parser.parse(options, new String[] { \\\"-u\\\", \\\"http://commons.apache.org\\\", \\\"-v\\\", \\\"foo://commons.apache.org\\\" });\\r\\n-    assertEquals(\\\"u value\\\", new URL(\\\"http://commons.apache.org\\\"), line.getOptionObject(\\\"u\\\"));\\r\\n+    final CommandLine line = parser.parse(options, new String[] { \\\"-u\\\", \\\"https://commons.apache.org\\\", \\\"-v\\\", \\\"foo://commons.apache.org\\\" });\\r\\n+    assertEquals(\\\"u value\\\", new URL(\\\"https://commons.apache.org\\\"), line.getOptionObject(\\\"u\\\"));\\r\\n     assertNull(\\\"v value\\\", line.getOptionObject(\\\"v\\\"));\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,8 +1,8 @@\\n @Test\\r\\n public void testURLPattern() throws Exception {\\r\\n-    Options options = PatternOptionBuilder.parsePattern(\\\"u/v/\\\");\\r\\n-    CommandLineParser parser = new PosixParser();\\r\\n-    CommandLine line = parser.parse(options, new String[] { \\\"-u\\\", \\\"http://commons.apache.org\\\", \\\"-v\\\", \\\"foo://commons.apache.org\\\" });\\r\\n+    final Options options = PatternOptionBuilder.parsePattern(\\\"u/v/\\\");\\r\\n+    final CommandLineParser parser = new PosixParser();\\r\\n+    final CommandLine line = parser.parse(options, new String[] { \\\"-u\\\", \\\"http://commons.apache.org\\\", \\\"-v\\\", \\\"foo://commons.apache.org\\\" });\\r\\n     assertEquals(\\\"u value\\\", new URL(\\\"http://commons.apache.org\\\"), line.getOptionObject(\\\"u\\\"));\\r\\n     assertNull(\\\"v value\\\", line.getOptionObject(\\\"v\\\"));\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"tn@apache.org","authorName":"Thomas Neidhart","commitYear":"2013","diff":"\"@@ -1,7 +1,8 @@\\n+@Test\\r\\n public void testURLPattern() throws Exception {\\r\\n     Options options = PatternOptionBuilder.parsePattern(\\\"u/v/\\\");\\r\\n     CommandLineParser parser = new PosixParser();\\r\\n     CommandLine line = parser.parse(options, new String[] { \\\"-u\\\", \\\"http://commons.apache.org\\\", \\\"-v\\\", \\\"foo://commons.apache.org\\\" });\\r\\n     assertEquals(\\\"u value\\\", new URL(\\\"http://commons.apache.org\\\"), line.getOptionObject(\\\"u\\\"));\\r\\n     assertNull(\\\"v value\\\", line.getOptionObject(\\\"v\\\"));\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2008","diff":"\"@@ -0,0 +1,7 @@\\n+public void testURLPattern() throws Exception {\\r\\n+    Options options = PatternOptionBuilder.parsePattern(\\\"u/v/\\\");\\r\\n+    CommandLineParser parser = new PosixParser();\\r\\n+    CommandLine line = parser.parse(options, new String[] { \\\"-u\\\", \\\"http://commons.apache.org\\\", \\\"-v\\\", \\\"foo://commons.apache.org\\\" });\\r\\n+    assertEquals(\\\"u value\\\", new URL(\\\"http://commons.apache.org\\\"), line.getOptionObject(\\\"u\\\"));\\r\\n+    assertNull(\\\"v value\\\", line.getOptionObject(\\\"v\\\"));\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\test\java\org\apache\commons\cli\PosixParserTest.java	setUp	org.apache.commons.cli.PosixParserTest.setUp()	31	34	1	[{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2020","diff":"\"@@ -1,6 +1,7 @@\\n+@Override\\r\\n @SuppressWarnings(\\\"deprecation\\\")\\r\\n @Before\\r\\n public void setUp() {\\r\\n     super.setUp();\\r\\n     parser = new PosixParser();\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"tn@apache.org","authorName":"Thomas Neidhart","commitYear":"2013","diff":"\"@@ -1,6 +1,6 @@\\n @SuppressWarnings(\\\"deprecation\\\")\\r\\n-@Override\\r\\n+@Before\\r\\n public void setUp() {\\r\\n     super.setUp();\\r\\n     parser = new PosixParser();\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"sebb@apache.org","authorName":"Sebastian Bazley","commitYear":"2013","diff":"\"@@ -1,5 +1,6 @@\\n+@SuppressWarnings(\\\"deprecation\\\")\\r\\n @Override\\r\\n public void setUp() {\\r\\n     super.setUp();\\r\\n     parser = new PosixParser();\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"sebb@apache.org","authorName":"Sebastian Bazley","commitYear":"2013","diff":"\"@@ -1,4 +1,5 @@\\n+@Override\\r\\n public void setUp() {\\r\\n     super.setUp();\\r\\n     parser = new PosixParser();\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2008","diff":"\"@@ -1,4 +1,4 @@\\n public void setUp() {\\r\\n-    options = new Options().addOption(\\\"a\\\", \\\"enable-a\\\", false, \\\"turn [a] on or off\\\").addOption(\\\"b\\\", \\\"bfile\\\", true, \\\"set the value of [b]\\\").addOption(\\\"c\\\", \\\"copt\\\", false, \\\"turn [c] on or off\\\");\\r\\n+    super.setUp();\\r\\n     parser = new PosixParser();\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2008","diff":"\"@@ -1,4 +1,4 @@\\n public void setUp() {\\r\\n-    _options = new Options().addOption(\\\"a\\\", \\\"enable-a\\\", false, \\\"turn [a] on or off\\\").addOption(\\\"b\\\", \\\"bfile\\\", true, \\\"set the value of [b]\\\").addOption(\\\"c\\\", \\\"copt\\\", false, \\\"turn [c] on or off\\\");\\r\\n-    _parser = new PosixParser();\\r\\n+    options = new Options().addOption(\\\"a\\\", \\\"enable-a\\\", false, \\\"turn [a] on or off\\\").addOption(\\\"b\\\", \\\"bfile\\\", true, \\\"set the value of [b]\\\").addOption(\\\"c\\\", \\\"copt\\\", false, \\\"turn [c] on or off\\\");\\r\\n+    parser = new PosixParser();\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -1,4 +1,4 @@\\n public void setUp() {\\r\\n     _options = new Options().addOption(\\\"a\\\", \\\"enable-a\\\", false, \\\"turn [a] on or off\\\").addOption(\\\"b\\\", \\\"bfile\\\", true, \\\"set the value of [b]\\\").addOption(\\\"c\\\", \\\"copt\\\", false, \\\"turn [c] on or off\\\");\\r\\n-    _parser = CommandLineParserFactory.newParser();\\r\\n+    _parser = new PosixParser();\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -1,5 +1,4 @@\\n public void setUp() {\\r\\n-    System.setProperty(\\\"org.apache.commons.cli.parser\\\", \\\"org.apache.commons.cli.PosixParser\\\");\\r\\n     _options = new Options().addOption(\\\"a\\\", \\\"enable-a\\\", false, \\\"turn [a] on or off\\\").addOption(\\\"b\\\", \\\"bfile\\\", true, \\\"set the value of [b]\\\").addOption(\\\"c\\\", \\\"copt\\\", false, \\\"turn [c] on or off\\\");\\r\\n     _parser = CommandLineParserFactory.newParser();\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -1,3 +1,5 @@\\n public void setUp() {\\r\\n+    System.setProperty(\\\"org.apache.commons.cli.parser\\\", \\\"org.apache.commons.cli.PosixParser\\\");\\r\\n     _options = new Options().addOption(\\\"a\\\", \\\"enable-a\\\", false, \\\"turn [a] on or off\\\").addOption(\\\"b\\\", \\\"bfile\\\", true, \\\"set the value of [b]\\\").addOption(\\\"c\\\", \\\"copt\\\", false, \\\"turn [c] on or off\\\");\\r\\n+    _parser = CommandLineParserFactory.newParser();\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -1,3 +1,3 @@\\n public void setUp() {\\r\\n-    _options = new Options().addOption('a', \\\"enable-a\\\", false, \\\"turn [a] on or off\\\").addOption('b', \\\"bfile\\\", true, \\\"set the value of [b]\\\").addOption('c', \\\"copt\\\", false, \\\"turn [c] on or off\\\");\\r\\n+    _options = new Options().addOption(\\\"a\\\", \\\"enable-a\\\", false, \\\"turn [a] on or off\\\").addOption(\\\"b\\\", \\\"bfile\\\", true, \\\"set the value of [b]\\\").addOption(\\\"c\\\", \\\"copt\\\", false, \\\"turn [c] on or off\\\");\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jstrachan@apache.org","authorName":"James Strachan","commitYear":"2002","diff":"\"@@ -0,0 +1,3 @@\\n+public void setUp() {\\r\\n+    _options = new Options().addOption('a', \\\"enable-a\\\", false, \\\"turn [a] on or off\\\").addOption('b', \\\"bfile\\\", true, \\\"set the value of [b]\\\").addOption('c', \\\"copt\\\", false, \\\"turn [c] on or off\\\");\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\test\java\org\apache\commons\cli\PosixParserTest.java	testAmbiguousLongWithoutEqualSingleDash	org.apache.commons.cli.PosixParserTest.testAmbiguousLongWithoutEqualSingleDash()	39	40	1	[{"authorEmail":"britter@apache.org","authorName":"Benedikt Ritter","commitYear":"2016","diff":"\"@@ -1,3 +1,5 @@\\n @Override\\r\\n+@Test\\r\\n+@Ignore(\\\"not supported by the PosixParser\\\")\\r\\n public void testAmbiguousLongWithoutEqualSingleDash() throws Exception {\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"sebb@apache.org","authorName":"Sebastian Bazley","commitYear":"2013","diff":"\"@@ -1,2 +1,3 @@\\n+@Override\\r\\n public void testAmbiguousLongWithoutEqualSingleDash() throws Exception {\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2009","diff":"\"@@ -0,0 +1,2 @@\\n+public void testAmbiguousLongWithoutEqualSingleDash() throws Exception {\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\test\java\org\apache\commons\cli\PosixParserTest.java	testAmbiguousLongWithoutEqualSingleDash2	org.apache.commons.cli.PosixParserTest.testAmbiguousLongWithoutEqualSingleDash2()	45	46	1	[{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2023","diff":"\"@@ -0,0 +1,5 @@\\n+@Override\\r\\n+@Test\\r\\n+@Ignore(\\\"not supported by the PosixParser\\\")\\r\\n+public void testAmbiguousLongWithoutEqualSingleDash2() throws Exception {\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\test\java\org\apache\commons\cli\PosixParserTest.java	testAmbiguousPartialLongOption4	org.apache.commons.cli.PosixParserTest.testAmbiguousPartialLongOption4()	51	52	1	[{"authorEmail":"britter@apache.org","authorName":"Benedikt Ritter","commitYear":"2016","diff":"\"@@ -1,3 +1,5 @@\\n @Override\\r\\n+@Test\\r\\n+@Ignore(\\\"not supported by the PosixParser\\\")\\r\\n public void testAmbiguousPartialLongOption4() throws Exception {\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"sebb@apache.org","authorName":"Sebastian Bazley","commitYear":"2013","diff":"\"@@ -1,2 +1,3 @@\\n+@Override\\r\\n public void testAmbiguousPartialLongOption4() throws Exception {\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2009","diff":"\"@@ -1,2 +1,2 @@\\n-public void testPartialLongOptionWithShort() throws Exception {\\r\\n+public void testAmbiguousPartialLongOption4() throws Exception {\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2009","diff":"\"@@ -0,0 +1,2 @@\\n+public void testPartialLongOptionWithShort() throws Exception {\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\test\java\org\apache\commons\cli\PosixParserTest.java	testDoubleDash2	org.apache.commons.cli.PosixParserTest.testDoubleDash2()	57	58	1	[{"authorEmail":"britter@apache.org","authorName":"Benedikt Ritter","commitYear":"2016","diff":"\"@@ -1,3 +1,5 @@\\n @Override\\r\\n+@Test\\r\\n+@Ignore(\\\"not supported by the PosixParser\\\")\\r\\n public void testDoubleDash2() throws Exception {\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"sebb@apache.org","authorName":"Sebastian Bazley","commitYear":"2013","diff":"\"@@ -1,2 +1,3 @@\\n+@Override\\r\\n public void testDoubleDash2() throws Exception {\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2009","diff":"\"@@ -0,0 +1,2 @@\\n+public void testDoubleDash2() throws Exception {\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\test\java\org\apache\commons\cli\PosixParserTest.java	testLongWithEqualSingleDash	org.apache.commons.cli.PosixParserTest.testLongWithEqualSingleDash()	63	64	1	[{"authorEmail":"britter@apache.org","authorName":"Benedikt Ritter","commitYear":"2016","diff":"\"@@ -1,3 +1,5 @@\\n @Override\\r\\n+@Test\\r\\n+@Ignore(\\\"not supported by the PosixParser\\\")\\r\\n public void testLongWithEqualSingleDash() throws Exception {\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"sebb@apache.org","authorName":"Sebastian Bazley","commitYear":"2013","diff":"\"@@ -1,2 +1,3 @@\\n+@Override\\r\\n public void testLongWithEqualSingleDash() throws Exception {\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2008","diff":"\"@@ -0,0 +1,2 @@\\n+public void testLongWithEqualSingleDash() throws Exception {\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\test\java\org\apache\commons\cli\PosixParserTest.java	testLongWithoutEqualSingleDash	org.apache.commons.cli.PosixParserTest.testLongWithoutEqualSingleDash()	69	70	1	[{"authorEmail":"britter@apache.org","authorName":"Benedikt Ritter","commitYear":"2016","diff":"\"@@ -1,3 +1,5 @@\\n @Override\\r\\n+@Test\\r\\n+@Ignore(\\\"not supported by the PosixParser\\\")\\r\\n public void testLongWithoutEqualSingleDash() throws Exception {\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"sebb@apache.org","authorName":"Sebastian Bazley","commitYear":"2013","diff":"\"@@ -1,2 +1,3 @@\\n+@Override\\r\\n public void testLongWithoutEqualSingleDash() throws Exception {\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2009","diff":"\"@@ -0,0 +1,2 @@\\n+public void testLongWithoutEqualSingleDash() throws Exception {\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\test\java\org\apache\commons\cli\PosixParserTest.java	testLongWithUnexpectedArgument1	org.apache.commons.cli.PosixParserTest.testLongWithUnexpectedArgument1()	75	76	1	[{"authorEmail":"britter@apache.org","authorName":"Benedikt Ritter","commitYear":"2016","diff":"\"@@ -1,3 +1,5 @@\\n @Override\\r\\n+@Test\\r\\n+@Ignore(\\\"not supported by the PosixParser\\\")\\r\\n public void testLongWithUnexpectedArgument1() throws Exception {\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"sebb@apache.org","authorName":"Sebastian Bazley","commitYear":"2013","diff":"\"@@ -1,2 +1,3 @@\\n+@Override\\r\\n public void testLongWithUnexpectedArgument1() throws Exception {\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2009","diff":"\"@@ -0,0 +1,2 @@\\n+public void testLongWithUnexpectedArgument1() throws Exception {\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\test\java\org\apache\commons\cli\PosixParserTest.java	testNegativeOption	org.apache.commons.cli.PosixParserTest.testNegativeOption()	81	82	1	[{"authorEmail":"britter@apache.org","authorName":"Benedikt Ritter","commitYear":"2016","diff":"\"@@ -1,3 +1,5 @@\\n @Override\\r\\n+@Test\\r\\n+@Ignore(\\\"not supported by the PosixParser (CLI-184)\\\")\\r\\n public void testNegativeOption() throws Exception {\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"sebb@apache.org","authorName":"Sebastian Bazley","commitYear":"2013","diff":"\"@@ -1,2 +1,3 @@\\n+@Override\\r\\n public void testNegativeOption() throws Exception {\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2009","diff":"\"@@ -0,0 +1,2 @@\\n+public void testNegativeOption() throws Exception {\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\test\java\org\apache\commons\cli\PosixParserTest.java	testShortWithEqual	org.apache.commons.cli.PosixParserTest.testShortWithEqual()	87	88	1	[{"authorEmail":"britter@apache.org","authorName":"Benedikt Ritter","commitYear":"2016","diff":"\"@@ -1,3 +1,5 @@\\n @Override\\r\\n+@Test\\r\\n+@Ignore(\\\"not supported by the PosixParser\\\")\\r\\n public void testShortWithEqual() throws Exception {\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"sebb@apache.org","authorName":"Sebastian Bazley","commitYear":"2013","diff":"\"@@ -1,2 +1,3 @@\\n+@Override\\r\\n public void testShortWithEqual() throws Exception {\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2008","diff":"\"@@ -0,0 +1,2 @@\\n+public void testShortWithEqual() throws Exception {\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\test\java\org\apache\commons\cli\PosixParserTest.java	testUnambiguousPartialLongOption4	org.apache.commons.cli.PosixParserTest.testUnambiguousPartialLongOption4()	93	94	1	[{"authorEmail":"britter@apache.org","authorName":"Benedikt Ritter","commitYear":"2016","diff":"\"@@ -1,3 +1,5 @@\\n @Override\\r\\n+@Test\\r\\n+@Ignore(\\\"not supported by the PosixParser\\\")\\r\\n public void testUnambiguousPartialLongOption4() throws Exception {\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"sebb@apache.org","authorName":"Sebastian Bazley","commitYear":"2013","diff":"\"@@ -1,2 +1,3 @@\\n+@Override\\r\\n public void testUnambiguousPartialLongOption4() throws Exception {\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2009","diff":"\"@@ -1,2 +1,2 @@\\n-public void testPartialLongOptionWithShort() throws Exception {\\r\\n+public void testUnambiguousPartialLongOption4() throws Exception {\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2009","diff":"\"@@ -0,0 +1,2 @@\\n+public void testPartialLongOptionWithShort() throws Exception {\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\test\java\org\apache\commons\cli\TypeHandlerTest.java	testCreateValueClass	org.apache.commons.cli.TypeHandlerTest.testCreateValueClass()	42	45	1	[{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2020","diff":"\"@@ -1,5 +1,5 @@\\n @Test\\r\\n public void testCreateValueClass() throws Exception {\\r\\n-    Object clazz = TypeHandler.createValue(Instantiable.class.getName(), PatternOptionBuilder.CLASS_VALUE);\\r\\n+    final Object clazz = TypeHandler.createValue(Instantiable.class.getName(), PatternOptionBuilder.CLASS_VALUE);\\r\\n     assertEquals(Instantiable.class, clazz);\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"britter@apache.org","authorName":"Benedikt Ritter","commitYear":"2017","diff":"\"@@ -0,0 +1,5 @@\\n+@Test\\r\\n+public void testCreateValueClass() throws Exception {\\r\\n+    Object clazz = TypeHandler.createValue(Instantiable.class.getName(), PatternOptionBuilder.CLASS_VALUE);\\r\\n+    assertEquals(Instantiable.class, clazz);\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\test\java\org\apache\commons\cli\TypeHandlerTest.java	testCreateValueClass_notFound	org.apache.commons.cli.TypeHandlerTest.testCreateValueClass_notFound()	48	51	1	[{"authorEmail":"142304+nhojpatrick@users.noreply.github.com","authorName":"John Patrick","commitYear":"2022","diff":"\"@@ -1,4 +1,4 @@\\n-@Test(expected = ParseException.class)\\r\\n-public void testCreateValueClass_notFound() throws Exception {\\r\\n-    TypeHandler.createValue(\\\"what ever\\\", PatternOptionBuilder.CLASS_VALUE);\\r\\n+@Test\\r\\n+public void testCreateValueClass_notFound() {\\r\\n+    assertThrows(ParseException.class, () -> TypeHandler.createValue(\\\"what ever\\\", PatternOptionBuilder.CLASS_VALUE));\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"britter@apache.org","authorName":"Benedikt Ritter","commitYear":"2017","diff":"\"@@ -0,0 +1,4 @@\\n+@Test(expected = ParseException.class)\\r\\n+public void testCreateValueClass_notFound() throws Exception {\\r\\n+    TypeHandler.createValue(\\\"what ever\\\", PatternOptionBuilder.CLASS_VALUE);\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\test\java\org\apache\commons\cli\TypeHandlerTest.java	testCreateValueDate	org.apache.commons.cli.TypeHandlerTest.testCreateValueDate()	54	57	1	[{"authorEmail":"142304+nhojpatrick@users.noreply.github.com","authorName":"John Patrick","commitYear":"2022","diff":"\"@@ -1,4 +1,4 @@\\n-@Test(expected = UnsupportedOperationException.class)\\r\\n-public void testCreateValueDate() throws Exception {\\r\\n-    TypeHandler.createValue(\\\"what ever\\\", PatternOptionBuilder.DATE_VALUE);\\r\\n+@Test\\r\\n+public void testCreateValueDate() {\\r\\n+    assertThrows(UnsupportedOperationException.class, () -> TypeHandler.createValue(\\\"what ever\\\", PatternOptionBuilder.DATE_VALUE));\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"britter@apache.org","authorName":"Benedikt Ritter","commitYear":"2017","diff":"\"@@ -0,0 +1,4 @@\\n+@Test(expected = UnsupportedOperationException.class)\\r\\n+public void testCreateValueDate() throws Exception {\\r\\n+    TypeHandler.createValue(\\\"what ever\\\", PatternOptionBuilder.DATE_VALUE);\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\test\java\org\apache\commons\cli\TypeHandlerTest.java	testCreateValueExistingFile	org.apache.commons.cli.TypeHandlerTest.testCreateValueExistingFile()	60	65	2	[{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"@@ -1,5 +1,6 @@\\n @Test\\r\\n public void testCreateValueExistingFile() throws Exception {\\r\\n-    final FileInputStream result = TypeHandler.createValue(\\\"src/test/resources/org/apache/commons/cli/existing-readable.file\\\", PatternOptionBuilder.EXISTING_FILE_VALUE);\\r\\n-    assertNotNull(result);\\r\\n+    try (FileInputStream result = TypeHandler.createValue(\\\"src/test/resources/org/apache/commons/cli/existing-readable.file\\\", PatternOptionBuilder.EXISTING_FILE_VALUE)) {\\r\\n+        assertNotNull(result);\\r\\n+    }\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"\""},{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2020","diff":"\"@@ -1,5 +1,5 @@\\n @Test\\r\\n public void testCreateValueExistingFile() throws Exception {\\r\\n-    FileInputStream result = TypeHandler.createValue(\\\"src/test/resources/org/apache/commons/cli/existing-readable.file\\\", PatternOptionBuilder.EXISTING_FILE_VALUE);\\r\\n+    final FileInputStream result = TypeHandler.createValue(\\\"src/test/resources/org/apache/commons/cli/existing-readable.file\\\", PatternOptionBuilder.EXISTING_FILE_VALUE);\\r\\n     assertNotNull(result);\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2020","diff":"\"@@ -1,5 +1,5 @@\\n @Test\\r\\n public void testCreateValueExistingFile() throws Exception {\\r\\n-    FileInputStream result = TypeHandler.createValue(\\\"src/test/resources/existing-readable.file\\\", PatternOptionBuilder.EXISTING_FILE_VALUE);\\r\\n+    FileInputStream result = TypeHandler.createValue(\\\"src/test/resources/org/apache/commons/cli/existing-readable.file\\\", PatternOptionBuilder.EXISTING_FILE_VALUE);\\r\\n     assertNotNull(result);\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"britter@apache.org","authorName":"Benedikt Ritter","commitYear":"2017","diff":"\"@@ -0,0 +1,5 @@\\n+@Test\\r\\n+public void testCreateValueExistingFile() throws Exception {\\r\\n+    FileInputStream result = TypeHandler.createValue(\\\"src/test/resources/existing-readable.file\\\", PatternOptionBuilder.EXISTING_FILE_VALUE);\\r\\n+    assertNotNull(result);\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\test\java\org\apache\commons\cli\TypeHandlerTest.java	testCreateValueExistingFile_nonExistingFile	org.apache.commons.cli.TypeHandlerTest.testCreateValueExistingFile_nonExistingFile()	68	71	1	[{"authorEmail":"142304+nhojpatrick@users.noreply.github.com","authorName":"John Patrick","commitYear":"2022","diff":"\"@@ -1,4 +1,4 @@\\n-@Test(expected = ParseException.class)\\r\\n-public void testCreateValueExistingFile_nonExistingFile() throws Exception {\\r\\n-    TypeHandler.createValue(\\\"non-existing.file\\\", PatternOptionBuilder.EXISTING_FILE_VALUE);\\r\\n+@Test\\r\\n+public void testCreateValueExistingFile_nonExistingFile() {\\r\\n+    assertThrows(ParseException.class, () -> TypeHandler.createValue(\\\"non-existing.file\\\", PatternOptionBuilder.EXISTING_FILE_VALUE));\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"britter@apache.org","authorName":"Benedikt Ritter","commitYear":"2017","diff":"\"@@ -0,0 +1,4 @@\\n+@Test(expected = ParseException.class)\\r\\n+public void testCreateValueExistingFile_nonExistingFile() throws Exception {\\r\\n+    TypeHandler.createValue(\\\"non-existing.file\\\", PatternOptionBuilder.EXISTING_FILE_VALUE);\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\test\java\org\apache\commons\cli\TypeHandlerTest.java	testCreateValueFile	org.apache.commons.cli.TypeHandlerTest.testCreateValueFile()	74	77	1	[{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2020","diff":"\"@@ -1,5 +1,5 @@\\n @Test\\r\\n public void testCreateValueFile() throws Exception {\\r\\n-    File result = TypeHandler.createValue(\\\"some-file.txt\\\", PatternOptionBuilder.FILE_VALUE);\\r\\n+    final File result = TypeHandler.createValue(\\\"some-file.txt\\\", PatternOptionBuilder.FILE_VALUE);\\r\\n     assertEquals(\\\"some-file.txt\\\", result.getName());\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"britter@apache.org","authorName":"Benedikt Ritter","commitYear":"2017","diff":"\"@@ -0,0 +1,5 @@\\n+@Test\\r\\n+public void testCreateValueFile() throws Exception {\\r\\n+    File result = TypeHandler.createValue(\\\"some-file.txt\\\", PatternOptionBuilder.FILE_VALUE);\\r\\n+    assertEquals(\\\"some-file.txt\\\", result.getName());\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\test\java\org\apache\commons\cli\TypeHandlerTest.java	testCreateValueFiles	org.apache.commons.cli.TypeHandlerTest.testCreateValueFiles()	80	83	1	[{"authorEmail":"142304+nhojpatrick@users.noreply.github.com","authorName":"John Patrick","commitYear":"2022","diff":"\"@@ -1,4 +1,4 @@\\n-@Test(expected = UnsupportedOperationException.class)\\r\\n-public void testCreateValueFiles() throws Exception {\\r\\n-    TypeHandler.createValue(\\\"some.files\\\", PatternOptionBuilder.FILES_VALUE);\\r\\n+@Test\\r\\n+public void testCreateValueFiles() {\\r\\n+    assertThrows(UnsupportedOperationException.class, () -> TypeHandler.createValue(\\\"some.files\\\", PatternOptionBuilder.FILES_VALUE));\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"britter@apache.org","authorName":"Benedikt Ritter","commitYear":"2017","diff":"\"@@ -0,0 +1,4 @@\\n+@Test(expected = UnsupportedOperationException.class)\\r\\n+public void testCreateValueFiles() throws Exception {\\r\\n+    TypeHandler.createValue(\\\"some.files\\\", PatternOptionBuilder.FILES_VALUE);\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\test\java\org\apache\commons\cli\TypeHandlerTest.java	testCreateValueInteger_failure	org.apache.commons.cli.TypeHandlerTest.testCreateValueInteger_failure()	86	89	1	[{"authorEmail":"142304+nhojpatrick@users.noreply.github.com","authorName":"John Patrick","commitYear":"2022","diff":"\"@@ -1,4 +1,4 @@\\n-@Test(expected = ParseException.class)\\r\\n-public void testCreateValueInteger_failure() throws Exception {\\r\\n-    TypeHandler.createValue(\\\"just-a-string\\\", Integer.class);\\r\\n+@Test\\r\\n+public void testCreateValueInteger_failure() {\\r\\n+    assertThrows(ParseException.class, () -> TypeHandler.createValue(\\\"just-a-string\\\", Integer.class));\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"deep.alexander@gmail.com","authorName":"Alex Nordlund","commitYear":"2018","diff":"\"@@ -0,0 +1,4 @@\\n+@Test(expected = ParseException.class)\\r\\n+public void testCreateValueInteger_failure() throws Exception {\\r\\n+    TypeHandler.createValue(\\\"just-a-string\\\", Integer.class);\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\test\java\org\apache\commons\cli\TypeHandlerTest.java	testCreateValueNumber_Double	org.apache.commons.cli.TypeHandlerTest.testCreateValueNumber_Double()	92	94	1	[{"authorEmail":"britter@apache.org","authorName":"Benedikt Ritter","commitYear":"2017","diff":"\"@@ -0,0 +1,4 @@\\n+@Test\\r\\n+public void testCreateValueNumber_Double() throws Exception {\\r\\n+    assertEquals(1.5d, TypeHandler.createValue(\\\"1.5\\\", PatternOptionBuilder.NUMBER_VALUE));\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\test\java\org\apache\commons\cli\TypeHandlerTest.java	testCreateValueNumber_Long	org.apache.commons.cli.TypeHandlerTest.testCreateValueNumber_Long()	97	99	1	[{"authorEmail":"britter@apache.org","authorName":"Benedikt Ritter","commitYear":"2017","diff":"\"@@ -0,0 +1,4 @@\\n+@Test\\r\\n+public void testCreateValueNumber_Long() throws Exception {\\r\\n+    assertEquals(Long.valueOf(15), TypeHandler.createValue(\\\"15\\\", PatternOptionBuilder.NUMBER_VALUE));\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\test\java\org\apache\commons\cli\TypeHandlerTest.java	testCreateValueNumber_noNumber	org.apache.commons.cli.TypeHandlerTest.testCreateValueNumber_noNumber()	102	105	1	[{"authorEmail":"142304+nhojpatrick@users.noreply.github.com","authorName":"John Patrick","commitYear":"2022","diff":"\"@@ -1,4 +1,4 @@\\n-@Test(expected = ParseException.class)\\r\\n-public void testCreateValueNumber_noNumber() throws Exception {\\r\\n-    TypeHandler.createValue(\\\"not a number\\\", PatternOptionBuilder.NUMBER_VALUE);\\r\\n+@Test\\r\\n+public void testCreateValueNumber_noNumber() {\\r\\n+    assertThrows(ParseException.class, () -> TypeHandler.createValue(\\\"not a number\\\", PatternOptionBuilder.NUMBER_VALUE));\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"britter@apache.org","authorName":"Benedikt Ritter","commitYear":"2017","diff":"\"@@ -0,0 +1,4 @@\\n+@Test(expected = ParseException.class)\\r\\n+public void testCreateValueNumber_noNumber() throws Exception {\\r\\n+    TypeHandler.createValue(\\\"not a number\\\", PatternOptionBuilder.NUMBER_VALUE);\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\test\java\org\apache\commons\cli\TypeHandlerTest.java	testCreateValueObject_InstantiableClass	org.apache.commons.cli.TypeHandlerTest.testCreateValueObject_InstantiableClass()	108	111	1	[{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2020","diff":"\"@@ -1,5 +1,5 @@\\n @Test\\r\\n public void testCreateValueObject_InstantiableClass() throws Exception {\\r\\n-    Object result = TypeHandler.createValue(Instantiable.class.getName(), PatternOptionBuilder.OBJECT_VALUE);\\r\\n+    final Object result = TypeHandler.createValue(Instantiable.class.getName(), PatternOptionBuilder.OBJECT_VALUE);\\r\\n     assertTrue(result instanceof Instantiable);\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"britter@apache.org","authorName":"Benedikt Ritter","commitYear":"2017","diff":"\"@@ -0,0 +1,5 @@\\n+@Test\\r\\n+public void testCreateValueObject_InstantiableClass() throws Exception {\\r\\n+    Object result = TypeHandler.createValue(Instantiable.class.getName(), PatternOptionBuilder.OBJECT_VALUE);\\r\\n+    assertTrue(result instanceof Instantiable);\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\test\java\org\apache\commons\cli\TypeHandlerTest.java	testCreateValueObject_notInstantiableClass	org.apache.commons.cli.TypeHandlerTest.testCreateValueObject_notInstantiableClass()	114	117	1	[{"authorEmail":"142304+nhojpatrick@users.noreply.github.com","authorName":"John Patrick","commitYear":"2022","diff":"\"@@ -1,4 +1,4 @@\\n-@Test(expected = ParseException.class)\\r\\n-public void testCreateValueObject_notInstantiableClass() throws Exception {\\r\\n-    TypeHandler.createValue(NotInstantiable.class.getName(), PatternOptionBuilder.OBJECT_VALUE);\\r\\n+@Test\\r\\n+public void testCreateValueObject_notInstantiableClass() {\\r\\n+    assertThrows(ParseException.class, () -> TypeHandler.createValue(NotInstantiable.class.getName(), PatternOptionBuilder.OBJECT_VALUE));\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"britter@apache.org","authorName":"Benedikt Ritter","commitYear":"2017","diff":"\"@@ -0,0 +1,4 @@\\n+@Test(expected = ParseException.class)\\r\\n+public void testCreateValueObject_notInstantiableClass() throws Exception {\\r\\n+    TypeHandler.createValue(NotInstantiable.class.getName(), PatternOptionBuilder.OBJECT_VALUE);\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\test\java\org\apache\commons\cli\TypeHandlerTest.java	testCreateValueObject_unknownClass	org.apache.commons.cli.TypeHandlerTest.testCreateValueObject_unknownClass()	120	123	1	[{"authorEmail":"142304+nhojpatrick@users.noreply.github.com","authorName":"John Patrick","commitYear":"2022","diff":"\"@@ -1,4 +1,4 @@\\n-@Test(expected = ParseException.class)\\r\\n-public void testCreateValueObject_unknownClass() throws Exception {\\r\\n-    TypeHandler.createValue(\\\"unknown\\\", PatternOptionBuilder.OBJECT_VALUE);\\r\\n+@Test\\r\\n+public void testCreateValueObject_unknownClass() {\\r\\n+    assertThrows(ParseException.class, () -> TypeHandler.createValue(\\\"unknown\\\", PatternOptionBuilder.OBJECT_VALUE));\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"britter@apache.org","authorName":"Benedikt Ritter","commitYear":"2017","diff":"\"@@ -0,0 +1,4 @@\\n+@Test(expected = ParseException.class)\\r\\n+public void testCreateValueObject_unknownClass() throws Exception {\\r\\n+    TypeHandler.createValue(\\\"unknown\\\", PatternOptionBuilder.OBJECT_VALUE);\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\test\java\org\apache\commons\cli\TypeHandlerTest.java	testCreateValueString	org.apache.commons.cli.TypeHandlerTest.testCreateValueString()	126	128	1	[{"authorEmail":"britter@apache.org","authorName":"Benedikt Ritter","commitYear":"2017","diff":"\"@@ -0,0 +1,4 @@\\n+@Test\\r\\n+public void testCreateValueString() throws Exception {\\r\\n+    assertEquals(\\\"String\\\", TypeHandler.createValue(\\\"String\\\", PatternOptionBuilder.STRING_VALUE));\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\test\java\org\apache\commons\cli\TypeHandlerTest.java	testCreateValueURL	org.apache.commons.cli.TypeHandlerTest.testCreateValueURL()	131	135	1	[{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2020","diff":"\"@@ -1,6 +1,6 @@\\n @Test\\r\\n public void testCreateValueURL() throws Exception {\\r\\n-    String urlString = \\\"https://commons.apache.org\\\";\\r\\n-    URL result = TypeHandler.createValue(urlString, PatternOptionBuilder.URL_VALUE);\\r\\n+    final String urlString = \\\"https://commons.apache.org\\\";\\r\\n+    final URL result = TypeHandler.createValue(urlString, PatternOptionBuilder.URL_VALUE);\\r\\n     assertEquals(urlString, result.toString());\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"gardgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2019","diff":"\"@@ -1,6 +1,6 @@\\n @Test\\r\\n public void testCreateValueURL() throws Exception {\\r\\n-    String urlString = \\\"http://commons.apache.org\\\";\\r\\n+    String urlString = \\\"https://commons.apache.org\\\";\\r\\n     URL result = TypeHandler.createValue(urlString, PatternOptionBuilder.URL_VALUE);\\r\\n     assertEquals(urlString, result.toString());\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"britter@apache.org","authorName":"Benedikt Ritter","commitYear":"2017","diff":"\"@@ -0,0 +1,6 @@\\n+@Test\\r\\n+public void testCreateValueURL() throws Exception {\\r\\n+    String urlString = \\\"http://commons.apache.org\\\";\\r\\n+    URL result = TypeHandler.createValue(urlString, PatternOptionBuilder.URL_VALUE);\\r\\n+    assertEquals(urlString, result.toString());\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\test\java\org\apache\commons\cli\TypeHandlerTest.java	testCreateValueURL_malformed	org.apache.commons.cli.TypeHandlerTest.testCreateValueURL_malformed()	138	141	1	[{"authorEmail":"142304+nhojpatrick@users.noreply.github.com","authorName":"John Patrick","commitYear":"2022","diff":"\"@@ -1,4 +1,4 @@\\n-@Test(expected = ParseException.class)\\r\\n-public void testCreateValueURL_malformed() throws Exception {\\r\\n-    TypeHandler.createValue(\\\"malformed-url\\\", PatternOptionBuilder.URL_VALUE);\\r\\n+@Test\\r\\n+public void testCreateValueURL_malformed() {\\r\\n+    assertThrows(ParseException.class, () -> TypeHandler.createValue(\\\"malformed-url\\\", PatternOptionBuilder.URL_VALUE));\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"britter@apache.org","authorName":"Benedikt Ritter","commitYear":"2017","diff":"\"@@ -0,0 +1,4 @@\\n+@Test(expected = ParseException.class)\\r\\n+public void testCreateValueURL_malformed() throws Exception {\\r\\n+    TypeHandler.createValue(\\\"malformed-url\\\", PatternOptionBuilder.URL_VALUE);\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\test\java\org\apache\commons\cli\UtilTest.java	testStripLeadingAndTrailingQuotes	org.apache.commons.cli.UtilTest.testStripLeadingAndTrailingQuotes()	27	33	1	[{"authorEmail":"tn@apache.org","authorName":"Thomas Neidhart","commitYear":"2013","diff":"\"@@ -1,7 +1,8 @@\\n+@Test\\r\\n public void testStripLeadingAndTrailingQuotes() {\\r\\n     assertEquals(\\\"foo\\\", Util.stripLeadingAndTrailingQuotes(\\\"\\\\\\\"foo\\\\\\\"\\\"));\\r\\n     assertEquals(\\\"foo \\\\\\\"bar\\\\\\\"\\\", Util.stripLeadingAndTrailingQuotes(\\\"foo \\\\\\\"bar\\\\\\\"\\\"));\\r\\n     assertEquals(\\\"\\\\\\\"foo\\\\\\\" bar\\\", Util.stripLeadingAndTrailingQuotes(\\\"\\\\\\\"foo\\\\\\\" bar\\\"));\\r\\n     assertEquals(\\\"\\\\\\\"foo\\\\\\\" and \\\\\\\"bar\\\\\\\"\\\", Util.stripLeadingAndTrailingQuotes(\\\"\\\\\\\"foo\\\\\\\" and \\\\\\\"bar\\\\\\\"\\\"));\\r\\n     assertEquals(\\\"\\\\\\\"\\\", Util.stripLeadingAndTrailingQuotes(\\\"\\\\\\\"\\\"));\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2010","diff":"\"@@ -1,3 +1,7 @@\\n public void testStripLeadingAndTrailingQuotes() {\\r\\n     assertEquals(\\\"foo\\\", Util.stripLeadingAndTrailingQuotes(\\\"\\\\\\\"foo\\\\\\\"\\\"));\\r\\n+    assertEquals(\\\"foo \\\\\\\"bar\\\\\\\"\\\", Util.stripLeadingAndTrailingQuotes(\\\"foo \\\\\\\"bar\\\\\\\"\\\"));\\r\\n+    assertEquals(\\\"\\\\\\\"foo\\\\\\\" bar\\\", Util.stripLeadingAndTrailingQuotes(\\\"\\\\\\\"foo\\\\\\\" bar\\\"));\\r\\n+    assertEquals(\\\"\\\\\\\"foo\\\\\\\" and \\\\\\\"bar\\\\\\\"\\\", Util.stripLeadingAndTrailingQuotes(\\\"\\\\\\\"foo\\\\\\\" and \\\\\\\"bar\\\\\\\"\\\"));\\r\\n+    assertEquals(\\\"\\\\\\\"\\\", Util.stripLeadingAndTrailingQuotes(\\\"\\\\\\\"\\\"));\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2008","diff":"\"@@ -0,0 +1,3 @@\\n+public void testStripLeadingAndTrailingQuotes() {\\r\\n+    assertEquals(\\\"foo\\\", Util.stripLeadingAndTrailingQuotes(\\\"\\\\\\\"foo\\\\\\\"\\\"));\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\test\java\org\apache\commons\cli\UtilTest.java	testStripLeadingHyphens	org.apache.commons.cli.UtilTest.testStripLeadingHyphens()	36	41	1	[{"authorEmail":"tn@apache.org","authorName":"Thomas Neidhart","commitYear":"2013","diff":"\"@@ -1,6 +1,7 @@\\n+@Test\\r\\n public void testStripLeadingHyphens() {\\r\\n     assertEquals(\\\"f\\\", Util.stripLeadingHyphens(\\\"-f\\\"));\\r\\n     assertEquals(\\\"foo\\\", Util.stripLeadingHyphens(\\\"--foo\\\"));\\r\\n     assertEquals(\\\"-foo\\\", Util.stripLeadingHyphens(\\\"---foo\\\"));\\r\\n     assertNull(Util.stripLeadingHyphens(null));\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2008","diff":"\"@@ -1,5 +1,6 @@\\n public void testStripLeadingHyphens() {\\r\\n     assertEquals(\\\"f\\\", Util.stripLeadingHyphens(\\\"-f\\\"));\\r\\n     assertEquals(\\\"foo\\\", Util.stripLeadingHyphens(\\\"--foo\\\"));\\r\\n+    assertEquals(\\\"-foo\\\", Util.stripLeadingHyphens(\\\"---foo\\\"));\\r\\n     assertNull(Util.stripLeadingHyphens(null));\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"bayard@apache.org","authorName":"Henri Yandell","commitYear":"2007","diff":"\"@@ -0,0 +1,5 @@\\n+public void testStripLeadingHyphens() {\\r\\n+    assertEquals(\\\"f\\\", Util.stripLeadingHyphens(\\\"-f\\\"));\\r\\n+    assertEquals(\\\"foo\\\", Util.stripLeadingHyphens(\\\"--foo\\\"));\\r\\n+    assertNull(Util.stripLeadingHyphens(null));\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\test\java\org\apache\commons\cli\ValuesTest.java	setUp	org.apache.commons.cli.ValuesTest.setUp()	33	73	1	[{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"@@ -1,19 +1,19 @@\\n @Before\\r\\n public void setUp() throws Exception {\\r\\n     final Options options = new Options();\\r\\n     options.addOption(\\\"a\\\", false, \\\"toggle -a\\\");\\r\\n     options.addOption(\\\"b\\\", true, \\\"set -b\\\");\\r\\n     options.addOption(\\\"c\\\", \\\"c\\\", false, \\\"toggle -c\\\");\\r\\n     options.addOption(\\\"d\\\", \\\"d\\\", true, \\\"set -d\\\");\\r\\n     options.addOption(OptionBuilder.withLongOpt(\\\"e\\\").hasArgs().withDescription(\\\"set -e \\\").create('e'));\\r\\n     options.addOption(\\\"f\\\", \\\"f\\\", false, \\\"jk\\\");\\r\\n     options.addOption(OptionBuilder.withLongOpt(\\\"g\\\").hasArgs(2).withDescription(\\\"set -g\\\").create('g'));\\r\\n     options.addOption(OptionBuilder.withLongOpt(\\\"h\\\").hasArg().withDescription(\\\"set -h\\\").create('h'));\\r\\n     options.addOption(OptionBuilder.withLongOpt(\\\"i\\\").withDescription(\\\"set -i\\\").create('i'));\\r\\n     options.addOption(OptionBuilder.withLongOpt(\\\"j\\\").hasArgs().withDescription(\\\"set -j\\\").withValueSeparator('=').create('j'));\\r\\n     options.addOption(OptionBuilder.withLongOpt(\\\"k\\\").hasArgs().withDescription(\\\"set -k\\\").withValueSeparator('=').create('k'));\\r\\n     options.addOption(OptionBuilder.withLongOpt(\\\"m\\\").hasArgs().withDescription(\\\"set -m\\\").withValueSeparator().create('m'));\\r\\n-    final String[] args = new String[] { \\\"-a\\\", \\\"-b\\\", \\\"foo\\\", \\\"--c\\\", \\\"--d\\\", \\\"bar\\\", \\\"-e\\\", \\\"one\\\", \\\"two\\\", \\\"-f\\\", \\\"arg1\\\", \\\"arg2\\\", \\\"-g\\\", \\\"val1\\\", \\\"val2\\\", \\\"arg3\\\", \\\"-h\\\", \\\"val1\\\", \\\"-i\\\", \\\"-h\\\", \\\"val2\\\", \\\"-jkey=value\\\", \\\"-j\\\", \\\"key=value\\\", \\\"-kkey1=value1\\\", \\\"-kkey2=value2\\\", \\\"-mkey=value\\\" };\\r\\n+    final String[] args = { \\\"-a\\\", \\\"-b\\\", \\\"foo\\\", \\\"--c\\\", \\\"--d\\\", \\\"bar\\\", \\\"-e\\\", \\\"one\\\", \\\"two\\\", \\\"-f\\\", \\\"arg1\\\", \\\"arg2\\\", \\\"-g\\\", \\\"val1\\\", \\\"val2\\\", \\\"arg3\\\", \\\"-h\\\", \\\"val1\\\", \\\"-i\\\", \\\"-h\\\", \\\"val2\\\", \\\"-jkey=value\\\", \\\"-j\\\", \\\"key=value\\\", \\\"-kkey1=value1\\\", \\\"-kkey2=value2\\\", \\\"-mkey=value\\\" };\\r\\n     final CommandLineParser parser = new PosixParser();\\r\\n     cmd = parser.parse(options, args);\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2019","diff":"\"\""},{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,19 +1,19 @@\\n @Before\\r\\n public void setUp() throws Exception {\\r\\n-    Options options = new Options();\\r\\n+    final Options options = new Options();\\r\\n     options.addOption(\\\"a\\\", false, \\\"toggle -a\\\");\\r\\n     options.addOption(\\\"b\\\", true, \\\"set -b\\\");\\r\\n     options.addOption(\\\"c\\\", \\\"c\\\", false, \\\"toggle -c\\\");\\r\\n     options.addOption(\\\"d\\\", \\\"d\\\", true, \\\"set -d\\\");\\r\\n     options.addOption(OptionBuilder.withLongOpt(\\\"e\\\").hasArgs().withDescription(\\\"set -e \\\").create('e'));\\r\\n     options.addOption(\\\"f\\\", \\\"f\\\", false, \\\"jk\\\");\\r\\n     options.addOption(OptionBuilder.withLongOpt(\\\"g\\\").hasArgs(2).withDescription(\\\"set -g\\\").create('g'));\\r\\n     options.addOption(OptionBuilder.withLongOpt(\\\"h\\\").hasArg().withDescription(\\\"set -h\\\").create('h'));\\r\\n     options.addOption(OptionBuilder.withLongOpt(\\\"i\\\").withDescription(\\\"set -i\\\").create('i'));\\r\\n     options.addOption(OptionBuilder.withLongOpt(\\\"j\\\").hasArgs().withDescription(\\\"set -j\\\").withValueSeparator('=').create('j'));\\r\\n     options.addOption(OptionBuilder.withLongOpt(\\\"k\\\").hasArgs().withDescription(\\\"set -k\\\").withValueSeparator('=').create('k'));\\r\\n     options.addOption(OptionBuilder.withLongOpt(\\\"m\\\").hasArgs().withDescription(\\\"set -m\\\").withValueSeparator().create('m'));\\r\\n-    String[] args = new String[] { \\\"-a\\\", \\\"-b\\\", \\\"foo\\\", \\\"--c\\\", \\\"--d\\\", \\\"bar\\\", \\\"-e\\\", \\\"one\\\", \\\"two\\\", \\\"-f\\\", \\\"arg1\\\", \\\"arg2\\\", \\\"-g\\\", \\\"val1\\\", \\\"val2\\\", \\\"arg3\\\", \\\"-h\\\", \\\"val1\\\", \\\"-i\\\", \\\"-h\\\", \\\"val2\\\", \\\"-jkey=value\\\", \\\"-j\\\", \\\"key=value\\\", \\\"-kkey1=value1\\\", \\\"-kkey2=value2\\\", \\\"-mkey=value\\\" };\\r\\n-    CommandLineParser parser = new PosixParser();\\r\\n+    final String[] args = new String[] { \\\"-a\\\", \\\"-b\\\", \\\"foo\\\", \\\"--c\\\", \\\"--d\\\", \\\"bar\\\", \\\"-e\\\", \\\"one\\\", \\\"two\\\", \\\"-f\\\", \\\"arg1\\\", \\\"arg2\\\", \\\"-g\\\", \\\"val1\\\", \\\"val2\\\", \\\"arg3\\\", \\\"-h\\\", \\\"val1\\\", \\\"-i\\\", \\\"-h\\\", \\\"val2\\\", \\\"-jkey=value\\\", \\\"-j\\\", \\\"key=value\\\", \\\"-kkey1=value1\\\", \\\"-kkey2=value2\\\", \\\"-mkey=value\\\" };\\r\\n+    final CommandLineParser parser = new PosixParser();\\r\\n     cmd = parser.parse(options, args);\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"tn@apache.org","authorName":"Thomas Neidhart","commitYear":"2013","diff":"\"@@ -1,19 +1,19 @@\\n-@Override\\r\\n+@Before\\r\\n public void setUp() throws Exception {\\r\\n     Options options = new Options();\\r\\n     options.addOption(\\\"a\\\", false, \\\"toggle -a\\\");\\r\\n     options.addOption(\\\"b\\\", true, \\\"set -b\\\");\\r\\n     options.addOption(\\\"c\\\", \\\"c\\\", false, \\\"toggle -c\\\");\\r\\n     options.addOption(\\\"d\\\", \\\"d\\\", true, \\\"set -d\\\");\\r\\n     options.addOption(OptionBuilder.withLongOpt(\\\"e\\\").hasArgs().withDescription(\\\"set -e \\\").create('e'));\\r\\n     options.addOption(\\\"f\\\", \\\"f\\\", false, \\\"jk\\\");\\r\\n     options.addOption(OptionBuilder.withLongOpt(\\\"g\\\").hasArgs(2).withDescription(\\\"set -g\\\").create('g'));\\r\\n     options.addOption(OptionBuilder.withLongOpt(\\\"h\\\").hasArg().withDescription(\\\"set -h\\\").create('h'));\\r\\n     options.addOption(OptionBuilder.withLongOpt(\\\"i\\\").withDescription(\\\"set -i\\\").create('i'));\\r\\n     options.addOption(OptionBuilder.withLongOpt(\\\"j\\\").hasArgs().withDescription(\\\"set -j\\\").withValueSeparator('=').create('j'));\\r\\n     options.addOption(OptionBuilder.withLongOpt(\\\"k\\\").hasArgs().withDescription(\\\"set -k\\\").withValueSeparator('=').create('k'));\\r\\n     options.addOption(OptionBuilder.withLongOpt(\\\"m\\\").hasArgs().withDescription(\\\"set -m\\\").withValueSeparator().create('m'));\\r\\n     String[] args = new String[] { \\\"-a\\\", \\\"-b\\\", \\\"foo\\\", \\\"--c\\\", \\\"--d\\\", \\\"bar\\\", \\\"-e\\\", \\\"one\\\", \\\"two\\\", \\\"-f\\\", \\\"arg1\\\", \\\"arg2\\\", \\\"-g\\\", \\\"val1\\\", \\\"val2\\\", \\\"arg3\\\", \\\"-h\\\", \\\"val1\\\", \\\"-i\\\", \\\"-h\\\", \\\"val2\\\", \\\"-jkey=value\\\", \\\"-j\\\", \\\"key=value\\\", \\\"-kkey1=value1\\\", \\\"-kkey2=value2\\\", \\\"-mkey=value\\\" };\\r\\n     CommandLineParser parser = new PosixParser();\\r\\n     cmd = parser.parse(options, args);\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"sebb@apache.org","authorName":"Sebastian Bazley","commitYear":"2013","diff":"\"@@ -1,18 +1,19 @@\\n+@Override\\r\\n public void setUp() throws Exception {\\r\\n     Options options = new Options();\\r\\n     options.addOption(\\\"a\\\", false, \\\"toggle -a\\\");\\r\\n     options.addOption(\\\"b\\\", true, \\\"set -b\\\");\\r\\n     options.addOption(\\\"c\\\", \\\"c\\\", false, \\\"toggle -c\\\");\\r\\n     options.addOption(\\\"d\\\", \\\"d\\\", true, \\\"set -d\\\");\\r\\n     options.addOption(OptionBuilder.withLongOpt(\\\"e\\\").hasArgs().withDescription(\\\"set -e \\\").create('e'));\\r\\n     options.addOption(\\\"f\\\", \\\"f\\\", false, \\\"jk\\\");\\r\\n     options.addOption(OptionBuilder.withLongOpt(\\\"g\\\").hasArgs(2).withDescription(\\\"set -g\\\").create('g'));\\r\\n     options.addOption(OptionBuilder.withLongOpt(\\\"h\\\").hasArg().withDescription(\\\"set -h\\\").create('h'));\\r\\n     options.addOption(OptionBuilder.withLongOpt(\\\"i\\\").withDescription(\\\"set -i\\\").create('i'));\\r\\n     options.addOption(OptionBuilder.withLongOpt(\\\"j\\\").hasArgs().withDescription(\\\"set -j\\\").withValueSeparator('=').create('j'));\\r\\n     options.addOption(OptionBuilder.withLongOpt(\\\"k\\\").hasArgs().withDescription(\\\"set -k\\\").withValueSeparator('=').create('k'));\\r\\n     options.addOption(OptionBuilder.withLongOpt(\\\"m\\\").hasArgs().withDescription(\\\"set -m\\\").withValueSeparator().create('m'));\\r\\n     String[] args = new String[] { \\\"-a\\\", \\\"-b\\\", \\\"foo\\\", \\\"--c\\\", \\\"--d\\\", \\\"bar\\\", \\\"-e\\\", \\\"one\\\", \\\"two\\\", \\\"-f\\\", \\\"arg1\\\", \\\"arg2\\\", \\\"-g\\\", \\\"val1\\\", \\\"val2\\\", \\\"arg3\\\", \\\"-h\\\", \\\"val1\\\", \\\"-i\\\", \\\"-h\\\", \\\"val2\\\", \\\"-jkey=value\\\", \\\"-j\\\", \\\"key=value\\\", \\\"-kkey1=value1\\\", \\\"-kkey2=value2\\\", \\\"-mkey=value\\\" };\\r\\n     CommandLineParser parser = new PosixParser();\\r\\n     cmd = parser.parse(options, args);\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2009","diff":"\"@@ -1,18 +1,18 @@\\n public void setUp() throws Exception {\\r\\n     Options options = new Options();\\r\\n     options.addOption(\\\"a\\\", false, \\\"toggle -a\\\");\\r\\n     options.addOption(\\\"b\\\", true, \\\"set -b\\\");\\r\\n     options.addOption(\\\"c\\\", \\\"c\\\", false, \\\"toggle -c\\\");\\r\\n     options.addOption(\\\"d\\\", \\\"d\\\", true, \\\"set -d\\\");\\r\\n     options.addOption(OptionBuilder.withLongOpt(\\\"e\\\").hasArgs().withDescription(\\\"set -e \\\").create('e'));\\r\\n     options.addOption(\\\"f\\\", \\\"f\\\", false, \\\"jk\\\");\\r\\n     options.addOption(OptionBuilder.withLongOpt(\\\"g\\\").hasArgs(2).withDescription(\\\"set -g\\\").create('g'));\\r\\n-    options.addOption(OptionBuilder.withLongOpt(\\\"h\\\").hasArgs(2).withDescription(\\\"set -h\\\").create('h'));\\r\\n+    options.addOption(OptionBuilder.withLongOpt(\\\"h\\\").hasArg().withDescription(\\\"set -h\\\").create('h'));\\r\\n     options.addOption(OptionBuilder.withLongOpt(\\\"i\\\").withDescription(\\\"set -i\\\").create('i'));\\r\\n     options.addOption(OptionBuilder.withLongOpt(\\\"j\\\").hasArgs().withDescription(\\\"set -j\\\").withValueSeparator('=').create('j'));\\r\\n     options.addOption(OptionBuilder.withLongOpt(\\\"k\\\").hasArgs().withDescription(\\\"set -k\\\").withValueSeparator('=').create('k'));\\r\\n     options.addOption(OptionBuilder.withLongOpt(\\\"m\\\").hasArgs().withDescription(\\\"set -m\\\").withValueSeparator().create('m'));\\r\\n     String[] args = new String[] { \\\"-a\\\", \\\"-b\\\", \\\"foo\\\", \\\"--c\\\", \\\"--d\\\", \\\"bar\\\", \\\"-e\\\", \\\"one\\\", \\\"two\\\", \\\"-f\\\", \\\"arg1\\\", \\\"arg2\\\", \\\"-g\\\", \\\"val1\\\", \\\"val2\\\", \\\"arg3\\\", \\\"-h\\\", \\\"val1\\\", \\\"-i\\\", \\\"-h\\\", \\\"val2\\\", \\\"-jkey=value\\\", \\\"-j\\\", \\\"key=value\\\", \\\"-kkey1=value1\\\", \\\"-kkey2=value2\\\", \\\"-mkey=value\\\" };\\r\\n     CommandLineParser parser = new PosixParser();\\r\\n-    _cmdline = parser.parse(options, args);\\r\\n+    cmd = parser.parse(options, args);\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2008","diff":"\"@@ -1,18 +1,18 @@\\n public void setUp() throws Exception {\\r\\n-    Options opts = new Options();\\r\\n-    opts.addOption(\\\"a\\\", false, \\\"toggle -a\\\");\\r\\n-    opts.addOption(\\\"b\\\", true, \\\"set -b\\\");\\r\\n-    opts.addOption(\\\"c\\\", \\\"c\\\", false, \\\"toggle -c\\\");\\r\\n-    opts.addOption(\\\"d\\\", \\\"d\\\", true, \\\"set -d\\\");\\r\\n-    opts.addOption(OptionBuilder.withLongOpt(\\\"e\\\").hasArgs().withDescription(\\\"set -e \\\").create('e'));\\r\\n-    opts.addOption(\\\"f\\\", \\\"f\\\", false, \\\"jk\\\");\\r\\n-    opts.addOption(OptionBuilder.withLongOpt(\\\"g\\\").hasArgs(2).withDescription(\\\"set -g\\\").create('g'));\\r\\n-    opts.addOption(OptionBuilder.withLongOpt(\\\"h\\\").hasArgs(2).withDescription(\\\"set -h\\\").create('h'));\\r\\n-    opts.addOption(OptionBuilder.withLongOpt(\\\"i\\\").withDescription(\\\"set -i\\\").create('i'));\\r\\n-    opts.addOption(OptionBuilder.withLongOpt(\\\"j\\\").hasArgs().withDescription(\\\"set -j\\\").withValueSeparator('=').create('j'));\\r\\n-    opts.addOption(OptionBuilder.withLongOpt(\\\"k\\\").hasArgs().withDescription(\\\"set -k\\\").withValueSeparator('=').create('k'));\\r\\n-    opts.addOption(OptionBuilder.withLongOpt(\\\"m\\\").hasArgs().withDescription(\\\"set -m\\\").withValueSeparator().create('m'));\\r\\n+    Options options = new Options();\\r\\n+    options.addOption(\\\"a\\\", false, \\\"toggle -a\\\");\\r\\n+    options.addOption(\\\"b\\\", true, \\\"set -b\\\");\\r\\n+    options.addOption(\\\"c\\\", \\\"c\\\", false, \\\"toggle -c\\\");\\r\\n+    options.addOption(\\\"d\\\", \\\"d\\\", true, \\\"set -d\\\");\\r\\n+    options.addOption(OptionBuilder.withLongOpt(\\\"e\\\").hasArgs().withDescription(\\\"set -e \\\").create('e'));\\r\\n+    options.addOption(\\\"f\\\", \\\"f\\\", false, \\\"jk\\\");\\r\\n+    options.addOption(OptionBuilder.withLongOpt(\\\"g\\\").hasArgs(2).withDescription(\\\"set -g\\\").create('g'));\\r\\n+    options.addOption(OptionBuilder.withLongOpt(\\\"h\\\").hasArgs(2).withDescription(\\\"set -h\\\").create('h'));\\r\\n+    options.addOption(OptionBuilder.withLongOpt(\\\"i\\\").withDescription(\\\"set -i\\\").create('i'));\\r\\n+    options.addOption(OptionBuilder.withLongOpt(\\\"j\\\").hasArgs().withDescription(\\\"set -j\\\").withValueSeparator('=').create('j'));\\r\\n+    options.addOption(OptionBuilder.withLongOpt(\\\"k\\\").hasArgs().withDescription(\\\"set -k\\\").withValueSeparator('=').create('k'));\\r\\n+    options.addOption(OptionBuilder.withLongOpt(\\\"m\\\").hasArgs().withDescription(\\\"set -m\\\").withValueSeparator().create('m'));\\r\\n     String[] args = new String[] { \\\"-a\\\", \\\"-b\\\", \\\"foo\\\", \\\"--c\\\", \\\"--d\\\", \\\"bar\\\", \\\"-e\\\", \\\"one\\\", \\\"two\\\", \\\"-f\\\", \\\"arg1\\\", \\\"arg2\\\", \\\"-g\\\", \\\"val1\\\", \\\"val2\\\", \\\"arg3\\\", \\\"-h\\\", \\\"val1\\\", \\\"-i\\\", \\\"-h\\\", \\\"val2\\\", \\\"-jkey=value\\\", \\\"-j\\\", \\\"key=value\\\", \\\"-kkey1=value1\\\", \\\"-kkey2=value2\\\", \\\"-mkey=value\\\" };\\r\\n     CommandLineParser parser = new PosixParser();\\r\\n-    _cmdline = parser.parse(opts, args);\\r\\n+    _cmdline = parser.parse(options, args);\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2008","diff":"\"@@ -1,23 +1,18 @@\\n-public void setUp() {\\r\\n+public void setUp() throws Exception {\\r\\n     Options opts = new Options();\\r\\n     opts.addOption(\\\"a\\\", false, \\\"toggle -a\\\");\\r\\n     opts.addOption(\\\"b\\\", true, \\\"set -b\\\");\\r\\n     opts.addOption(\\\"c\\\", \\\"c\\\", false, \\\"toggle -c\\\");\\r\\n     opts.addOption(\\\"d\\\", \\\"d\\\", true, \\\"set -d\\\");\\r\\n     opts.addOption(OptionBuilder.withLongOpt(\\\"e\\\").hasArgs().withDescription(\\\"set -e \\\").create('e'));\\r\\n     opts.addOption(\\\"f\\\", \\\"f\\\", false, \\\"jk\\\");\\r\\n     opts.addOption(OptionBuilder.withLongOpt(\\\"g\\\").hasArgs(2).withDescription(\\\"set -g\\\").create('g'));\\r\\n     opts.addOption(OptionBuilder.withLongOpt(\\\"h\\\").hasArgs(2).withDescription(\\\"set -h\\\").create('h'));\\r\\n     opts.addOption(OptionBuilder.withLongOpt(\\\"i\\\").withDescription(\\\"set -i\\\").create('i'));\\r\\n     opts.addOption(OptionBuilder.withLongOpt(\\\"j\\\").hasArgs().withDescription(\\\"set -j\\\").withValueSeparator('=').create('j'));\\r\\n     opts.addOption(OptionBuilder.withLongOpt(\\\"k\\\").hasArgs().withDescription(\\\"set -k\\\").withValueSeparator('=').create('k'));\\r\\n-    _option = OptionBuilder.withLongOpt(\\\"m\\\").hasArgs().withDescription(\\\"set -m\\\").withValueSeparator().create('m');\\r\\n-    opts.addOption(_option);\\r\\n+    opts.addOption(OptionBuilder.withLongOpt(\\\"m\\\").hasArgs().withDescription(\\\"set -m\\\").withValueSeparator().create('m'));\\r\\n     String[] args = new String[] { \\\"-a\\\", \\\"-b\\\", \\\"foo\\\", \\\"--c\\\", \\\"--d\\\", \\\"bar\\\", \\\"-e\\\", \\\"one\\\", \\\"two\\\", \\\"-f\\\", \\\"arg1\\\", \\\"arg2\\\", \\\"-g\\\", \\\"val1\\\", \\\"val2\\\", \\\"arg3\\\", \\\"-h\\\", \\\"val1\\\", \\\"-i\\\", \\\"-h\\\", \\\"val2\\\", \\\"-jkey=value\\\", \\\"-j\\\", \\\"key=value\\\", \\\"-kkey1=value1\\\", \\\"-kkey2=value2\\\", \\\"-mkey=value\\\" };\\r\\n     CommandLineParser parser = new PosixParser();\\r\\n-    try {\\r\\n-        _cmdline = parser.parse(opts, args);\\r\\n-    } catch (ParseException e) {\\r\\n-        fail(\\\"Cannot setUp() CommandLine: \\\" + e.toString());\\r\\n-    }\\r\\n+    _cmdline = parser.parse(opts, args);\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -1,23 +1,23 @@\\n public void setUp() {\\r\\n     Options opts = new Options();\\r\\n     opts.addOption(\\\"a\\\", false, \\\"toggle -a\\\");\\r\\n     opts.addOption(\\\"b\\\", true, \\\"set -b\\\");\\r\\n     opts.addOption(\\\"c\\\", \\\"c\\\", false, \\\"toggle -c\\\");\\r\\n     opts.addOption(\\\"d\\\", \\\"d\\\", true, \\\"set -d\\\");\\r\\n     opts.addOption(OptionBuilder.withLongOpt(\\\"e\\\").hasArgs().withDescription(\\\"set -e \\\").create('e'));\\r\\n     opts.addOption(\\\"f\\\", \\\"f\\\", false, \\\"jk\\\");\\r\\n     opts.addOption(OptionBuilder.withLongOpt(\\\"g\\\").hasArgs(2).withDescription(\\\"set -g\\\").create('g'));\\r\\n     opts.addOption(OptionBuilder.withLongOpt(\\\"h\\\").hasArgs(2).withDescription(\\\"set -h\\\").create('h'));\\r\\n     opts.addOption(OptionBuilder.withLongOpt(\\\"i\\\").withDescription(\\\"set -i\\\").create('i'));\\r\\n     opts.addOption(OptionBuilder.withLongOpt(\\\"j\\\").hasArgs().withDescription(\\\"set -j\\\").withValueSeparator('=').create('j'));\\r\\n     opts.addOption(OptionBuilder.withLongOpt(\\\"k\\\").hasArgs().withDescription(\\\"set -k\\\").withValueSeparator('=').create('k'));\\r\\n     _option = OptionBuilder.withLongOpt(\\\"m\\\").hasArgs().withDescription(\\\"set -m\\\").withValueSeparator().create('m');\\r\\n     opts.addOption(_option);\\r\\n     String[] args = new String[] { \\\"-a\\\", \\\"-b\\\", \\\"foo\\\", \\\"--c\\\", \\\"--d\\\", \\\"bar\\\", \\\"-e\\\", \\\"one\\\", \\\"two\\\", \\\"-f\\\", \\\"arg1\\\", \\\"arg2\\\", \\\"-g\\\", \\\"val1\\\", \\\"val2\\\", \\\"arg3\\\", \\\"-h\\\", \\\"val1\\\", \\\"-i\\\", \\\"-h\\\", \\\"val2\\\", \\\"-jkey=value\\\", \\\"-j\\\", \\\"key=value\\\", \\\"-kkey1=value1\\\", \\\"-kkey2=value2\\\", \\\"-mkey=value\\\" };\\r\\n-    CommandLineParser parser = CommandLineParserFactory.newParser();\\r\\n+    CommandLineParser parser = new PosixParser();\\r\\n     try {\\r\\n         _cmdline = parser.parse(opts, args);\\r\\n     } catch (ParseException e) {\\r\\n         fail(\\\"Cannot setUp() CommandLine: \\\" + e.toString());\\r\\n     }\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -1,23 +1,23 @@\\n public void setUp() {\\r\\n     Options opts = new Options();\\r\\n     opts.addOption(\\\"a\\\", false, \\\"toggle -a\\\");\\r\\n     opts.addOption(\\\"b\\\", true, \\\"set -b\\\");\\r\\n     opts.addOption(\\\"c\\\", \\\"c\\\", false, \\\"toggle -c\\\");\\r\\n     opts.addOption(\\\"d\\\", \\\"d\\\", true, \\\"set -d\\\");\\r\\n     opts.addOption(OptionBuilder.withLongOpt(\\\"e\\\").hasArgs().withDescription(\\\"set -e \\\").create('e'));\\r\\n     opts.addOption(\\\"f\\\", \\\"f\\\", false, \\\"jk\\\");\\r\\n     opts.addOption(OptionBuilder.withLongOpt(\\\"g\\\").hasArgs(2).withDescription(\\\"set -g\\\").create('g'));\\r\\n     opts.addOption(OptionBuilder.withLongOpt(\\\"h\\\").hasArgs(2).withDescription(\\\"set -h\\\").create('h'));\\r\\n     opts.addOption(OptionBuilder.withLongOpt(\\\"i\\\").withDescription(\\\"set -i\\\").create('i'));\\r\\n-    opts.addOption(OptionBuilder.withLongOpt(\\\"j\\\").hasArgs(2).withDescription(\\\"set -j\\\").withValueSeparator('=').create('j'));\\r\\n+    opts.addOption(OptionBuilder.withLongOpt(\\\"j\\\").hasArgs().withDescription(\\\"set -j\\\").withValueSeparator('=').create('j'));\\r\\n     opts.addOption(OptionBuilder.withLongOpt(\\\"k\\\").hasArgs().withDescription(\\\"set -k\\\").withValueSeparator('=').create('k'));\\r\\n     _option = OptionBuilder.withLongOpt(\\\"m\\\").hasArgs().withDescription(\\\"set -m\\\").withValueSeparator().create('m');\\r\\n     opts.addOption(_option);\\r\\n     String[] args = new String[] { \\\"-a\\\", \\\"-b\\\", \\\"foo\\\", \\\"--c\\\", \\\"--d\\\", \\\"bar\\\", \\\"-e\\\", \\\"one\\\", \\\"two\\\", \\\"-f\\\", \\\"arg1\\\", \\\"arg2\\\", \\\"-g\\\", \\\"val1\\\", \\\"val2\\\", \\\"arg3\\\", \\\"-h\\\", \\\"val1\\\", \\\"-i\\\", \\\"-h\\\", \\\"val2\\\", \\\"-jkey=value\\\", \\\"-j\\\", \\\"key=value\\\", \\\"-kkey1=value1\\\", \\\"-kkey2=value2\\\", \\\"-mkey=value\\\" };\\r\\n     CommandLineParser parser = CommandLineParserFactory.newParser();\\r\\n     try {\\r\\n         _cmdline = parser.parse(opts, args);\\r\\n     } catch (ParseException e) {\\r\\n         fail(\\\"Cannot setUp() CommandLine: \\\" + e.toString());\\r\\n     }\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -1,19 +1,23 @@\\n public void setUp() {\\r\\n     Options opts = new Options();\\r\\n     opts.addOption(\\\"a\\\", false, \\\"toggle -a\\\");\\r\\n     opts.addOption(\\\"b\\\", true, \\\"set -b\\\");\\r\\n     opts.addOption(\\\"c\\\", \\\"c\\\", false, \\\"toggle -c\\\");\\r\\n     opts.addOption(\\\"d\\\", \\\"d\\\", true, \\\"set -d\\\");\\r\\n     opts.addOption(OptionBuilder.withLongOpt(\\\"e\\\").hasArgs().withDescription(\\\"set -e \\\").create('e'));\\r\\n     opts.addOption(\\\"f\\\", \\\"f\\\", false, \\\"jk\\\");\\r\\n     opts.addOption(OptionBuilder.withLongOpt(\\\"g\\\").hasArgs(2).withDescription(\\\"set -g\\\").create('g'));\\r\\n     opts.addOption(OptionBuilder.withLongOpt(\\\"h\\\").hasArgs(2).withDescription(\\\"set -h\\\").create('h'));\\r\\n     opts.addOption(OptionBuilder.withLongOpt(\\\"i\\\").withDescription(\\\"set -i\\\").create('i'));\\r\\n-    String[] args = new String[] { \\\"-a\\\", \\\"-b\\\", \\\"foo\\\", \\\"--c\\\", \\\"--d\\\", \\\"bar\\\", \\\"-e\\\", \\\"one\\\", \\\"two\\\", \\\"-f\\\", \\\"arg1\\\", \\\"arg2\\\", \\\"-g\\\", \\\"val1\\\", \\\"val2\\\", \\\"arg3\\\", \\\"-h\\\", \\\"val1\\\", \\\"-i\\\", \\\"-h\\\", \\\"val2\\\" };\\r\\n+    opts.addOption(OptionBuilder.withLongOpt(\\\"j\\\").hasArgs(2).withDescription(\\\"set -j\\\").withValueSeparator('=').create('j'));\\r\\n+    opts.addOption(OptionBuilder.withLongOpt(\\\"k\\\").hasArgs().withDescription(\\\"set -k\\\").withValueSeparator('=').create('k'));\\r\\n+    _option = OptionBuilder.withLongOpt(\\\"m\\\").hasArgs().withDescription(\\\"set -m\\\").withValueSeparator().create('m');\\r\\n+    opts.addOption(_option);\\r\\n+    String[] args = new String[] { \\\"-a\\\", \\\"-b\\\", \\\"foo\\\", \\\"--c\\\", \\\"--d\\\", \\\"bar\\\", \\\"-e\\\", \\\"one\\\", \\\"two\\\", \\\"-f\\\", \\\"arg1\\\", \\\"arg2\\\", \\\"-g\\\", \\\"val1\\\", \\\"val2\\\", \\\"arg3\\\", \\\"-h\\\", \\\"val1\\\", \\\"-i\\\", \\\"-h\\\", \\\"val2\\\", \\\"-jkey=value\\\", \\\"-j\\\", \\\"key=value\\\", \\\"-kkey1=value1\\\", \\\"-kkey2=value2\\\", \\\"-mkey=value\\\" };\\r\\n     CommandLineParser parser = CommandLineParserFactory.newParser();\\r\\n     try {\\r\\n         _cmdline = parser.parse(opts, args);\\r\\n     } catch (ParseException e) {\\r\\n         fail(\\\"Cannot setUp() CommandLine: \\\" + e.toString());\\r\\n     }\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -1,16 +1,19 @@\\n public void setUp() {\\r\\n     Options opts = new Options();\\r\\n     opts.addOption(\\\"a\\\", false, \\\"toggle -a\\\");\\r\\n     opts.addOption(\\\"b\\\", true, \\\"set -b\\\");\\r\\n     opts.addOption(\\\"c\\\", \\\"c\\\", false, \\\"toggle -c\\\");\\r\\n     opts.addOption(\\\"d\\\", \\\"d\\\", true, \\\"set -d\\\");\\r\\n-    opts.addOption(OptionBuilder.withLongOpt(\\\"e\\\").hasArg().hasMultipleArgs().withDescription(\\\"set -e \\\").create('e'));\\r\\n+    opts.addOption(OptionBuilder.withLongOpt(\\\"e\\\").hasArgs().withDescription(\\\"set -e \\\").create('e'));\\r\\n     opts.addOption(\\\"f\\\", \\\"f\\\", false, \\\"jk\\\");\\r\\n-    String[] args = new String[] { \\\"-a\\\", \\\"-b\\\", \\\"foo\\\", \\\"--c\\\", \\\"--d\\\", \\\"bar\\\", \\\"-e\\\", \\\"one\\\", \\\"two\\\", \\\"-f\\\", \\\"arg1\\\", \\\"arg2\\\" };\\r\\n+    opts.addOption(OptionBuilder.withLongOpt(\\\"g\\\").hasArgs(2).withDescription(\\\"set -g\\\").create('g'));\\r\\n+    opts.addOption(OptionBuilder.withLongOpt(\\\"h\\\").hasArgs(2).withDescription(\\\"set -h\\\").create('h'));\\r\\n+    opts.addOption(OptionBuilder.withLongOpt(\\\"i\\\").withDescription(\\\"set -i\\\").create('i'));\\r\\n+    String[] args = new String[] { \\\"-a\\\", \\\"-b\\\", \\\"foo\\\", \\\"--c\\\", \\\"--d\\\", \\\"bar\\\", \\\"-e\\\", \\\"one\\\", \\\"two\\\", \\\"-f\\\", \\\"arg1\\\", \\\"arg2\\\", \\\"-g\\\", \\\"val1\\\", \\\"val2\\\", \\\"arg3\\\", \\\"-h\\\", \\\"val1\\\", \\\"-i\\\", \\\"-h\\\", \\\"val2\\\" };\\r\\n     CommandLineParser parser = CommandLineParserFactory.newParser();\\r\\n     try {\\r\\n-        _cl = parser.parse(opts, args);\\r\\n+        _cmdline = parser.parse(opts, args);\\r\\n     } catch (ParseException e) {\\r\\n         fail(\\\"Cannot setUp() CommandLine: \\\" + e.toString());\\r\\n     }\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -1,16 +1,16 @@\\n public void setUp() {\\r\\n     Options opts = new Options();\\r\\n     opts.addOption(\\\"a\\\", false, \\\"toggle -a\\\");\\r\\n     opts.addOption(\\\"b\\\", true, \\\"set -b\\\");\\r\\n     opts.addOption(\\\"c\\\", \\\"c\\\", false, \\\"toggle -c\\\");\\r\\n     opts.addOption(\\\"d\\\", \\\"d\\\", true, \\\"set -d\\\");\\r\\n-    opts.addOption(\\\"e\\\", \\\"e\\\", true, \\\"set -e\\\", false, true);\\r\\n+    opts.addOption(OptionBuilder.withLongOpt(\\\"e\\\").hasArg().hasMultipleArgs().withDescription(\\\"set -e \\\").create('e'));\\r\\n     opts.addOption(\\\"f\\\", \\\"f\\\", false, \\\"jk\\\");\\r\\n     String[] args = new String[] { \\\"-a\\\", \\\"-b\\\", \\\"foo\\\", \\\"--c\\\", \\\"--d\\\", \\\"bar\\\", \\\"-e\\\", \\\"one\\\", \\\"two\\\", \\\"-f\\\", \\\"arg1\\\", \\\"arg2\\\" };\\r\\n     CommandLineParser parser = CommandLineParserFactory.newParser();\\r\\n     try {\\r\\n         _cl = parser.parse(opts, args);\\r\\n     } catch (ParseException e) {\\r\\n         fail(\\\"Cannot setUp() CommandLine: \\\" + e.toString());\\r\\n     }\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -1,15 +1,16 @@\\n public void setUp() {\\r\\n     Options opts = new Options();\\r\\n     opts.addOption(\\\"a\\\", false, \\\"toggle -a\\\");\\r\\n     opts.addOption(\\\"b\\\", true, \\\"set -b\\\");\\r\\n     opts.addOption(\\\"c\\\", \\\"c\\\", false, \\\"toggle -c\\\");\\r\\n     opts.addOption(\\\"d\\\", \\\"d\\\", true, \\\"set -d\\\");\\r\\n     opts.addOption(\\\"e\\\", \\\"e\\\", true, \\\"set -e\\\", false, true);\\r\\n     opts.addOption(\\\"f\\\", \\\"f\\\", false, \\\"jk\\\");\\r\\n     String[] args = new String[] { \\\"-a\\\", \\\"-b\\\", \\\"foo\\\", \\\"--c\\\", \\\"--d\\\", \\\"bar\\\", \\\"-e\\\", \\\"one\\\", \\\"two\\\", \\\"-f\\\", \\\"arg1\\\", \\\"arg2\\\" };\\r\\n+    CommandLineParser parser = CommandLineParserFactory.newParser();\\r\\n     try {\\r\\n-        _cl = opts.parse(args);\\r\\n+        _cl = parser.parse(opts, args);\\r\\n     } catch (ParseException e) {\\r\\n         fail(\\\"Cannot setUp() CommandLine: \\\" + e.toString());\\r\\n     }\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -1,15 +1,15 @@\\n public void setUp() {\\r\\n     Options opts = new Options();\\r\\n-    opts.addOption('a', false, \\\"toggle -a\\\");\\r\\n-    opts.addOption('b', true, \\\"set -b\\\");\\r\\n-    opts.addOption('c', \\\"c\\\", false, \\\"toggle -c\\\");\\r\\n-    opts.addOption('d', \\\"d\\\", true, \\\"set -d\\\");\\r\\n-    opts.addOption('e', \\\"e\\\", true, \\\"set -e\\\", false, true);\\r\\n-    opts.addOption('f', \\\"f\\\", false, \\\"jk\\\");\\r\\n+    opts.addOption(\\\"a\\\", false, \\\"toggle -a\\\");\\r\\n+    opts.addOption(\\\"b\\\", true, \\\"set -b\\\");\\r\\n+    opts.addOption(\\\"c\\\", \\\"c\\\", false, \\\"toggle -c\\\");\\r\\n+    opts.addOption(\\\"d\\\", \\\"d\\\", true, \\\"set -d\\\");\\r\\n+    opts.addOption(\\\"e\\\", \\\"e\\\", true, \\\"set -e\\\", false, true);\\r\\n+    opts.addOption(\\\"f\\\", \\\"f\\\", false, \\\"jk\\\");\\r\\n     String[] args = new String[] { \\\"-a\\\", \\\"-b\\\", \\\"foo\\\", \\\"--c\\\", \\\"--d\\\", \\\"bar\\\", \\\"-e\\\", \\\"one\\\", \\\"two\\\", \\\"-f\\\", \\\"arg1\\\", \\\"arg2\\\" };\\r\\n     try {\\r\\n         _cl = opts.parse(args);\\r\\n     } catch (ParseException e) {\\r\\n         fail(\\\"Cannot setUp() CommandLine: \\\" + e.toString());\\r\\n     }\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jstrachan@apache.org","authorName":"James Strachan","commitYear":"2002","diff":"\"@@ -0,0 +1,15 @@\\n+public void setUp() {\\r\\n+    Options opts = new Options();\\r\\n+    opts.addOption('a', false, \\\"toggle -a\\\");\\r\\n+    opts.addOption('b', true, \\\"set -b\\\");\\r\\n+    opts.addOption('c', \\\"c\\\", false, \\\"toggle -c\\\");\\r\\n+    opts.addOption('d', \\\"d\\\", true, \\\"set -d\\\");\\r\\n+    opts.addOption('e', \\\"e\\\", true, \\\"set -e\\\", false, true);\\r\\n+    opts.addOption('f', \\\"f\\\", false, \\\"jk\\\");\\r\\n+    String[] args = new String[] { \\\"-a\\\", \\\"-b\\\", \\\"foo\\\", \\\"--c\\\", \\\"--d\\\", \\\"bar\\\", \\\"-e\\\", \\\"one\\\", \\\"two\\\", \\\"-f\\\", \\\"arg1\\\", \\\"arg2\\\" };\\r\\n+    try {\\r\\n+        _cl = opts.parse(args);\\r\\n+    } catch (ParseException e) {\\r\\n+        fail(\\\"Cannot setUp() CommandLine: \\\" + e.toString());\\r\\n+    }\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\test\java\org\apache\commons\cli\ValuesTest.java	testCharSeparator	org.apache.commons.cli.ValuesTest.testCharSeparator()	76	92	1	[{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"\""},{"authorEmail":"tn@apache.org","authorName":"Thomas Neidhart","commitYear":"2013","diff":"\"@@ -1,14 +1,15 @@\\n+@Test\\r\\n public void testCharSeparator() {\\r\\n     assertTrue(\\\"Option j is not set\\\", cmd.hasOption(\\\"j\\\"));\\r\\n     assertTrue(\\\"Option j is not set\\\", cmd.hasOption('j'));\\r\\n-    ArrayAssert.assertEquals(new String[] { \\\"key\\\", \\\"value\\\", \\\"key\\\", \\\"value\\\" }, cmd.getOptionValues(\\\"j\\\"));\\r\\n-    ArrayAssert.assertEquals(new String[] { \\\"key\\\", \\\"value\\\", \\\"key\\\", \\\"value\\\" }, cmd.getOptionValues('j'));\\r\\n+    assertArrayEquals(new String[] { \\\"key\\\", \\\"value\\\", \\\"key\\\", \\\"value\\\" }, cmd.getOptionValues(\\\"j\\\"));\\r\\n+    assertArrayEquals(new String[] { \\\"key\\\", \\\"value\\\", \\\"key\\\", \\\"value\\\" }, cmd.getOptionValues('j'));\\r\\n     assertTrue(\\\"Option k is not set\\\", cmd.hasOption(\\\"k\\\"));\\r\\n     assertTrue(\\\"Option k is not set\\\", cmd.hasOption('k'));\\r\\n-    ArrayAssert.assertEquals(new String[] { \\\"key1\\\", \\\"value1\\\", \\\"key2\\\", \\\"value2\\\" }, cmd.getOptionValues(\\\"k\\\"));\\r\\n-    ArrayAssert.assertEquals(new String[] { \\\"key1\\\", \\\"value1\\\", \\\"key2\\\", \\\"value2\\\" }, cmd.getOptionValues('k'));\\r\\n+    assertArrayEquals(new String[] { \\\"key1\\\", \\\"value1\\\", \\\"key2\\\", \\\"value2\\\" }, cmd.getOptionValues(\\\"k\\\"));\\r\\n+    assertArrayEquals(new String[] { \\\"key1\\\", \\\"value1\\\", \\\"key2\\\", \\\"value2\\\" }, cmd.getOptionValues('k'));\\r\\n     assertTrue(\\\"Option m is not set\\\", cmd.hasOption(\\\"m\\\"));\\r\\n     assertTrue(\\\"Option m is not set\\\", cmd.hasOption('m'));\\r\\n-    ArrayAssert.assertEquals(new String[] { \\\"key\\\", \\\"value\\\" }, cmd.getOptionValues(\\\"m\\\"));\\r\\n-    ArrayAssert.assertEquals(new String[] { \\\"key\\\", \\\"value\\\" }, cmd.getOptionValues('m'));\\r\\n+    assertArrayEquals(new String[] { \\\"key\\\", \\\"value\\\" }, cmd.getOptionValues(\\\"m\\\"));\\r\\n+    assertArrayEquals(new String[] { \\\"key\\\", \\\"value\\\" }, cmd.getOptionValues('m'));\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2009","diff":"\"@@ -1,23 +1,14 @@\\n public void testCharSeparator() {\\r\\n-    String[] values = new String[] { \\\"key\\\", \\\"value\\\", \\\"key\\\", \\\"value\\\" };\\r\\n-    assertTrue(_cmdline.hasOption(\\\"j\\\"));\\r\\n-    assertTrue(_cmdline.hasOption('j'));\\r\\n-    assertEquals(4, _cmdline.getOptionValues(\\\"j\\\").length);\\r\\n-    assertEquals(4, _cmdline.getOptionValues('j').length);\\r\\n-    assertTrue(Arrays.equals(values, _cmdline.getOptionValues(\\\"j\\\")));\\r\\n-    assertTrue(Arrays.equals(values, _cmdline.getOptionValues('j')));\\r\\n-    values = new String[] { \\\"key1\\\", \\\"value1\\\", \\\"key2\\\", \\\"value2\\\" };\\r\\n-    assertTrue(_cmdline.hasOption(\\\"k\\\"));\\r\\n-    assertTrue(_cmdline.hasOption('k'));\\r\\n-    assertEquals(4, _cmdline.getOptionValues(\\\"k\\\").length);\\r\\n-    assertEquals(4, _cmdline.getOptionValues('k').length);\\r\\n-    assertTrue(Arrays.equals(values, _cmdline.getOptionValues(\\\"k\\\")));\\r\\n-    assertTrue(Arrays.equals(values, _cmdline.getOptionValues('k')));\\r\\n-    values = new String[] { \\\"key\\\", \\\"value\\\" };\\r\\n-    assertTrue(_cmdline.hasOption(\\\"m\\\"));\\r\\n-    assertTrue(_cmdline.hasOption('m'));\\r\\n-    assertEquals(2, _cmdline.getOptionValues(\\\"m\\\").length);\\r\\n-    assertEquals(2, _cmdline.getOptionValues('m').length);\\r\\n-    assertTrue(Arrays.equals(values, _cmdline.getOptionValues(\\\"m\\\")));\\r\\n-    assertTrue(Arrays.equals(values, _cmdline.getOptionValues('m')));\\r\\n+    assertTrue(\\\"Option j is not set\\\", cmd.hasOption(\\\"j\\\"));\\r\\n+    assertTrue(\\\"Option j is not set\\\", cmd.hasOption('j'));\\r\\n+    ArrayAssert.assertEquals(new String[] { \\\"key\\\", \\\"value\\\", \\\"key\\\", \\\"value\\\" }, cmd.getOptionValues(\\\"j\\\"));\\r\\n+    ArrayAssert.assertEquals(new String[] { \\\"key\\\", \\\"value\\\", \\\"key\\\", \\\"value\\\" }, cmd.getOptionValues('j'));\\r\\n+    assertTrue(\\\"Option k is not set\\\", cmd.hasOption(\\\"k\\\"));\\r\\n+    assertTrue(\\\"Option k is not set\\\", cmd.hasOption('k'));\\r\\n+    ArrayAssert.assertEquals(new String[] { \\\"key1\\\", \\\"value1\\\", \\\"key2\\\", \\\"value2\\\" }, cmd.getOptionValues(\\\"k\\\"));\\r\\n+    ArrayAssert.assertEquals(new String[] { \\\"key1\\\", \\\"value1\\\", \\\"key2\\\", \\\"value2\\\" }, cmd.getOptionValues('k'));\\r\\n+    assertTrue(\\\"Option m is not set\\\", cmd.hasOption(\\\"m\\\"));\\r\\n+    assertTrue(\\\"Option m is not set\\\", cmd.hasOption('m'));\\r\\n+    ArrayAssert.assertEquals(new String[] { \\\"key\\\", \\\"value\\\" }, cmd.getOptionValues(\\\"m\\\"));\\r\\n+    ArrayAssert.assertEquals(new String[] { \\\"key\\\", \\\"value\\\" }, cmd.getOptionValues('m'));\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2008","diff":"\"@@ -1,23 +1,23 @@\\n public void testCharSeparator() {\\r\\n     String[] values = new String[] { \\\"key\\\", \\\"value\\\", \\\"key\\\", \\\"value\\\" };\\r\\n     assertTrue(_cmdline.hasOption(\\\"j\\\"));\\r\\n     assertTrue(_cmdline.hasOption('j'));\\r\\n     assertEquals(4, _cmdline.getOptionValues(\\\"j\\\").length);\\r\\n     assertEquals(4, _cmdline.getOptionValues('j').length);\\r\\n     assertTrue(Arrays.equals(values, _cmdline.getOptionValues(\\\"j\\\")));\\r\\n     assertTrue(Arrays.equals(values, _cmdline.getOptionValues('j')));\\r\\n     values = new String[] { \\\"key1\\\", \\\"value1\\\", \\\"key2\\\", \\\"value2\\\" };\\r\\n     assertTrue(_cmdline.hasOption(\\\"k\\\"));\\r\\n     assertTrue(_cmdline.hasOption('k'));\\r\\n-    assertTrue(_cmdline.getOptionValues(\\\"k\\\").length == 4);\\r\\n-    assertTrue(_cmdline.getOptionValues('k').length == 4);\\r\\n+    assertEquals(4, _cmdline.getOptionValues(\\\"k\\\").length);\\r\\n+    assertEquals(4, _cmdline.getOptionValues('k').length);\\r\\n     assertTrue(Arrays.equals(values, _cmdline.getOptionValues(\\\"k\\\")));\\r\\n     assertTrue(Arrays.equals(values, _cmdline.getOptionValues('k')));\\r\\n     values = new String[] { \\\"key\\\", \\\"value\\\" };\\r\\n     assertTrue(_cmdline.hasOption(\\\"m\\\"));\\r\\n     assertTrue(_cmdline.hasOption('m'));\\r\\n-    assertTrue(_cmdline.getOptionValues(\\\"m\\\").length == 2);\\r\\n-    assertTrue(_cmdline.getOptionValues('m').length == 2);\\r\\n+    assertEquals(2, _cmdline.getOptionValues(\\\"m\\\").length);\\r\\n+    assertEquals(2, _cmdline.getOptionValues('m').length);\\r\\n     assertTrue(Arrays.equals(values, _cmdline.getOptionValues(\\\"m\\\")));\\r\\n     assertTrue(Arrays.equals(values, _cmdline.getOptionValues('m')));\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -1,23 +1,23 @@\\n public void testCharSeparator() {\\r\\n     String[] values = new String[] { \\\"key\\\", \\\"value\\\", \\\"key\\\", \\\"value\\\" };\\r\\n     assertTrue(_cmdline.hasOption(\\\"j\\\"));\\r\\n     assertTrue(_cmdline.hasOption('j'));\\r\\n-    assertTrue(_cmdline.getOptionValues(\\\"j\\\").length == 4);\\r\\n-    assertTrue(_cmdline.getOptionValues('j').length == 4);\\r\\n+    assertEquals(4, _cmdline.getOptionValues(\\\"j\\\").length);\\r\\n+    assertEquals(4, _cmdline.getOptionValues('j').length);\\r\\n     assertTrue(Arrays.equals(values, _cmdline.getOptionValues(\\\"j\\\")));\\r\\n     assertTrue(Arrays.equals(values, _cmdline.getOptionValues('j')));\\r\\n     values = new String[] { \\\"key1\\\", \\\"value1\\\", \\\"key2\\\", \\\"value2\\\" };\\r\\n     assertTrue(_cmdline.hasOption(\\\"k\\\"));\\r\\n     assertTrue(_cmdline.hasOption('k'));\\r\\n     assertTrue(_cmdline.getOptionValues(\\\"k\\\").length == 4);\\r\\n     assertTrue(_cmdline.getOptionValues('k').length == 4);\\r\\n     assertTrue(Arrays.equals(values, _cmdline.getOptionValues(\\\"k\\\")));\\r\\n     assertTrue(Arrays.equals(values, _cmdline.getOptionValues('k')));\\r\\n     values = new String[] { \\\"key\\\", \\\"value\\\" };\\r\\n     assertTrue(_cmdline.hasOption(\\\"m\\\"));\\r\\n     assertTrue(_cmdline.hasOption('m'));\\r\\n     assertTrue(_cmdline.getOptionValues(\\\"m\\\").length == 2);\\r\\n     assertTrue(_cmdline.getOptionValues('m').length == 2);\\r\\n     assertTrue(Arrays.equals(values, _cmdline.getOptionValues(\\\"m\\\")));\\r\\n     assertTrue(Arrays.equals(values, _cmdline.getOptionValues('m')));\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -1,23 +1,23 @@\\n public void testCharSeparator() {\\r\\n-    String[] values = new String[] { \\\"key\\\", \\\"value\\\" };\\r\\n+    String[] values = new String[] { \\\"key\\\", \\\"value\\\", \\\"key\\\", \\\"value\\\" };\\r\\n     assertTrue(_cmdline.hasOption(\\\"j\\\"));\\r\\n     assertTrue(_cmdline.hasOption('j'));\\r\\n-    assertTrue(_cmdline.getOptionValues(\\\"j\\\").length == 2);\\r\\n-    assertTrue(_cmdline.getOptionValues('j').length == 2);\\r\\n+    assertTrue(_cmdline.getOptionValues(\\\"j\\\").length == 4);\\r\\n+    assertTrue(_cmdline.getOptionValues('j').length == 4);\\r\\n     assertTrue(Arrays.equals(values, _cmdline.getOptionValues(\\\"j\\\")));\\r\\n     assertTrue(Arrays.equals(values, _cmdline.getOptionValues('j')));\\r\\n     values = new String[] { \\\"key1\\\", \\\"value1\\\", \\\"key2\\\", \\\"value2\\\" };\\r\\n     assertTrue(_cmdline.hasOption(\\\"k\\\"));\\r\\n     assertTrue(_cmdline.hasOption('k'));\\r\\n     assertTrue(_cmdline.getOptionValues(\\\"k\\\").length == 4);\\r\\n     assertTrue(_cmdline.getOptionValues('k').length == 4);\\r\\n     assertTrue(Arrays.equals(values, _cmdline.getOptionValues(\\\"k\\\")));\\r\\n     assertTrue(Arrays.equals(values, _cmdline.getOptionValues('k')));\\r\\n     values = new String[] { \\\"key\\\", \\\"value\\\" };\\r\\n     assertTrue(_cmdline.hasOption(\\\"m\\\"));\\r\\n     assertTrue(_cmdline.hasOption('m'));\\r\\n     assertTrue(_cmdline.getOptionValues(\\\"m\\\").length == 2);\\r\\n     assertTrue(_cmdline.getOptionValues('m').length == 2);\\r\\n     assertTrue(Arrays.equals(values, _cmdline.getOptionValues(\\\"m\\\")));\\r\\n     assertTrue(Arrays.equals(values, _cmdline.getOptionValues('m')));\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -0,0 +1,23 @@\\n+public void testCharSeparator() {\\r\\n+    String[] values = new String[] { \\\"key\\\", \\\"value\\\" };\\r\\n+    assertTrue(_cmdline.hasOption(\\\"j\\\"));\\r\\n+    assertTrue(_cmdline.hasOption('j'));\\r\\n+    assertTrue(_cmdline.getOptionValues(\\\"j\\\").length == 2);\\r\\n+    assertTrue(_cmdline.getOptionValues('j').length == 2);\\r\\n+    assertTrue(Arrays.equals(values, _cmdline.getOptionValues(\\\"j\\\")));\\r\\n+    assertTrue(Arrays.equals(values, _cmdline.getOptionValues('j')));\\r\\n+    values = new String[] { \\\"key1\\\", \\\"value1\\\", \\\"key2\\\", \\\"value2\\\" };\\r\\n+    assertTrue(_cmdline.hasOption(\\\"k\\\"));\\r\\n+    assertTrue(_cmdline.hasOption('k'));\\r\\n+    assertTrue(_cmdline.getOptionValues(\\\"k\\\").length == 4);\\r\\n+    assertTrue(_cmdline.getOptionValues('k').length == 4);\\r\\n+    assertTrue(Arrays.equals(values, _cmdline.getOptionValues(\\\"k\\\")));\\r\\n+    assertTrue(Arrays.equals(values, _cmdline.getOptionValues('k')));\\r\\n+    values = new String[] { \\\"key\\\", \\\"value\\\" };\\r\\n+    assertTrue(_cmdline.hasOption(\\\"m\\\"));\\r\\n+    assertTrue(_cmdline.hasOption('m'));\\r\\n+    assertTrue(_cmdline.getOptionValues(\\\"m\\\").length == 2);\\r\\n+    assertTrue(_cmdline.getOptionValues('m').length == 2);\\r\\n+    assertTrue(Arrays.equals(values, _cmdline.getOptionValues(\\\"m\\\")));\\r\\n+    assertTrue(Arrays.equals(values, _cmdline.getOptionValues('m')));\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\test\java\org\apache\commons\cli\ValuesTest.java	testComplexValues	org.apache.commons.cli.ValuesTest.testComplexValues()	95	99	1	[{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"\""},{"authorEmail":"tn@apache.org","authorName":"Thomas Neidhart","commitYear":"2013","diff":"\"@@ -1,5 +1,6 @@\\n+@Test\\r\\n public void testComplexValues() {\\r\\n     assertTrue(\\\"Option i is not set\\\", cmd.hasOption(\\\"i\\\"));\\r\\n     assertTrue(\\\"Option h is not set\\\", cmd.hasOption(\\\"h\\\"));\\r\\n-    ArrayAssert.assertEquals(new String[] { \\\"val1\\\", \\\"val2\\\" }, cmd.getOptionValues(\\\"h\\\"));\\r\\n+    assertArrayEquals(new String[] { \\\"val1\\\", \\\"val2\\\" }, cmd.getOptionValues(\\\"h\\\"));\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2009","diff":"\"@@ -1,8 +1,5 @@\\n public void testComplexValues() {\\r\\n-    String[] result = _cmdline.getOptionValues(\\\"h\\\");\\r\\n-    String[] values = new String[] { \\\"val1\\\", \\\"val2\\\" };\\r\\n-    assertTrue(_cmdline.hasOption(\\\"i\\\"));\\r\\n-    assertTrue(_cmdline.hasOption(\\\"h\\\"));\\r\\n-    assertEquals(2, _cmdline.getOptionValues(\\\"h\\\").length);\\r\\n-    assertTrue(Arrays.equals(values, _cmdline.getOptionValues(\\\"h\\\")));\\r\\n+    assertTrue(\\\"Option i is not set\\\", cmd.hasOption(\\\"i\\\"));\\r\\n+    assertTrue(\\\"Option h is not set\\\", cmd.hasOption(\\\"h\\\"));\\r\\n+    ArrayAssert.assertEquals(new String[] { \\\"val1\\\", \\\"val2\\\" }, cmd.getOptionValues(\\\"h\\\"));\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2008","diff":"\"@@ -1,8 +1,8 @@\\n public void testComplexValues() {\\r\\n     String[] result = _cmdline.getOptionValues(\\\"h\\\");\\r\\n     String[] values = new String[] { \\\"val1\\\", \\\"val2\\\" };\\r\\n     assertTrue(_cmdline.hasOption(\\\"i\\\"));\\r\\n     assertTrue(_cmdline.hasOption(\\\"h\\\"));\\r\\n-    assertTrue(_cmdline.getOptionValues(\\\"h\\\").length == 2);\\r\\n+    assertEquals(2, _cmdline.getOptionValues(\\\"h\\\").length);\\r\\n     assertTrue(Arrays.equals(values, _cmdline.getOptionValues(\\\"h\\\")));\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -0,0 +1,8 @@\\n+public void testComplexValues() {\\r\\n+    String[] result = _cmdline.getOptionValues(\\\"h\\\");\\r\\n+    String[] values = new String[] { \\\"val1\\\", \\\"val2\\\" };\\r\\n+    assertTrue(_cmdline.hasOption(\\\"i\\\"));\\r\\n+    assertTrue(_cmdline.hasOption(\\\"h\\\"));\\r\\n+    assertTrue(_cmdline.getOptionValues(\\\"h\\\").length == 2);\\r\\n+    assertTrue(Arrays.equals(values, _cmdline.getOptionValues(\\\"h\\\")));\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\test\java\org\apache\commons\cli\ValuesTest.java	testExtraArgs	org.apache.commons.cli.ValuesTest.testExtraArgs()	102	104	1	[{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"\""},{"authorEmail":"tn@apache.org","authorName":"Thomas Neidhart","commitYear":"2013","diff":"\"@@ -1,3 +1,4 @@\\n+@Test\\r\\n public void testExtraArgs() {\\r\\n-    ArrayAssert.assertEquals(\\\"Extra args\\\", new String[] { \\\"arg1\\\", \\\"arg2\\\", \\\"arg3\\\" }, cmd.getArgs());\\r\\n+    assertArrayEquals(\\\"Extra args\\\", new String[] { \\\"arg1\\\", \\\"arg2\\\", \\\"arg3\\\" }, cmd.getArgs());\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2009","diff":"\"@@ -1,5 +1,3 @@\\n public void testExtraArgs() {\\r\\n-    String[] args = new String[] { \\\"arg1\\\", \\\"arg2\\\", \\\"arg3\\\" };\\r\\n-    assertEquals(3, _cmdline.getArgs().length);\\r\\n-    assertTrue(Arrays.equals(args, _cmdline.getArgs()));\\r\\n+    ArrayAssert.assertEquals(\\\"Extra args\\\", new String[] { \\\"arg1\\\", \\\"arg2\\\", \\\"arg3\\\" }, cmd.getArgs());\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2008","diff":"\"@@ -1,5 +1,5 @@\\n public void testExtraArgs() {\\r\\n     String[] args = new String[] { \\\"arg1\\\", \\\"arg2\\\", \\\"arg3\\\" };\\r\\n-    assertTrue(_cmdline.getArgs().length == 3);\\r\\n+    assertEquals(3, _cmdline.getArgs().length);\\r\\n     assertTrue(Arrays.equals(args, _cmdline.getArgs()));\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -1,5 +1,5 @@\\n public void testExtraArgs() {\\r\\n-    String[] args = new String[] { \\\"arg1\\\", \\\"arg2\\\", \\\"arg3\\\", \\\"key=value\\\" };\\r\\n-    assertTrue(_cmdline.getArgs().length == 4);\\r\\n+    String[] args = new String[] { \\\"arg1\\\", \\\"arg2\\\", \\\"arg3\\\" };\\r\\n+    assertTrue(_cmdline.getArgs().length == 3);\\r\\n     assertTrue(Arrays.equals(args, _cmdline.getArgs()));\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -1,5 +1,5 @@\\n public void testExtraArgs() {\\r\\n-    String[] args = new String[] { \\\"arg1\\\", \\\"arg2\\\", \\\"arg3\\\" };\\r\\n-    assertTrue(_cmdline.getArgs().length == 3);\\r\\n+    String[] args = new String[] { \\\"arg1\\\", \\\"arg2\\\", \\\"arg3\\\", \\\"key=value\\\" };\\r\\n+    assertTrue(_cmdline.getArgs().length == 4);\\r\\n     assertTrue(Arrays.equals(args, _cmdline.getArgs()));\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -1,5 +1,5 @@\\n public void testExtraArgs() {\\r\\n-    String[] args = new String[] { \\\"arg1\\\", \\\"arg2\\\" };\\r\\n-    assertTrue(_cl.getArgs().length == 2);\\r\\n-    assertTrue(java.util.Arrays.equals(args, _cl.getArgs()));\\r\\n+    String[] args = new String[] { \\\"arg1\\\", \\\"arg2\\\", \\\"arg3\\\" };\\r\\n+    assertTrue(_cmdline.getArgs().length == 3);\\r\\n+    assertTrue(Arrays.equals(args, _cmdline.getArgs()));\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jstrachan@apache.org","authorName":"James Strachan","commitYear":"2002","diff":"\"@@ -0,0 +1,5 @@\\n+public void testExtraArgs() {\\r\\n+    String[] args = new String[] { \\\"arg1\\\", \\\"arg2\\\" };\\r\\n+    assertTrue(_cl.getArgs().length == 2);\\r\\n+    assertTrue(java.util.Arrays.equals(args, _cl.getArgs()));\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\test\java\org\apache\commons\cli\ValuesTest.java	testMultipleArgValues	org.apache.commons.cli.ValuesTest.testMultipleArgValues()	107	110	1	[{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"\""},{"authorEmail":"tn@apache.org","authorName":"Thomas Neidhart","commitYear":"2013","diff":"\"@@ -1,4 +1,5 @@\\n+@Test\\r\\n public void testMultipleArgValues() {\\r\\n     assertTrue(\\\"Option e is not set\\\", cmd.hasOption(\\\"e\\\"));\\r\\n-    ArrayAssert.assertEquals(new String[] { \\\"one\\\", \\\"two\\\" }, cmd.getOptionValues(\\\"e\\\"));\\r\\n+    assertArrayEquals(new String[] { \\\"one\\\", \\\"two\\\" }, cmd.getOptionValues(\\\"e\\\"));\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2009","diff":"\"@@ -1,7 +1,4 @@\\n public void testMultipleArgValues() {\\r\\n-    String[] result = _cmdline.getOptionValues(\\\"e\\\");\\r\\n-    String[] values = new String[] { \\\"one\\\", \\\"two\\\" };\\r\\n-    assertTrue(_cmdline.hasOption(\\\"e\\\"));\\r\\n-    assertEquals(2, _cmdline.getOptionValues(\\\"e\\\").length);\\r\\n-    assertTrue(Arrays.equals(values, _cmdline.getOptionValues(\\\"e\\\")));\\r\\n+    assertTrue(\\\"Option e is not set\\\", cmd.hasOption(\\\"e\\\"));\\r\\n+    ArrayAssert.assertEquals(new String[] { \\\"one\\\", \\\"two\\\" }, cmd.getOptionValues(\\\"e\\\"));\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2008","diff":"\"@@ -1,7 +1,7 @@\\n public void testMultipleArgValues() {\\r\\n     String[] result = _cmdline.getOptionValues(\\\"e\\\");\\r\\n     String[] values = new String[] { \\\"one\\\", \\\"two\\\" };\\r\\n     assertTrue(_cmdline.hasOption(\\\"e\\\"));\\r\\n-    assertTrue(_cmdline.getOptionValues(\\\"e\\\").length == 2);\\r\\n+    assertEquals(2, _cmdline.getOptionValues(\\\"e\\\").length);\\r\\n     assertTrue(Arrays.equals(values, _cmdline.getOptionValues(\\\"e\\\")));\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -1,7 +1,7 @@\\n public void testMultipleArgValues() {\\r\\n-    String[] result = _cl.getOptionValues(\\\"e\\\");\\r\\n+    String[] result = _cmdline.getOptionValues(\\\"e\\\");\\r\\n     String[] values = new String[] { \\\"one\\\", \\\"two\\\" };\\r\\n-    assertTrue(_cl.hasOption(\\\"e\\\"));\\r\\n-    assertTrue(_cl.getOptionValues(\\\"e\\\").length == 2);\\r\\n-    assertTrue(java.util.Arrays.equals(values, _cl.getOptionValues(\\\"e\\\")));\\r\\n+    assertTrue(_cmdline.hasOption(\\\"e\\\"));\\r\\n+    assertTrue(_cmdline.getOptionValues(\\\"e\\\").length == 2);\\r\\n+    assertTrue(Arrays.equals(values, _cmdline.getOptionValues(\\\"e\\\")));\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -1,7 +1,7 @@\\n public void testMultipleArgValues() {\\r\\n-    String[] result = _cl.getOptionValues('e');\\r\\n+    String[] result = _cl.getOptionValues(\\\"e\\\");\\r\\n     String[] values = new String[] { \\\"one\\\", \\\"two\\\" };\\r\\n-    assertTrue(_cl.hasOption('e'));\\r\\n-    assertTrue(_cl.getOptionValues('e').length == 2);\\r\\n-    assertTrue(java.util.Arrays.equals(values, _cl.getOptionValues('e')));\\r\\n+    assertTrue(_cl.hasOption(\\\"e\\\"));\\r\\n+    assertTrue(_cl.getOptionValues(\\\"e\\\").length == 2);\\r\\n+    assertTrue(java.util.Arrays.equals(values, _cl.getOptionValues(\\\"e\\\")));\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jstrachan@apache.org","authorName":"James Strachan","commitYear":"2002","diff":"\"@@ -0,0 +1,7 @@\\n+public void testMultipleArgValues() {\\r\\n+    String[] result = _cl.getOptionValues('e');\\r\\n+    String[] values = new String[] { \\\"one\\\", \\\"two\\\" };\\r\\n+    assertTrue(_cl.hasOption('e'));\\r\\n+    assertTrue(_cl.getOptionValues('e').length == 2);\\r\\n+    assertTrue(java.util.Arrays.equals(values, _cl.getOptionValues('e')));\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\test\java\org\apache\commons\cli\ValuesTest.java	testShortArgs	org.apache.commons.cli.ValuesTest.testShortArgs()	113	119	1	[{"authorEmail":"tn@apache.org","authorName":"Thomas Neidhart","commitYear":"2013","diff":"\"@@ -1,6 +1,7 @@\\n+@Test\\r\\n public void testShortArgs() {\\r\\n     assertTrue(\\\"Option a is not set\\\", cmd.hasOption(\\\"a\\\"));\\r\\n     assertTrue(\\\"Option c is not set\\\", cmd.hasOption(\\\"c\\\"));\\r\\n     assertNull(cmd.getOptionValues(\\\"a\\\"));\\r\\n     assertNull(cmd.getOptionValues(\\\"c\\\"));\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2009","diff":"\"@@ -1,6 +1,6 @@\\n public void testShortArgs() {\\r\\n-    assertTrue(_cmdline.hasOption(\\\"a\\\"));\\r\\n-    assertTrue(_cmdline.hasOption(\\\"c\\\"));\\r\\n-    assertNull(_cmdline.getOptionValues(\\\"a\\\"));\\r\\n-    assertNull(_cmdline.getOptionValues(\\\"c\\\"));\\r\\n+    assertTrue(\\\"Option a is not set\\\", cmd.hasOption(\\\"a\\\"));\\r\\n+    assertTrue(\\\"Option c is not set\\\", cmd.hasOption(\\\"c\\\"));\\r\\n+    assertNull(cmd.getOptionValues(\\\"a\\\"));\\r\\n+    assertNull(cmd.getOptionValues(\\\"c\\\"));\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -1,6 +1,6 @@\\n public void testShortArgs() {\\r\\n-    assertTrue(_cl.hasOption(\\\"a\\\"));\\r\\n-    assertTrue(_cl.hasOption(\\\"c\\\"));\\r\\n-    assertNull(_cl.getOptionValues(\\\"a\\\"));\\r\\n-    assertNull(_cl.getOptionValues(\\\"c\\\"));\\r\\n+    assertTrue(_cmdline.hasOption(\\\"a\\\"));\\r\\n+    assertTrue(_cmdline.hasOption(\\\"c\\\"));\\r\\n+    assertNull(_cmdline.getOptionValues(\\\"a\\\"));\\r\\n+    assertNull(_cmdline.getOptionValues(\\\"c\\\"));\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -1,6 +1,6 @@\\n public void testShortArgs() {\\r\\n-    assertTrue(_cl.hasOption('a'));\\r\\n-    assertTrue(_cl.hasOption('c'));\\r\\n-    assertNull(_cl.getOptionValues('a'));\\r\\n-    assertNull(_cl.getOptionValues('c'));\\r\\n+    assertTrue(_cl.hasOption(\\\"a\\\"));\\r\\n+    assertTrue(_cl.hasOption(\\\"c\\\"));\\r\\n+    assertNull(_cl.getOptionValues(\\\"a\\\"));\\r\\n+    assertNull(_cl.getOptionValues(\\\"c\\\"));\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jstrachan@apache.org","authorName":"James Strachan","commitYear":"2002","diff":"\"@@ -0,0 +1,6 @@\\n+public void testShortArgs() {\\r\\n+    assertTrue(_cl.hasOption('a'));\\r\\n+    assertTrue(_cl.hasOption('c'));\\r\\n+    assertNull(_cl.getOptionValues('a'));\\r\\n+    assertNull(_cl.getOptionValues('c'));\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\test\java\org\apache\commons\cli\ValuesTest.java	testShortArgsWithValue	org.apache.commons.cli.ValuesTest.testShortArgsWithValue()	122	130	1	[{"authorEmail":"arturobernalg@gmail.com","authorName":"Arturo Bernal","commitYear":"2021","diff":"\"@@ -1,9 +1,9 @@\\n @Test\\r\\n public void testShortArgsWithValue() {\\r\\n     assertTrue(\\\"Option b is not set\\\", cmd.hasOption(\\\"b\\\"));\\r\\n-    assertTrue(cmd.getOptionValue(\\\"b\\\").equals(\\\"foo\\\"));\\r\\n+    assertEquals(\\\"foo\\\", cmd.getOptionValue(\\\"b\\\"));\\r\\n     assertEquals(1, cmd.getOptionValues(\\\"b\\\").length);\\r\\n     assertTrue(\\\"Option d is not set\\\", cmd.hasOption(\\\"d\\\"));\\r\\n-    assertTrue(cmd.getOptionValue(\\\"d\\\").equals(\\\"bar\\\"));\\r\\n+    assertEquals(\\\"bar\\\", cmd.getOptionValue(\\\"d\\\"));\\r\\n     assertEquals(1, cmd.getOptionValues(\\\"d\\\").length);\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"tn@apache.org","authorName":"Thomas Neidhart","commitYear":"2013","diff":"\"@@ -1,8 +1,9 @@\\n+@Test\\r\\n public void testShortArgsWithValue() {\\r\\n     assertTrue(\\\"Option b is not set\\\", cmd.hasOption(\\\"b\\\"));\\r\\n     assertTrue(cmd.getOptionValue(\\\"b\\\").equals(\\\"foo\\\"));\\r\\n     assertEquals(1, cmd.getOptionValues(\\\"b\\\").length);\\r\\n     assertTrue(\\\"Option d is not set\\\", cmd.hasOption(\\\"d\\\"));\\r\\n     assertTrue(cmd.getOptionValue(\\\"d\\\").equals(\\\"bar\\\"));\\r\\n     assertEquals(1, cmd.getOptionValues(\\\"d\\\").length);\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2009","diff":"\"@@ -1,8 +1,8 @@\\n public void testShortArgsWithValue() {\\r\\n-    assertTrue(_cmdline.hasOption(\\\"b\\\"));\\r\\n-    assertTrue(_cmdline.getOptionValue(\\\"b\\\").equals(\\\"foo\\\"));\\r\\n-    assertEquals(1, _cmdline.getOptionValues(\\\"b\\\").length);\\r\\n-    assertTrue(_cmdline.hasOption(\\\"d\\\"));\\r\\n-    assertTrue(_cmdline.getOptionValue(\\\"d\\\").equals(\\\"bar\\\"));\\r\\n-    assertEquals(1, _cmdline.getOptionValues(\\\"d\\\").length);\\r\\n+    assertTrue(\\\"Option b is not set\\\", cmd.hasOption(\\\"b\\\"));\\r\\n+    assertTrue(cmd.getOptionValue(\\\"b\\\").equals(\\\"foo\\\"));\\r\\n+    assertEquals(1, cmd.getOptionValues(\\\"b\\\").length);\\r\\n+    assertTrue(\\\"Option d is not set\\\", cmd.hasOption(\\\"d\\\"));\\r\\n+    assertTrue(cmd.getOptionValue(\\\"d\\\").equals(\\\"bar\\\"));\\r\\n+    assertEquals(1, cmd.getOptionValues(\\\"d\\\").length);\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2008","diff":"\"@@ -1,8 +1,8 @@\\n public void testShortArgsWithValue() {\\r\\n     assertTrue(_cmdline.hasOption(\\\"b\\\"));\\r\\n     assertTrue(_cmdline.getOptionValue(\\\"b\\\").equals(\\\"foo\\\"));\\r\\n-    assertTrue(_cmdline.getOptionValues(\\\"b\\\").length == 1);\\r\\n+    assertEquals(1, _cmdline.getOptionValues(\\\"b\\\").length);\\r\\n     assertTrue(_cmdline.hasOption(\\\"d\\\"));\\r\\n     assertTrue(_cmdline.getOptionValue(\\\"d\\\").equals(\\\"bar\\\"));\\r\\n-    assertTrue(_cmdline.getOptionValues(\\\"d\\\").length == 1);\\r\\n+    assertEquals(1, _cmdline.getOptionValues(\\\"d\\\").length);\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -1,8 +1,8 @@\\n public void testShortArgsWithValue() {\\r\\n-    assertTrue(_cl.hasOption(\\\"b\\\"));\\r\\n-    assertTrue(_cl.getOptionValue(\\\"b\\\").equals(\\\"foo\\\"));\\r\\n-    assertTrue(_cl.getOptionValues(\\\"b\\\").length == 1);\\r\\n-    assertTrue(_cl.hasOption(\\\"d\\\"));\\r\\n-    assertTrue(_cl.getOptionValue(\\\"d\\\").equals(\\\"bar\\\"));\\r\\n-    assertTrue(_cl.getOptionValues(\\\"d\\\").length == 1);\\r\\n+    assertTrue(_cmdline.hasOption(\\\"b\\\"));\\r\\n+    assertTrue(_cmdline.getOptionValue(\\\"b\\\").equals(\\\"foo\\\"));\\r\\n+    assertTrue(_cmdline.getOptionValues(\\\"b\\\").length == 1);\\r\\n+    assertTrue(_cmdline.hasOption(\\\"d\\\"));\\r\\n+    assertTrue(_cmdline.getOptionValue(\\\"d\\\").equals(\\\"bar\\\"));\\r\\n+    assertTrue(_cmdline.getOptionValues(\\\"d\\\").length == 1);\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -1,8 +1,8 @@\\n public void testShortArgsWithValue() {\\r\\n-    assertTrue(_cl.hasOption('b'));\\r\\n-    assertTrue(_cl.getOptionValue('b').equals(\\\"foo\\\"));\\r\\n-    assertTrue(_cl.getOptionValues('b').length == 1);\\r\\n-    assertTrue(_cl.hasOption('d'));\\r\\n-    assertTrue(_cl.getOptionValue('d').equals(\\\"bar\\\"));\\r\\n-    assertTrue(_cl.getOptionValues('d').length == 1);\\r\\n+    assertTrue(_cl.hasOption(\\\"b\\\"));\\r\\n+    assertTrue(_cl.getOptionValue(\\\"b\\\").equals(\\\"foo\\\"));\\r\\n+    assertTrue(_cl.getOptionValues(\\\"b\\\").length == 1);\\r\\n+    assertTrue(_cl.hasOption(\\\"d\\\"));\\r\\n+    assertTrue(_cl.getOptionValue(\\\"d\\\").equals(\\\"bar\\\"));\\r\\n+    assertTrue(_cl.getOptionValues(\\\"d\\\").length == 1);\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jstrachan@apache.org","authorName":"James Strachan","commitYear":"2002","diff":"\"@@ -0,0 +1,8 @@\\n+public void testShortArgsWithValue() {\\r\\n+    assertTrue(_cl.hasOption('b'));\\r\\n+    assertTrue(_cl.getOptionValue('b').equals(\\\"foo\\\"));\\r\\n+    assertTrue(_cl.getOptionValues('b').length == 1);\\r\\n+    assertTrue(_cl.hasOption('d'));\\r\\n+    assertTrue(_cl.getOptionValue('d').equals(\\\"bar\\\"));\\r\\n+    assertTrue(_cl.getOptionValues('d').length == 1);\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\test\java\org\apache\commons\cli\ValuesTest.java	testTwoArgValues	org.apache.commons.cli.ValuesTest.testTwoArgValues()	133	136	1	[{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"\""},{"authorEmail":"tn@apache.org","authorName":"Thomas Neidhart","commitYear":"2013","diff":"\"@@ -1,4 +1,5 @@\\n+@Test\\r\\n public void testTwoArgValues() {\\r\\n     assertTrue(\\\"Option g is not set\\\", cmd.hasOption(\\\"g\\\"));\\r\\n-    ArrayAssert.assertEquals(new String[] { \\\"val1\\\", \\\"val2\\\" }, cmd.getOptionValues(\\\"g\\\"));\\r\\n+    assertArrayEquals(new String[] { \\\"val1\\\", \\\"val2\\\" }, cmd.getOptionValues(\\\"g\\\"));\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2009","diff":"\"@@ -1,7 +1,4 @@\\n public void testTwoArgValues() {\\r\\n-    String[] result = _cmdline.getOptionValues(\\\"g\\\");\\r\\n-    String[] values = new String[] { \\\"val1\\\", \\\"val2\\\" };\\r\\n-    assertTrue(_cmdline.hasOption(\\\"g\\\"));\\r\\n-    assertEquals(2, _cmdline.getOptionValues(\\\"g\\\").length);\\r\\n-    assertTrue(Arrays.equals(values, _cmdline.getOptionValues(\\\"g\\\")));\\r\\n+    assertTrue(\\\"Option g is not set\\\", cmd.hasOption(\\\"g\\\"));\\r\\n+    ArrayAssert.assertEquals(new String[] { \\\"val1\\\", \\\"val2\\\" }, cmd.getOptionValues(\\\"g\\\"));\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2008","diff":"\"@@ -1,7 +1,7 @@\\n public void testTwoArgValues() {\\r\\n     String[] result = _cmdline.getOptionValues(\\\"g\\\");\\r\\n     String[] values = new String[] { \\\"val1\\\", \\\"val2\\\" };\\r\\n     assertTrue(_cmdline.hasOption(\\\"g\\\"));\\r\\n-    assertTrue(_cmdline.getOptionValues(\\\"g\\\").length == 2);\\r\\n+    assertEquals(2, _cmdline.getOptionValues(\\\"g\\\").length);\\r\\n     assertTrue(Arrays.equals(values, _cmdline.getOptionValues(\\\"g\\\")));\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -0,0 +1,7 @@\\n+public void testTwoArgValues() {\\r\\n+    String[] result = _cmdline.getOptionValues(\\\"g\\\");\\r\\n+    String[] values = new String[] { \\\"val1\\\", \\\"val2\\\" };\\r\\n+    assertTrue(_cmdline.hasOption(\\\"g\\\"));\\r\\n+    assertTrue(_cmdline.getOptionValues(\\\"g\\\").length == 2);\\r\\n+    assertTrue(Arrays.equals(values, _cmdline.getOptionValues(\\\"g\\\")));\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\test\java\org\apache\commons\cli\ValueTest.java	setUp	org.apache.commons.cli.ValueTest.setUp()	34	51	1	[{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"@@ -1,16 +1,16 @@\\n @Before\\r\\n public void setUp() throws Exception {\\r\\n     opts.addOption(\\\"a\\\", false, \\\"toggle -a\\\");\\r\\n     opts.addOption(\\\"b\\\", true, \\\"set -b\\\");\\r\\n     opts.addOption(\\\"c\\\", \\\"c\\\", false, \\\"toggle -c\\\");\\r\\n     opts.addOption(\\\"d\\\", \\\"d\\\", true, \\\"set -d\\\");\\r\\n     opts.addOption(OptionBuilder.hasOptionalArg().create('e'));\\r\\n     opts.addOption(OptionBuilder.hasOptionalArg().withLongOpt(\\\"fish\\\").create());\\r\\n     opts.addOption(OptionBuilder.hasOptionalArgs().withLongOpt(\\\"gravy\\\").create());\\r\\n     opts.addOption(OptionBuilder.hasOptionalArgs(2).withLongOpt(\\\"hide\\\").create());\\r\\n     opts.addOption(OptionBuilder.hasOptionalArgs(2).create('i'));\\r\\n     opts.addOption(OptionBuilder.hasOptionalArgs().create('j'));\\r\\n-    final String[] args = new String[] { \\\"-a\\\", \\\"-b\\\", \\\"foo\\\", \\\"--c\\\", \\\"--d\\\", \\\"bar\\\" };\\r\\n+    final String[] args = { \\\"-a\\\", \\\"-b\\\", \\\"foo\\\", \\\"--c\\\", \\\"--d\\\", \\\"bar\\\" };\\r\\n     final Parser parser = new PosixParser();\\r\\n-    _cl = parser.parse(opts, args);\\r\\n+    cl = parser.parse(opts, args);\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2019","diff":"\"\""},{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,16 +1,16 @@\\n @Before\\r\\n public void setUp() throws Exception {\\r\\n     opts.addOption(\\\"a\\\", false, \\\"toggle -a\\\");\\r\\n     opts.addOption(\\\"b\\\", true, \\\"set -b\\\");\\r\\n     opts.addOption(\\\"c\\\", \\\"c\\\", false, \\\"toggle -c\\\");\\r\\n     opts.addOption(\\\"d\\\", \\\"d\\\", true, \\\"set -d\\\");\\r\\n     opts.addOption(OptionBuilder.hasOptionalArg().create('e'));\\r\\n     opts.addOption(OptionBuilder.hasOptionalArg().withLongOpt(\\\"fish\\\").create());\\r\\n     opts.addOption(OptionBuilder.hasOptionalArgs().withLongOpt(\\\"gravy\\\").create());\\r\\n     opts.addOption(OptionBuilder.hasOptionalArgs(2).withLongOpt(\\\"hide\\\").create());\\r\\n     opts.addOption(OptionBuilder.hasOptionalArgs(2).create('i'));\\r\\n     opts.addOption(OptionBuilder.hasOptionalArgs().create('j'));\\r\\n-    String[] args = new String[] { \\\"-a\\\", \\\"-b\\\", \\\"foo\\\", \\\"--c\\\", \\\"--d\\\", \\\"bar\\\" };\\r\\n-    Parser parser = new PosixParser();\\r\\n+    final String[] args = new String[] { \\\"-a\\\", \\\"-b\\\", \\\"foo\\\", \\\"--c\\\", \\\"--d\\\", \\\"bar\\\" };\\r\\n+    final Parser parser = new PosixParser();\\r\\n     _cl = parser.parse(opts, args);\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"tn@apache.org","authorName":"Thomas Neidhart","commitYear":"2013","diff":"\"@@ -1,16 +1,16 @@\\n-@Override\\r\\n+@Before\\r\\n public void setUp() throws Exception {\\r\\n     opts.addOption(\\\"a\\\", false, \\\"toggle -a\\\");\\r\\n     opts.addOption(\\\"b\\\", true, \\\"set -b\\\");\\r\\n     opts.addOption(\\\"c\\\", \\\"c\\\", false, \\\"toggle -c\\\");\\r\\n     opts.addOption(\\\"d\\\", \\\"d\\\", true, \\\"set -d\\\");\\r\\n     opts.addOption(OptionBuilder.hasOptionalArg().create('e'));\\r\\n     opts.addOption(OptionBuilder.hasOptionalArg().withLongOpt(\\\"fish\\\").create());\\r\\n     opts.addOption(OptionBuilder.hasOptionalArgs().withLongOpt(\\\"gravy\\\").create());\\r\\n     opts.addOption(OptionBuilder.hasOptionalArgs(2).withLongOpt(\\\"hide\\\").create());\\r\\n     opts.addOption(OptionBuilder.hasOptionalArgs(2).create('i'));\\r\\n     opts.addOption(OptionBuilder.hasOptionalArgs().create('j'));\\r\\n     String[] args = new String[] { \\\"-a\\\", \\\"-b\\\", \\\"foo\\\", \\\"--c\\\", \\\"--d\\\", \\\"bar\\\" };\\r\\n     Parser parser = new PosixParser();\\r\\n     _cl = parser.parse(opts, args);\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"sebb@apache.org","authorName":"Sebastian Bazley","commitYear":"2013","diff":"\"@@ -1,15 +1,16 @@\\n+@Override\\r\\n public void setUp() throws Exception {\\r\\n     opts.addOption(\\\"a\\\", false, \\\"toggle -a\\\");\\r\\n     opts.addOption(\\\"b\\\", true, \\\"set -b\\\");\\r\\n     opts.addOption(\\\"c\\\", \\\"c\\\", false, \\\"toggle -c\\\");\\r\\n     opts.addOption(\\\"d\\\", \\\"d\\\", true, \\\"set -d\\\");\\r\\n     opts.addOption(OptionBuilder.hasOptionalArg().create('e'));\\r\\n     opts.addOption(OptionBuilder.hasOptionalArg().withLongOpt(\\\"fish\\\").create());\\r\\n     opts.addOption(OptionBuilder.hasOptionalArgs().withLongOpt(\\\"gravy\\\").create());\\r\\n     opts.addOption(OptionBuilder.hasOptionalArgs(2).withLongOpt(\\\"hide\\\").create());\\r\\n     opts.addOption(OptionBuilder.hasOptionalArgs(2).create('i'));\\r\\n     opts.addOption(OptionBuilder.hasOptionalArgs().create('j'));\\r\\n     String[] args = new String[] { \\\"-a\\\", \\\"-b\\\", \\\"foo\\\", \\\"--c\\\", \\\"--d\\\", \\\"bar\\\" };\\r\\n     Parser parser = new PosixParser();\\r\\n     _cl = parser.parse(opts, args);\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2010","diff":"\"@@ -1,16 +1,15 @@\\n public void setUp() throws Exception {\\r\\n     opts.addOption(\\\"a\\\", false, \\\"toggle -a\\\");\\r\\n     opts.addOption(\\\"b\\\", true, \\\"set -b\\\");\\r\\n     opts.addOption(\\\"c\\\", \\\"c\\\", false, \\\"toggle -c\\\");\\r\\n     opts.addOption(\\\"d\\\", \\\"d\\\", true, \\\"set -d\\\");\\r\\n     opts.addOption(OptionBuilder.hasOptionalArg().create('e'));\\r\\n     opts.addOption(OptionBuilder.hasOptionalArg().withLongOpt(\\\"fish\\\").create());\\r\\n     opts.addOption(OptionBuilder.hasOptionalArgs().withLongOpt(\\\"gravy\\\").create());\\r\\n     opts.addOption(OptionBuilder.hasOptionalArgs(2).withLongOpt(\\\"hide\\\").create());\\r\\n     opts.addOption(OptionBuilder.hasOptionalArgs(2).create('i'));\\r\\n     opts.addOption(OptionBuilder.hasOptionalArgs().create('j'));\\r\\n-    opts.addOption(OptionBuilder.hasArgs().withValueSeparator(',').create('k'));\\r\\n     String[] args = new String[] { \\\"-a\\\", \\\"-b\\\", \\\"foo\\\", \\\"--c\\\", \\\"--d\\\", \\\"bar\\\" };\\r\\n     Parser parser = new PosixParser();\\r\\n     _cl = parser.parse(opts, args);\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2008","diff":"\"@@ -1,20 +1,16 @@\\n-public void setUp() {\\r\\n+public void setUp() throws Exception {\\r\\n     opts.addOption(\\\"a\\\", false, \\\"toggle -a\\\");\\r\\n     opts.addOption(\\\"b\\\", true, \\\"set -b\\\");\\r\\n     opts.addOption(\\\"c\\\", \\\"c\\\", false, \\\"toggle -c\\\");\\r\\n     opts.addOption(\\\"d\\\", \\\"d\\\", true, \\\"set -d\\\");\\r\\n     opts.addOption(OptionBuilder.hasOptionalArg().create('e'));\\r\\n     opts.addOption(OptionBuilder.hasOptionalArg().withLongOpt(\\\"fish\\\").create());\\r\\n     opts.addOption(OptionBuilder.hasOptionalArgs().withLongOpt(\\\"gravy\\\").create());\\r\\n     opts.addOption(OptionBuilder.hasOptionalArgs(2).withLongOpt(\\\"hide\\\").create());\\r\\n     opts.addOption(OptionBuilder.hasOptionalArgs(2).create('i'));\\r\\n     opts.addOption(OptionBuilder.hasOptionalArgs().create('j'));\\r\\n     opts.addOption(OptionBuilder.hasArgs().withValueSeparator(',').create('k'));\\r\\n     String[] args = new String[] { \\\"-a\\\", \\\"-b\\\", \\\"foo\\\", \\\"--c\\\", \\\"--d\\\", \\\"bar\\\" };\\r\\n-    try {\\r\\n-        Parser parser = new PosixParser();\\r\\n-        _cl = parser.parse(opts, args);\\r\\n-    } catch (ParseException e) {\\r\\n-        fail(\\\"Cannot setUp() CommandLine: \\\" + e.toString());\\r\\n-    }\\r\\n+    Parser parser = new PosixParser();\\r\\n+    _cl = parser.parse(opts, args);\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"bayard@apache.org","authorName":"Henri Yandell","commitYear":"2007","diff":"\"@@ -1,20 +1,20 @@\\n public void setUp() {\\r\\n     opts.addOption(\\\"a\\\", false, \\\"toggle -a\\\");\\r\\n     opts.addOption(\\\"b\\\", true, \\\"set -b\\\");\\r\\n     opts.addOption(\\\"c\\\", \\\"c\\\", false, \\\"toggle -c\\\");\\r\\n     opts.addOption(\\\"d\\\", \\\"d\\\", true, \\\"set -d\\\");\\r\\n     opts.addOption(OptionBuilder.hasOptionalArg().create('e'));\\r\\n     opts.addOption(OptionBuilder.hasOptionalArg().withLongOpt(\\\"fish\\\").create());\\r\\n     opts.addOption(OptionBuilder.hasOptionalArgs().withLongOpt(\\\"gravy\\\").create());\\r\\n     opts.addOption(OptionBuilder.hasOptionalArgs(2).withLongOpt(\\\"hide\\\").create());\\r\\n     opts.addOption(OptionBuilder.hasOptionalArgs(2).create('i'));\\r\\n     opts.addOption(OptionBuilder.hasOptionalArgs().create('j'));\\r\\n     opts.addOption(OptionBuilder.hasArgs().withValueSeparator(',').create('k'));\\r\\n     String[] args = new String[] { \\\"-a\\\", \\\"-b\\\", \\\"foo\\\", \\\"--c\\\", \\\"--d\\\", \\\"bar\\\" };\\r\\n     try {\\r\\n-        CommandLineParser parser = new PosixParser();\\r\\n+        Parser parser = new PosixParser();\\r\\n         _cl = parser.parse(opts, args);\\r\\n     } catch (ParseException e) {\\r\\n         fail(\\\"Cannot setUp() CommandLine: \\\" + e.toString());\\r\\n     }\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -1,19 +1,20 @@\\n public void setUp() {\\r\\n     opts.addOption(\\\"a\\\", false, \\\"toggle -a\\\");\\r\\n     opts.addOption(\\\"b\\\", true, \\\"set -b\\\");\\r\\n     opts.addOption(\\\"c\\\", \\\"c\\\", false, \\\"toggle -c\\\");\\r\\n     opts.addOption(\\\"d\\\", \\\"d\\\", true, \\\"set -d\\\");\\r\\n     opts.addOption(OptionBuilder.hasOptionalArg().create('e'));\\r\\n     opts.addOption(OptionBuilder.hasOptionalArg().withLongOpt(\\\"fish\\\").create());\\r\\n     opts.addOption(OptionBuilder.hasOptionalArgs().withLongOpt(\\\"gravy\\\").create());\\r\\n     opts.addOption(OptionBuilder.hasOptionalArgs(2).withLongOpt(\\\"hide\\\").create());\\r\\n     opts.addOption(OptionBuilder.hasOptionalArgs(2).create('i'));\\r\\n     opts.addOption(OptionBuilder.hasOptionalArgs().create('j'));\\r\\n+    opts.addOption(OptionBuilder.hasArgs().withValueSeparator(',').create('k'));\\r\\n     String[] args = new String[] { \\\"-a\\\", \\\"-b\\\", \\\"foo\\\", \\\"--c\\\", \\\"--d\\\", \\\"bar\\\" };\\r\\n     try {\\r\\n         CommandLineParser parser = new PosixParser();\\r\\n         _cl = parser.parse(opts, args);\\r\\n     } catch (ParseException e) {\\r\\n         fail(\\\"Cannot setUp() CommandLine: \\\" + e.toString());\\r\\n     }\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -1,19 +1,19 @@\\n public void setUp() {\\r\\n     opts.addOption(\\\"a\\\", false, \\\"toggle -a\\\");\\r\\n     opts.addOption(\\\"b\\\", true, \\\"set -b\\\");\\r\\n     opts.addOption(\\\"c\\\", \\\"c\\\", false, \\\"toggle -c\\\");\\r\\n     opts.addOption(\\\"d\\\", \\\"d\\\", true, \\\"set -d\\\");\\r\\n     opts.addOption(OptionBuilder.hasOptionalArg().create('e'));\\r\\n     opts.addOption(OptionBuilder.hasOptionalArg().withLongOpt(\\\"fish\\\").create());\\r\\n     opts.addOption(OptionBuilder.hasOptionalArgs().withLongOpt(\\\"gravy\\\").create());\\r\\n     opts.addOption(OptionBuilder.hasOptionalArgs(2).withLongOpt(\\\"hide\\\").create());\\r\\n     opts.addOption(OptionBuilder.hasOptionalArgs(2).create('i'));\\r\\n     opts.addOption(OptionBuilder.hasOptionalArgs().create('j'));\\r\\n     String[] args = new String[] { \\\"-a\\\", \\\"-b\\\", \\\"foo\\\", \\\"--c\\\", \\\"--d\\\", \\\"bar\\\" };\\r\\n     try {\\r\\n-        CommandLineParser parser = CommandLineParserFactory.newParser();\\r\\n+        CommandLineParser parser = new PosixParser();\\r\\n         _cl = parser.parse(opts, args);\\r\\n     } catch (ParseException e) {\\r\\n         fail(\\\"Cannot setUp() CommandLine: \\\" + e.toString());\\r\\n     }\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -1,14 +1,19 @@\\n public void setUp() {\\r\\n-    Options opts = new Options();\\r\\n     opts.addOption(\\\"a\\\", false, \\\"toggle -a\\\");\\r\\n     opts.addOption(\\\"b\\\", true, \\\"set -b\\\");\\r\\n     opts.addOption(\\\"c\\\", \\\"c\\\", false, \\\"toggle -c\\\");\\r\\n     opts.addOption(\\\"d\\\", \\\"d\\\", true, \\\"set -d\\\");\\r\\n+    opts.addOption(OptionBuilder.hasOptionalArg().create('e'));\\r\\n+    opts.addOption(OptionBuilder.hasOptionalArg().withLongOpt(\\\"fish\\\").create());\\r\\n+    opts.addOption(OptionBuilder.hasOptionalArgs().withLongOpt(\\\"gravy\\\").create());\\r\\n+    opts.addOption(OptionBuilder.hasOptionalArgs(2).withLongOpt(\\\"hide\\\").create());\\r\\n+    opts.addOption(OptionBuilder.hasOptionalArgs(2).create('i'));\\r\\n+    opts.addOption(OptionBuilder.hasOptionalArgs().create('j'));\\r\\n     String[] args = new String[] { \\\"-a\\\", \\\"-b\\\", \\\"foo\\\", \\\"--c\\\", \\\"--d\\\", \\\"bar\\\" };\\r\\n     try {\\r\\n         CommandLineParser parser = CommandLineParserFactory.newParser();\\r\\n         _cl = parser.parse(opts, args);\\r\\n     } catch (ParseException e) {\\r\\n         fail(\\\"Cannot setUp() CommandLine: \\\" + e.toString());\\r\\n     }\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -1,13 +1,14 @@\\n public void setUp() {\\r\\n     Options opts = new Options();\\r\\n     opts.addOption(\\\"a\\\", false, \\\"toggle -a\\\");\\r\\n     opts.addOption(\\\"b\\\", true, \\\"set -b\\\");\\r\\n     opts.addOption(\\\"c\\\", \\\"c\\\", false, \\\"toggle -c\\\");\\r\\n     opts.addOption(\\\"d\\\", \\\"d\\\", true, \\\"set -d\\\");\\r\\n     String[] args = new String[] { \\\"-a\\\", \\\"-b\\\", \\\"foo\\\", \\\"--c\\\", \\\"--d\\\", \\\"bar\\\" };\\r\\n     try {\\r\\n-        _cl = opts.parse(args);\\r\\n+        CommandLineParser parser = CommandLineParserFactory.newParser();\\r\\n+        _cl = parser.parse(opts, args);\\r\\n     } catch (ParseException e) {\\r\\n         fail(\\\"Cannot setUp() CommandLine: \\\" + e.toString());\\r\\n     }\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -1,13 +1,13 @@\\n public void setUp() {\\r\\n     Options opts = new Options();\\r\\n-    opts.addOption('a', false, \\\"toggle -a\\\");\\r\\n-    opts.addOption('b', true, \\\"set -b\\\");\\r\\n-    opts.addOption('c', \\\"c\\\", false, \\\"toggle -c\\\");\\r\\n-    opts.addOption('d', \\\"d\\\", true, \\\"set -d\\\");\\r\\n+    opts.addOption(\\\"a\\\", false, \\\"toggle -a\\\");\\r\\n+    opts.addOption(\\\"b\\\", true, \\\"set -b\\\");\\r\\n+    opts.addOption(\\\"c\\\", \\\"c\\\", false, \\\"toggle -c\\\");\\r\\n+    opts.addOption(\\\"d\\\", \\\"d\\\", true, \\\"set -d\\\");\\r\\n     String[] args = new String[] { \\\"-a\\\", \\\"-b\\\", \\\"foo\\\", \\\"--c\\\", \\\"--d\\\", \\\"bar\\\" };\\r\\n     try {\\r\\n         _cl = opts.parse(args);\\r\\n     } catch (ParseException e) {\\r\\n         fail(\\\"Cannot setUp() CommandLine: \\\" + e.toString());\\r\\n     }\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jstrachan@apache.org","authorName":"James Strachan","commitYear":"2002","diff":"\"@@ -0,0 +1,13 @@\\n+public void setUp() {\\r\\n+    Options opts = new Options();\\r\\n+    opts.addOption('a', false, \\\"toggle -a\\\");\\r\\n+    opts.addOption('b', true, \\\"set -b\\\");\\r\\n+    opts.addOption('c', \\\"c\\\", false, \\\"toggle -c\\\");\\r\\n+    opts.addOption('d', \\\"d\\\", true, \\\"set -d\\\");\\r\\n+    String[] args = new String[] { \\\"-a\\\", \\\"-b\\\", \\\"foo\\\", \\\"--c\\\", \\\"--d\\\", \\\"bar\\\" };\\r\\n+    try {\\r\\n+        _cl = opts.parse(args);\\r\\n+    } catch (ParseException e) {\\r\\n+        fail(\\\"Cannot setUp() CommandLine: \\\" + e.toString());\\r\\n+    }\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\test\java\org\apache\commons\cli\ValueTest.java	testLongNoArg	org.apache.commons.cli.ValueTest.testLongNoArg()	54	57	1	[{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"@@ -1,5 +1,5 @@\\n @Test\\r\\n public void testLongNoArg() {\\r\\n-    assertTrue(_cl.hasOption(\\\"c\\\"));\\r\\n-    assertNull(_cl.getOptionValue(\\\"c\\\"));\\r\\n+    assertTrue(cl.hasOption(\\\"c\\\"));\\r\\n+    assertNull(cl.getOptionValue(\\\"c\\\"));\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"tn@apache.org","authorName":"Thomas Neidhart","commitYear":"2013","diff":"\"@@ -1,4 +1,5 @@\\n+@Test\\r\\n public void testLongNoArg() {\\r\\n     assertTrue(_cl.hasOption(\\\"c\\\"));\\r\\n     assertNull(_cl.getOptionValue(\\\"c\\\"));\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -1,4 +1,4 @@\\n public void testLongNoArg() {\\r\\n-    assertTrue(_cl.hasOption('c'));\\r\\n-    assertNull(_cl.getOptionValue('c'));\\r\\n+    assertTrue(_cl.hasOption(\\\"c\\\"));\\r\\n+    assertNull(_cl.getOptionValue(\\\"c\\\"));\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jstrachan@apache.org","authorName":"James Strachan","commitYear":"2002","diff":"\"@@ -0,0 +1,4 @@\\n+public void testLongNoArg() {\\r\\n+    assertTrue(_cl.hasOption('c'));\\r\\n+    assertNull(_cl.getOptionValue('c'));\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\test\java\org\apache\commons\cli\ValueTest.java	testLongNoArgWithOption	org.apache.commons.cli.ValueTest.testLongNoArgWithOption()	60	63	1	[{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"@@ -1,5 +1,5 @@\\n @Test\\r\\n public void testLongNoArgWithOption() {\\r\\n-    assertTrue(_cl.hasOption(opts.getOption(\\\"c\\\")));\\r\\n-    assertNull(_cl.getOptionValue(opts.getOption(\\\"c\\\")));\\r\\n+    assertTrue(cl.hasOption(opts.getOption(\\\"c\\\")));\\r\\n+    assertNull(cl.getOptionValue(opts.getOption(\\\"c\\\")));\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"britter@apache.org","authorName":"Benedikt Ritter","commitYear":"2017","diff":"\"@@ -0,0 +1,5 @@\\n+@Test\\r\\n+public void testLongNoArgWithOption() {\\r\\n+    assertTrue(_cl.hasOption(opts.getOption(\\\"c\\\")));\\r\\n+    assertNull(_cl.getOptionValue(opts.getOption(\\\"c\\\")));\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\test\java\org\apache\commons\cli\ValueTest.java	testLongOptionalArgValue	org.apache.commons.cli.ValueTest.testLongOptionalArgValue()	66	73	1	[{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"@@ -1,8 +1,8 @@\\n @Test\\r\\n public void testLongOptionalArgValue() throws Exception {\\r\\n-    final String[] args = new String[] { \\\"--fish\\\", \\\"face\\\" };\\r\\n+    final String[] args = { \\\"--fish\\\", \\\"face\\\" };\\r\\n     final Parser parser = new PosixParser();\\r\\n     final CommandLine cmd = parser.parse(opts, args);\\r\\n     assertTrue(cmd.hasOption(\\\"fish\\\"));\\r\\n     assertEquals(\\\"face\\\", cmd.getOptionValue(\\\"fish\\\"));\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,8 +1,8 @@\\n @Test\\r\\n public void testLongOptionalArgValue() throws Exception {\\r\\n-    String[] args = new String[] { \\\"--fish\\\", \\\"face\\\" };\\r\\n-    Parser parser = new PosixParser();\\r\\n-    CommandLine cmd = parser.parse(opts, args);\\r\\n+    final String[] args = new String[] { \\\"--fish\\\", \\\"face\\\" };\\r\\n+    final Parser parser = new PosixParser();\\r\\n+    final CommandLine cmd = parser.parse(opts, args);\\r\\n     assertTrue(cmd.hasOption(\\\"fish\\\"));\\r\\n     assertEquals(\\\"face\\\", cmd.getOptionValue(\\\"fish\\\"));\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"tn@apache.org","authorName":"Thomas Neidhart","commitYear":"2013","diff":"\"@@ -1,7 +1,8 @@\\n+@Test\\r\\n public void testLongOptionalArgValue() throws Exception {\\r\\n     String[] args = new String[] { \\\"--fish\\\", \\\"face\\\" };\\r\\n     Parser parser = new PosixParser();\\r\\n     CommandLine cmd = parser.parse(opts, args);\\r\\n     assertTrue(cmd.hasOption(\\\"fish\\\"));\\r\\n     assertEquals(\\\"face\\\", cmd.getOptionValue(\\\"fish\\\"));\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2008","diff":"\"@@ -1,11 +1,7 @@\\n-public void testLongOptionalArgValue() {\\r\\n+public void testLongOptionalArgValue() throws Exception {\\r\\n     String[] args = new String[] { \\\"--fish\\\", \\\"face\\\" };\\r\\n-    try {\\r\\n-        Parser parser = new PosixParser();\\r\\n-        CommandLine cmd = parser.parse(opts, args);\\r\\n-        assertTrue(cmd.hasOption(\\\"fish\\\"));\\r\\n-        assertEquals(\\\"face\\\", cmd.getOptionValue(\\\"fish\\\"));\\r\\n-    } catch (ParseException e) {\\r\\n-        fail(\\\"Cannot setUp() CommandLine: \\\" + e.toString());\\r\\n-    }\\r\\n+    Parser parser = new PosixParser();\\r\\n+    CommandLine cmd = parser.parse(opts, args);\\r\\n+    assertTrue(cmd.hasOption(\\\"fish\\\"));\\r\\n+    assertEquals(\\\"face\\\", cmd.getOptionValue(\\\"fish\\\"));\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"bayard@apache.org","authorName":"Henri Yandell","commitYear":"2007","diff":"\"@@ -1,11 +1,11 @@\\n public void testLongOptionalArgValue() {\\r\\n     String[] args = new String[] { \\\"--fish\\\", \\\"face\\\" };\\r\\n     try {\\r\\n-        CommandLineParser parser = new PosixParser();\\r\\n+        Parser parser = new PosixParser();\\r\\n         CommandLine cmd = parser.parse(opts, args);\\r\\n         assertTrue(cmd.hasOption(\\\"fish\\\"));\\r\\n         assertEquals(\\\"face\\\", cmd.getOptionValue(\\\"fish\\\"));\\r\\n     } catch (ParseException e) {\\r\\n         fail(\\\"Cannot setUp() CommandLine: \\\" + e.toString());\\r\\n     }\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -1,11 +1,11 @@\\n public void testLongOptionalArgValue() {\\r\\n     String[] args = new String[] { \\\"--fish\\\", \\\"face\\\" };\\r\\n     try {\\r\\n-        CommandLineParser parser = CommandLineParserFactory.newParser();\\r\\n+        CommandLineParser parser = new PosixParser();\\r\\n         CommandLine cmd = parser.parse(opts, args);\\r\\n         assertTrue(cmd.hasOption(\\\"fish\\\"));\\r\\n         assertEquals(\\\"face\\\", cmd.getOptionValue(\\\"fish\\\"));\\r\\n     } catch (ParseException e) {\\r\\n         fail(\\\"Cannot setUp() CommandLine: \\\" + e.toString());\\r\\n     }\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -0,0 +1,11 @@\\n+public void testLongOptionalArgValue() {\\r\\n+    String[] args = new String[] { \\\"--fish\\\", \\\"face\\\" };\\r\\n+    try {\\r\\n+        CommandLineParser parser = CommandLineParserFactory.newParser();\\r\\n+        CommandLine cmd = parser.parse(opts, args);\\r\\n+        assertTrue(cmd.hasOption(\\\"fish\\\"));\\r\\n+        assertEquals(\\\"face\\\", cmd.getOptionValue(\\\"fish\\\"));\\r\\n+    } catch (ParseException e) {\\r\\n+        fail(\\\"Cannot setUp() CommandLine: \\\" + e.toString());\\r\\n+    }\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\test\java\org\apache\commons\cli\ValueTest.java	testLongOptionalArgValues	org.apache.commons.cli.ValueTest.testLongOptionalArgValues()	76	86	1	[{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"@@ -1,11 +1,11 @@\\n @Test\\r\\n public void testLongOptionalArgValues() throws Exception {\\r\\n-    final String[] args = new String[] { \\\"--gravy\\\", \\\"gold\\\", \\\"garden\\\" };\\r\\n+    final String[] args = { \\\"--gravy\\\", \\\"gold\\\", \\\"garden\\\" };\\r\\n     final Parser parser = new PosixParser();\\r\\n     final CommandLine cmd = parser.parse(opts, args);\\r\\n     assertTrue(cmd.hasOption(\\\"gravy\\\"));\\r\\n     assertEquals(\\\"gold\\\", cmd.getOptionValue(\\\"gravy\\\"));\\r\\n     assertEquals(\\\"gold\\\", cmd.getOptionValues(\\\"gravy\\\")[0]);\\r\\n     assertEquals(\\\"garden\\\", cmd.getOptionValues(\\\"gravy\\\")[1]);\\r\\n     assertEquals(cmd.getArgs().length, 0);\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,11 +1,11 @@\\n @Test\\r\\n public void testLongOptionalArgValues() throws Exception {\\r\\n-    String[] args = new String[] { \\\"--gravy\\\", \\\"gold\\\", \\\"garden\\\" };\\r\\n-    Parser parser = new PosixParser();\\r\\n-    CommandLine cmd = parser.parse(opts, args);\\r\\n+    final String[] args = new String[] { \\\"--gravy\\\", \\\"gold\\\", \\\"garden\\\" };\\r\\n+    final Parser parser = new PosixParser();\\r\\n+    final CommandLine cmd = parser.parse(opts, args);\\r\\n     assertTrue(cmd.hasOption(\\\"gravy\\\"));\\r\\n     assertEquals(\\\"gold\\\", cmd.getOptionValue(\\\"gravy\\\"));\\r\\n     assertEquals(\\\"gold\\\", cmd.getOptionValues(\\\"gravy\\\")[0]);\\r\\n     assertEquals(\\\"garden\\\", cmd.getOptionValues(\\\"gravy\\\")[1]);\\r\\n     assertEquals(cmd.getArgs().length, 0);\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"tn@apache.org","authorName":"Thomas Neidhart","commitYear":"2013","diff":"\"@@ -1,10 +1,11 @@\\n+@Test\\r\\n public void testLongOptionalArgValues() throws Exception {\\r\\n     String[] args = new String[] { \\\"--gravy\\\", \\\"gold\\\", \\\"garden\\\" };\\r\\n     Parser parser = new PosixParser();\\r\\n     CommandLine cmd = parser.parse(opts, args);\\r\\n     assertTrue(cmd.hasOption(\\\"gravy\\\"));\\r\\n     assertEquals(\\\"gold\\\", cmd.getOptionValue(\\\"gravy\\\"));\\r\\n     assertEquals(\\\"gold\\\", cmd.getOptionValues(\\\"gravy\\\")[0]);\\r\\n     assertEquals(\\\"garden\\\", cmd.getOptionValues(\\\"gravy\\\")[1]);\\r\\n     assertEquals(cmd.getArgs().length, 0);\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2008","diff":"\"@@ -1,14 +1,10 @@\\n-public void testLongOptionalArgValues() {\\r\\n+public void testLongOptionalArgValues() throws Exception {\\r\\n     String[] args = new String[] { \\\"--gravy\\\", \\\"gold\\\", \\\"garden\\\" };\\r\\n-    try {\\r\\n-        Parser parser = new PosixParser();\\r\\n-        CommandLine cmd = parser.parse(opts, args);\\r\\n-        assertTrue(cmd.hasOption(\\\"gravy\\\"));\\r\\n-        assertEquals(\\\"gold\\\", cmd.getOptionValue(\\\"gravy\\\"));\\r\\n-        assertEquals(\\\"gold\\\", cmd.getOptionValues(\\\"gravy\\\")[0]);\\r\\n-        assertEquals(\\\"garden\\\", cmd.getOptionValues(\\\"gravy\\\")[1]);\\r\\n-        assertEquals(cmd.getArgs().length, 0);\\r\\n-    } catch (ParseException e) {\\r\\n-        fail(\\\"Cannot setUp() CommandLine: \\\" + e.toString());\\r\\n-    }\\r\\n+    Parser parser = new PosixParser();\\r\\n+    CommandLine cmd = parser.parse(opts, args);\\r\\n+    assertTrue(cmd.hasOption(\\\"gravy\\\"));\\r\\n+    assertEquals(\\\"gold\\\", cmd.getOptionValue(\\\"gravy\\\"));\\r\\n+    assertEquals(\\\"gold\\\", cmd.getOptionValues(\\\"gravy\\\")[0]);\\r\\n+    assertEquals(\\\"garden\\\", cmd.getOptionValues(\\\"gravy\\\")[1]);\\r\\n+    assertEquals(cmd.getArgs().length, 0);\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"bayard@apache.org","authorName":"Henri Yandell","commitYear":"2007","diff":"\"@@ -1,14 +1,14 @@\\n public void testLongOptionalArgValues() {\\r\\n     String[] args = new String[] { \\\"--gravy\\\", \\\"gold\\\", \\\"garden\\\" };\\r\\n     try {\\r\\n-        CommandLineParser parser = new PosixParser();\\r\\n+        Parser parser = new PosixParser();\\r\\n         CommandLine cmd = parser.parse(opts, args);\\r\\n         assertTrue(cmd.hasOption(\\\"gravy\\\"));\\r\\n         assertEquals(\\\"gold\\\", cmd.getOptionValue(\\\"gravy\\\"));\\r\\n         assertEquals(\\\"gold\\\", cmd.getOptionValues(\\\"gravy\\\")[0]);\\r\\n         assertEquals(\\\"garden\\\", cmd.getOptionValues(\\\"gravy\\\")[1]);\\r\\n         assertEquals(cmd.getArgs().length, 0);\\r\\n     } catch (ParseException e) {\\r\\n         fail(\\\"Cannot setUp() CommandLine: \\\" + e.toString());\\r\\n     }\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -1,14 +1,14 @@\\n public void testLongOptionalArgValues() {\\r\\n     String[] args = new String[] { \\\"--gravy\\\", \\\"gold\\\", \\\"garden\\\" };\\r\\n     try {\\r\\n-        CommandLineParser parser = CommandLineParserFactory.newParser();\\r\\n+        CommandLineParser parser = new PosixParser();\\r\\n         CommandLine cmd = parser.parse(opts, args);\\r\\n         assertTrue(cmd.hasOption(\\\"gravy\\\"));\\r\\n         assertEquals(\\\"gold\\\", cmd.getOptionValue(\\\"gravy\\\"));\\r\\n         assertEquals(\\\"gold\\\", cmd.getOptionValues(\\\"gravy\\\")[0]);\\r\\n         assertEquals(\\\"garden\\\", cmd.getOptionValues(\\\"gravy\\\")[1]);\\r\\n         assertEquals(cmd.getArgs().length, 0);\\r\\n     } catch (ParseException e) {\\r\\n         fail(\\\"Cannot setUp() CommandLine: \\\" + e.toString());\\r\\n     }\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -0,0 +1,14 @@\\n+public void testLongOptionalArgValues() {\\r\\n+    String[] args = new String[] { \\\"--gravy\\\", \\\"gold\\\", \\\"garden\\\" };\\r\\n+    try {\\r\\n+        CommandLineParser parser = CommandLineParserFactory.newParser();\\r\\n+        CommandLine cmd = parser.parse(opts, args);\\r\\n+        assertTrue(cmd.hasOption(\\\"gravy\\\"));\\r\\n+        assertEquals(\\\"gold\\\", cmd.getOptionValue(\\\"gravy\\\"));\\r\\n+        assertEquals(\\\"gold\\\", cmd.getOptionValues(\\\"gravy\\\")[0]);\\r\\n+        assertEquals(\\\"garden\\\", cmd.getOptionValues(\\\"gravy\\\")[1]);\\r\\n+        assertEquals(cmd.getArgs().length, 0);\\r\\n+    } catch (ParseException e) {\\r\\n+        fail(\\\"Cannot setUp() CommandLine: \\\" + e.toString());\\r\\n+    }\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\test\java\org\apache\commons\cli\ValueTest.java	testLongOptionalArgValuesWithOption	org.apache.commons.cli.ValueTest.testLongOptionalArgValuesWithOption()	89	99	1	[{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"@@ -1,11 +1,11 @@\\n @Test\\r\\n public void testLongOptionalArgValuesWithOption() throws Exception {\\r\\n-    final String[] args = new String[] { \\\"--gravy\\\", \\\"gold\\\", \\\"garden\\\" };\\r\\n+    final String[] args = { \\\"--gravy\\\", \\\"gold\\\", \\\"garden\\\" };\\r\\n     final Parser parser = new PosixParser();\\r\\n     final CommandLine cmd = parser.parse(opts, args);\\r\\n     assertTrue(cmd.hasOption(opts.getOption(\\\"gravy\\\")));\\r\\n     assertEquals(\\\"gold\\\", cmd.getOptionValue(opts.getOption(\\\"gravy\\\")));\\r\\n     assertEquals(\\\"gold\\\", cmd.getOptionValues(opts.getOption(\\\"gravy\\\"))[0]);\\r\\n     assertEquals(\\\"garden\\\", cmd.getOptionValues(opts.getOption(\\\"gravy\\\"))[1]);\\r\\n     assertEquals(cmd.getArgs().length, 0);\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,11 +1,11 @@\\n @Test\\r\\n public void testLongOptionalArgValuesWithOption() throws Exception {\\r\\n-    String[] args = new String[] { \\\"--gravy\\\", \\\"gold\\\", \\\"garden\\\" };\\r\\n-    Parser parser = new PosixParser();\\r\\n-    CommandLine cmd = parser.parse(opts, args);\\r\\n+    final String[] args = new String[] { \\\"--gravy\\\", \\\"gold\\\", \\\"garden\\\" };\\r\\n+    final Parser parser = new PosixParser();\\r\\n+    final CommandLine cmd = parser.parse(opts, args);\\r\\n     assertTrue(cmd.hasOption(opts.getOption(\\\"gravy\\\")));\\r\\n     assertEquals(\\\"gold\\\", cmd.getOptionValue(opts.getOption(\\\"gravy\\\")));\\r\\n     assertEquals(\\\"gold\\\", cmd.getOptionValues(opts.getOption(\\\"gravy\\\"))[0]);\\r\\n     assertEquals(\\\"garden\\\", cmd.getOptionValues(opts.getOption(\\\"gravy\\\"))[1]);\\r\\n     assertEquals(cmd.getArgs().length, 0);\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"britter@apache.org","authorName":"Benedikt Ritter","commitYear":"2017","diff":"\"@@ -0,0 +1,11 @@\\n+@Test\\r\\n+public void testLongOptionalArgValuesWithOption() throws Exception {\\r\\n+    String[] args = new String[] { \\\"--gravy\\\", \\\"gold\\\", \\\"garden\\\" };\\r\\n+    Parser parser = new PosixParser();\\r\\n+    CommandLine cmd = parser.parse(opts, args);\\r\\n+    assertTrue(cmd.hasOption(opts.getOption(\\\"gravy\\\")));\\r\\n+    assertEquals(\\\"gold\\\", cmd.getOptionValue(opts.getOption(\\\"gravy\\\")));\\r\\n+    assertEquals(\\\"gold\\\", cmd.getOptionValues(opts.getOption(\\\"gravy\\\"))[0]);\\r\\n+    assertEquals(\\\"garden\\\", cmd.getOptionValues(opts.getOption(\\\"gravy\\\"))[1]);\\r\\n+    assertEquals(cmd.getArgs().length, 0);\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\test\java\org\apache\commons\cli\ValueTest.java	testLongOptionalArgValueWithOption	org.apache.commons.cli.ValueTest.testLongOptionalArgValueWithOption()	102	109	1	[{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"@@ -1,8 +1,8 @@\\n @Test\\r\\n public void testLongOptionalArgValueWithOption() throws Exception {\\r\\n-    final String[] args = new String[] { \\\"--fish\\\", \\\"face\\\" };\\r\\n+    final String[] args = { \\\"--fish\\\", \\\"face\\\" };\\r\\n     final Parser parser = new PosixParser();\\r\\n     final CommandLine cmd = parser.parse(opts, args);\\r\\n     assertTrue(cmd.hasOption(opts.getOption(\\\"fish\\\")));\\r\\n     assertEquals(\\\"face\\\", cmd.getOptionValue(opts.getOption(\\\"fish\\\")));\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,8 +1,8 @@\\n @Test\\r\\n public void testLongOptionalArgValueWithOption() throws Exception {\\r\\n-    String[] args = new String[] { \\\"--fish\\\", \\\"face\\\" };\\r\\n-    Parser parser = new PosixParser();\\r\\n-    CommandLine cmd = parser.parse(opts, args);\\r\\n+    final String[] args = new String[] { \\\"--fish\\\", \\\"face\\\" };\\r\\n+    final Parser parser = new PosixParser();\\r\\n+    final CommandLine cmd = parser.parse(opts, args);\\r\\n     assertTrue(cmd.hasOption(opts.getOption(\\\"fish\\\")));\\r\\n     assertEquals(\\\"face\\\", cmd.getOptionValue(opts.getOption(\\\"fish\\\")));\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"britter@apache.org","authorName":"Benedikt Ritter","commitYear":"2017","diff":"\"@@ -0,0 +1,8 @@\\n+@Test\\r\\n+public void testLongOptionalArgValueWithOption() throws Exception {\\r\\n+    String[] args = new String[] { \\\"--fish\\\", \\\"face\\\" };\\r\\n+    Parser parser = new PosixParser();\\r\\n+    CommandLine cmd = parser.parse(opts, args);\\r\\n+    assertTrue(cmd.hasOption(opts.getOption(\\\"fish\\\")));\\r\\n+    assertEquals(\\\"face\\\", cmd.getOptionValue(opts.getOption(\\\"fish\\\")));\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\test\java\org\apache\commons\cli\ValueTest.java	testLongOptionalNArgValues	org.apache.commons.cli.ValueTest.testLongOptionalNArgValues()	112	124	1	[{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"@@ -1,12 +1,12 @@\\n @Test\\r\\n public void testLongOptionalNArgValues() throws Exception {\\r\\n-    final String[] args = new String[] { \\\"--hide\\\", \\\"house\\\", \\\"hair\\\", \\\"head\\\" };\\r\\n+    final String[] args = { \\\"--hide\\\", \\\"house\\\", \\\"hair\\\", \\\"head\\\" };\\r\\n     final Parser parser = new PosixParser();\\r\\n     final CommandLine cmd = parser.parse(opts, args);\\r\\n     assertTrue(cmd.hasOption(\\\"hide\\\"));\\r\\n     assertEquals(\\\"house\\\", cmd.getOptionValue(\\\"hide\\\"));\\r\\n     assertEquals(\\\"house\\\", cmd.getOptionValues(\\\"hide\\\")[0]);\\r\\n     assertEquals(\\\"hair\\\", cmd.getOptionValues(\\\"hide\\\")[1]);\\r\\n     assertEquals(cmd.getArgs().length, 1);\\r\\n     assertEquals(\\\"head\\\", cmd.getArgs()[0]);\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2019","diff":"\"\""},{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,12 +1,12 @@\\n @Test\\r\\n public void testLongOptionalNArgValues() throws Exception {\\r\\n-    String[] args = new String[] { \\\"--hide\\\", \\\"house\\\", \\\"hair\\\", \\\"head\\\" };\\r\\n-    Parser parser = new PosixParser();\\r\\n-    CommandLine cmd = parser.parse(opts, args);\\r\\n+    final String[] args = new String[] { \\\"--hide\\\", \\\"house\\\", \\\"hair\\\", \\\"head\\\" };\\r\\n+    final Parser parser = new PosixParser();\\r\\n+    final CommandLine cmd = parser.parse(opts, args);\\r\\n     assertTrue(cmd.hasOption(\\\"hide\\\"));\\r\\n     assertEquals(\\\"house\\\", cmd.getOptionValue(\\\"hide\\\"));\\r\\n     assertEquals(\\\"house\\\", cmd.getOptionValues(\\\"hide\\\")[0]);\\r\\n     assertEquals(\\\"hair\\\", cmd.getOptionValues(\\\"hide\\\")[1]);\\r\\n     assertEquals(cmd.getArgs().length, 1);\\r\\n     assertEquals(\\\"head\\\", cmd.getArgs()[0]);\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"tn@apache.org","authorName":"Thomas Neidhart","commitYear":"2013","diff":"\"@@ -1,11 +1,12 @@\\n+@Test\\r\\n public void testLongOptionalNArgValues() throws Exception {\\r\\n     String[] args = new String[] { \\\"--hide\\\", \\\"house\\\", \\\"hair\\\", \\\"head\\\" };\\r\\n     Parser parser = new PosixParser();\\r\\n     CommandLine cmd = parser.parse(opts, args);\\r\\n     assertTrue(cmd.hasOption(\\\"hide\\\"));\\r\\n     assertEquals(\\\"house\\\", cmd.getOptionValue(\\\"hide\\\"));\\r\\n     assertEquals(\\\"house\\\", cmd.getOptionValues(\\\"hide\\\")[0]);\\r\\n     assertEquals(\\\"hair\\\", cmd.getOptionValues(\\\"hide\\\")[1]);\\r\\n     assertEquals(cmd.getArgs().length, 1);\\r\\n     assertEquals(\\\"head\\\", cmd.getArgs()[0]);\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2008","diff":"\"@@ -1,15 +1,11 @@\\n-public void testLongOptionalNArgValues() {\\r\\n+public void testLongOptionalNArgValues() throws Exception {\\r\\n     String[] args = new String[] { \\\"--hide\\\", \\\"house\\\", \\\"hair\\\", \\\"head\\\" };\\r\\n     Parser parser = new PosixParser();\\r\\n-    try {\\r\\n-        CommandLine cmd = parser.parse(opts, args);\\r\\n-        assertTrue(cmd.hasOption(\\\"hide\\\"));\\r\\n-        assertEquals(\\\"house\\\", cmd.getOptionValue(\\\"hide\\\"));\\r\\n-        assertEquals(\\\"house\\\", cmd.getOptionValues(\\\"hide\\\")[0]);\\r\\n-        assertEquals(\\\"hair\\\", cmd.getOptionValues(\\\"hide\\\")[1]);\\r\\n-        assertEquals(cmd.getArgs().length, 1);\\r\\n-        assertEquals(\\\"head\\\", cmd.getArgs()[0]);\\r\\n-    } catch (ParseException e) {\\r\\n-        fail(\\\"Cannot setUp() CommandLine: \\\" + e.toString());\\r\\n-    }\\r\\n+    CommandLine cmd = parser.parse(opts, args);\\r\\n+    assertTrue(cmd.hasOption(\\\"hide\\\"));\\r\\n+    assertEquals(\\\"house\\\", cmd.getOptionValue(\\\"hide\\\"));\\r\\n+    assertEquals(\\\"house\\\", cmd.getOptionValues(\\\"hide\\\")[0]);\\r\\n+    assertEquals(\\\"hair\\\", cmd.getOptionValues(\\\"hide\\\")[1]);\\r\\n+    assertEquals(cmd.getArgs().length, 1);\\r\\n+    assertEquals(\\\"head\\\", cmd.getArgs()[0]);\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"bayard@apache.org","authorName":"Henri Yandell","commitYear":"2007","diff":"\"@@ -1,15 +1,15 @@\\n public void testLongOptionalNArgValues() {\\r\\n     String[] args = new String[] { \\\"--hide\\\", \\\"house\\\", \\\"hair\\\", \\\"head\\\" };\\r\\n-    CommandLineParser parser = new PosixParser();\\r\\n+    Parser parser = new PosixParser();\\r\\n     try {\\r\\n         CommandLine cmd = parser.parse(opts, args);\\r\\n         assertTrue(cmd.hasOption(\\\"hide\\\"));\\r\\n         assertEquals(\\\"house\\\", cmd.getOptionValue(\\\"hide\\\"));\\r\\n         assertEquals(\\\"house\\\", cmd.getOptionValues(\\\"hide\\\")[0]);\\r\\n         assertEquals(\\\"hair\\\", cmd.getOptionValues(\\\"hide\\\")[1]);\\r\\n         assertEquals(cmd.getArgs().length, 1);\\r\\n         assertEquals(\\\"head\\\", cmd.getArgs()[0]);\\r\\n     } catch (ParseException e) {\\r\\n         fail(\\\"Cannot setUp() CommandLine: \\\" + e.toString());\\r\\n     }\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -1,15 +1,15 @@\\n public void testLongOptionalNArgValues() {\\r\\n     String[] args = new String[] { \\\"--hide\\\", \\\"house\\\", \\\"hair\\\", \\\"head\\\" };\\r\\n+    CommandLineParser parser = new PosixParser();\\r\\n     try {\\r\\n-        CommandLineParser parser = new PosixParser();\\r\\n         CommandLine cmd = parser.parse(opts, args);\\r\\n         assertTrue(cmd.hasOption(\\\"hide\\\"));\\r\\n         assertEquals(\\\"house\\\", cmd.getOptionValue(\\\"hide\\\"));\\r\\n         assertEquals(\\\"house\\\", cmd.getOptionValues(\\\"hide\\\")[0]);\\r\\n         assertEquals(\\\"hair\\\", cmd.getOptionValues(\\\"hide\\\")[1]);\\r\\n         assertEquals(cmd.getArgs().length, 1);\\r\\n         assertEquals(\\\"head\\\", cmd.getArgs()[0]);\\r\\n     } catch (ParseException e) {\\r\\n         fail(\\\"Cannot setUp() CommandLine: \\\" + e.toString());\\r\\n     }\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -1,15 +1,15 @@\\n public void testLongOptionalNArgValues() {\\r\\n     String[] args = new String[] { \\\"--hide\\\", \\\"house\\\", \\\"hair\\\", \\\"head\\\" };\\r\\n     try {\\r\\n-        CommandLineParser parser = CommandLineParserFactory.newParser();\\r\\n+        CommandLineParser parser = new PosixParser();\\r\\n         CommandLine cmd = parser.parse(opts, args);\\r\\n         assertTrue(cmd.hasOption(\\\"hide\\\"));\\r\\n         assertEquals(\\\"house\\\", cmd.getOptionValue(\\\"hide\\\"));\\r\\n         assertEquals(\\\"house\\\", cmd.getOptionValues(\\\"hide\\\")[0]);\\r\\n         assertEquals(\\\"hair\\\", cmd.getOptionValues(\\\"hide\\\")[1]);\\r\\n         assertEquals(cmd.getArgs().length, 1);\\r\\n         assertEquals(\\\"head\\\", cmd.getArgs()[0]);\\r\\n     } catch (ParseException e) {\\r\\n         fail(\\\"Cannot setUp() CommandLine: \\\" + e.toString());\\r\\n     }\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -0,0 +1,15 @@\\n+public void testLongOptionalNArgValues() {\\r\\n+    String[] args = new String[] { \\\"--hide\\\", \\\"house\\\", \\\"hair\\\", \\\"head\\\" };\\r\\n+    try {\\r\\n+        CommandLineParser parser = CommandLineParserFactory.newParser();\\r\\n+        CommandLine cmd = parser.parse(opts, args);\\r\\n+        assertTrue(cmd.hasOption(\\\"hide\\\"));\\r\\n+        assertEquals(\\\"house\\\", cmd.getOptionValue(\\\"hide\\\"));\\r\\n+        assertEquals(\\\"house\\\", cmd.getOptionValues(\\\"hide\\\")[0]);\\r\\n+        assertEquals(\\\"hair\\\", cmd.getOptionValues(\\\"hide\\\")[1]);\\r\\n+        assertEquals(cmd.getArgs().length, 1);\\r\\n+        assertEquals(\\\"head\\\", cmd.getArgs()[0]);\\r\\n+    } catch (ParseException e) {\\r\\n+        fail(\\\"Cannot setUp() CommandLine: \\\" + e.toString());\\r\\n+    }\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\test\java\org\apache\commons\cli\ValueTest.java	testLongOptionalNArgValuesWithOption	org.apache.commons.cli.ValueTest.testLongOptionalNArgValuesWithOption()	127	139	1	[{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"@@ -1,12 +1,12 @@\\n @Test\\r\\n public void testLongOptionalNArgValuesWithOption() throws Exception {\\r\\n-    final String[] args = new String[] { \\\"--hide\\\", \\\"house\\\", \\\"hair\\\", \\\"head\\\" };\\r\\n+    final String[] args = { \\\"--hide\\\", \\\"house\\\", \\\"hair\\\", \\\"head\\\" };\\r\\n     final Parser parser = new PosixParser();\\r\\n     final CommandLine cmd = parser.parse(opts, args);\\r\\n     assertTrue(cmd.hasOption(opts.getOption(\\\"hide\\\")));\\r\\n     assertEquals(\\\"house\\\", cmd.getOptionValue(opts.getOption(\\\"hide\\\")));\\r\\n     assertEquals(\\\"house\\\", cmd.getOptionValues(opts.getOption(\\\"hide\\\"))[0]);\\r\\n     assertEquals(\\\"hair\\\", cmd.getOptionValues(opts.getOption(\\\"hide\\\"))[1]);\\r\\n     assertEquals(cmd.getArgs().length, 1);\\r\\n     assertEquals(\\\"head\\\", cmd.getArgs()[0]);\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2019","diff":"\"\""},{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,12 +1,12 @@\\n @Test\\r\\n public void testLongOptionalNArgValuesWithOption() throws Exception {\\r\\n-    String[] args = new String[] { \\\"--hide\\\", \\\"house\\\", \\\"hair\\\", \\\"head\\\" };\\r\\n-    Parser parser = new PosixParser();\\r\\n-    CommandLine cmd = parser.parse(opts, args);\\r\\n+    final String[] args = new String[] { \\\"--hide\\\", \\\"house\\\", \\\"hair\\\", \\\"head\\\" };\\r\\n+    final Parser parser = new PosixParser();\\r\\n+    final CommandLine cmd = parser.parse(opts, args);\\r\\n     assertTrue(cmd.hasOption(opts.getOption(\\\"hide\\\")));\\r\\n     assertEquals(\\\"house\\\", cmd.getOptionValue(opts.getOption(\\\"hide\\\")));\\r\\n     assertEquals(\\\"house\\\", cmd.getOptionValues(opts.getOption(\\\"hide\\\"))[0]);\\r\\n     assertEquals(\\\"hair\\\", cmd.getOptionValues(opts.getOption(\\\"hide\\\"))[1]);\\r\\n     assertEquals(cmd.getArgs().length, 1);\\r\\n     assertEquals(\\\"head\\\", cmd.getArgs()[0]);\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"britter@apache.org","authorName":"Benedikt Ritter","commitYear":"2017","diff":"\"@@ -0,0 +1,12 @@\\n+@Test\\r\\n+public void testLongOptionalNArgValuesWithOption() throws Exception {\\r\\n+    String[] args = new String[] { \\\"--hide\\\", \\\"house\\\", \\\"hair\\\", \\\"head\\\" };\\r\\n+    Parser parser = new PosixParser();\\r\\n+    CommandLine cmd = parser.parse(opts, args);\\r\\n+    assertTrue(cmd.hasOption(opts.getOption(\\\"hide\\\")));\\r\\n+    assertEquals(\\\"house\\\", cmd.getOptionValue(opts.getOption(\\\"hide\\\")));\\r\\n+    assertEquals(\\\"house\\\", cmd.getOptionValues(opts.getOption(\\\"hide\\\"))[0]);\\r\\n+    assertEquals(\\\"hair\\\", cmd.getOptionValues(opts.getOption(\\\"hide\\\"))[1]);\\r\\n+    assertEquals(cmd.getArgs().length, 1);\\r\\n+    assertEquals(\\\"head\\\", cmd.getArgs()[0]);\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\test\java\org\apache\commons\cli\ValueTest.java	testLongOptionalNoValue	org.apache.commons.cli.ValueTest.testLongOptionalNoValue()	142	149	1	[{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"@@ -1,8 +1,8 @@\\n @Test\\r\\n public void testLongOptionalNoValue() throws Exception {\\r\\n-    final String[] args = new String[] { \\\"--fish\\\" };\\r\\n+    final String[] args = { \\\"--fish\\\" };\\r\\n     final Parser parser = new PosixParser();\\r\\n     final CommandLine cmd = parser.parse(opts, args);\\r\\n     assertTrue(cmd.hasOption(\\\"fish\\\"));\\r\\n     assertNull(cmd.getOptionValue(\\\"fish\\\"));\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,8 +1,8 @@\\n @Test\\r\\n public void testLongOptionalNoValue() throws Exception {\\r\\n-    String[] args = new String[] { \\\"--fish\\\" };\\r\\n-    Parser parser = new PosixParser();\\r\\n-    CommandLine cmd = parser.parse(opts, args);\\r\\n+    final String[] args = new String[] { \\\"--fish\\\" };\\r\\n+    final Parser parser = new PosixParser();\\r\\n+    final CommandLine cmd = parser.parse(opts, args);\\r\\n     assertTrue(cmd.hasOption(\\\"fish\\\"));\\r\\n     assertNull(cmd.getOptionValue(\\\"fish\\\"));\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"tn@apache.org","authorName":"Thomas Neidhart","commitYear":"2013","diff":"\"@@ -1,7 +1,8 @@\\n+@Test\\r\\n public void testLongOptionalNoValue() throws Exception {\\r\\n     String[] args = new String[] { \\\"--fish\\\" };\\r\\n     Parser parser = new PosixParser();\\r\\n     CommandLine cmd = parser.parse(opts, args);\\r\\n     assertTrue(cmd.hasOption(\\\"fish\\\"));\\r\\n     assertNull(cmd.getOptionValue(\\\"fish\\\"));\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2008","diff":"\"@@ -1,11 +1,7 @@\\n-public void testLongOptionalNoValue() {\\r\\n+public void testLongOptionalNoValue() throws Exception {\\r\\n     String[] args = new String[] { \\\"--fish\\\" };\\r\\n-    try {\\r\\n-        Parser parser = new PosixParser();\\r\\n-        CommandLine cmd = parser.parse(opts, args);\\r\\n-        assertTrue(cmd.hasOption(\\\"fish\\\"));\\r\\n-        assertNull(cmd.getOptionValue(\\\"fish\\\"));\\r\\n-    } catch (ParseException e) {\\r\\n-        fail(\\\"Cannot setUp() CommandLine: \\\" + e.toString());\\r\\n-    }\\r\\n+    Parser parser = new PosixParser();\\r\\n+    CommandLine cmd = parser.parse(opts, args);\\r\\n+    assertTrue(cmd.hasOption(\\\"fish\\\"));\\r\\n+    assertNull(cmd.getOptionValue(\\\"fish\\\"));\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"bayard@apache.org","authorName":"Henri Yandell","commitYear":"2007","diff":"\"@@ -1,11 +1,11 @@\\n public void testLongOptionalNoValue() {\\r\\n     String[] args = new String[] { \\\"--fish\\\" };\\r\\n     try {\\r\\n-        CommandLineParser parser = new PosixParser();\\r\\n+        Parser parser = new PosixParser();\\r\\n         CommandLine cmd = parser.parse(opts, args);\\r\\n         assertTrue(cmd.hasOption(\\\"fish\\\"));\\r\\n         assertNull(cmd.getOptionValue(\\\"fish\\\"));\\r\\n     } catch (ParseException e) {\\r\\n         fail(\\\"Cannot setUp() CommandLine: \\\" + e.toString());\\r\\n     }\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -1,11 +1,11 @@\\n public void testLongOptionalNoValue() {\\r\\n     String[] args = new String[] { \\\"--fish\\\" };\\r\\n     try {\\r\\n-        CommandLineParser parser = CommandLineParserFactory.newParser();\\r\\n+        CommandLineParser parser = new PosixParser();\\r\\n         CommandLine cmd = parser.parse(opts, args);\\r\\n         assertTrue(cmd.hasOption(\\\"fish\\\"));\\r\\n         assertNull(cmd.getOptionValue(\\\"fish\\\"));\\r\\n     } catch (ParseException e) {\\r\\n         fail(\\\"Cannot setUp() CommandLine: \\\" + e.toString());\\r\\n     }\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -0,0 +1,11 @@\\n+public void testLongOptionalNoValue() {\\r\\n+    String[] args = new String[] { \\\"--fish\\\" };\\r\\n+    try {\\r\\n+        CommandLineParser parser = CommandLineParserFactory.newParser();\\r\\n+        CommandLine cmd = parser.parse(opts, args);\\r\\n+        assertTrue(cmd.hasOption(\\\"fish\\\"));\\r\\n+        assertNull(cmd.getOptionValue(\\\"fish\\\"));\\r\\n+    } catch (ParseException e) {\\r\\n+        fail(\\\"Cannot setUp() CommandLine: \\\" + e.toString());\\r\\n+    }\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\test\java\org\apache\commons\cli\ValueTest.java	testLongOptionalNoValueWithOption	org.apache.commons.cli.ValueTest.testLongOptionalNoValueWithOption()	152	159	1	[{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"@@ -1,8 +1,8 @@\\n @Test\\r\\n public void testLongOptionalNoValueWithOption() throws Exception {\\r\\n-    final String[] args = new String[] { \\\"--fish\\\" };\\r\\n+    final String[] args = { \\\"--fish\\\" };\\r\\n     final Parser parser = new PosixParser();\\r\\n     final CommandLine cmd = parser.parse(opts, args);\\r\\n     assertTrue(cmd.hasOption(opts.getOption(\\\"fish\\\")));\\r\\n     assertNull(cmd.getOptionValue(opts.getOption(\\\"fish\\\")));\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,8 +1,8 @@\\n @Test\\r\\n public void testLongOptionalNoValueWithOption() throws Exception {\\r\\n-    String[] args = new String[] { \\\"--fish\\\" };\\r\\n-    Parser parser = new PosixParser();\\r\\n-    CommandLine cmd = parser.parse(opts, args);\\r\\n+    final String[] args = new String[] { \\\"--fish\\\" };\\r\\n+    final Parser parser = new PosixParser();\\r\\n+    final CommandLine cmd = parser.parse(opts, args);\\r\\n     assertTrue(cmd.hasOption(opts.getOption(\\\"fish\\\")));\\r\\n     assertNull(cmd.getOptionValue(opts.getOption(\\\"fish\\\")));\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"britter@apache.org","authorName":"Benedikt Ritter","commitYear":"2017","diff":"\"@@ -0,0 +1,8 @@\\n+@Test\\r\\n+public void testLongOptionalNoValueWithOption() throws Exception {\\r\\n+    String[] args = new String[] { \\\"--fish\\\" };\\r\\n+    Parser parser = new PosixParser();\\r\\n+    CommandLine cmd = parser.parse(opts, args);\\r\\n+    assertTrue(cmd.hasOption(opts.getOption(\\\"fish\\\")));\\r\\n+    assertNull(cmd.getOptionValue(opts.getOption(\\\"fish\\\")));\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\test\java\org\apache\commons\cli\ValueTest.java	testLongWithArg	org.apache.commons.cli.ValueTest.testLongWithArg()	162	166	1	[{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"@@ -1,6 +1,6 @@\\n @Test\\r\\n public void testLongWithArg() {\\r\\n-    assertTrue(_cl.hasOption(\\\"d\\\"));\\r\\n-    assertNotNull(_cl.getOptionValue(\\\"d\\\"));\\r\\n-    assertEquals(_cl.getOptionValue(\\\"d\\\"), \\\"bar\\\");\\r\\n+    assertTrue(cl.hasOption(\\\"d\\\"));\\r\\n+    assertNotNull(cl.getOptionValue(\\\"d\\\"));\\r\\n+    assertEquals(cl.getOptionValue(\\\"d\\\"), \\\"bar\\\");\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"tn@apache.org","authorName":"Thomas Neidhart","commitYear":"2013","diff":"\"@@ -1,5 +1,6 @@\\n+@Test\\r\\n public void testLongWithArg() {\\r\\n     assertTrue(_cl.hasOption(\\\"d\\\"));\\r\\n     assertNotNull(_cl.getOptionValue(\\\"d\\\"));\\r\\n     assertEquals(_cl.getOptionValue(\\\"d\\\"), \\\"bar\\\");\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -1,5 +1,5 @@\\n public void testLongWithArg() {\\r\\n-    assertTrue(_cl.hasOption('d'));\\r\\n-    assertNotNull(_cl.getOptionValue('d'));\\r\\n-    assertEquals(_cl.getOptionValue('d'), \\\"bar\\\");\\r\\n+    assertTrue(_cl.hasOption(\\\"d\\\"));\\r\\n+    assertNotNull(_cl.getOptionValue(\\\"d\\\"));\\r\\n+    assertEquals(_cl.getOptionValue(\\\"d\\\"), \\\"bar\\\");\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jstrachan@apache.org","authorName":"James Strachan","commitYear":"2002","diff":"\"@@ -0,0 +1,5 @@\\n+public void testLongWithArg() {\\r\\n+    assertTrue(_cl.hasOption('d'));\\r\\n+    assertNotNull(_cl.getOptionValue('d'));\\r\\n+    assertEquals(_cl.getOptionValue('d'), \\\"bar\\\");\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\test\java\org\apache\commons\cli\ValueTest.java	testLongWithArgWithOption	org.apache.commons.cli.ValueTest.testLongWithArgWithOption()	169	173	1	[{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"@@ -1,6 +1,6 @@\\n @Test\\r\\n public void testLongWithArgWithOption() {\\r\\n-    assertTrue(_cl.hasOption(opts.getOption(\\\"d\\\")));\\r\\n-    assertNotNull(_cl.getOptionValue(opts.getOption(\\\"d\\\")));\\r\\n-    assertEquals(_cl.getOptionValue(opts.getOption(\\\"d\\\")), \\\"bar\\\");\\r\\n+    assertTrue(cl.hasOption(opts.getOption(\\\"d\\\")));\\r\\n+    assertNotNull(cl.getOptionValue(opts.getOption(\\\"d\\\")));\\r\\n+    assertEquals(cl.getOptionValue(opts.getOption(\\\"d\\\")), \\\"bar\\\");\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"britter@apache.org","authorName":"Benedikt Ritter","commitYear":"2017","diff":"\"@@ -0,0 +1,6 @@\\n+@Test\\r\\n+public void testLongWithArgWithOption() {\\r\\n+    assertTrue(_cl.hasOption(opts.getOption(\\\"d\\\")));\\r\\n+    assertNotNull(_cl.getOptionValue(opts.getOption(\\\"d\\\")));\\r\\n+    assertEquals(_cl.getOptionValue(opts.getOption(\\\"d\\\")), \\\"bar\\\");\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\test\java\org\apache\commons\cli\ValueTest.java	testShortNoArg	org.apache.commons.cli.ValueTest.testShortNoArg()	176	179	1	[{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"@@ -1,5 +1,5 @@\\n @Test\\r\\n public void testShortNoArg() {\\r\\n-    assertTrue(_cl.hasOption(\\\"a\\\"));\\r\\n-    assertNull(_cl.getOptionValue(\\\"a\\\"));\\r\\n+    assertTrue(cl.hasOption(\\\"a\\\"));\\r\\n+    assertNull(cl.getOptionValue(\\\"a\\\"));\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"tn@apache.org","authorName":"Thomas Neidhart","commitYear":"2013","diff":"\"@@ -1,4 +1,5 @@\\n+@Test\\r\\n public void testShortNoArg() {\\r\\n     assertTrue(_cl.hasOption(\\\"a\\\"));\\r\\n     assertNull(_cl.getOptionValue(\\\"a\\\"));\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -1,4 +1,4 @@\\n public void testShortNoArg() {\\r\\n-    assertTrue(_cl.hasOption('a'));\\r\\n-    assertNull(_cl.getOptionValue('a'));\\r\\n+    assertTrue(_cl.hasOption(\\\"a\\\"));\\r\\n+    assertNull(_cl.getOptionValue(\\\"a\\\"));\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jstrachan@apache.org","authorName":"James Strachan","commitYear":"2002","diff":"\"@@ -0,0 +1,4 @@\\n+public void testShortNoArg() {\\r\\n+    assertTrue(_cl.hasOption('a'));\\r\\n+    assertNull(_cl.getOptionValue('a'));\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\test\java\org\apache\commons\cli\ValueTest.java	testShortNoArgWithOption	org.apache.commons.cli.ValueTest.testShortNoArgWithOption()	182	185	1	[{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"@@ -1,5 +1,5 @@\\n @Test\\r\\n public void testShortNoArgWithOption() {\\r\\n-    assertTrue(_cl.hasOption(opts.getOption(\\\"a\\\")));\\r\\n-    assertNull(_cl.getOptionValue(opts.getOption(\\\"a\\\")));\\r\\n+    assertTrue(cl.hasOption(opts.getOption(\\\"a\\\")));\\r\\n+    assertNull(cl.getOptionValue(opts.getOption(\\\"a\\\")));\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"britter@apache.org","authorName":"Benedikt Ritter","commitYear":"2017","diff":"\"@@ -0,0 +1,5 @@\\n+@Test\\r\\n+public void testShortNoArgWithOption() {\\r\\n+    assertTrue(_cl.hasOption(opts.getOption(\\\"a\\\")));\\r\\n+    assertNull(_cl.getOptionValue(opts.getOption(\\\"a\\\")));\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\test\java\org\apache\commons\cli\ValueTest.java	testShortOptionalArgNoValue	org.apache.commons.cli.ValueTest.testShortOptionalArgNoValue()	188	195	1	[{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"@@ -1,8 +1,8 @@\\n @Test\\r\\n public void testShortOptionalArgNoValue() throws Exception {\\r\\n-    final String[] args = new String[] { \\\"-e\\\" };\\r\\n+    final String[] args = { \\\"-e\\\" };\\r\\n     final Parser parser = new PosixParser();\\r\\n     final CommandLine cmd = parser.parse(opts, args);\\r\\n     assertTrue(cmd.hasOption(\\\"e\\\"));\\r\\n     assertNull(cmd.getOptionValue(\\\"e\\\"));\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,8 +1,8 @@\\n @Test\\r\\n public void testShortOptionalArgNoValue() throws Exception {\\r\\n-    String[] args = new String[] { \\\"-e\\\" };\\r\\n-    Parser parser = new PosixParser();\\r\\n-    CommandLine cmd = parser.parse(opts, args);\\r\\n+    final String[] args = new String[] { \\\"-e\\\" };\\r\\n+    final Parser parser = new PosixParser();\\r\\n+    final CommandLine cmd = parser.parse(opts, args);\\r\\n     assertTrue(cmd.hasOption(\\\"e\\\"));\\r\\n     assertNull(cmd.getOptionValue(\\\"e\\\"));\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"tn@apache.org","authorName":"Thomas Neidhart","commitYear":"2013","diff":"\"@@ -1,7 +1,8 @@\\n+@Test\\r\\n public void testShortOptionalArgNoValue() throws Exception {\\r\\n     String[] args = new String[] { \\\"-e\\\" };\\r\\n     Parser parser = new PosixParser();\\r\\n     CommandLine cmd = parser.parse(opts, args);\\r\\n     assertTrue(cmd.hasOption(\\\"e\\\"));\\r\\n     assertNull(cmd.getOptionValue(\\\"e\\\"));\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2008","diff":"\"@@ -1,11 +1,7 @@\\n-public void testShortOptionalArgNoValue() {\\r\\n+public void testShortOptionalArgNoValue() throws Exception {\\r\\n     String[] args = new String[] { \\\"-e\\\" };\\r\\n-    try {\\r\\n-        Parser parser = new PosixParser();\\r\\n-        CommandLine cmd = parser.parse(opts, args);\\r\\n-        assertTrue(cmd.hasOption(\\\"e\\\"));\\r\\n-        assertNull(cmd.getOptionValue(\\\"e\\\"));\\r\\n-    } catch (ParseException e) {\\r\\n-        fail(\\\"Cannot setUp() CommandLine: \\\" + e.toString());\\r\\n-    }\\r\\n+    Parser parser = new PosixParser();\\r\\n+    CommandLine cmd = parser.parse(opts, args);\\r\\n+    assertTrue(cmd.hasOption(\\\"e\\\"));\\r\\n+    assertNull(cmd.getOptionValue(\\\"e\\\"));\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"bayard@apache.org","authorName":"Henri Yandell","commitYear":"2007","diff":"\"@@ -1,11 +1,11 @@\\n public void testShortOptionalArgNoValue() {\\r\\n     String[] args = new String[] { \\\"-e\\\" };\\r\\n     try {\\r\\n-        CommandLineParser parser = new PosixParser();\\r\\n+        Parser parser = new PosixParser();\\r\\n         CommandLine cmd = parser.parse(opts, args);\\r\\n         assertTrue(cmd.hasOption(\\\"e\\\"));\\r\\n         assertNull(cmd.getOptionValue(\\\"e\\\"));\\r\\n     } catch (ParseException e) {\\r\\n         fail(\\\"Cannot setUp() CommandLine: \\\" + e.toString());\\r\\n     }\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -1,11 +1,11 @@\\n public void testShortOptionalArgNoValue() {\\r\\n     String[] args = new String[] { \\\"-e\\\" };\\r\\n     try {\\r\\n-        CommandLineParser parser = CommandLineParserFactory.newParser();\\r\\n+        CommandLineParser parser = new PosixParser();\\r\\n         CommandLine cmd = parser.parse(opts, args);\\r\\n         assertTrue(cmd.hasOption(\\\"e\\\"));\\r\\n         assertNull(cmd.getOptionValue(\\\"e\\\"));\\r\\n     } catch (ParseException e) {\\r\\n         fail(\\\"Cannot setUp() CommandLine: \\\" + e.toString());\\r\\n     }\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -0,0 +1,11 @@\\n+public void testShortOptionalArgNoValue() {\\r\\n+    String[] args = new String[] { \\\"-e\\\" };\\r\\n+    try {\\r\\n+        CommandLineParser parser = CommandLineParserFactory.newParser();\\r\\n+        CommandLine cmd = parser.parse(opts, args);\\r\\n+        assertTrue(cmd.hasOption(\\\"e\\\"));\\r\\n+        assertNull(cmd.getOptionValue(\\\"e\\\"));\\r\\n+    } catch (ParseException e) {\\r\\n+        fail(\\\"Cannot setUp() CommandLine: \\\" + e.toString());\\r\\n+    }\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\test\java\org\apache\commons\cli\ValueTest.java	testShortOptionalArgNoValueWithOption	org.apache.commons.cli.ValueTest.testShortOptionalArgNoValueWithOption()	198	205	1	[{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"@@ -1,8 +1,8 @@\\n @Test\\r\\n public void testShortOptionalArgNoValueWithOption() throws Exception {\\r\\n-    final String[] args = new String[] { \\\"-e\\\" };\\r\\n+    final String[] args = { \\\"-e\\\" };\\r\\n     final Parser parser = new PosixParser();\\r\\n     final CommandLine cmd = parser.parse(opts, args);\\r\\n     assertTrue(cmd.hasOption(opts.getOption(\\\"e\\\")));\\r\\n     assertNull(cmd.getOptionValue(opts.getOption(\\\"e\\\")));\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,8 +1,8 @@\\n @Test\\r\\n public void testShortOptionalArgNoValueWithOption() throws Exception {\\r\\n-    String[] args = new String[] { \\\"-e\\\" };\\r\\n-    Parser parser = new PosixParser();\\r\\n-    CommandLine cmd = parser.parse(opts, args);\\r\\n+    final String[] args = new String[] { \\\"-e\\\" };\\r\\n+    final Parser parser = new PosixParser();\\r\\n+    final CommandLine cmd = parser.parse(opts, args);\\r\\n     assertTrue(cmd.hasOption(opts.getOption(\\\"e\\\")));\\r\\n     assertNull(cmd.getOptionValue(opts.getOption(\\\"e\\\")));\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"britter@apache.org","authorName":"Benedikt Ritter","commitYear":"2017","diff":"\"@@ -0,0 +1,8 @@\\n+@Test\\r\\n+public void testShortOptionalArgNoValueWithOption() throws Exception {\\r\\n+    String[] args = new String[] { \\\"-e\\\" };\\r\\n+    Parser parser = new PosixParser();\\r\\n+    CommandLine cmd = parser.parse(opts, args);\\r\\n+    assertTrue(cmd.hasOption(opts.getOption(\\\"e\\\")));\\r\\n+    assertNull(cmd.getOptionValue(opts.getOption(\\\"e\\\")));\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\test\java\org\apache\commons\cli\ValueTest.java	testShortOptionalArgValue	org.apache.commons.cli.ValueTest.testShortOptionalArgValue()	208	215	1	[{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"@@ -1,8 +1,8 @@\\n @Test\\r\\n public void testShortOptionalArgValue() throws Exception {\\r\\n-    final String[] args = new String[] { \\\"-e\\\", \\\"everything\\\" };\\r\\n+    final String[] args = { \\\"-e\\\", \\\"everything\\\" };\\r\\n     final Parser parser = new PosixParser();\\r\\n     final CommandLine cmd = parser.parse(opts, args);\\r\\n     assertTrue(cmd.hasOption(\\\"e\\\"));\\r\\n     assertEquals(\\\"everything\\\", cmd.getOptionValue(\\\"e\\\"));\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,8 +1,8 @@\\n @Test\\r\\n public void testShortOptionalArgValue() throws Exception {\\r\\n-    String[] args = new String[] { \\\"-e\\\", \\\"everything\\\" };\\r\\n-    Parser parser = new PosixParser();\\r\\n-    CommandLine cmd = parser.parse(opts, args);\\r\\n+    final String[] args = new String[] { \\\"-e\\\", \\\"everything\\\" };\\r\\n+    final Parser parser = new PosixParser();\\r\\n+    final CommandLine cmd = parser.parse(opts, args);\\r\\n     assertTrue(cmd.hasOption(\\\"e\\\"));\\r\\n     assertEquals(\\\"everything\\\", cmd.getOptionValue(\\\"e\\\"));\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"tn@apache.org","authorName":"Thomas Neidhart","commitYear":"2013","diff":"\"@@ -1,7 +1,8 @@\\n+@Test\\r\\n public void testShortOptionalArgValue() throws Exception {\\r\\n     String[] args = new String[] { \\\"-e\\\", \\\"everything\\\" };\\r\\n     Parser parser = new PosixParser();\\r\\n     CommandLine cmd = parser.parse(opts, args);\\r\\n     assertTrue(cmd.hasOption(\\\"e\\\"));\\r\\n     assertEquals(\\\"everything\\\", cmd.getOptionValue(\\\"e\\\"));\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2008","diff":"\"@@ -1,11 +1,7 @@\\n-public void testShortOptionalArgValue() {\\r\\n+public void testShortOptionalArgValue() throws Exception {\\r\\n     String[] args = new String[] { \\\"-e\\\", \\\"everything\\\" };\\r\\n-    try {\\r\\n-        Parser parser = new PosixParser();\\r\\n-        CommandLine cmd = parser.parse(opts, args);\\r\\n-        assertTrue(cmd.hasOption(\\\"e\\\"));\\r\\n-        assertEquals(\\\"everything\\\", cmd.getOptionValue(\\\"e\\\"));\\r\\n-    } catch (ParseException e) {\\r\\n-        fail(\\\"Cannot setUp() CommandLine: \\\" + e.toString());\\r\\n-    }\\r\\n+    Parser parser = new PosixParser();\\r\\n+    CommandLine cmd = parser.parse(opts, args);\\r\\n+    assertTrue(cmd.hasOption(\\\"e\\\"));\\r\\n+    assertEquals(\\\"everything\\\", cmd.getOptionValue(\\\"e\\\"));\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"bayard@apache.org","authorName":"Henri Yandell","commitYear":"2007","diff":"\"@@ -1,11 +1,11 @@\\n public void testShortOptionalArgValue() {\\r\\n     String[] args = new String[] { \\\"-e\\\", \\\"everything\\\" };\\r\\n     try {\\r\\n-        CommandLineParser parser = new PosixParser();\\r\\n+        Parser parser = new PosixParser();\\r\\n         CommandLine cmd = parser.parse(opts, args);\\r\\n         assertTrue(cmd.hasOption(\\\"e\\\"));\\r\\n         assertEquals(\\\"everything\\\", cmd.getOptionValue(\\\"e\\\"));\\r\\n     } catch (ParseException e) {\\r\\n         fail(\\\"Cannot setUp() CommandLine: \\\" + e.toString());\\r\\n     }\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -1,11 +1,11 @@\\n public void testShortOptionalArgValue() {\\r\\n     String[] args = new String[] { \\\"-e\\\", \\\"everything\\\" };\\r\\n     try {\\r\\n-        CommandLineParser parser = CommandLineParserFactory.newParser();\\r\\n+        CommandLineParser parser = new PosixParser();\\r\\n         CommandLine cmd = parser.parse(opts, args);\\r\\n         assertTrue(cmd.hasOption(\\\"e\\\"));\\r\\n         assertEquals(\\\"everything\\\", cmd.getOptionValue(\\\"e\\\"));\\r\\n     } catch (ParseException e) {\\r\\n         fail(\\\"Cannot setUp() CommandLine: \\\" + e.toString());\\r\\n     }\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -0,0 +1,11 @@\\n+public void testShortOptionalArgValue() {\\r\\n+    String[] args = new String[] { \\\"-e\\\", \\\"everything\\\" };\\r\\n+    try {\\r\\n+        CommandLineParser parser = CommandLineParserFactory.newParser();\\r\\n+        CommandLine cmd = parser.parse(opts, args);\\r\\n+        assertTrue(cmd.hasOption(\\\"e\\\"));\\r\\n+        assertEquals(\\\"everything\\\", cmd.getOptionValue(\\\"e\\\"));\\r\\n+    } catch (ParseException e) {\\r\\n+        fail(\\\"Cannot setUp() CommandLine: \\\" + e.toString());\\r\\n+    }\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\test\java\org\apache\commons\cli\ValueTest.java	testShortOptionalArgValues	org.apache.commons.cli.ValueTest.testShortOptionalArgValues()	218	228	1	[{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"@@ -1,11 +1,11 @@\\n @Test\\r\\n public void testShortOptionalArgValues() throws Exception {\\r\\n-    final String[] args = new String[] { \\\"-j\\\", \\\"ink\\\", \\\"idea\\\" };\\r\\n+    final String[] args = { \\\"-j\\\", \\\"ink\\\", \\\"idea\\\" };\\r\\n     final Parser parser = new PosixParser();\\r\\n     final CommandLine cmd = parser.parse(opts, args);\\r\\n     assertTrue(cmd.hasOption(\\\"j\\\"));\\r\\n     assertEquals(\\\"ink\\\", cmd.getOptionValue(\\\"j\\\"));\\r\\n     assertEquals(\\\"ink\\\", cmd.getOptionValues(\\\"j\\\")[0]);\\r\\n     assertEquals(\\\"idea\\\", cmd.getOptionValues(\\\"j\\\")[1]);\\r\\n     assertEquals(cmd.getArgs().length, 0);\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,11 +1,11 @@\\n @Test\\r\\n public void testShortOptionalArgValues() throws Exception {\\r\\n-    String[] args = new String[] { \\\"-j\\\", \\\"ink\\\", \\\"idea\\\" };\\r\\n-    Parser parser = new PosixParser();\\r\\n-    CommandLine cmd = parser.parse(opts, args);\\r\\n+    final String[] args = new String[] { \\\"-j\\\", \\\"ink\\\", \\\"idea\\\" };\\r\\n+    final Parser parser = new PosixParser();\\r\\n+    final CommandLine cmd = parser.parse(opts, args);\\r\\n     assertTrue(cmd.hasOption(\\\"j\\\"));\\r\\n     assertEquals(\\\"ink\\\", cmd.getOptionValue(\\\"j\\\"));\\r\\n     assertEquals(\\\"ink\\\", cmd.getOptionValues(\\\"j\\\")[0]);\\r\\n     assertEquals(\\\"idea\\\", cmd.getOptionValues(\\\"j\\\")[1]);\\r\\n     assertEquals(cmd.getArgs().length, 0);\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"tn@apache.org","authorName":"Thomas Neidhart","commitYear":"2013","diff":"\"@@ -1,10 +1,11 @@\\n+@Test\\r\\n public void testShortOptionalArgValues() throws Exception {\\r\\n     String[] args = new String[] { \\\"-j\\\", \\\"ink\\\", \\\"idea\\\" };\\r\\n     Parser parser = new PosixParser();\\r\\n     CommandLine cmd = parser.parse(opts, args);\\r\\n     assertTrue(cmd.hasOption(\\\"j\\\"));\\r\\n     assertEquals(\\\"ink\\\", cmd.getOptionValue(\\\"j\\\"));\\r\\n     assertEquals(\\\"ink\\\", cmd.getOptionValues(\\\"j\\\")[0]);\\r\\n     assertEquals(\\\"idea\\\", cmd.getOptionValues(\\\"j\\\")[1]);\\r\\n     assertEquals(cmd.getArgs().length, 0);\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2008","diff":"\"@@ -1,14 +1,10 @@\\n-public void testShortOptionalArgValues() {\\r\\n+public void testShortOptionalArgValues() throws Exception {\\r\\n     String[] args = new String[] { \\\"-j\\\", \\\"ink\\\", \\\"idea\\\" };\\r\\n-    try {\\r\\n-        Parser parser = new PosixParser();\\r\\n-        CommandLine cmd = parser.parse(opts, args);\\r\\n-        assertTrue(cmd.hasOption(\\\"j\\\"));\\r\\n-        assertEquals(\\\"ink\\\", cmd.getOptionValue(\\\"j\\\"));\\r\\n-        assertEquals(\\\"ink\\\", cmd.getOptionValues(\\\"j\\\")[0]);\\r\\n-        assertEquals(\\\"idea\\\", cmd.getOptionValues(\\\"j\\\")[1]);\\r\\n-        assertEquals(cmd.getArgs().length, 0);\\r\\n-    } catch (ParseException e) {\\r\\n-        fail(\\\"Cannot setUp() CommandLine: \\\" + e.toString());\\r\\n-    }\\r\\n+    Parser parser = new PosixParser();\\r\\n+    CommandLine cmd = parser.parse(opts, args);\\r\\n+    assertTrue(cmd.hasOption(\\\"j\\\"));\\r\\n+    assertEquals(\\\"ink\\\", cmd.getOptionValue(\\\"j\\\"));\\r\\n+    assertEquals(\\\"ink\\\", cmd.getOptionValues(\\\"j\\\")[0]);\\r\\n+    assertEquals(\\\"idea\\\", cmd.getOptionValues(\\\"j\\\")[1]);\\r\\n+    assertEquals(cmd.getArgs().length, 0);\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"bayard@apache.org","authorName":"Henri Yandell","commitYear":"2007","diff":"\"@@ -1,14 +1,14 @@\\n public void testShortOptionalArgValues() {\\r\\n     String[] args = new String[] { \\\"-j\\\", \\\"ink\\\", \\\"idea\\\" };\\r\\n     try {\\r\\n-        CommandLineParser parser = new PosixParser();\\r\\n+        Parser parser = new PosixParser();\\r\\n         CommandLine cmd = parser.parse(opts, args);\\r\\n         assertTrue(cmd.hasOption(\\\"j\\\"));\\r\\n         assertEquals(\\\"ink\\\", cmd.getOptionValue(\\\"j\\\"));\\r\\n         assertEquals(\\\"ink\\\", cmd.getOptionValues(\\\"j\\\")[0]);\\r\\n         assertEquals(\\\"idea\\\", cmd.getOptionValues(\\\"j\\\")[1]);\\r\\n         assertEquals(cmd.getArgs().length, 0);\\r\\n     } catch (ParseException e) {\\r\\n         fail(\\\"Cannot setUp() CommandLine: \\\" + e.toString());\\r\\n     }\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -1,14 +1,14 @@\\n public void testShortOptionalArgValues() {\\r\\n     String[] args = new String[] { \\\"-j\\\", \\\"ink\\\", \\\"idea\\\" };\\r\\n     try {\\r\\n-        CommandLineParser parser = CommandLineParserFactory.newParser();\\r\\n+        CommandLineParser parser = new PosixParser();\\r\\n         CommandLine cmd = parser.parse(opts, args);\\r\\n         assertTrue(cmd.hasOption(\\\"j\\\"));\\r\\n         assertEquals(\\\"ink\\\", cmd.getOptionValue(\\\"j\\\"));\\r\\n         assertEquals(\\\"ink\\\", cmd.getOptionValues(\\\"j\\\")[0]);\\r\\n         assertEquals(\\\"idea\\\", cmd.getOptionValues(\\\"j\\\")[1]);\\r\\n         assertEquals(cmd.getArgs().length, 0);\\r\\n     } catch (ParseException e) {\\r\\n         fail(\\\"Cannot setUp() CommandLine: \\\" + e.toString());\\r\\n     }\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -0,0 +1,14 @@\\n+public void testShortOptionalArgValues() {\\r\\n+    String[] args = new String[] { \\\"-j\\\", \\\"ink\\\", \\\"idea\\\" };\\r\\n+    try {\\r\\n+        CommandLineParser parser = CommandLineParserFactory.newParser();\\r\\n+        CommandLine cmd = parser.parse(opts, args);\\r\\n+        assertTrue(cmd.hasOption(\\\"j\\\"));\\r\\n+        assertEquals(\\\"ink\\\", cmd.getOptionValue(\\\"j\\\"));\\r\\n+        assertEquals(\\\"ink\\\", cmd.getOptionValues(\\\"j\\\")[0]);\\r\\n+        assertEquals(\\\"idea\\\", cmd.getOptionValues(\\\"j\\\")[1]);\\r\\n+        assertEquals(cmd.getArgs().length, 0);\\r\\n+    } catch (ParseException e) {\\r\\n+        fail(\\\"Cannot setUp() CommandLine: \\\" + e.toString());\\r\\n+    }\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\test\java\org\apache\commons\cli\ValueTest.java	testShortOptionalArgValuesWithOption	org.apache.commons.cli.ValueTest.testShortOptionalArgValuesWithOption()	231	241	1	[{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"@@ -1,11 +1,11 @@\\n @Test\\r\\n public void testShortOptionalArgValuesWithOption() throws Exception {\\r\\n-    final String[] args = new String[] { \\\"-j\\\", \\\"ink\\\", \\\"idea\\\" };\\r\\n+    final String[] args = { \\\"-j\\\", \\\"ink\\\", \\\"idea\\\" };\\r\\n     final Parser parser = new PosixParser();\\r\\n     final CommandLine cmd = parser.parse(opts, args);\\r\\n     assertTrue(cmd.hasOption(opts.getOption(\\\"j\\\")));\\r\\n     assertEquals(\\\"ink\\\", cmd.getOptionValue(opts.getOption(\\\"j\\\")));\\r\\n     assertEquals(\\\"ink\\\", cmd.getOptionValues(opts.getOption(\\\"j\\\"))[0]);\\r\\n     assertEquals(\\\"idea\\\", cmd.getOptionValues(opts.getOption(\\\"j\\\"))[1]);\\r\\n     assertEquals(cmd.getArgs().length, 0);\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,11 +1,11 @@\\n @Test\\r\\n public void testShortOptionalArgValuesWithOption() throws Exception {\\r\\n-    String[] args = new String[] { \\\"-j\\\", \\\"ink\\\", \\\"idea\\\" };\\r\\n-    Parser parser = new PosixParser();\\r\\n-    CommandLine cmd = parser.parse(opts, args);\\r\\n+    final String[] args = new String[] { \\\"-j\\\", \\\"ink\\\", \\\"idea\\\" };\\r\\n+    final Parser parser = new PosixParser();\\r\\n+    final CommandLine cmd = parser.parse(opts, args);\\r\\n     assertTrue(cmd.hasOption(opts.getOption(\\\"j\\\")));\\r\\n     assertEquals(\\\"ink\\\", cmd.getOptionValue(opts.getOption(\\\"j\\\")));\\r\\n     assertEquals(\\\"ink\\\", cmd.getOptionValues(opts.getOption(\\\"j\\\"))[0]);\\r\\n     assertEquals(\\\"idea\\\", cmd.getOptionValues(opts.getOption(\\\"j\\\"))[1]);\\r\\n     assertEquals(cmd.getArgs().length, 0);\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"britter@apache.org","authorName":"Benedikt Ritter","commitYear":"2017","diff":"\"@@ -0,0 +1,11 @@\\n+@Test\\r\\n+public void testShortOptionalArgValuesWithOption() throws Exception {\\r\\n+    String[] args = new String[] { \\\"-j\\\", \\\"ink\\\", \\\"idea\\\" };\\r\\n+    Parser parser = new PosixParser();\\r\\n+    CommandLine cmd = parser.parse(opts, args);\\r\\n+    assertTrue(cmd.hasOption(opts.getOption(\\\"j\\\")));\\r\\n+    assertEquals(\\\"ink\\\", cmd.getOptionValue(opts.getOption(\\\"j\\\")));\\r\\n+    assertEquals(\\\"ink\\\", cmd.getOptionValues(opts.getOption(\\\"j\\\"))[0]);\\r\\n+    assertEquals(\\\"idea\\\", cmd.getOptionValues(opts.getOption(\\\"j\\\"))[1]);\\r\\n+    assertEquals(cmd.getArgs().length, 0);\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\test\java\org\apache\commons\cli\ValueTest.java	testShortOptionalArgValueWithOption	org.apache.commons.cli.ValueTest.testShortOptionalArgValueWithOption()	244	251	1	[{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"@@ -1,8 +1,8 @@\\n @Test\\r\\n public void testShortOptionalArgValueWithOption() throws Exception {\\r\\n-    final String[] args = new String[] { \\\"-e\\\", \\\"everything\\\" };\\r\\n+    final String[] args = { \\\"-e\\\", \\\"everything\\\" };\\r\\n     final Parser parser = new PosixParser();\\r\\n     final CommandLine cmd = parser.parse(opts, args);\\r\\n     assertTrue(cmd.hasOption(opts.getOption(\\\"e\\\")));\\r\\n     assertEquals(\\\"everything\\\", cmd.getOptionValue(opts.getOption(\\\"e\\\")));\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,8 +1,8 @@\\n @Test\\r\\n public void testShortOptionalArgValueWithOption() throws Exception {\\r\\n-    String[] args = new String[] { \\\"-e\\\", \\\"everything\\\" };\\r\\n-    Parser parser = new PosixParser();\\r\\n-    CommandLine cmd = parser.parse(opts, args);\\r\\n+    final String[] args = new String[] { \\\"-e\\\", \\\"everything\\\" };\\r\\n+    final Parser parser = new PosixParser();\\r\\n+    final CommandLine cmd = parser.parse(opts, args);\\r\\n     assertTrue(cmd.hasOption(opts.getOption(\\\"e\\\")));\\r\\n     assertEquals(\\\"everything\\\", cmd.getOptionValue(opts.getOption(\\\"e\\\")));\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"britter@apache.org","authorName":"Benedikt Ritter","commitYear":"2017","diff":"\"@@ -0,0 +1,8 @@\\n+@Test\\r\\n+public void testShortOptionalArgValueWithOption() throws Exception {\\r\\n+    String[] args = new String[] { \\\"-e\\\", \\\"everything\\\" };\\r\\n+    Parser parser = new PosixParser();\\r\\n+    CommandLine cmd = parser.parse(opts, args);\\r\\n+    assertTrue(cmd.hasOption(opts.getOption(\\\"e\\\")));\\r\\n+    assertEquals(\\\"everything\\\", cmd.getOptionValue(opts.getOption(\\\"e\\\")));\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\test\java\org\apache\commons\cli\ValueTest.java	testShortOptionalNArgValues	org.apache.commons.cli.ValueTest.testShortOptionalNArgValues()	254	266	1	[{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"@@ -1,13 +1,13 @@\\n @Test\\r\\n public void testShortOptionalNArgValues() throws Exception {\\r\\n-    final String[] args = new String[] { \\\"-i\\\", \\\"ink\\\", \\\"idea\\\", \\\"isotope\\\", \\\"ice\\\" };\\r\\n+    final String[] args = { \\\"-i\\\", \\\"ink\\\", \\\"idea\\\", \\\"isotope\\\", \\\"ice\\\" };\\r\\n     final Parser parser = new PosixParser();\\r\\n     final CommandLine cmd = parser.parse(opts, args);\\r\\n     assertTrue(cmd.hasOption(\\\"i\\\"));\\r\\n     assertEquals(\\\"ink\\\", cmd.getOptionValue(\\\"i\\\"));\\r\\n     assertEquals(\\\"ink\\\", cmd.getOptionValues(\\\"i\\\")[0]);\\r\\n     assertEquals(\\\"idea\\\", cmd.getOptionValues(\\\"i\\\")[1]);\\r\\n     assertEquals(cmd.getArgs().length, 2);\\r\\n     assertEquals(\\\"isotope\\\", cmd.getArgs()[0]);\\r\\n     assertEquals(\\\"ice\\\", cmd.getArgs()[1]);\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,13 +1,13 @@\\n @Test\\r\\n public void testShortOptionalNArgValues() throws Exception {\\r\\n-    String[] args = new String[] { \\\"-i\\\", \\\"ink\\\", \\\"idea\\\", \\\"isotope\\\", \\\"ice\\\" };\\r\\n-    Parser parser = new PosixParser();\\r\\n-    CommandLine cmd = parser.parse(opts, args);\\r\\n+    final String[] args = new String[] { \\\"-i\\\", \\\"ink\\\", \\\"idea\\\", \\\"isotope\\\", \\\"ice\\\" };\\r\\n+    final Parser parser = new PosixParser();\\r\\n+    final CommandLine cmd = parser.parse(opts, args);\\r\\n     assertTrue(cmd.hasOption(\\\"i\\\"));\\r\\n     assertEquals(\\\"ink\\\", cmd.getOptionValue(\\\"i\\\"));\\r\\n     assertEquals(\\\"ink\\\", cmd.getOptionValues(\\\"i\\\")[0]);\\r\\n     assertEquals(\\\"idea\\\", cmd.getOptionValues(\\\"i\\\")[1]);\\r\\n     assertEquals(cmd.getArgs().length, 2);\\r\\n     assertEquals(\\\"isotope\\\", cmd.getArgs()[0]);\\r\\n     assertEquals(\\\"ice\\\", cmd.getArgs()[1]);\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"tn@apache.org","authorName":"Thomas Neidhart","commitYear":"2013","diff":"\"@@ -1,12 +1,13 @@\\n+@Test\\r\\n public void testShortOptionalNArgValues() throws Exception {\\r\\n     String[] args = new String[] { \\\"-i\\\", \\\"ink\\\", \\\"idea\\\", \\\"isotope\\\", \\\"ice\\\" };\\r\\n     Parser parser = new PosixParser();\\r\\n     CommandLine cmd = parser.parse(opts, args);\\r\\n     assertTrue(cmd.hasOption(\\\"i\\\"));\\r\\n     assertEquals(\\\"ink\\\", cmd.getOptionValue(\\\"i\\\"));\\r\\n     assertEquals(\\\"ink\\\", cmd.getOptionValues(\\\"i\\\")[0]);\\r\\n     assertEquals(\\\"idea\\\", cmd.getOptionValues(\\\"i\\\")[1]);\\r\\n     assertEquals(cmd.getArgs().length, 2);\\r\\n     assertEquals(\\\"isotope\\\", cmd.getArgs()[0]);\\r\\n     assertEquals(\\\"ice\\\", cmd.getArgs()[1]);\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ebourg@apache.org","authorName":"Emmanuel Bourg","commitYear":"2008","diff":"\"@@ -1,16 +1,12 @@\\n-public void testShortOptionalNArgValues() {\\r\\n+public void testShortOptionalNArgValues() throws Exception {\\r\\n     String[] args = new String[] { \\\"-i\\\", \\\"ink\\\", \\\"idea\\\", \\\"isotope\\\", \\\"ice\\\" };\\r\\n-    try {\\r\\n-        Parser parser = new PosixParser();\\r\\n-        CommandLine cmd = parser.parse(opts, args);\\r\\n-        assertTrue(cmd.hasOption(\\\"i\\\"));\\r\\n-        assertEquals(\\\"ink\\\", cmd.getOptionValue(\\\"i\\\"));\\r\\n-        assertEquals(\\\"ink\\\", cmd.getOptionValues(\\\"i\\\")[0]);\\r\\n-        assertEquals(\\\"idea\\\", cmd.getOptionValues(\\\"i\\\")[1]);\\r\\n-        assertEquals(cmd.getArgs().length, 2);\\r\\n-        assertEquals(\\\"isotope\\\", cmd.getArgs()[0]);\\r\\n-        assertEquals(\\\"ice\\\", cmd.getArgs()[1]);\\r\\n-    } catch (ParseException e) {\\r\\n-        fail(\\\"Cannot setUp() CommandLine: \\\" + e.toString());\\r\\n-    }\\r\\n+    Parser parser = new PosixParser();\\r\\n+    CommandLine cmd = parser.parse(opts, args);\\r\\n+    assertTrue(cmd.hasOption(\\\"i\\\"));\\r\\n+    assertEquals(\\\"ink\\\", cmd.getOptionValue(\\\"i\\\"));\\r\\n+    assertEquals(\\\"ink\\\", cmd.getOptionValues(\\\"i\\\")[0]);\\r\\n+    assertEquals(\\\"idea\\\", cmd.getOptionValues(\\\"i\\\")[1]);\\r\\n+    assertEquals(cmd.getArgs().length, 2);\\r\\n+    assertEquals(\\\"isotope\\\", cmd.getArgs()[0]);\\r\\n+    assertEquals(\\\"ice\\\", cmd.getArgs()[1]);\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"bayard@apache.org","authorName":"Henri Yandell","commitYear":"2007","diff":"\"@@ -1,16 +1,16 @@\\n public void testShortOptionalNArgValues() {\\r\\n     String[] args = new String[] { \\\"-i\\\", \\\"ink\\\", \\\"idea\\\", \\\"isotope\\\", \\\"ice\\\" };\\r\\n     try {\\r\\n-        CommandLineParser parser = new PosixParser();\\r\\n+        Parser parser = new PosixParser();\\r\\n         CommandLine cmd = parser.parse(opts, args);\\r\\n         assertTrue(cmd.hasOption(\\\"i\\\"));\\r\\n         assertEquals(\\\"ink\\\", cmd.getOptionValue(\\\"i\\\"));\\r\\n         assertEquals(\\\"ink\\\", cmd.getOptionValues(\\\"i\\\")[0]);\\r\\n         assertEquals(\\\"idea\\\", cmd.getOptionValues(\\\"i\\\")[1]);\\r\\n         assertEquals(cmd.getArgs().length, 2);\\r\\n         assertEquals(\\\"isotope\\\", cmd.getArgs()[0]);\\r\\n         assertEquals(\\\"ice\\\", cmd.getArgs()[1]);\\r\\n     } catch (ParseException e) {\\r\\n         fail(\\\"Cannot setUp() CommandLine: \\\" + e.toString());\\r\\n     }\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -1,16 +1,16 @@\\n public void testShortOptionalNArgValues() {\\r\\n     String[] args = new String[] { \\\"-i\\\", \\\"ink\\\", \\\"idea\\\", \\\"isotope\\\", \\\"ice\\\" };\\r\\n     try {\\r\\n-        CommandLineParser parser = CommandLineParserFactory.newParser();\\r\\n+        CommandLineParser parser = new PosixParser();\\r\\n         CommandLine cmd = parser.parse(opts, args);\\r\\n         assertTrue(cmd.hasOption(\\\"i\\\"));\\r\\n         assertEquals(\\\"ink\\\", cmd.getOptionValue(\\\"i\\\"));\\r\\n         assertEquals(\\\"ink\\\", cmd.getOptionValues(\\\"i\\\")[0]);\\r\\n         assertEquals(\\\"idea\\\", cmd.getOptionValues(\\\"i\\\")[1]);\\r\\n         assertEquals(cmd.getArgs().length, 2);\\r\\n         assertEquals(\\\"isotope\\\", cmd.getArgs()[0]);\\r\\n         assertEquals(\\\"ice\\\", cmd.getArgs()[1]);\\r\\n     } catch (ParseException e) {\\r\\n         fail(\\\"Cannot setUp() CommandLine: \\\" + e.toString());\\r\\n     }\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -0,0 +1,16 @@\\n+public void testShortOptionalNArgValues() {\\r\\n+    String[] args = new String[] { \\\"-i\\\", \\\"ink\\\", \\\"idea\\\", \\\"isotope\\\", \\\"ice\\\" };\\r\\n+    try {\\r\\n+        CommandLineParser parser = CommandLineParserFactory.newParser();\\r\\n+        CommandLine cmd = parser.parse(opts, args);\\r\\n+        assertTrue(cmd.hasOption(\\\"i\\\"));\\r\\n+        assertEquals(\\\"ink\\\", cmd.getOptionValue(\\\"i\\\"));\\r\\n+        assertEquals(\\\"ink\\\", cmd.getOptionValues(\\\"i\\\")[0]);\\r\\n+        assertEquals(\\\"idea\\\", cmd.getOptionValues(\\\"i\\\")[1]);\\r\\n+        assertEquals(cmd.getArgs().length, 2);\\r\\n+        assertEquals(\\\"isotope\\\", cmd.getArgs()[0]);\\r\\n+        assertEquals(\\\"ice\\\", cmd.getArgs()[1]);\\r\\n+    } catch (ParseException e) {\\r\\n+        fail(\\\"Cannot setUp() CommandLine: \\\" + e.toString());\\r\\n+    }\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\test\java\org\apache\commons\cli\ValueTest.java	testShortOptionalNArgValuesWithOption	org.apache.commons.cli.ValueTest.testShortOptionalNArgValuesWithOption()	269	281	1	[{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"@@ -1,13 +1,13 @@\\n @Test\\r\\n public void testShortOptionalNArgValuesWithOption() throws Exception {\\r\\n-    final String[] args = new String[] { \\\"-i\\\", \\\"ink\\\", \\\"idea\\\", \\\"isotope\\\", \\\"ice\\\" };\\r\\n+    final String[] args = { \\\"-i\\\", \\\"ink\\\", \\\"idea\\\", \\\"isotope\\\", \\\"ice\\\" };\\r\\n     final Parser parser = new PosixParser();\\r\\n     final CommandLine cmd = parser.parse(opts, args);\\r\\n     assertTrue(cmd.hasOption(\\\"i\\\"));\\r\\n     assertEquals(\\\"ink\\\", cmd.getOptionValue(opts.getOption(\\\"i\\\")));\\r\\n     assertEquals(\\\"ink\\\", cmd.getOptionValues(opts.getOption(\\\"i\\\"))[0]);\\r\\n     assertEquals(\\\"idea\\\", cmd.getOptionValues(opts.getOption(\\\"i\\\"))[1]);\\r\\n     assertEquals(cmd.getArgs().length, 2);\\r\\n     assertEquals(\\\"isotope\\\", cmd.getArgs()[0]);\\r\\n     assertEquals(\\\"ice\\\", cmd.getArgs()[1]);\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"ggregory@apache.org","authorName":"Gary D. Gregory","commitYear":"2017","diff":"\"@@ -1,13 +1,13 @@\\n @Test\\r\\n public void testShortOptionalNArgValuesWithOption() throws Exception {\\r\\n-    String[] args = new String[] { \\\"-i\\\", \\\"ink\\\", \\\"idea\\\", \\\"isotope\\\", \\\"ice\\\" };\\r\\n-    Parser parser = new PosixParser();\\r\\n-    CommandLine cmd = parser.parse(opts, args);\\r\\n+    final String[] args = new String[] { \\\"-i\\\", \\\"ink\\\", \\\"idea\\\", \\\"isotope\\\", \\\"ice\\\" };\\r\\n+    final Parser parser = new PosixParser();\\r\\n+    final CommandLine cmd = parser.parse(opts, args);\\r\\n     assertTrue(cmd.hasOption(\\\"i\\\"));\\r\\n     assertEquals(\\\"ink\\\", cmd.getOptionValue(opts.getOption(\\\"i\\\")));\\r\\n     assertEquals(\\\"ink\\\", cmd.getOptionValues(opts.getOption(\\\"i\\\"))[0]);\\r\\n     assertEquals(\\\"idea\\\", cmd.getOptionValues(opts.getOption(\\\"i\\\"))[1]);\\r\\n     assertEquals(cmd.getArgs().length, 2);\\r\\n     assertEquals(\\\"isotope\\\", cmd.getArgs()[0]);\\r\\n     assertEquals(\\\"ice\\\", cmd.getArgs()[1]);\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"britter@apache.org","authorName":"Benedikt Ritter","commitYear":"2017","diff":"\"@@ -0,0 +1,13 @@\\n+@Test\\r\\n+public void testShortOptionalNArgValuesWithOption() throws Exception {\\r\\n+    String[] args = new String[] { \\\"-i\\\", \\\"ink\\\", \\\"idea\\\", \\\"isotope\\\", \\\"ice\\\" };\\r\\n+    Parser parser = new PosixParser();\\r\\n+    CommandLine cmd = parser.parse(opts, args);\\r\\n+    assertTrue(cmd.hasOption(\\\"i\\\"));\\r\\n+    assertEquals(\\\"ink\\\", cmd.getOptionValue(opts.getOption(\\\"i\\\")));\\r\\n+    assertEquals(\\\"ink\\\", cmd.getOptionValues(opts.getOption(\\\"i\\\"))[0]);\\r\\n+    assertEquals(\\\"idea\\\", cmd.getOptionValues(opts.getOption(\\\"i\\\"))[1]);\\r\\n+    assertEquals(cmd.getArgs().length, 2);\\r\\n+    assertEquals(\\\"isotope\\\", cmd.getArgs()[0]);\\r\\n+    assertEquals(\\\"ice\\\", cmd.getArgs()[1]);\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\test\java\org\apache\commons\cli\ValueTest.java	testShortWithArg	org.apache.commons.cli.ValueTest.testShortWithArg()	284	288	1	[{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"@@ -1,6 +1,6 @@\\n @Test\\r\\n public void testShortWithArg() {\\r\\n-    assertTrue(_cl.hasOption(\\\"b\\\"));\\r\\n-    assertNotNull(_cl.getOptionValue(\\\"b\\\"));\\r\\n-    assertEquals(_cl.getOptionValue(\\\"b\\\"), \\\"foo\\\");\\r\\n+    assertTrue(cl.hasOption(\\\"b\\\"));\\r\\n+    assertNotNull(cl.getOptionValue(\\\"b\\\"));\\r\\n+    assertEquals(cl.getOptionValue(\\\"b\\\"), \\\"foo\\\");\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"tn@apache.org","authorName":"Thomas Neidhart","commitYear":"2013","diff":"\"@@ -1,5 +1,6 @@\\n+@Test\\r\\n public void testShortWithArg() {\\r\\n     assertTrue(_cl.hasOption(\\\"b\\\"));\\r\\n     assertNotNull(_cl.getOptionValue(\\\"b\\\"));\\r\\n     assertEquals(_cl.getOptionValue(\\\"b\\\"), \\\"foo\\\");\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jkeyes@apache.org","authorName":"John Keyes","commitYear":"2002","diff":"\"@@ -1,5 +1,5 @@\\n public void testShortWithArg() {\\r\\n-    assertTrue(_cl.hasOption('b'));\\r\\n-    assertNotNull(_cl.getOptionValue('b'));\\r\\n-    assertEquals(_cl.getOptionValue('b'), \\\"foo\\\");\\r\\n+    assertTrue(_cl.hasOption(\\\"b\\\"));\\r\\n+    assertNotNull(_cl.getOptionValue(\\\"b\\\"));\\r\\n+    assertEquals(_cl.getOptionValue(\\\"b\\\"), \\\"foo\\\");\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"jstrachan@apache.org","authorName":"James Strachan","commitYear":"2002","diff":"\"@@ -0,0 +1,5 @@\\n+public void testShortWithArg() {\\r\\n+    assertTrue(_cl.hasOption('b'));\\r\\n+    assertNotNull(_cl.getOptionValue('b'));\\r\\n+    assertEquals(_cl.getOptionValue('b'), \\\"foo\\\");\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
D:\_SELEN\_2022-2023\CS588\GitHub_Dataset\commons-cli\commons-cli\src\test\java\org\apache\commons\cli\ValueTest.java	testShortWithArgWithOption	org.apache.commons.cli.ValueTest.testShortWithArgWithOption()	291	295	1	[{"authorEmail":"garydgregory@gmail.com","authorName":"Gary Gregory","commitYear":"2021","diff":"\"@@ -1,6 +1,6 @@\\n @Test\\r\\n public void testShortWithArgWithOption() {\\r\\n-    assertTrue(_cl.hasOption(opts.getOption(\\\"b\\\")));\\r\\n-    assertNotNull(_cl.getOptionValue(opts.getOption(\\\"b\\\")));\\r\\n-    assertEquals(_cl.getOptionValue(opts.getOption(\\\"b\\\")), \\\"foo\\\");\\r\\n+    assertTrue(cl.hasOption(opts.getOption(\\\"b\\\")));\\r\\n+    assertNotNull(cl.getOptionValue(opts.getOption(\\\"b\\\")));\\r\\n+    assertEquals(cl.getOptionValue(opts.getOption(\\\"b\\\")), \\\"foo\\\");\\r\\n }\\n\\\\ No newline at end of file\\n\""},{"authorEmail":"britter@apache.org","authorName":"Benedikt Ritter","commitYear":"2017","diff":"\"@@ -0,0 +1,6 @@\\n+@Test\\r\\n+public void testShortWithArgWithOption() {\\r\\n+    assertTrue(_cl.hasOption(opts.getOption(\\\"b\\\")));\\r\\n+    assertNotNull(_cl.getOptionValue(opts.getOption(\\\"b\\\")));\\r\\n+    assertEquals(_cl.getOptionValue(opts.getOption(\\\"b\\\")), \\\"foo\\\");\\r\\n+}\\n\\\\ No newline at end of file\\n\""}]
