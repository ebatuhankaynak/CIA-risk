{
  "origin": "codeshovel",
  "repositoryName": "commons-cli",
  "repositoryPath": "D:/_SELEN/_2022-2023/CS588/GitHub_Dataset/commons-cli/commons-cli/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "PosixParser.java",
  "functionName": "burstToken",
  "functionId": "burstToken___token-String(modifiers-final)__stopAtNonOption-boolean(modifiers-final)",
  "sourceFilePath": "src/main/java/org/apache/commons/cli/PosixParser.java",
  "functionAnnotation": "",
  "functionDoc": "Breaks {@code token} into its constituent parts using the following algorithm.\r\n\r\n\u003cul\u003e\r\n\u003cli\u003eignore the first character (\"\u003cb\u003e-\u003c/b\u003e\")\u003c/li\u003e\r\n\u003cli\u003efor each remaining character check if an {@link Option} exists with that id.\u003c/li\u003e\r\n\u003cli\u003eif an {@link Option} does exist then add that character prepended with \"\u003cb\u003e-\u003c/b\u003e\" to the list of processed\r\ntokens.\u003c/li\u003e\r\n\u003cli\u003eif the {@link Option} can have an argument value and there are remaining characters in the token then add the\r\nremaining characters as a token to the list of processed tokens.\u003c/li\u003e\r\n\u003cli\u003eif an {@link Option} does \u003cb\u003eNOT\u003c/b\u003e exist \u003cb\u003eAND\u003c/b\u003e {@code stopAtNonOption} \u003cb\u003eIS\u003c/b\u003e set then add the\r\nspecial token \"\u003cb\u003e--\u003c/b\u003e\" followed by the remaining characters and also the remaining tokens directly to the\r\nprocessed tokens list.\u003c/li\u003e\r\n\u003cli\u003eif an {@link Option} does \u003cb\u003eNOT\u003c/b\u003e exist \u003cb\u003eAND\u003c/b\u003e {@code stopAtNonOption} \u003cb\u003eIS NOT\u003c/b\u003e set then add\r\nthat character prepended with \"\u003cb\u003e-\u003c/b\u003e\".\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\r\n@param token The current token to be \u003cb\u003eburst\u003c/b\u003e\r\n@param stopAtNonOption Specifies whether to stop processing at the first non-Option encountered.\r\n",
  "functionStartLine": 65,
  "functionEndLine": 86,
  "numCommitsSeen": 60,
  "timeTaken": 668,
  "changeHistory": [
    "47231757c0e1c5b201889e8f3607470321b60e48",
    "9539506e87648d753c44b68b3dfbdd1938c09315",
    "bc0edc47dbf47cdaa3485cfb724982f377c900df",
    "5fb9e5009a8cdc7366b7a762f0e43dc47decf67c",
    "357a8b0b8f1090db29e0d541a9419f570a78457b",
    "0f56df924fabac851a111a04569f4a3d7331ef8e",
    "6b87d290954c4594fc69a3a0b85fff12490cfde5",
    "1596f3bbe57986361da4ac1a23634dd5b00d10df",
    "db4a638cf642fd7d031fcaebffa306b0a16ba771",
    "147df44faa4eb12ffd4a0063fc3284f784ea67c8",
    "0823e1100abd395aa022285dc97d2dc0dd9472ef",
    "9c5ce3501938cff01d78b7a1fff10a60abe9e0cf",
    "2ff9573ffb08dd52ec3a55a49f2d77a1e94efbdf",
    "9b2b8038b52be022e42c8c7fdf26e236888f94c5",
    "745d1a535c9cf45d24455afc150b808981c8e0df",
    "dde69934d7f0bee13e4cd1fc99a7d60ce95a0c78"
  ],
  "changeHistoryShort": {
    "47231757c0e1c5b201889e8f3607470321b60e48": "Ybodychange",
    "9539506e87648d753c44b68b3dfbdd1938c09315": "Ydocchange",
    "bc0edc47dbf47cdaa3485cfb724982f377c900df": "Ymultichange(Ydocchange,Yformatchange)",
    "5fb9e5009a8cdc7366b7a762f0e43dc47decf67c": "Yparametermetachange",
    "357a8b0b8f1090db29e0d541a9419f570a78457b": "Ybodychange",
    "0f56df924fabac851a111a04569f4a3d7331ef8e": "Ydocchange",
    "6b87d290954c4594fc69a3a0b85fff12490cfde5": "Ybodychange",
    "1596f3bbe57986361da4ac1a23634dd5b00d10df": "Yfilerename",
    "db4a638cf642fd7d031fcaebffa306b0a16ba771": "Ybodychange",
    "147df44faa4eb12ffd4a0063fc3284f784ea67c8": "Ymultichange(Ydocchange,Yformatchange)",
    "0823e1100abd395aa022285dc97d2dc0dd9472ef": "Ybodychange",
    "9c5ce3501938cff01d78b7a1fff10a60abe9e0cf": "Ybodychange",
    "2ff9573ffb08dd52ec3a55a49f2d77a1e94efbdf": "Ybodychange",
    "9b2b8038b52be022e42c8c7fdf26e236888f94c5": "Ymultichange(Ybodychange,Ydocchange)",
    "745d1a535c9cf45d24455afc150b808981c8e0df": "Ymultichange(Yparameterchange,Ymodifierchange,Ybodychange,Ydocchange)",
    "dde69934d7f0bee13e4cd1fc99a7d60ce95a0c78": "Yintroduced"
  },
  "changeHistoryDetails": {
    "47231757c0e1c5b201889e8f3607470321b60e48": {
      "type": "Ybodychange",
      "commitMessage": "Less branching.\n",
      "commitDate": "10/4/21 8:41 PM",
      "commitName": "47231757c0e1c5b201889e8f3607470321b60e48",
      "commitAuthor": "Gary Gregory",
      "commitDateOld": "10/4/21 12:32 AM",
      "commitNameOld": "9539506e87648d753c44b68b3dfbdd1938c09315",
      "commitAuthorOld": "Gary Gregory",
      "daysBetweenCommits": 0.84,
      "commitsBetweenForRepo": 21,
      "commitsBetweenForFile": 1,
      "actualSource": "protected void burstToken(final String token, final boolean stopAtNonOption) {\r\n    for (int i \u003d 1; i \u003c token.length(); i++) {\r\n        final String ch \u003d String.valueOf(token.charAt(i));\r\n        if (!options.hasOption(ch)) {\r\n            if (stopAtNonOption) {\r\n                processNonOptionToken(token.substring(i), true);\r\n            } else {\r\n                tokens.add(token);\r\n            }\r\n            break;\r\n        }\r\n        tokens.add(\"-\" + ch);\r\n        currentOption \u003d options.getOption(ch);\r\n        if (currentOption.hasArg() \u0026\u0026 token.length() !\u003d i + 1) {\r\n            tokens.add(token.substring(i + 1));\r\n            break;\r\n        }\r\n    }\r\n}",
      "path": "src/main/java/org/apache/commons/cli/PosixParser.java",
      "functionStartLine": 65,
      "functionName": "burstToken",
      "functionAnnotation": "",
      "functionDoc": "Breaks {@code token} into its constituent parts using the following algorithm.\r\n\r\n\u003cul\u003e\r\n\u003cli\u003eignore the first character (\"\u003cb\u003e-\u003c/b\u003e\")\u003c/li\u003e\r\n\u003cli\u003efor each remaining character check if an {@link Option} exists with that id.\u003c/li\u003e\r\n\u003cli\u003eif an {@link Option} does exist then add that character prepended with \"\u003cb\u003e-\u003c/b\u003e\" to the list of processed\r\ntokens.\u003c/li\u003e\r\n\u003cli\u003eif the {@link Option} can have an argument value and there are remaining characters in the token then add the\r\nremaining characters as a token to the list of processed tokens.\u003c/li\u003e\r\n\u003cli\u003eif an {@link Option} does \u003cb\u003eNOT\u003c/b\u003e exist \u003cb\u003eAND\u003c/b\u003e {@code stopAtNonOption} \u003cb\u003eIS\u003c/b\u003e set then add the\r\nspecial token \"\u003cb\u003e--\u003c/b\u003e\" followed by the remaining characters and also the remaining tokens directly to the\r\nprocessed tokens list.\u003c/li\u003e\r\n\u003cli\u003eif an {@link Option} does \u003cb\u003eNOT\u003c/b\u003e exist \u003cb\u003eAND\u003c/b\u003e {@code stopAtNonOption} \u003cb\u003eIS NOT\u003c/b\u003e set then add\r\nthat character prepended with \"\u003cb\u003e-\u003c/b\u003e\".\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\r\n@param token The current token to be \u003cb\u003eburst\u003c/b\u003e\r\n@param stopAtNonOption Specifies whether to stop processing at the first non-Option encountered.\r\n",
      "diff": "@@ -1,19 +1,19 @@\n protected void burstToken(final String token, final boolean stopAtNonOption) {\r\n     for (int i \u003d 1; i \u003c token.length(); i++) {\r\n         final String ch \u003d String.valueOf(token.charAt(i));\r\n-        if (options.hasOption(ch)) {\r\n-            tokens.add(\"-\" + ch);\r\n-            currentOption \u003d options.getOption(ch);\r\n-            if (currentOption.hasArg() \u0026\u0026 token.length() !\u003d i + 1) {\r\n-                tokens.add(token.substring(i + 1));\r\n-                break;\r\n+        if (!options.hasOption(ch)) {\r\n+            if (stopAtNonOption) {\r\n+                processNonOptionToken(token.substring(i), true);\r\n+            } else {\r\n+                tokens.add(token);\r\n             }\r\n-        } else if (stopAtNonOption) {\r\n-            processNonOptionToken(token.substring(i), true);\r\n             break;\r\n-        } else {\r\n-            tokens.add(token);\r\n+        }\r\n+        tokens.add(\"-\" + ch);\r\n+        currentOption \u003d options.getOption(ch);\r\n+        if (currentOption.hasArg() \u0026\u0026 token.length() !\u003d i + 1) {\r\n+            tokens.add(token.substring(i + 1));\r\n             break;\r\n         }\r\n     }\r\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "9539506e87648d753c44b68b3dfbdd1938c09315": {
      "type": "Ydocchange",
      "commitMessage": "Javadoc: Use @code instead of HTML tags.\n",
      "commitDate": "10/4/21 12:32 AM",
      "commitName": "9539506e87648d753c44b68b3dfbdd1938c09315",
      "commitAuthor": "Gary Gregory",
      "commitDateOld": "10/2/21 11:07 PM",
      "commitNameOld": "4e8b3a2584ddac7411e20cdaca75b160787d7fa9",
      "commitAuthorOld": "Gary Gregory",
      "daysBetweenCommits": 1.06,
      "commitsBetweenForRepo": 9,
      "commitsBetweenForFile": 1,
      "actualSource": "protected void burstToken(final String token, final boolean stopAtNonOption) {\r\n    for (int i \u003d 1; i \u003c token.length(); i++) {\r\n        final String ch \u003d String.valueOf(token.charAt(i));\r\n        if (options.hasOption(ch)) {\r\n            tokens.add(\"-\" + ch);\r\n            currentOption \u003d options.getOption(ch);\r\n            if (currentOption.hasArg() \u0026\u0026 token.length() !\u003d i + 1) {\r\n                tokens.add(token.substring(i + 1));\r\n                break;\r\n            }\r\n        } else if (stopAtNonOption) {\r\n            processNonOptionToken(token.substring(i), true);\r\n            break;\r\n        } else {\r\n            tokens.add(token);\r\n            break;\r\n        }\r\n    }\r\n}",
      "path": "src/main/java/org/apache/commons/cli/PosixParser.java",
      "functionStartLine": 65,
      "functionName": "burstToken",
      "functionAnnotation": "",
      "functionDoc": "Breaks {@code token} into its constituent parts using the following algorithm.\r\n\r\n\u003cul\u003e\r\n\u003cli\u003eignore the first character (\"\u003cb\u003e-\u003c/b\u003e\")\u003c/li\u003e\r\n\u003cli\u003efor each remaining character check if an {@link Option} exists with that id.\u003c/li\u003e\r\n\u003cli\u003eif an {@link Option} does exist then add that character prepended with \"\u003cb\u003e-\u003c/b\u003e\" to the list of processed\r\ntokens.\u003c/li\u003e\r\n\u003cli\u003eif the {@link Option} can have an argument value and there are remaining characters in the token then add the\r\nremaining characters as a token to the list of processed tokens.\u003c/li\u003e\r\n\u003cli\u003eif an {@link Option} does \u003cb\u003eNOT\u003c/b\u003e exist \u003cb\u003eAND\u003c/b\u003e {@code stopAtNonOption} \u003cb\u003eIS\u003c/b\u003e set then add the\r\nspecial token \"\u003cb\u003e--\u003c/b\u003e\" followed by the remaining characters and also the remaining tokens directly to the\r\nprocessed tokens list.\u003c/li\u003e\r\n\u003cli\u003eif an {@link Option} does \u003cb\u003eNOT\u003c/b\u003e exist \u003cb\u003eAND\u003c/b\u003e {@code stopAtNonOption} \u003cb\u003eIS NOT\u003c/b\u003e set then add\r\nthat character prepended with \"\u003cb\u003e-\u003c/b\u003e\".\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\r\n@param token The current token to be \u003cb\u003eburst\u003c/b\u003e\r\n@param stopAtNonOption Specifies whether to stop processing at the first non-Option encountered.\r\n",
      "diff": "",
      "extendedDetails": {
        "oldValue": "Breaks \u003ccode\u003etoken\u003c/code\u003e into its constituent parts using the following algorithm.\r\n\r\n\u003cul\u003e\r\n\u003cli\u003eignore the first character (\"\u003cb\u003e-\u003c/b\u003e\")\u003c/li\u003e\r\n\u003cli\u003efor each remaining character check if an {@link Option} exists with that id.\u003c/li\u003e\r\n\u003cli\u003eif an {@link Option} does exist then add that character prepended with \"\u003cb\u003e-\u003c/b\u003e\" to the list of processed\r\ntokens.\u003c/li\u003e\r\n\u003cli\u003eif the {@link Option} can have an argument value and there are remaining characters in the token then add the\r\nremaining characters as a token to the list of processed tokens.\u003c/li\u003e\r\n\u003cli\u003eif an {@link Option} does \u003cb\u003eNOT\u003c/b\u003e exist \u003cb\u003eAND\u003c/b\u003e \u003ccode\u003estopAtNonOption\u003c/code\u003e \u003cb\u003eIS\u003c/b\u003e set then add the\r\nspecial token \"\u003cb\u003e--\u003c/b\u003e\" followed by the remaining characters and also the remaining tokens directly to the\r\nprocessed tokens list.\u003c/li\u003e\r\n\u003cli\u003eif an {@link Option} does \u003cb\u003eNOT\u003c/b\u003e exist \u003cb\u003eAND\u003c/b\u003e \u003ccode\u003estopAtNonOption\u003c/code\u003e \u003cb\u003eIS NOT\u003c/b\u003e set then add\r\nthat character prepended with \"\u003cb\u003e-\u003c/b\u003e\".\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\r\n@param token The current token to be \u003cb\u003eburst\u003c/b\u003e\r\n@param stopAtNonOption Specifies whether to stop processing at the first non-Option encountered.\r\n",
        "newValue": "Breaks {@code token} into its constituent parts using the following algorithm.\r\n\r\n\u003cul\u003e\r\n\u003cli\u003eignore the first character (\"\u003cb\u003e-\u003c/b\u003e\")\u003c/li\u003e\r\n\u003cli\u003efor each remaining character check if an {@link Option} exists with that id.\u003c/li\u003e\r\n\u003cli\u003eif an {@link Option} does exist then add that character prepended with \"\u003cb\u003e-\u003c/b\u003e\" to the list of processed\r\ntokens.\u003c/li\u003e\r\n\u003cli\u003eif the {@link Option} can have an argument value and there are remaining characters in the token then add the\r\nremaining characters as a token to the list of processed tokens.\u003c/li\u003e\r\n\u003cli\u003eif an {@link Option} does \u003cb\u003eNOT\u003c/b\u003e exist \u003cb\u003eAND\u003c/b\u003e {@code stopAtNonOption} \u003cb\u003eIS\u003c/b\u003e set then add the\r\nspecial token \"\u003cb\u003e--\u003c/b\u003e\" followed by the remaining characters and also the remaining tokens directly to the\r\nprocessed tokens list.\u003c/li\u003e\r\n\u003cli\u003eif an {@link Option} does \u003cb\u003eNOT\u003c/b\u003e exist \u003cb\u003eAND\u003c/b\u003e {@code stopAtNonOption} \u003cb\u003eIS NOT\u003c/b\u003e set then add\r\nthat character prepended with \"\u003cb\u003e-\u003c/b\u003e\".\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\r\n@param token The current token to be \u003cb\u003eburst\u003c/b\u003e\r\n@param stopAtNonOption Specifies whether to stop processing at the first non-Option encountered.\r\n"
      }
    },
    "bc0edc47dbf47cdaa3485cfb724982f377c900df": {
      "type": "Ymultichange(Ydocchange,Yformatchange)",
      "commitMessage": "Clean ups.\n\n- maven-checkstyle-plugin 3.1.1 -\u003e 3.1.2.\n- checkstyle -\u003e 9.0\n- Updates for 21st century.\n- No need to nest else clause.\n- Use simple array declarations.\n- Use valueOf instead of new for Numbers.\n- Consistent formatting.\n- Remove some inline comments //-----...\n",
      "commitDate": "10/2/21 11:04 PM",
      "commitName": "bc0edc47dbf47cdaa3485cfb724982f377c900df",
      "commitAuthor": "Gary Gregory",
      "subchanges": [
        {
          "type": "Ydocchange",
          "commitMessage": "Clean ups.\n\n- maven-checkstyle-plugin 3.1.1 -\u003e 3.1.2.\n- checkstyle -\u003e 9.0\n- Updates for 21st century.\n- No need to nest else clause.\n- Use simple array declarations.\n- Use valueOf instead of new for Numbers.\n- Consistent formatting.\n- Remove some inline comments //-----...\n",
          "commitDate": "10/2/21 11:04 PM",
          "commitName": "bc0edc47dbf47cdaa3485cfb724982f377c900df",
          "commitAuthor": "Gary Gregory",
          "commitDateOld": "12/28/20 6:44 PM",
          "commitNameOld": "c67275279176504a6f5fc556cfa247e1df02a580",
          "commitAuthorOld": "Arturo Bernal",
          "daysBetweenCommits": 278.18,
          "commitsBetweenForRepo": 38,
          "commitsBetweenForFile": 1,
          "actualSource": "protected void burstToken(final String token, final boolean stopAtNonOption) {\r\n    for (int i \u003d 1; i \u003c token.length(); i++) {\r\n        final String ch \u003d String.valueOf(token.charAt(i));\r\n        if (options.hasOption(ch)) {\r\n            tokens.add(\"-\" + ch);\r\n            currentOption \u003d options.getOption(ch);\r\n            if (currentOption.hasArg() \u0026\u0026 token.length() !\u003d i + 1) {\r\n                tokens.add(token.substring(i + 1));\r\n                break;\r\n            }\r\n        } else if (stopAtNonOption) {\r\n            processNonOptionToken(token.substring(i), true);\r\n            break;\r\n        } else {\r\n            tokens.add(token);\r\n            break;\r\n        }\r\n    }\r\n}",
          "path": "src/main/java/org/apache/commons/cli/PosixParser.java",
          "functionStartLine": 221,
          "functionName": "burstToken",
          "functionAnnotation": "",
          "functionDoc": "Breaks \u003ccode\u003etoken\u003c/code\u003e into its constituent parts using the following algorithm.\r\n\r\n\u003cul\u003e\r\n\u003cli\u003eignore the first character (\"\u003cb\u003e-\u003c/b\u003e\")\u003c/li\u003e\r\n\u003cli\u003efor each remaining character check if an {@link Option} exists with that id.\u003c/li\u003e\r\n\u003cli\u003eif an {@link Option} does exist then add that character prepended with \"\u003cb\u003e-\u003c/b\u003e\" to the list of processed\r\ntokens.\u003c/li\u003e\r\n\u003cli\u003eif the {@link Option} can have an argument value and there are remaining characters in the token then add the\r\nremaining characters as a token to the list of processed tokens.\u003c/li\u003e\r\n\u003cli\u003eif an {@link Option} does \u003cb\u003eNOT\u003c/b\u003e exist \u003cb\u003eAND\u003c/b\u003e \u003ccode\u003estopAtNonOption\u003c/code\u003e \u003cb\u003eIS\u003c/b\u003e set then add the\r\nspecial token \"\u003cb\u003e--\u003c/b\u003e\" followed by the remaining characters and also the remaining tokens directly to the\r\nprocessed tokens list.\u003c/li\u003e\r\n\u003cli\u003eif an {@link Option} does \u003cb\u003eNOT\u003c/b\u003e exist \u003cb\u003eAND\u003c/b\u003e \u003ccode\u003estopAtNonOption\u003c/code\u003e \u003cb\u003eIS NOT\u003c/b\u003e set then add\r\nthat character prepended with \"\u003cb\u003e-\u003c/b\u003e\".\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\r\n@param token The current token to be \u003cb\u003eburst\u003c/b\u003e\r\n@param stopAtNonOption Specifies whether to stop processing at the first non-Option encountered.\r\n",
          "diff": "",
          "extendedDetails": {
            "oldValue": "Breaks \u003ccode\u003etoken\u003c/code\u003e into its constituent parts\r\nusing the following algorithm.\r\n\r\n\u003cul\u003e\r\n \u003cli\u003eignore the first character (\"\u003cb\u003e-\u003c/b\u003e\")\u003c/li\u003e\r\n \u003cli\u003efor each remaining character check if an {@link Option}\r\n exists with that id.\u003c/li\u003e\r\n \u003cli\u003eif an {@link Option} does exist then add that character\r\n prepended with \"\u003cb\u003e-\u003c/b\u003e\" to the list of processed tokens.\u003c/li\u003e\r\n \u003cli\u003eif the {@link Option} can have an argument value and there\r\n are remaining characters in the token then add the remaining\r\n characters as a token to the list of processed tokens.\u003c/li\u003e\r\n \u003cli\u003eif an {@link Option} does \u003cb\u003eNOT\u003c/b\u003e exist \u003cb\u003eAND\u003c/b\u003e\r\n \u003ccode\u003estopAtNonOption\u003c/code\u003e \u003cb\u003eIS\u003c/b\u003e set then add the special token\r\n \"\u003cb\u003e--\u003c/b\u003e\" followed by the remaining characters and also\r\n the remaining tokens directly to the processed tokens list.\u003c/li\u003e\r\n \u003cli\u003eif an {@link Option} does \u003cb\u003eNOT\u003c/b\u003e exist \u003cb\u003eAND\u003c/b\u003e\r\n \u003ccode\u003estopAtNonOption\u003c/code\u003e \u003cb\u003eIS NOT\u003c/b\u003e set then add that\r\n character prepended with \"\u003cb\u003e-\u003c/b\u003e\".\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\r\n@param token The current token to be \u003cb\u003eburst\u003c/b\u003e\r\n@param stopAtNonOption Specifies whether to stop processing\r\nat the first non-Option encountered.\r\n",
            "newValue": "Breaks \u003ccode\u003etoken\u003c/code\u003e into its constituent parts using the following algorithm.\r\n\r\n\u003cul\u003e\r\n\u003cli\u003eignore the first character (\"\u003cb\u003e-\u003c/b\u003e\")\u003c/li\u003e\r\n\u003cli\u003efor each remaining character check if an {@link Option} exists with that id.\u003c/li\u003e\r\n\u003cli\u003eif an {@link Option} does exist then add that character prepended with \"\u003cb\u003e-\u003c/b\u003e\" to the list of processed\r\ntokens.\u003c/li\u003e\r\n\u003cli\u003eif the {@link Option} can have an argument value and there are remaining characters in the token then add the\r\nremaining characters as a token to the list of processed tokens.\u003c/li\u003e\r\n\u003cli\u003eif an {@link Option} does \u003cb\u003eNOT\u003c/b\u003e exist \u003cb\u003eAND\u003c/b\u003e \u003ccode\u003estopAtNonOption\u003c/code\u003e \u003cb\u003eIS\u003c/b\u003e set then add the\r\nspecial token \"\u003cb\u003e--\u003c/b\u003e\" followed by the remaining characters and also the remaining tokens directly to the\r\nprocessed tokens list.\u003c/li\u003e\r\n\u003cli\u003eif an {@link Option} does \u003cb\u003eNOT\u003c/b\u003e exist \u003cb\u003eAND\u003c/b\u003e \u003ccode\u003estopAtNonOption\u003c/code\u003e \u003cb\u003eIS NOT\u003c/b\u003e set then add\r\nthat character prepended with \"\u003cb\u003e-\u003c/b\u003e\".\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\r\n@param token The current token to be \u003cb\u003eburst\u003c/b\u003e\r\n@param stopAtNonOption Specifies whether to stop processing at the first non-Option encountered.\r\n"
          }
        },
        {
          "type": "Yformatchange",
          "commitMessage": "Clean ups.\n\n- maven-checkstyle-plugin 3.1.1 -\u003e 3.1.2.\n- checkstyle -\u003e 9.0\n- Updates for 21st century.\n- No need to nest else clause.\n- Use simple array declarations.\n- Use valueOf instead of new for Numbers.\n- Consistent formatting.\n- Remove some inline comments //-----...\n",
          "commitDate": "10/2/21 11:04 PM",
          "commitName": "bc0edc47dbf47cdaa3485cfb724982f377c900df",
          "commitAuthor": "Gary Gregory",
          "commitDateOld": "12/28/20 6:44 PM",
          "commitNameOld": "c67275279176504a6f5fc556cfa247e1df02a580",
          "commitAuthorOld": "Arturo Bernal",
          "daysBetweenCommits": 278.18,
          "commitsBetweenForRepo": 38,
          "commitsBetweenForFile": 1,
          "actualSource": "protected void burstToken(final String token, final boolean stopAtNonOption) {\r\n    for (int i \u003d 1; i \u003c token.length(); i++) {\r\n        final String ch \u003d String.valueOf(token.charAt(i));\r\n        if (options.hasOption(ch)) {\r\n            tokens.add(\"-\" + ch);\r\n            currentOption \u003d options.getOption(ch);\r\n            if (currentOption.hasArg() \u0026\u0026 token.length() !\u003d i + 1) {\r\n                tokens.add(token.substring(i + 1));\r\n                break;\r\n            }\r\n        } else if (stopAtNonOption) {\r\n            processNonOptionToken(token.substring(i), true);\r\n            break;\r\n        } else {\r\n            tokens.add(token);\r\n            break;\r\n        }\r\n    }\r\n}",
          "path": "src/main/java/org/apache/commons/cli/PosixParser.java",
          "functionStartLine": 221,
          "functionName": "burstToken",
          "functionAnnotation": "",
          "functionDoc": "Breaks \u003ccode\u003etoken\u003c/code\u003e into its constituent parts using the following algorithm.\r\n\r\n\u003cul\u003e\r\n\u003cli\u003eignore the first character (\"\u003cb\u003e-\u003c/b\u003e\")\u003c/li\u003e\r\n\u003cli\u003efor each remaining character check if an {@link Option} exists with that id.\u003c/li\u003e\r\n\u003cli\u003eif an {@link Option} does exist then add that character prepended with \"\u003cb\u003e-\u003c/b\u003e\" to the list of processed\r\ntokens.\u003c/li\u003e\r\n\u003cli\u003eif the {@link Option} can have an argument value and there are remaining characters in the token then add the\r\nremaining characters as a token to the list of processed tokens.\u003c/li\u003e\r\n\u003cli\u003eif an {@link Option} does \u003cb\u003eNOT\u003c/b\u003e exist \u003cb\u003eAND\u003c/b\u003e \u003ccode\u003estopAtNonOption\u003c/code\u003e \u003cb\u003eIS\u003c/b\u003e set then add the\r\nspecial token \"\u003cb\u003e--\u003c/b\u003e\" followed by the remaining characters and also the remaining tokens directly to the\r\nprocessed tokens list.\u003c/li\u003e\r\n\u003cli\u003eif an {@link Option} does \u003cb\u003eNOT\u003c/b\u003e exist \u003cb\u003eAND\u003c/b\u003e \u003ccode\u003estopAtNonOption\u003c/code\u003e \u003cb\u003eIS NOT\u003c/b\u003e set then add\r\nthat character prepended with \"\u003cb\u003e-\u003c/b\u003e\".\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\r\n@param token The current token to be \u003cb\u003eburst\u003c/b\u003e\r\n@param stopAtNonOption Specifies whether to stop processing at the first non-Option encountered.\r\n",
          "diff": "",
          "extendedDetails": {}
        }
      ]
    },
    "5fb9e5009a8cdc7366b7a762f0e43dc47decf67c": {
      "type": "Yparametermetachange",
      "commitMessage": "Add final modifier to method parameters.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/cli/trunk@1797674 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "6/5/17 7:38 PM",
      "commitName": "5fb9e5009a8cdc7366b7a762f0e43dc47decf67c",
      "commitAuthor": "Gary D. Gregory",
      "commitDateOld": "6/5/17 7:37 PM",
      "commitNameOld": "357a8b0b8f1090db29e0d541a9419f570a78457b",
      "commitAuthorOld": "Gary D. Gregory",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "protected void burstToken(final String token, final boolean stopAtNonOption) {\r\n    for (int i \u003d 1; i \u003c token.length(); i++) {\r\n        final String ch \u003d String.valueOf(token.charAt(i));\r\n        if (options.hasOption(ch)) {\r\n            tokens.add(\"-\" + ch);\r\n            currentOption \u003d options.getOption(ch);\r\n            if (currentOption.hasArg() \u0026\u0026 token.length() !\u003d i + 1) {\r\n                tokens.add(token.substring(i + 1));\r\n                break;\r\n            }\r\n        } else if (stopAtNonOption) {\r\n            processNonOptionToken(token.substring(i), true);\r\n            break;\r\n        } else {\r\n            tokens.add(token);\r\n            break;\r\n        }\r\n    }\r\n}",
      "path": "src/main/java/org/apache/commons/cli/PosixParser.java",
      "functionStartLine": 264,
      "functionName": "burstToken",
      "functionAnnotation": "",
      "functionDoc": "Breaks \u003ccode\u003etoken\u003c/code\u003e into its constituent parts\r\nusing the following algorithm.\r\n\r\n\u003cul\u003e\r\n \u003cli\u003eignore the first character (\"\u003cb\u003e-\u003c/b\u003e\")\u003c/li\u003e\r\n \u003cli\u003efor each remaining character check if an {@link Option}\r\n exists with that id.\u003c/li\u003e\r\n \u003cli\u003eif an {@link Option} does exist then add that character\r\n prepended with \"\u003cb\u003e-\u003c/b\u003e\" to the list of processed tokens.\u003c/li\u003e\r\n \u003cli\u003eif the {@link Option} can have an argument value and there\r\n are remaining characters in the token then add the remaining\r\n characters as a token to the list of processed tokens.\u003c/li\u003e\r\n \u003cli\u003eif an {@link Option} does \u003cb\u003eNOT\u003c/b\u003e exist \u003cb\u003eAND\u003c/b\u003e\r\n \u003ccode\u003estopAtNonOption\u003c/code\u003e \u003cb\u003eIS\u003c/b\u003e set then add the special token\r\n \"\u003cb\u003e--\u003c/b\u003e\" followed by the remaining characters and also\r\n the remaining tokens directly to the processed tokens list.\u003c/li\u003e\r\n \u003cli\u003eif an {@link Option} does \u003cb\u003eNOT\u003c/b\u003e exist \u003cb\u003eAND\u003c/b\u003e\r\n \u003ccode\u003estopAtNonOption\u003c/code\u003e \u003cb\u003eIS NOT\u003c/b\u003e set then add that\r\n character prepended with \"\u003cb\u003e-\u003c/b\u003e\".\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\r\n@param token The current token to be \u003cb\u003eburst\u003c/b\u003e\r\n@param stopAtNonOption Specifies whether to stop processing\r\nat the first non-Option encountered.\r\n",
      "diff": "@@ -1,19 +1,19 @@\n-protected void burstToken(String token, boolean stopAtNonOption) {\r\n+protected void burstToken(final String token, final boolean stopAtNonOption) {\r\n     for (int i \u003d 1; i \u003c token.length(); i++) {\r\n         final String ch \u003d String.valueOf(token.charAt(i));\r\n         if (options.hasOption(ch)) {\r\n             tokens.add(\"-\" + ch);\r\n             currentOption \u003d options.getOption(ch);\r\n             if (currentOption.hasArg() \u0026\u0026 token.length() !\u003d i + 1) {\r\n                 tokens.add(token.substring(i + 1));\r\n                 break;\r\n             }\r\n         } else if (stopAtNonOption) {\r\n             processNonOptionToken(token.substring(i), true);\r\n             break;\r\n         } else {\r\n             tokens.add(token);\r\n             break;\r\n         }\r\n     }\r\n }\n\\ No newline at end of file\n",
      "extendedDetails": {
        "oldValue": "[token-String, stopAtNonOption-boolean]",
        "newValue": "[token-String(modifiers-final), stopAtNonOption-boolean(modifiers-final)]"
      }
    },
    "357a8b0b8f1090db29e0d541a9419f570a78457b": {
      "type": "Ybodychange",
      "commitMessage": "Add final modifier to local variables.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/cli/trunk@1797673 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "6/5/17 7:37 PM",
      "commitName": "357a8b0b8f1090db29e0d541a9419f570a78457b",
      "commitAuthor": "Gary D. Gregory",
      "commitDateOld": "2/16/17 10:52 AM",
      "commitNameOld": "0f56df924fabac851a111a04569f4a3d7331ef8e",
      "commitAuthorOld": "Benedikt Ritter",
      "daysBetweenCommits": 109.36,
      "commitsBetweenForRepo": 18,
      "commitsBetweenForFile": 1,
      "actualSource": "protected void burstToken(String token, boolean stopAtNonOption) {\r\n    for (int i \u003d 1; i \u003c token.length(); i++) {\r\n        final String ch \u003d String.valueOf(token.charAt(i));\r\n        if (options.hasOption(ch)) {\r\n            tokens.add(\"-\" + ch);\r\n            currentOption \u003d options.getOption(ch);\r\n            if (currentOption.hasArg() \u0026\u0026 token.length() !\u003d i + 1) {\r\n                tokens.add(token.substring(i + 1));\r\n                break;\r\n            }\r\n        } else if (stopAtNonOption) {\r\n            processNonOptionToken(token.substring(i), true);\r\n            break;\r\n        } else {\r\n            tokens.add(token);\r\n            break;\r\n        }\r\n    }\r\n}",
      "path": "src/main/java/org/apache/commons/cli/PosixParser.java",
      "functionStartLine": 264,
      "functionName": "burstToken",
      "functionAnnotation": "",
      "functionDoc": "Breaks \u003ccode\u003etoken\u003c/code\u003e into its constituent parts\r\nusing the following algorithm.\r\n\r\n\u003cul\u003e\r\n \u003cli\u003eignore the first character (\"\u003cb\u003e-\u003c/b\u003e\")\u003c/li\u003e\r\n \u003cli\u003efor each remaining character check if an {@link Option}\r\n exists with that id.\u003c/li\u003e\r\n \u003cli\u003eif an {@link Option} does exist then add that character\r\n prepended with \"\u003cb\u003e-\u003c/b\u003e\" to the list of processed tokens.\u003c/li\u003e\r\n \u003cli\u003eif the {@link Option} can have an argument value and there\r\n are remaining characters in the token then add the remaining\r\n characters as a token to the list of processed tokens.\u003c/li\u003e\r\n \u003cli\u003eif an {@link Option} does \u003cb\u003eNOT\u003c/b\u003e exist \u003cb\u003eAND\u003c/b\u003e\r\n \u003ccode\u003estopAtNonOption\u003c/code\u003e \u003cb\u003eIS\u003c/b\u003e set then add the special token\r\n \"\u003cb\u003e--\u003c/b\u003e\" followed by the remaining characters and also\r\n the remaining tokens directly to the processed tokens list.\u003c/li\u003e\r\n \u003cli\u003eif an {@link Option} does \u003cb\u003eNOT\u003c/b\u003e exist \u003cb\u003eAND\u003c/b\u003e\r\n \u003ccode\u003estopAtNonOption\u003c/code\u003e \u003cb\u003eIS NOT\u003c/b\u003e set then add that\r\n character prepended with \"\u003cb\u003e-\u003c/b\u003e\".\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\r\n@param token The current token to be \u003cb\u003eburst\u003c/b\u003e\r\n@param stopAtNonOption Specifies whether to stop processing\r\nat the first non-Option encountered.\r\n",
      "diff": "@@ -1,19 +1,19 @@\n protected void burstToken(String token, boolean stopAtNonOption) {\r\n     for (int i \u003d 1; i \u003c token.length(); i++) {\r\n-        String ch \u003d String.valueOf(token.charAt(i));\r\n+        final String ch \u003d String.valueOf(token.charAt(i));\r\n         if (options.hasOption(ch)) {\r\n             tokens.add(\"-\" + ch);\r\n             currentOption \u003d options.getOption(ch);\r\n             if (currentOption.hasArg() \u0026\u0026 token.length() !\u003d i + 1) {\r\n                 tokens.add(token.substring(i + 1));\r\n                 break;\r\n             }\r\n         } else if (stopAtNonOption) {\r\n             processNonOptionToken(token.substring(i), true);\r\n             break;\r\n         } else {\r\n             tokens.add(token);\r\n             break;\r\n         }\r\n     }\r\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "0f56df924fabac851a111a04569f4a3d7331ef8e": {
      "type": "Ydocchange",
      "commitMessage": "JavaDoc fixes. Patch provided by GitHub user sebkur. This fixes #8 from GitHub.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/cli/trunk@1783175 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "2/16/17 10:52 AM",
      "commitName": "0f56df924fabac851a111a04569f4a3d7331ef8e",
      "commitAuthor": "Benedikt Ritter",
      "commitDateOld": "5/3/15 8:09 PM",
      "commitNameOld": "700f05292777f33b5c349ac2b4f83168fd1ed888",
      "commitAuthorOld": "Gary D. Gregory",
      "daysBetweenCommits": 654.61,
      "commitsBetweenForRepo": 34,
      "commitsBetweenForFile": 1,
      "actualSource": "protected void burstToken(String token, boolean stopAtNonOption) {\r\n    for (int i \u003d 1; i \u003c token.length(); i++) {\r\n        String ch \u003d String.valueOf(token.charAt(i));\r\n        if (options.hasOption(ch)) {\r\n            tokens.add(\"-\" + ch);\r\n            currentOption \u003d options.getOption(ch);\r\n            if (currentOption.hasArg() \u0026\u0026 token.length() !\u003d i + 1) {\r\n                tokens.add(token.substring(i + 1));\r\n                break;\r\n            }\r\n        } else if (stopAtNonOption) {\r\n            processNonOptionToken(token.substring(i), true);\r\n            break;\r\n        } else {\r\n            tokens.add(token);\r\n            break;\r\n        }\r\n    }\r\n}",
      "path": "src/main/java/org/apache/commons/cli/PosixParser.java",
      "functionStartLine": 264,
      "functionName": "burstToken",
      "functionAnnotation": "",
      "functionDoc": "Breaks \u003ccode\u003etoken\u003c/code\u003e into its constituent parts\r\nusing the following algorithm.\r\n\r\n\u003cul\u003e\r\n \u003cli\u003eignore the first character (\"\u003cb\u003e-\u003c/b\u003e\")\u003c/li\u003e\r\n \u003cli\u003efor each remaining character check if an {@link Option}\r\n exists with that id.\u003c/li\u003e\r\n \u003cli\u003eif an {@link Option} does exist then add that character\r\n prepended with \"\u003cb\u003e-\u003c/b\u003e\" to the list of processed tokens.\u003c/li\u003e\r\n \u003cli\u003eif the {@link Option} can have an argument value and there\r\n are remaining characters in the token then add the remaining\r\n characters as a token to the list of processed tokens.\u003c/li\u003e\r\n \u003cli\u003eif an {@link Option} does \u003cb\u003eNOT\u003c/b\u003e exist \u003cb\u003eAND\u003c/b\u003e\r\n \u003ccode\u003estopAtNonOption\u003c/code\u003e \u003cb\u003eIS\u003c/b\u003e set then add the special token\r\n \"\u003cb\u003e--\u003c/b\u003e\" followed by the remaining characters and also\r\n the remaining tokens directly to the processed tokens list.\u003c/li\u003e\r\n \u003cli\u003eif an {@link Option} does \u003cb\u003eNOT\u003c/b\u003e exist \u003cb\u003eAND\u003c/b\u003e\r\n \u003ccode\u003estopAtNonOption\u003c/code\u003e \u003cb\u003eIS NOT\u003c/b\u003e set then add that\r\n character prepended with \"\u003cb\u003e-\u003c/b\u003e\".\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\r\n@param token The current token to be \u003cb\u003eburst\u003c/b\u003e\r\n@param stopAtNonOption Specifies whether to stop processing\r\nat the first non-Option encountered.\r\n",
      "diff": "",
      "extendedDetails": {
        "oldValue": "Breaks \u003ccode\u003etoken\u003c/code\u003e into its constituent parts\r\nusing the following algorithm.\r\n\r\n\u003cul\u003e\r\n \u003cli\u003eignore the first character (\"\u003cb\u003e-\u003c/b\u003e\")\u003c/li\u003e\r\n \u003cli\u003eforeach remaining character check if an {@link Option}\r\n exists with that id.\u003c/li\u003e\r\n \u003cli\u003eif an {@link Option} does exist then add that character\r\n prepended with \"\u003cb\u003e-\u003c/b\u003e\" to the list of processed tokens.\u003c/li\u003e\r\n \u003cli\u003eif the {@link Option} can have an argument value and there\r\n are remaining characters in the token then add the remaining\r\n characters as a token to the list of processed tokens.\u003c/li\u003e\r\n \u003cli\u003eif an {@link Option} does \u003cb\u003eNOT\u003c/b\u003e exist \u003cb\u003eAND\u003c/b\u003e\r\n \u003ccode\u003estopAtNonOption\u003c/code\u003e \u003cb\u003eIS\u003c/b\u003e set then add the special token\r\n \"\u003cb\u003e--\u003c/b\u003e\" followed by the remaining characters and also\r\n the remaining tokens directly to the processed tokens list.\u003c/li\u003e\r\n \u003cli\u003eif an {@link Option} does \u003cb\u003eNOT\u003c/b\u003e exist \u003cb\u003eAND\u003c/b\u003e\r\n \u003ccode\u003estopAtNonOption\u003c/code\u003e \u003cb\u003eIS NOT\u003c/b\u003e set then add that\r\n character prepended with \"\u003cb\u003e-\u003c/b\u003e\".\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\r\n@param token The current token to be \u003cb\u003eburst\u003c/b\u003e\r\n@param stopAtNonOption Specifies whether to stop processing\r\nat the first non-Option encountered.\r\n",
        "newValue": "Breaks \u003ccode\u003etoken\u003c/code\u003e into its constituent parts\r\nusing the following algorithm.\r\n\r\n\u003cul\u003e\r\n \u003cli\u003eignore the first character (\"\u003cb\u003e-\u003c/b\u003e\")\u003c/li\u003e\r\n \u003cli\u003efor each remaining character check if an {@link Option}\r\n exists with that id.\u003c/li\u003e\r\n \u003cli\u003eif an {@link Option} does exist then add that character\r\n prepended with \"\u003cb\u003e-\u003c/b\u003e\" to the list of processed tokens.\u003c/li\u003e\r\n \u003cli\u003eif the {@link Option} can have an argument value and there\r\n are remaining characters in the token then add the remaining\r\n characters as a token to the list of processed tokens.\u003c/li\u003e\r\n \u003cli\u003eif an {@link Option} does \u003cb\u003eNOT\u003c/b\u003e exist \u003cb\u003eAND\u003c/b\u003e\r\n \u003ccode\u003estopAtNonOption\u003c/code\u003e \u003cb\u003eIS\u003c/b\u003e set then add the special token\r\n \"\u003cb\u003e--\u003c/b\u003e\" followed by the remaining characters and also\r\n the remaining tokens directly to the processed tokens list.\u003c/li\u003e\r\n \u003cli\u003eif an {@link Option} does \u003cb\u003eNOT\u003c/b\u003e exist \u003cb\u003eAND\u003c/b\u003e\r\n \u003ccode\u003estopAtNonOption\u003c/code\u003e \u003cb\u003eIS NOT\u003c/b\u003e set then add that\r\n character prepended with \"\u003cb\u003e-\u003c/b\u003e\".\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\r\n@param token The current token to be \u003cb\u003eburst\u003c/b\u003e\r\n@param stopAtNonOption Specifies whether to stop processing\r\nat the first non-Option encountered.\r\n"
      }
    },
    "6b87d290954c4594fc69a3a0b85fff12490cfde5": {
      "type": "Ybodychange",
      "commitMessage": "PMD: Useless parenthesis\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/cli/trunk@1677402 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "5/3/15 4:57 PM",
      "commitName": "6b87d290954c4594fc69a3a0b85fff12490cfde5",
      "commitAuthor": "Benedikt Ritter",
      "commitDateOld": "3/28/15 8:09 PM",
      "commitNameOld": "78e9b51e45a3b563092f741aa52a7be8f6c538dc",
      "commitAuthorOld": "Benedikt Ritter",
      "daysBetweenCommits": 35.83,
      "commitsBetweenForRepo": 17,
      "commitsBetweenForFile": 1,
      "actualSource": "protected void burstToken(String token, boolean stopAtNonOption) {\r\n    for (int i \u003d 1; i \u003c token.length(); i++) {\r\n        String ch \u003d String.valueOf(token.charAt(i));\r\n        if (options.hasOption(ch)) {\r\n            tokens.add(\"-\" + ch);\r\n            currentOption \u003d options.getOption(ch);\r\n            if (currentOption.hasArg() \u0026\u0026 token.length() !\u003d i + 1) {\r\n                tokens.add(token.substring(i + 1));\r\n                break;\r\n            }\r\n        } else if (stopAtNonOption) {\r\n            processNonOptionToken(token.substring(i), true);\r\n            break;\r\n        } else {\r\n            tokens.add(token);\r\n            break;\r\n        }\r\n    }\r\n}",
      "path": "src/main/java/org/apache/commons/cli/PosixParser.java",
      "functionStartLine": 268,
      "functionName": "burstToken",
      "functionAnnotation": "",
      "functionDoc": "Breaks \u003ccode\u003etoken\u003c/code\u003e into its constituent parts\r\nusing the following algorithm.\r\n\r\n\u003cul\u003e\r\n \u003cli\u003eignore the first character (\"\u003cb\u003e-\u003c/b\u003e\")\u003c/li\u003e\r\n \u003cli\u003eforeach remaining character check if an {@link Option}\r\n exists with that id.\u003c/li\u003e\r\n \u003cli\u003eif an {@link Option} does exist then add that character\r\n prepended with \"\u003cb\u003e-\u003c/b\u003e\" to the list of processed tokens.\u003c/li\u003e\r\n \u003cli\u003eif the {@link Option} can have an argument value and there\r\n are remaining characters in the token then add the remaining\r\n characters as a token to the list of processed tokens.\u003c/li\u003e\r\n \u003cli\u003eif an {@link Option} does \u003cb\u003eNOT\u003c/b\u003e exist \u003cb\u003eAND\u003c/b\u003e\r\n \u003ccode\u003estopAtNonOption\u003c/code\u003e \u003cb\u003eIS\u003c/b\u003e set then add the special token\r\n \"\u003cb\u003e--\u003c/b\u003e\" followed by the remaining characters and also\r\n the remaining tokens directly to the processed tokens list.\u003c/li\u003e\r\n \u003cli\u003eif an {@link Option} does \u003cb\u003eNOT\u003c/b\u003e exist \u003cb\u003eAND\u003c/b\u003e\r\n \u003ccode\u003estopAtNonOption\u003c/code\u003e \u003cb\u003eIS NOT\u003c/b\u003e set then add that\r\n character prepended with \"\u003cb\u003e-\u003c/b\u003e\".\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\r\n@param token The current token to be \u003cb\u003eburst\u003c/b\u003e\r\n@param stopAtNonOption Specifies whether to stop processing\r\nat the first non-Option encountered.\r\n",
      "diff": "@@ -1,19 +1,19 @@\n protected void burstToken(String token, boolean stopAtNonOption) {\r\n     for (int i \u003d 1; i \u003c token.length(); i++) {\r\n         String ch \u003d String.valueOf(token.charAt(i));\r\n         if (options.hasOption(ch)) {\r\n             tokens.add(\"-\" + ch);\r\n             currentOption \u003d options.getOption(ch);\r\n-            if (currentOption.hasArg() \u0026\u0026 (token.length() !\u003d (i + 1))) {\r\n+            if (currentOption.hasArg() \u0026\u0026 token.length() !\u003d i + 1) {\r\n                 tokens.add(token.substring(i + 1));\r\n                 break;\r\n             }\r\n         } else if (stopAtNonOption) {\r\n             processNonOptionToken(token.substring(i), true);\r\n             break;\r\n         } else {\r\n             tokens.add(token);\r\n             break;\r\n         }\r\n     }\r\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "1596f3bbe57986361da4ac1a23634dd5b00d10df": {
      "type": "Yfilerename",
      "commitMessage": "Switched to the Maven 2 default directory layout (part 3)\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/cli/trunk@955173 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "6/16/10 12:45 PM",
      "commitName": "1596f3bbe57986361da4ac1a23634dd5b00d10df",
      "commitAuthor": "Emmanuel Bourg",
      "commitDateOld": "6/16/10 12:42 PM",
      "commitNameOld": "406a35f1a128944b7c51dcbc4a1f04c3f8bec3e6",
      "commitAuthorOld": "Emmanuel Bourg",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "protected void burstToken(String token, boolean stopAtNonOption) {\r\n    for (int i \u003d 1; i \u003c token.length(); i++) {\r\n        String ch \u003d String.valueOf(token.charAt(i));\r\n        if (options.hasOption(ch)) {\r\n            tokens.add(\"-\" + ch);\r\n            currentOption \u003d options.getOption(ch);\r\n            if (currentOption.hasArg() \u0026\u0026 (token.length() !\u003d (i + 1))) {\r\n                tokens.add(token.substring(i + 1));\r\n                break;\r\n            }\r\n        } else if (stopAtNonOption) {\r\n            processNonOptionToken(token.substring(i), true);\r\n            break;\r\n        } else {\r\n            tokens.add(token);\r\n            break;\r\n        }\r\n    }\r\n}",
      "path": "src/main/java/org/apache/commons/cli/PosixParser.java",
      "functionStartLine": 267,
      "functionName": "burstToken",
      "functionAnnotation": "",
      "functionDoc": "Breaks \u003ccode\u003etoken\u003c/code\u003e into its constituent parts\r\nusing the following algorithm.\r\n\r\n\u003cul\u003e\r\n \u003cli\u003eignore the first character (\"\u003cb\u003e-\u003c/b\u003e\")\u003c/li\u003e\r\n \u003cli\u003eforeach remaining character check if an {@link Option}\r\n exists with that id.\u003c/li\u003e\r\n \u003cli\u003eif an {@link Option} does exist then add that character\r\n prepended with \"\u003cb\u003e-\u003c/b\u003e\" to the list of processed tokens.\u003c/li\u003e\r\n \u003cli\u003eif the {@link Option} can have an argument value and there\r\n are remaining characters in the token then add the remaining\r\n characters as a token to the list of processed tokens.\u003c/li\u003e\r\n \u003cli\u003eif an {@link Option} does \u003cb\u003eNOT\u003c/b\u003e exist \u003cb\u003eAND\u003c/b\u003e\r\n \u003ccode\u003estopAtNonOption\u003c/code\u003e \u003cb\u003eIS\u003c/b\u003e set then add the special token\r\n \"\u003cb\u003e--\u003c/b\u003e\" followed by the remaining characters and also\r\n the remaining tokens directly to the processed tokens list.\u003c/li\u003e\r\n \u003cli\u003eif an {@link Option} does \u003cb\u003eNOT\u003c/b\u003e exist \u003cb\u003eAND\u003c/b\u003e\r\n \u003ccode\u003estopAtNonOption\u003c/code\u003e \u003cb\u003eIS NOT\u003c/b\u003e set then add that\r\n character prepended with \"\u003cb\u003e-\u003c/b\u003e\".\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\r\n@param token The current token to be \u003cb\u003eburst\u003c/b\u003e\r\n@param stopAtNonOption Specifies whether to stop processing\r\nat the first non-Option encountered.\r\n",
      "diff": "",
      "extendedDetails": {
        "oldPath": "src/java/org/apache/commons/cli/PosixParser.java",
        "newPath": "src/main/java/org/apache/commons/cli/PosixParser.java"
      }
    },
    "db4a638cf642fd7d031fcaebffa306b0a16ba771": {
      "type": "Ybodychange",
      "commitMessage": "Fixed testStopAtExpectedArg for PosixParser\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/cli/branches/cli-1.x@695760 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "9/16/08 11:05 AM",
      "commitName": "db4a638cf642fd7d031fcaebffa306b0a16ba771",
      "commitAuthor": "Emmanuel Bourg",
      "commitDateOld": "7/29/08 11:13 AM",
      "commitNameOld": "147df44faa4eb12ffd4a0063fc3284f784ea67c8",
      "commitAuthorOld": "Emmanuel Bourg",
      "daysBetweenCommits": 48.99,
      "commitsBetweenForRepo": 14,
      "commitsBetweenForFile": 1,
      "actualSource": "protected void burstToken(String token, boolean stopAtNonOption) {\r\n    for (int i \u003d 1; i \u003c token.length(); i++) {\r\n        String ch \u003d String.valueOf(token.charAt(i));\r\n        if (options.hasOption(ch)) {\r\n            tokens.add(\"-\" + ch);\r\n            currentOption \u003d options.getOption(ch);\r\n            if (currentOption.hasArg() \u0026\u0026 (token.length() !\u003d (i + 1))) {\r\n                tokens.add(token.substring(i + 1));\r\n                break;\r\n            }\r\n        } else if (stopAtNonOption) {\r\n            processNonOptionToken(token.substring(i), true);\r\n            break;\r\n        } else {\r\n            tokens.add(token);\r\n            break;\r\n        }\r\n    }\r\n}",
      "path": "src/java/org/apache/commons/cli/PosixParser.java",
      "functionStartLine": 246,
      "functionName": "burstToken",
      "functionAnnotation": "",
      "functionDoc": "Breaks \u003ccode\u003etoken\u003c/code\u003e into its constituent parts\r\nusing the following algorithm.\r\n\r\n\u003cul\u003e\r\n \u003cli\u003eignore the first character (\"\u003cb\u003e-\u003c/b\u003e\")\u003c/li\u003e\r\n \u003cli\u003eforeach remaining character check if an {@link Option}\r\n exists with that id.\u003c/li\u003e\r\n \u003cli\u003eif an {@link Option} does exist then add that character\r\n prepended with \"\u003cb\u003e-\u003c/b\u003e\" to the list of processed tokens.\u003c/li\u003e\r\n \u003cli\u003eif the {@link Option} can have an argument value and there\r\n are remaining characters in the token then add the remaining\r\n characters as a token to the list of processed tokens.\u003c/li\u003e\r\n \u003cli\u003eif an {@link Option} does \u003cb\u003eNOT\u003c/b\u003e exist \u003cb\u003eAND\u003c/b\u003e\r\n \u003ccode\u003estopAtNonOption\u003c/code\u003e \u003cb\u003eIS\u003c/b\u003e set then add the special token\r\n \"\u003cb\u003e--\u003c/b\u003e\" followed by the remaining characters and also\r\n the remaining tokens directly to the processed tokens list.\u003c/li\u003e\r\n \u003cli\u003eif an {@link Option} does \u003cb\u003eNOT\u003c/b\u003e exist \u003cb\u003eAND\u003c/b\u003e\r\n \u003ccode\u003estopAtNonOption\u003c/code\u003e \u003cb\u003eIS NOT\u003c/b\u003e set then add that\r\n character prepended with \"\u003cb\u003e-\u003c/b\u003e\".\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\r\n@param token The current token to be \u003cb\u003eburst\u003c/b\u003e\r\n@param stopAtNonOption Specifies whether to stop processing\r\nat the first non-Option encountered.\r\n",
      "diff": "@@ -1,20 +1,19 @@\n protected void burstToken(String token, boolean stopAtNonOption) {\r\n-    Option currentOption;\r\n     for (int i \u003d 1; i \u003c token.length(); i++) {\r\n         String ch \u003d String.valueOf(token.charAt(i));\r\n         if (options.hasOption(ch)) {\r\n             tokens.add(\"-\" + ch);\r\n             currentOption \u003d options.getOption(ch);\r\n             if (currentOption.hasArg() \u0026\u0026 (token.length() !\u003d (i + 1))) {\r\n                 tokens.add(token.substring(i + 1));\r\n                 break;\r\n             }\r\n         } else if (stopAtNonOption) {\r\n-            processNonOptionToken(token.substring(i));\r\n+            processNonOptionToken(token.substring(i), true);\r\n             break;\r\n         } else {\r\n             tokens.add(token);\r\n             break;\r\n         }\r\n     }\r\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "147df44faa4eb12ffd4a0063fc3284f784ea67c8": {
      "type": "Ymultichange(Ydocchange,Yformatchange)",
      "commitMessage": "Style update\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/cli/branches/cli-1.x@680644 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "7/29/08 11:13 AM",
      "commitName": "147df44faa4eb12ffd4a0063fc3284f784ea67c8",
      "commitAuthor": "Emmanuel Bourg",
      "subchanges": [
        {
          "type": "Ydocchange",
          "commitMessage": "Style update\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/cli/branches/cli-1.x@680644 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "7/29/08 11:13 AM",
          "commitName": "147df44faa4eb12ffd4a0063fc3284f784ea67c8",
          "commitAuthor": "Emmanuel Bourg",
          "commitDateOld": "7/28/08 1:36 PM",
          "commitNameOld": "0823e1100abd395aa022285dc97d2dc0dd9472ef",
          "commitAuthorOld": "Emmanuel Bourg",
          "daysBetweenCommits": 0.9,
          "commitsBetweenForRepo": 2,
          "commitsBetweenForFile": 1,
          "actualSource": "protected void burstToken(String token, boolean stopAtNonOption) {\r\n    Option currentOption;\r\n    for (int i \u003d 1; i \u003c token.length(); i++) {\r\n        String ch \u003d String.valueOf(token.charAt(i));\r\n        if (options.hasOption(ch)) {\r\n            tokens.add(\"-\" + ch);\r\n            currentOption \u003d options.getOption(ch);\r\n            if (currentOption.hasArg() \u0026\u0026 (token.length() !\u003d (i + 1))) {\r\n                tokens.add(token.substring(i + 1));\r\n                break;\r\n            }\r\n        } else if (stopAtNonOption) {\r\n            processNonOptionToken(token.substring(i));\r\n            break;\r\n        } else {\r\n            tokens.add(token);\r\n            break;\r\n        }\r\n    }\r\n}",
          "path": "src/java/org/apache/commons/cli/PosixParser.java",
          "functionStartLine": 240,
          "functionName": "burstToken",
          "functionAnnotation": "",
          "functionDoc": "Breaks \u003ccode\u003etoken\u003c/code\u003e into its constituent parts\r\nusing the following algorithm.\r\n\r\n\u003cul\u003e\r\n \u003cli\u003eignore the first character (\"\u003cb\u003e-\u003c/b\u003e\")\u003c/li\u003e\r\n \u003cli\u003eforeach remaining character check if an {@link Option}\r\n exists with that id.\u003c/li\u003e\r\n \u003cli\u003eif an {@link Option} does exist then add that character\r\n prepended with \"\u003cb\u003e-\u003c/b\u003e\" to the list of processed tokens.\u003c/li\u003e\r\n \u003cli\u003eif the {@link Option} can have an argument value and there\r\n are remaining characters in the token then add the remaining\r\n characters as a token to the list of processed tokens.\u003c/li\u003e\r\n \u003cli\u003eif an {@link Option} does \u003cb\u003eNOT\u003c/b\u003e exist \u003cb\u003eAND\u003c/b\u003e\r\n \u003ccode\u003estopAtNonOption\u003c/code\u003e \u003cb\u003eIS\u003c/b\u003e set then add the special token\r\n \"\u003cb\u003e--\u003c/b\u003e\" followed by the remaining characters and also\r\n the remaining tokens directly to the processed tokens list.\u003c/li\u003e\r\n \u003cli\u003eif an {@link Option} does \u003cb\u003eNOT\u003c/b\u003e exist \u003cb\u003eAND\u003c/b\u003e\r\n \u003ccode\u003estopAtNonOption\u003c/code\u003e \u003cb\u003eIS NOT\u003c/b\u003e set then add that\r\n character prepended with \"\u003cb\u003e-\u003c/b\u003e\".\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\r\n@param token The current token to be \u003cb\u003eburst\u003c/b\u003e\r\n@param stopAtNonOption Specifies whether to stop processing\r\nat the first non-Option encountered.\r\n",
          "diff": "",
          "extendedDetails": {
            "oldValue": "\u003cp\u003eBreaks \u003ccode\u003etoken\u003c/code\u003e into its constituent parts\r\nusing the following algorithm.\r\n\u003cul\u003e\r\n \u003cli\u003eignore the first character (\"\u003cb\u003e-\u003c/b\u003e\")\u003c/li\u003e\r\n \u003cli\u003eforeach remaining character check if an {@link Option}\r\n exists with that id.\u003c/li\u003e\r\n \u003cli\u003eif an {@link Option} does exist then add that character\r\n prepended with \"\u003cb\u003e-\u003c/b\u003e\" to the list of processed tokens.\u003c/li\u003e\r\n \u003cli\u003eif the {@link Option} can have an argument value and there \r\n are remaining characters in the token then add the remaining \r\n characters as a token to the list of processed tokens.\u003c/li\u003e\r\n \u003cli\u003eif an {@link Option} does \u003cb\u003eNOT\u003c/b\u003e exist \u003cb\u003eAND\u003c/b\u003e \r\n \u003ccode\u003estopAtNonOption\u003c/code\u003e \u003cb\u003eIS\u003c/b\u003e set then add the special token\r\n \"\u003cb\u003e--\u003c/b\u003e\" followed by the remaining characters and also \r\n the remaining tokens directly to the processed tokens list.\u003c/li\u003e\r\n \u003cli\u003eif an {@link Option} does \u003cb\u003eNOT\u003c/b\u003e exist \u003cb\u003eAND\u003c/b\u003e\r\n \u003ccode\u003estopAtNonOption\u003c/code\u003e \u003cb\u003eIS NOT\u003c/b\u003e set then add that\r\n character prepended with \"\u003cb\u003e-\u003c/b\u003e\".\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003c/p\u003e\r\n\r\n@param token The current token to be \u003cb\u003eburst\u003c/b\u003e\r\n@param stopAtNonOption Specifies whether to stop processing\r\nat the first non-Option encountered.\r\n",
            "newValue": "Breaks \u003ccode\u003etoken\u003c/code\u003e into its constituent parts\r\nusing the following algorithm.\r\n\r\n\u003cul\u003e\r\n \u003cli\u003eignore the first character (\"\u003cb\u003e-\u003c/b\u003e\")\u003c/li\u003e\r\n \u003cli\u003eforeach remaining character check if an {@link Option}\r\n exists with that id.\u003c/li\u003e\r\n \u003cli\u003eif an {@link Option} does exist then add that character\r\n prepended with \"\u003cb\u003e-\u003c/b\u003e\" to the list of processed tokens.\u003c/li\u003e\r\n \u003cli\u003eif the {@link Option} can have an argument value and there\r\n are remaining characters in the token then add the remaining\r\n characters as a token to the list of processed tokens.\u003c/li\u003e\r\n \u003cli\u003eif an {@link Option} does \u003cb\u003eNOT\u003c/b\u003e exist \u003cb\u003eAND\u003c/b\u003e\r\n \u003ccode\u003estopAtNonOption\u003c/code\u003e \u003cb\u003eIS\u003c/b\u003e set then add the special token\r\n \"\u003cb\u003e--\u003c/b\u003e\" followed by the remaining characters and also\r\n the remaining tokens directly to the processed tokens list.\u003c/li\u003e\r\n \u003cli\u003eif an {@link Option} does \u003cb\u003eNOT\u003c/b\u003e exist \u003cb\u003eAND\u003c/b\u003e\r\n \u003ccode\u003estopAtNonOption\u003c/code\u003e \u003cb\u003eIS NOT\u003c/b\u003e set then add that\r\n character prepended with \"\u003cb\u003e-\u003c/b\u003e\".\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\r\n@param token The current token to be \u003cb\u003eburst\u003c/b\u003e\r\n@param stopAtNonOption Specifies whether to stop processing\r\nat the first non-Option encountered.\r\n"
          }
        },
        {
          "type": "Yformatchange",
          "commitMessage": "Style update\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/cli/branches/cli-1.x@680644 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "7/29/08 11:13 AM",
          "commitName": "147df44faa4eb12ffd4a0063fc3284f784ea67c8",
          "commitAuthor": "Emmanuel Bourg",
          "commitDateOld": "7/28/08 1:36 PM",
          "commitNameOld": "0823e1100abd395aa022285dc97d2dc0dd9472ef",
          "commitAuthorOld": "Emmanuel Bourg",
          "daysBetweenCommits": 0.9,
          "commitsBetweenForRepo": 2,
          "commitsBetweenForFile": 1,
          "actualSource": "protected void burstToken(String token, boolean stopAtNonOption) {\r\n    Option currentOption;\r\n    for (int i \u003d 1; i \u003c token.length(); i++) {\r\n        String ch \u003d String.valueOf(token.charAt(i));\r\n        if (options.hasOption(ch)) {\r\n            tokens.add(\"-\" + ch);\r\n            currentOption \u003d options.getOption(ch);\r\n            if (currentOption.hasArg() \u0026\u0026 (token.length() !\u003d (i + 1))) {\r\n                tokens.add(token.substring(i + 1));\r\n                break;\r\n            }\r\n        } else if (stopAtNonOption) {\r\n            processNonOptionToken(token.substring(i));\r\n            break;\r\n        } else {\r\n            tokens.add(token);\r\n            break;\r\n        }\r\n    }\r\n}",
          "path": "src/java/org/apache/commons/cli/PosixParser.java",
          "functionStartLine": 240,
          "functionName": "burstToken",
          "functionAnnotation": "",
          "functionDoc": "Breaks \u003ccode\u003etoken\u003c/code\u003e into its constituent parts\r\nusing the following algorithm.\r\n\r\n\u003cul\u003e\r\n \u003cli\u003eignore the first character (\"\u003cb\u003e-\u003c/b\u003e\")\u003c/li\u003e\r\n \u003cli\u003eforeach remaining character check if an {@link Option}\r\n exists with that id.\u003c/li\u003e\r\n \u003cli\u003eif an {@link Option} does exist then add that character\r\n prepended with \"\u003cb\u003e-\u003c/b\u003e\" to the list of processed tokens.\u003c/li\u003e\r\n \u003cli\u003eif the {@link Option} can have an argument value and there\r\n are remaining characters in the token then add the remaining\r\n characters as a token to the list of processed tokens.\u003c/li\u003e\r\n \u003cli\u003eif an {@link Option} does \u003cb\u003eNOT\u003c/b\u003e exist \u003cb\u003eAND\u003c/b\u003e\r\n \u003ccode\u003estopAtNonOption\u003c/code\u003e \u003cb\u003eIS\u003c/b\u003e set then add the special token\r\n \"\u003cb\u003e--\u003c/b\u003e\" followed by the remaining characters and also\r\n the remaining tokens directly to the processed tokens list.\u003c/li\u003e\r\n \u003cli\u003eif an {@link Option} does \u003cb\u003eNOT\u003c/b\u003e exist \u003cb\u003eAND\u003c/b\u003e\r\n \u003ccode\u003estopAtNonOption\u003c/code\u003e \u003cb\u003eIS NOT\u003c/b\u003e set then add that\r\n character prepended with \"\u003cb\u003e-\u003c/b\u003e\".\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\r\n@param token The current token to be \u003cb\u003eburst\u003c/b\u003e\r\n@param stopAtNonOption Specifies whether to stop processing\r\nat the first non-Option encountered.\r\n",
          "diff": "",
          "extendedDetails": {}
        }
      ]
    },
    "0823e1100abd395aa022285dc97d2dc0dd9472ef": {
      "type": "Ybodychange",
      "commitMessage": "Removed the unused code from PosixParser\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/cli/branches/cli-1.x@680316 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "7/28/08 1:36 PM",
      "commitName": "0823e1100abd395aa022285dc97d2dc0dd9472ef",
      "commitAuthor": "Emmanuel Bourg",
      "commitDateOld": "7/28/08 12:47 PM",
      "commitNameOld": "99aa05af2bfef3980ad8f94230cd077e8d30c5ea",
      "commitAuthorOld": "Emmanuel Bourg",
      "daysBetweenCommits": 0.03,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "actualSource": "protected void burstToken(String token, boolean stopAtNonOption) {\r\n    Option currentOption;\r\n    for (int i \u003d 1; i \u003c token.length(); i++) {\r\n        String ch \u003d String.valueOf(token.charAt(i));\r\n        if (options.hasOption(ch)) {\r\n            tokens.add(\"-\" + ch);\r\n            currentOption \u003d options.getOption(ch);\r\n            if (currentOption.hasArg() \u0026\u0026 (token.length() !\u003d (i + 1))) {\r\n                tokens.add(token.substring(i + 1));\r\n                break;\r\n            }\r\n        } else if (stopAtNonOption) {\r\n            processNonOptionToken(token.substring(i));\r\n            break;\r\n        } else {\r\n            tokens.add(token);\r\n            break;\r\n        }\r\n    }\r\n}",
      "path": "src/java/org/apache/commons/cli/PosixParser.java",
      "functionStartLine": 240,
      "functionName": "burstToken",
      "functionAnnotation": "",
      "functionDoc": "\u003cp\u003eBreaks \u003ccode\u003etoken\u003c/code\u003e into its constituent parts\r\nusing the following algorithm.\r\n\u003cul\u003e\r\n \u003cli\u003eignore the first character (\"\u003cb\u003e-\u003c/b\u003e\")\u003c/li\u003e\r\n \u003cli\u003eforeach remaining character check if an {@link Option}\r\n exists with that id.\u003c/li\u003e\r\n \u003cli\u003eif an {@link Option} does exist then add that character\r\n prepended with \"\u003cb\u003e-\u003c/b\u003e\" to the list of processed tokens.\u003c/li\u003e\r\n \u003cli\u003eif the {@link Option} can have an argument value and there \r\n are remaining characters in the token then add the remaining \r\n characters as a token to the list of processed tokens.\u003c/li\u003e\r\n \u003cli\u003eif an {@link Option} does \u003cb\u003eNOT\u003c/b\u003e exist \u003cb\u003eAND\u003c/b\u003e \r\n \u003ccode\u003estopAtNonOption\u003c/code\u003e \u003cb\u003eIS\u003c/b\u003e set then add the special token\r\n \"\u003cb\u003e--\u003c/b\u003e\" followed by the remaining characters and also \r\n the remaining tokens directly to the processed tokens list.\u003c/li\u003e\r\n \u003cli\u003eif an {@link Option} does \u003cb\u003eNOT\u003c/b\u003e exist \u003cb\u003eAND\u003c/b\u003e\r\n \u003ccode\u003estopAtNonOption\u003c/code\u003e \u003cb\u003eIS NOT\u003c/b\u003e set then add that\r\n character prepended with \"\u003cb\u003e-\u003c/b\u003e\".\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003c/p\u003e\r\n\r\n@param token The current token to be \u003cb\u003eburst\u003c/b\u003e\r\n@param stopAtNonOption Specifies whether to stop processing\r\nat the first non-Option encountered.\r\n",
      "diff": "@@ -1,19 +1,20 @@\n protected void burstToken(String token, boolean stopAtNonOption) {\r\n+    Option currentOption;\r\n     for (int i \u003d 1; i \u003c token.length(); i++) {\r\n         String ch \u003d String.valueOf(token.charAt(i));\r\n         if (options.hasOption(ch)) {\r\n             tokens.add(\"-\" + ch);\r\n             currentOption \u003d options.getOption(ch);\r\n             if (currentOption.hasArg() \u0026\u0026 (token.length() !\u003d (i + 1))) {\r\n                 tokens.add(token.substring(i + 1));\r\n                 break;\r\n             }\r\n         } else if (stopAtNonOption) {\r\n-            process(token.substring(i));\r\n+            processNonOptionToken(token.substring(i));\r\n             break;\r\n         } else {\r\n             tokens.add(token);\r\n             break;\r\n         }\r\n     }\r\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "9c5ce3501938cff01d78b7a1fff10a60abe9e0cf": {
      "type": "Ybodychange",
      "commitMessage": "Fixed PosixParser to stop bursting tokens when a non option character is found (CLI-163)\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/cli/branches/cli-1.x@680208 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "7/28/08 2:38 AM",
      "commitName": "9c5ce3501938cff01d78b7a1fff10a60abe9e0cf",
      "commitAuthor": "Emmanuel Bourg",
      "commitDateOld": "5/28/07 11:32 AM",
      "commitNameOld": "b599e124a373de091bb6e5b0d771505efccc444d",
      "commitAuthorOld": "Henri Yandell",
      "daysBetweenCommits": 426.63,
      "commitsBetweenForRepo": 98,
      "commitsBetweenForFile": 1,
      "actualSource": "protected void burstToken(String token, boolean stopAtNonOption) {\r\n    for (int i \u003d 1; i \u003c token.length(); i++) {\r\n        String ch \u003d String.valueOf(token.charAt(i));\r\n        if (options.hasOption(ch)) {\r\n            tokens.add(\"-\" + ch);\r\n            currentOption \u003d options.getOption(ch);\r\n            if (currentOption.hasArg() \u0026\u0026 (token.length() !\u003d (i + 1))) {\r\n                tokens.add(token.substring(i + 1));\r\n                break;\r\n            }\r\n        } else if (stopAtNonOption) {\r\n            process(token.substring(i));\r\n            break;\r\n        } else {\r\n            tokens.add(token);\r\n            break;\r\n        }\r\n    }\r\n}",
      "path": "src/java/org/apache/commons/cli/PosixParser.java",
      "functionStartLine": 282,
      "functionName": "burstToken",
      "functionAnnotation": "",
      "functionDoc": "\u003cp\u003eBreaks \u003ccode\u003etoken\u003c/code\u003e into its constituent parts\r\nusing the following algorithm.\r\n\u003cul\u003e\r\n \u003cli\u003eignore the first character (\"\u003cb\u003e-\u003c/b\u003e\")\u003c/li\u003e\r\n \u003cli\u003eforeach remaining character check if an {@link Option}\r\n exists with that id.\u003c/li\u003e\r\n \u003cli\u003eif an {@link Option} does exist then add that character\r\n prepended with \"\u003cb\u003e-\u003c/b\u003e\" to the list of processed tokens.\u003c/li\u003e\r\n \u003cli\u003eif the {@link Option} can have an argument value and there \r\n are remaining characters in the token then add the remaining \r\n characters as a token to the list of processed tokens.\u003c/li\u003e\r\n \u003cli\u003eif an {@link Option} does \u003cb\u003eNOT\u003c/b\u003e exist \u003cb\u003eAND\u003c/b\u003e \r\n \u003ccode\u003estopAtNonOption\u003c/code\u003e \u003cb\u003eIS\u003c/b\u003e set then add the special token\r\n \"\u003cb\u003e--\u003c/b\u003e\" followed by the remaining characters and also \r\n the remaining tokens directly to the processed tokens list.\u003c/li\u003e\r\n \u003cli\u003eif an {@link Option} does \u003cb\u003eNOT\u003c/b\u003e exist \u003cb\u003eAND\u003c/b\u003e\r\n \u003ccode\u003estopAtNonOption\u003c/code\u003e \u003cb\u003eIS NOT\u003c/b\u003e set then add that\r\n character prepended with \"\u003cb\u003e-\u003c/b\u003e\".\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003c/p\u003e\r\n\r\n@param token The current token to be \u003cb\u003eburst\u003c/b\u003e\r\n@param stopAtNonOption Specifies whether to stop processing\r\nat the first non-Option encountered.\r\n",
      "diff": "@@ -1,20 +1,19 @@\n protected void burstToken(String token, boolean stopAtNonOption) {\r\n-    int tokenLength \u003d token.length();\r\n-    for (int i \u003d 1; i \u003c tokenLength; i++) {\r\n+    for (int i \u003d 1; i \u003c token.length(); i++) {\r\n         String ch \u003d String.valueOf(token.charAt(i));\r\n-        boolean hasOption \u003d options.hasOption(ch);\r\n-        if (hasOption) {\r\n+        if (options.hasOption(ch)) {\r\n             tokens.add(\"-\" + ch);\r\n             currentOption \u003d options.getOption(ch);\r\n             if (currentOption.hasArg() \u0026\u0026 (token.length() !\u003d (i + 1))) {\r\n                 tokens.add(token.substring(i + 1));\r\n                 break;\r\n             }\r\n         } else if (stopAtNonOption) {\r\n             process(token.substring(i));\r\n+            break;\r\n         } else {\r\n             tokens.add(token);\r\n             break;\r\n         }\r\n     }\r\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "2ff9573ffb08dd52ec3a55a49f2d77a1e94efbdf": {
      "type": "Ybodychange",
      "commitMessage": "Applying test and fix patch from CLI-51. Thanks to Brian Egge. \n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/cli/branches/cli-1.0.x@540661 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "5/22/07 8:47 PM",
      "commitName": "2ff9573ffb08dd52ec3a55a49f2d77a1e94efbdf",
      "commitAuthor": "Henri Yandell",
      "commitDateOld": "2/26/05 2:53 PM",
      "commitNameOld": "e543edc2a488729baea94cc554631cec3fb62b74",
      "commitAuthorOld": "Dirk Verbeeck",
      "daysBetweenCommits": 815.2,
      "commitsBetweenForRepo": 96,
      "commitsBetweenForFile": 1,
      "actualSource": "protected void burstToken(String token, boolean stopAtNonOption) {\r\n    int tokenLength \u003d token.length();\r\n    for (int i \u003d 1; i \u003c tokenLength; i++) {\r\n        String ch \u003d String.valueOf(token.charAt(i));\r\n        boolean hasOption \u003d options.hasOption(ch);\r\n        if (hasOption) {\r\n            tokens.add(\"-\" + ch);\r\n            currentOption \u003d options.getOption(ch);\r\n            if (currentOption.hasArg() \u0026\u0026 (token.length() !\u003d (i + 1))) {\r\n                tokens.add(token.substring(i + 1));\r\n                break;\r\n            }\r\n        } else if (stopAtNonOption) {\r\n            process(token.substring(i));\r\n        } else {\r\n            tokens.add(token);\r\n            break;\r\n        }\r\n    }\r\n}",
      "path": "src/java/org/apache/commons/cli/PosixParser.java",
      "functionStartLine": 278,
      "functionName": "burstToken",
      "functionAnnotation": "",
      "functionDoc": "\u003cp\u003eBreaks \u003ccode\u003etoken\u003c/code\u003e into its constituent parts\r\nusing the following algorithm.\r\n\u003cul\u003e\r\n \u003cli\u003eignore the first character (\"\u003cb\u003e-\u003c/b\u003e\")\u003c/li\u003e\r\n \u003cli\u003eforeach remaining character check if an {@link Option}\r\n exists with that id.\u003c/li\u003e\r\n \u003cli\u003eif an {@link Option} does exist then add that character\r\n prepended with \"\u003cb\u003e-\u003c/b\u003e\" to the list of processed tokens.\u003c/li\u003e\r\n \u003cli\u003eif the {@link Option} can have an argument value and there \r\n are remaining characters in the token then add the remaining \r\n characters as a token to the list of processed tokens.\u003c/li\u003e\r\n \u003cli\u003eif an {@link Option} does \u003cb\u003eNOT\u003c/b\u003e exist \u003cb\u003eAND\u003c/b\u003e \r\n \u003ccode\u003estopAtNonOption\u003c/code\u003e \u003cb\u003eIS\u003c/b\u003e set then add the special token\r\n \"\u003cb\u003e--\u003c/b\u003e\" followed by the remaining characters and also \r\n the remaining tokens directly to the processed tokens list.\u003c/li\u003e\r\n \u003cli\u003eif an {@link Option} does \u003cb\u003eNOT\u003c/b\u003e exist \u003cb\u003eAND\u003c/b\u003e\r\n \u003ccode\u003estopAtNonOption\u003c/code\u003e \u003cb\u003eIS NOT\u003c/b\u003e set then add that\r\n character prepended with \"\u003cb\u003e-\u003c/b\u003e\".\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003c/p\u003e\r\n\r\n@param token The current token to be \u003cb\u003eburst\u003c/b\u003e\r\n@param stopAtNonOption Specifies whether to stop processing\r\nat the first non-Option encountered.\r\n",
      "diff": "@@ -1,19 +1,20 @@\n protected void burstToken(String token, boolean stopAtNonOption) {\r\n     int tokenLength \u003d token.length();\r\n     for (int i \u003d 1; i \u003c tokenLength; i++) {\r\n         String ch \u003d String.valueOf(token.charAt(i));\r\n         boolean hasOption \u003d options.hasOption(ch);\r\n         if (hasOption) {\r\n             tokens.add(\"-\" + ch);\r\n             currentOption \u003d options.getOption(ch);\r\n             if (currentOption.hasArg() \u0026\u0026 (token.length() !\u003d (i + 1))) {\r\n                 tokens.add(token.substring(i + 1));\r\n                 break;\r\n             }\r\n         } else if (stopAtNonOption) {\r\n             process(token.substring(i));\r\n         } else {\r\n-            tokens.add(\"-\" + ch);\r\n+            tokens.add(token);\r\n+            break;\r\n         }\r\n     }\r\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "9b2b8038b52be022e42c8c7fdf26e236888f94c5": {
      "type": "Ymultichange(Ybodychange,Ydocchange)",
      "commitMessage": "checkstyle fixes\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/cli/trunk@129857 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/10/02 1:47 AM",
      "commitName": "9b2b8038b52be022e42c8c7fdf26e236888f94c5",
      "commitAuthor": "John Keyes",
      "subchanges": [
        {
          "type": "Ybodychange",
          "commitMessage": "checkstyle fixes\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/cli/trunk@129857 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "12/10/02 1:47 AM",
          "commitName": "9b2b8038b52be022e42c8c7fdf26e236888f94c5",
          "commitAuthor": "John Keyes",
          "commitDateOld": "9/20/02 1:59 AM",
          "commitNameOld": "c08f73835beda155421d78ee4f96d9e11c501159",
          "commitAuthorOld": "John Keyes",
          "daysBetweenCommits": 81.03,
          "commitsBetweenForRepo": 35,
          "commitsBetweenForFile": 1,
          "actualSource": "protected void burstToken(String token, boolean stopAtNonOption) {\r\n    int tokenLength \u003d token.length();\r\n    for (int i \u003d 1; i \u003c tokenLength; i++) {\r\n        String ch \u003d String.valueOf(token.charAt(i));\r\n        boolean hasOption \u003d options.hasOption(ch);\r\n        if (hasOption) {\r\n            tokens.add(\"-\" + ch);\r\n            currentOption \u003d options.getOption(ch);\r\n            if (currentOption.hasArg() \u0026\u0026 (token.length() !\u003d (i + 1))) {\r\n                tokens.add(token.substring(i + 1));\r\n                break;\r\n            }\r\n        } else if (stopAtNonOption) {\r\n            process(token.substring(i));\r\n        } else {\r\n            tokens.add(\"-\" + ch);\r\n        }\r\n    }\r\n}",
          "path": "src/java/org/apache/commons/cli/PosixParser.java",
          "functionStartLine": 321,
          "functionName": "burstToken",
          "functionAnnotation": "",
          "functionDoc": "\u003cp\u003eBreaks \u003ccode\u003etoken\u003c/code\u003e into its constituent parts\r\nusing the following algorithm.\r\n\u003cul\u003e\r\n \u003cli\u003eignore the first character (\"\u003cb\u003e-\u003c/b\u003e\")\u003c/li\u003e\r\n \u003cli\u003eforeach remaining character check if an {@link Option}\r\n exists with that id.\u003c/li\u003e\r\n \u003cli\u003eif an {@link Option} does exist then add that character\r\n prepended with \"\u003cb\u003e-\u003c/b\u003e\" to the list of processed tokens.\u003c/li\u003e\r\n \u003cli\u003eif the {@link Option} can have an argument value and there \r\n are remaining characters in the token then add the remaining \r\n characters as a token to the list of processed tokens.\u003c/li\u003e\r\n \u003cli\u003eif an {@link Option} does \u003cb\u003eNOT\u003c/b\u003e exist \u003cb\u003eAND\u003c/b\u003e \r\n \u003ccode\u003estopAtNonOption\u003c/code\u003e \u003cb\u003eIS\u003c/b\u003e set then add the special token\r\n \"\u003cb\u003e--\u003c/b\u003e\" followed by the remaining characters and also \r\n the remaining tokens directly to the processed tokens list.\u003c/li\u003e\r\n \u003cli\u003eif an {@link Option} does \u003cb\u003eNOT\u003c/b\u003e exist \u003cb\u003eAND\u003c/b\u003e\r\n \u003ccode\u003estopAtNonOption\u003c/code\u003e \u003cb\u003eIS NOT\u003c/b\u003e set then add that\r\n character prepended with \"\u003cb\u003e-\u003c/b\u003e\".\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003c/p\u003e\r\n\r\n@param token The current token to be \u003cb\u003eburst\u003c/b\u003e\r\n@param stopAtNonOption Specifies whether to stop processing\r\nat the first non-Option encountered.\r\n",
          "diff": "@@ -1,19 +1,19 @@\n protected void burstToken(String token, boolean stopAtNonOption) {\r\n     int tokenLength \u003d token.length();\r\n     for (int i \u003d 1; i \u003c tokenLength; i++) {\r\n         String ch \u003d String.valueOf(token.charAt(i));\r\n         boolean hasOption \u003d options.hasOption(ch);\r\n         if (hasOption) {\r\n             tokens.add(\"-\" + ch);\r\n             currentOption \u003d options.getOption(ch);\r\n-            if (currentOption.hasArg() \u0026\u0026 token.length() !\u003d i + 1) {\r\n+            if (currentOption.hasArg() \u0026\u0026 (token.length() !\u003d (i + 1))) {\r\n                 tokens.add(token.substring(i + 1));\r\n                 break;\r\n             }\r\n         } else if (stopAtNonOption) {\r\n             process(token.substring(i));\r\n         } else {\r\n             tokens.add(\"-\" + ch);\r\n         }\r\n     }\r\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        },
        {
          "type": "Ydocchange",
          "commitMessage": "checkstyle fixes\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/cli/trunk@129857 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "12/10/02 1:47 AM",
          "commitName": "9b2b8038b52be022e42c8c7fdf26e236888f94c5",
          "commitAuthor": "John Keyes",
          "commitDateOld": "9/20/02 1:59 AM",
          "commitNameOld": "c08f73835beda155421d78ee4f96d9e11c501159",
          "commitAuthorOld": "John Keyes",
          "daysBetweenCommits": 81.03,
          "commitsBetweenForRepo": 35,
          "commitsBetweenForFile": 1,
          "actualSource": "protected void burstToken(String token, boolean stopAtNonOption) {\r\n    int tokenLength \u003d token.length();\r\n    for (int i \u003d 1; i \u003c tokenLength; i++) {\r\n        String ch \u003d String.valueOf(token.charAt(i));\r\n        boolean hasOption \u003d options.hasOption(ch);\r\n        if (hasOption) {\r\n            tokens.add(\"-\" + ch);\r\n            currentOption \u003d options.getOption(ch);\r\n            if (currentOption.hasArg() \u0026\u0026 (token.length() !\u003d (i + 1))) {\r\n                tokens.add(token.substring(i + 1));\r\n                break;\r\n            }\r\n        } else if (stopAtNonOption) {\r\n            process(token.substring(i));\r\n        } else {\r\n            tokens.add(\"-\" + ch);\r\n        }\r\n    }\r\n}",
          "path": "src/java/org/apache/commons/cli/PosixParser.java",
          "functionStartLine": 321,
          "functionName": "burstToken",
          "functionAnnotation": "",
          "functionDoc": "\u003cp\u003eBreaks \u003ccode\u003etoken\u003c/code\u003e into its constituent parts\r\nusing the following algorithm.\r\n\u003cul\u003e\r\n \u003cli\u003eignore the first character (\"\u003cb\u003e-\u003c/b\u003e\")\u003c/li\u003e\r\n \u003cli\u003eforeach remaining character check if an {@link Option}\r\n exists with that id.\u003c/li\u003e\r\n \u003cli\u003eif an {@link Option} does exist then add that character\r\n prepended with \"\u003cb\u003e-\u003c/b\u003e\" to the list of processed tokens.\u003c/li\u003e\r\n \u003cli\u003eif the {@link Option} can have an argument value and there \r\n are remaining characters in the token then add the remaining \r\n characters as a token to the list of processed tokens.\u003c/li\u003e\r\n \u003cli\u003eif an {@link Option} does \u003cb\u003eNOT\u003c/b\u003e exist \u003cb\u003eAND\u003c/b\u003e \r\n \u003ccode\u003estopAtNonOption\u003c/code\u003e \u003cb\u003eIS\u003c/b\u003e set then add the special token\r\n \"\u003cb\u003e--\u003c/b\u003e\" followed by the remaining characters and also \r\n the remaining tokens directly to the processed tokens list.\u003c/li\u003e\r\n \u003cli\u003eif an {@link Option} does \u003cb\u003eNOT\u003c/b\u003e exist \u003cb\u003eAND\u003c/b\u003e\r\n \u003ccode\u003estopAtNonOption\u003c/code\u003e \u003cb\u003eIS NOT\u003c/b\u003e set then add that\r\n character prepended with \"\u003cb\u003e-\u003c/b\u003e\".\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003c/p\u003e\r\n\r\n@param token The current token to be \u003cb\u003eburst\u003c/b\u003e\r\n@param stopAtNonOption Specifies whether to stop processing\r\nat the first non-Option encountered.\r\n",
          "diff": "@@ -1,19 +1,19 @@\n protected void burstToken(String token, boolean stopAtNonOption) {\r\n     int tokenLength \u003d token.length();\r\n     for (int i \u003d 1; i \u003c tokenLength; i++) {\r\n         String ch \u003d String.valueOf(token.charAt(i));\r\n         boolean hasOption \u003d options.hasOption(ch);\r\n         if (hasOption) {\r\n             tokens.add(\"-\" + ch);\r\n             currentOption \u003d options.getOption(ch);\r\n-            if (currentOption.hasArg() \u0026\u0026 token.length() !\u003d i + 1) {\r\n+            if (currentOption.hasArg() \u0026\u0026 (token.length() !\u003d (i + 1))) {\r\n                 tokens.add(token.substring(i + 1));\r\n                 break;\r\n             }\r\n         } else if (stopAtNonOption) {\r\n             process(token.substring(i));\r\n         } else {\r\n             tokens.add(\"-\" + ch);\r\n         }\r\n     }\r\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "\u003cp\u003eBreaks \u003ccode\u003etoken\u003c/code\u003e into its constituent parts\r\nusing the following algorithm.\r\n\u003cul\u003e\r\n \u003cli\u003eignore the first character (\"\u003cb\u003e-\u003c/b\u003e\" )\u003c/li\u003e\r\n \u003cli\u003eforeach remaining character check if an {@link Option}\r\n exists with that id.\u003c/li\u003e\r\n \u003cli\u003eif an {@link Option} does exist then add that character\r\n prepended with \"\u003cb\u003e-\u003c/b\u003e\" to the list of processed tokens.\u003c/li\u003e\r\n \u003cli\u003eif the {@link Option} can have an argument value and there \r\n are remaining characters in the token then add the remaining \r\n characters as a token to the list of processed tokens.\u003c/li\u003e\r\n \u003cli\u003eif an {@link Option} does \u003cb\u003eNOT\u003c/b\u003e exist \u003cb\u003eAND\u003c/b\u003e \r\n \u003ccode\u003estopAtNonOption\u003c/code\u003e \u003cb\u003eIS\u003c/b\u003e set then add the special token\r\n \"\u003cb\u003e--\u003c/b\u003e\" followed by the remaining characters and also \r\n the remaining tokens directly to the processed tokens list.\u003c/li\u003e\r\n \u003cli\u003eif an {@link Option} does \u003cb\u003eNOT\u003c/b\u003e exist \u003cb\u003eAND\u003c/b\u003e\r\n \u003ccode\u003estopAtNonOption\u003c/code\u003e \u003cb\u003eIS NOT\u003c/b\u003e set then add that\r\n character prepended with \"\u003cb\u003e-\u003c/b\u003e\".\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003c/p\u003e\r\n",
            "newValue": "\u003cp\u003eBreaks \u003ccode\u003etoken\u003c/code\u003e into its constituent parts\r\nusing the following algorithm.\r\n\u003cul\u003e\r\n \u003cli\u003eignore the first character (\"\u003cb\u003e-\u003c/b\u003e\")\u003c/li\u003e\r\n \u003cli\u003eforeach remaining character check if an {@link Option}\r\n exists with that id.\u003c/li\u003e\r\n \u003cli\u003eif an {@link Option} does exist then add that character\r\n prepended with \"\u003cb\u003e-\u003c/b\u003e\" to the list of processed tokens.\u003c/li\u003e\r\n \u003cli\u003eif the {@link Option} can have an argument value and there \r\n are remaining characters in the token then add the remaining \r\n characters as a token to the list of processed tokens.\u003c/li\u003e\r\n \u003cli\u003eif an {@link Option} does \u003cb\u003eNOT\u003c/b\u003e exist \u003cb\u003eAND\u003c/b\u003e \r\n \u003ccode\u003estopAtNonOption\u003c/code\u003e \u003cb\u003eIS\u003c/b\u003e set then add the special token\r\n \"\u003cb\u003e--\u003c/b\u003e\" followed by the remaining characters and also \r\n the remaining tokens directly to the processed tokens list.\u003c/li\u003e\r\n \u003cli\u003eif an {@link Option} does \u003cb\u003eNOT\u003c/b\u003e exist \u003cb\u003eAND\u003c/b\u003e\r\n \u003ccode\u003estopAtNonOption\u003c/code\u003e \u003cb\u003eIS NOT\u003c/b\u003e set then add that\r\n character prepended with \"\u003cb\u003e-\u003c/b\u003e\".\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003c/p\u003e\r\n\r\n@param token The current token to be \u003cb\u003eburst\u003c/b\u003e\r\n@param stopAtNonOption Specifies whether to stop processing\r\nat the first non-Option encountered.\r\n"
          }
        }
      ]
    },
    "745d1a535c9cf45d24455afc150b808981c8e0df": {
      "type": "Ymultichange(Yparameterchange,Ymodifierchange,Ybodychange,Ydocchange)",
      "commitMessage": "javadoc updates\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/cli/trunk@129805 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "8/26/02 11:15 PM",
      "commitName": "745d1a535c9cf45d24455afc150b808981c8e0df",
      "commitAuthor": "John Keyes",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "javadoc updates\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/cli/trunk@129805 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "8/26/02 11:15 PM",
          "commitName": "745d1a535c9cf45d24455afc150b808981c8e0df",
          "commitAuthor": "John Keyes",
          "commitDateOld": "8/25/02 1:15 AM",
          "commitNameOld": "dde69934d7f0bee13e4cd1fc99a7d60ce95a0c78",
          "commitAuthorOld": "John Keyes",
          "daysBetweenCommits": 1.92,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "protected void burstToken(String token, boolean stopAtNonOption) {\r\n    int tokenLength \u003d token.length();\r\n    for (int i \u003d 1; i \u003c tokenLength; i++) {\r\n        String ch \u003d String.valueOf(token.charAt(i));\r\n        boolean hasOption \u003d options.hasOption(ch);\r\n        if (hasOption) {\r\n            tokens.add(\"-\" + ch);\r\n            currentOption \u003d options.getOption(ch);\r\n            if (currentOption.hasArg() \u0026\u0026 token.length() !\u003d i + 1) {\r\n                tokens.add(token.substring(i + 1));\r\n                break;\r\n            }\r\n        } else if (stopAtNonOption) {\r\n            process(token.substring(i));\r\n        } else {\r\n            tokens.add(\"-\" + ch);\r\n        }\r\n    }\r\n}",
          "path": "src/java/org/apache/commons/cli/PosixParser.java",
          "functionStartLine": 284,
          "functionName": "burstToken",
          "functionAnnotation": "",
          "functionDoc": "\u003cp\u003eBreaks \u003ccode\u003etoken\u003c/code\u003e into its constituent parts\r\nusing the following algorithm.\r\n\u003cul\u003e\r\n \u003cli\u003eignore the first character (\"\u003cb\u003e-\u003c/b\u003e\" )\u003c/li\u003e\r\n \u003cli\u003eforeach remaining character check if an {@link Option}\r\n exists with that id.\u003c/li\u003e\r\n \u003cli\u003eif an {@link Option} does exist then add that character\r\n prepended with \"\u003cb\u003e-\u003c/b\u003e\" to the list of processed tokens.\u003c/li\u003e\r\n \u003cli\u003eif the {@link Option} can have an argument value and there \r\n are remaining characters in the token then add the remaining \r\n characters as a token to the list of processed tokens.\u003c/li\u003e\r\n \u003cli\u003eif an {@link Option} does \u003cb\u003eNOT\u003c/b\u003e exist \u003cb\u003eAND\u003c/b\u003e \r\n \u003ccode\u003estopAtNonOption\u003c/code\u003e \u003cb\u003eIS\u003c/b\u003e set then add the special token\r\n \"\u003cb\u003e--\u003c/b\u003e\" followed by the remaining characters and also \r\n the remaining tokens directly to the processed tokens list.\u003c/li\u003e\r\n \u003cli\u003eif an {@link Option} does \u003cb\u003eNOT\u003c/b\u003e exist \u003cb\u003eAND\u003c/b\u003e\r\n \u003ccode\u003estopAtNonOption\u003c/code\u003e \u003cb\u003eIS NOT\u003c/b\u003e set then add that\r\n character prepended with \"\u003cb\u003e-\u003c/b\u003e\".\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003c/p\u003e\r\n",
          "diff": "@@ -1,19 +1,19 @@\n-private void burstToken(String token, boolean stop) {\r\n+protected void burstToken(String token, boolean stopAtNonOption) {\r\n     int tokenLength \u003d token.length();\r\n     for (int i \u003d 1; i \u003c tokenLength; i++) {\r\n         String ch \u003d String.valueOf(token.charAt(i));\r\n         boolean hasOption \u003d options.hasOption(ch);\r\n         if (hasOption) {\r\n             tokens.add(\"-\" + ch);\r\n             currentOption \u003d options.getOption(ch);\r\n             if (currentOption.hasArg() \u0026\u0026 token.length() !\u003d i + 1) {\r\n                 tokens.add(token.substring(i + 1));\r\n                 break;\r\n             }\r\n-        } else if (stop) {\r\n+        } else if (stopAtNonOption) {\r\n             process(token.substring(i));\r\n         } else {\r\n             tokens.add(\"-\" + ch);\r\n         }\r\n     }\r\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[token-String, stop-boolean]",
            "newValue": "[token-String, stopAtNonOption-boolean]"
          }
        },
        {
          "type": "Ymodifierchange",
          "commitMessage": "javadoc updates\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/cli/trunk@129805 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "8/26/02 11:15 PM",
          "commitName": "745d1a535c9cf45d24455afc150b808981c8e0df",
          "commitAuthor": "John Keyes",
          "commitDateOld": "8/25/02 1:15 AM",
          "commitNameOld": "dde69934d7f0bee13e4cd1fc99a7d60ce95a0c78",
          "commitAuthorOld": "John Keyes",
          "daysBetweenCommits": 1.92,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "protected void burstToken(String token, boolean stopAtNonOption) {\r\n    int tokenLength \u003d token.length();\r\n    for (int i \u003d 1; i \u003c tokenLength; i++) {\r\n        String ch \u003d String.valueOf(token.charAt(i));\r\n        boolean hasOption \u003d options.hasOption(ch);\r\n        if (hasOption) {\r\n            tokens.add(\"-\" + ch);\r\n            currentOption \u003d options.getOption(ch);\r\n            if (currentOption.hasArg() \u0026\u0026 token.length() !\u003d i + 1) {\r\n                tokens.add(token.substring(i + 1));\r\n                break;\r\n            }\r\n        } else if (stopAtNonOption) {\r\n            process(token.substring(i));\r\n        } else {\r\n            tokens.add(\"-\" + ch);\r\n        }\r\n    }\r\n}",
          "path": "src/java/org/apache/commons/cli/PosixParser.java",
          "functionStartLine": 284,
          "functionName": "burstToken",
          "functionAnnotation": "",
          "functionDoc": "\u003cp\u003eBreaks \u003ccode\u003etoken\u003c/code\u003e into its constituent parts\r\nusing the following algorithm.\r\n\u003cul\u003e\r\n \u003cli\u003eignore the first character (\"\u003cb\u003e-\u003c/b\u003e\" )\u003c/li\u003e\r\n \u003cli\u003eforeach remaining character check if an {@link Option}\r\n exists with that id.\u003c/li\u003e\r\n \u003cli\u003eif an {@link Option} does exist then add that character\r\n prepended with \"\u003cb\u003e-\u003c/b\u003e\" to the list of processed tokens.\u003c/li\u003e\r\n \u003cli\u003eif the {@link Option} can have an argument value and there \r\n are remaining characters in the token then add the remaining \r\n characters as a token to the list of processed tokens.\u003c/li\u003e\r\n \u003cli\u003eif an {@link Option} does \u003cb\u003eNOT\u003c/b\u003e exist \u003cb\u003eAND\u003c/b\u003e \r\n \u003ccode\u003estopAtNonOption\u003c/code\u003e \u003cb\u003eIS\u003c/b\u003e set then add the special token\r\n \"\u003cb\u003e--\u003c/b\u003e\" followed by the remaining characters and also \r\n the remaining tokens directly to the processed tokens list.\u003c/li\u003e\r\n \u003cli\u003eif an {@link Option} does \u003cb\u003eNOT\u003c/b\u003e exist \u003cb\u003eAND\u003c/b\u003e\r\n \u003ccode\u003estopAtNonOption\u003c/code\u003e \u003cb\u003eIS NOT\u003c/b\u003e set then add that\r\n character prepended with \"\u003cb\u003e-\u003c/b\u003e\".\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003c/p\u003e\r\n",
          "diff": "@@ -1,19 +1,19 @@\n-private void burstToken(String token, boolean stop) {\r\n+protected void burstToken(String token, boolean stopAtNonOption) {\r\n     int tokenLength \u003d token.length();\r\n     for (int i \u003d 1; i \u003c tokenLength; i++) {\r\n         String ch \u003d String.valueOf(token.charAt(i));\r\n         boolean hasOption \u003d options.hasOption(ch);\r\n         if (hasOption) {\r\n             tokens.add(\"-\" + ch);\r\n             currentOption \u003d options.getOption(ch);\r\n             if (currentOption.hasArg() \u0026\u0026 token.length() !\u003d i + 1) {\r\n                 tokens.add(token.substring(i + 1));\r\n                 break;\r\n             }\r\n-        } else if (stop) {\r\n+        } else if (stopAtNonOption) {\r\n             process(token.substring(i));\r\n         } else {\r\n             tokens.add(\"-\" + ch);\r\n         }\r\n     }\r\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[private]",
            "newValue": "[protected]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "javadoc updates\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/cli/trunk@129805 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "8/26/02 11:15 PM",
          "commitName": "745d1a535c9cf45d24455afc150b808981c8e0df",
          "commitAuthor": "John Keyes",
          "commitDateOld": "8/25/02 1:15 AM",
          "commitNameOld": "dde69934d7f0bee13e4cd1fc99a7d60ce95a0c78",
          "commitAuthorOld": "John Keyes",
          "daysBetweenCommits": 1.92,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "protected void burstToken(String token, boolean stopAtNonOption) {\r\n    int tokenLength \u003d token.length();\r\n    for (int i \u003d 1; i \u003c tokenLength; i++) {\r\n        String ch \u003d String.valueOf(token.charAt(i));\r\n        boolean hasOption \u003d options.hasOption(ch);\r\n        if (hasOption) {\r\n            tokens.add(\"-\" + ch);\r\n            currentOption \u003d options.getOption(ch);\r\n            if (currentOption.hasArg() \u0026\u0026 token.length() !\u003d i + 1) {\r\n                tokens.add(token.substring(i + 1));\r\n                break;\r\n            }\r\n        } else if (stopAtNonOption) {\r\n            process(token.substring(i));\r\n        } else {\r\n            tokens.add(\"-\" + ch);\r\n        }\r\n    }\r\n}",
          "path": "src/java/org/apache/commons/cli/PosixParser.java",
          "functionStartLine": 284,
          "functionName": "burstToken",
          "functionAnnotation": "",
          "functionDoc": "\u003cp\u003eBreaks \u003ccode\u003etoken\u003c/code\u003e into its constituent parts\r\nusing the following algorithm.\r\n\u003cul\u003e\r\n \u003cli\u003eignore the first character (\"\u003cb\u003e-\u003c/b\u003e\" )\u003c/li\u003e\r\n \u003cli\u003eforeach remaining character check if an {@link Option}\r\n exists with that id.\u003c/li\u003e\r\n \u003cli\u003eif an {@link Option} does exist then add that character\r\n prepended with \"\u003cb\u003e-\u003c/b\u003e\" to the list of processed tokens.\u003c/li\u003e\r\n \u003cli\u003eif the {@link Option} can have an argument value and there \r\n are remaining characters in the token then add the remaining \r\n characters as a token to the list of processed tokens.\u003c/li\u003e\r\n \u003cli\u003eif an {@link Option} does \u003cb\u003eNOT\u003c/b\u003e exist \u003cb\u003eAND\u003c/b\u003e \r\n \u003ccode\u003estopAtNonOption\u003c/code\u003e \u003cb\u003eIS\u003c/b\u003e set then add the special token\r\n \"\u003cb\u003e--\u003c/b\u003e\" followed by the remaining characters and also \r\n the remaining tokens directly to the processed tokens list.\u003c/li\u003e\r\n \u003cli\u003eif an {@link Option} does \u003cb\u003eNOT\u003c/b\u003e exist \u003cb\u003eAND\u003c/b\u003e\r\n \u003ccode\u003estopAtNonOption\u003c/code\u003e \u003cb\u003eIS NOT\u003c/b\u003e set then add that\r\n character prepended with \"\u003cb\u003e-\u003c/b\u003e\".\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003c/p\u003e\r\n",
          "diff": "@@ -1,19 +1,19 @@\n-private void burstToken(String token, boolean stop) {\r\n+protected void burstToken(String token, boolean stopAtNonOption) {\r\n     int tokenLength \u003d token.length();\r\n     for (int i \u003d 1; i \u003c tokenLength; i++) {\r\n         String ch \u003d String.valueOf(token.charAt(i));\r\n         boolean hasOption \u003d options.hasOption(ch);\r\n         if (hasOption) {\r\n             tokens.add(\"-\" + ch);\r\n             currentOption \u003d options.getOption(ch);\r\n             if (currentOption.hasArg() \u0026\u0026 token.length() !\u003d i + 1) {\r\n                 tokens.add(token.substring(i + 1));\r\n                 break;\r\n             }\r\n-        } else if (stop) {\r\n+        } else if (stopAtNonOption) {\r\n             process(token.substring(i));\r\n         } else {\r\n             tokens.add(\"-\" + ch);\r\n         }\r\n     }\r\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        },
        {
          "type": "Ydocchange",
          "commitMessage": "javadoc updates\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/cli/trunk@129805 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "8/26/02 11:15 PM",
          "commitName": "745d1a535c9cf45d24455afc150b808981c8e0df",
          "commitAuthor": "John Keyes",
          "commitDateOld": "8/25/02 1:15 AM",
          "commitNameOld": "dde69934d7f0bee13e4cd1fc99a7d60ce95a0c78",
          "commitAuthorOld": "John Keyes",
          "daysBetweenCommits": 1.92,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "protected void burstToken(String token, boolean stopAtNonOption) {\r\n    int tokenLength \u003d token.length();\r\n    for (int i \u003d 1; i \u003c tokenLength; i++) {\r\n        String ch \u003d String.valueOf(token.charAt(i));\r\n        boolean hasOption \u003d options.hasOption(ch);\r\n        if (hasOption) {\r\n            tokens.add(\"-\" + ch);\r\n            currentOption \u003d options.getOption(ch);\r\n            if (currentOption.hasArg() \u0026\u0026 token.length() !\u003d i + 1) {\r\n                tokens.add(token.substring(i + 1));\r\n                break;\r\n            }\r\n        } else if (stopAtNonOption) {\r\n            process(token.substring(i));\r\n        } else {\r\n            tokens.add(\"-\" + ch);\r\n        }\r\n    }\r\n}",
          "path": "src/java/org/apache/commons/cli/PosixParser.java",
          "functionStartLine": 284,
          "functionName": "burstToken",
          "functionAnnotation": "",
          "functionDoc": "\u003cp\u003eBreaks \u003ccode\u003etoken\u003c/code\u003e into its constituent parts\r\nusing the following algorithm.\r\n\u003cul\u003e\r\n \u003cli\u003eignore the first character (\"\u003cb\u003e-\u003c/b\u003e\" )\u003c/li\u003e\r\n \u003cli\u003eforeach remaining character check if an {@link Option}\r\n exists with that id.\u003c/li\u003e\r\n \u003cli\u003eif an {@link Option} does exist then add that character\r\n prepended with \"\u003cb\u003e-\u003c/b\u003e\" to the list of processed tokens.\u003c/li\u003e\r\n \u003cli\u003eif the {@link Option} can have an argument value and there \r\n are remaining characters in the token then add the remaining \r\n characters as a token to the list of processed tokens.\u003c/li\u003e\r\n \u003cli\u003eif an {@link Option} does \u003cb\u003eNOT\u003c/b\u003e exist \u003cb\u003eAND\u003c/b\u003e \r\n \u003ccode\u003estopAtNonOption\u003c/code\u003e \u003cb\u003eIS\u003c/b\u003e set then add the special token\r\n \"\u003cb\u003e--\u003c/b\u003e\" followed by the remaining characters and also \r\n the remaining tokens directly to the processed tokens list.\u003c/li\u003e\r\n \u003cli\u003eif an {@link Option} does \u003cb\u003eNOT\u003c/b\u003e exist \u003cb\u003eAND\u003c/b\u003e\r\n \u003ccode\u003estopAtNonOption\u003c/code\u003e \u003cb\u003eIS NOT\u003c/b\u003e set then add that\r\n character prepended with \"\u003cb\u003e-\u003c/b\u003e\".\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003c/p\u003e\r\n",
          "diff": "@@ -1,19 +1,19 @@\n-private void burstToken(String token, boolean stop) {\r\n+protected void burstToken(String token, boolean stopAtNonOption) {\r\n     int tokenLength \u003d token.length();\r\n     for (int i \u003d 1; i \u003c tokenLength; i++) {\r\n         String ch \u003d String.valueOf(token.charAt(i));\r\n         boolean hasOption \u003d options.hasOption(ch);\r\n         if (hasOption) {\r\n             tokens.add(\"-\" + ch);\r\n             currentOption \u003d options.getOption(ch);\r\n             if (currentOption.hasArg() \u0026\u0026 token.length() !\u003d i + 1) {\r\n                 tokens.add(token.substring(i + 1));\r\n                 break;\r\n             }\r\n-        } else if (stop) {\r\n+        } else if (stopAtNonOption) {\r\n             process(token.substring(i));\r\n         } else {\r\n             tokens.add(\"-\" + ch);\r\n         }\r\n     }\r\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "",
            "newValue": "\u003cp\u003eBreaks \u003ccode\u003etoken\u003c/code\u003e into its constituent parts\r\nusing the following algorithm.\r\n\u003cul\u003e\r\n \u003cli\u003eignore the first character (\"\u003cb\u003e-\u003c/b\u003e\" )\u003c/li\u003e\r\n \u003cli\u003eforeach remaining character check if an {@link Option}\r\n exists with that id.\u003c/li\u003e\r\n \u003cli\u003eif an {@link Option} does exist then add that character\r\n prepended with \"\u003cb\u003e-\u003c/b\u003e\" to the list of processed tokens.\u003c/li\u003e\r\n \u003cli\u003eif the {@link Option} can have an argument value and there \r\n are remaining characters in the token then add the remaining \r\n characters as a token to the list of processed tokens.\u003c/li\u003e\r\n \u003cli\u003eif an {@link Option} does \u003cb\u003eNOT\u003c/b\u003e exist \u003cb\u003eAND\u003c/b\u003e \r\n \u003ccode\u003estopAtNonOption\u003c/code\u003e \u003cb\u003eIS\u003c/b\u003e set then add the special token\r\n \"\u003cb\u003e--\u003c/b\u003e\" followed by the remaining characters and also \r\n the remaining tokens directly to the processed tokens list.\u003c/li\u003e\r\n \u003cli\u003eif an {@link Option} does \u003cb\u003eNOT\u003c/b\u003e exist \u003cb\u003eAND\u003c/b\u003e\r\n \u003ccode\u003estopAtNonOption\u003c/code\u003e \u003cb\u003eIS NOT\u003c/b\u003e set then add that\r\n character prepended with \"\u003cb\u003e-\u003c/b\u003e\".\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003c/p\u003e\r\n"
          }
        }
      ]
    },
    "dde69934d7f0bee13e4cd1fc99a7d60ce95a0c78": {
      "type": "Yintroduced",
      "commitMessage": "separated the argument flattening from the Option processing\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/cli/trunk@129804 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "8/25/02 1:15 AM",
      "commitName": "dde69934d7f0bee13e4cd1fc99a7d60ce95a0c78",
      "commitAuthor": "John Keyes",
      "diff": "@@ -0,0 +1,19 @@\n+private void burstToken(String token, boolean stop) {\r\n+    int tokenLength \u003d token.length();\r\n+    for (int i \u003d 1; i \u003c tokenLength; i++) {\r\n+        String ch \u003d String.valueOf(token.charAt(i));\r\n+        boolean hasOption \u003d options.hasOption(ch);\r\n+        if (hasOption) {\r\n+            tokens.add(\"-\" + ch);\r\n+            currentOption \u003d options.getOption(ch);\r\n+            if (currentOption.hasArg() \u0026\u0026 token.length() !\u003d i + 1) {\r\n+                tokens.add(token.substring(i + 1));\r\n+                break;\r\n+            }\r\n+        } else if (stop) {\r\n+            process(token.substring(i));\r\n+        } else {\r\n+            tokens.add(\"-\" + ch);\r\n+        }\r\n+    }\r\n+}\n\\ No newline at end of file\n",
      "actualSource": "private void burstToken(String token, boolean stop) {\r\n    int tokenLength \u003d token.length();\r\n    for (int i \u003d 1; i \u003c tokenLength; i++) {\r\n        String ch \u003d String.valueOf(token.charAt(i));\r\n        boolean hasOption \u003d options.hasOption(ch);\r\n        if (hasOption) {\r\n            tokens.add(\"-\" + ch);\r\n            currentOption \u003d options.getOption(ch);\r\n            if (currentOption.hasArg() \u0026\u0026 token.length() !\u003d i + 1) {\r\n                tokens.add(token.substring(i + 1));\r\n                break;\r\n            }\r\n        } else if (stop) {\r\n            process(token.substring(i));\r\n        } else {\r\n            tokens.add(\"-\" + ch);\r\n        }\r\n    }\r\n}",
      "path": "src/java/org/apache/commons/cli/PosixParser.java",
      "functionStartLine": 114,
      "functionName": "burstToken",
      "functionAnnotation": "",
      "functionDoc": ""
    }
  }
}