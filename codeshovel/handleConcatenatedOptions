{
  "origin": "codeshovel",
  "repositoryName": "commons-cli",
  "repositoryPath": "D:/_SELEN/_2022-2023/CS588/GitHub_Dataset/commons-cli/commons-cli/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "DefaultParser.java",
  "functionName": "handleConcatenatedOptions",
  "functionId": "handleConcatenatedOptions___token-String(modifiers-final)",
  "sourceFilePath": "src/main/java/org/apache/commons/cli/DefaultParser.java",
  "functionAnnotation": "",
  "functionDoc": "Breaks {@code token} into its constituent parts using the following algorithm.\r\n\r\n\u003cul\u003e\r\n\u003cli\u003eignore the first character (\"\u003cb\u003e-\u003c/b\u003e\")\u003c/li\u003e\r\n\u003cli\u003efor each remaining character check if an {@link Option} exists with that id.\u003c/li\u003e\r\n\u003cli\u003eif an {@link Option} does exist then add that character prepended with \"\u003cb\u003e-\u003c/b\u003e\" to the list of processed\r\ntokens.\u003c/li\u003e\r\n\u003cli\u003eif the {@link Option} can have an argument value and there are remaining characters in the token then add the\r\nremaining characters as a token to the list of processed tokens.\u003c/li\u003e\r\n\u003cli\u003eif an {@link Option} does \u003cb\u003eNOT\u003c/b\u003e exist \u003cb\u003eAND\u003c/b\u003e {@code stopAtNonOption} \u003cb\u003eIS\u003c/b\u003e set then add the\r\nspecial token \"\u003cb\u003e--\u003c/b\u003e\" followed by the remaining characters and also the remaining tokens directly to the\r\nprocessed tokens list.\u003c/li\u003e\r\n\u003cli\u003eif an {@link Option} does \u003cb\u003eNOT\u003c/b\u003e exist \u003cb\u003eAND\u003c/b\u003e {@code stopAtNonOption} \u003cb\u003eIS NOT\u003c/b\u003e set then add\r\nthat character prepended with \"\u003cb\u003e-\u003c/b\u003e\".\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\r\n@param token The current token to be \u003cb\u003eburst\u003c/b\u003e at the first non-Option encountered.\r\n@throws ParseException if there are any problems encountered while parsing the command line token.\r\n",
  "functionStartLine": 307,
  "functionEndLine": 323,
  "numCommitsSeen": 47,
  "timeTaken": 240,
  "changeHistory": [
    "44173949e8165537b201d4efd024e31e6e8b06eb",
    "9539506e87648d753c44b68b3dfbdd1938c09315",
    "bc0edc47dbf47cdaa3485cfb724982f377c900df",
    "98d06d37bc7058bbfb2704c9620669c66e279f4a",
    "5fb9e5009a8cdc7366b7a762f0e43dc47decf67c",
    "357a8b0b8f1090db29e0d541a9419f570a78457b",
    "0f56df924fabac851a111a04569f4a3d7331ef8e",
    "10090594827c3c90b9c0a5c8288cda448b0ce10c",
    "6b87d290954c4594fc69a3a0b85fff12490cfde5",
    "5b098dec44567a760c220c1e0cd6bee29262c2c4",
    "1596f3bbe57986361da4ac1a23634dd5b00d10df",
    "f43698527ef2b5ba15fe85d46d2d505418f68243"
  ],
  "changeHistoryShort": {
    "44173949e8165537b201d4efd024e31e6e8b06eb": "Ybodychange",
    "9539506e87648d753c44b68b3dfbdd1938c09315": "Ydocchange",
    "bc0edc47dbf47cdaa3485cfb724982f377c900df": "Ymultichange(Ydocchange,Yformatchange)",
    "98d06d37bc7058bbfb2704c9620669c66e279f4a": "Ybodychange",
    "5fb9e5009a8cdc7366b7a762f0e43dc47decf67c": "Yparametermetachange",
    "357a8b0b8f1090db29e0d541a9419f570a78457b": "Ybodychange",
    "0f56df924fabac851a111a04569f4a3d7331ef8e": "Ydocchange",
    "10090594827c3c90b9c0a5c8288cda448b0ce10c": "Ydocchange",
    "6b87d290954c4594fc69a3a0b85fff12490cfde5": "Ybodychange",
    "5b098dec44567a760c220c1e0cd6bee29262c2c4": "Yformatchange",
    "1596f3bbe57986361da4ac1a23634dd5b00d10df": "Yfilerename",
    "f43698527ef2b5ba15fe85d46d2d505418f68243": "Yintroduced"
  },
  "changeHistoryDetails": {
    "44173949e8165537b201d4efd024e31e6e8b06eb": {
      "type": "Ybodychange",
      "commitMessage": "CLI-254: \"test\" gets parsed as test, quotes die :-( (#58)\n\n* CLI-254 \"test\" gets parsed as test, quotes die :-(\r\n\r\n* address review comments, improve backwards compatibility",
      "commitDate": "10/17/21 5:37 PM",
      "commitName": "44173949e8165537b201d4efd024e31e6e8b06eb",
      "commitAuthor": "Istvan Toth",
      "commitDateOld": "10/4/21 12:41 AM",
      "commitNameOld": "cbb7227c1f19e9b72e9ab65230d3fce570bf9f8b",
      "commitAuthorOld": "Gary Gregory",
      "daysBetweenCommits": 13.71,
      "commitsBetweenForRepo": 36,
      "commitsBetweenForFile": 1,
      "actualSource": "protected void handleConcatenatedOptions(final String token) throws ParseException {\r\n    for (int i \u003d 1; i \u003c token.length(); i++) {\r\n        final String ch \u003d String.valueOf(token.charAt(i));\r\n        if (!options.hasOption(ch)) {\r\n            handleUnknownToken(stopAtNonOption \u0026\u0026 i \u003e 1 ? token.substring(i) : token);\r\n            break;\r\n        }\r\n        handleOption(options.getOption(ch));\r\n        if (currentOption !\u003d null \u0026\u0026 token.length() !\u003d i + 1) {\r\n            currentOption.addValueForProcessing(stripLeadingAndTrailingQuotesDefaultOff(token.substring(i + 1)));\r\n            break;\r\n        }\r\n    }\r\n}",
      "path": "src/main/java/org/apache/commons/cli/DefaultParser.java",
      "functionStartLine": 206,
      "functionName": "handleConcatenatedOptions",
      "functionAnnotation": "",
      "functionDoc": "Breaks {@code token} into its constituent parts using the following algorithm.\r\n\r\n\u003cul\u003e\r\n\u003cli\u003eignore the first character (\"\u003cb\u003e-\u003c/b\u003e\")\u003c/li\u003e\r\n\u003cli\u003efor each remaining character check if an {@link Option} exists with that id.\u003c/li\u003e\r\n\u003cli\u003eif an {@link Option} does exist then add that character prepended with \"\u003cb\u003e-\u003c/b\u003e\" to the list of processed\r\ntokens.\u003c/li\u003e\r\n\u003cli\u003eif the {@link Option} can have an argument value and there are remaining characters in the token then add the\r\nremaining characters as a token to the list of processed tokens.\u003c/li\u003e\r\n\u003cli\u003eif an {@link Option} does \u003cb\u003eNOT\u003c/b\u003e exist \u003cb\u003eAND\u003c/b\u003e {@code stopAtNonOption} \u003cb\u003eIS\u003c/b\u003e set then add the\r\nspecial token \"\u003cb\u003e--\u003c/b\u003e\" followed by the remaining characters and also the remaining tokens directly to the\r\nprocessed tokens list.\u003c/li\u003e\r\n\u003cli\u003eif an {@link Option} does \u003cb\u003eNOT\u003c/b\u003e exist \u003cb\u003eAND\u003c/b\u003e {@code stopAtNonOption} \u003cb\u003eIS NOT\u003c/b\u003e set then add\r\nthat character prepended with \"\u003cb\u003e-\u003c/b\u003e\".\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\r\n@param token The current token to be \u003cb\u003eburst\u003c/b\u003e at the first non-Option encountered.\r\n@throws ParseException if there are any problems encountered while parsing the command line token.\r\n",
      "diff": "@@ -1,14 +1,14 @@\n protected void handleConcatenatedOptions(final String token) throws ParseException {\r\n     for (int i \u003d 1; i \u003c token.length(); i++) {\r\n         final String ch \u003d String.valueOf(token.charAt(i));\r\n         if (!options.hasOption(ch)) {\r\n             handleUnknownToken(stopAtNonOption \u0026\u0026 i \u003e 1 ? token.substring(i) : token);\r\n             break;\r\n         }\r\n         handleOption(options.getOption(ch));\r\n         if (currentOption !\u003d null \u0026\u0026 token.length() !\u003d i + 1) {\r\n-            currentOption.addValueForProcessing(token.substring(i + 1));\r\n+            currentOption.addValueForProcessing(stripLeadingAndTrailingQuotesDefaultOff(token.substring(i + 1)));\r\n             break;\r\n         }\r\n     }\r\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "9539506e87648d753c44b68b3dfbdd1938c09315": {
      "type": "Ydocchange",
      "commitMessage": "Javadoc: Use @code instead of HTML tags.\n",
      "commitDate": "10/4/21 12:32 AM",
      "commitName": "9539506e87648d753c44b68b3dfbdd1938c09315",
      "commitAuthor": "Gary Gregory",
      "commitDateOld": "10/3/21 2:32 AM",
      "commitNameOld": "b805e90dd082b4549ef4d565d13c6db8fdb96a5e",
      "commitAuthorOld": "Gary Gregory",
      "daysBetweenCommits": 0.92,
      "commitsBetweenForRepo": 5,
      "commitsBetweenForFile": 1,
      "actualSource": "protected void handleConcatenatedOptions(final String token) throws ParseException {\r\n    for (int i \u003d 1; i \u003c token.length(); i++) {\r\n        final String ch \u003d String.valueOf(token.charAt(i));\r\n        if (!options.hasOption(ch)) {\r\n            handleUnknownToken(stopAtNonOption \u0026\u0026 i \u003e 1 ? token.substring(i) : token);\r\n            break;\r\n        }\r\n        handleOption(options.getOption(ch));\r\n        if (currentOption !\u003d null \u0026\u0026 token.length() !\u003d i + 1) {\r\n            currentOption.addValueForProcessing(token.substring(i + 1));\r\n            break;\r\n        }\r\n    }\r\n}",
      "path": "src/main/java/org/apache/commons/cli/DefaultParser.java",
      "functionStartLine": 187,
      "functionName": "handleConcatenatedOptions",
      "functionAnnotation": "",
      "functionDoc": "Breaks {@code token} into its constituent parts using the following algorithm.\r\n\r\n\u003cul\u003e\r\n\u003cli\u003eignore the first character (\"\u003cb\u003e-\u003c/b\u003e\")\u003c/li\u003e\r\n\u003cli\u003efor each remaining character check if an {@link Option} exists with that id.\u003c/li\u003e\r\n\u003cli\u003eif an {@link Option} does exist then add that character prepended with \"\u003cb\u003e-\u003c/b\u003e\" to the list of processed\r\ntokens.\u003c/li\u003e\r\n\u003cli\u003eif the {@link Option} can have an argument value and there are remaining characters in the token then add the\r\nremaining characters as a token to the list of processed tokens.\u003c/li\u003e\r\n\u003cli\u003eif an {@link Option} does \u003cb\u003eNOT\u003c/b\u003e exist \u003cb\u003eAND\u003c/b\u003e {@code stopAtNonOption} \u003cb\u003eIS\u003c/b\u003e set then add the\r\nspecial token \"\u003cb\u003e--\u003c/b\u003e\" followed by the remaining characters and also the remaining tokens directly to the\r\nprocessed tokens list.\u003c/li\u003e\r\n\u003cli\u003eif an {@link Option} does \u003cb\u003eNOT\u003c/b\u003e exist \u003cb\u003eAND\u003c/b\u003e {@code stopAtNonOption} \u003cb\u003eIS NOT\u003c/b\u003e set then add\r\nthat character prepended with \"\u003cb\u003e-\u003c/b\u003e\".\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\r\n@param token The current token to be \u003cb\u003eburst\u003c/b\u003e at the first non-Option encountered.\r\n@throws ParseException if there are any problems encountered while parsing the command line token.\r\n",
      "diff": "",
      "extendedDetails": {
        "oldValue": "Breaks \u003ccode\u003etoken\u003c/code\u003e into its constituent parts using the following algorithm.\r\n\r\n\u003cul\u003e\r\n\u003cli\u003eignore the first character (\"\u003cb\u003e-\u003c/b\u003e\")\u003c/li\u003e\r\n\u003cli\u003efor each remaining character check if an {@link Option} exists with that id.\u003c/li\u003e\r\n\u003cli\u003eif an {@link Option} does exist then add that character prepended with \"\u003cb\u003e-\u003c/b\u003e\" to the list of processed\r\ntokens.\u003c/li\u003e\r\n\u003cli\u003eif the {@link Option} can have an argument value and there are remaining characters in the token then add the\r\nremaining characters as a token to the list of processed tokens.\u003c/li\u003e\r\n\u003cli\u003eif an {@link Option} does \u003cb\u003eNOT\u003c/b\u003e exist \u003cb\u003eAND\u003c/b\u003e \u003ccode\u003estopAtNonOption\u003c/code\u003e \u003cb\u003eIS\u003c/b\u003e set then add the\r\nspecial token \"\u003cb\u003e--\u003c/b\u003e\" followed by the remaining characters and also the remaining tokens directly to the\r\nprocessed tokens list.\u003c/li\u003e\r\n\u003cli\u003eif an {@link Option} does \u003cb\u003eNOT\u003c/b\u003e exist \u003cb\u003eAND\u003c/b\u003e \u003ccode\u003estopAtNonOption\u003c/code\u003e \u003cb\u003eIS NOT\u003c/b\u003e set then add\r\nthat character prepended with \"\u003cb\u003e-\u003c/b\u003e\".\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\r\n@param token The current token to be \u003cb\u003eburst\u003c/b\u003e at the first non-Option encountered.\r\n@throws ParseException if there are any problems encountered while parsing the command line token.\r\n",
        "newValue": "Breaks {@code token} into its constituent parts using the following algorithm.\r\n\r\n\u003cul\u003e\r\n\u003cli\u003eignore the first character (\"\u003cb\u003e-\u003c/b\u003e\")\u003c/li\u003e\r\n\u003cli\u003efor each remaining character check if an {@link Option} exists with that id.\u003c/li\u003e\r\n\u003cli\u003eif an {@link Option} does exist then add that character prepended with \"\u003cb\u003e-\u003c/b\u003e\" to the list of processed\r\ntokens.\u003c/li\u003e\r\n\u003cli\u003eif the {@link Option} can have an argument value and there are remaining characters in the token then add the\r\nremaining characters as a token to the list of processed tokens.\u003c/li\u003e\r\n\u003cli\u003eif an {@link Option} does \u003cb\u003eNOT\u003c/b\u003e exist \u003cb\u003eAND\u003c/b\u003e {@code stopAtNonOption} \u003cb\u003eIS\u003c/b\u003e set then add the\r\nspecial token \"\u003cb\u003e--\u003c/b\u003e\" followed by the remaining characters and also the remaining tokens directly to the\r\nprocessed tokens list.\u003c/li\u003e\r\n\u003cli\u003eif an {@link Option} does \u003cb\u003eNOT\u003c/b\u003e exist \u003cb\u003eAND\u003c/b\u003e {@code stopAtNonOption} \u003cb\u003eIS NOT\u003c/b\u003e set then add\r\nthat character prepended with \"\u003cb\u003e-\u003c/b\u003e\".\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\r\n@param token The current token to be \u003cb\u003eburst\u003c/b\u003e at the first non-Option encountered.\r\n@throws ParseException if there are any problems encountered while parsing the command line token.\r\n"
      }
    },
    "bc0edc47dbf47cdaa3485cfb724982f377c900df": {
      "type": "Ymultichange(Ydocchange,Yformatchange)",
      "commitMessage": "Clean ups.\n\n- maven-checkstyle-plugin 3.1.1 -\u003e 3.1.2.\n- checkstyle -\u003e 9.0\n- Updates for 21st century.\n- No need to nest else clause.\n- Use simple array declarations.\n- Use valueOf instead of new for Numbers.\n- Consistent formatting.\n- Remove some inline comments //-----...\n",
      "commitDate": "10/2/21 11:04 PM",
      "commitName": "bc0edc47dbf47cdaa3485cfb724982f377c900df",
      "commitAuthor": "Gary Gregory",
      "subchanges": [
        {
          "type": "Ydocchange",
          "commitMessage": "Clean ups.\n\n- maven-checkstyle-plugin 3.1.1 -\u003e 3.1.2.\n- checkstyle -\u003e 9.0\n- Updates for 21st century.\n- No need to nest else clause.\n- Use simple array declarations.\n- Use valueOf instead of new for Numbers.\n- Consistent formatting.\n- Remove some inline comments //-----...\n",
          "commitDate": "10/2/21 11:04 PM",
          "commitName": "bc0edc47dbf47cdaa3485cfb724982f377c900df",
          "commitAuthor": "Gary Gregory",
          "commitDateOld": "7/29/21 10:49 PM",
          "commitNameOld": "81cf67387da844052aaa4c6feb4c8b290308e0eb",
          "commitAuthorOld": "Gary Gregory",
          "daysBetweenCommits": 65.01,
          "commitsBetweenForRepo": 12,
          "commitsBetweenForFile": 1,
          "actualSource": "protected void handleConcatenatedOptions(final String token) throws ParseException {\r\n    for (int i \u003d 1; i \u003c token.length(); i++) {\r\n        final String ch \u003d String.valueOf(token.charAt(i));\r\n        if (!options.hasOption(ch)) {\r\n            handleUnknownToken(stopAtNonOption \u0026\u0026 i \u003e 1 ? token.substring(i) : token);\r\n            break;\r\n        }\r\n        handleOption(options.getOption(ch));\r\n        if (currentOption !\u003d null \u0026\u0026 token.length() !\u003d i + 1) {\r\n            currentOption.addValueForProcessing(token.substring(i + 1));\r\n            break;\r\n        }\r\n    }\r\n}",
          "path": "src/main/java/org/apache/commons/cli/DefaultParser.java",
          "functionStartLine": 611,
          "functionName": "handleConcatenatedOptions",
          "functionAnnotation": "",
          "functionDoc": "Breaks \u003ccode\u003etoken\u003c/code\u003e into its constituent parts using the following algorithm.\r\n\r\n\u003cul\u003e\r\n\u003cli\u003eignore the first character (\"\u003cb\u003e-\u003c/b\u003e\")\u003c/li\u003e\r\n\u003cli\u003efor each remaining character check if an {@link Option} exists with that id.\u003c/li\u003e\r\n\u003cli\u003eif an {@link Option} does exist then add that character prepended with \"\u003cb\u003e-\u003c/b\u003e\" to the list of processed\r\ntokens.\u003c/li\u003e\r\n\u003cli\u003eif the {@link Option} can have an argument value and there are remaining characters in the token then add the\r\nremaining characters as a token to the list of processed tokens.\u003c/li\u003e\r\n\u003cli\u003eif an {@link Option} does \u003cb\u003eNOT\u003c/b\u003e exist \u003cb\u003eAND\u003c/b\u003e \u003ccode\u003estopAtNonOption\u003c/code\u003e \u003cb\u003eIS\u003c/b\u003e set then add the\r\nspecial token \"\u003cb\u003e--\u003c/b\u003e\" followed by the remaining characters and also the remaining tokens directly to the\r\nprocessed tokens list.\u003c/li\u003e\r\n\u003cli\u003eif an {@link Option} does \u003cb\u003eNOT\u003c/b\u003e exist \u003cb\u003eAND\u003c/b\u003e \u003ccode\u003estopAtNonOption\u003c/code\u003e \u003cb\u003eIS NOT\u003c/b\u003e set then add\r\nthat character prepended with \"\u003cb\u003e-\u003c/b\u003e\".\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\r\n@param token The current token to be \u003cb\u003eburst\u003c/b\u003e at the first non-Option encountered.\r\n@throws ParseException if there are any problems encountered while parsing the command line token.\r\n",
          "diff": "",
          "extendedDetails": {
            "oldValue": "Breaks \u003ccode\u003etoken\u003c/code\u003e into its constituent parts\r\nusing the following algorithm.\r\n\r\n\u003cul\u003e\r\n \u003cli\u003eignore the first character (\"\u003cb\u003e-\u003c/b\u003e\")\u003c/li\u003e\r\n \u003cli\u003efor each remaining character check if an {@link Option}\r\n exists with that id.\u003c/li\u003e\r\n \u003cli\u003eif an {@link Option} does exist then add that character\r\n prepended with \"\u003cb\u003e-\u003c/b\u003e\" to the list of processed tokens.\u003c/li\u003e\r\n \u003cli\u003eif the {@link Option} can have an argument value and there\r\n are remaining characters in the token then add the remaining\r\n characters as a token to the list of processed tokens.\u003c/li\u003e\r\n \u003cli\u003eif an {@link Option} does \u003cb\u003eNOT\u003c/b\u003e exist \u003cb\u003eAND\u003c/b\u003e\r\n \u003ccode\u003estopAtNonOption\u003c/code\u003e \u003cb\u003eIS\u003c/b\u003e set then add the special token\r\n \"\u003cb\u003e--\u003c/b\u003e\" followed by the remaining characters and also\r\n the remaining tokens directly to the processed tokens list.\u003c/li\u003e\r\n \u003cli\u003eif an {@link Option} does \u003cb\u003eNOT\u003c/b\u003e exist \u003cb\u003eAND\u003c/b\u003e\r\n \u003ccode\u003estopAtNonOption\u003c/code\u003e \u003cb\u003eIS NOT\u003c/b\u003e set then add that\r\n character prepended with \"\u003cb\u003e-\u003c/b\u003e\".\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\r\n@param token The current token to be \u003cb\u003eburst\u003c/b\u003e\r\nat the first non-Option encountered.\r\n@throws ParseException if there are any problems encountered\r\n                       while parsing the command line token.\r\n",
            "newValue": "Breaks \u003ccode\u003etoken\u003c/code\u003e into its constituent parts using the following algorithm.\r\n\r\n\u003cul\u003e\r\n\u003cli\u003eignore the first character (\"\u003cb\u003e-\u003c/b\u003e\")\u003c/li\u003e\r\n\u003cli\u003efor each remaining character check if an {@link Option} exists with that id.\u003c/li\u003e\r\n\u003cli\u003eif an {@link Option} does exist then add that character prepended with \"\u003cb\u003e-\u003c/b\u003e\" to the list of processed\r\ntokens.\u003c/li\u003e\r\n\u003cli\u003eif the {@link Option} can have an argument value and there are remaining characters in the token then add the\r\nremaining characters as a token to the list of processed tokens.\u003c/li\u003e\r\n\u003cli\u003eif an {@link Option} does \u003cb\u003eNOT\u003c/b\u003e exist \u003cb\u003eAND\u003c/b\u003e \u003ccode\u003estopAtNonOption\u003c/code\u003e \u003cb\u003eIS\u003c/b\u003e set then add the\r\nspecial token \"\u003cb\u003e--\u003c/b\u003e\" followed by the remaining characters and also the remaining tokens directly to the\r\nprocessed tokens list.\u003c/li\u003e\r\n\u003cli\u003eif an {@link Option} does \u003cb\u003eNOT\u003c/b\u003e exist \u003cb\u003eAND\u003c/b\u003e \u003ccode\u003estopAtNonOption\u003c/code\u003e \u003cb\u003eIS NOT\u003c/b\u003e set then add\r\nthat character prepended with \"\u003cb\u003e-\u003c/b\u003e\".\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\r\n@param token The current token to be \u003cb\u003eburst\u003c/b\u003e at the first non-Option encountered.\r\n@throws ParseException if there are any problems encountered while parsing the command line token.\r\n"
          }
        },
        {
          "type": "Yformatchange",
          "commitMessage": "Clean ups.\n\n- maven-checkstyle-plugin 3.1.1 -\u003e 3.1.2.\n- checkstyle -\u003e 9.0\n- Updates for 21st century.\n- No need to nest else clause.\n- Use simple array declarations.\n- Use valueOf instead of new for Numbers.\n- Consistent formatting.\n- Remove some inline comments //-----...\n",
          "commitDate": "10/2/21 11:04 PM",
          "commitName": "bc0edc47dbf47cdaa3485cfb724982f377c900df",
          "commitAuthor": "Gary Gregory",
          "commitDateOld": "7/29/21 10:49 PM",
          "commitNameOld": "81cf67387da844052aaa4c6feb4c8b290308e0eb",
          "commitAuthorOld": "Gary Gregory",
          "daysBetweenCommits": 65.01,
          "commitsBetweenForRepo": 12,
          "commitsBetweenForFile": 1,
          "actualSource": "protected void handleConcatenatedOptions(final String token) throws ParseException {\r\n    for (int i \u003d 1; i \u003c token.length(); i++) {\r\n        final String ch \u003d String.valueOf(token.charAt(i));\r\n        if (!options.hasOption(ch)) {\r\n            handleUnknownToken(stopAtNonOption \u0026\u0026 i \u003e 1 ? token.substring(i) : token);\r\n            break;\r\n        }\r\n        handleOption(options.getOption(ch));\r\n        if (currentOption !\u003d null \u0026\u0026 token.length() !\u003d i + 1) {\r\n            currentOption.addValueForProcessing(token.substring(i + 1));\r\n            break;\r\n        }\r\n    }\r\n}",
          "path": "src/main/java/org/apache/commons/cli/DefaultParser.java",
          "functionStartLine": 611,
          "functionName": "handleConcatenatedOptions",
          "functionAnnotation": "",
          "functionDoc": "Breaks \u003ccode\u003etoken\u003c/code\u003e into its constituent parts using the following algorithm.\r\n\r\n\u003cul\u003e\r\n\u003cli\u003eignore the first character (\"\u003cb\u003e-\u003c/b\u003e\")\u003c/li\u003e\r\n\u003cli\u003efor each remaining character check if an {@link Option} exists with that id.\u003c/li\u003e\r\n\u003cli\u003eif an {@link Option} does exist then add that character prepended with \"\u003cb\u003e-\u003c/b\u003e\" to the list of processed\r\ntokens.\u003c/li\u003e\r\n\u003cli\u003eif the {@link Option} can have an argument value and there are remaining characters in the token then add the\r\nremaining characters as a token to the list of processed tokens.\u003c/li\u003e\r\n\u003cli\u003eif an {@link Option} does \u003cb\u003eNOT\u003c/b\u003e exist \u003cb\u003eAND\u003c/b\u003e \u003ccode\u003estopAtNonOption\u003c/code\u003e \u003cb\u003eIS\u003c/b\u003e set then add the\r\nspecial token \"\u003cb\u003e--\u003c/b\u003e\" followed by the remaining characters and also the remaining tokens directly to the\r\nprocessed tokens list.\u003c/li\u003e\r\n\u003cli\u003eif an {@link Option} does \u003cb\u003eNOT\u003c/b\u003e exist \u003cb\u003eAND\u003c/b\u003e \u003ccode\u003estopAtNonOption\u003c/code\u003e \u003cb\u003eIS NOT\u003c/b\u003e set then add\r\nthat character prepended with \"\u003cb\u003e-\u003c/b\u003e\".\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\r\n@param token The current token to be \u003cb\u003eburst\u003c/b\u003e at the first non-Option encountered.\r\n@throws ParseException if there are any problems encountered while parsing the command line token.\r\n",
          "diff": "",
          "extendedDetails": {}
        }
      ]
    },
    "98d06d37bc7058bbfb2704c9620669c66e279f4a": {
      "type": "Ybodychange",
      "commitMessage": "No need to nest in else.\n",
      "commitDate": "3/5/21 4:39 AM",
      "commitName": "98d06d37bc7058bbfb2704c9620669c66e279f4a",
      "commitAuthor": "Gary Gregory",
      "commitDateOld": "1/17/21 5:38 PM",
      "commitNameOld": "e20023d55962858ec6cd3d786686a00192959a9b",
      "commitAuthorOld": "Gary Gregory",
      "daysBetweenCommits": 46.46,
      "commitsBetweenForRepo": 7,
      "commitsBetweenForFile": 1,
      "actualSource": "protected void handleConcatenatedOptions(final String token) throws ParseException {\r\n    for (int i \u003d 1; i \u003c token.length(); i++) {\r\n        final String ch \u003d String.valueOf(token.charAt(i));\r\n        if (!options.hasOption(ch)) {\r\n            handleUnknownToken(stopAtNonOption \u0026\u0026 i \u003e 1 ? token.substring(i) : token);\r\n            break;\r\n        }\r\n        handleOption(options.getOption(ch));\r\n        if (currentOption !\u003d null \u0026\u0026 token.length() !\u003d i + 1) {\r\n            currentOption.addValueForProcessing(token.substring(i + 1));\r\n            break;\r\n        }\r\n    }\r\n}",
      "path": "src/main/java/org/apache/commons/cli/DefaultParser.java",
      "functionStartLine": 756,
      "functionName": "handleConcatenatedOptions",
      "functionAnnotation": "",
      "functionDoc": "Breaks \u003ccode\u003etoken\u003c/code\u003e into its constituent parts\r\nusing the following algorithm.\r\n\r\n\u003cul\u003e\r\n \u003cli\u003eignore the first character (\"\u003cb\u003e-\u003c/b\u003e\")\u003c/li\u003e\r\n \u003cli\u003efor each remaining character check if an {@link Option}\r\n exists with that id.\u003c/li\u003e\r\n \u003cli\u003eif an {@link Option} does exist then add that character\r\n prepended with \"\u003cb\u003e-\u003c/b\u003e\" to the list of processed tokens.\u003c/li\u003e\r\n \u003cli\u003eif the {@link Option} can have an argument value and there\r\n are remaining characters in the token then add the remaining\r\n characters as a token to the list of processed tokens.\u003c/li\u003e\r\n \u003cli\u003eif an {@link Option} does \u003cb\u003eNOT\u003c/b\u003e exist \u003cb\u003eAND\u003c/b\u003e\r\n \u003ccode\u003estopAtNonOption\u003c/code\u003e \u003cb\u003eIS\u003c/b\u003e set then add the special token\r\n \"\u003cb\u003e--\u003c/b\u003e\" followed by the remaining characters and also\r\n the remaining tokens directly to the processed tokens list.\u003c/li\u003e\r\n \u003cli\u003eif an {@link Option} does \u003cb\u003eNOT\u003c/b\u003e exist \u003cb\u003eAND\u003c/b\u003e\r\n \u003ccode\u003estopAtNonOption\u003c/code\u003e \u003cb\u003eIS NOT\u003c/b\u003e set then add that\r\n character prepended with \"\u003cb\u003e-\u003c/b\u003e\".\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\r\n@param token The current token to be \u003cb\u003eburst\u003c/b\u003e\r\nat the first non-Option encountered.\r\n@throws ParseException if there are any problems encountered\r\n                       while parsing the command line token.\r\n",
      "diff": "@@ -1,15 +1,14 @@\n protected void handleConcatenatedOptions(final String token) throws ParseException {\r\n     for (int i \u003d 1; i \u003c token.length(); i++) {\r\n         final String ch \u003d String.valueOf(token.charAt(i));\r\n-        if (options.hasOption(ch)) {\r\n-            handleOption(options.getOption(ch));\r\n-            if (currentOption !\u003d null \u0026\u0026 token.length() !\u003d i + 1) {\r\n-                currentOption.addValueForProcessing(token.substring(i + 1));\r\n-                break;\r\n-            }\r\n-        } else {\r\n+        if (!options.hasOption(ch)) {\r\n             handleUnknownToken(stopAtNonOption \u0026\u0026 i \u003e 1 ? token.substring(i) : token);\r\n             break;\r\n         }\r\n+        handleOption(options.getOption(ch));\r\n+        if (currentOption !\u003d null \u0026\u0026 token.length() !\u003d i + 1) {\r\n+            currentOption.addValueForProcessing(token.substring(i + 1));\r\n+            break;\r\n+        }\r\n     }\r\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "5fb9e5009a8cdc7366b7a762f0e43dc47decf67c": {
      "type": "Yparametermetachange",
      "commitMessage": "Add final modifier to method parameters.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/cli/trunk@1797674 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "6/5/17 7:38 PM",
      "commitName": "5fb9e5009a8cdc7366b7a762f0e43dc47decf67c",
      "commitAuthor": "Gary D. Gregory",
      "commitDateOld": "6/5/17 7:37 PM",
      "commitNameOld": "357a8b0b8f1090db29e0d541a9419f570a78457b",
      "commitAuthorOld": "Gary D. Gregory",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "protected void handleConcatenatedOptions(final String token) throws ParseException {\r\n    for (int i \u003d 1; i \u003c token.length(); i++) {\r\n        final String ch \u003d String.valueOf(token.charAt(i));\r\n        if (options.hasOption(ch)) {\r\n            handleOption(options.getOption(ch));\r\n            if (currentOption !\u003d null \u0026\u0026 token.length() !\u003d i + 1) {\r\n                currentOption.addValueForProcessing(token.substring(i + 1));\r\n                break;\r\n            }\r\n        } else {\r\n            handleUnknownToken(stopAtNonOption \u0026\u0026 i \u003e 1 ? token.substring(i) : token);\r\n            break;\r\n        }\r\n    }\r\n}",
      "path": "src/main/java/org/apache/commons/cli/DefaultParser.java",
      "functionStartLine": 683,
      "functionName": "handleConcatenatedOptions",
      "functionAnnotation": "",
      "functionDoc": "Breaks \u003ccode\u003etoken\u003c/code\u003e into its constituent parts\r\nusing the following algorithm.\r\n\r\n\u003cul\u003e\r\n \u003cli\u003eignore the first character (\"\u003cb\u003e-\u003c/b\u003e\")\u003c/li\u003e\r\n \u003cli\u003efor each remaining character check if an {@link Option}\r\n exists with that id.\u003c/li\u003e\r\n \u003cli\u003eif an {@link Option} does exist then add that character\r\n prepended with \"\u003cb\u003e-\u003c/b\u003e\" to the list of processed tokens.\u003c/li\u003e\r\n \u003cli\u003eif the {@link Option} can have an argument value and there\r\n are remaining characters in the token then add the remaining\r\n characters as a token to the list of processed tokens.\u003c/li\u003e\r\n \u003cli\u003eif an {@link Option} does \u003cb\u003eNOT\u003c/b\u003e exist \u003cb\u003eAND\u003c/b\u003e\r\n \u003ccode\u003estopAtNonOption\u003c/code\u003e \u003cb\u003eIS\u003c/b\u003e set then add the special token\r\n \"\u003cb\u003e--\u003c/b\u003e\" followed by the remaining characters and also\r\n the remaining tokens directly to the processed tokens list.\u003c/li\u003e\r\n \u003cli\u003eif an {@link Option} does \u003cb\u003eNOT\u003c/b\u003e exist \u003cb\u003eAND\u003c/b\u003e\r\n \u003ccode\u003estopAtNonOption\u003c/code\u003e \u003cb\u003eIS NOT\u003c/b\u003e set then add that\r\n character prepended with \"\u003cb\u003e-\u003c/b\u003e\".\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\r\n@param token The current token to be \u003cb\u003eburst\u003c/b\u003e\r\nat the first non-Option encountered.\r\n@throws ParseException if there are any problems encountered\r\n                       while parsing the command line token.\r\n",
      "diff": "@@ -1,15 +1,15 @@\n-protected void handleConcatenatedOptions(String token) throws ParseException {\r\n+protected void handleConcatenatedOptions(final String token) throws ParseException {\r\n     for (int i \u003d 1; i \u003c token.length(); i++) {\r\n         final String ch \u003d String.valueOf(token.charAt(i));\r\n         if (options.hasOption(ch)) {\r\n             handleOption(options.getOption(ch));\r\n             if (currentOption !\u003d null \u0026\u0026 token.length() !\u003d i + 1) {\r\n                 currentOption.addValueForProcessing(token.substring(i + 1));\r\n                 break;\r\n             }\r\n         } else {\r\n             handleUnknownToken(stopAtNonOption \u0026\u0026 i \u003e 1 ? token.substring(i) : token);\r\n             break;\r\n         }\r\n     }\r\n }\n\\ No newline at end of file\n",
      "extendedDetails": {
        "oldValue": "[token-String]",
        "newValue": "[token-String(modifiers-final)]"
      }
    },
    "357a8b0b8f1090db29e0d541a9419f570a78457b": {
      "type": "Ybodychange",
      "commitMessage": "Add final modifier to local variables.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/cli/trunk@1797673 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "6/5/17 7:37 PM",
      "commitName": "357a8b0b8f1090db29e0d541a9419f570a78457b",
      "commitAuthor": "Gary D. Gregory",
      "commitDateOld": "5/27/17 4:54 AM",
      "commitNameOld": "89080e24891985d691e271fdd33734e493072bd9",
      "commitAuthorOld": "Gary D. Gregory",
      "daysBetweenCommits": 9.61,
      "commitsBetweenForRepo": 3,
      "commitsBetweenForFile": 1,
      "actualSource": "protected void handleConcatenatedOptions(String token) throws ParseException {\r\n    for (int i \u003d 1; i \u003c token.length(); i++) {\r\n        final String ch \u003d String.valueOf(token.charAt(i));\r\n        if (options.hasOption(ch)) {\r\n            handleOption(options.getOption(ch));\r\n            if (currentOption !\u003d null \u0026\u0026 token.length() !\u003d i + 1) {\r\n                currentOption.addValueForProcessing(token.substring(i + 1));\r\n                break;\r\n            }\r\n        } else {\r\n            handleUnknownToken(stopAtNonOption \u0026\u0026 i \u003e 1 ? token.substring(i) : token);\r\n            break;\r\n        }\r\n    }\r\n}",
      "path": "src/main/java/org/apache/commons/cli/DefaultParser.java",
      "functionStartLine": 683,
      "functionName": "handleConcatenatedOptions",
      "functionAnnotation": "",
      "functionDoc": "Breaks \u003ccode\u003etoken\u003c/code\u003e into its constituent parts\r\nusing the following algorithm.\r\n\r\n\u003cul\u003e\r\n \u003cli\u003eignore the first character (\"\u003cb\u003e-\u003c/b\u003e\")\u003c/li\u003e\r\n \u003cli\u003efor each remaining character check if an {@link Option}\r\n exists with that id.\u003c/li\u003e\r\n \u003cli\u003eif an {@link Option} does exist then add that character\r\n prepended with \"\u003cb\u003e-\u003c/b\u003e\" to the list of processed tokens.\u003c/li\u003e\r\n \u003cli\u003eif the {@link Option} can have an argument value and there\r\n are remaining characters in the token then add the remaining\r\n characters as a token to the list of processed tokens.\u003c/li\u003e\r\n \u003cli\u003eif an {@link Option} does \u003cb\u003eNOT\u003c/b\u003e exist \u003cb\u003eAND\u003c/b\u003e\r\n \u003ccode\u003estopAtNonOption\u003c/code\u003e \u003cb\u003eIS\u003c/b\u003e set then add the special token\r\n \"\u003cb\u003e--\u003c/b\u003e\" followed by the remaining characters and also\r\n the remaining tokens directly to the processed tokens list.\u003c/li\u003e\r\n \u003cli\u003eif an {@link Option} does \u003cb\u003eNOT\u003c/b\u003e exist \u003cb\u003eAND\u003c/b\u003e\r\n \u003ccode\u003estopAtNonOption\u003c/code\u003e \u003cb\u003eIS NOT\u003c/b\u003e set then add that\r\n character prepended with \"\u003cb\u003e-\u003c/b\u003e\".\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\r\n@param token The current token to be \u003cb\u003eburst\u003c/b\u003e\r\nat the first non-Option encountered.\r\n@throws ParseException if there are any problems encountered\r\n                       while parsing the command line token.\r\n",
      "diff": "@@ -1,15 +1,15 @@\n protected void handleConcatenatedOptions(String token) throws ParseException {\r\n     for (int i \u003d 1; i \u003c token.length(); i++) {\r\n-        String ch \u003d String.valueOf(token.charAt(i));\r\n+        final String ch \u003d String.valueOf(token.charAt(i));\r\n         if (options.hasOption(ch)) {\r\n             handleOption(options.getOption(ch));\r\n             if (currentOption !\u003d null \u0026\u0026 token.length() !\u003d i + 1) {\r\n                 currentOption.addValueForProcessing(token.substring(i + 1));\r\n                 break;\r\n             }\r\n         } else {\r\n             handleUnknownToken(stopAtNonOption \u0026\u0026 i \u003e 1 ? token.substring(i) : token);\r\n             break;\r\n         }\r\n     }\r\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "0f56df924fabac851a111a04569f4a3d7331ef8e": {
      "type": "Ydocchange",
      "commitMessage": "JavaDoc fixes. Patch provided by GitHub user sebkur. This fixes #8 from GitHub.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/cli/trunk@1783175 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "2/16/17 10:52 AM",
      "commitName": "0f56df924fabac851a111a04569f4a3d7331ef8e",
      "commitAuthor": "Benedikt Ritter",
      "commitDateOld": "9/8/16 8:36 AM",
      "commitNameOld": "ac2a1c85616f0140418de9190389fe7b80296c39",
      "commitAuthorOld": "Benedikt Ritter",
      "daysBetweenCommits": 161.09,
      "commitsBetweenForRepo": 4,
      "commitsBetweenForFile": 1,
      "actualSource": "protected void handleConcatenatedOptions(String token) throws ParseException {\r\n    for (int i \u003d 1; i \u003c token.length(); i++) {\r\n        String ch \u003d String.valueOf(token.charAt(i));\r\n        if (options.hasOption(ch)) {\r\n            handleOption(options.getOption(ch));\r\n            if (currentOption !\u003d null \u0026\u0026 token.length() !\u003d i + 1) {\r\n                currentOption.addValueForProcessing(token.substring(i + 1));\r\n                break;\r\n            }\r\n        } else {\r\n            handleUnknownToken(stopAtNonOption \u0026\u0026 i \u003e 1 ? token.substring(i) : token);\r\n            break;\r\n        }\r\n    }\r\n}",
      "path": "src/main/java/org/apache/commons/cli/DefaultParser.java",
      "functionStartLine": 683,
      "functionName": "handleConcatenatedOptions",
      "functionAnnotation": "",
      "functionDoc": "Breaks \u003ccode\u003etoken\u003c/code\u003e into its constituent parts\r\nusing the following algorithm.\r\n\r\n\u003cul\u003e\r\n \u003cli\u003eignore the first character (\"\u003cb\u003e-\u003c/b\u003e\")\u003c/li\u003e\r\n \u003cli\u003efor each remaining character check if an {@link Option}\r\n exists with that id.\u003c/li\u003e\r\n \u003cli\u003eif an {@link Option} does exist then add that character\r\n prepended with \"\u003cb\u003e-\u003c/b\u003e\" to the list of processed tokens.\u003c/li\u003e\r\n \u003cli\u003eif the {@link Option} can have an argument value and there\r\n are remaining characters in the token then add the remaining\r\n characters as a token to the list of processed tokens.\u003c/li\u003e\r\n \u003cli\u003eif an {@link Option} does \u003cb\u003eNOT\u003c/b\u003e exist \u003cb\u003eAND\u003c/b\u003e\r\n \u003ccode\u003estopAtNonOption\u003c/code\u003e \u003cb\u003eIS\u003c/b\u003e set then add the special token\r\n \"\u003cb\u003e--\u003c/b\u003e\" followed by the remaining characters and also\r\n the remaining tokens directly to the processed tokens list.\u003c/li\u003e\r\n \u003cli\u003eif an {@link Option} does \u003cb\u003eNOT\u003c/b\u003e exist \u003cb\u003eAND\u003c/b\u003e\r\n \u003ccode\u003estopAtNonOption\u003c/code\u003e \u003cb\u003eIS NOT\u003c/b\u003e set then add that\r\n character prepended with \"\u003cb\u003e-\u003c/b\u003e\".\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\r\n@param token The current token to be \u003cb\u003eburst\u003c/b\u003e\r\nat the first non-Option encountered.\r\n@throws ParseException if there are any problems encountered\r\n                       while parsing the command line token.\r\n",
      "diff": "",
      "extendedDetails": {
        "oldValue": "Breaks \u003ccode\u003etoken\u003c/code\u003e into its constituent parts\r\nusing the following algorithm.\r\n\r\n\u003cul\u003e\r\n \u003cli\u003eignore the first character (\"\u003cb\u003e-\u003c/b\u003e\")\u003c/li\u003e\r\n \u003cli\u003eforeach remaining character check if an {@link Option}\r\n exists with that id.\u003c/li\u003e\r\n \u003cli\u003eif an {@link Option} does exist then add that character\r\n prepended with \"\u003cb\u003e-\u003c/b\u003e\" to the list of processed tokens.\u003c/li\u003e\r\n \u003cli\u003eif the {@link Option} can have an argument value and there\r\n are remaining characters in the token then add the remaining\r\n characters as a token to the list of processed tokens.\u003c/li\u003e\r\n \u003cli\u003eif an {@link Option} does \u003cb\u003eNOT\u003c/b\u003e exist \u003cb\u003eAND\u003c/b\u003e\r\n \u003ccode\u003estopAtNonOption\u003c/code\u003e \u003cb\u003eIS\u003c/b\u003e set then add the special token\r\n \"\u003cb\u003e--\u003c/b\u003e\" followed by the remaining characters and also\r\n the remaining tokens directly to the processed tokens list.\u003c/li\u003e\r\n \u003cli\u003eif an {@link Option} does \u003cb\u003eNOT\u003c/b\u003e exist \u003cb\u003eAND\u003c/b\u003e\r\n \u003ccode\u003estopAtNonOption\u003c/code\u003e \u003cb\u003eIS NOT\u003c/b\u003e set then add that\r\n character prepended with \"\u003cb\u003e-\u003c/b\u003e\".\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\r\n@param token The current token to be \u003cb\u003eburst\u003c/b\u003e\r\nat the first non-Option encountered.\r\n@throws ParseException if there are any problems encountered\r\n                       while parsing the command line token.\r\n",
        "newValue": "Breaks \u003ccode\u003etoken\u003c/code\u003e into its constituent parts\r\nusing the following algorithm.\r\n\r\n\u003cul\u003e\r\n \u003cli\u003eignore the first character (\"\u003cb\u003e-\u003c/b\u003e\")\u003c/li\u003e\r\n \u003cli\u003efor each remaining character check if an {@link Option}\r\n exists with that id.\u003c/li\u003e\r\n \u003cli\u003eif an {@link Option} does exist then add that character\r\n prepended with \"\u003cb\u003e-\u003c/b\u003e\" to the list of processed tokens.\u003c/li\u003e\r\n \u003cli\u003eif the {@link Option} can have an argument value and there\r\n are remaining characters in the token then add the remaining\r\n characters as a token to the list of processed tokens.\u003c/li\u003e\r\n \u003cli\u003eif an {@link Option} does \u003cb\u003eNOT\u003c/b\u003e exist \u003cb\u003eAND\u003c/b\u003e\r\n \u003ccode\u003estopAtNonOption\u003c/code\u003e \u003cb\u003eIS\u003c/b\u003e set then add the special token\r\n \"\u003cb\u003e--\u003c/b\u003e\" followed by the remaining characters and also\r\n the remaining tokens directly to the processed tokens list.\u003c/li\u003e\r\n \u003cli\u003eif an {@link Option} does \u003cb\u003eNOT\u003c/b\u003e exist \u003cb\u003eAND\u003c/b\u003e\r\n \u003ccode\u003estopAtNonOption\u003c/code\u003e \u003cb\u003eIS NOT\u003c/b\u003e set then add that\r\n character prepended with \"\u003cb\u003e-\u003c/b\u003e\".\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\r\n@param token The current token to be \u003cb\u003eburst\u003c/b\u003e\r\nat the first non-Option encountered.\r\n@throws ParseException if there are any problems encountered\r\n                       while parsing the command line token.\r\n"
      }
    },
    "10090594827c3c90b9c0a5c8288cda448b0ce10c": {
      "type": "Ydocchange",
      "commitMessage": "Make doclint happy\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/cli/trunk@1677406 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "5/3/15 5:27 PM",
      "commitName": "10090594827c3c90b9c0a5c8288cda448b0ce10c",
      "commitAuthor": "Benedikt Ritter",
      "commitDateOld": "5/3/15 4:57 PM",
      "commitNameOld": "6b87d290954c4594fc69a3a0b85fff12490cfde5",
      "commitAuthorOld": "Benedikt Ritter",
      "daysBetweenCommits": 0.02,
      "commitsBetweenForRepo": 4,
      "commitsBetweenForFile": 1,
      "actualSource": "protected void handleConcatenatedOptions(String token) throws ParseException {\r\n    for (int i \u003d 1; i \u003c token.length(); i++) {\r\n        String ch \u003d String.valueOf(token.charAt(i));\r\n        if (options.hasOption(ch)) {\r\n            handleOption(options.getOption(ch));\r\n            if (currentOption !\u003d null \u0026\u0026 token.length() !\u003d i + 1) {\r\n                currentOption.addValueForProcessing(token.substring(i + 1));\r\n                break;\r\n            }\r\n        } else {\r\n            handleUnknownToken(stopAtNonOption \u0026\u0026 i \u003e 1 ? token.substring(i) : token);\r\n            break;\r\n        }\r\n    }\r\n}",
      "path": "src/main/java/org/apache/commons/cli/DefaultParser.java",
      "functionStartLine": 670,
      "functionName": "handleConcatenatedOptions",
      "functionAnnotation": "",
      "functionDoc": "Breaks \u003ccode\u003etoken\u003c/code\u003e into its constituent parts\r\nusing the following algorithm.\r\n\r\n\u003cul\u003e\r\n \u003cli\u003eignore the first character (\"\u003cb\u003e-\u003c/b\u003e\")\u003c/li\u003e\r\n \u003cli\u003eforeach remaining character check if an {@link Option}\r\n exists with that id.\u003c/li\u003e\r\n \u003cli\u003eif an {@link Option} does exist then add that character\r\n prepended with \"\u003cb\u003e-\u003c/b\u003e\" to the list of processed tokens.\u003c/li\u003e\r\n \u003cli\u003eif the {@link Option} can have an argument value and there\r\n are remaining characters in the token then add the remaining\r\n characters as a token to the list of processed tokens.\u003c/li\u003e\r\n \u003cli\u003eif an {@link Option} does \u003cb\u003eNOT\u003c/b\u003e exist \u003cb\u003eAND\u003c/b\u003e\r\n \u003ccode\u003estopAtNonOption\u003c/code\u003e \u003cb\u003eIS\u003c/b\u003e set then add the special token\r\n \"\u003cb\u003e--\u003c/b\u003e\" followed by the remaining characters and also\r\n the remaining tokens directly to the processed tokens list.\u003c/li\u003e\r\n \u003cli\u003eif an {@link Option} does \u003cb\u003eNOT\u003c/b\u003e exist \u003cb\u003eAND\u003c/b\u003e\r\n \u003ccode\u003estopAtNonOption\u003c/code\u003e \u003cb\u003eIS NOT\u003c/b\u003e set then add that\r\n character prepended with \"\u003cb\u003e-\u003c/b\u003e\".\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\r\n@param token The current token to be \u003cb\u003eburst\u003c/b\u003e\r\nat the first non-Option encountered.\r\n@throws ParseException if there are any problems encountered\r\n                       while parsing the command line token.\r\n",
      "diff": "",
      "extendedDetails": {
        "oldValue": "Breaks \u003ccode\u003etoken\u003c/code\u003e into its constituent parts\r\nusing the following algorithm.\r\n\r\n\u003cul\u003e\r\n \u003cli\u003eignore the first character (\"\u003cb\u003e-\u003c/b\u003e\")\u003c/li\u003e\r\n \u003cli\u003eforeach remaining character check if an {@link Option}\r\n exists with that id.\u003c/li\u003e\r\n \u003cli\u003eif an {@link Option} does exist then add that character\r\n prepended with \"\u003cb\u003e-\u003c/b\u003e\" to the list of processed tokens.\u003c/li\u003e\r\n \u003cli\u003eif the {@link Option} can have an argument value and there\r\n are remaining characters in the token then add the remaining\r\n characters as a token to the list of processed tokens.\u003c/li\u003e\r\n \u003cli\u003eif an {@link Option} does \u003cb\u003eNOT\u003c/b\u003e exist \u003cb\u003eAND\u003c/b\u003e\r\n \u003ccode\u003estopAtNonOption\u003c/code\u003e \u003cb\u003eIS\u003c/b\u003e set then add the special token\r\n \"\u003cb\u003e--\u003c/b\u003e\" followed by the remaining characters and also\r\n the remaining tokens directly to the processed tokens list.\u003c/li\u003e\r\n \u003cli\u003eif an {@link Option} does \u003cb\u003eNOT\u003c/b\u003e exist \u003cb\u003eAND\u003c/b\u003e\r\n \u003ccode\u003estopAtNonOption\u003c/code\u003e \u003cb\u003eIS NOT\u003c/b\u003e set then add that\r\n character prepended with \"\u003cb\u003e-\u003c/b\u003e\".\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\r\n@param token The current token to be \u003cb\u003eburst\u003c/b\u003e\r\nat the first non-Option encountered.\r\n",
        "newValue": "Breaks \u003ccode\u003etoken\u003c/code\u003e into its constituent parts\r\nusing the following algorithm.\r\n\r\n\u003cul\u003e\r\n \u003cli\u003eignore the first character (\"\u003cb\u003e-\u003c/b\u003e\")\u003c/li\u003e\r\n \u003cli\u003eforeach remaining character check if an {@link Option}\r\n exists with that id.\u003c/li\u003e\r\n \u003cli\u003eif an {@link Option} does exist then add that character\r\n prepended with \"\u003cb\u003e-\u003c/b\u003e\" to the list of processed tokens.\u003c/li\u003e\r\n \u003cli\u003eif the {@link Option} can have an argument value and there\r\n are remaining characters in the token then add the remaining\r\n characters as a token to the list of processed tokens.\u003c/li\u003e\r\n \u003cli\u003eif an {@link Option} does \u003cb\u003eNOT\u003c/b\u003e exist \u003cb\u003eAND\u003c/b\u003e\r\n \u003ccode\u003estopAtNonOption\u003c/code\u003e \u003cb\u003eIS\u003c/b\u003e set then add the special token\r\n \"\u003cb\u003e--\u003c/b\u003e\" followed by the remaining characters and also\r\n the remaining tokens directly to the processed tokens list.\u003c/li\u003e\r\n \u003cli\u003eif an {@link Option} does \u003cb\u003eNOT\u003c/b\u003e exist \u003cb\u003eAND\u003c/b\u003e\r\n \u003ccode\u003estopAtNonOption\u003c/code\u003e \u003cb\u003eIS NOT\u003c/b\u003e set then add that\r\n character prepended with \"\u003cb\u003e-\u003c/b\u003e\".\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\r\n@param token The current token to be \u003cb\u003eburst\u003c/b\u003e\r\nat the first non-Option encountered.\r\n@throws ParseException if there are any problems encountered\r\n                       while parsing the command line token.\r\n"
      }
    },
    "6b87d290954c4594fc69a3a0b85fff12490cfde5": {
      "type": "Ybodychange",
      "commitMessage": "PMD: Useless parenthesis\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/cli/trunk@1677402 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "5/3/15 4:57 PM",
      "commitName": "6b87d290954c4594fc69a3a0b85fff12490cfde5",
      "commitAuthor": "Benedikt Ritter",
      "commitDateOld": "2/6/13 8:12 PM",
      "commitNameOld": "08a1eb7875d24830e37a969e9963ccc365586ca1",
      "commitAuthorOld": "Thomas Neidhart",
      "daysBetweenCommits": 815.82,
      "commitsBetweenForRepo": 61,
      "commitsBetweenForFile": 1,
      "actualSource": "protected void handleConcatenatedOptions(String token) throws ParseException {\r\n    for (int i \u003d 1; i \u003c token.length(); i++) {\r\n        String ch \u003d String.valueOf(token.charAt(i));\r\n        if (options.hasOption(ch)) {\r\n            handleOption(options.getOption(ch));\r\n            if (currentOption !\u003d null \u0026\u0026 token.length() !\u003d i + 1) {\r\n                currentOption.addValueForProcessing(token.substring(i + 1));\r\n                break;\r\n            }\r\n        } else {\r\n            handleUnknownToken(stopAtNonOption \u0026\u0026 i \u003e 1 ? token.substring(i) : token);\r\n            break;\r\n        }\r\n    }\r\n}",
      "path": "src/main/java/org/apache/commons/cli/DefaultParser.java",
      "functionStartLine": 668,
      "functionName": "handleConcatenatedOptions",
      "functionAnnotation": "",
      "functionDoc": "Breaks \u003ccode\u003etoken\u003c/code\u003e into its constituent parts\r\nusing the following algorithm.\r\n\r\n\u003cul\u003e\r\n \u003cli\u003eignore the first character (\"\u003cb\u003e-\u003c/b\u003e\")\u003c/li\u003e\r\n \u003cli\u003eforeach remaining character check if an {@link Option}\r\n exists with that id.\u003c/li\u003e\r\n \u003cli\u003eif an {@link Option} does exist then add that character\r\n prepended with \"\u003cb\u003e-\u003c/b\u003e\" to the list of processed tokens.\u003c/li\u003e\r\n \u003cli\u003eif the {@link Option} can have an argument value and there\r\n are remaining characters in the token then add the remaining\r\n characters as a token to the list of processed tokens.\u003c/li\u003e\r\n \u003cli\u003eif an {@link Option} does \u003cb\u003eNOT\u003c/b\u003e exist \u003cb\u003eAND\u003c/b\u003e\r\n \u003ccode\u003estopAtNonOption\u003c/code\u003e \u003cb\u003eIS\u003c/b\u003e set then add the special token\r\n \"\u003cb\u003e--\u003c/b\u003e\" followed by the remaining characters and also\r\n the remaining tokens directly to the processed tokens list.\u003c/li\u003e\r\n \u003cli\u003eif an {@link Option} does \u003cb\u003eNOT\u003c/b\u003e exist \u003cb\u003eAND\u003c/b\u003e\r\n \u003ccode\u003estopAtNonOption\u003c/code\u003e \u003cb\u003eIS NOT\u003c/b\u003e set then add that\r\n character prepended with \"\u003cb\u003e-\u003c/b\u003e\".\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\r\n@param token The current token to be \u003cb\u003eburst\u003c/b\u003e\r\nat the first non-Option encountered.\r\n",
      "diff": "@@ -1,15 +1,15 @@\n protected void handleConcatenatedOptions(String token) throws ParseException {\r\n     for (int i \u003d 1; i \u003c token.length(); i++) {\r\n         String ch \u003d String.valueOf(token.charAt(i));\r\n         if (options.hasOption(ch)) {\r\n             handleOption(options.getOption(ch));\r\n-            if (currentOption !\u003d null \u0026\u0026 (token.length() !\u003d (i + 1))) {\r\n+            if (currentOption !\u003d null \u0026\u0026 token.length() !\u003d i + 1) {\r\n                 currentOption.addValueForProcessing(token.substring(i + 1));\r\n                 break;\r\n             }\r\n         } else {\r\n             handleUnknownToken(stopAtNonOption \u0026\u0026 i \u003e 1 ? token.substring(i) : token);\r\n             break;\r\n         }\r\n     }\r\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "5b098dec44567a760c220c1e0cd6bee29262c2c4": {
      "type": "Yformatchange",
      "commitMessage": "trailing spaces\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/cli/trunk@1095657 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "4/21/11 2:13 PM",
      "commitName": "5b098dec44567a760c220c1e0cd6bee29262c2c4",
      "commitAuthor": "Simone Tripodi",
      "commitDateOld": "4/12/11 9:57 PM",
      "commitNameOld": "a1b5d44432c057cf675f051bb20379937565f4ef",
      "commitAuthorOld": "Emmanuel Bourg",
      "daysBetweenCommits": 8.68,
      "commitsBetweenForRepo": 12,
      "commitsBetweenForFile": 1,
      "actualSource": "protected void handleConcatenatedOptions(String token) throws ParseException {\r\n    for (int i \u003d 1; i \u003c token.length(); i++) {\r\n        String ch \u003d String.valueOf(token.charAt(i));\r\n        if (options.hasOption(ch)) {\r\n            handleOption(options.getOption(ch));\r\n            if (currentOption !\u003d null \u0026\u0026 (token.length() !\u003d (i + 1))) {\r\n                currentOption.addValueForProcessing(token.substring(i + 1));\r\n                break;\r\n            }\r\n        } else {\r\n            handleUnknownToken(stopAtNonOption \u0026\u0026 i \u003e 1 ? token.substring(i) : token);\r\n            break;\r\n        }\r\n    }\r\n}",
      "path": "src/main/java/org/apache/commons/cli/DefaultParser.java",
      "functionStartLine": 665,
      "functionName": "handleConcatenatedOptions",
      "functionAnnotation": "",
      "functionDoc": "Breaks \u003ccode\u003etoken\u003c/code\u003e into its constituent parts\r\nusing the following algorithm.\r\n\r\n\u003cul\u003e\r\n \u003cli\u003eignore the first character (\"\u003cb\u003e-\u003c/b\u003e\")\u003c/li\u003e\r\n \u003cli\u003eforeach remaining character check if an {@link Option}\r\n exists with that id.\u003c/li\u003e\r\n \u003cli\u003eif an {@link Option} does exist then add that character\r\n prepended with \"\u003cb\u003e-\u003c/b\u003e\" to the list of processed tokens.\u003c/li\u003e\r\n \u003cli\u003eif the {@link Option} can have an argument value and there\r\n are remaining characters in the token then add the remaining\r\n characters as a token to the list of processed tokens.\u003c/li\u003e\r\n \u003cli\u003eif an {@link Option} does \u003cb\u003eNOT\u003c/b\u003e exist \u003cb\u003eAND\u003c/b\u003e\r\n \u003ccode\u003estopAtNonOption\u003c/code\u003e \u003cb\u003eIS\u003c/b\u003e set then add the special token\r\n \"\u003cb\u003e--\u003c/b\u003e\" followed by the remaining characters and also\r\n the remaining tokens directly to the processed tokens list.\u003c/li\u003e\r\n \u003cli\u003eif an {@link Option} does \u003cb\u003eNOT\u003c/b\u003e exist \u003cb\u003eAND\u003c/b\u003e\r\n \u003ccode\u003estopAtNonOption\u003c/code\u003e \u003cb\u003eIS NOT\u003c/b\u003e set then add that\r\n character prepended with \"\u003cb\u003e-\u003c/b\u003e\".\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\r\n@param token The current token to be \u003cb\u003eburst\u003c/b\u003e\r\nat the first non-Option encountered.\r\n",
      "diff": "",
      "extendedDetails": {}
    },
    "1596f3bbe57986361da4ac1a23634dd5b00d10df": {
      "type": "Yfilerename",
      "commitMessage": "Switched to the Maven 2 default directory layout (part 3)\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/cli/trunk@955173 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "6/16/10 12:45 PM",
      "commitName": "1596f3bbe57986361da4ac1a23634dd5b00d10df",
      "commitAuthor": "Emmanuel Bourg",
      "commitDateOld": "6/16/10 12:42 PM",
      "commitNameOld": "406a35f1a128944b7c51dcbc4a1f04c3f8bec3e6",
      "commitAuthorOld": "Emmanuel Bourg",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "protected void handleConcatenatedOptions(String token) throws ParseException {\r\n    for (int i \u003d 1; i \u003c token.length(); i++) {\r\n        String ch \u003d String.valueOf(token.charAt(i));\r\n        if (options.hasOption(ch)) {\r\n            handleOption(options.getOption(ch));\r\n            if (currentOption !\u003d null \u0026\u0026 (token.length() !\u003d (i + 1))) {\r\n                currentOption.addValueForProcessing(token.substring(i + 1));\r\n                break;\r\n            }\r\n        } else {\r\n            handleUnknownToken(stopAtNonOption \u0026\u0026 i \u003e 1 ? token.substring(i) : token);\r\n            break;\r\n        }\r\n    }\r\n}",
      "path": "src/main/java/org/apache/commons/cli/DefaultParser.java",
      "functionStartLine": 656,
      "functionName": "handleConcatenatedOptions",
      "functionAnnotation": "",
      "functionDoc": "Breaks \u003ccode\u003etoken\u003c/code\u003e into its constituent parts\r\nusing the following algorithm.\r\n\r\n\u003cul\u003e\r\n \u003cli\u003eignore the first character (\"\u003cb\u003e-\u003c/b\u003e\")\u003c/li\u003e\r\n \u003cli\u003eforeach remaining character check if an {@link Option}\r\n exists with that id.\u003c/li\u003e\r\n \u003cli\u003eif an {@link Option} does exist then add that character\r\n prepended with \"\u003cb\u003e-\u003c/b\u003e\" to the list of processed tokens.\u003c/li\u003e\r\n \u003cli\u003eif the {@link Option} can have an argument value and there\r\n are remaining characters in the token then add the remaining\r\n characters as a token to the list of processed tokens.\u003c/li\u003e\r\n \u003cli\u003eif an {@link Option} does \u003cb\u003eNOT\u003c/b\u003e exist \u003cb\u003eAND\u003c/b\u003e\r\n \u003ccode\u003estopAtNonOption\u003c/code\u003e \u003cb\u003eIS\u003c/b\u003e set then add the special token\r\n \"\u003cb\u003e--\u003c/b\u003e\" followed by the remaining characters and also\r\n the remaining tokens directly to the processed tokens list.\u003c/li\u003e\r\n \u003cli\u003eif an {@link Option} does \u003cb\u003eNOT\u003c/b\u003e exist \u003cb\u003eAND\u003c/b\u003e\r\n \u003ccode\u003estopAtNonOption\u003c/code\u003e \u003cb\u003eIS NOT\u003c/b\u003e set then add that\r\n character prepended with \"\u003cb\u003e-\u003c/b\u003e\".\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\r\n@param token The current token to be \u003cb\u003eburst\u003c/b\u003e\r\nat the first non-Option encountered.\r\n",
      "diff": "",
      "extendedDetails": {
        "oldPath": "src/java/org/apache/commons/cli/DefaultParser.java",
        "newPath": "src/main/java/org/apache/commons/cli/DefaultParser.java"
      }
    },
    "f43698527ef2b5ba15fe85d46d2d505418f68243": {
      "type": "Yintroduced",
      "commitMessage": "New unified parser (CLI-181, also fixes CLI-160, CLI-161, CLI-167, CLI-184)\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/cli/trunk@780264 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "5/30/09 4:43 PM",
      "commitName": "f43698527ef2b5ba15fe85d46d2d505418f68243",
      "commitAuthor": "Emmanuel Bourg",
      "diff": "@@ -0,0 +1,15 @@\n+protected void handleConcatenatedOptions(String token) throws ParseException {\r\n+    for (int i \u003d 1; i \u003c token.length(); i++) {\r\n+        String ch \u003d String.valueOf(token.charAt(i));\r\n+        if (options.hasOption(ch)) {\r\n+            handleOption(options.getOption(ch));\r\n+            if (currentOption !\u003d null \u0026\u0026 (token.length() !\u003d (i + 1))) {\r\n+                currentOption.addValueForProcessing(token.substring(i + 1));\r\n+                break;\r\n+            }\r\n+        } else {\r\n+            handleUnknownToken(stopAtNonOption \u0026\u0026 i \u003e 1 ? token.substring(i) : token);\r\n+            break;\r\n+        }\r\n+    }\r\n+}\n\\ No newline at end of file\n",
      "actualSource": "protected void handleConcatenatedOptions(String token) throws ParseException {\r\n    for (int i \u003d 1; i \u003c token.length(); i++) {\r\n        String ch \u003d String.valueOf(token.charAt(i));\r\n        if (options.hasOption(ch)) {\r\n            handleOption(options.getOption(ch));\r\n            if (currentOption !\u003d null \u0026\u0026 (token.length() !\u003d (i + 1))) {\r\n                currentOption.addValueForProcessing(token.substring(i + 1));\r\n                break;\r\n            }\r\n        } else {\r\n            handleUnknownToken(stopAtNonOption \u0026\u0026 i \u003e 1 ? token.substring(i) : token);\r\n            break;\r\n        }\r\n    }\r\n}",
      "path": "src/java/org/apache/commons/cli/DefaultParser.java",
      "functionStartLine": 566,
      "functionName": "handleConcatenatedOptions",
      "functionAnnotation": "",
      "functionDoc": "Breaks \u003ccode\u003etoken\u003c/code\u003e into its constituent parts\r\nusing the following algorithm.\r\n\r\n\u003cul\u003e\r\n \u003cli\u003eignore the first character (\"\u003cb\u003e-\u003c/b\u003e\")\u003c/li\u003e\r\n \u003cli\u003eforeach remaining character check if an {@link Option}\r\n exists with that id.\u003c/li\u003e\r\n \u003cli\u003eif an {@link Option} does exist then add that character\r\n prepended with \"\u003cb\u003e-\u003c/b\u003e\" to the list of processed tokens.\u003c/li\u003e\r\n \u003cli\u003eif the {@link Option} can have an argument value and there\r\n are remaining characters in the token then add the remaining\r\n characters as a token to the list of processed tokens.\u003c/li\u003e\r\n \u003cli\u003eif an {@link Option} does \u003cb\u003eNOT\u003c/b\u003e exist \u003cb\u003eAND\u003c/b\u003e\r\n \u003ccode\u003estopAtNonOption\u003c/code\u003e \u003cb\u003eIS\u003c/b\u003e set then add the special token\r\n \"\u003cb\u003e--\u003c/b\u003e\" followed by the remaining characters and also\r\n the remaining tokens directly to the processed tokens list.\u003c/li\u003e\r\n \u003cli\u003eif an {@link Option} does \u003cb\u003eNOT\u003c/b\u003e exist \u003cb\u003eAND\u003c/b\u003e\r\n \u003ccode\u003estopAtNonOption\u003c/code\u003e \u003cb\u003eIS NOT\u003c/b\u003e set then add that\r\n character prepended with \"\u003cb\u003e-\u003c/b\u003e\".\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\r\n@param token The current token to be \u003cb\u003eburst\u003c/b\u003e\r\nat the first non-Option encountered.\r\n"
    }
  }
}