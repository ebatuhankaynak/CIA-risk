{
  "origin": "codeshovel",
  "repositoryName": "commons-cli",
  "repositoryPath": "D:/_SELEN/_2022-2023/CS588/GitHub_Dataset/commons-cli/commons-cli/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "DisablePartialMatchingTest.java",
  "functionName": "testRegularPartialMatching",
  "functionId": "testRegularPartialMatching",
  "sourceFilePath": "src/test/java/org/apache/commons/cli/DisablePartialMatchingTest.java",
  "functionAnnotation": "@Test",
  "functionDoc": "",
  "functionStartLine": 44,
  "functionEndLine": 58,
  "numCommitsSeen": 6,
  "timeTaken": 81,
  "changeHistory": [
    "bc0edc47dbf47cdaa3485cfb724982f377c900df",
    "fd66015d8e2e5bbc763c74fe4e8245cba37c01dd",
    "3d9587caec7dd23d359bc112c63512e2bc3e0702",
    "4f17a89ad04bcf718aeac43d202f8c261ce0b796"
  ],
  "changeHistoryShort": {
    "bc0edc47dbf47cdaa3485cfb724982f377c900df": "Yformatchange",
    "fd66015d8e2e5bbc763c74fe4e8245cba37c01dd": "Ybodychange",
    "3d9587caec7dd23d359bc112c63512e2bc3e0702": "Ybodychange",
    "4f17a89ad04bcf718aeac43d202f8c261ce0b796": "Yintroduced"
  },
  "changeHistoryDetails": {
    "bc0edc47dbf47cdaa3485cfb724982f377c900df": {
      "type": "Yformatchange",
      "commitMessage": "Clean ups.\n\n- maven-checkstyle-plugin 3.1.1 -\u003e 3.1.2.\n- checkstyle -\u003e 9.0\n- Updates for 21st century.\n- No need to nest else clause.\n- Use simple array declarations.\n- Use valueOf instead of new for Numbers.\n- Consistent formatting.\n- Remove some inline comments //-----...\n",
      "commitDate": "10/2/21 11:04 PM",
      "commitName": "bc0edc47dbf47cdaa3485cfb724982f377c900df",
      "commitAuthor": "Gary Gregory",
      "commitDateOld": "12/28/20 6:44 PM",
      "commitNameOld": "c67275279176504a6f5fc556cfa247e1df02a580",
      "commitAuthorOld": "Arturo Bernal",
      "daysBetweenCommits": 278.18,
      "commitsBetweenForRepo": 38,
      "commitsBetweenForFile": 1,
      "actualSource": "@Test\r\npublic void testRegularPartialMatching() throws Exception {\r\n    final CommandLineParser parser \u003d new DefaultParser();\r\n    final Options options \u003d new Options();\r\n    options.addOption(new Option(\"d\", \"debug\", false, \"Turn on debug.\"));\r\n    options.addOption(new Option(\"e\", \"extract\", false, \"Turn on extract.\"));\r\n    options.addOption(new Option(\"o\", \"option\", true, \"Turn on option with argument.\"));\r\n    final CommandLine line \u003d parser.parse(options, new String[] { \"-de\", \"--option\u003dfoobar\" });\r\n    assertTrue(\"There should be an option debug in any case...\", line.hasOption(\"debug\"));\r\n    assertFalse(\"There should not be an extract option because partial matching only selects debug\", line.hasOption(\"extract\"));\r\n    assertTrue(\"There should be an option option with a argument value\", line.hasOption(\"option\"));\r\n}",
      "path": "src/test/java/org/apache/commons/cli/DisablePartialMatchingTest.java",
      "functionStartLine": 44,
      "functionName": "testRegularPartialMatching",
      "functionAnnotation": "@Test",
      "functionDoc": "",
      "diff": "",
      "extendedDetails": {}
    },
    "fd66015d8e2e5bbc763c74fe4e8245cba37c01dd": {
      "type": "Ybodychange",
      "commitMessage": "Use final.\n",
      "commitDate": "11/21/20 6:06 AM",
      "commitName": "fd66015d8e2e5bbc763c74fe4e8245cba37c01dd",
      "commitAuthor": "Gary Gregory",
      "commitDateOld": "5/24/20 6:49 PM",
      "commitNameOld": "bf19d994c6414de253734f69a769e419758e43b0",
      "commitAuthorOld": "Gary Gregory",
      "daysBetweenCommits": 180.47,
      "commitsBetweenForRepo": 30,
      "commitsBetweenForFile": 1,
      "actualSource": "@Test\r\npublic void testRegularPartialMatching() throws Exception {\r\n    final CommandLineParser parser \u003d new DefaultParser();\r\n    final Options options \u003d new Options();\r\n    options.addOption(new Option(\"d\", \"debug\", false, \"Turn on debug.\"));\r\n    options.addOption(new Option(\"e\", \"extract\", false, \"Turn on extract.\"));\r\n    options.addOption(new Option(\"o\", \"option\", true, \"Turn on option with argument.\"));\r\n    final CommandLine line \u003d parser.parse(options, new String[] { \"-de\", \"--option\u003dfoobar\" });\r\n    assertTrue(\"There should be an option debug in any case...\", line.hasOption(\"debug\"));\r\n    assertFalse(\"There should not be an extract option because partial matching only selects debug\", line.hasOption(\"extract\"));\r\n    assertTrue(\"There should be an option option with a argument value\", line.hasOption(\"option\"));\r\n}",
      "path": "src/test/java/org/apache/commons/cli/DisablePartialMatchingTest.java",
      "functionStartLine": 46,
      "functionName": "testRegularPartialMatching",
      "functionAnnotation": "@Test",
      "functionDoc": "",
      "diff": "@@ -1,12 +1,12 @@\n @Test\r\n public void testRegularPartialMatching() throws Exception {\r\n-    CommandLineParser parser \u003d new DefaultParser();\r\n+    final CommandLineParser parser \u003d new DefaultParser();\r\n     final Options options \u003d new Options();\r\n     options.addOption(new Option(\"d\", \"debug\", false, \"Turn on debug.\"));\r\n     options.addOption(new Option(\"e\", \"extract\", false, \"Turn on extract.\"));\r\n     options.addOption(new Option(\"o\", \"option\", true, \"Turn on option with argument.\"));\r\n-    CommandLine line \u003d parser.parse(options, new String[] { \"-de\", \"--option\u003dfoobar\" });\r\n+    final CommandLine line \u003d parser.parse(options, new String[] { \"-de\", \"--option\u003dfoobar\" });\r\n     assertTrue(\"There should be an option debug in any case...\", line.hasOption(\"debug\"));\r\n     assertFalse(\"There should not be an extract option because partial matching only selects debug\", line.hasOption(\"extract\"));\r\n     assertTrue(\"There should be an option option with a argument value\", line.hasOption(\"option\"));\r\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "3d9587caec7dd23d359bc112c63512e2bc3e0702": {
      "type": "Ybodychange",
      "commitMessage": "Added option to test which traverses extra if-path\n",
      "commitDate": "6/27/17 7:46 PM",
      "commitName": "3d9587caec7dd23d359bc112c63512e2bc3e0702",
      "commitAuthor": "Rubin Simons",
      "commitDateOld": "6/23/17 2:04 PM",
      "commitNameOld": "4f17a89ad04bcf718aeac43d202f8c261ce0b796",
      "commitAuthorOld": "Rubin Simons",
      "daysBetweenCommits": 4.24,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "@Test\r\npublic void testRegularPartialMatching() throws Exception {\r\n    CommandLineParser parser \u003d new DefaultParser();\r\n    final Options options \u003d new Options();\r\n    options.addOption(new Option(\"d\", \"debug\", false, \"Turn on debug.\"));\r\n    options.addOption(new Option(\"e\", \"extract\", false, \"Turn on extract.\"));\r\n    options.addOption(new Option(\"o\", \"option\", true, \"Turn on option with argument.\"));\r\n    CommandLine line \u003d parser.parse(options, new String[] { \"-de\", \"--option\u003dfoobar\" });\r\n    assertTrue(\"There should be an option debug in any case...\", line.hasOption(\"debug\"));\r\n    assertFalse(\"There should not be an extract option because partial matching only selects debug\", line.hasOption(\"extract\"));\r\n    assertTrue(\"There should be an option option with a argument value\", line.hasOption(\"option\"));\r\n}",
      "path": "src/test/java/org/apache/commons/cli/DisablePartialMatchingTest.java",
      "functionStartLine": 46,
      "functionName": "testRegularPartialMatching",
      "functionAnnotation": "@Test",
      "functionDoc": "",
      "diff": "@@ -1,10 +1,12 @@\n @Test\r\n public void testRegularPartialMatching() throws Exception {\r\n     CommandLineParser parser \u003d new DefaultParser();\r\n     final Options options \u003d new Options();\r\n     options.addOption(new Option(\"d\", \"debug\", false, \"Turn on debug.\"));\r\n     options.addOption(new Option(\"e\", \"extract\", false, \"Turn on extract.\"));\r\n-    CommandLine line \u003d parser.parse(options, new String[] { \"-de\" });\r\n+    options.addOption(new Option(\"o\", \"option\", true, \"Turn on option with argument.\"));\r\n+    CommandLine line \u003d parser.parse(options, new String[] { \"-de\", \"--option\u003dfoobar\" });\r\n     assertTrue(\"There should be an option debug in any case...\", line.hasOption(\"debug\"));\r\n     assertFalse(\"There should not be an extract option because partial matching only selects debug\", line.hasOption(\"extract\"));\r\n+    assertTrue(\"There should be an option option with a argument value\", line.hasOption(\"option\"));\r\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "4f17a89ad04bcf718aeac43d202f8c261ce0b796": {
      "type": "Yintroduced",
      "commitMessage": "Added tests for partial matching enable/disable\n",
      "commitDate": "6/23/17 2:04 PM",
      "commitName": "4f17a89ad04bcf718aeac43d202f8c261ce0b796",
      "commitAuthor": "Rubin Simons",
      "diff": "@@ -0,0 +1,10 @@\n+@Test\r\n+public void testRegularPartialMatching() throws Exception {\r\n+    CommandLineParser parser \u003d new DefaultParser();\r\n+    final Options options \u003d new Options();\r\n+    options.addOption(new Option(\"d\", \"debug\", false, \"Turn on debug.\"));\r\n+    options.addOption(new Option(\"e\", \"extract\", false, \"Turn on extract.\"));\r\n+    CommandLine line \u003d parser.parse(options, new String[] { \"-de\" });\r\n+    assertTrue(\"There should be an option debug in any case...\", line.hasOption(\"debug\"));\r\n+    assertFalse(\"There should not be an extract option because partial matching only selects debug\", line.hasOption(\"extract\"));\r\n+}\n\\ No newline at end of file\n",
      "actualSource": "@Test\r\npublic void testRegularPartialMatching() throws Exception {\r\n    CommandLineParser parser \u003d new DefaultParser();\r\n    final Options options \u003d new Options();\r\n    options.addOption(new Option(\"d\", \"debug\", false, \"Turn on debug.\"));\r\n    options.addOption(new Option(\"e\", \"extract\", false, \"Turn on extract.\"));\r\n    CommandLine line \u003d parser.parse(options, new String[] { \"-de\" });\r\n    assertTrue(\"There should be an option debug in any case...\", line.hasOption(\"debug\"));\r\n    assertFalse(\"There should not be an extract option because partial matching only selects debug\", line.hasOption(\"extract\"));\r\n}",
      "path": "src/test/java/org/apache/commons/cli/DisablePartialMatchingTest.java",
      "functionStartLine": 44,
      "functionName": "testRegularPartialMatching",
      "functionAnnotation": "@Test",
      "functionDoc": ""
    }
  }
}