{
  "origin": "codeshovel",
  "repositoryName": "commons-cli",
  "repositoryPath": "D:/_SELEN/_2022-2023/CS588/GitHub_Dataset/commons-cli/commons-cli/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "Parser.java",
  "functionName": "processOption",
  "functionId": "processOption___arg-String(modifiers-final)__iter-ListIterator__String__(modifiers-final)",
  "sourceFilePath": "src/main/java/org/apache/commons/cli/Parser.java",
  "functionAnnotation": "",
  "functionDoc": "Process the Option specified by {@code arg} using the values retrieved from the specified iterator\r\n{@code iter}.\r\n\r\n@param arg The String value representing an Option\r\n@param iter The iterator over the flattened command line arguments.\r\n@throws ParseException if {@code arg} does not represent an Option\r\n",
  "functionStartLine": 269,
  "functionEndLine": 290,
  "numCommitsSeen": 84,
  "timeTaken": 343,
  "changeHistory": [
    "9539506e87648d753c44b68b3dfbdd1938c09315",
    "bc0edc47dbf47cdaa3485cfb724982f377c900df",
    "c12260c05ebcd27558265395df79b8b049534fbd",
    "5fb9e5009a8cdc7366b7a762f0e43dc47decf67c",
    "357a8b0b8f1090db29e0d541a9419f570a78457b",
    "58139aefcacfa7954de1552c2ec5640ddbaf3713",
    "89f274efb8608738aeb71a18bb714f58acdc9cb5",
    "64322324b3bc415586e6c9557fa3e0a5171bd3de",
    "3936da9d3fe37bcd20dd37216d82608e5917be07",
    "5560a086886c4d6dba2c30eb75e57e3167765c6e",
    "1596f3bbe57986361da4ac1a23634dd5b00d10df",
    "147df44faa4eb12ffd4a0063fc3284f784ea67c8",
    "0a8de54ff89093fc8c5a2b00f7c0c856c5cbe57d",
    "20dfc60e4c04d9fd69fdedbcbe50020c7e798f3a",
    "298804b71d4e5f8b621f48a300f421229a3f5c86",
    "a8a8ec06a85a1090d560dc6cf236663da580863e",
    "9b2b8038b52be022e42c8c7fdf26e236888f94c5",
    "347bbeb8f98a49744501ac50850457ba8751d545",
    "436ef8b2ff7381e797436fc50d087d70b8032f40",
    "c08f73835beda155421d78ee4f96d9e11c501159",
    "dde69934d7f0bee13e4cd1fc99a7d60ce95a0c78",
    "4fbf5978d9473a2504a554cbe53dc29c49dd67b5",
    "f9df51847e354190206432ba87661586e6dc814d",
    "16b91ad2b9f5f524b2b07ba4515c65479999f7ee",
    "66d0ae6216730abd8bd736e210be73229c8e807b",
    "4cca25d72b216bfc8f2e75e4a99afb608ceb6df8",
    "aae50c585ec3ac33c6a9af792e80378904a73195"
  ],
  "changeHistoryShort": {
    "9539506e87648d753c44b68b3dfbdd1938c09315": "Ydocchange",
    "bc0edc47dbf47cdaa3485cfb724982f377c900df": "Ymultichange(Ydocchange,Yformatchange)",
    "c12260c05ebcd27558265395df79b8b049534fbd": "Yformatchange",
    "5fb9e5009a8cdc7366b7a762f0e43dc47decf67c": "Yparametermetachange",
    "357a8b0b8f1090db29e0d541a9419f570a78457b": "Ybodychange",
    "58139aefcacfa7954de1552c2ec5640ddbaf3713": "Ybodychange",
    "89f274efb8608738aeb71a18bb714f58acdc9cb5": "Ybodychange",
    "64322324b3bc415586e6c9557fa3e0a5171bd3de": "Ydocchange",
    "3936da9d3fe37bcd20dd37216d82608e5917be07": "Ymultichange(Yparameterchange,Ybodychange)",
    "5560a086886c4d6dba2c30eb75e57e3167765c6e": "Ybodychange",
    "1596f3bbe57986361da4ac1a23634dd5b00d10df": "Yfilerename",
    "147df44faa4eb12ffd4a0063fc3284f784ea67c8": "Ymultichange(Ydocchange,Yformatchange)",
    "0a8de54ff89093fc8c5a2b00f7c0c856c5cbe57d": "Ybodychange",
    "20dfc60e4c04d9fd69fdedbcbe50020c7e798f3a": "Ybodychange",
    "298804b71d4e5f8b621f48a300f421229a3f5c86": "Ymultichange(Ymodifierchange,Ybodychange)",
    "a8a8ec06a85a1090d560dc6cf236663da580863e": "Ybodychange",
    "9b2b8038b52be022e42c8c7fdf26e236888f94c5": "Ymultichange(Ydocchange,Yformatchange)",
    "347bbeb8f98a49744501ac50850457ba8751d545": "Ybodychange",
    "436ef8b2ff7381e797436fc50d087d70b8032f40": "Ybodychange",
    "c08f73835beda155421d78ee4f96d9e11c501159": "Ybodychange",
    "dde69934d7f0bee13e4cd1fc99a7d60ce95a0c78": "Ymultichange(Ymovefromfile,Ydocchange)",
    "4fbf5978d9473a2504a554cbe53dc29c49dd67b5": "Ybodychange",
    "f9df51847e354190206432ba87661586e6dc814d": "Ybodychange",
    "16b91ad2b9f5f524b2b07ba4515c65479999f7ee": "Ybodychange",
    "66d0ae6216730abd8bd736e210be73229c8e807b": "Ymultichange(Ymovefromfile,Yexceptionschange,Ybodychange,Ydocchange,Yparameterchange)",
    "4cca25d72b216bfc8f2e75e4a99afb608ceb6df8": "Ybodychange",
    "aae50c585ec3ac33c6a9af792e80378904a73195": "Yintroduced"
  },
  "changeHistoryDetails": {
    "9539506e87648d753c44b68b3dfbdd1938c09315": {
      "type": "Ydocchange",
      "commitMessage": "Javadoc: Use @code instead of HTML tags.\n",
      "commitDate": "10/4/21 12:32 AM",
      "commitName": "9539506e87648d753c44b68b3dfbdd1938c09315",
      "commitAuthor": "Gary Gregory",
      "commitDateOld": "10/3/21 2:32 AM",
      "commitNameOld": "b805e90dd082b4549ef4d565d13c6db8fdb96a5e",
      "commitAuthorOld": "Gary Gregory",
      "daysBetweenCommits": 0.92,
      "commitsBetweenForRepo": 5,
      "commitsBetweenForFile": 1,
      "actualSource": "protected void processOption(final String arg, final ListIterator\u003cString\u003e iter) throws ParseException {\r\n    final boolean hasOption \u003d getOptions().hasOption(arg);\r\n    if (!hasOption) {\r\n        throw new UnrecognizedOptionException(\"Unrecognized option: \" + arg, arg);\r\n    }\r\n    final Option opt \u003d (Option) getOptions().getOption(arg).clone();\r\n    updateRequiredOptions(opt);\r\n    if (opt.hasArg()) {\r\n        processArgs(opt, iter);\r\n    }\r\n    cmd.addOption(opt);\r\n}",
      "path": "src/main/java/org/apache/commons/cli/Parser.java",
      "functionStartLine": 259,
      "functionName": "processOption",
      "functionAnnotation": "",
      "functionDoc": "Process the Option specified by {@code arg} using the values retrieved from the specified iterator\r\n{@code iter}.\r\n\r\n@param arg The String value representing an Option\r\n@param iter The iterator over the flattened command line arguments.\r\n@throws ParseException if {@code arg} does not represent an Option\r\n",
      "diff": "",
      "extendedDetails": {
        "oldValue": "Process the Option specified by \u003ccode\u003earg\u003c/code\u003e using the values retrieved from the specified iterator\r\n\u003ccode\u003eiter\u003c/code\u003e.\r\n\r\n@param arg The String value representing an Option\r\n@param iter The iterator over the flattened command line arguments.\r\n@throws ParseException if \u003ccode\u003earg\u003c/code\u003e does not represent an Option\r\n",
        "newValue": "Process the Option specified by {@code arg} using the values retrieved from the specified iterator\r\n{@code iter}.\r\n\r\n@param arg The String value representing an Option\r\n@param iter The iterator over the flattened command line arguments.\r\n@throws ParseException if {@code arg} does not represent an Option\r\n"
      }
    },
    "bc0edc47dbf47cdaa3485cfb724982f377c900df": {
      "type": "Ymultichange(Ydocchange,Yformatchange)",
      "commitMessage": "Clean ups.\n\n- maven-checkstyle-plugin 3.1.1 -\u003e 3.1.2.\n- checkstyle -\u003e 9.0\n- Updates for 21st century.\n- No need to nest else clause.\n- Use simple array declarations.\n- Use valueOf instead of new for Numbers.\n- Consistent formatting.\n- Remove some inline comments //-----...\n",
      "commitDate": "10/2/21 11:04 PM",
      "commitName": "bc0edc47dbf47cdaa3485cfb724982f377c900df",
      "commitAuthor": "Gary Gregory",
      "subchanges": [
        {
          "type": "Ydocchange",
          "commitMessage": "Clean ups.\n\n- maven-checkstyle-plugin 3.1.1 -\u003e 3.1.2.\n- checkstyle -\u003e 9.0\n- Updates for 21st century.\n- No need to nest else clause.\n- Use simple array declarations.\n- Use valueOf instead of new for Numbers.\n- Consistent formatting.\n- Remove some inline comments //-----...\n",
          "commitDate": "10/2/21 11:04 PM",
          "commitName": "bc0edc47dbf47cdaa3485cfb724982f377c900df",
          "commitAuthor": "Gary Gregory",
          "commitDateOld": "2/8/21 10:11 PM",
          "commitNameOld": "66cc7b4cb8b0f39edfe0ee37eead4ace04a7be4e",
          "commitAuthorOld": "Gary Gregory",
          "daysBetweenCommits": 236.04,
          "commitsBetweenForRepo": 22,
          "commitsBetweenForFile": 1,
          "actualSource": "protected void processOption(final String arg, final ListIterator\u003cString\u003e iter) throws ParseException {\r\n    final boolean hasOption \u003d getOptions().hasOption(arg);\r\n    if (!hasOption) {\r\n        throw new UnrecognizedOptionException(\"Unrecognized option: \" + arg, arg);\r\n    }\r\n    final Option opt \u003d (Option) getOptions().getOption(arg).clone();\r\n    updateRequiredOptions(opt);\r\n    if (opt.hasArg()) {\r\n        processArgs(opt, iter);\r\n    }\r\n    cmd.addOption(opt);\r\n}",
          "path": "src/main/java/org/apache/commons/cli/Parser.java",
          "functionStartLine": 312,
          "functionName": "processOption",
          "functionAnnotation": "",
          "functionDoc": "Process the Option specified by \u003ccode\u003earg\u003c/code\u003e using the values retrieved from the specified iterator\r\n\u003ccode\u003eiter\u003c/code\u003e.\r\n\r\n@param arg The String value representing an Option\r\n@param iter The iterator over the flattened command line arguments.\r\n@throws ParseException if \u003ccode\u003earg\u003c/code\u003e does not represent an Option\r\n",
          "diff": "",
          "extendedDetails": {
            "oldValue": "Process the Option specified by \u003ccode\u003earg\u003c/code\u003e using the values\r\nretrieved from the specified iterator \u003ccode\u003eiter\u003c/code\u003e.\r\n\r\n@param arg The String value representing an Option\r\n@param iter The iterator over the flattened command line arguments.\r\n@throws ParseException if \u003ccode\u003earg\u003c/code\u003e does not represent an Option\r\n",
            "newValue": "Process the Option specified by \u003ccode\u003earg\u003c/code\u003e using the values retrieved from the specified iterator\r\n\u003ccode\u003eiter\u003c/code\u003e.\r\n\r\n@param arg The String value representing an Option\r\n@param iter The iterator over the flattened command line arguments.\r\n@throws ParseException if \u003ccode\u003earg\u003c/code\u003e does not represent an Option\r\n"
          }
        },
        {
          "type": "Yformatchange",
          "commitMessage": "Clean ups.\n\n- maven-checkstyle-plugin 3.1.1 -\u003e 3.1.2.\n- checkstyle -\u003e 9.0\n- Updates for 21st century.\n- No need to nest else clause.\n- Use simple array declarations.\n- Use valueOf instead of new for Numbers.\n- Consistent formatting.\n- Remove some inline comments //-----...\n",
          "commitDate": "10/2/21 11:04 PM",
          "commitName": "bc0edc47dbf47cdaa3485cfb724982f377c900df",
          "commitAuthor": "Gary Gregory",
          "commitDateOld": "2/8/21 10:11 PM",
          "commitNameOld": "66cc7b4cb8b0f39edfe0ee37eead4ace04a7be4e",
          "commitAuthorOld": "Gary Gregory",
          "daysBetweenCommits": 236.04,
          "commitsBetweenForRepo": 22,
          "commitsBetweenForFile": 1,
          "actualSource": "protected void processOption(final String arg, final ListIterator\u003cString\u003e iter) throws ParseException {\r\n    final boolean hasOption \u003d getOptions().hasOption(arg);\r\n    if (!hasOption) {\r\n        throw new UnrecognizedOptionException(\"Unrecognized option: \" + arg, arg);\r\n    }\r\n    final Option opt \u003d (Option) getOptions().getOption(arg).clone();\r\n    updateRequiredOptions(opt);\r\n    if (opt.hasArg()) {\r\n        processArgs(opt, iter);\r\n    }\r\n    cmd.addOption(opt);\r\n}",
          "path": "src/main/java/org/apache/commons/cli/Parser.java",
          "functionStartLine": 312,
          "functionName": "processOption",
          "functionAnnotation": "",
          "functionDoc": "Process the Option specified by \u003ccode\u003earg\u003c/code\u003e using the values retrieved from the specified iterator\r\n\u003ccode\u003eiter\u003c/code\u003e.\r\n\r\n@param arg The String value representing an Option\r\n@param iter The iterator over the flattened command line arguments.\r\n@throws ParseException if \u003ccode\u003earg\u003c/code\u003e does not represent an Option\r\n",
          "diff": "",
          "extendedDetails": {}
        }
      ]
    },
    "c12260c05ebcd27558265395df79b8b049534fbd": {
      "type": "Yformatchange",
      "commitMessage": "Remove trailing white spaces on all lines.\n",
      "commitDate": "12/18/19 11:28 PM",
      "commitName": "c12260c05ebcd27558265395df79b8b049534fbd",
      "commitAuthor": "Gary Gregory",
      "commitDateOld": "2/17/19 8:49 PM",
      "commitNameOld": "c5536b7f82862fe798ae91cd4b4a8a2df049d06a",
      "commitAuthorOld": "Benedikt Ritter",
      "daysBetweenCommits": 304.11,
      "commitsBetweenForRepo": 15,
      "commitsBetweenForFile": 1,
      "actualSource": "protected void processOption(final String arg, final ListIterator\u003cString\u003e iter) throws ParseException {\r\n    final boolean hasOption \u003d getOptions().hasOption(arg);\r\n    if (!hasOption) {\r\n        throw new UnrecognizedOptionException(\"Unrecognized option: \" + arg, arg);\r\n    }\r\n    final Option opt \u003d (Option) getOptions().getOption(arg).clone();\r\n    updateRequiredOptions(opt);\r\n    if (opt.hasArg()) {\r\n        processArgs(opt, iter);\r\n    }\r\n    cmd.addOption(opt);\r\n}",
      "path": "src/main/java/org/apache/commons/cli/Parser.java",
      "functionStartLine": 375,
      "functionName": "processOption",
      "functionAnnotation": "",
      "functionDoc": "Process the Option specified by \u003ccode\u003earg\u003c/code\u003e using the values\r\nretrieved from the specified iterator \u003ccode\u003eiter\u003c/code\u003e.\r\n\r\n@param arg The String value representing an Option\r\n@param iter The iterator over the flattened command line arguments.\r\n@throws ParseException if \u003ccode\u003earg\u003c/code\u003e does not represent an Option\r\n",
      "diff": "",
      "extendedDetails": {}
    },
    "5fb9e5009a8cdc7366b7a762f0e43dc47decf67c": {
      "type": "Yparametermetachange",
      "commitMessage": "Add final modifier to method parameters.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/cli/trunk@1797674 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "6/5/17 7:38 PM",
      "commitName": "5fb9e5009a8cdc7366b7a762f0e43dc47decf67c",
      "commitAuthor": "Gary D. Gregory",
      "commitDateOld": "6/5/17 7:37 PM",
      "commitNameOld": "357a8b0b8f1090db29e0d541a9419f570a78457b",
      "commitAuthorOld": "Gary D. Gregory",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "protected void processOption(final String arg, final ListIterator\u003cString\u003e iter) throws ParseException {\r\n    final boolean hasOption \u003d getOptions().hasOption(arg);\r\n    if (!hasOption) {\r\n        throw new UnrecognizedOptionException(\"Unrecognized option: \" + arg, arg);\r\n    }\r\n    final Option opt \u003d (Option) getOptions().getOption(arg).clone();\r\n    updateRequiredOptions(opt);\r\n    if (opt.hasArg()) {\r\n        processArgs(opt, iter);\r\n    }\r\n    cmd.addOption(opt);\r\n}",
      "path": "src/main/java/org/apache/commons/cli/Parser.java",
      "functionStartLine": 376,
      "functionName": "processOption",
      "functionAnnotation": "",
      "functionDoc": "Process the Option specified by \u003ccode\u003earg\u003c/code\u003e using the values\r\nretrieved from the specified iterator \u003ccode\u003eiter\u003c/code\u003e.\r\n\r\n@param arg The String value representing an Option\r\n@param iter The iterator over the flattened command line arguments.\r\n@throws ParseException if \u003ccode\u003earg\u003c/code\u003e does not represent an Option\r\n",
      "diff": "@@ -1,12 +1,12 @@\n-protected void processOption(String arg, ListIterator\u003cString\u003e iter) throws ParseException {\r\n+protected void processOption(final String arg, final ListIterator\u003cString\u003e iter) throws ParseException {\r\n     final boolean hasOption \u003d getOptions().hasOption(arg);\r\n     if (!hasOption) {\r\n         throw new UnrecognizedOptionException(\"Unrecognized option: \" + arg, arg);\r\n     }\r\n     final Option opt \u003d (Option) getOptions().getOption(arg).clone();\r\n     updateRequiredOptions(opt);\r\n     if (opt.hasArg()) {\r\n         processArgs(opt, iter);\r\n     }\r\n     cmd.addOption(opt);\r\n }\n\\ No newline at end of file\n",
      "extendedDetails": {
        "oldValue": "[arg-String, iter-ListIterator\u003cString\u003e]",
        "newValue": "[arg-String(modifiers-final), iter-ListIterator\u003cString\u003e(modifiers-final)]"
      }
    },
    "357a8b0b8f1090db29e0d541a9419f570a78457b": {
      "type": "Ybodychange",
      "commitMessage": "Add final modifier to local variables.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/cli/trunk@1797673 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "6/5/17 7:37 PM",
      "commitName": "357a8b0b8f1090db29e0d541a9419f570a78457b",
      "commitAuthor": "Gary D. Gregory",
      "commitDateOld": "5/21/16 2:36 AM",
      "commitNameOld": "58139aefcacfa7954de1552c2ec5640ddbaf3713",
      "commitAuthorOld": "Gary D. Gregory",
      "daysBetweenCommits": 380.71,
      "commitsBetweenForRepo": 35,
      "commitsBetweenForFile": 1,
      "actualSource": "protected void processOption(String arg, ListIterator\u003cString\u003e iter) throws ParseException {\r\n    final boolean hasOption \u003d getOptions().hasOption(arg);\r\n    if (!hasOption) {\r\n        throw new UnrecognizedOptionException(\"Unrecognized option: \" + arg, arg);\r\n    }\r\n    final Option opt \u003d (Option) getOptions().getOption(arg).clone();\r\n    updateRequiredOptions(opt);\r\n    if (opt.hasArg()) {\r\n        processArgs(opt, iter);\r\n    }\r\n    cmd.addOption(opt);\r\n}",
      "path": "src/main/java/org/apache/commons/cli/Parser.java",
      "functionStartLine": 376,
      "functionName": "processOption",
      "functionAnnotation": "",
      "functionDoc": "Process the Option specified by \u003ccode\u003earg\u003c/code\u003e using the values\r\nretrieved from the specified iterator \u003ccode\u003eiter\u003c/code\u003e.\r\n\r\n@param arg The String value representing an Option\r\n@param iter The iterator over the flattened command line arguments.\r\n@throws ParseException if \u003ccode\u003earg\u003c/code\u003e does not represent an Option\r\n",
      "diff": "@@ -1,12 +1,12 @@\n protected void processOption(String arg, ListIterator\u003cString\u003e iter) throws ParseException {\r\n-    boolean hasOption \u003d getOptions().hasOption(arg);\r\n+    final boolean hasOption \u003d getOptions().hasOption(arg);\r\n     if (!hasOption) {\r\n         throw new UnrecognizedOptionException(\"Unrecognized option: \" + arg, arg);\r\n     }\r\n-    Option opt \u003d (Option) getOptions().getOption(arg).clone();\r\n+    final Option opt \u003d (Option) getOptions().getOption(arg).clone();\r\n     updateRequiredOptions(opt);\r\n     if (opt.hasArg()) {\r\n         processArgs(opt, iter);\r\n     }\r\n     cmd.addOption(opt);\r\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "58139aefcacfa7954de1552c2ec5640ddbaf3713": {
      "type": "Ybodychange",
      "commitMessage": "Standardize on US English spelling (recognised -\u003e recognized.)\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/cli/trunk@1744812 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "5/21/16 2:36 AM",
      "commitName": "58139aefcacfa7954de1552c2ec5640ddbaf3713",
      "commitAuthor": "Gary D. Gregory",
      "commitDateOld": "5/3/15 5:27 PM",
      "commitNameOld": "10090594827c3c90b9c0a5c8288cda448b0ce10c",
      "commitAuthorOld": "Benedikt Ritter",
      "daysBetweenCommits": 383.38,
      "commitsBetweenForRepo": 21,
      "commitsBetweenForFile": 1,
      "actualSource": "protected void processOption(String arg, ListIterator\u003cString\u003e iter) throws ParseException {\r\n    boolean hasOption \u003d getOptions().hasOption(arg);\r\n    if (!hasOption) {\r\n        throw new UnrecognizedOptionException(\"Unrecognized option: \" + arg, arg);\r\n    }\r\n    Option opt \u003d (Option) getOptions().getOption(arg).clone();\r\n    updateRequiredOptions(opt);\r\n    if (opt.hasArg()) {\r\n        processArgs(opt, iter);\r\n    }\r\n    cmd.addOption(opt);\r\n}",
      "path": "src/main/java/org/apache/commons/cli/Parser.java",
      "functionStartLine": 376,
      "functionName": "processOption",
      "functionAnnotation": "",
      "functionDoc": "Process the Option specified by \u003ccode\u003earg\u003c/code\u003e using the values\r\nretrieved from the specified iterator \u003ccode\u003eiter\u003c/code\u003e.\r\n\r\n@param arg The String value representing an Option\r\n@param iter The iterator over the flattened command line arguments.\r\n@throws ParseException if \u003ccode\u003earg\u003c/code\u003e does not represent an Option\r\n",
      "diff": "",
      "extendedDetails": {}
    },
    "89f274efb8608738aeb71a18bb714f58acdc9cb5": {
      "type": "Ybodychange",
      "commitMessage": "Fix Clirr error wrt return type of Option#clone().\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/cli/trunk@1439565 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "1/28/13 8:59 PM",
      "commitName": "89f274efb8608738aeb71a18bb714f58acdc9cb5",
      "commitAuthor": "Thomas Neidhart",
      "commitDateOld": "1/28/13 4:31 PM",
      "commitNameOld": "7602e1653c3c16ccb2955da750f6c3f7c539b146",
      "commitAuthorOld": "Thomas Neidhart",
      "daysBetweenCommits": 0.19,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "protected void processOption(String arg, ListIterator\u003cString\u003e iter) throws ParseException {\r\n    boolean hasOption \u003d getOptions().hasOption(arg);\r\n    if (!hasOption) {\r\n        throw new UnrecognizedOptionException(\"Unrecognized option: \" + arg, arg);\r\n    }\r\n    Option opt \u003d (Option) getOptions().getOption(arg).clone();\r\n    updateRequiredOptions(opt);\r\n    if (opt.hasArg()) {\r\n        processArgs(opt, iter);\r\n    }\r\n    cmd.addOption(opt);\r\n}",
      "path": "src/main/java/org/apache/commons/cli/Parser.java",
      "functionStartLine": 372,
      "functionName": "processOption",
      "functionAnnotation": "",
      "functionDoc": "Process the Option specified by \u003ccode\u003earg\u003c/code\u003e using the values\r\nretrieved from the specified iterator \u003ccode\u003eiter\u003c/code\u003e.\r\n\r\n@param arg The String value representing an Option\r\n@param iter The iterator over the flattened command line arguments.\r\n@throws ParseException if \u003ccode\u003earg\u003c/code\u003e does not represent an Option\r\n",
      "diff": "@@ -1,12 +1,12 @@\n protected void processOption(String arg, ListIterator\u003cString\u003e iter) throws ParseException {\r\n     boolean hasOption \u003d getOptions().hasOption(arg);\r\n     if (!hasOption) {\r\n         throw new UnrecognizedOptionException(\"Unrecognized option: \" + arg, arg);\r\n     }\r\n-    Option opt \u003d getOptions().getOption(arg).clone();\r\n+    Option opt \u003d (Option) getOptions().getOption(arg).clone();\r\n     updateRequiredOptions(opt);\r\n     if (opt.hasArg()) {\r\n         processArgs(opt, iter);\r\n     }\r\n     cmd.addOption(opt);\r\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "64322324b3bc415586e6c9557fa3e0a5171bd3de": {
      "type": "Ydocchange",
      "commitMessage": "Fix typos.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/cli/trunk@1439189 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "1/27/13 11:36 PM",
      "commitName": "64322324b3bc415586e6c9557fa3e0a5171bd3de",
      "commitAuthor": "Thomas Neidhart",
      "commitDateOld": "10/30/12 7:24 PM",
      "commitNameOld": "3936da9d3fe37bcd20dd37216d82608e5917be07",
      "commitAuthorOld": "Emmanuel Bourg",
      "daysBetweenCommits": 89.17,
      "commitsBetweenForRepo": 13,
      "commitsBetweenForFile": 1,
      "actualSource": "protected void processOption(String arg, ListIterator\u003cString\u003e iter) throws ParseException {\r\n    boolean hasOption \u003d getOptions().hasOption(arg);\r\n    if (!hasOption) {\r\n        throw new UnrecognizedOptionException(\"Unrecognized option: \" + arg, arg);\r\n    }\r\n    Option opt \u003d getOptions().getOption(arg).clone();\r\n    updateRequiredOptions(opt);\r\n    if (opt.hasArg()) {\r\n        processArgs(opt, iter);\r\n    }\r\n    cmd.addOption(opt);\r\n}",
      "path": "src/main/java/org/apache/commons/cli/Parser.java",
      "functionStartLine": 368,
      "functionName": "processOption",
      "functionAnnotation": "",
      "functionDoc": "Process the Option specified by \u003ccode\u003earg\u003c/code\u003e using the values\r\nretrieved from the specified iterator \u003ccode\u003eiter\u003c/code\u003e.\r\n\r\n@param arg The String value representing an Option\r\n@param iter The iterator over the flattened command line arguments.\r\n@throws ParseException if \u003ccode\u003earg\u003c/code\u003e does not represent an Option\r\n",
      "diff": "",
      "extendedDetails": {
        "oldValue": "Process the Option specified by \u003ccode\u003earg\u003c/code\u003e using the values\r\nretrieved from the specfied iterator \u003ccode\u003eiter\u003c/code\u003e.\r\n\r\n@param arg The String value representing an Option\r\n@param iter The iterator over the flattened command line arguments.\r\n@throws ParseException if \u003ccode\u003earg\u003c/code\u003e does not represent an Option\r\n",
        "newValue": "Process the Option specified by \u003ccode\u003earg\u003c/code\u003e using the values\r\nretrieved from the specified iterator \u003ccode\u003eiter\u003c/code\u003e.\r\n\r\n@param arg The String value representing an Option\r\n@param iter The iterator over the flattened command line arguments.\r\n@throws ParseException if \u003ccode\u003earg\u003c/code\u003e does not represent an Option\r\n"
      }
    },
    "3936da9d3fe37bcd20dd37216d82608e5917be07": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "Minor syntax changes\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/cli/trunk@1403792 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "10/30/12 7:24 PM",
      "commitName": "3936da9d3fe37bcd20dd37216d82608e5917be07",
      "commitAuthor": "Emmanuel Bourg",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "Minor syntax changes\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/cli/trunk@1403792 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "10/30/12 7:24 PM",
          "commitName": "3936da9d3fe37bcd20dd37216d82608e5917be07",
          "commitAuthor": "Emmanuel Bourg",
          "commitDateOld": "12/15/11 12:30 PM",
          "commitNameOld": "97ddfd9dc79cc0fd5044f754f5e74818387567c3",
          "commitAuthorOld": "Emmanuel Bourg",
          "daysBetweenCommits": 320.29,
          "commitsBetweenForRepo": 4,
          "commitsBetweenForFile": 1,
          "actualSource": "protected void processOption(String arg, ListIterator\u003cString\u003e iter) throws ParseException {\r\n    boolean hasOption \u003d getOptions().hasOption(arg);\r\n    if (!hasOption) {\r\n        throw new UnrecognizedOptionException(\"Unrecognized option: \" + arg, arg);\r\n    }\r\n    Option opt \u003d getOptions().getOption(arg).clone();\r\n    updateRequiredOptions(opt);\r\n    if (opt.hasArg()) {\r\n        processArgs(opt, iter);\r\n    }\r\n    cmd.addOption(opt);\r\n}",
          "path": "src/main/java/org/apache/commons/cli/Parser.java",
          "functionStartLine": 368,
          "functionName": "processOption",
          "functionAnnotation": "",
          "functionDoc": "Process the Option specified by \u003ccode\u003earg\u003c/code\u003e using the values\r\nretrieved from the specfied iterator \u003ccode\u003eiter\u003c/code\u003e.\r\n\r\n@param arg The String value representing an Option\r\n@param iter The iterator over the flattened command line arguments.\r\n@throws ParseException if \u003ccode\u003earg\u003c/code\u003e does not represent an Option\r\n",
          "diff": "@@ -1,12 +1,12 @@\n-protected void processOption(String arg, ListIterator iter) throws ParseException {\r\n+protected void processOption(String arg, ListIterator\u003cString\u003e iter) throws ParseException {\r\n     boolean hasOption \u003d getOptions().hasOption(arg);\r\n     if (!hasOption) {\r\n         throw new UnrecognizedOptionException(\"Unrecognized option: \" + arg, arg);\r\n     }\r\n-    Option opt \u003d (Option) getOptions().getOption(arg).clone();\r\n+    Option opt \u003d getOptions().getOption(arg).clone();\r\n     updateRequiredOptions(opt);\r\n     if (opt.hasArg()) {\r\n         processArgs(opt, iter);\r\n     }\r\n     cmd.addOption(opt);\r\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[arg-String, iter-ListIterator]",
            "newValue": "[arg-String, iter-ListIterator\u003cString\u003e]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Minor syntax changes\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/cli/trunk@1403792 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "10/30/12 7:24 PM",
          "commitName": "3936da9d3fe37bcd20dd37216d82608e5917be07",
          "commitAuthor": "Emmanuel Bourg",
          "commitDateOld": "12/15/11 12:30 PM",
          "commitNameOld": "97ddfd9dc79cc0fd5044f754f5e74818387567c3",
          "commitAuthorOld": "Emmanuel Bourg",
          "daysBetweenCommits": 320.29,
          "commitsBetweenForRepo": 4,
          "commitsBetweenForFile": 1,
          "actualSource": "protected void processOption(String arg, ListIterator\u003cString\u003e iter) throws ParseException {\r\n    boolean hasOption \u003d getOptions().hasOption(arg);\r\n    if (!hasOption) {\r\n        throw new UnrecognizedOptionException(\"Unrecognized option: \" + arg, arg);\r\n    }\r\n    Option opt \u003d getOptions().getOption(arg).clone();\r\n    updateRequiredOptions(opt);\r\n    if (opt.hasArg()) {\r\n        processArgs(opt, iter);\r\n    }\r\n    cmd.addOption(opt);\r\n}",
          "path": "src/main/java/org/apache/commons/cli/Parser.java",
          "functionStartLine": 368,
          "functionName": "processOption",
          "functionAnnotation": "",
          "functionDoc": "Process the Option specified by \u003ccode\u003earg\u003c/code\u003e using the values\r\nretrieved from the specfied iterator \u003ccode\u003eiter\u003c/code\u003e.\r\n\r\n@param arg The String value representing an Option\r\n@param iter The iterator over the flattened command line arguments.\r\n@throws ParseException if \u003ccode\u003earg\u003c/code\u003e does not represent an Option\r\n",
          "diff": "@@ -1,12 +1,12 @@\n-protected void processOption(String arg, ListIterator iter) throws ParseException {\r\n+protected void processOption(String arg, ListIterator\u003cString\u003e iter) throws ParseException {\r\n     boolean hasOption \u003d getOptions().hasOption(arg);\r\n     if (!hasOption) {\r\n         throw new UnrecognizedOptionException(\"Unrecognized option: \" + arg, arg);\r\n     }\r\n-    Option opt \u003d (Option) getOptions().getOption(arg).clone();\r\n+    Option opt \u003d getOptions().getOption(arg).clone();\r\n     updateRequiredOptions(opt);\r\n     if (opt.hasArg()) {\r\n         processArgs(opt, iter);\r\n     }\r\n     cmd.addOption(opt);\r\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        }
      ]
    },
    "5560a086886c4d6dba2c30eb75e57e3167765c6e": {
      "type": "Ybodychange",
      "commitMessage": "Default options are now taken into account for the required options (CLI-202)\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/cli/trunk@955420 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "6/17/10 1:59 AM",
      "commitName": "5560a086886c4d6dba2c30eb75e57e3167765c6e",
      "commitAuthor": "Emmanuel Bourg",
      "commitDateOld": "6/16/10 12:45 PM",
      "commitNameOld": "1596f3bbe57986361da4ac1a23634dd5b00d10df",
      "commitAuthorOld": "Emmanuel Bourg",
      "daysBetweenCommits": 0.55,
      "commitsBetweenForRepo": 6,
      "commitsBetweenForFile": 1,
      "actualSource": "protected void processOption(String arg, ListIterator iter) throws ParseException {\r\n    boolean hasOption \u003d getOptions().hasOption(arg);\r\n    if (!hasOption) {\r\n        throw new UnrecognizedOptionException(\"Unrecognized option: \" + arg, arg);\r\n    }\r\n    Option opt \u003d (Option) getOptions().getOption(arg).clone();\r\n    updateRequiredOptions(opt);\r\n    if (opt.hasArg()) {\r\n        processArgs(opt, iter);\r\n    }\r\n    cmd.addOption(opt);\r\n}",
      "path": "src/main/java/org/apache/commons/cli/Parser.java",
      "functionStartLine": 368,
      "functionName": "processOption",
      "functionAnnotation": "",
      "functionDoc": "Process the Option specified by \u003ccode\u003earg\u003c/code\u003e using the values\r\nretrieved from the specfied iterator \u003ccode\u003eiter\u003c/code\u003e.\r\n\r\n@param arg The String value representing an Option\r\n@param iter The iterator over the flattened command line arguments.\r\n@throws ParseException if \u003ccode\u003earg\u003c/code\u003e does not represent an Option\r\n",
      "diff": "@@ -1,21 +1,12 @@\n protected void processOption(String arg, ListIterator iter) throws ParseException {\r\n     boolean hasOption \u003d getOptions().hasOption(arg);\r\n     if (!hasOption) {\r\n         throw new UnrecognizedOptionException(\"Unrecognized option: \" + arg, arg);\r\n     }\r\n     Option opt \u003d (Option) getOptions().getOption(arg).clone();\r\n-    if (opt.isRequired()) {\r\n-        getRequiredOptions().remove(opt.getKey());\r\n-    }\r\n-    if (getOptions().getOptionGroup(opt) !\u003d null) {\r\n-        OptionGroup group \u003d getOptions().getOptionGroup(opt);\r\n-        if (group.isRequired()) {\r\n-            getRequiredOptions().remove(group);\r\n-        }\r\n-        group.setSelected(opt);\r\n-    }\r\n+    updateRequiredOptions(opt);\r\n     if (opt.hasArg()) {\r\n         processArgs(opt, iter);\r\n     }\r\n     cmd.addOption(opt);\r\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "1596f3bbe57986361da4ac1a23634dd5b00d10df": {
      "type": "Yfilerename",
      "commitMessage": "Switched to the Maven 2 default directory layout (part 3)\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/cli/trunk@955173 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "6/16/10 12:45 PM",
      "commitName": "1596f3bbe57986361da4ac1a23634dd5b00d10df",
      "commitAuthor": "Emmanuel Bourg",
      "commitDateOld": "6/16/10 12:42 PM",
      "commitNameOld": "406a35f1a128944b7c51dcbc4a1f04c3f8bec3e6",
      "commitAuthorOld": "Emmanuel Bourg",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "protected void processOption(String arg, ListIterator iter) throws ParseException {\r\n    boolean hasOption \u003d getOptions().hasOption(arg);\r\n    if (!hasOption) {\r\n        throw new UnrecognizedOptionException(\"Unrecognized option: \" + arg, arg);\r\n    }\r\n    Option opt \u003d (Option) getOptions().getOption(arg).clone();\r\n    if (opt.isRequired()) {\r\n        getRequiredOptions().remove(opt.getKey());\r\n    }\r\n    if (getOptions().getOptionGroup(opt) !\u003d null) {\r\n        OptionGroup group \u003d getOptions().getOptionGroup(opt);\r\n        if (group.isRequired()) {\r\n            getRequiredOptions().remove(group);\r\n        }\r\n        group.setSelected(opt);\r\n    }\r\n    if (opt.hasArg()) {\r\n        processArgs(opt, iter);\r\n    }\r\n    cmd.addOption(opt);\r\n}",
      "path": "src/main/java/org/apache/commons/cli/Parser.java",
      "functionStartLine": 367,
      "functionName": "processOption",
      "functionAnnotation": "",
      "functionDoc": "Process the Option specified by \u003ccode\u003earg\u003c/code\u003e using the values\r\nretrieved from the specfied iterator \u003ccode\u003eiter\u003c/code\u003e.\r\n\r\n@param arg The String value representing an Option\r\n@param iter The iterator over the flattened command line arguments.\r\n@throws ParseException if \u003ccode\u003earg\u003c/code\u003e does not represent an Option\r\n",
      "diff": "",
      "extendedDetails": {
        "oldPath": "src/java/org/apache/commons/cli/Parser.java",
        "newPath": "src/main/java/org/apache/commons/cli/Parser.java"
      }
    },
    "147df44faa4eb12ffd4a0063fc3284f784ea67c8": {
      "type": "Ymultichange(Ydocchange,Yformatchange)",
      "commitMessage": "Style update\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/cli/branches/cli-1.x@680644 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "7/29/08 11:13 AM",
      "commitName": "147df44faa4eb12ffd4a0063fc3284f784ea67c8",
      "commitAuthor": "Emmanuel Bourg",
      "subchanges": [
        {
          "type": "Ydocchange",
          "commitMessage": "Style update\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/cli/branches/cli-1.x@680644 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "7/29/08 11:13 AM",
          "commitName": "147df44faa4eb12ffd4a0063fc3284f784ea67c8",
          "commitAuthor": "Emmanuel Bourg",
          "commitDateOld": "7/25/08 1:25 AM",
          "commitNameOld": "0a8de54ff89093fc8c5a2b00f7c0c856c5cbe57d",
          "commitAuthorOld": "Emmanuel Bourg",
          "daysBetweenCommits": 4.41,
          "commitsBetweenForRepo": 11,
          "commitsBetweenForFile": 1,
          "actualSource": "protected void processOption(String arg, ListIterator iter) throws ParseException {\r\n    boolean hasOption \u003d getOptions().hasOption(arg);\r\n    if (!hasOption) {\r\n        throw new UnrecognizedOptionException(\"Unrecognized option: \" + arg, arg);\r\n    }\r\n    Option opt \u003d (Option) getOptions().getOption(arg).clone();\r\n    if (opt.isRequired()) {\r\n        getRequiredOptions().remove(opt.getKey());\r\n    }\r\n    if (getOptions().getOptionGroup(opt) !\u003d null) {\r\n        OptionGroup group \u003d getOptions().getOptionGroup(opt);\r\n        if (group.isRequired()) {\r\n            getRequiredOptions().remove(group);\r\n        }\r\n        group.setSelected(opt);\r\n    }\r\n    if (opt.hasArg()) {\r\n        processArgs(opt, iter);\r\n    }\r\n    cmd.addOption(opt);\r\n}",
          "path": "src/java/org/apache/commons/cli/Parser.java",
          "functionStartLine": 356,
          "functionName": "processOption",
          "functionAnnotation": "",
          "functionDoc": "Process the Option specified by \u003ccode\u003earg\u003c/code\u003e using the values\r\nretrieved from the specfied iterator \u003ccode\u003eiter\u003c/code\u003e.\r\n\r\n@param arg The String value representing an Option\r\n@param iter The iterator over the flattened command line arguments.\r\n@throws ParseException if \u003ccode\u003earg\u003c/code\u003e does not represent an Option\r\n",
          "diff": "",
          "extendedDetails": {
            "oldValue": "\u003cp\u003eProcess the Option specified by \u003ccode\u003earg\u003c/code\u003e\r\nusing the values retrieved from the specfied iterator\r\n\u003ccode\u003eiter\u003c/code\u003e.\r\n\r\n@param arg The String value representing an Option\r\n@param iter The iterator over the flattened command \r\nline arguments.\r\n@throws ParseException if \u003ccode\u003earg\u003c/code\u003e does not\r\nrepresent an Option\r\n",
            "newValue": "Process the Option specified by \u003ccode\u003earg\u003c/code\u003e using the values\r\nretrieved from the specfied iterator \u003ccode\u003eiter\u003c/code\u003e.\r\n\r\n@param arg The String value representing an Option\r\n@param iter The iterator over the flattened command line arguments.\r\n@throws ParseException if \u003ccode\u003earg\u003c/code\u003e does not represent an Option\r\n"
          }
        },
        {
          "type": "Yformatchange",
          "commitMessage": "Style update\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/cli/branches/cli-1.x@680644 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "7/29/08 11:13 AM",
          "commitName": "147df44faa4eb12ffd4a0063fc3284f784ea67c8",
          "commitAuthor": "Emmanuel Bourg",
          "commitDateOld": "7/25/08 1:25 AM",
          "commitNameOld": "0a8de54ff89093fc8c5a2b00f7c0c856c5cbe57d",
          "commitAuthorOld": "Emmanuel Bourg",
          "daysBetweenCommits": 4.41,
          "commitsBetweenForRepo": 11,
          "commitsBetweenForFile": 1,
          "actualSource": "protected void processOption(String arg, ListIterator iter) throws ParseException {\r\n    boolean hasOption \u003d getOptions().hasOption(arg);\r\n    if (!hasOption) {\r\n        throw new UnrecognizedOptionException(\"Unrecognized option: \" + arg, arg);\r\n    }\r\n    Option opt \u003d (Option) getOptions().getOption(arg).clone();\r\n    if (opt.isRequired()) {\r\n        getRequiredOptions().remove(opt.getKey());\r\n    }\r\n    if (getOptions().getOptionGroup(opt) !\u003d null) {\r\n        OptionGroup group \u003d getOptions().getOptionGroup(opt);\r\n        if (group.isRequired()) {\r\n            getRequiredOptions().remove(group);\r\n        }\r\n        group.setSelected(opt);\r\n    }\r\n    if (opt.hasArg()) {\r\n        processArgs(opt, iter);\r\n    }\r\n    cmd.addOption(opt);\r\n}",
          "path": "src/java/org/apache/commons/cli/Parser.java",
          "functionStartLine": 356,
          "functionName": "processOption",
          "functionAnnotation": "",
          "functionDoc": "Process the Option specified by \u003ccode\u003earg\u003c/code\u003e using the values\r\nretrieved from the specfied iterator \u003ccode\u003eiter\u003c/code\u003e.\r\n\r\n@param arg The String value representing an Option\r\n@param iter The iterator over the flattened command line arguments.\r\n@throws ParseException if \u003ccode\u003earg\u003c/code\u003e does not represent an Option\r\n",
          "diff": "",
          "extendedDetails": {}
        }
      ]
    },
    "0a8de54ff89093fc8c5a2b00f7c0c856c5cbe57d": {
      "type": "Ybodychange",
      "commitMessage": "Changed UnrecognizedOptionException to include the option that wasn\u0027t recognized\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/cli/branches/cli-1.x@679583 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "7/25/08 1:25 AM",
      "commitName": "0a8de54ff89093fc8c5a2b00f7c0c856c5cbe57d",
      "commitAuthor": "Emmanuel Bourg",
      "commitDateOld": "7/22/08 12:17 PM",
      "commitNameOld": "81fe71619e9e96906d50c4dda64714b62353a2bd",
      "commitAuthorOld": "Emmanuel Bourg",
      "daysBetweenCommits": 2.55,
      "commitsBetweenForRepo": 4,
      "commitsBetweenForFile": 1,
      "actualSource": "protected void processOption(String arg, ListIterator iter) throws ParseException {\r\n    boolean hasOption \u003d getOptions().hasOption(arg);\r\n    if (!hasOption) {\r\n        throw new UnrecognizedOptionException(\"Unrecognized option: \" + arg, arg);\r\n    }\r\n    Option opt \u003d (Option) getOptions().getOption(arg).clone();\r\n    if (opt.isRequired()) {\r\n        getRequiredOptions().remove(opt.getKey());\r\n    }\r\n    if (getOptions().getOptionGroup(opt) !\u003d null) {\r\n        OptionGroup group \u003d getOptions().getOptionGroup(opt);\r\n        if (group.isRequired()) {\r\n            getRequiredOptions().remove(group);\r\n        }\r\n        group.setSelected(opt);\r\n    }\r\n    if (opt.hasArg()) {\r\n        processArgs(opt, iter);\r\n    }\r\n    cmd.addOption(opt);\r\n}",
      "path": "src/java/org/apache/commons/cli/Parser.java",
      "functionStartLine": 374,
      "functionName": "processOption",
      "functionAnnotation": "",
      "functionDoc": "\u003cp\u003eProcess the Option specified by \u003ccode\u003earg\u003c/code\u003e\r\nusing the values retrieved from the specfied iterator\r\n\u003ccode\u003eiter\u003c/code\u003e.\r\n\r\n@param arg The String value representing an Option\r\n@param iter The iterator over the flattened command \r\nline arguments.\r\n@throws ParseException if \u003ccode\u003earg\u003c/code\u003e does not\r\nrepresent an Option\r\n",
      "diff": "@@ -1,21 +1,21 @@\n protected void processOption(String arg, ListIterator iter) throws ParseException {\r\n     boolean hasOption \u003d getOptions().hasOption(arg);\r\n     if (!hasOption) {\r\n-        throw new UnrecognizedOptionException(\"Unrecognized option: \" + arg);\r\n+        throw new UnrecognizedOptionException(\"Unrecognized option: \" + arg, arg);\r\n     }\r\n     Option opt \u003d (Option) getOptions().getOption(arg).clone();\r\n     if (opt.isRequired()) {\r\n         getRequiredOptions().remove(opt.getKey());\r\n     }\r\n     if (getOptions().getOptionGroup(opt) !\u003d null) {\r\n         OptionGroup group \u003d getOptions().getOptionGroup(opt);\r\n         if (group.isRequired()) {\r\n             getRequiredOptions().remove(group);\r\n         }\r\n         group.setSelected(opt);\r\n     }\r\n     if (opt.hasArg()) {\r\n         processArgs(opt, iter);\r\n     }\r\n     cmd.addOption(opt);\r\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "20dfc60e4c04d9fd69fdedbcbe50020c7e798f3a": {
      "type": "Ybodychange",
      "commitMessage": "Restored the CLI 1.0 behavior regarding repeated options and the number of arguments per option (CLI-137)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/cli/branches/cli-1.x@667565 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "6/13/08 6:08 PM",
      "commitName": "20dfc60e4c04d9fd69fdedbcbe50020c7e798f3a",
      "commitAuthor": "Emmanuel Bourg",
      "commitDateOld": "5/29/08 4:35 PM",
      "commitNameOld": "d72a578a8949e4b1c437ec55997d8786836f139c",
      "commitAuthorOld": "Emmanuel Bourg",
      "daysBetweenCommits": 15.06,
      "commitsBetweenForRepo": 31,
      "commitsBetweenForFile": 1,
      "actualSource": "protected void processOption(String arg, ListIterator iter) throws ParseException {\r\n    boolean hasOption \u003d getOptions().hasOption(arg);\r\n    if (!hasOption) {\r\n        throw new UnrecognizedOptionException(\"Unrecognized option: \" + arg);\r\n    }\r\n    Option opt \u003d (Option) getOptions().getOption(arg).clone();\r\n    if (opt.isRequired()) {\r\n        getRequiredOptions().remove(opt.getKey());\r\n    }\r\n    if (getOptions().getOptionGroup(opt) !\u003d null) {\r\n        OptionGroup group \u003d getOptions().getOptionGroup(opt);\r\n        if (group.isRequired()) {\r\n            getRequiredOptions().remove(group);\r\n        }\r\n        group.setSelected(opt);\r\n    }\r\n    if (opt.hasArg()) {\r\n        processArgs(opt, iter);\r\n    }\r\n    cmd.addOption(opt);\r\n}",
      "path": "src/java/org/apache/commons/cli/Parser.java",
      "functionStartLine": 386,
      "functionName": "processOption",
      "functionAnnotation": "",
      "functionDoc": "\u003cp\u003eProcess the Option specified by \u003ccode\u003earg\u003c/code\u003e\r\nusing the values retrieved from the specfied iterator\r\n\u003ccode\u003eiter\u003c/code\u003e.\r\n\r\n@param arg The String value representing an Option\r\n@param iter The iterator over the flattened command \r\nline arguments.\r\n@throws ParseException if \u003ccode\u003earg\u003c/code\u003e does not\r\nrepresent an Option\r\n",
      "diff": "@@ -1,21 +1,21 @@\n protected void processOption(String arg, ListIterator iter) throws ParseException {\r\n     boolean hasOption \u003d getOptions().hasOption(arg);\r\n     if (!hasOption) {\r\n         throw new UnrecognizedOptionException(\"Unrecognized option: \" + arg);\r\n     }\r\n-    final Option opt \u003d getOptions().getOption(arg);\r\n+    Option opt \u003d (Option) getOptions().getOption(arg).clone();\r\n     if (opt.isRequired()) {\r\n         getRequiredOptions().remove(opt.getKey());\r\n     }\r\n     if (getOptions().getOptionGroup(opt) !\u003d null) {\r\n         OptionGroup group \u003d getOptions().getOptionGroup(opt);\r\n         if (group.isRequired()) {\r\n             getRequiredOptions().remove(group);\r\n         }\r\n         group.setSelected(opt);\r\n     }\r\n     if (opt.hasArg()) {\r\n         processArgs(opt, iter);\r\n     }\r\n     cmd.addOption(opt);\r\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "298804b71d4e5f8b621f48a300f421229a3f5c86": {
      "type": "Ymultichange(Ymodifierchange,Ybodychange)",
      "commitMessage": "Applying Henning\u0027s patch to make the Parser more extendable - CLI-142\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/cli/branches/cli-1.x@654429 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "5/8/08 9:43 AM",
      "commitName": "298804b71d4e5f8b621f48a300f421229a3f5c86",
      "commitAuthor": "Henri Yandell",
      "subchanges": [
        {
          "type": "Ymodifierchange",
          "commitMessage": "Applying Henning\u0027s patch to make the Parser more extendable - CLI-142\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/cli/branches/cli-1.x@654429 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "5/8/08 9:43 AM",
          "commitName": "298804b71d4e5f8b621f48a300f421229a3f5c86",
          "commitAuthor": "Henri Yandell",
          "commitDateOld": "6/29/07 10:08 AM",
          "commitNameOld": "97744806d59820b096fb502b1d51ca54b5d0921d",
          "commitAuthorOld": "Henri Yandell",
          "daysBetweenCommits": 313.98,
          "commitsBetweenForRepo": 18,
          "commitsBetweenForFile": 1,
          "actualSource": "protected void processOption(String arg, ListIterator iter) throws ParseException {\r\n    boolean hasOption \u003d getOptions().hasOption(arg);\r\n    if (!hasOption) {\r\n        throw new UnrecognizedOptionException(\"Unrecognized option: \" + arg);\r\n    }\r\n    final Option opt \u003d getOptions().getOption(arg);\r\n    if (opt.isRequired()) {\r\n        getRequiredOptions().remove(opt.getKey());\r\n    }\r\n    if (getOptions().getOptionGroup(opt) !\u003d null) {\r\n        OptionGroup group \u003d getOptions().getOptionGroup(opt);\r\n        if (group.isRequired()) {\r\n            getRequiredOptions().remove(group);\r\n        }\r\n        group.setSelected(opt);\r\n    }\r\n    if (opt.hasArg()) {\r\n        processArgs(opt, iter);\r\n    }\r\n    cmd.addOption(opt);\r\n}",
          "path": "src/java/org/apache/commons/cli/Parser.java",
          "functionStartLine": 384,
          "functionName": "processOption",
          "functionAnnotation": "",
          "functionDoc": "\u003cp\u003eProcess the Option specified by \u003ccode\u003earg\u003c/code\u003e\r\nusing the values retrieved from the specfied iterator\r\n\u003ccode\u003eiter\u003c/code\u003e.\r\n\r\n@param arg The String value representing an Option\r\n@param iter The iterator over the flattened command \r\nline arguments.\r\n@throws ParseException if \u003ccode\u003earg\u003c/code\u003e does not\r\nrepresent an Option\r\n",
          "diff": "@@ -1,21 +1,21 @@\n-private void processOption(String arg, ListIterator iter) throws ParseException {\r\n-    boolean hasOption \u003d options.hasOption(arg);\r\n+protected void processOption(String arg, ListIterator iter) throws ParseException {\r\n+    boolean hasOption \u003d getOptions().hasOption(arg);\r\n     if (!hasOption) {\r\n         throw new UnrecognizedOptionException(\"Unrecognized option: \" + arg);\r\n     }\r\n-    final Option opt \u003d options.getOption(arg);\r\n+    final Option opt \u003d getOptions().getOption(arg);\r\n     if (opt.isRequired()) {\r\n-        requiredOptions.remove(opt.getKey());\r\n+        getRequiredOptions().remove(opt.getKey());\r\n     }\r\n-    if (options.getOptionGroup(opt) !\u003d null) {\r\n-        OptionGroup group \u003d options.getOptionGroup(opt);\r\n+    if (getOptions().getOptionGroup(opt) !\u003d null) {\r\n+        OptionGroup group \u003d getOptions().getOptionGroup(opt);\r\n         if (group.isRequired()) {\r\n-            requiredOptions.remove(group);\r\n+            getRequiredOptions().remove(group);\r\n         }\r\n         group.setSelected(opt);\r\n     }\r\n     if (opt.hasArg()) {\r\n         processArgs(opt, iter);\r\n     }\r\n     cmd.addOption(opt);\r\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[private]",
            "newValue": "[protected]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Applying Henning\u0027s patch to make the Parser more extendable - CLI-142\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/cli/branches/cli-1.x@654429 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "5/8/08 9:43 AM",
          "commitName": "298804b71d4e5f8b621f48a300f421229a3f5c86",
          "commitAuthor": "Henri Yandell",
          "commitDateOld": "6/29/07 10:08 AM",
          "commitNameOld": "97744806d59820b096fb502b1d51ca54b5d0921d",
          "commitAuthorOld": "Henri Yandell",
          "daysBetweenCommits": 313.98,
          "commitsBetweenForRepo": 18,
          "commitsBetweenForFile": 1,
          "actualSource": "protected void processOption(String arg, ListIterator iter) throws ParseException {\r\n    boolean hasOption \u003d getOptions().hasOption(arg);\r\n    if (!hasOption) {\r\n        throw new UnrecognizedOptionException(\"Unrecognized option: \" + arg);\r\n    }\r\n    final Option opt \u003d getOptions().getOption(arg);\r\n    if (opt.isRequired()) {\r\n        getRequiredOptions().remove(opt.getKey());\r\n    }\r\n    if (getOptions().getOptionGroup(opt) !\u003d null) {\r\n        OptionGroup group \u003d getOptions().getOptionGroup(opt);\r\n        if (group.isRequired()) {\r\n            getRequiredOptions().remove(group);\r\n        }\r\n        group.setSelected(opt);\r\n    }\r\n    if (opt.hasArg()) {\r\n        processArgs(opt, iter);\r\n    }\r\n    cmd.addOption(opt);\r\n}",
          "path": "src/java/org/apache/commons/cli/Parser.java",
          "functionStartLine": 384,
          "functionName": "processOption",
          "functionAnnotation": "",
          "functionDoc": "\u003cp\u003eProcess the Option specified by \u003ccode\u003earg\u003c/code\u003e\r\nusing the values retrieved from the specfied iterator\r\n\u003ccode\u003eiter\u003c/code\u003e.\r\n\r\n@param arg The String value representing an Option\r\n@param iter The iterator over the flattened command \r\nline arguments.\r\n@throws ParseException if \u003ccode\u003earg\u003c/code\u003e does not\r\nrepresent an Option\r\n",
          "diff": "@@ -1,21 +1,21 @@\n-private void processOption(String arg, ListIterator iter) throws ParseException {\r\n-    boolean hasOption \u003d options.hasOption(arg);\r\n+protected void processOption(String arg, ListIterator iter) throws ParseException {\r\n+    boolean hasOption \u003d getOptions().hasOption(arg);\r\n     if (!hasOption) {\r\n         throw new UnrecognizedOptionException(\"Unrecognized option: \" + arg);\r\n     }\r\n-    final Option opt \u003d options.getOption(arg);\r\n+    final Option opt \u003d getOptions().getOption(arg);\r\n     if (opt.isRequired()) {\r\n-        requiredOptions.remove(opt.getKey());\r\n+        getRequiredOptions().remove(opt.getKey());\r\n     }\r\n-    if (options.getOptionGroup(opt) !\u003d null) {\r\n-        OptionGroup group \u003d options.getOptionGroup(opt);\r\n+    if (getOptions().getOptionGroup(opt) !\u003d null) {\r\n+        OptionGroup group \u003d getOptions().getOptionGroup(opt);\r\n         if (group.isRequired()) {\r\n-            requiredOptions.remove(group);\r\n+            getRequiredOptions().remove(group);\r\n         }\r\n         group.setSelected(opt);\r\n     }\r\n     if (opt.hasArg()) {\r\n         processArgs(opt, iter);\r\n     }\r\n     cmd.addOption(opt);\r\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        }
      ]
    },
    "a8a8ec06a85a1090d560dc6cf236663da580863e": {
      "type": "Ybodychange",
      "commitMessage": "Lots of minor refactoring and tidying to avoid compiler warnings\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/cli/trunk@155293 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "2/25/05 5:21 AM",
      "commitName": "a8a8ec06a85a1090d560dc6cf236663da580863e",
      "commitAuthor": "Robert James Oxspring",
      "commitDateOld": "12/27/04 4:35 PM",
      "commitNameOld": "1314233dde6b3f73c888fe4274e45d654b7639aa",
      "commitAuthorOld": "Robert James Oxspring",
      "daysBetweenCommits": 59.53,
      "commitsBetweenForRepo": 11,
      "commitsBetweenForFile": 1,
      "actualSource": "private void processOption(String arg, ListIterator iter) throws ParseException {\r\n    boolean hasOption \u003d options.hasOption(arg);\r\n    if (!hasOption) {\r\n        throw new UnrecognizedOptionException(\"Unrecognized option: \" + arg);\r\n    }\r\n    final Option opt \u003d options.getOption(arg);\r\n    if (opt.isRequired()) {\r\n        requiredOptions.remove(opt.getKey());\r\n    }\r\n    if (options.getOptionGroup(opt) !\u003d null) {\r\n        OptionGroup group \u003d options.getOptionGroup(opt);\r\n        if (group.isRequired()) {\r\n            requiredOptions.remove(group);\r\n        }\r\n        group.setSelected(opt);\r\n    }\r\n    if (opt.hasArg()) {\r\n        processArgs(opt, iter);\r\n    }\r\n    cmd.addOption(opt);\r\n}",
      "path": "src/java/org/apache/commons/cli/Parser.java",
      "functionStartLine": 360,
      "functionName": "processOption",
      "functionAnnotation": "",
      "functionDoc": "\u003cp\u003eProcess the Option specified by \u003ccode\u003earg\u003c/code\u003e\r\nusing the values retrieved from the specfied iterator\r\n\u003ccode\u003eiter\u003c/code\u003e.\r\n\r\n@param arg The String value representing an Option\r\n@param iter The iterator over the flattened command \r\nline arguments.\r\n@throws ParseException if \u003ccode\u003earg\u003c/code\u003e does not\r\nrepresent an Option\r\n",
      "diff": "@@ -1,23 +1,21 @@\n private void processOption(String arg, ListIterator iter) throws ParseException {\r\n-    Option opt \u003d null;\r\n     boolean hasOption \u003d options.hasOption(arg);\r\n     if (!hasOption) {\r\n         throw new UnrecognizedOptionException(\"Unrecognized option: \" + arg);\r\n-    } else {\r\n-        opt \u003d (Option) options.getOption(arg);\r\n     }\r\n+    final Option opt \u003d options.getOption(arg);\r\n     if (opt.isRequired()) {\r\n         requiredOptions.remove(opt.getKey());\r\n     }\r\n     if (options.getOptionGroup(opt) !\u003d null) {\r\n-        OptionGroup group \u003d (OptionGroup) options.getOptionGroup(opt);\r\n+        OptionGroup group \u003d options.getOptionGroup(opt);\r\n         if (group.isRequired()) {\r\n             requiredOptions.remove(group);\r\n         }\r\n         group.setSelected(opt);\r\n     }\r\n     if (opt.hasArg()) {\r\n         processArgs(opt, iter);\r\n     }\r\n     cmd.addOption(opt);\r\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "9b2b8038b52be022e42c8c7fdf26e236888f94c5": {
      "type": "Ymultichange(Ydocchange,Yformatchange)",
      "commitMessage": "checkstyle fixes\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/cli/trunk@129857 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/10/02 1:47 AM",
      "commitName": "9b2b8038b52be022e42c8c7fdf26e236888f94c5",
      "commitAuthor": "John Keyes",
      "subchanges": [
        {
          "type": "Ydocchange",
          "commitMessage": "checkstyle fixes\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/cli/trunk@129857 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "12/10/02 1:47 AM",
          "commitName": "9b2b8038b52be022e42c8c7fdf26e236888f94c5",
          "commitAuthor": "John Keyes",
          "commitDateOld": "11/28/02 1:22 AM",
          "commitNameOld": "be7dfa5b0a0e0bf609ac77ae45aeb2c3287ad453",
          "commitAuthorOld": "John Keyes",
          "daysBetweenCommits": 12.02,
          "commitsBetweenForRepo": 2,
          "commitsBetweenForFile": 1,
          "actualSource": "private void processOption(String arg, ListIterator iter) throws ParseException {\r\n    Option opt \u003d null;\r\n    boolean hasOption \u003d options.hasOption(arg);\r\n    if (!hasOption) {\r\n        throw new UnrecognizedOptionException(\"Unrecognized option: \" + arg);\r\n    } else {\r\n        opt \u003d (Option) options.getOption(arg);\r\n    }\r\n    if (opt.isRequired()) {\r\n        requiredOptions.remove(opt.getKey());\r\n    }\r\n    if (options.getOptionGroup(opt) !\u003d null) {\r\n        OptionGroup group \u003d (OptionGroup) options.getOptionGroup(opt);\r\n        if (group.isRequired()) {\r\n            requiredOptions.remove(group);\r\n        }\r\n        group.setSelected(opt);\r\n    }\r\n    if (opt.hasArg()) {\r\n        processArgs(opt, iter);\r\n    }\r\n    cmd.addOption(opt);\r\n}",
          "path": "src/java/org/apache/commons/cli/Parser.java",
          "functionStartLine": 410,
          "functionName": "processOption",
          "functionAnnotation": "",
          "functionDoc": "\u003cp\u003eProcess the Option specified by \u003ccode\u003earg\u003c/code\u003e\r\nusing the values retrieved from the specfied iterator\r\n\u003ccode\u003eiter\u003c/code\u003e.\r\n\r\n@param arg The String value representing an Option\r\n@param iter The iterator over the flattened command \r\nline arguments.\r\n@throws ParseException if \u003ccode\u003earg\u003c/code\u003e does not\r\nrepresent an Option\r\n",
          "diff": "",
          "extendedDetails": {
            "oldValue": "",
            "newValue": "\u003cp\u003eProcess the Option specified by \u003ccode\u003earg\u003c/code\u003e\r\nusing the values retrieved from the specfied iterator\r\n\u003ccode\u003eiter\u003c/code\u003e.\r\n\r\n@param arg The String value representing an Option\r\n@param iter The iterator over the flattened command \r\nline arguments.\r\n@throws ParseException if \u003ccode\u003earg\u003c/code\u003e does not\r\nrepresent an Option\r\n"
          }
        },
        {
          "type": "Yformatchange",
          "commitMessage": "checkstyle fixes\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/cli/trunk@129857 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "12/10/02 1:47 AM",
          "commitName": "9b2b8038b52be022e42c8c7fdf26e236888f94c5",
          "commitAuthor": "John Keyes",
          "commitDateOld": "11/28/02 1:22 AM",
          "commitNameOld": "be7dfa5b0a0e0bf609ac77ae45aeb2c3287ad453",
          "commitAuthorOld": "John Keyes",
          "daysBetweenCommits": 12.02,
          "commitsBetweenForRepo": 2,
          "commitsBetweenForFile": 1,
          "actualSource": "private void processOption(String arg, ListIterator iter) throws ParseException {\r\n    Option opt \u003d null;\r\n    boolean hasOption \u003d options.hasOption(arg);\r\n    if (!hasOption) {\r\n        throw new UnrecognizedOptionException(\"Unrecognized option: \" + arg);\r\n    } else {\r\n        opt \u003d (Option) options.getOption(arg);\r\n    }\r\n    if (opt.isRequired()) {\r\n        requiredOptions.remove(opt.getKey());\r\n    }\r\n    if (options.getOptionGroup(opt) !\u003d null) {\r\n        OptionGroup group \u003d (OptionGroup) options.getOptionGroup(opt);\r\n        if (group.isRequired()) {\r\n            requiredOptions.remove(group);\r\n        }\r\n        group.setSelected(opt);\r\n    }\r\n    if (opt.hasArg()) {\r\n        processArgs(opt, iter);\r\n    }\r\n    cmd.addOption(opt);\r\n}",
          "path": "src/java/org/apache/commons/cli/Parser.java",
          "functionStartLine": 410,
          "functionName": "processOption",
          "functionAnnotation": "",
          "functionDoc": "\u003cp\u003eProcess the Option specified by \u003ccode\u003earg\u003c/code\u003e\r\nusing the values retrieved from the specfied iterator\r\n\u003ccode\u003eiter\u003c/code\u003e.\r\n\r\n@param arg The String value representing an Option\r\n@param iter The iterator over the flattened command \r\nline arguments.\r\n@throws ParseException if \u003ccode\u003earg\u003c/code\u003e does not\r\nrepresent an Option\r\n",
          "diff": "",
          "extendedDetails": {}
        }
      ]
    },
    "347bbeb8f98a49744501ac50850457ba8751d545": {
      "type": "Ybodychange",
      "commitMessage": "refactored the option string handling, added property support for options with an argument value\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/cli/trunk@129846 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "11/18/02 10:41 AM",
      "commitName": "347bbeb8f98a49744501ac50850457ba8751d545",
      "commitAuthor": "John Keyes",
      "commitDateOld": "10/25/02 2:17 AM",
      "commitNameOld": "436ef8b2ff7381e797436fc50d087d70b8032f40",
      "commitAuthorOld": "John Keyes",
      "daysBetweenCommits": 24.39,
      "commitsBetweenForRepo": 16,
      "commitsBetweenForFile": 1,
      "actualSource": "private void processOption(String arg, ListIterator iter) throws ParseException {\r\n    Option opt \u003d null;\r\n    boolean hasOption \u003d options.hasOption(arg);\r\n    if (!hasOption) {\r\n        throw new UnrecognizedOptionException(\"Unrecognized option: \" + arg);\r\n    } else {\r\n        opt \u003d (Option) options.getOption(arg);\r\n    }\r\n    if (opt.isRequired()) {\r\n        requiredOptions.remove(opt.getKey());\r\n    }\r\n    if (options.getOptionGroup(opt) !\u003d null) {\r\n        OptionGroup group \u003d (OptionGroup) options.getOptionGroup(opt);\r\n        if (group.isRequired()) {\r\n            requiredOptions.remove(group);\r\n        }\r\n        group.setSelected(opt);\r\n    }\r\n    if (opt.hasArg()) {\r\n        processArgs(opt, iter);\r\n    }\r\n    cmd.addOption(opt);\r\n}",
      "path": "src/java/org/apache/commons/cli/Parser.java",
      "functionStartLine": 313,
      "functionName": "processOption",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,23 +1,23 @@\n private void processOption(String arg, ListIterator iter) throws ParseException {\r\n     Option opt \u003d null;\r\n     boolean hasOption \u003d options.hasOption(arg);\r\n     if (!hasOption) {\r\n         throw new UnrecognizedOptionException(\"Unrecognized option: \" + arg);\r\n     } else {\r\n         opt \u003d (Option) options.getOption(arg);\r\n     }\r\n     if (opt.isRequired()) {\r\n-        requiredOptions.remove(\"-\" + opt.getOpt());\r\n+        requiredOptions.remove(opt.getKey());\r\n     }\r\n     if (options.getOptionGroup(opt) !\u003d null) {\r\n         OptionGroup group \u003d (OptionGroup) options.getOptionGroup(opt);\r\n         if (group.isRequired()) {\r\n             requiredOptions.remove(group);\r\n         }\r\n         group.setSelected(opt);\r\n     }\r\n     if (opt.hasArg()) {\r\n         processArgs(opt, iter);\r\n     }\r\n     cmd.addOption(opt);\r\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "436ef8b2ff7381e797436fc50d087d70b8032f40": {
      "type": "Ybodychange",
      "commitMessage": "fix pr 13935 - still need to improve the exception message\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/cli/trunk@129827 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "10/25/02 2:17 AM",
      "commitName": "436ef8b2ff7381e797436fc50d087d70b8032f40",
      "commitAuthor": "John Keyes",
      "commitDateOld": "10/9/02 12:24 AM",
      "commitNameOld": "62670f565aa434b6cb614c1054a8ea5bc3715f25",
      "commitAuthorOld": "John Keyes",
      "daysBetweenCommits": 16.08,
      "commitsBetweenForRepo": 8,
      "commitsBetweenForFile": 1,
      "actualSource": "private void processOption(String arg, ListIterator iter) throws ParseException {\r\n    Option opt \u003d null;\r\n    boolean hasOption \u003d options.hasOption(arg);\r\n    if (!hasOption) {\r\n        throw new UnrecognizedOptionException(\"Unrecognized option: \" + arg);\r\n    } else {\r\n        opt \u003d (Option) options.getOption(arg);\r\n    }\r\n    if (opt.isRequired()) {\r\n        requiredOptions.remove(\"-\" + opt.getOpt());\r\n    }\r\n    if (options.getOptionGroup(opt) !\u003d null) {\r\n        OptionGroup group \u003d (OptionGroup) options.getOptionGroup(opt);\r\n        if (group.isRequired()) {\r\n            requiredOptions.remove(group);\r\n        }\r\n        group.setSelected(opt);\r\n    }\r\n    if (opt.hasArg()) {\r\n        processArgs(opt, iter);\r\n    }\r\n    cmd.addOption(opt);\r\n}",
      "path": "src/java/org/apache/commons/cli/Parser.java",
      "functionStartLine": 243,
      "functionName": "processOption",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,19 +1,23 @@\n private void processOption(String arg, ListIterator iter) throws ParseException {\r\n     Option opt \u003d null;\r\n     boolean hasOption \u003d options.hasOption(arg);\r\n     if (!hasOption) {\r\n         throw new UnrecognizedOptionException(\"Unrecognized option: \" + arg);\r\n     } else {\r\n         opt \u003d (Option) options.getOption(arg);\r\n     }\r\n     if (opt.isRequired()) {\r\n         requiredOptions.remove(\"-\" + opt.getOpt());\r\n     }\r\n     if (options.getOptionGroup(opt) !\u003d null) {\r\n-        ((OptionGroup) (options.getOptionGroup(opt))).setSelected(opt);\r\n+        OptionGroup group \u003d (OptionGroup) options.getOptionGroup(opt);\r\n+        if (group.isRequired()) {\r\n+            requiredOptions.remove(group);\r\n+        }\r\n+        group.setSelected(opt);\r\n     }\r\n     if (opt.hasArg()) {\r\n         processArgs(opt, iter);\r\n     }\r\n     cmd.addOption(opt);\r\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "c08f73835beda155421d78ee4f96d9e11c501159": {
      "type": "Ybodychange",
      "commitMessage": "changed my email add, removed CommandLineParserFactory\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/cli/trunk@129816 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "9/20/02 1:59 AM",
      "commitName": "c08f73835beda155421d78ee4f96d9e11c501159",
      "commitAuthor": "John Keyes",
      "commitDateOld": "9/2/02 1:54 AM",
      "commitNameOld": "d30f12f8fc30ddc2c30a08beea0c10d6d8f2029b",
      "commitAuthorOld": "John Keyes",
      "daysBetweenCommits": 18.0,
      "commitsBetweenForRepo": 7,
      "commitsBetweenForFile": 1,
      "actualSource": "private void processOption(String arg, ListIterator iter) throws ParseException {\r\n    Option opt \u003d null;\r\n    boolean hasOption \u003d options.hasOption(arg);\r\n    if (!hasOption) {\r\n        throw new UnrecognizedOptionException(\"Unrecognized option: \" + arg);\r\n    } else {\r\n        opt \u003d (Option) options.getOption(arg);\r\n    }\r\n    if (opt.isRequired()) {\r\n        requiredOptions.remove(\"-\" + opt.getOpt());\r\n    }\r\n    if (options.getOptionGroup(opt) !\u003d null) {\r\n        ((OptionGroup) (options.getOptionGroup(opt))).setSelected(opt);\r\n    }\r\n    if (opt.hasArg()) {\r\n        processArgs(opt, iter);\r\n    }\r\n    cmd.addOption(opt);\r\n}",
      "path": "src/java/org/apache/commons/cli/Parser.java",
      "functionStartLine": 243,
      "functionName": "processOption",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,19 +1,19 @@\n private void processOption(String arg, ListIterator iter) throws ParseException {\r\n     Option opt \u003d null;\r\n     boolean hasOption \u003d options.hasOption(arg);\r\n     if (!hasOption) {\r\n         throw new UnrecognizedOptionException(\"Unrecognized option: \" + arg);\r\n     } else {\r\n         opt \u003d (Option) options.getOption(arg);\r\n     }\r\n     if (opt.isRequired()) {\r\n         requiredOptions.remove(\"-\" + opt.getOpt());\r\n     }\r\n     if (options.getOptionGroup(opt) !\u003d null) {\r\n         ((OptionGroup) (options.getOptionGroup(opt))).setSelected(opt);\r\n     }\r\n     if (opt.hasArg()) {\r\n         processArgs(opt, iter);\r\n     }\r\n-    cmd.setOpt(opt);\r\n+    cmd.addOption(opt);\r\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "dde69934d7f0bee13e4cd1fc99a7d60ce95a0c78": {
      "type": "Ymultichange(Ymovefromfile,Ydocchange)",
      "commitMessage": "separated the argument flattening from the Option processing\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/cli/trunk@129804 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "8/25/02 1:15 AM",
      "commitName": "dde69934d7f0bee13e4cd1fc99a7d60ce95a0c78",
      "commitAuthor": "John Keyes",
      "subchanges": [
        {
          "type": "Ymovefromfile",
          "commitMessage": "separated the argument flattening from the Option processing\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/cli/trunk@129804 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "8/25/02 1:15 AM",
          "commitName": "dde69934d7f0bee13e4cd1fc99a7d60ce95a0c78",
          "commitAuthor": "John Keyes",
          "commitDateOld": "8/18/02 10:07 PM",
          "commitNameOld": "04490af06faa8fd1be15da88172beb32218dd336",
          "commitAuthorOld": "John Keyes",
          "daysBetweenCommits": 6.13,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "private void processOption(String arg, ListIterator iter) throws ParseException {\r\n    Option opt \u003d null;\r\n    boolean hasOption \u003d options.hasOption(arg);\r\n    if (!hasOption) {\r\n        throw new UnrecognizedOptionException(\"Unrecognized option: \" + arg);\r\n    } else {\r\n        opt \u003d (Option) options.getOption(arg);\r\n    }\r\n    if (opt.isRequired()) {\r\n        requiredOptions.remove(\"-\" + opt.getOpt());\r\n    }\r\n    if (options.getOptionGroup(opt) !\u003d null) {\r\n        ((OptionGroup) (options.getOptionGroup(opt))).setSelected(opt);\r\n    }\r\n    if (opt.hasArg()) {\r\n        processArgs(opt, iter);\r\n    }\r\n    cmd.setOpt(opt);\r\n}",
          "path": "src/java/org/apache/commons/cli/Parser.java",
          "functionStartLine": 120,
          "functionName": "processOption",
          "functionAnnotation": "",
          "functionDoc": "",
          "diff": "",
          "extendedDetails": {
            "oldPath": "src/java/org/apache/commons/cli/PosixParser.java",
            "newPath": "src/java/org/apache/commons/cli/Parser.java",
            "oldMethodName": "processOption",
            "newMethodName": "processOption"
          }
        },
        {
          "type": "Ydocchange",
          "commitMessage": "separated the argument flattening from the Option processing\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/cli/trunk@129804 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "8/25/02 1:15 AM",
          "commitName": "dde69934d7f0bee13e4cd1fc99a7d60ce95a0c78",
          "commitAuthor": "John Keyes",
          "commitDateOld": "8/18/02 10:07 PM",
          "commitNameOld": "04490af06faa8fd1be15da88172beb32218dd336",
          "commitAuthorOld": "John Keyes",
          "daysBetweenCommits": 6.13,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "private void processOption(String arg, ListIterator iter) throws ParseException {\r\n    Option opt \u003d null;\r\n    boolean hasOption \u003d options.hasOption(arg);\r\n    if (!hasOption) {\r\n        throw new UnrecognizedOptionException(\"Unrecognized option: \" + arg);\r\n    } else {\r\n        opt \u003d (Option) options.getOption(arg);\r\n    }\r\n    if (opt.isRequired()) {\r\n        requiredOptions.remove(\"-\" + opt.getOpt());\r\n    }\r\n    if (options.getOptionGroup(opt) !\u003d null) {\r\n        ((OptionGroup) (options.getOptionGroup(opt))).setSelected(opt);\r\n    }\r\n    if (opt.hasArg()) {\r\n        processArgs(opt, iter);\r\n    }\r\n    cmd.setOpt(opt);\r\n}",
          "path": "src/java/org/apache/commons/cli/Parser.java",
          "functionStartLine": 120,
          "functionName": "processOption",
          "functionAnnotation": "",
          "functionDoc": "",
          "diff": "",
          "extendedDetails": {
            "oldValue": "Process the option represented by \u003ccode\u003earg\u003c/code\u003e.\r\n\r\n@param arg the string representation of an option\r\n@param iter the command line token iterator\r\n",
            "newValue": ""
          }
        }
      ]
    },
    "4fbf5978d9473a2504a554cbe53dc29c49dd67b5": {
      "type": "Ybodychange",
      "commitMessage": "bug no. 11456 - optional argument values implemented\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/cli/trunk@129801 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "8/16/02 1:05 AM",
      "commitName": "4fbf5978d9473a2504a554cbe53dc29c49dd67b5",
      "commitAuthor": "John Keyes",
      "commitDateOld": "8/15/02 1:27 AM",
      "commitNameOld": "f9df51847e354190206432ba87661586e6dc814d",
      "commitAuthorOld": "John Keyes",
      "daysBetweenCommits": 0.98,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "actualSource": "private void processOption(String arg, ListIterator iter) throws ParseException {\r\n    Option opt \u003d null;\r\n    boolean hasOption \u003d options.hasOption(arg);\r\n    if (!hasOption) {\r\n        throw new UnrecognizedOptionException(\"Unrecognized option: \" + arg);\r\n    } else {\r\n        opt \u003d (Option) options.getOption(arg);\r\n    }\r\n    if (opt.isRequired()) {\r\n        requiredOptions.remove(\"-\" + opt.getOpt());\r\n    }\r\n    if (options.getOptionGroup(opt) !\u003d null) {\r\n        ((OptionGroup) (options.getOptionGroup(opt))).setSelected(opt);\r\n    }\r\n    if (opt.hasArg()) {\r\n        processArgs(opt, iter);\r\n    }\r\n    cmd.setOpt(opt);\r\n}",
      "path": "src/java/org/apache/commons/cli/PosixParser.java",
      "functionStartLine": 239,
      "functionName": "processOption",
      "functionAnnotation": "",
      "functionDoc": "Process the option represented by \u003ccode\u003earg\u003c/code\u003e.\r\n\r\n@param arg the string representation of an option\r\n@param iter the command line token iterator\r\n",
      "diff": "",
      "extendedDetails": {}
    },
    "f9df51847e354190206432ba87661586e6dc814d": {
      "type": "Ybodychange",
      "commitMessage": "iterator for all Option instances parsed\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/cli/trunk@129799 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "8/15/02 1:27 AM",
      "commitName": "f9df51847e354190206432ba87661586e6dc814d",
      "commitAuthor": "John Keyes",
      "commitDateOld": "8/5/02 2:04 AM",
      "commitNameOld": "1060ee73965dc30d92afbad80525bd4cdabe9153",
      "commitAuthorOld": "John Keyes",
      "daysBetweenCommits": 9.97,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "actualSource": "private void processOption(String arg, ListIterator iter) throws ParseException {\r\n    Option opt \u003d null;\r\n    boolean hasOption \u003d options.hasOption(arg);\r\n    if (!hasOption) {\r\n        throw new UnrecognizedOptionException(\"Unrecognized option: \" + arg);\r\n    } else {\r\n        opt \u003d (Option) options.getOption(arg);\r\n    }\r\n    if (opt.isRequired()) {\r\n        requiredOptions.remove(\"-\" + opt.getOpt());\r\n    }\r\n    if (options.getOptionGroup(opt) !\u003d null) {\r\n        ((OptionGroup) (options.getOptionGroup(opt))).setSelected(opt);\r\n    }\r\n    if (opt.hasArg()) {\r\n        processArgs(opt, iter);\r\n    }\r\n    cmd.setOpt(opt);\r\n}",
      "path": "src/java/org/apache/commons/cli/PosixParser.java",
      "functionStartLine": 260,
      "functionName": "processOption",
      "functionAnnotation": "",
      "functionDoc": "Process the option represented by \u003ccode\u003earg\u003c/code\u003e.\r\n\r\n@param arg the string representation of an option\r\n@param iter the command line token iterator\r\n",
      "diff": "@@ -1,16 +1,19 @@\n private void processOption(String arg, ListIterator iter) throws ParseException {\r\n-    Option opt \u003d (Option) options.getOption(arg);\r\n-    if (opt \u003d\u003d null) {\r\n+    Option opt \u003d null;\r\n+    boolean hasOption \u003d options.hasOption(arg);\r\n+    if (!hasOption) {\r\n         throw new UnrecognizedOptionException(\"Unrecognized option: \" + arg);\r\n+    } else {\r\n+        opt \u003d (Option) options.getOption(arg);\r\n     }\r\n     if (opt.isRequired()) {\r\n-        requiredOptions.remove(opt);\r\n+        requiredOptions.remove(\"-\" + opt.getOpt());\r\n     }\r\n     if (options.getOptionGroup(opt) !\u003d null) {\r\n         ((OptionGroup) (options.getOptionGroup(opt))).setSelected(opt);\r\n     }\r\n     if (opt.hasArg()) {\r\n         processArgs(opt, iter);\r\n     }\r\n     cmd.setOpt(opt);\r\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "16b91ad2b9f5f524b2b07ba4515c65479999f7ee": {
      "type": "Ybodychange",
      "commitMessage": "its now possible to specify the number of argument values an option can have, refactored parsers argument value handling, refactored argument handling in Option, added getOptions method on CommandLine to return an array of the processed Options\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/cli/trunk@129794 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "8/4/02 2:45 AM",
      "commitName": "16b91ad2b9f5f524b2b07ba4515c65479999f7ee",
      "commitAuthor": "John Keyes",
      "commitDateOld": "7/5/02 1:32 AM",
      "commitNameOld": "66d0ae6216730abd8bd736e210be73229c8e807b",
      "commitAuthorOld": "John Keyes",
      "daysBetweenCommits": 30.05,
      "commitsBetweenForRepo": 16,
      "commitsBetweenForFile": 1,
      "actualSource": "private void processOption(String arg, ListIterator iter) throws ParseException {\r\n    Option opt \u003d (Option) options.getOption(arg);\r\n    if (opt \u003d\u003d null) {\r\n        throw new UnrecognizedOptionException(\"Unrecognized option: \" + arg);\r\n    }\r\n    if (opt.isRequired()) {\r\n        requiredOptions.remove(opt);\r\n    }\r\n    if (options.getOptionGroup(opt) !\u003d null) {\r\n        ((OptionGroup) (options.getOptionGroup(opt))).setSelected(opt);\r\n    }\r\n    if (opt.hasArg()) {\r\n        processArgs(opt, iter);\r\n    }\r\n    cmd.setOpt(opt);\r\n}",
      "path": "src/java/org/apache/commons/cli/PosixParser.java",
      "functionStartLine": 235,
      "functionName": "processOption",
      "functionAnnotation": "",
      "functionDoc": "Process the option represented by \u003ccode\u003earg\u003c/code\u003e.\r\n\r\n@param arg the string representation of an option\r\n@param iter the command line token iterator\r\n",
      "diff": "@@ -1,20 +1,16 @@\n private void processOption(String arg, ListIterator iter) throws ParseException {\r\n     Option opt \u003d (Option) options.getOption(arg);\r\n     if (opt \u003d\u003d null) {\r\n         throw new UnrecognizedOptionException(\"Unrecognized option: \" + arg);\r\n     }\r\n     if (opt.isRequired()) {\r\n         requiredOptions.remove(opt);\r\n     }\r\n     if (options.getOptionGroup(opt) !\u003d null) {\r\n         ((OptionGroup) (options.getOptionGroup(opt))).setSelected(opt);\r\n     }\r\n     if (opt.hasArg()) {\r\n-        if (opt.hasMultipleArgs()) {\r\n-            processMultipleArgs(opt, iter);\r\n-        } else {\r\n-            opt.addValue((String) iter.next());\r\n-        }\r\n+        processArgs(opt, iter);\r\n     }\r\n     cmd.setOpt(opt);\r\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "66d0ae6216730abd8bd736e210be73229c8e807b": {
      "type": "Ymultichange(Ymovefromfile,Yexceptionschange,Ybodychange,Ydocchange,Yparameterchange)",
      "commitMessage": "implemented the parser factory, added new unit tests for the GnuParser, a good deal of refactoring for both parsers\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/cli/trunk@129778 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "7/5/02 1:32 AM",
      "commitName": "66d0ae6216730abd8bd736e210be73229c8e807b",
      "commitAuthor": "John Keyes",
      "subchanges": [
        {
          "type": "Ymovefromfile",
          "commitMessage": "implemented the parser factory, added new unit tests for the GnuParser, a good deal of refactoring for both parsers\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/cli/trunk@129778 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "7/5/02 1:32 AM",
          "commitName": "66d0ae6216730abd8bd736e210be73229c8e807b",
          "commitAuthor": "John Keyes",
          "commitDateOld": "6/24/02 11:38 PM",
          "commitNameOld": "bb7fb06cb9f3517cab1400d965e4ae8935cf6bfd",
          "commitAuthorOld": "John Keyes",
          "daysBetweenCommits": 10.08,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "private void processOption(String arg, ListIterator iter) throws ParseException {\r\n    Option opt \u003d (Option) options.getOption(arg);\r\n    if (opt \u003d\u003d null) {\r\n        throw new UnrecognizedOptionException(\"Unrecognized option: \" + arg);\r\n    }\r\n    if (opt.isRequired()) {\r\n        requiredOptions.remove(opt);\r\n    }\r\n    if (options.getOptionGroup(opt) !\u003d null) {\r\n        ((OptionGroup) (options.getOptionGroup(opt))).setSelected(opt);\r\n    }\r\n    if (opt.hasArg()) {\r\n        if (opt.hasMultipleArgs()) {\r\n            processMultipleArgs(opt, iter);\r\n        } else {\r\n            opt.addValue((String) iter.next());\r\n        }\r\n    }\r\n    cmd.setOpt(opt);\r\n}",
          "path": "src/java/org/apache/commons/cli/PosixParser.java",
          "functionStartLine": 238,
          "functionName": "processOption",
          "functionAnnotation": "",
          "functionDoc": "Process the option represented by \u003ccode\u003earg\u003c/code\u003e.\r\n\r\n@param arg the string representation of an option\r\n@param iter the command line token iterator\r\n",
          "diff": "@@ -1,40 +1,20 @@\n-private void processOption(String eachArg, Option option, ListIterator argIter, CommandLine cl) throws UnrecognizedOptionException, AlreadySelectedException, MissingArgumentException {\r\n-    if (option \u003d\u003d null) {\r\n-        throw new UnrecognizedOptionException(\"Unrecognized option: \" + eachArg);\r\n-    } else {\r\n-        if (optionGroups.get(option) !\u003d null) {\r\n-            ((OptionGroup) (optionGroups.get(option))).setSelected(option);\r\n-        }\r\n-        if (option.isRequired()) {\r\n-            requiredOpts.remove(\"-\" + option.getOpt());\r\n-        }\r\n-        if (option.hasArg()) {\r\n-            if (argIter.hasNext()) {\r\n-                eachArg \u003d (String) argIter.next();\r\n-                option.addValue(eachArg);\r\n-                if (option.hasMultipleArgs()) {\r\n-                    while (argIter.hasNext()) {\r\n-                        eachArg \u003d (String) argIter.next();\r\n-                        if (eachArg.startsWith(\"-\")) {\r\n-                            argIter.previous();\r\n-                            cl.setOpt(option);\r\n-                            break;\r\n-                        } else {\r\n-                            option.addValue(eachArg);\r\n-                        }\r\n-                    }\r\n-                } else {\r\n-                    cl.setOpt(option);\r\n-                    return;\r\n-                }\r\n-                if (!argIter.hasNext()) {\r\n-                    cl.setOpt(option);\r\n-                }\r\n-            } else {\r\n-                throw new MissingArgumentException(eachArg + \" requires an argument.\");\r\n-            }\r\n+private void processOption(String arg, ListIterator iter) throws ParseException {\r\n+    Option opt \u003d (Option) options.getOption(arg);\r\n+    if (opt \u003d\u003d null) {\r\n+        throw new UnrecognizedOptionException(\"Unrecognized option: \" + arg);\r\n+    }\r\n+    if (opt.isRequired()) {\r\n+        requiredOptions.remove(opt);\r\n+    }\r\n+    if (options.getOptionGroup(opt) !\u003d null) {\r\n+        ((OptionGroup) (options.getOptionGroup(opt))).setSelected(opt);\r\n+    }\r\n+    if (opt.hasArg()) {\r\n+        if (opt.hasMultipleArgs()) {\r\n+            processMultipleArgs(opt, iter);\r\n         } else {\r\n-            cl.setOpt(option);\r\n+            opt.addValue((String) iter.next());\r\n         }\r\n     }\r\n+    cmd.setOpt(opt);\r\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldPath": "src/java/org/apache/commons/cli/Options.java",
            "newPath": "src/java/org/apache/commons/cli/PosixParser.java",
            "oldMethodName": "processOption",
            "newMethodName": "processOption"
          }
        },
        {
          "type": "Yexceptionschange",
          "commitMessage": "implemented the parser factory, added new unit tests for the GnuParser, a good deal of refactoring for both parsers\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/cli/trunk@129778 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "7/5/02 1:32 AM",
          "commitName": "66d0ae6216730abd8bd736e210be73229c8e807b",
          "commitAuthor": "John Keyes",
          "commitDateOld": "6/24/02 11:38 PM",
          "commitNameOld": "bb7fb06cb9f3517cab1400d965e4ae8935cf6bfd",
          "commitAuthorOld": "John Keyes",
          "daysBetweenCommits": 10.08,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "private void processOption(String arg, ListIterator iter) throws ParseException {\r\n    Option opt \u003d (Option) options.getOption(arg);\r\n    if (opt \u003d\u003d null) {\r\n        throw new UnrecognizedOptionException(\"Unrecognized option: \" + arg);\r\n    }\r\n    if (opt.isRequired()) {\r\n        requiredOptions.remove(opt);\r\n    }\r\n    if (options.getOptionGroup(opt) !\u003d null) {\r\n        ((OptionGroup) (options.getOptionGroup(opt))).setSelected(opt);\r\n    }\r\n    if (opt.hasArg()) {\r\n        if (opt.hasMultipleArgs()) {\r\n            processMultipleArgs(opt, iter);\r\n        } else {\r\n            opt.addValue((String) iter.next());\r\n        }\r\n    }\r\n    cmd.setOpt(opt);\r\n}",
          "path": "src/java/org/apache/commons/cli/PosixParser.java",
          "functionStartLine": 238,
          "functionName": "processOption",
          "functionAnnotation": "",
          "functionDoc": "Process the option represented by \u003ccode\u003earg\u003c/code\u003e.\r\n\r\n@param arg the string representation of an option\r\n@param iter the command line token iterator\r\n",
          "diff": "@@ -1,40 +1,20 @@\n-private void processOption(String eachArg, Option option, ListIterator argIter, CommandLine cl) throws UnrecognizedOptionException, AlreadySelectedException, MissingArgumentException {\r\n-    if (option \u003d\u003d null) {\r\n-        throw new UnrecognizedOptionException(\"Unrecognized option: \" + eachArg);\r\n-    } else {\r\n-        if (optionGroups.get(option) !\u003d null) {\r\n-            ((OptionGroup) (optionGroups.get(option))).setSelected(option);\r\n-        }\r\n-        if (option.isRequired()) {\r\n-            requiredOpts.remove(\"-\" + option.getOpt());\r\n-        }\r\n-        if (option.hasArg()) {\r\n-            if (argIter.hasNext()) {\r\n-                eachArg \u003d (String) argIter.next();\r\n-                option.addValue(eachArg);\r\n-                if (option.hasMultipleArgs()) {\r\n-                    while (argIter.hasNext()) {\r\n-                        eachArg \u003d (String) argIter.next();\r\n-                        if (eachArg.startsWith(\"-\")) {\r\n-                            argIter.previous();\r\n-                            cl.setOpt(option);\r\n-                            break;\r\n-                        } else {\r\n-                            option.addValue(eachArg);\r\n-                        }\r\n-                    }\r\n-                } else {\r\n-                    cl.setOpt(option);\r\n-                    return;\r\n-                }\r\n-                if (!argIter.hasNext()) {\r\n-                    cl.setOpt(option);\r\n-                }\r\n-            } else {\r\n-                throw new MissingArgumentException(eachArg + \" requires an argument.\");\r\n-            }\r\n+private void processOption(String arg, ListIterator iter) throws ParseException {\r\n+    Option opt \u003d (Option) options.getOption(arg);\r\n+    if (opt \u003d\u003d null) {\r\n+        throw new UnrecognizedOptionException(\"Unrecognized option: \" + arg);\r\n+    }\r\n+    if (opt.isRequired()) {\r\n+        requiredOptions.remove(opt);\r\n+    }\r\n+    if (options.getOptionGroup(opt) !\u003d null) {\r\n+        ((OptionGroup) (options.getOptionGroup(opt))).setSelected(opt);\r\n+    }\r\n+    if (opt.hasArg()) {\r\n+        if (opt.hasMultipleArgs()) {\r\n+            processMultipleArgs(opt, iter);\r\n         } else {\r\n-            cl.setOpt(option);\r\n+            opt.addValue((String) iter.next());\r\n         }\r\n     }\r\n+    cmd.setOpt(opt);\r\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[UnrecognizedOptionException, AlreadySelectedException, MissingArgumentException]",
            "newValue": "[ParseException]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "implemented the parser factory, added new unit tests for the GnuParser, a good deal of refactoring for both parsers\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/cli/trunk@129778 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "7/5/02 1:32 AM",
          "commitName": "66d0ae6216730abd8bd736e210be73229c8e807b",
          "commitAuthor": "John Keyes",
          "commitDateOld": "6/24/02 11:38 PM",
          "commitNameOld": "bb7fb06cb9f3517cab1400d965e4ae8935cf6bfd",
          "commitAuthorOld": "John Keyes",
          "daysBetweenCommits": 10.08,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "private void processOption(String arg, ListIterator iter) throws ParseException {\r\n    Option opt \u003d (Option) options.getOption(arg);\r\n    if (opt \u003d\u003d null) {\r\n        throw new UnrecognizedOptionException(\"Unrecognized option: \" + arg);\r\n    }\r\n    if (opt.isRequired()) {\r\n        requiredOptions.remove(opt);\r\n    }\r\n    if (options.getOptionGroup(opt) !\u003d null) {\r\n        ((OptionGroup) (options.getOptionGroup(opt))).setSelected(opt);\r\n    }\r\n    if (opt.hasArg()) {\r\n        if (opt.hasMultipleArgs()) {\r\n            processMultipleArgs(opt, iter);\r\n        } else {\r\n            opt.addValue((String) iter.next());\r\n        }\r\n    }\r\n    cmd.setOpt(opt);\r\n}",
          "path": "src/java/org/apache/commons/cli/PosixParser.java",
          "functionStartLine": 238,
          "functionName": "processOption",
          "functionAnnotation": "",
          "functionDoc": "Process the option represented by \u003ccode\u003earg\u003c/code\u003e.\r\n\r\n@param arg the string representation of an option\r\n@param iter the command line token iterator\r\n",
          "diff": "@@ -1,40 +1,20 @@\n-private void processOption(String eachArg, Option option, ListIterator argIter, CommandLine cl) throws UnrecognizedOptionException, AlreadySelectedException, MissingArgumentException {\r\n-    if (option \u003d\u003d null) {\r\n-        throw new UnrecognizedOptionException(\"Unrecognized option: \" + eachArg);\r\n-    } else {\r\n-        if (optionGroups.get(option) !\u003d null) {\r\n-            ((OptionGroup) (optionGroups.get(option))).setSelected(option);\r\n-        }\r\n-        if (option.isRequired()) {\r\n-            requiredOpts.remove(\"-\" + option.getOpt());\r\n-        }\r\n-        if (option.hasArg()) {\r\n-            if (argIter.hasNext()) {\r\n-                eachArg \u003d (String) argIter.next();\r\n-                option.addValue(eachArg);\r\n-                if (option.hasMultipleArgs()) {\r\n-                    while (argIter.hasNext()) {\r\n-                        eachArg \u003d (String) argIter.next();\r\n-                        if (eachArg.startsWith(\"-\")) {\r\n-                            argIter.previous();\r\n-                            cl.setOpt(option);\r\n-                            break;\r\n-                        } else {\r\n-                            option.addValue(eachArg);\r\n-                        }\r\n-                    }\r\n-                } else {\r\n-                    cl.setOpt(option);\r\n-                    return;\r\n-                }\r\n-                if (!argIter.hasNext()) {\r\n-                    cl.setOpt(option);\r\n-                }\r\n-            } else {\r\n-                throw new MissingArgumentException(eachArg + \" requires an argument.\");\r\n-            }\r\n+private void processOption(String arg, ListIterator iter) throws ParseException {\r\n+    Option opt \u003d (Option) options.getOption(arg);\r\n+    if (opt \u003d\u003d null) {\r\n+        throw new UnrecognizedOptionException(\"Unrecognized option: \" + arg);\r\n+    }\r\n+    if (opt.isRequired()) {\r\n+        requiredOptions.remove(opt);\r\n+    }\r\n+    if (options.getOptionGroup(opt) !\u003d null) {\r\n+        ((OptionGroup) (options.getOptionGroup(opt))).setSelected(opt);\r\n+    }\r\n+    if (opt.hasArg()) {\r\n+        if (opt.hasMultipleArgs()) {\r\n+            processMultipleArgs(opt, iter);\r\n         } else {\r\n-            cl.setOpt(option);\r\n+            opt.addValue((String) iter.next());\r\n         }\r\n     }\r\n+    cmd.setOpt(opt);\r\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        },
        {
          "type": "Ydocchange",
          "commitMessage": "implemented the parser factory, added new unit tests for the GnuParser, a good deal of refactoring for both parsers\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/cli/trunk@129778 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "7/5/02 1:32 AM",
          "commitName": "66d0ae6216730abd8bd736e210be73229c8e807b",
          "commitAuthor": "John Keyes",
          "commitDateOld": "6/24/02 11:38 PM",
          "commitNameOld": "bb7fb06cb9f3517cab1400d965e4ae8935cf6bfd",
          "commitAuthorOld": "John Keyes",
          "daysBetweenCommits": 10.08,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "private void processOption(String arg, ListIterator iter) throws ParseException {\r\n    Option opt \u003d (Option) options.getOption(arg);\r\n    if (opt \u003d\u003d null) {\r\n        throw new UnrecognizedOptionException(\"Unrecognized option: \" + arg);\r\n    }\r\n    if (opt.isRequired()) {\r\n        requiredOptions.remove(opt);\r\n    }\r\n    if (options.getOptionGroup(opt) !\u003d null) {\r\n        ((OptionGroup) (options.getOptionGroup(opt))).setSelected(opt);\r\n    }\r\n    if (opt.hasArg()) {\r\n        if (opt.hasMultipleArgs()) {\r\n            processMultipleArgs(opt, iter);\r\n        } else {\r\n            opt.addValue((String) iter.next());\r\n        }\r\n    }\r\n    cmd.setOpt(opt);\r\n}",
          "path": "src/java/org/apache/commons/cli/PosixParser.java",
          "functionStartLine": 238,
          "functionName": "processOption",
          "functionAnnotation": "",
          "functionDoc": "Process the option represented by \u003ccode\u003earg\u003c/code\u003e.\r\n\r\n@param arg the string representation of an option\r\n@param iter the command line token iterator\r\n",
          "diff": "@@ -1,40 +1,20 @@\n-private void processOption(String eachArg, Option option, ListIterator argIter, CommandLine cl) throws UnrecognizedOptionException, AlreadySelectedException, MissingArgumentException {\r\n-    if (option \u003d\u003d null) {\r\n-        throw new UnrecognizedOptionException(\"Unrecognized option: \" + eachArg);\r\n-    } else {\r\n-        if (optionGroups.get(option) !\u003d null) {\r\n-            ((OptionGroup) (optionGroups.get(option))).setSelected(option);\r\n-        }\r\n-        if (option.isRequired()) {\r\n-            requiredOpts.remove(\"-\" + option.getOpt());\r\n-        }\r\n-        if (option.hasArg()) {\r\n-            if (argIter.hasNext()) {\r\n-                eachArg \u003d (String) argIter.next();\r\n-                option.addValue(eachArg);\r\n-                if (option.hasMultipleArgs()) {\r\n-                    while (argIter.hasNext()) {\r\n-                        eachArg \u003d (String) argIter.next();\r\n-                        if (eachArg.startsWith(\"-\")) {\r\n-                            argIter.previous();\r\n-                            cl.setOpt(option);\r\n-                            break;\r\n-                        } else {\r\n-                            option.addValue(eachArg);\r\n-                        }\r\n-                    }\r\n-                } else {\r\n-                    cl.setOpt(option);\r\n-                    return;\r\n-                }\r\n-                if (!argIter.hasNext()) {\r\n-                    cl.setOpt(option);\r\n-                }\r\n-            } else {\r\n-                throw new MissingArgumentException(eachArg + \" requires an argument.\");\r\n-            }\r\n+private void processOption(String arg, ListIterator iter) throws ParseException {\r\n+    Option opt \u003d (Option) options.getOption(arg);\r\n+    if (opt \u003d\u003d null) {\r\n+        throw new UnrecognizedOptionException(\"Unrecognized option: \" + arg);\r\n+    }\r\n+    if (opt.isRequired()) {\r\n+        requiredOptions.remove(opt);\r\n+    }\r\n+    if (options.getOptionGroup(opt) !\u003d null) {\r\n+        ((OptionGroup) (options.getOptionGroup(opt))).setSelected(opt);\r\n+    }\r\n+    if (opt.hasArg()) {\r\n+        if (opt.hasMultipleArgs()) {\r\n+            processMultipleArgs(opt, iter);\r\n         } else {\r\n-            cl.setOpt(option);\r\n+            opt.addValue((String) iter.next());\r\n         }\r\n     }\r\n+    cmd.setOpt(opt);\r\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "\u003cp\u003eprocessOption rakes the current option and checks if it is\r\nan unrecognised option, whether the argument value is missing or\r\nwhether the option has already been selected.\u003c/p\u003e\r\n\r\n@param eachArg the current option read from command line\r\n@param option the current option corresponding to eachArg\r\n@param argIter the argument iterator\r\n@param cl the current command line\r\n@throws MissingArgumentException if an argument value for an option is not present\r\n@throws UnrecognizedOptionException if an unrecognised option is present\r\n@throws AlreadySelectedException if the same option appears more than once\r\n",
            "newValue": "Process the option represented by \u003ccode\u003earg\u003c/code\u003e.\r\n\r\n@param arg the string representation of an option\r\n@param iter the command line token iterator\r\n"
          }
        },
        {
          "type": "Yparameterchange",
          "commitMessage": "implemented the parser factory, added new unit tests for the GnuParser, a good deal of refactoring for both parsers\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/cli/trunk@129778 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "7/5/02 1:32 AM",
          "commitName": "66d0ae6216730abd8bd736e210be73229c8e807b",
          "commitAuthor": "John Keyes",
          "commitDateOld": "6/24/02 11:38 PM",
          "commitNameOld": "bb7fb06cb9f3517cab1400d965e4ae8935cf6bfd",
          "commitAuthorOld": "John Keyes",
          "daysBetweenCommits": 10.08,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "private void processOption(String arg, ListIterator iter) throws ParseException {\r\n    Option opt \u003d (Option) options.getOption(arg);\r\n    if (opt \u003d\u003d null) {\r\n        throw new UnrecognizedOptionException(\"Unrecognized option: \" + arg);\r\n    }\r\n    if (opt.isRequired()) {\r\n        requiredOptions.remove(opt);\r\n    }\r\n    if (options.getOptionGroup(opt) !\u003d null) {\r\n        ((OptionGroup) (options.getOptionGroup(opt))).setSelected(opt);\r\n    }\r\n    if (opt.hasArg()) {\r\n        if (opt.hasMultipleArgs()) {\r\n            processMultipleArgs(opt, iter);\r\n        } else {\r\n            opt.addValue((String) iter.next());\r\n        }\r\n    }\r\n    cmd.setOpt(opt);\r\n}",
          "path": "src/java/org/apache/commons/cli/PosixParser.java",
          "functionStartLine": 238,
          "functionName": "processOption",
          "functionAnnotation": "",
          "functionDoc": "Process the option represented by \u003ccode\u003earg\u003c/code\u003e.\r\n\r\n@param arg the string representation of an option\r\n@param iter the command line token iterator\r\n",
          "diff": "@@ -1,40 +1,20 @@\n-private void processOption(String eachArg, Option option, ListIterator argIter, CommandLine cl) throws UnrecognizedOptionException, AlreadySelectedException, MissingArgumentException {\r\n-    if (option \u003d\u003d null) {\r\n-        throw new UnrecognizedOptionException(\"Unrecognized option: \" + eachArg);\r\n-    } else {\r\n-        if (optionGroups.get(option) !\u003d null) {\r\n-            ((OptionGroup) (optionGroups.get(option))).setSelected(option);\r\n-        }\r\n-        if (option.isRequired()) {\r\n-            requiredOpts.remove(\"-\" + option.getOpt());\r\n-        }\r\n-        if (option.hasArg()) {\r\n-            if (argIter.hasNext()) {\r\n-                eachArg \u003d (String) argIter.next();\r\n-                option.addValue(eachArg);\r\n-                if (option.hasMultipleArgs()) {\r\n-                    while (argIter.hasNext()) {\r\n-                        eachArg \u003d (String) argIter.next();\r\n-                        if (eachArg.startsWith(\"-\")) {\r\n-                            argIter.previous();\r\n-                            cl.setOpt(option);\r\n-                            break;\r\n-                        } else {\r\n-                            option.addValue(eachArg);\r\n-                        }\r\n-                    }\r\n-                } else {\r\n-                    cl.setOpt(option);\r\n-                    return;\r\n-                }\r\n-                if (!argIter.hasNext()) {\r\n-                    cl.setOpt(option);\r\n-                }\r\n-            } else {\r\n-                throw new MissingArgumentException(eachArg + \" requires an argument.\");\r\n-            }\r\n+private void processOption(String arg, ListIterator iter) throws ParseException {\r\n+    Option opt \u003d (Option) options.getOption(arg);\r\n+    if (opt \u003d\u003d null) {\r\n+        throw new UnrecognizedOptionException(\"Unrecognized option: \" + arg);\r\n+    }\r\n+    if (opt.isRequired()) {\r\n+        requiredOptions.remove(opt);\r\n+    }\r\n+    if (options.getOptionGroup(opt) !\u003d null) {\r\n+        ((OptionGroup) (options.getOptionGroup(opt))).setSelected(opt);\r\n+    }\r\n+    if (opt.hasArg()) {\r\n+        if (opt.hasMultipleArgs()) {\r\n+            processMultipleArgs(opt, iter);\r\n         } else {\r\n-            cl.setOpt(option);\r\n+            opt.addValue((String) iter.next());\r\n         }\r\n     }\r\n+    cmd.setOpt(opt);\r\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[eachArg-String, option-Option, argIter-ListIterator, cl-CommandLine]",
            "newValue": "[arg-String, iter-ListIterator]"
          }
        }
      ]
    },
    "4cca25d72b216bfc8f2e75e4a99afb608ceb6df8": {
      "type": "Ybodychange",
      "commitMessage": "configurable parser support added, PosixParser added\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/cli/trunk@129770 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "6/17/02 2:00 AM",
      "commitName": "4cca25d72b216bfc8f2e75e4a99afb608ceb6df8",
      "commitAuthor": "John Keyes",
      "commitDateOld": "6/10/02 9:01 PM",
      "commitNameOld": "aae50c585ec3ac33c6a9af792e80378904a73195",
      "commitAuthorOld": "James Strachan",
      "daysBetweenCommits": 6.21,
      "commitsBetweenForRepo": 3,
      "commitsBetweenForFile": 1,
      "actualSource": "private void processOption(String eachArg, Option option, ListIterator argIter, CommandLine cl) throws UnrecognizedOptionException, AlreadySelectedException, MissingArgumentException {\r\n    if (option \u003d\u003d null) {\r\n        throw new UnrecognizedOptionException(\"Unrecognized option: \" + eachArg);\r\n    } else {\r\n        if (optionGroups.get(option) !\u003d null) {\r\n            ((OptionGroup) (optionGroups.get(option))).setSelected(option);\r\n        }\r\n        if (option.isRequired()) {\r\n            requiredOpts.remove(\"-\" + option.getOpt());\r\n        }\r\n        if (option.hasArg()) {\r\n            if (argIter.hasNext()) {\r\n                eachArg \u003d (String) argIter.next();\r\n                option.addValue(eachArg);\r\n                if (option.hasMultipleArgs()) {\r\n                    while (argIter.hasNext()) {\r\n                        eachArg \u003d (String) argIter.next();\r\n                        if (eachArg.startsWith(\"-\")) {\r\n                            argIter.previous();\r\n                            cl.setOpt(option);\r\n                            break;\r\n                        } else {\r\n                            option.addValue(eachArg);\r\n                        }\r\n                    }\r\n                } else {\r\n                    cl.setOpt(option);\r\n                    return;\r\n                }\r\n                if (!argIter.hasNext()) {\r\n                    cl.setOpt(option);\r\n                }\r\n            } else {\r\n                throw new MissingArgumentException(eachArg + \" requires an argument.\");\r\n            }\r\n        } else {\r\n            cl.setOpt(option);\r\n        }\r\n    }\r\n}",
      "path": "src/java/org/apache/commons/cli/Options.java",
      "functionStartLine": 489,
      "functionName": "processOption",
      "functionAnnotation": "",
      "functionDoc": "\u003cp\u003eprocessOption rakes the current option and checks if it is\r\nan unrecognised option, whether the argument value is missing or\r\nwhether the option has already been selected.\u003c/p\u003e\r\n\r\n@param eachArg the current option read from command line\r\n@param option the current option corresponding to eachArg\r\n@param argIter the argument iterator\r\n@param cl the current command line\r\n@throws MissingArgumentException if an argument value for an option is not present\r\n@throws UnrecognizedOptionException if an unrecognised option is present\r\n@throws AlreadySelectedException if the same option appears more than once\r\n",
      "diff": "",
      "extendedDetails": {}
    },
    "aae50c585ec3ac33c6a9af792e80378904a73195": {
      "type": "Yintroduced",
      "commitMessage": "moved cli over from the sandbox to commons proper\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/cli/trunk@129767 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "6/10/02 9:01 PM",
      "commitName": "aae50c585ec3ac33c6a9af792e80378904a73195",
      "commitAuthor": "James Strachan",
      "diff": "@@ -0,0 +1,40 @@\n+private void processOption(String eachArg, Option option, ListIterator argIter, CommandLine cl) throws UnrecognizedOptionException, AlreadySelectedException, MissingArgumentException {\r\n+    if (option \u003d\u003d null) {\r\n+        throw new UnrecognizedOptionException(\"Unrecognized option: \" + eachArg);\r\n+    } else {\r\n+        if (optionGroups.get(option) !\u003d null) {\r\n+            ((OptionGroup) (optionGroups.get(option))).setSelected(option);\r\n+        }\r\n+        if (option.isRequired()) {\r\n+            requiredOpts.remove(\"-\" + option.getOpt());\r\n+        }\r\n+        if (option.hasArg()) {\r\n+            if (argIter.hasNext()) {\r\n+                eachArg \u003d (String) argIter.next();\r\n+                option.addValue(eachArg);\r\n+                if (option.hasMultipleArgs()) {\r\n+                    while (argIter.hasNext()) {\r\n+                        eachArg \u003d (String) argIter.next();\r\n+                        if (eachArg.startsWith(\"-\")) {\r\n+                            argIter.previous();\r\n+                            cl.setOpt(option);\r\n+                            break;\r\n+                        } else {\r\n+                            option.addValue(eachArg);\r\n+                        }\r\n+                    }\r\n+                } else {\r\n+                    cl.setOpt(option);\r\n+                    return;\r\n+                }\r\n+                if (!argIter.hasNext()) {\r\n+                    cl.setOpt(option);\r\n+                }\r\n+            } else {\r\n+                throw new MissingArgumentException(eachArg + \" requires an argument.\");\r\n+            }\r\n+        } else {\r\n+            cl.setOpt(option);\r\n+        }\r\n+    }\r\n+}\n\\ No newline at end of file\n",
      "actualSource": "private void processOption(String eachArg, Option option, ListIterator argIter, CommandLine cl) throws UnrecognizedOptionException, AlreadySelectedException, MissingArgumentException {\r\n    if (option \u003d\u003d null) {\r\n        throw new UnrecognizedOptionException(\"Unrecognized option: \" + eachArg);\r\n    } else {\r\n        if (optionGroups.get(option) !\u003d null) {\r\n            ((OptionGroup) (optionGroups.get(option))).setSelected(option);\r\n        }\r\n        if (option.isRequired()) {\r\n            requiredOpts.remove(\"-\" + option.getOpt());\r\n        }\r\n        if (option.hasArg()) {\r\n            if (argIter.hasNext()) {\r\n                eachArg \u003d (String) argIter.next();\r\n                option.addValue(eachArg);\r\n                if (option.hasMultipleArgs()) {\r\n                    while (argIter.hasNext()) {\r\n                        eachArg \u003d (String) argIter.next();\r\n                        if (eachArg.startsWith(\"-\")) {\r\n                            argIter.previous();\r\n                            cl.setOpt(option);\r\n                            break;\r\n                        } else {\r\n                            option.addValue(eachArg);\r\n                        }\r\n                    }\r\n                } else {\r\n                    cl.setOpt(option);\r\n                    return;\r\n                }\r\n                if (!argIter.hasNext()) {\r\n                    cl.setOpt(option);\r\n                }\r\n            } else {\r\n                throw new MissingArgumentException(eachArg + \" requires an argument.\");\r\n            }\r\n        } else {\r\n            cl.setOpt(option);\r\n        }\r\n    }\r\n}",
      "path": "src/java/org/apache/commons/cli/Options.java",
      "functionStartLine": 458,
      "functionName": "processOption",
      "functionAnnotation": "",
      "functionDoc": "\u003cp\u003eprocessOption rakes the current option and checks if it is\r\nan unrecognised option, whether the argument value is missing or\r\nwhether the option has already been selected.\u003c/p\u003e\r\n\r\n@param eachArg the current option read from command line\r\n@param option the current option corresponding to eachArg\r\n@param argIter the argument iterator\r\n@param cl the current command line\r\n@throws MissingArgumentException if an argument value for an option is not present\r\n@throws UnrecognizedOptionException if an unrecognised option is present\r\n@throws AlreadySelectedException if the same option appears more than once\r\n"
    }
  }
}