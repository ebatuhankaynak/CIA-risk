{
  "origin": "codeshovel",
  "repositoryName": "commons-cli",
  "repositoryPath": "D:/_SELEN/_2022-2023/CS588/GitHub_Dataset/commons-cli/commons-cli/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ApplicationTest.java",
  "functionName": "testNLT",
  "functionId": "testNLT",
  "sourceFilePath": "src/test/java/org/apache/commons/cli/ApplicationTest.java",
  "functionAnnotation": "@Test",
  "functionDoc": "Real world test with long and short options.\r\n",
  "functionStartLine": 282,
  "functionEndLine": 338,
  "numCommitsSeen": 48,
  "timeTaken": 303,
  "changeHistory": [
    "bc0edc47dbf47cdaa3485cfb724982f377c900df",
    "357a8b0b8f1090db29e0d541a9419f570a78457b",
    "60835e2f29d4ec09eead7789405d99f92c36a29e",
    "cd745ecf52fb2fe8fed1c67fc9149e4be11a73f0",
    "3972aca26c57a2301c9fcb67c11d526c0e0fd084",
    "67289747fc56e79ee9092a47cd2ff5bd0c688a29",
    "d4e64e2bd02759b4f5c01c888a3787d6c526f687",
    "665386dce6e8804408871eb35040bec6d42da528",
    "45c01740a0bc7f9fcf74c1d0acebb55b139ffcfd"
  ],
  "changeHistoryShort": {
    "bc0edc47dbf47cdaa3485cfb724982f377c900df": "Ybodychange",
    "357a8b0b8f1090db29e0d541a9419f570a78457b": "Ybodychange",
    "60835e2f29d4ec09eead7789405d99f92c36a29e": "Yannotationchange",
    "cd745ecf52fb2fe8fed1c67fc9149e4be11a73f0": "Yfilerename",
    "3972aca26c57a2301c9fcb67c11d526c0e0fd084": "Ymultichange(Ymovefromfile,Yrename)",
    "67289747fc56e79ee9092a47cd2ff5bd0c688a29": "Ybodychange",
    "d4e64e2bd02759b4f5c01c888a3787d6c526f687": "Ydocchange",
    "665386dce6e8804408871eb35040bec6d42da528": "Ymultichange(Yfilerename,Yexceptionschange,Ybodychange)",
    "45c01740a0bc7f9fcf74c1d0acebb55b139ffcfd": "Yintroduced"
  },
  "changeHistoryDetails": {
    "bc0edc47dbf47cdaa3485cfb724982f377c900df": {
      "type": "Ybodychange",
      "commitMessage": "Clean ups.\n\n- maven-checkstyle-plugin 3.1.1 -\u003e 3.1.2.\n- checkstyle -\u003e 9.0\n- Updates for 21st century.\n- No need to nest else clause.\n- Use simple array declarations.\n- Use valueOf instead of new for Numbers.\n- Consistent formatting.\n- Remove some inline comments //-----...\n",
      "commitDate": "10/2/21 11:04 PM",
      "commitName": "bc0edc47dbf47cdaa3485cfb724982f377c900df",
      "commitAuthor": "Gary Gregory",
      "commitDateOld": "12/28/20 6:44 PM",
      "commitNameOld": "c67275279176504a6f5fc556cfa247e1df02a580",
      "commitAuthorOld": "Arturo Bernal",
      "daysBetweenCommits": 278.18,
      "commitsBetweenForRepo": 38,
      "commitsBetweenForFile": 1,
      "actualSource": "@Test\r\npublic void testNLT() throws Exception {\r\n    final Option help \u003d new Option(\"h\", \"help\", false, \"print this message\");\r\n    final Option version \u003d new Option(\"v\", \"version\", false, \"print version information\");\r\n    final Option newRun \u003d new Option(\"n\", \"new\", false, \"Create NLT cache entries only for new items\");\r\n    final Option trackerRun \u003d new Option(\"t\", \"tracker\", false, \"Create NLT cache entries only for tracker items\");\r\n    final Option timeLimit \u003d OptionBuilder.withLongOpt(\"limit\").hasArg().withValueSeparator().withDescription(\"Set time limit for execution, in minutes\").create(\"l\");\r\n    final Option age \u003d OptionBuilder.withLongOpt(\"age\").hasArg().withValueSeparator().withDescription(\"Age (in days) of cache item before being recomputed\").create(\"a\");\r\n    final Option server \u003d OptionBuilder.withLongOpt(\"server\").hasArg().withValueSeparator().withDescription(\"The NLT server address\").create(\"s\");\r\n    final Option numResults \u003d OptionBuilder.withLongOpt(\"results\").hasArg().withValueSeparator().withDescription(\"Number of results per item\").create(\"r\");\r\n    final Option configFile \u003d OptionBuilder.withLongOpt(\"file\").hasArg().withValueSeparator().withDescription(\"Use the specified configuration file\").create();\r\n    final Options options \u003d new Options();\r\n    options.addOption(help);\r\n    options.addOption(version);\r\n    options.addOption(newRun);\r\n    options.addOption(trackerRun);\r\n    options.addOption(timeLimit);\r\n    options.addOption(age);\r\n    options.addOption(server);\r\n    options.addOption(numResults);\r\n    options.addOption(configFile);\r\n    final CommandLineParser parser \u003d new PosixParser();\r\n    final String[] args \u003d { \"-v\", \"-l\", \"10\", \"-age\", \"5\", \"-file\", \"filename\" };\r\n    final CommandLine line \u003d parser.parse(options, args);\r\n    assertTrue(line.hasOption(\"v\"));\r\n    assertEquals(line.getOptionValue(\"l\"), \"10\");\r\n    assertEquals(line.getOptionValue(\"limit\"), \"10\");\r\n    assertEquals(line.getOptionValue(\"a\"), \"5\");\r\n    assertEquals(line.getOptionValue(\"age\"), \"5\");\r\n    assertEquals(line.getOptionValue(\"file\"), \"filename\");\r\n}",
      "path": "src/test/java/org/apache/commons/cli/ApplicationTest.java",
      "functionStartLine": 282,
      "functionName": "testNLT",
      "functionAnnotation": "@Test",
      "functionDoc": "Real world test with long and short options.\r\n",
      "diff": "@@ -1,31 +1,31 @@\n @Test\r\n public void testNLT() throws Exception {\r\n     final Option help \u003d new Option(\"h\", \"help\", false, \"print this message\");\r\n     final Option version \u003d new Option(\"v\", \"version\", false, \"print version information\");\r\n     final Option newRun \u003d new Option(\"n\", \"new\", false, \"Create NLT cache entries only for new items\");\r\n     final Option trackerRun \u003d new Option(\"t\", \"tracker\", false, \"Create NLT cache entries only for tracker items\");\r\n     final Option timeLimit \u003d OptionBuilder.withLongOpt(\"limit\").hasArg().withValueSeparator().withDescription(\"Set time limit for execution, in minutes\").create(\"l\");\r\n     final Option age \u003d OptionBuilder.withLongOpt(\"age\").hasArg().withValueSeparator().withDescription(\"Age (in days) of cache item before being recomputed\").create(\"a\");\r\n     final Option server \u003d OptionBuilder.withLongOpt(\"server\").hasArg().withValueSeparator().withDescription(\"The NLT server address\").create(\"s\");\r\n     final Option numResults \u003d OptionBuilder.withLongOpt(\"results\").hasArg().withValueSeparator().withDescription(\"Number of results per item\").create(\"r\");\r\n     final Option configFile \u003d OptionBuilder.withLongOpt(\"file\").hasArg().withValueSeparator().withDescription(\"Use the specified configuration file\").create();\r\n     final Options options \u003d new Options();\r\n     options.addOption(help);\r\n     options.addOption(version);\r\n     options.addOption(newRun);\r\n     options.addOption(trackerRun);\r\n     options.addOption(timeLimit);\r\n     options.addOption(age);\r\n     options.addOption(server);\r\n     options.addOption(numResults);\r\n     options.addOption(configFile);\r\n     final CommandLineParser parser \u003d new PosixParser();\r\n-    final String[] args \u003d new String[] { \"-v\", \"-l\", \"10\", \"-age\", \"5\", \"-file\", \"filename\" };\r\n+    final String[] args \u003d { \"-v\", \"-l\", \"10\", \"-age\", \"5\", \"-file\", \"filename\" };\r\n     final CommandLine line \u003d parser.parse(options, args);\r\n     assertTrue(line.hasOption(\"v\"));\r\n     assertEquals(line.getOptionValue(\"l\"), \"10\");\r\n     assertEquals(line.getOptionValue(\"limit\"), \"10\");\r\n     assertEquals(line.getOptionValue(\"a\"), \"5\");\r\n     assertEquals(line.getOptionValue(\"age\"), \"5\");\r\n     assertEquals(line.getOptionValue(\"file\"), \"filename\");\r\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "357a8b0b8f1090db29e0d541a9419f570a78457b": {
      "type": "Ybodychange",
      "commitMessage": "Add final modifier to local variables.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/cli/trunk@1797673 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "6/5/17 7:37 PM",
      "commitName": "357a8b0b8f1090db29e0d541a9419f570a78457b",
      "commitAuthor": "Gary D. Gregory",
      "commitDateOld": "5/3/15 5:48 PM",
      "commitNameOld": "22576c14c60092fb6c67789ab2f5ee14952c0c18",
      "commitAuthorOld": "Benedikt Ritter",
      "daysBetweenCommits": 764.08,
      "commitsBetweenForRepo": 53,
      "commitsBetweenForFile": 1,
      "actualSource": "@Test\r\npublic void testNLT() throws Exception {\r\n    final Option help \u003d new Option(\"h\", \"help\", false, \"print this message\");\r\n    final Option version \u003d new Option(\"v\", \"version\", false, \"print version information\");\r\n    final Option newRun \u003d new Option(\"n\", \"new\", false, \"Create NLT cache entries only for new items\");\r\n    final Option trackerRun \u003d new Option(\"t\", \"tracker\", false, \"Create NLT cache entries only for tracker items\");\r\n    final Option timeLimit \u003d OptionBuilder.withLongOpt(\"limit\").hasArg().withValueSeparator().withDescription(\"Set time limit for execution, in minutes\").create(\"l\");\r\n    final Option age \u003d OptionBuilder.withLongOpt(\"age\").hasArg().withValueSeparator().withDescription(\"Age (in days) of cache item before being recomputed\").create(\"a\");\r\n    final Option server \u003d OptionBuilder.withLongOpt(\"server\").hasArg().withValueSeparator().withDescription(\"The NLT server address\").create(\"s\");\r\n    final Option numResults \u003d OptionBuilder.withLongOpt(\"results\").hasArg().withValueSeparator().withDescription(\"Number of results per item\").create(\"r\");\r\n    final Option configFile \u003d OptionBuilder.withLongOpt(\"file\").hasArg().withValueSeparator().withDescription(\"Use the specified configuration file\").create();\r\n    final Options options \u003d new Options();\r\n    options.addOption(help);\r\n    options.addOption(version);\r\n    options.addOption(newRun);\r\n    options.addOption(trackerRun);\r\n    options.addOption(timeLimit);\r\n    options.addOption(age);\r\n    options.addOption(server);\r\n    options.addOption(numResults);\r\n    options.addOption(configFile);\r\n    final CommandLineParser parser \u003d new PosixParser();\r\n    final String[] args \u003d new String[] { \"-v\", \"-l\", \"10\", \"-age\", \"5\", \"-file\", \"filename\" };\r\n    final CommandLine line \u003d parser.parse(options, args);\r\n    assertTrue(line.hasOption(\"v\"));\r\n    assertEquals(line.getOptionValue(\"l\"), \"10\");\r\n    assertEquals(line.getOptionValue(\"limit\"), \"10\");\r\n    assertEquals(line.getOptionValue(\"a\"), \"5\");\r\n    assertEquals(line.getOptionValue(\"age\"), \"5\");\r\n    assertEquals(line.getOptionValue(\"file\"), \"filename\");\r\n}",
      "path": "src/test/java/org/apache/commons/cli/ApplicationTest.java",
      "functionStartLine": 277,
      "functionName": "testNLT",
      "functionAnnotation": "@Test",
      "functionDoc": "Real world test with long and short options.\r\n",
      "diff": "@@ -1,31 +1,31 @@\n @Test\r\n public void testNLT() throws Exception {\r\n-    Option help \u003d new Option(\"h\", \"help\", false, \"print this message\");\r\n-    Option version \u003d new Option(\"v\", \"version\", false, \"print version information\");\r\n-    Option newRun \u003d new Option(\"n\", \"new\", false, \"Create NLT cache entries only for new items\");\r\n-    Option trackerRun \u003d new Option(\"t\", \"tracker\", false, \"Create NLT cache entries only for tracker items\");\r\n-    Option timeLimit \u003d OptionBuilder.withLongOpt(\"limit\").hasArg().withValueSeparator().withDescription(\"Set time limit for execution, in minutes\").create(\"l\");\r\n-    Option age \u003d OptionBuilder.withLongOpt(\"age\").hasArg().withValueSeparator().withDescription(\"Age (in days) of cache item before being recomputed\").create(\"a\");\r\n-    Option server \u003d OptionBuilder.withLongOpt(\"server\").hasArg().withValueSeparator().withDescription(\"The NLT server address\").create(\"s\");\r\n-    Option numResults \u003d OptionBuilder.withLongOpt(\"results\").hasArg().withValueSeparator().withDescription(\"Number of results per item\").create(\"r\");\r\n-    Option configFile \u003d OptionBuilder.withLongOpt(\"file\").hasArg().withValueSeparator().withDescription(\"Use the specified configuration file\").create();\r\n-    Options options \u003d new Options();\r\n+    final Option help \u003d new Option(\"h\", \"help\", false, \"print this message\");\r\n+    final Option version \u003d new Option(\"v\", \"version\", false, \"print version information\");\r\n+    final Option newRun \u003d new Option(\"n\", \"new\", false, \"Create NLT cache entries only for new items\");\r\n+    final Option trackerRun \u003d new Option(\"t\", \"tracker\", false, \"Create NLT cache entries only for tracker items\");\r\n+    final Option timeLimit \u003d OptionBuilder.withLongOpt(\"limit\").hasArg().withValueSeparator().withDescription(\"Set time limit for execution, in minutes\").create(\"l\");\r\n+    final Option age \u003d OptionBuilder.withLongOpt(\"age\").hasArg().withValueSeparator().withDescription(\"Age (in days) of cache item before being recomputed\").create(\"a\");\r\n+    final Option server \u003d OptionBuilder.withLongOpt(\"server\").hasArg().withValueSeparator().withDescription(\"The NLT server address\").create(\"s\");\r\n+    final Option numResults \u003d OptionBuilder.withLongOpt(\"results\").hasArg().withValueSeparator().withDescription(\"Number of results per item\").create(\"r\");\r\n+    final Option configFile \u003d OptionBuilder.withLongOpt(\"file\").hasArg().withValueSeparator().withDescription(\"Use the specified configuration file\").create();\r\n+    final Options options \u003d new Options();\r\n     options.addOption(help);\r\n     options.addOption(version);\r\n     options.addOption(newRun);\r\n     options.addOption(trackerRun);\r\n     options.addOption(timeLimit);\r\n     options.addOption(age);\r\n     options.addOption(server);\r\n     options.addOption(numResults);\r\n     options.addOption(configFile);\r\n-    CommandLineParser parser \u003d new PosixParser();\r\n-    String[] args \u003d new String[] { \"-v\", \"-l\", \"10\", \"-age\", \"5\", \"-file\", \"filename\" };\r\n-    CommandLine line \u003d parser.parse(options, args);\r\n+    final CommandLineParser parser \u003d new PosixParser();\r\n+    final String[] args \u003d new String[] { \"-v\", \"-l\", \"10\", \"-age\", \"5\", \"-file\", \"filename\" };\r\n+    final CommandLine line \u003d parser.parse(options, args);\r\n     assertTrue(line.hasOption(\"v\"));\r\n     assertEquals(line.getOptionValue(\"l\"), \"10\");\r\n     assertEquals(line.getOptionValue(\"limit\"), \"10\");\r\n     assertEquals(line.getOptionValue(\"a\"), \"5\");\r\n     assertEquals(line.getOptionValue(\"age\"), \"5\");\r\n     assertEquals(line.getOptionValue(\"file\"), \"filename\");\r\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "60835e2f29d4ec09eead7789405d99f92c36a29e": {
      "type": "Yannotationchange",
      "commitMessage": "[CLI-227] Convert unit tests to junit 4, upgrade junit to 4.11, move authors to pom.xml.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/cli/trunk@1442904 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "2/6/13 12:57 PM",
      "commitName": "60835e2f29d4ec09eead7789405d99f92c36a29e",
      "commitAuthor": "Thomas Neidhart",
      "commitDateOld": "1/30/13 7:20 PM",
      "commitNameOld": "0cbe33506c92b790fd4dc866237d7e430a6c91dd",
      "commitAuthorOld": "Sebastian Bazley",
      "daysBetweenCommits": 6.73,
      "commitsBetweenForRepo": 8,
      "commitsBetweenForFile": 1,
      "actualSource": "@Test\r\npublic void testNLT() throws Exception {\r\n    Option help \u003d new Option(\"h\", \"help\", false, \"print this message\");\r\n    Option version \u003d new Option(\"v\", \"version\", false, \"print version information\");\r\n    Option newRun \u003d new Option(\"n\", \"new\", false, \"Create NLT cache entries only for new items\");\r\n    Option trackerRun \u003d new Option(\"t\", \"tracker\", false, \"Create NLT cache entries only for tracker items\");\r\n    Option timeLimit \u003d OptionBuilder.withLongOpt(\"limit\").hasArg().withValueSeparator().withDescription(\"Set time limit for execution, in minutes\").create(\"l\");\r\n    Option age \u003d OptionBuilder.withLongOpt(\"age\").hasArg().withValueSeparator().withDescription(\"Age (in days) of cache item before being recomputed\").create(\"a\");\r\n    Option server \u003d OptionBuilder.withLongOpt(\"server\").hasArg().withValueSeparator().withDescription(\"The NLT server address\").create(\"s\");\r\n    Option numResults \u003d OptionBuilder.withLongOpt(\"results\").hasArg().withValueSeparator().withDescription(\"Number of results per item\").create(\"r\");\r\n    Option configFile \u003d OptionBuilder.withLongOpt(\"file\").hasArg().withValueSeparator().withDescription(\"Use the specified configuration file\").create();\r\n    Options options \u003d new Options();\r\n    options.addOption(help);\r\n    options.addOption(version);\r\n    options.addOption(newRun);\r\n    options.addOption(trackerRun);\r\n    options.addOption(timeLimit);\r\n    options.addOption(age);\r\n    options.addOption(server);\r\n    options.addOption(numResults);\r\n    options.addOption(configFile);\r\n    CommandLineParser parser \u003d new PosixParser();\r\n    String[] args \u003d new String[] { \"-v\", \"-l\", \"10\", \"-age\", \"5\", \"-file\", \"filename\" };\r\n    CommandLine line \u003d parser.parse(options, args);\r\n    assertTrue(line.hasOption(\"v\"));\r\n    assertEquals(line.getOptionValue(\"l\"), \"10\");\r\n    assertEquals(line.getOptionValue(\"limit\"), \"10\");\r\n    assertEquals(line.getOptionValue(\"a\"), \"5\");\r\n    assertEquals(line.getOptionValue(\"age\"), \"5\");\r\n    assertEquals(line.getOptionValue(\"file\"), \"filename\");\r\n}",
      "path": "src/test/java/org/apache/commons/cli/ApplicationTest.java",
      "functionStartLine": 232,
      "functionName": "testNLT",
      "functionAnnotation": "@Test",
      "functionDoc": "Real world test with long and short options.\r\n",
      "diff": "@@ -1,30 +1,31 @@\n+@Test\r\n public void testNLT() throws Exception {\r\n     Option help \u003d new Option(\"h\", \"help\", false, \"print this message\");\r\n     Option version \u003d new Option(\"v\", \"version\", false, \"print version information\");\r\n     Option newRun \u003d new Option(\"n\", \"new\", false, \"Create NLT cache entries only for new items\");\r\n     Option trackerRun \u003d new Option(\"t\", \"tracker\", false, \"Create NLT cache entries only for tracker items\");\r\n     Option timeLimit \u003d OptionBuilder.withLongOpt(\"limit\").hasArg().withValueSeparator().withDescription(\"Set time limit for execution, in minutes\").create(\"l\");\r\n     Option age \u003d OptionBuilder.withLongOpt(\"age\").hasArg().withValueSeparator().withDescription(\"Age (in days) of cache item before being recomputed\").create(\"a\");\r\n     Option server \u003d OptionBuilder.withLongOpt(\"server\").hasArg().withValueSeparator().withDescription(\"The NLT server address\").create(\"s\");\r\n     Option numResults \u003d OptionBuilder.withLongOpt(\"results\").hasArg().withValueSeparator().withDescription(\"Number of results per item\").create(\"r\");\r\n     Option configFile \u003d OptionBuilder.withLongOpt(\"file\").hasArg().withValueSeparator().withDescription(\"Use the specified configuration file\").create();\r\n     Options options \u003d new Options();\r\n     options.addOption(help);\r\n     options.addOption(version);\r\n     options.addOption(newRun);\r\n     options.addOption(trackerRun);\r\n     options.addOption(timeLimit);\r\n     options.addOption(age);\r\n     options.addOption(server);\r\n     options.addOption(numResults);\r\n     options.addOption(configFile);\r\n     CommandLineParser parser \u003d new PosixParser();\r\n     String[] args \u003d new String[] { \"-v\", \"-l\", \"10\", \"-age\", \"5\", \"-file\", \"filename\" };\r\n     CommandLine line \u003d parser.parse(options, args);\r\n     assertTrue(line.hasOption(\"v\"));\r\n     assertEquals(line.getOptionValue(\"l\"), \"10\");\r\n     assertEquals(line.getOptionValue(\"limit\"), \"10\");\r\n     assertEquals(line.getOptionValue(\"a\"), \"5\");\r\n     assertEquals(line.getOptionValue(\"age\"), \"5\");\r\n     assertEquals(line.getOptionValue(\"file\"), \"filename\");\r\n }\n\\ No newline at end of file\n",
      "extendedDetails": {
        "oldValue": "",
        "newValue": "@Test"
      }
    },
    "cd745ecf52fb2fe8fed1c67fc9149e4be11a73f0": {
      "type": "Yfilerename",
      "commitMessage": "Switched to the Maven 2 default directory layout (part 1)\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/cli/trunk@955169 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "6/16/10 12:41 PM",
      "commitName": "cd745ecf52fb2fe8fed1c67fc9149e4be11a73f0",
      "commitAuthor": "Emmanuel Bourg",
      "commitDateOld": "6/16/10 12:36 PM",
      "commitNameOld": "106f3b8dd48d32cbfcba4a42e1161505c2e3cac6",
      "commitAuthorOld": "Emmanuel Bourg",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "public void testNLT() throws Exception {\r\n    Option help \u003d new Option(\"h\", \"help\", false, \"print this message\");\r\n    Option version \u003d new Option(\"v\", \"version\", false, \"print version information\");\r\n    Option newRun \u003d new Option(\"n\", \"new\", false, \"Create NLT cache entries only for new items\");\r\n    Option trackerRun \u003d new Option(\"t\", \"tracker\", false, \"Create NLT cache entries only for tracker items\");\r\n    Option timeLimit \u003d OptionBuilder.withLongOpt(\"limit\").hasArg().withValueSeparator().withDescription(\"Set time limit for execution, in minutes\").create(\"l\");\r\n    Option age \u003d OptionBuilder.withLongOpt(\"age\").hasArg().withValueSeparator().withDescription(\"Age (in days) of cache item before being recomputed\").create(\"a\");\r\n    Option server \u003d OptionBuilder.withLongOpt(\"server\").hasArg().withValueSeparator().withDescription(\"The NLT server address\").create(\"s\");\r\n    Option numResults \u003d OptionBuilder.withLongOpt(\"results\").hasArg().withValueSeparator().withDescription(\"Number of results per item\").create(\"r\");\r\n    Option configFile \u003d OptionBuilder.withLongOpt(\"file\").hasArg().withValueSeparator().withDescription(\"Use the specified configuration file\").create();\r\n    Options options \u003d new Options();\r\n    options.addOption(help);\r\n    options.addOption(version);\r\n    options.addOption(newRun);\r\n    options.addOption(trackerRun);\r\n    options.addOption(timeLimit);\r\n    options.addOption(age);\r\n    options.addOption(server);\r\n    options.addOption(numResults);\r\n    options.addOption(configFile);\r\n    CommandLineParser parser \u003d new PosixParser();\r\n    String[] args \u003d new String[] { \"-v\", \"-l\", \"10\", \"-age\", \"5\", \"-file\", \"filename\" };\r\n    CommandLine line \u003d parser.parse(options, args);\r\n    assertTrue(line.hasOption(\"v\"));\r\n    assertEquals(line.getOptionValue(\"l\"), \"10\");\r\n    assertEquals(line.getOptionValue(\"limit\"), \"10\");\r\n    assertEquals(line.getOptionValue(\"a\"), \"5\");\r\n    assertEquals(line.getOptionValue(\"age\"), \"5\");\r\n    assertEquals(line.getOptionValue(\"file\"), \"filename\");\r\n}",
      "path": "src/test/java/org/apache/commons/cli/ApplicationTest.java",
      "functionStartLine": 225,
      "functionName": "testNLT",
      "functionAnnotation": "",
      "functionDoc": "Real world test with long and short options.\r\n",
      "diff": "",
      "extendedDetails": {
        "oldPath": "src/test/org/apache/commons/cli/ApplicationTest.java",
        "newPath": "src/test/java/org/apache/commons/cli/ApplicationTest.java"
      }
    },
    "3972aca26c57a2301c9fcb67c11d526c0e0fd084": {
      "type": "Ymultichange(Ymovefromfile,Yrename)",
      "commitMessage": "Moved the real world test from PosixParserTest to ApplicationTest\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/cli/trunk@779616 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "5/28/09 6:07 PM",
      "commitName": "3972aca26c57a2301c9fcb67c11d526c0e0fd084",
      "commitAuthor": "Emmanuel Bourg",
      "subchanges": [
        {
          "type": "Ymovefromfile",
          "commitMessage": "Moved the real world test from PosixParserTest to ApplicationTest\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/cli/trunk@779616 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "5/28/09 6:07 PM",
          "commitName": "3972aca26c57a2301c9fcb67c11d526c0e0fd084",
          "commitAuthor": "Emmanuel Bourg",
          "commitDateOld": "5/28/09 4:56 PM",
          "commitNameOld": "ce3a962527c403b7a2ee285830df47caaef56359",
          "commitAuthorOld": "Emmanuel Bourg",
          "daysBetweenCommits": 0.05,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "public void testNLT() throws Exception {\r\n    Option help \u003d new Option(\"h\", \"help\", false, \"print this message\");\r\n    Option version \u003d new Option(\"v\", \"version\", false, \"print version information\");\r\n    Option newRun \u003d new Option(\"n\", \"new\", false, \"Create NLT cache entries only for new items\");\r\n    Option trackerRun \u003d new Option(\"t\", \"tracker\", false, \"Create NLT cache entries only for tracker items\");\r\n    Option timeLimit \u003d OptionBuilder.withLongOpt(\"limit\").hasArg().withValueSeparator().withDescription(\"Set time limit for execution, in minutes\").create(\"l\");\r\n    Option age \u003d OptionBuilder.withLongOpt(\"age\").hasArg().withValueSeparator().withDescription(\"Age (in days) of cache item before being recomputed\").create(\"a\");\r\n    Option server \u003d OptionBuilder.withLongOpt(\"server\").hasArg().withValueSeparator().withDescription(\"The NLT server address\").create(\"s\");\r\n    Option numResults \u003d OptionBuilder.withLongOpt(\"results\").hasArg().withValueSeparator().withDescription(\"Number of results per item\").create(\"r\");\r\n    Option configFile \u003d OptionBuilder.withLongOpt(\"file\").hasArg().withValueSeparator().withDescription(\"Use the specified configuration file\").create();\r\n    Options options \u003d new Options();\r\n    options.addOption(help);\r\n    options.addOption(version);\r\n    options.addOption(newRun);\r\n    options.addOption(trackerRun);\r\n    options.addOption(timeLimit);\r\n    options.addOption(age);\r\n    options.addOption(server);\r\n    options.addOption(numResults);\r\n    options.addOption(configFile);\r\n    CommandLineParser parser \u003d new PosixParser();\r\n    String[] args \u003d new String[] { \"-v\", \"-l\", \"10\", \"-age\", \"5\", \"-file\", \"filename\" };\r\n    CommandLine line \u003d parser.parse(options, args);\r\n    assertTrue(line.hasOption(\"v\"));\r\n    assertEquals(line.getOptionValue(\"l\"), \"10\");\r\n    assertEquals(line.getOptionValue(\"limit\"), \"10\");\r\n    assertEquals(line.getOptionValue(\"a\"), \"5\");\r\n    assertEquals(line.getOptionValue(\"age\"), \"5\");\r\n    assertEquals(line.getOptionValue(\"file\"), \"filename\");\r\n}",
          "path": "src/test/org/apache/commons/cli/ApplicationTest.java",
          "functionStartLine": 225,
          "functionName": "testNLT",
          "functionAnnotation": "",
          "functionDoc": "Real world test with long and short options.\r\n",
          "diff": "@@ -1,30 +1,30 @@\n-public void testLongOptionWithShort() throws Exception {\r\n+public void testNLT() throws Exception {\r\n     Option help \u003d new Option(\"h\", \"help\", false, \"print this message\");\r\n     Option version \u003d new Option(\"v\", \"version\", false, \"print version information\");\r\n     Option newRun \u003d new Option(\"n\", \"new\", false, \"Create NLT cache entries only for new items\");\r\n     Option trackerRun \u003d new Option(\"t\", \"tracker\", false, \"Create NLT cache entries only for tracker items\");\r\n     Option timeLimit \u003d OptionBuilder.withLongOpt(\"limit\").hasArg().withValueSeparator().withDescription(\"Set time limit for execution, in minutes\").create(\"l\");\r\n     Option age \u003d OptionBuilder.withLongOpt(\"age\").hasArg().withValueSeparator().withDescription(\"Age (in days) of cache item before being recomputed\").create(\"a\");\r\n     Option server \u003d OptionBuilder.withLongOpt(\"server\").hasArg().withValueSeparator().withDescription(\"The NLT server address\").create(\"s\");\r\n     Option numResults \u003d OptionBuilder.withLongOpt(\"results\").hasArg().withValueSeparator().withDescription(\"Number of results per item\").create(\"r\");\r\n     Option configFile \u003d OptionBuilder.withLongOpt(\"file\").hasArg().withValueSeparator().withDescription(\"Use the specified configuration file\").create();\r\n     Options options \u003d new Options();\r\n     options.addOption(help);\r\n     options.addOption(version);\r\n     options.addOption(newRun);\r\n     options.addOption(trackerRun);\r\n     options.addOption(timeLimit);\r\n     options.addOption(age);\r\n     options.addOption(server);\r\n     options.addOption(numResults);\r\n     options.addOption(configFile);\r\n     CommandLineParser parser \u003d new PosixParser();\r\n     String[] args \u003d new String[] { \"-v\", \"-l\", \"10\", \"-age\", \"5\", \"-file\", \"filename\" };\r\n     CommandLine line \u003d parser.parse(options, args);\r\n     assertTrue(line.hasOption(\"v\"));\r\n     assertEquals(line.getOptionValue(\"l\"), \"10\");\r\n     assertEquals(line.getOptionValue(\"limit\"), \"10\");\r\n     assertEquals(line.getOptionValue(\"a\"), \"5\");\r\n     assertEquals(line.getOptionValue(\"age\"), \"5\");\r\n     assertEquals(line.getOptionValue(\"file\"), \"filename\");\r\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldPath": "src/test/org/apache/commons/cli/PosixParserTest.java",
            "newPath": "src/test/org/apache/commons/cli/ApplicationTest.java",
            "oldMethodName": "testLongOptionWithShort",
            "newMethodName": "testNLT"
          }
        },
        {
          "type": "Yrename",
          "commitMessage": "Moved the real world test from PosixParserTest to ApplicationTest\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/cli/trunk@779616 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "5/28/09 6:07 PM",
          "commitName": "3972aca26c57a2301c9fcb67c11d526c0e0fd084",
          "commitAuthor": "Emmanuel Bourg",
          "commitDateOld": "5/28/09 4:56 PM",
          "commitNameOld": "ce3a962527c403b7a2ee285830df47caaef56359",
          "commitAuthorOld": "Emmanuel Bourg",
          "daysBetweenCommits": 0.05,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "public void testNLT() throws Exception {\r\n    Option help \u003d new Option(\"h\", \"help\", false, \"print this message\");\r\n    Option version \u003d new Option(\"v\", \"version\", false, \"print version information\");\r\n    Option newRun \u003d new Option(\"n\", \"new\", false, \"Create NLT cache entries only for new items\");\r\n    Option trackerRun \u003d new Option(\"t\", \"tracker\", false, \"Create NLT cache entries only for tracker items\");\r\n    Option timeLimit \u003d OptionBuilder.withLongOpt(\"limit\").hasArg().withValueSeparator().withDescription(\"Set time limit for execution, in minutes\").create(\"l\");\r\n    Option age \u003d OptionBuilder.withLongOpt(\"age\").hasArg().withValueSeparator().withDescription(\"Age (in days) of cache item before being recomputed\").create(\"a\");\r\n    Option server \u003d OptionBuilder.withLongOpt(\"server\").hasArg().withValueSeparator().withDescription(\"The NLT server address\").create(\"s\");\r\n    Option numResults \u003d OptionBuilder.withLongOpt(\"results\").hasArg().withValueSeparator().withDescription(\"Number of results per item\").create(\"r\");\r\n    Option configFile \u003d OptionBuilder.withLongOpt(\"file\").hasArg().withValueSeparator().withDescription(\"Use the specified configuration file\").create();\r\n    Options options \u003d new Options();\r\n    options.addOption(help);\r\n    options.addOption(version);\r\n    options.addOption(newRun);\r\n    options.addOption(trackerRun);\r\n    options.addOption(timeLimit);\r\n    options.addOption(age);\r\n    options.addOption(server);\r\n    options.addOption(numResults);\r\n    options.addOption(configFile);\r\n    CommandLineParser parser \u003d new PosixParser();\r\n    String[] args \u003d new String[] { \"-v\", \"-l\", \"10\", \"-age\", \"5\", \"-file\", \"filename\" };\r\n    CommandLine line \u003d parser.parse(options, args);\r\n    assertTrue(line.hasOption(\"v\"));\r\n    assertEquals(line.getOptionValue(\"l\"), \"10\");\r\n    assertEquals(line.getOptionValue(\"limit\"), \"10\");\r\n    assertEquals(line.getOptionValue(\"a\"), \"5\");\r\n    assertEquals(line.getOptionValue(\"age\"), \"5\");\r\n    assertEquals(line.getOptionValue(\"file\"), \"filename\");\r\n}",
          "path": "src/test/org/apache/commons/cli/ApplicationTest.java",
          "functionStartLine": 225,
          "functionName": "testNLT",
          "functionAnnotation": "",
          "functionDoc": "Real world test with long and short options.\r\n",
          "diff": "@@ -1,30 +1,30 @@\n-public void testLongOptionWithShort() throws Exception {\r\n+public void testNLT() throws Exception {\r\n     Option help \u003d new Option(\"h\", \"help\", false, \"print this message\");\r\n     Option version \u003d new Option(\"v\", \"version\", false, \"print version information\");\r\n     Option newRun \u003d new Option(\"n\", \"new\", false, \"Create NLT cache entries only for new items\");\r\n     Option trackerRun \u003d new Option(\"t\", \"tracker\", false, \"Create NLT cache entries only for tracker items\");\r\n     Option timeLimit \u003d OptionBuilder.withLongOpt(\"limit\").hasArg().withValueSeparator().withDescription(\"Set time limit for execution, in minutes\").create(\"l\");\r\n     Option age \u003d OptionBuilder.withLongOpt(\"age\").hasArg().withValueSeparator().withDescription(\"Age (in days) of cache item before being recomputed\").create(\"a\");\r\n     Option server \u003d OptionBuilder.withLongOpt(\"server\").hasArg().withValueSeparator().withDescription(\"The NLT server address\").create(\"s\");\r\n     Option numResults \u003d OptionBuilder.withLongOpt(\"results\").hasArg().withValueSeparator().withDescription(\"Number of results per item\").create(\"r\");\r\n     Option configFile \u003d OptionBuilder.withLongOpt(\"file\").hasArg().withValueSeparator().withDescription(\"Use the specified configuration file\").create();\r\n     Options options \u003d new Options();\r\n     options.addOption(help);\r\n     options.addOption(version);\r\n     options.addOption(newRun);\r\n     options.addOption(trackerRun);\r\n     options.addOption(timeLimit);\r\n     options.addOption(age);\r\n     options.addOption(server);\r\n     options.addOption(numResults);\r\n     options.addOption(configFile);\r\n     CommandLineParser parser \u003d new PosixParser();\r\n     String[] args \u003d new String[] { \"-v\", \"-l\", \"10\", \"-age\", \"5\", \"-file\", \"filename\" };\r\n     CommandLine line \u003d parser.parse(options, args);\r\n     assertTrue(line.hasOption(\"v\"));\r\n     assertEquals(line.getOptionValue(\"l\"), \"10\");\r\n     assertEquals(line.getOptionValue(\"limit\"), \"10\");\r\n     assertEquals(line.getOptionValue(\"a\"), \"5\");\r\n     assertEquals(line.getOptionValue(\"age\"), \"5\");\r\n     assertEquals(line.getOptionValue(\"file\"), \"filename\");\r\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "testLongOptionWithShort",
            "newValue": "testNLT"
          }
        }
      ]
    },
    "67289747fc56e79ee9092a47cd2ff5bd0c688a29": {
      "type": "Ybodychange",
      "commitMessage": "Merged the common parser tests into ParserTestCase\nFixed the integration test for Groovy, highlighting a regression in CLI 1.2\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/cli/branches/cli-1.x@695410 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "9/15/08 1:25 PM",
      "commitName": "67289747fc56e79ee9092a47cd2ff5bd0c688a29",
      "commitAuthor": "Emmanuel Bourg",
      "commitDateOld": "7/28/08 12:47 PM",
      "commitNameOld": "99aa05af2bfef3980ad8f94230cd077e8d30c5ea",
      "commitAuthorOld": "Emmanuel Bourg",
      "daysBetweenCommits": 49.03,
      "commitsBetweenForRepo": 16,
      "commitsBetweenForFile": 1,
      "actualSource": "public void testLongOptionWithShort() throws Exception {\r\n    Option help \u003d new Option(\"h\", \"help\", false, \"print this message\");\r\n    Option version \u003d new Option(\"v\", \"version\", false, \"print version information\");\r\n    Option newRun \u003d new Option(\"n\", \"new\", false, \"Create NLT cache entries only for new items\");\r\n    Option trackerRun \u003d new Option(\"t\", \"tracker\", false, \"Create NLT cache entries only for tracker items\");\r\n    Option timeLimit \u003d OptionBuilder.withLongOpt(\"limit\").hasArg().withValueSeparator().withDescription(\"Set time limit for execution, in minutes\").create(\"l\");\r\n    Option age \u003d OptionBuilder.withLongOpt(\"age\").hasArg().withValueSeparator().withDescription(\"Age (in days) of cache item before being recomputed\").create(\"a\");\r\n    Option server \u003d OptionBuilder.withLongOpt(\"server\").hasArg().withValueSeparator().withDescription(\"The NLT server address\").create(\"s\");\r\n    Option numResults \u003d OptionBuilder.withLongOpt(\"results\").hasArg().withValueSeparator().withDescription(\"Number of results per item\").create(\"r\");\r\n    Option configFile \u003d OptionBuilder.withLongOpt(\"file\").hasArg().withValueSeparator().withDescription(\"Use the specified configuration file\").create();\r\n    Options options \u003d new Options();\r\n    options.addOption(help);\r\n    options.addOption(version);\r\n    options.addOption(newRun);\r\n    options.addOption(trackerRun);\r\n    options.addOption(timeLimit);\r\n    options.addOption(age);\r\n    options.addOption(server);\r\n    options.addOption(numResults);\r\n    options.addOption(configFile);\r\n    CommandLineParser parser \u003d new PosixParser();\r\n    String[] args \u003d new String[] { \"-v\", \"-l\", \"10\", \"-age\", \"5\", \"-file\", \"filename\" };\r\n    CommandLine line \u003d parser.parse(options, args);\r\n    assertTrue(line.hasOption(\"v\"));\r\n    assertEquals(line.getOptionValue(\"l\"), \"10\");\r\n    assertEquals(line.getOptionValue(\"limit\"), \"10\");\r\n    assertEquals(line.getOptionValue(\"a\"), \"5\");\r\n    assertEquals(line.getOptionValue(\"age\"), \"5\");\r\n    assertEquals(line.getOptionValue(\"file\"), \"filename\");\r\n}",
      "path": "src/test/org/apache/commons/cli/PosixParserTest.java",
      "functionStartLine": 115,
      "functionName": "testLongOptionWithShort",
      "functionAnnotation": "",
      "functionDoc": "Real world test with long and short options.\r\n",
      "diff": "@@ -1,30 +1,30 @@\n public void testLongOptionWithShort() throws Exception {\r\n     Option help \u003d new Option(\"h\", \"help\", false, \"print this message\");\r\n     Option version \u003d new Option(\"v\", \"version\", false, \"print version information\");\r\n     Option newRun \u003d new Option(\"n\", \"new\", false, \"Create NLT cache entries only for new items\");\r\n     Option trackerRun \u003d new Option(\"t\", \"tracker\", false, \"Create NLT cache entries only for tracker items\");\r\n-    Option timeLimit \u003d OptionBuilder.withLongOpt(\"limit\").hasArg().withValueSeparator().withDescription(\"Set time limit for execution, in mintues\").create(\"l\");\r\n+    Option timeLimit \u003d OptionBuilder.withLongOpt(\"limit\").hasArg().withValueSeparator().withDescription(\"Set time limit for execution, in minutes\").create(\"l\");\r\n     Option age \u003d OptionBuilder.withLongOpt(\"age\").hasArg().withValueSeparator().withDescription(\"Age (in days) of cache item before being recomputed\").create(\"a\");\r\n     Option server \u003d OptionBuilder.withLongOpt(\"server\").hasArg().withValueSeparator().withDescription(\"The NLT server address\").create(\"s\");\r\n     Option numResults \u003d OptionBuilder.withLongOpt(\"results\").hasArg().withValueSeparator().withDescription(\"Number of results per item\").create(\"r\");\r\n     Option configFile \u003d OptionBuilder.withLongOpt(\"file\").hasArg().withValueSeparator().withDescription(\"Use the specified configuration file\").create();\r\n     Options options \u003d new Options();\r\n     options.addOption(help);\r\n     options.addOption(version);\r\n     options.addOption(newRun);\r\n     options.addOption(trackerRun);\r\n     options.addOption(timeLimit);\r\n     options.addOption(age);\r\n     options.addOption(server);\r\n     options.addOption(numResults);\r\n     options.addOption(configFile);\r\n     CommandLineParser parser \u003d new PosixParser();\r\n     String[] args \u003d new String[] { \"-v\", \"-l\", \"10\", \"-age\", \"5\", \"-file\", \"filename\" };\r\n     CommandLine line \u003d parser.parse(options, args);\r\n     assertTrue(line.hasOption(\"v\"));\r\n     assertEquals(line.getOptionValue(\"l\"), \"10\");\r\n     assertEquals(line.getOptionValue(\"limit\"), \"10\");\r\n     assertEquals(line.getOptionValue(\"a\"), \"5\");\r\n     assertEquals(line.getOptionValue(\"age\"), \"5\");\r\n     assertEquals(line.getOptionValue(\"file\"), \"filename\");\r\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "d4e64e2bd02759b4f5c01c888a3787d6c526f687": {
      "type": "Ydocchange",
      "commitMessage": "Merged ParseTest into PosixParserTest\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/cli/branches/cli-1.x@661819 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "5/30/08 10:08 PM",
      "commitName": "d4e64e2bd02759b4f5c01c888a3787d6c526f687",
      "commitAuthor": "Emmanuel Bourg",
      "commitDateOld": "5/29/08 6:39 PM",
      "commitNameOld": "665386dce6e8804408871eb35040bec6d42da528",
      "commitAuthorOld": "Emmanuel Bourg",
      "daysBetweenCommits": 1.15,
      "commitsBetweenForRepo": 25,
      "commitsBetweenForFile": 1,
      "actualSource": "public void testLongOptionWithShort() throws Exception {\r\n    Option help \u003d new Option(\"h\", \"help\", false, \"print this message\");\r\n    Option version \u003d new Option(\"v\", \"version\", false, \"print version information\");\r\n    Option newRun \u003d new Option(\"n\", \"new\", false, \"Create NLT cache entries only for new items\");\r\n    Option trackerRun \u003d new Option(\"t\", \"tracker\", false, \"Create NLT cache entries only for tracker items\");\r\n    Option timeLimit \u003d OptionBuilder.withLongOpt(\"limit\").hasArg().withValueSeparator().withDescription(\"Set time limit for execution, in mintues\").create(\"l\");\r\n    Option age \u003d OptionBuilder.withLongOpt(\"age\").hasArg().withValueSeparator().withDescription(\"Age (in days) of cache item before being recomputed\").create(\"a\");\r\n    Option server \u003d OptionBuilder.withLongOpt(\"server\").hasArg().withValueSeparator().withDescription(\"The NLT server address\").create(\"s\");\r\n    Option numResults \u003d OptionBuilder.withLongOpt(\"results\").hasArg().withValueSeparator().withDescription(\"Number of results per item\").create(\"r\");\r\n    Option configFile \u003d OptionBuilder.withLongOpt(\"file\").hasArg().withValueSeparator().withDescription(\"Use the specified configuration file\").create();\r\n    Options options \u003d new Options();\r\n    options.addOption(help);\r\n    options.addOption(version);\r\n    options.addOption(newRun);\r\n    options.addOption(trackerRun);\r\n    options.addOption(timeLimit);\r\n    options.addOption(age);\r\n    options.addOption(server);\r\n    options.addOption(numResults);\r\n    options.addOption(configFile);\r\n    CommandLineParser parser \u003d new PosixParser();\r\n    String[] args \u003d new String[] { \"-v\", \"-l\", \"10\", \"-age\", \"5\", \"-file\", \"filename\" };\r\n    CommandLine line \u003d parser.parse(options, args);\r\n    assertTrue(line.hasOption(\"v\"));\r\n    assertEquals(line.getOptionValue(\"l\"), \"10\");\r\n    assertEquals(line.getOptionValue(\"limit\"), \"10\");\r\n    assertEquals(line.getOptionValue(\"a\"), \"5\");\r\n    assertEquals(line.getOptionValue(\"age\"), \"5\");\r\n    assertEquals(line.getOptionValue(\"file\"), \"filename\");\r\n}",
      "path": "src/test/org/apache/commons/cli/PosixParserTest.java",
      "functionStartLine": 209,
      "functionName": "testLongOptionWithShort",
      "functionAnnotation": "",
      "functionDoc": "Real world test with long and short options.\r\n",
      "diff": "",
      "extendedDetails": {
        "oldValue": "",
        "newValue": "Real world test with long and short options.\r\n"
      }
    },
    "665386dce6e8804408871eb35040bec6d42da528": {
      "type": "Ymultichange(Yfilerename,Yexceptionschange,Ybodychange)",
      "commitMessage": "Renamed the test case LongOptionWithShort into PosixParserTest to make it executed by Maven\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/cli/branches/cli-1.x@661363 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "5/29/08 6:39 PM",
      "commitName": "665386dce6e8804408871eb35040bec6d42da528",
      "commitAuthor": "Emmanuel Bourg",
      "subchanges": [
        {
          "type": "Yfilerename",
          "commitMessage": "Renamed the test case LongOptionWithShort into PosixParserTest to make it executed by Maven\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/cli/branches/cli-1.x@661363 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "5/29/08 6:39 PM",
          "commitName": "665386dce6e8804408871eb35040bec6d42da528",
          "commitAuthor": "Emmanuel Bourg",
          "commitDateOld": "5/29/08 6:30 PM",
          "commitNameOld": "2490250f9b3044e4cd946f11b46694f943f5814d",
          "commitAuthorOld": "Emmanuel Bourg",
          "daysBetweenCommits": 0.01,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "public void testLongOptionWithShort() throws Exception {\r\n    Option help \u003d new Option(\"h\", \"help\", false, \"print this message\");\r\n    Option version \u003d new Option(\"v\", \"version\", false, \"print version information\");\r\n    Option newRun \u003d new Option(\"n\", \"new\", false, \"Create NLT cache entries only for new items\");\r\n    Option trackerRun \u003d new Option(\"t\", \"tracker\", false, \"Create NLT cache entries only for tracker items\");\r\n    Option timeLimit \u003d OptionBuilder.withLongOpt(\"limit\").hasArg().withValueSeparator().withDescription(\"Set time limit for execution, in mintues\").create(\"l\");\r\n    Option age \u003d OptionBuilder.withLongOpt(\"age\").hasArg().withValueSeparator().withDescription(\"Age (in days) of cache item before being recomputed\").create(\"a\");\r\n    Option server \u003d OptionBuilder.withLongOpt(\"server\").hasArg().withValueSeparator().withDescription(\"The NLT server address\").create(\"s\");\r\n    Option numResults \u003d OptionBuilder.withLongOpt(\"results\").hasArg().withValueSeparator().withDescription(\"Number of results per item\").create(\"r\");\r\n    Option configFile \u003d OptionBuilder.withLongOpt(\"file\").hasArg().withValueSeparator().withDescription(\"Use the specified configuration file\").create();\r\n    Options options \u003d new Options();\r\n    options.addOption(help);\r\n    options.addOption(version);\r\n    options.addOption(newRun);\r\n    options.addOption(trackerRun);\r\n    options.addOption(timeLimit);\r\n    options.addOption(age);\r\n    options.addOption(server);\r\n    options.addOption(numResults);\r\n    options.addOption(configFile);\r\n    CommandLineParser parser \u003d new PosixParser();\r\n    String[] args \u003d new String[] { \"-v\", \"-l\", \"10\", \"-age\", \"5\", \"-file\", \"filename\" };\r\n    CommandLine line \u003d parser.parse(options, args);\r\n    assertTrue(line.hasOption(\"v\"));\r\n    assertEquals(line.getOptionValue(\"l\"), \"10\");\r\n    assertEquals(line.getOptionValue(\"limit\"), \"10\");\r\n    assertEquals(line.getOptionValue(\"a\"), \"5\");\r\n    assertEquals(line.getOptionValue(\"age\"), \"5\");\r\n    assertEquals(line.getOptionValue(\"file\"), \"filename\");\r\n}",
          "path": "src/test/org/apache/commons/cli/PosixParserTest.java",
          "functionStartLine": 29,
          "functionName": "testLongOptionWithShort",
          "functionAnnotation": "",
          "functionDoc": "",
          "diff": "@@ -1,34 +1,30 @@\n-public void testLongOptionWithShort() {\r\n+public void testLongOptionWithShort() throws Exception {\r\n     Option help \u003d new Option(\"h\", \"help\", false, \"print this message\");\r\n     Option version \u003d new Option(\"v\", \"version\", false, \"print version information\");\r\n     Option newRun \u003d new Option(\"n\", \"new\", false, \"Create NLT cache entries only for new items\");\r\n     Option trackerRun \u003d new Option(\"t\", \"tracker\", false, \"Create NLT cache entries only for tracker items\");\r\n     Option timeLimit \u003d OptionBuilder.withLongOpt(\"limit\").hasArg().withValueSeparator().withDescription(\"Set time limit for execution, in mintues\").create(\"l\");\r\n     Option age \u003d OptionBuilder.withLongOpt(\"age\").hasArg().withValueSeparator().withDescription(\"Age (in days) of cache item before being recomputed\").create(\"a\");\r\n     Option server \u003d OptionBuilder.withLongOpt(\"server\").hasArg().withValueSeparator().withDescription(\"The NLT server address\").create(\"s\");\r\n     Option numResults \u003d OptionBuilder.withLongOpt(\"results\").hasArg().withValueSeparator().withDescription(\"Number of results per item\").create(\"r\");\r\n     Option configFile \u003d OptionBuilder.withLongOpt(\"file\").hasArg().withValueSeparator().withDescription(\"Use the specified configuration file\").create();\r\n     Options options \u003d new Options();\r\n     options.addOption(help);\r\n     options.addOption(version);\r\n     options.addOption(newRun);\r\n     options.addOption(trackerRun);\r\n     options.addOption(timeLimit);\r\n     options.addOption(age);\r\n     options.addOption(server);\r\n     options.addOption(numResults);\r\n     options.addOption(configFile);\r\n     CommandLineParser parser \u003d new PosixParser();\r\n     String[] args \u003d new String[] { \"-v\", \"-l\", \"10\", \"-age\", \"5\", \"-file\", \"filename\" };\r\n-    try {\r\n-        CommandLine line \u003d parser.parse(options, args);\r\n-        assertTrue(line.hasOption(\"v\"));\r\n-        assertEquals(line.getOptionValue(\"l\"), \"10\");\r\n-        assertEquals(line.getOptionValue(\"limit\"), \"10\");\r\n-        assertEquals(line.getOptionValue(\"a\"), \"5\");\r\n-        assertEquals(line.getOptionValue(\"age\"), \"5\");\r\n-        assertEquals(line.getOptionValue(\"file\"), \"filename\");\r\n-    } catch (ParseException exp) {\r\n-        fail(\"Unexpected exception:\" + exp.getMessage());\r\n-    }\r\n+    CommandLine line \u003d parser.parse(options, args);\r\n+    assertTrue(line.hasOption(\"v\"));\r\n+    assertEquals(line.getOptionValue(\"l\"), \"10\");\r\n+    assertEquals(line.getOptionValue(\"limit\"), \"10\");\r\n+    assertEquals(line.getOptionValue(\"a\"), \"5\");\r\n+    assertEquals(line.getOptionValue(\"age\"), \"5\");\r\n+    assertEquals(line.getOptionValue(\"file\"), \"filename\");\r\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldPath": "src/test/org/apache/commons/cli/LongOptionWithShort.java",
            "newPath": "src/test/org/apache/commons/cli/PosixParserTest.java"
          }
        },
        {
          "type": "Yexceptionschange",
          "commitMessage": "Renamed the test case LongOptionWithShort into PosixParserTest to make it executed by Maven\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/cli/branches/cli-1.x@661363 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "5/29/08 6:39 PM",
          "commitName": "665386dce6e8804408871eb35040bec6d42da528",
          "commitAuthor": "Emmanuel Bourg",
          "commitDateOld": "5/29/08 6:30 PM",
          "commitNameOld": "2490250f9b3044e4cd946f11b46694f943f5814d",
          "commitAuthorOld": "Emmanuel Bourg",
          "daysBetweenCommits": 0.01,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "public void testLongOptionWithShort() throws Exception {\r\n    Option help \u003d new Option(\"h\", \"help\", false, \"print this message\");\r\n    Option version \u003d new Option(\"v\", \"version\", false, \"print version information\");\r\n    Option newRun \u003d new Option(\"n\", \"new\", false, \"Create NLT cache entries only for new items\");\r\n    Option trackerRun \u003d new Option(\"t\", \"tracker\", false, \"Create NLT cache entries only for tracker items\");\r\n    Option timeLimit \u003d OptionBuilder.withLongOpt(\"limit\").hasArg().withValueSeparator().withDescription(\"Set time limit for execution, in mintues\").create(\"l\");\r\n    Option age \u003d OptionBuilder.withLongOpt(\"age\").hasArg().withValueSeparator().withDescription(\"Age (in days) of cache item before being recomputed\").create(\"a\");\r\n    Option server \u003d OptionBuilder.withLongOpt(\"server\").hasArg().withValueSeparator().withDescription(\"The NLT server address\").create(\"s\");\r\n    Option numResults \u003d OptionBuilder.withLongOpt(\"results\").hasArg().withValueSeparator().withDescription(\"Number of results per item\").create(\"r\");\r\n    Option configFile \u003d OptionBuilder.withLongOpt(\"file\").hasArg().withValueSeparator().withDescription(\"Use the specified configuration file\").create();\r\n    Options options \u003d new Options();\r\n    options.addOption(help);\r\n    options.addOption(version);\r\n    options.addOption(newRun);\r\n    options.addOption(trackerRun);\r\n    options.addOption(timeLimit);\r\n    options.addOption(age);\r\n    options.addOption(server);\r\n    options.addOption(numResults);\r\n    options.addOption(configFile);\r\n    CommandLineParser parser \u003d new PosixParser();\r\n    String[] args \u003d new String[] { \"-v\", \"-l\", \"10\", \"-age\", \"5\", \"-file\", \"filename\" };\r\n    CommandLine line \u003d parser.parse(options, args);\r\n    assertTrue(line.hasOption(\"v\"));\r\n    assertEquals(line.getOptionValue(\"l\"), \"10\");\r\n    assertEquals(line.getOptionValue(\"limit\"), \"10\");\r\n    assertEquals(line.getOptionValue(\"a\"), \"5\");\r\n    assertEquals(line.getOptionValue(\"age\"), \"5\");\r\n    assertEquals(line.getOptionValue(\"file\"), \"filename\");\r\n}",
          "path": "src/test/org/apache/commons/cli/PosixParserTest.java",
          "functionStartLine": 29,
          "functionName": "testLongOptionWithShort",
          "functionAnnotation": "",
          "functionDoc": "",
          "diff": "@@ -1,34 +1,30 @@\n-public void testLongOptionWithShort() {\r\n+public void testLongOptionWithShort() throws Exception {\r\n     Option help \u003d new Option(\"h\", \"help\", false, \"print this message\");\r\n     Option version \u003d new Option(\"v\", \"version\", false, \"print version information\");\r\n     Option newRun \u003d new Option(\"n\", \"new\", false, \"Create NLT cache entries only for new items\");\r\n     Option trackerRun \u003d new Option(\"t\", \"tracker\", false, \"Create NLT cache entries only for tracker items\");\r\n     Option timeLimit \u003d OptionBuilder.withLongOpt(\"limit\").hasArg().withValueSeparator().withDescription(\"Set time limit for execution, in mintues\").create(\"l\");\r\n     Option age \u003d OptionBuilder.withLongOpt(\"age\").hasArg().withValueSeparator().withDescription(\"Age (in days) of cache item before being recomputed\").create(\"a\");\r\n     Option server \u003d OptionBuilder.withLongOpt(\"server\").hasArg().withValueSeparator().withDescription(\"The NLT server address\").create(\"s\");\r\n     Option numResults \u003d OptionBuilder.withLongOpt(\"results\").hasArg().withValueSeparator().withDescription(\"Number of results per item\").create(\"r\");\r\n     Option configFile \u003d OptionBuilder.withLongOpt(\"file\").hasArg().withValueSeparator().withDescription(\"Use the specified configuration file\").create();\r\n     Options options \u003d new Options();\r\n     options.addOption(help);\r\n     options.addOption(version);\r\n     options.addOption(newRun);\r\n     options.addOption(trackerRun);\r\n     options.addOption(timeLimit);\r\n     options.addOption(age);\r\n     options.addOption(server);\r\n     options.addOption(numResults);\r\n     options.addOption(configFile);\r\n     CommandLineParser parser \u003d new PosixParser();\r\n     String[] args \u003d new String[] { \"-v\", \"-l\", \"10\", \"-age\", \"5\", \"-file\", \"filename\" };\r\n-    try {\r\n-        CommandLine line \u003d parser.parse(options, args);\r\n-        assertTrue(line.hasOption(\"v\"));\r\n-        assertEquals(line.getOptionValue(\"l\"), \"10\");\r\n-        assertEquals(line.getOptionValue(\"limit\"), \"10\");\r\n-        assertEquals(line.getOptionValue(\"a\"), \"5\");\r\n-        assertEquals(line.getOptionValue(\"age\"), \"5\");\r\n-        assertEquals(line.getOptionValue(\"file\"), \"filename\");\r\n-    } catch (ParseException exp) {\r\n-        fail(\"Unexpected exception:\" + exp.getMessage());\r\n-    }\r\n+    CommandLine line \u003d parser.parse(options, args);\r\n+    assertTrue(line.hasOption(\"v\"));\r\n+    assertEquals(line.getOptionValue(\"l\"), \"10\");\r\n+    assertEquals(line.getOptionValue(\"limit\"), \"10\");\r\n+    assertEquals(line.getOptionValue(\"a\"), \"5\");\r\n+    assertEquals(line.getOptionValue(\"age\"), \"5\");\r\n+    assertEquals(line.getOptionValue(\"file\"), \"filename\");\r\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[]",
            "newValue": "[Exception]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Renamed the test case LongOptionWithShort into PosixParserTest to make it executed by Maven\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/cli/branches/cli-1.x@661363 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "5/29/08 6:39 PM",
          "commitName": "665386dce6e8804408871eb35040bec6d42da528",
          "commitAuthor": "Emmanuel Bourg",
          "commitDateOld": "5/29/08 6:30 PM",
          "commitNameOld": "2490250f9b3044e4cd946f11b46694f943f5814d",
          "commitAuthorOld": "Emmanuel Bourg",
          "daysBetweenCommits": 0.01,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "public void testLongOptionWithShort() throws Exception {\r\n    Option help \u003d new Option(\"h\", \"help\", false, \"print this message\");\r\n    Option version \u003d new Option(\"v\", \"version\", false, \"print version information\");\r\n    Option newRun \u003d new Option(\"n\", \"new\", false, \"Create NLT cache entries only for new items\");\r\n    Option trackerRun \u003d new Option(\"t\", \"tracker\", false, \"Create NLT cache entries only for tracker items\");\r\n    Option timeLimit \u003d OptionBuilder.withLongOpt(\"limit\").hasArg().withValueSeparator().withDescription(\"Set time limit for execution, in mintues\").create(\"l\");\r\n    Option age \u003d OptionBuilder.withLongOpt(\"age\").hasArg().withValueSeparator().withDescription(\"Age (in days) of cache item before being recomputed\").create(\"a\");\r\n    Option server \u003d OptionBuilder.withLongOpt(\"server\").hasArg().withValueSeparator().withDescription(\"The NLT server address\").create(\"s\");\r\n    Option numResults \u003d OptionBuilder.withLongOpt(\"results\").hasArg().withValueSeparator().withDescription(\"Number of results per item\").create(\"r\");\r\n    Option configFile \u003d OptionBuilder.withLongOpt(\"file\").hasArg().withValueSeparator().withDescription(\"Use the specified configuration file\").create();\r\n    Options options \u003d new Options();\r\n    options.addOption(help);\r\n    options.addOption(version);\r\n    options.addOption(newRun);\r\n    options.addOption(trackerRun);\r\n    options.addOption(timeLimit);\r\n    options.addOption(age);\r\n    options.addOption(server);\r\n    options.addOption(numResults);\r\n    options.addOption(configFile);\r\n    CommandLineParser parser \u003d new PosixParser();\r\n    String[] args \u003d new String[] { \"-v\", \"-l\", \"10\", \"-age\", \"5\", \"-file\", \"filename\" };\r\n    CommandLine line \u003d parser.parse(options, args);\r\n    assertTrue(line.hasOption(\"v\"));\r\n    assertEquals(line.getOptionValue(\"l\"), \"10\");\r\n    assertEquals(line.getOptionValue(\"limit\"), \"10\");\r\n    assertEquals(line.getOptionValue(\"a\"), \"5\");\r\n    assertEquals(line.getOptionValue(\"age\"), \"5\");\r\n    assertEquals(line.getOptionValue(\"file\"), \"filename\");\r\n}",
          "path": "src/test/org/apache/commons/cli/PosixParserTest.java",
          "functionStartLine": 29,
          "functionName": "testLongOptionWithShort",
          "functionAnnotation": "",
          "functionDoc": "",
          "diff": "@@ -1,34 +1,30 @@\n-public void testLongOptionWithShort() {\r\n+public void testLongOptionWithShort() throws Exception {\r\n     Option help \u003d new Option(\"h\", \"help\", false, \"print this message\");\r\n     Option version \u003d new Option(\"v\", \"version\", false, \"print version information\");\r\n     Option newRun \u003d new Option(\"n\", \"new\", false, \"Create NLT cache entries only for new items\");\r\n     Option trackerRun \u003d new Option(\"t\", \"tracker\", false, \"Create NLT cache entries only for tracker items\");\r\n     Option timeLimit \u003d OptionBuilder.withLongOpt(\"limit\").hasArg().withValueSeparator().withDescription(\"Set time limit for execution, in mintues\").create(\"l\");\r\n     Option age \u003d OptionBuilder.withLongOpt(\"age\").hasArg().withValueSeparator().withDescription(\"Age (in days) of cache item before being recomputed\").create(\"a\");\r\n     Option server \u003d OptionBuilder.withLongOpt(\"server\").hasArg().withValueSeparator().withDescription(\"The NLT server address\").create(\"s\");\r\n     Option numResults \u003d OptionBuilder.withLongOpt(\"results\").hasArg().withValueSeparator().withDescription(\"Number of results per item\").create(\"r\");\r\n     Option configFile \u003d OptionBuilder.withLongOpt(\"file\").hasArg().withValueSeparator().withDescription(\"Use the specified configuration file\").create();\r\n     Options options \u003d new Options();\r\n     options.addOption(help);\r\n     options.addOption(version);\r\n     options.addOption(newRun);\r\n     options.addOption(trackerRun);\r\n     options.addOption(timeLimit);\r\n     options.addOption(age);\r\n     options.addOption(server);\r\n     options.addOption(numResults);\r\n     options.addOption(configFile);\r\n     CommandLineParser parser \u003d new PosixParser();\r\n     String[] args \u003d new String[] { \"-v\", \"-l\", \"10\", \"-age\", \"5\", \"-file\", \"filename\" };\r\n-    try {\r\n-        CommandLine line \u003d parser.parse(options, args);\r\n-        assertTrue(line.hasOption(\"v\"));\r\n-        assertEquals(line.getOptionValue(\"l\"), \"10\");\r\n-        assertEquals(line.getOptionValue(\"limit\"), \"10\");\r\n-        assertEquals(line.getOptionValue(\"a\"), \"5\");\r\n-        assertEquals(line.getOptionValue(\"age\"), \"5\");\r\n-        assertEquals(line.getOptionValue(\"file\"), \"filename\");\r\n-    } catch (ParseException exp) {\r\n-        fail(\"Unexpected exception:\" + exp.getMessage());\r\n-    }\r\n+    CommandLine line \u003d parser.parse(options, args);\r\n+    assertTrue(line.hasOption(\"v\"));\r\n+    assertEquals(line.getOptionValue(\"l\"), \"10\");\r\n+    assertEquals(line.getOptionValue(\"limit\"), \"10\");\r\n+    assertEquals(line.getOptionValue(\"a\"), \"5\");\r\n+    assertEquals(line.getOptionValue(\"age\"), \"5\");\r\n+    assertEquals(line.getOptionValue(\"file\"), \"filename\");\r\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        }
      ]
    },
    "45c01740a0bc7f9fcf74c1d0acebb55b139ffcfd": {
      "type": "Yintroduced",
      "commitMessage": "Stops the PosixParser from bursting options unecessarily, i.e. if -file is an acceptible option then it won\u0027t be broken into -f -i -l -e.\n\nPR: 32525\nSubmitted by:\tDavid Morris\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/cli/trunk@130108 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/27/04 2:42 PM",
      "commitName": "45c01740a0bc7f9fcf74c1d0acebb55b139ffcfd",
      "commitAuthor": "Robert James Oxspring",
      "diff": "@@ -0,0 +1,34 @@\n+public void testLongOptionWithShort() {\r\n+    Option help \u003d new Option(\"h\", \"help\", false, \"print this message\");\r\n+    Option version \u003d new Option(\"v\", \"version\", false, \"print version information\");\r\n+    Option newRun \u003d new Option(\"n\", \"new\", false, \"Create NLT cache entries only for new items\");\r\n+    Option trackerRun \u003d new Option(\"t\", \"tracker\", false, \"Create NLT cache entries only for tracker items\");\r\n+    Option timeLimit \u003d OptionBuilder.withLongOpt(\"limit\").hasArg().withValueSeparator().withDescription(\"Set time limit for execution, in mintues\").create(\"l\");\r\n+    Option age \u003d OptionBuilder.withLongOpt(\"age\").hasArg().withValueSeparator().withDescription(\"Age (in days) of cache item before being recomputed\").create(\"a\");\r\n+    Option server \u003d OptionBuilder.withLongOpt(\"server\").hasArg().withValueSeparator().withDescription(\"The NLT server address\").create(\"s\");\r\n+    Option numResults \u003d OptionBuilder.withLongOpt(\"results\").hasArg().withValueSeparator().withDescription(\"Number of results per item\").create(\"r\");\r\n+    Option configFile \u003d OptionBuilder.withLongOpt(\"file\").hasArg().withValueSeparator().withDescription(\"Use the specified configuration file\").create();\r\n+    Options options \u003d new Options();\r\n+    options.addOption(help);\r\n+    options.addOption(version);\r\n+    options.addOption(newRun);\r\n+    options.addOption(trackerRun);\r\n+    options.addOption(timeLimit);\r\n+    options.addOption(age);\r\n+    options.addOption(server);\r\n+    options.addOption(numResults);\r\n+    options.addOption(configFile);\r\n+    CommandLineParser parser \u003d new PosixParser();\r\n+    String[] args \u003d new String[] { \"-v\", \"-l\", \"10\", \"-age\", \"5\", \"-file\", \"filename\" };\r\n+    try {\r\n+        CommandLine line \u003d parser.parse(options, args);\r\n+        assertTrue(line.hasOption(\"v\"));\r\n+        assertEquals(line.getOptionValue(\"l\"), \"10\");\r\n+        assertEquals(line.getOptionValue(\"limit\"), \"10\");\r\n+        assertEquals(line.getOptionValue(\"a\"), \"5\");\r\n+        assertEquals(line.getOptionValue(\"age\"), \"5\");\r\n+        assertEquals(line.getOptionValue(\"file\"), \"filename\");\r\n+    } catch (ParseException exp) {\r\n+        fail(\"Unexpected exception:\" + exp.getMessage());\r\n+    }\r\n+}\n\\ No newline at end of file\n",
      "actualSource": "public void testLongOptionWithShort() {\r\n    Option help \u003d new Option(\"h\", \"help\", false, \"print this message\");\r\n    Option version \u003d new Option(\"v\", \"version\", false, \"print version information\");\r\n    Option newRun \u003d new Option(\"n\", \"new\", false, \"Create NLT cache entries only for new items\");\r\n    Option trackerRun \u003d new Option(\"t\", \"tracker\", false, \"Create NLT cache entries only for tracker items\");\r\n    Option timeLimit \u003d OptionBuilder.withLongOpt(\"limit\").hasArg().withValueSeparator().withDescription(\"Set time limit for execution, in mintues\").create(\"l\");\r\n    Option age \u003d OptionBuilder.withLongOpt(\"age\").hasArg().withValueSeparator().withDescription(\"Age (in days) of cache item before being recomputed\").create(\"a\");\r\n    Option server \u003d OptionBuilder.withLongOpt(\"server\").hasArg().withValueSeparator().withDescription(\"The NLT server address\").create(\"s\");\r\n    Option numResults \u003d OptionBuilder.withLongOpt(\"results\").hasArg().withValueSeparator().withDescription(\"Number of results per item\").create(\"r\");\r\n    Option configFile \u003d OptionBuilder.withLongOpt(\"file\").hasArg().withValueSeparator().withDescription(\"Use the specified configuration file\").create();\r\n    Options options \u003d new Options();\r\n    options.addOption(help);\r\n    options.addOption(version);\r\n    options.addOption(newRun);\r\n    options.addOption(trackerRun);\r\n    options.addOption(timeLimit);\r\n    options.addOption(age);\r\n    options.addOption(server);\r\n    options.addOption(numResults);\r\n    options.addOption(configFile);\r\n    CommandLineParser parser \u003d new PosixParser();\r\n    String[] args \u003d new String[] { \"-v\", \"-l\", \"10\", \"-age\", \"5\", \"-file\", \"filename\" };\r\n    try {\r\n        CommandLine line \u003d parser.parse(options, args);\r\n        assertTrue(line.hasOption(\"v\"));\r\n        assertEquals(line.getOptionValue(\"l\"), \"10\");\r\n        assertEquals(line.getOptionValue(\"limit\"), \"10\");\r\n        assertEquals(line.getOptionValue(\"a\"), \"5\");\r\n        assertEquals(line.getOptionValue(\"age\"), \"5\");\r\n        assertEquals(line.getOptionValue(\"file\"), \"filename\");\r\n    } catch (ParseException exp) {\r\n        fail(\"Unexpected exception:\" + exp.getMessage());\r\n    }\r\n}",
      "path": "src/test/org/apache/commons/cli/LongOptionWithShort.java",
      "functionStartLine": 42,
      "functionName": "testLongOptionWithShort",
      "functionAnnotation": "",
      "functionDoc": ""
    }
  }
}