{
  "origin": "codeshovel",
  "repositoryName": "commons-cli",
  "repositoryPath": "D:/_SELEN/_2022-2023/CS588/GitHub_Dataset/commons-cli/commons-cli/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ApplicationTest.java",
  "functionName": "testGroovy",
  "functionId": "testGroovy",
  "sourceFilePath": "src/test/java/org/apache/commons/cli/ApplicationTest.java",
  "functionAnnotation": "@Test",
  "functionDoc": "",
  "functionStartLine": 89,
  "functionEndLine": 156,
  "numCommitsSeen": 33,
  "timeTaken": 120,
  "changeHistory": [
    "bc0edc47dbf47cdaa3485cfb724982f377c900df",
    "357a8b0b8f1090db29e0d541a9419f570a78457b",
    "60835e2f29d4ec09eead7789405d99f92c36a29e",
    "cd745ecf52fb2fe8fed1c67fc9149e4be11a73f0",
    "67289747fc56e79ee9092a47cd2ff5bd0c688a29",
    "d89e42ab8c7a35853a48833d7f84294ab66f00ff"
  ],
  "changeHistoryShort": {
    "bc0edc47dbf47cdaa3485cfb724982f377c900df": "Ybodychange",
    "357a8b0b8f1090db29e0d541a9419f570a78457b": "Ybodychange",
    "60835e2f29d4ec09eead7789405d99f92c36a29e": "Yannotationchange",
    "cd745ecf52fb2fe8fed1c67fc9149e4be11a73f0": "Yfilerename",
    "67289747fc56e79ee9092a47cd2ff5bd0c688a29": "Ybodychange",
    "d89e42ab8c7a35853a48833d7f84294ab66f00ff": "Yintroduced"
  },
  "changeHistoryDetails": {
    "bc0edc47dbf47cdaa3485cfb724982f377c900df": {
      "type": "Ybodychange",
      "commitMessage": "Clean ups.\n\n- maven-checkstyle-plugin 3.1.1 -\u003e 3.1.2.\n- checkstyle -\u003e 9.0\n- Updates for 21st century.\n- No need to nest else clause.\n- Use simple array declarations.\n- Use valueOf instead of new for Numbers.\n- Consistent formatting.\n- Remove some inline comments //-----...\n",
      "commitDate": "10/2/21 11:04 PM",
      "commitName": "bc0edc47dbf47cdaa3485cfb724982f377c900df",
      "commitAuthor": "Gary Gregory",
      "commitDateOld": "12/28/20 6:44 PM",
      "commitNameOld": "c67275279176504a6f5fc556cfa247e1df02a580",
      "commitAuthorOld": "Arturo Bernal",
      "daysBetweenCommits": 278.18,
      "commitsBetweenForRepo": 38,
      "commitsBetweenForFile": 1,
      "actualSource": "@Test\r\npublic void testGroovy() throws Exception {\r\n    final Options options \u003d new Options();\r\n    options.addOption(OptionBuilder.withLongOpt(\"define\").withDescription(\"define a system property\").hasArg(true).withArgName(\"name\u003dvalue\").create(\u0027D\u0027));\r\n    options.addOption(OptionBuilder.hasArg(false).withDescription(\"usage information\").withLongOpt(\"help\").create(\u0027h\u0027));\r\n    options.addOption(OptionBuilder.hasArg(false).withDescription(\"debug mode will print out full stack traces\").withLongOpt(\"debug\").create(\u0027d\u0027));\r\n    options.addOption(OptionBuilder.hasArg(false).withDescription(\"display the Groovy and JVM versions\").withLongOpt(\"version\").create(\u0027v\u0027));\r\n    options.addOption(OptionBuilder.withArgName(\"charset\").hasArg().withDescription(\"specify the encoding of the files\").withLongOpt(\"encoding\").create(\u0027c\u0027));\r\n    options.addOption(OptionBuilder.withArgName(\"script\").hasArg().withDescription(\"specify a command line script\").create(\u0027e\u0027));\r\n    options.addOption(OptionBuilder.withArgName(\"extension\").hasOptionalArg().withDescription(\"modify files in place; create backup if extension is given (e.g. \\\u0027.bak\\\u0027)\").create(\u0027i\u0027));\r\n    options.addOption(OptionBuilder.hasArg(false).withDescription(\"process files line by line using implicit \u0027line\u0027 variable\").create(\u0027n\u0027));\r\n    options.addOption(OptionBuilder.hasArg(false).withDescription(\"process files line by line and print result (see also -n)\").create(\u0027p\u0027));\r\n    options.addOption(OptionBuilder.withArgName(\"port\").hasOptionalArg().withDescription(\"listen on a port and process inbound lines\").create(\u0027l\u0027));\r\n    options.addOption(OptionBuilder.withArgName(\"splitPattern\").hasOptionalArg().withDescription(\"split lines using splitPattern (default \u0027\\\\s\u0027) using implicit \u0027split\u0027 variable\").withLongOpt(\"autosplit\").create(\u0027a\u0027));\r\n    final Parser parser \u003d new PosixParser();\r\n    final CommandLine line \u003d parser.parse(options, new String[] { \"-e\", \"println \u0027hello\u0027\" }, true);\r\n    assertTrue(line.hasOption(\u0027e\u0027));\r\n    assertEquals(\"println \u0027hello\u0027\", line.getOptionValue(\u0027e\u0027));\r\n}",
      "path": "src/test/java/org/apache/commons/cli/ApplicationTest.java",
      "functionStartLine": 116,
      "functionName": "testGroovy",
      "functionAnnotation": "@Test",
      "functionDoc": "",
      "diff": "",
      "extendedDetails": {}
    },
    "357a8b0b8f1090db29e0d541a9419f570a78457b": {
      "type": "Ybodychange",
      "commitMessage": "Add final modifier to local variables.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/cli/trunk@1797673 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "6/5/17 7:37 PM",
      "commitName": "357a8b0b8f1090db29e0d541a9419f570a78457b",
      "commitAuthor": "Gary D. Gregory",
      "commitDateOld": "5/3/15 5:48 PM",
      "commitNameOld": "22576c14c60092fb6c67789ab2f5ee14952c0c18",
      "commitAuthorOld": "Benedikt Ritter",
      "daysBetweenCommits": 764.08,
      "commitsBetweenForRepo": 53,
      "commitsBetweenForFile": 1,
      "actualSource": "@Test\r\npublic void testGroovy() throws Exception {\r\n    final Options options \u003d new Options();\r\n    options.addOption(OptionBuilder.withLongOpt(\"define\").withDescription(\"define a system property\").hasArg(true).withArgName(\"name\u003dvalue\").create(\u0027D\u0027));\r\n    options.addOption(OptionBuilder.hasArg(false).withDescription(\"usage information\").withLongOpt(\"help\").create(\u0027h\u0027));\r\n    options.addOption(OptionBuilder.hasArg(false).withDescription(\"debug mode will print out full stack traces\").withLongOpt(\"debug\").create(\u0027d\u0027));\r\n    options.addOption(OptionBuilder.hasArg(false).withDescription(\"display the Groovy and JVM versions\").withLongOpt(\"version\").create(\u0027v\u0027));\r\n    options.addOption(OptionBuilder.withArgName(\"charset\").hasArg().withDescription(\"specify the encoding of the files\").withLongOpt(\"encoding\").create(\u0027c\u0027));\r\n    options.addOption(OptionBuilder.withArgName(\"script\").hasArg().withDescription(\"specify a command line script\").create(\u0027e\u0027));\r\n    options.addOption(OptionBuilder.withArgName(\"extension\").hasOptionalArg().withDescription(\"modify files in place; create backup if extension is given (e.g. \\\u0027.bak\\\u0027)\").create(\u0027i\u0027));\r\n    options.addOption(OptionBuilder.hasArg(false).withDescription(\"process files line by line using implicit \u0027line\u0027 variable\").create(\u0027n\u0027));\r\n    options.addOption(OptionBuilder.hasArg(false).withDescription(\"process files line by line and print result (see also -n)\").create(\u0027p\u0027));\r\n    options.addOption(OptionBuilder.withArgName(\"port\").hasOptionalArg().withDescription(\"listen on a port and process inbound lines\").create(\u0027l\u0027));\r\n    options.addOption(OptionBuilder.withArgName(\"splitPattern\").hasOptionalArg().withDescription(\"split lines using splitPattern (default \u0027\\\\s\u0027) using implicit \u0027split\u0027 variable\").withLongOpt(\"autosplit\").create(\u0027a\u0027));\r\n    final Parser parser \u003d new PosixParser();\r\n    final CommandLine line \u003d parser.parse(options, new String[] { \"-e\", \"println \u0027hello\u0027\" }, true);\r\n    assertTrue(line.hasOption(\u0027e\u0027));\r\n    assertEquals(\"println \u0027hello\u0027\", line.getOptionValue(\u0027e\u0027));\r\n}",
      "path": "src/test/java/org/apache/commons/cli/ApplicationTest.java",
      "functionStartLine": 114,
      "functionName": "testGroovy",
      "functionAnnotation": "@Test",
      "functionDoc": "",
      "diff": "@@ -1,19 +1,19 @@\n @Test\r\n public void testGroovy() throws Exception {\r\n-    Options options \u003d new Options();\r\n+    final Options options \u003d new Options();\r\n     options.addOption(OptionBuilder.withLongOpt(\"define\").withDescription(\"define a system property\").hasArg(true).withArgName(\"name\u003dvalue\").create(\u0027D\u0027));\r\n     options.addOption(OptionBuilder.hasArg(false).withDescription(\"usage information\").withLongOpt(\"help\").create(\u0027h\u0027));\r\n     options.addOption(OptionBuilder.hasArg(false).withDescription(\"debug mode will print out full stack traces\").withLongOpt(\"debug\").create(\u0027d\u0027));\r\n     options.addOption(OptionBuilder.hasArg(false).withDescription(\"display the Groovy and JVM versions\").withLongOpt(\"version\").create(\u0027v\u0027));\r\n     options.addOption(OptionBuilder.withArgName(\"charset\").hasArg().withDescription(\"specify the encoding of the files\").withLongOpt(\"encoding\").create(\u0027c\u0027));\r\n     options.addOption(OptionBuilder.withArgName(\"script\").hasArg().withDescription(\"specify a command line script\").create(\u0027e\u0027));\r\n     options.addOption(OptionBuilder.withArgName(\"extension\").hasOptionalArg().withDescription(\"modify files in place; create backup if extension is given (e.g. \\\u0027.bak\\\u0027)\").create(\u0027i\u0027));\r\n     options.addOption(OptionBuilder.hasArg(false).withDescription(\"process files line by line using implicit \u0027line\u0027 variable\").create(\u0027n\u0027));\r\n     options.addOption(OptionBuilder.hasArg(false).withDescription(\"process files line by line and print result (see also -n)\").create(\u0027p\u0027));\r\n     options.addOption(OptionBuilder.withArgName(\"port\").hasOptionalArg().withDescription(\"listen on a port and process inbound lines\").create(\u0027l\u0027));\r\n     options.addOption(OptionBuilder.withArgName(\"splitPattern\").hasOptionalArg().withDescription(\"split lines using splitPattern (default \u0027\\\\s\u0027) using implicit \u0027split\u0027 variable\").withLongOpt(\"autosplit\").create(\u0027a\u0027));\r\n-    Parser parser \u003d new PosixParser();\r\n-    CommandLine line \u003d parser.parse(options, new String[] { \"-e\", \"println \u0027hello\u0027\" }, true);\r\n+    final Parser parser \u003d new PosixParser();\r\n+    final CommandLine line \u003d parser.parse(options, new String[] { \"-e\", \"println \u0027hello\u0027\" }, true);\r\n     assertTrue(line.hasOption(\u0027e\u0027));\r\n     assertEquals(\"println \u0027hello\u0027\", line.getOptionValue(\u0027e\u0027));\r\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "60835e2f29d4ec09eead7789405d99f92c36a29e": {
      "type": "Yannotationchange",
      "commitMessage": "[CLI-227] Convert unit tests to junit 4, upgrade junit to 4.11, move authors to pom.xml.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/cli/trunk@1442904 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "2/6/13 12:57 PM",
      "commitName": "60835e2f29d4ec09eead7789405d99f92c36a29e",
      "commitAuthor": "Thomas Neidhart",
      "commitDateOld": "1/30/13 7:20 PM",
      "commitNameOld": "0cbe33506c92b790fd4dc866237d7e430a6c91dd",
      "commitAuthorOld": "Sebastian Bazley",
      "daysBetweenCommits": 6.73,
      "commitsBetweenForRepo": 8,
      "commitsBetweenForFile": 1,
      "actualSource": "@Test\r\npublic void testGroovy() throws Exception {\r\n    Options options \u003d new Options();\r\n    options.addOption(OptionBuilder.withLongOpt(\"define\").withDescription(\"define a system property\").hasArg(true).withArgName(\"name\u003dvalue\").create(\u0027D\u0027));\r\n    options.addOption(OptionBuilder.hasArg(false).withDescription(\"usage information\").withLongOpt(\"help\").create(\u0027h\u0027));\r\n    options.addOption(OptionBuilder.hasArg(false).withDescription(\"debug mode will print out full stack traces\").withLongOpt(\"debug\").create(\u0027d\u0027));\r\n    options.addOption(OptionBuilder.hasArg(false).withDescription(\"display the Groovy and JVM versions\").withLongOpt(\"version\").create(\u0027v\u0027));\r\n    options.addOption(OptionBuilder.withArgName(\"charset\").hasArg().withDescription(\"specify the encoding of the files\").withLongOpt(\"encoding\").create(\u0027c\u0027));\r\n    options.addOption(OptionBuilder.withArgName(\"script\").hasArg().withDescription(\"specify a command line script\").create(\u0027e\u0027));\r\n    options.addOption(OptionBuilder.withArgName(\"extension\").hasOptionalArg().withDescription(\"modify files in place; create backup if extension is given (e.g. \\\u0027.bak\\\u0027)\").create(\u0027i\u0027));\r\n    options.addOption(OptionBuilder.hasArg(false).withDescription(\"process files line by line using implicit \u0027line\u0027 variable\").create(\u0027n\u0027));\r\n    options.addOption(OptionBuilder.hasArg(false).withDescription(\"process files line by line and print result (see also -n)\").create(\u0027p\u0027));\r\n    options.addOption(OptionBuilder.withArgName(\"port\").hasOptionalArg().withDescription(\"listen on a port and process inbound lines\").create(\u0027l\u0027));\r\n    options.addOption(OptionBuilder.withArgName(\"splitPattern\").hasOptionalArg().withDescription(\"split lines using splitPattern (default \u0027\\\\s\u0027) using implicit \u0027split\u0027 variable\").withLongOpt(\"autosplit\").create(\u0027a\u0027));\r\n    Parser parser \u003d new PosixParser();\r\n    CommandLine line \u003d parser.parse(options, new String[] { \"-e\", \"println \u0027hello\u0027\" }, true);\r\n    assertTrue(line.hasOption(\u0027e\u0027));\r\n    assertEquals(\"println \u0027hello\u0027\", line.getOptionValue(\u0027e\u0027));\r\n}",
      "path": "src/test/java/org/apache/commons/cli/ApplicationTest.java",
      "functionStartLine": 111,
      "functionName": "testGroovy",
      "functionAnnotation": "@Test",
      "functionDoc": "",
      "diff": "@@ -1,18 +1,19 @@\n+@Test\r\n public void testGroovy() throws Exception {\r\n     Options options \u003d new Options();\r\n     options.addOption(OptionBuilder.withLongOpt(\"define\").withDescription(\"define a system property\").hasArg(true).withArgName(\"name\u003dvalue\").create(\u0027D\u0027));\r\n     options.addOption(OptionBuilder.hasArg(false).withDescription(\"usage information\").withLongOpt(\"help\").create(\u0027h\u0027));\r\n     options.addOption(OptionBuilder.hasArg(false).withDescription(\"debug mode will print out full stack traces\").withLongOpt(\"debug\").create(\u0027d\u0027));\r\n     options.addOption(OptionBuilder.hasArg(false).withDescription(\"display the Groovy and JVM versions\").withLongOpt(\"version\").create(\u0027v\u0027));\r\n     options.addOption(OptionBuilder.withArgName(\"charset\").hasArg().withDescription(\"specify the encoding of the files\").withLongOpt(\"encoding\").create(\u0027c\u0027));\r\n     options.addOption(OptionBuilder.withArgName(\"script\").hasArg().withDescription(\"specify a command line script\").create(\u0027e\u0027));\r\n     options.addOption(OptionBuilder.withArgName(\"extension\").hasOptionalArg().withDescription(\"modify files in place; create backup if extension is given (e.g. \\\u0027.bak\\\u0027)\").create(\u0027i\u0027));\r\n     options.addOption(OptionBuilder.hasArg(false).withDescription(\"process files line by line using implicit \u0027line\u0027 variable\").create(\u0027n\u0027));\r\n     options.addOption(OptionBuilder.hasArg(false).withDescription(\"process files line by line and print result (see also -n)\").create(\u0027p\u0027));\r\n     options.addOption(OptionBuilder.withArgName(\"port\").hasOptionalArg().withDescription(\"listen on a port and process inbound lines\").create(\u0027l\u0027));\r\n     options.addOption(OptionBuilder.withArgName(\"splitPattern\").hasOptionalArg().withDescription(\"split lines using splitPattern (default \u0027\\\\s\u0027) using implicit \u0027split\u0027 variable\").withLongOpt(\"autosplit\").create(\u0027a\u0027));\r\n     Parser parser \u003d new PosixParser();\r\n     CommandLine line \u003d parser.parse(options, new String[] { \"-e\", \"println \u0027hello\u0027\" }, true);\r\n     assertTrue(line.hasOption(\u0027e\u0027));\r\n     assertEquals(\"println \u0027hello\u0027\", line.getOptionValue(\u0027e\u0027));\r\n }\n\\ No newline at end of file\n",
      "extendedDetails": {
        "oldValue": "",
        "newValue": "@Test"
      }
    },
    "cd745ecf52fb2fe8fed1c67fc9149e4be11a73f0": {
      "type": "Yfilerename",
      "commitMessage": "Switched to the Maven 2 default directory layout (part 1)\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/cli/trunk@955169 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "6/16/10 12:41 PM",
      "commitName": "cd745ecf52fb2fe8fed1c67fc9149e4be11a73f0",
      "commitAuthor": "Emmanuel Bourg",
      "commitDateOld": "6/16/10 12:36 PM",
      "commitNameOld": "106f3b8dd48d32cbfcba4a42e1161505c2e3cac6",
      "commitAuthorOld": "Emmanuel Bourg",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "public void testGroovy() throws Exception {\r\n    Options options \u003d new Options();\r\n    options.addOption(OptionBuilder.withLongOpt(\"define\").withDescription(\"define a system property\").hasArg(true).withArgName(\"name\u003dvalue\").create(\u0027D\u0027));\r\n    options.addOption(OptionBuilder.hasArg(false).withDescription(\"usage information\").withLongOpt(\"help\").create(\u0027h\u0027));\r\n    options.addOption(OptionBuilder.hasArg(false).withDescription(\"debug mode will print out full stack traces\").withLongOpt(\"debug\").create(\u0027d\u0027));\r\n    options.addOption(OptionBuilder.hasArg(false).withDescription(\"display the Groovy and JVM versions\").withLongOpt(\"version\").create(\u0027v\u0027));\r\n    options.addOption(OptionBuilder.withArgName(\"charset\").hasArg().withDescription(\"specify the encoding of the files\").withLongOpt(\"encoding\").create(\u0027c\u0027));\r\n    options.addOption(OptionBuilder.withArgName(\"script\").hasArg().withDescription(\"specify a command line script\").create(\u0027e\u0027));\r\n    options.addOption(OptionBuilder.withArgName(\"extension\").hasOptionalArg().withDescription(\"modify files in place; create backup if extension is given (e.g. \\\u0027.bak\\\u0027)\").create(\u0027i\u0027));\r\n    options.addOption(OptionBuilder.hasArg(false).withDescription(\"process files line by line using implicit \u0027line\u0027 variable\").create(\u0027n\u0027));\r\n    options.addOption(OptionBuilder.hasArg(false).withDescription(\"process files line by line and print result (see also -n)\").create(\u0027p\u0027));\r\n    options.addOption(OptionBuilder.withArgName(\"port\").hasOptionalArg().withDescription(\"listen on a port and process inbound lines\").create(\u0027l\u0027));\r\n    options.addOption(OptionBuilder.withArgName(\"splitPattern\").hasOptionalArg().withDescription(\"split lines using splitPattern (default \u0027\\\\s\u0027) using implicit \u0027split\u0027 variable\").withLongOpt(\"autosplit\").create(\u0027a\u0027));\r\n    Parser parser \u003d new PosixParser();\r\n    CommandLine line \u003d parser.parse(options, new String[] { \"-e\", \"println \u0027hello\u0027\" }, true);\r\n    assertTrue(line.hasOption(\u0027e\u0027));\r\n    assertEquals(\"println \u0027hello\u0027\", line.getOptionValue(\u0027e\u0027));\r\n}",
      "path": "src/test/java/org/apache/commons/cli/ApplicationTest.java",
      "functionStartLine": 106,
      "functionName": "testGroovy",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "",
      "extendedDetails": {
        "oldPath": "src/test/org/apache/commons/cli/ApplicationTest.java",
        "newPath": "src/test/java/org/apache/commons/cli/ApplicationTest.java"
      }
    },
    "67289747fc56e79ee9092a47cd2ff5bd0c688a29": {
      "type": "Ybodychange",
      "commitMessage": "Merged the common parser tests into ParserTestCase\nFixed the integration test for Groovy, highlighting a regression in CLI 1.2\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/cli/branches/cli-1.x@695410 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "9/15/08 1:25 PM",
      "commitName": "67289747fc56e79ee9092a47cd2ff5bd0c688a29",
      "commitAuthor": "Emmanuel Bourg",
      "commitDateOld": "8/6/08 11:19 AM",
      "commitNameOld": "d89e42ab8c7a35853a48833d7f84294ab66f00ff",
      "commitAuthorOld": "Emmanuel Bourg",
      "daysBetweenCommits": 40.09,
      "commitsBetweenForRepo": 4,
      "commitsBetweenForFile": 1,
      "actualSource": "public void testGroovy() throws Exception {\r\n    Options options \u003d new Options();\r\n    options.addOption(OptionBuilder.withLongOpt(\"define\").withDescription(\"define a system property\").hasArg(true).withArgName(\"name\u003dvalue\").create(\u0027D\u0027));\r\n    options.addOption(OptionBuilder.hasArg(false).withDescription(\"usage information\").withLongOpt(\"help\").create(\u0027h\u0027));\r\n    options.addOption(OptionBuilder.hasArg(false).withDescription(\"debug mode will print out full stack traces\").withLongOpt(\"debug\").create(\u0027d\u0027));\r\n    options.addOption(OptionBuilder.hasArg(false).withDescription(\"display the Groovy and JVM versions\").withLongOpt(\"version\").create(\u0027v\u0027));\r\n    options.addOption(OptionBuilder.withArgName(\"charset\").hasArg().withDescription(\"specify the encoding of the files\").withLongOpt(\"encoding\").create(\u0027c\u0027));\r\n    options.addOption(OptionBuilder.withArgName(\"script\").hasArg().withDescription(\"specify a command line script\").create(\u0027e\u0027));\r\n    options.addOption(OptionBuilder.withArgName(\"extension\").hasOptionalArg().withDescription(\"modify files in place; create backup if extension is given (e.g. \\\u0027.bak\\\u0027)\").create(\u0027i\u0027));\r\n    options.addOption(OptionBuilder.hasArg(false).withDescription(\"process files line by line using implicit \u0027line\u0027 variable\").create(\u0027n\u0027));\r\n    options.addOption(OptionBuilder.hasArg(false).withDescription(\"process files line by line and print result (see also -n)\").create(\u0027p\u0027));\r\n    options.addOption(OptionBuilder.withArgName(\"port\").hasOptionalArg().withDescription(\"listen on a port and process inbound lines\").create(\u0027l\u0027));\r\n    options.addOption(OptionBuilder.withArgName(\"splitPattern\").hasOptionalArg().withDescription(\"split lines using splitPattern (default \u0027\\\\s\u0027) using implicit \u0027split\u0027 variable\").withLongOpt(\"autosplit\").create(\u0027a\u0027));\r\n    Parser parser \u003d new PosixParser();\r\n    CommandLine line \u003d parser.parse(options, new String[] { \"-e\", \"println \u0027hello\u0027\" }, true);\r\n    assertTrue(line.hasOption(\u0027e\u0027));\r\n    assertEquals(\"println \u0027hello\u0027\", line.getOptionValue(\u0027e\u0027));\r\n}",
      "path": "src/test/org/apache/commons/cli/ApplicationTest.java",
      "functionStartLine": 105,
      "functionName": "testGroovy",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,18 +1,18 @@\n public void testGroovy() throws Exception {\r\n     Options options \u003d new Options();\r\n     options.addOption(OptionBuilder.withLongOpt(\"define\").withDescription(\"define a system property\").hasArg(true).withArgName(\"name\u003dvalue\").create(\u0027D\u0027));\r\n     options.addOption(OptionBuilder.hasArg(false).withDescription(\"usage information\").withLongOpt(\"help\").create(\u0027h\u0027));\r\n     options.addOption(OptionBuilder.hasArg(false).withDescription(\"debug mode will print out full stack traces\").withLongOpt(\"debug\").create(\u0027d\u0027));\r\n     options.addOption(OptionBuilder.hasArg(false).withDescription(\"display the Groovy and JVM versions\").withLongOpt(\"version\").create(\u0027v\u0027));\r\n     options.addOption(OptionBuilder.withArgName(\"charset\").hasArg().withDescription(\"specify the encoding of the files\").withLongOpt(\"encoding\").create(\u0027c\u0027));\r\n     options.addOption(OptionBuilder.withArgName(\"script\").hasArg().withDescription(\"specify a command line script\").create(\u0027e\u0027));\r\n     options.addOption(OptionBuilder.withArgName(\"extension\").hasOptionalArg().withDescription(\"modify files in place; create backup if extension is given (e.g. \\\u0027.bak\\\u0027)\").create(\u0027i\u0027));\r\n     options.addOption(OptionBuilder.hasArg(false).withDescription(\"process files line by line using implicit \u0027line\u0027 variable\").create(\u0027n\u0027));\r\n     options.addOption(OptionBuilder.hasArg(false).withDescription(\"process files line by line and print result (see also -n)\").create(\u0027p\u0027));\r\n     options.addOption(OptionBuilder.withArgName(\"port\").hasOptionalArg().withDescription(\"listen on a port and process inbound lines\").create(\u0027l\u0027));\r\n     options.addOption(OptionBuilder.withArgName(\"splitPattern\").hasOptionalArg().withDescription(\"split lines using splitPattern (default \u0027\\\\s\u0027) using implicit \u0027split\u0027 variable\").withLongOpt(\"autosplit\").create(\u0027a\u0027));\r\n     Parser parser \u003d new PosixParser();\r\n-    CommandLine line \u003d parser.parse(options, new String[] { \"-e\", \"println \u0027hello\u0027\" });\r\n+    CommandLine line \u003d parser.parse(options, new String[] { \"-e\", \"println \u0027hello\u0027\" }, true);\r\n     assertTrue(line.hasOption(\u0027e\u0027));\r\n     assertEquals(\"println \u0027hello\u0027\", line.getOptionValue(\u0027e\u0027));\r\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "d89e42ab8c7a35853a48833d7f84294ab66f00ff": {
      "type": "Yintroduced",
      "commitMessage": "Added a test for the Groovy command line\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/cli/branches/cli-1.x@683156 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "8/6/08 11:19 AM",
      "commitName": "d89e42ab8c7a35853a48833d7f84294ab66f00ff",
      "commitAuthor": "Emmanuel Bourg",
      "diff": "@@ -0,0 +1,18 @@\n+public void testGroovy() throws Exception {\r\n+    Options options \u003d new Options();\r\n+    options.addOption(OptionBuilder.withLongOpt(\"define\").withDescription(\"define a system property\").hasArg(true).withArgName(\"name\u003dvalue\").create(\u0027D\u0027));\r\n+    options.addOption(OptionBuilder.hasArg(false).withDescription(\"usage information\").withLongOpt(\"help\").create(\u0027h\u0027));\r\n+    options.addOption(OptionBuilder.hasArg(false).withDescription(\"debug mode will print out full stack traces\").withLongOpt(\"debug\").create(\u0027d\u0027));\r\n+    options.addOption(OptionBuilder.hasArg(false).withDescription(\"display the Groovy and JVM versions\").withLongOpt(\"version\").create(\u0027v\u0027));\r\n+    options.addOption(OptionBuilder.withArgName(\"charset\").hasArg().withDescription(\"specify the encoding of the files\").withLongOpt(\"encoding\").create(\u0027c\u0027));\r\n+    options.addOption(OptionBuilder.withArgName(\"script\").hasArg().withDescription(\"specify a command line script\").create(\u0027e\u0027));\r\n+    options.addOption(OptionBuilder.withArgName(\"extension\").hasOptionalArg().withDescription(\"modify files in place; create backup if extension is given (e.g. \\\u0027.bak\\\u0027)\").create(\u0027i\u0027));\r\n+    options.addOption(OptionBuilder.hasArg(false).withDescription(\"process files line by line using implicit \u0027line\u0027 variable\").create(\u0027n\u0027));\r\n+    options.addOption(OptionBuilder.hasArg(false).withDescription(\"process files line by line and print result (see also -n)\").create(\u0027p\u0027));\r\n+    options.addOption(OptionBuilder.withArgName(\"port\").hasOptionalArg().withDescription(\"listen on a port and process inbound lines\").create(\u0027l\u0027));\r\n+    options.addOption(OptionBuilder.withArgName(\"splitPattern\").hasOptionalArg().withDescription(\"split lines using splitPattern (default \u0027\\\\s\u0027) using implicit \u0027split\u0027 variable\").withLongOpt(\"autosplit\").create(\u0027a\u0027));\r\n+    Parser parser \u003d new PosixParser();\r\n+    CommandLine line \u003d parser.parse(options, new String[] { \"-e\", \"println \u0027hello\u0027\" });\r\n+    assertTrue(line.hasOption(\u0027e\u0027));\r\n+    assertEquals(\"println \u0027hello\u0027\", line.getOptionValue(\u0027e\u0027));\r\n+}\n\\ No newline at end of file\n",
      "actualSource": "public void testGroovy() throws Exception {\r\n    Options options \u003d new Options();\r\n    options.addOption(OptionBuilder.withLongOpt(\"define\").withDescription(\"define a system property\").hasArg(true).withArgName(\"name\u003dvalue\").create(\u0027D\u0027));\r\n    options.addOption(OptionBuilder.hasArg(false).withDescription(\"usage information\").withLongOpt(\"help\").create(\u0027h\u0027));\r\n    options.addOption(OptionBuilder.hasArg(false).withDescription(\"debug mode will print out full stack traces\").withLongOpt(\"debug\").create(\u0027d\u0027));\r\n    options.addOption(OptionBuilder.hasArg(false).withDescription(\"display the Groovy and JVM versions\").withLongOpt(\"version\").create(\u0027v\u0027));\r\n    options.addOption(OptionBuilder.withArgName(\"charset\").hasArg().withDescription(\"specify the encoding of the files\").withLongOpt(\"encoding\").create(\u0027c\u0027));\r\n    options.addOption(OptionBuilder.withArgName(\"script\").hasArg().withDescription(\"specify a command line script\").create(\u0027e\u0027));\r\n    options.addOption(OptionBuilder.withArgName(\"extension\").hasOptionalArg().withDescription(\"modify files in place; create backup if extension is given (e.g. \\\u0027.bak\\\u0027)\").create(\u0027i\u0027));\r\n    options.addOption(OptionBuilder.hasArg(false).withDescription(\"process files line by line using implicit \u0027line\u0027 variable\").create(\u0027n\u0027));\r\n    options.addOption(OptionBuilder.hasArg(false).withDescription(\"process files line by line and print result (see also -n)\").create(\u0027p\u0027));\r\n    options.addOption(OptionBuilder.withArgName(\"port\").hasOptionalArg().withDescription(\"listen on a port and process inbound lines\").create(\u0027l\u0027));\r\n    options.addOption(OptionBuilder.withArgName(\"splitPattern\").hasOptionalArg().withDescription(\"split lines using splitPattern (default \u0027\\\\s\u0027) using implicit \u0027split\u0027 variable\").withLongOpt(\"autosplit\").create(\u0027a\u0027));\r\n    Parser parser \u003d new PosixParser();\r\n    CommandLine line \u003d parser.parse(options, new String[] { \"-e\", \"println \u0027hello\u0027\" });\r\n    assertTrue(line.hasOption(\u0027e\u0027));\r\n    assertEquals(\"println \u0027hello\u0027\", line.getOptionValue(\u0027e\u0027));\r\n}",
      "path": "src/test/org/apache/commons/cli/ApplicationTest.java",
      "functionStartLine": 106,
      "functionName": "testGroovy",
      "functionAnnotation": "",
      "functionDoc": ""
    }
  }
}