{
  "origin": "codeshovel",
  "repositoryName": "commons-cli",
  "repositoryPath": "D:/_SELEN/_2022-2023/CS588/GitHub_Dataset/commons-cli/commons-cli/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "CommandLineTest.java",
  "functionName": "testGetOptionPropertiesWithOption",
  "functionId": "testGetOptionPropertiesWithOption",
  "sourceFilePath": "src/test/java/org/apache/commons/cli/CommandLineTest.java",
  "functionAnnotation": "@Test",
  "functionDoc": "",
  "functionStartLine": 91,
  "functionEndLine": 112,
  "numCommitsSeen": 15,
  "timeTaken": 92,
  "changeHistory": [
    "bc0edc47dbf47cdaa3485cfb724982f377c900df",
    "357a8b0b8f1090db29e0d541a9419f570a78457b",
    "269eae18a911f792895d0402f5dd4e7913410523"
  ],
  "changeHistoryShort": {
    "bc0edc47dbf47cdaa3485cfb724982f377c900df": "Ybodychange",
    "357a8b0b8f1090db29e0d541a9419f570a78457b": "Ybodychange",
    "269eae18a911f792895d0402f5dd4e7913410523": "Yintroduced"
  },
  "changeHistoryDetails": {
    "bc0edc47dbf47cdaa3485cfb724982f377c900df": {
      "type": "Ybodychange",
      "commitMessage": "Clean ups.\n\n- maven-checkstyle-plugin 3.1.1 -\u003e 3.1.2.\n- checkstyle -\u003e 9.0\n- Updates for 21st century.\n- No need to nest else clause.\n- Use simple array declarations.\n- Use valueOf instead of new for Numbers.\n- Consistent formatting.\n- Remove some inline comments //-----...\n",
      "commitDate": "10/2/21 11:04 PM",
      "commitName": "bc0edc47dbf47cdaa3485cfb724982f377c900df",
      "commitAuthor": "Gary Gregory",
      "commitDateOld": "12/28/20 6:44 PM",
      "commitNameOld": "c67275279176504a6f5fc556cfa247e1df02a580",
      "commitAuthorOld": "Arturo Bernal",
      "daysBetweenCommits": 278.18,
      "commitsBetweenForRepo": 38,
      "commitsBetweenForFile": 1,
      "actualSource": "@Test\r\npublic void testGetOptionPropertiesWithOption() throws Exception {\r\n    final String[] args \u003d { \"-Dparam1\u003dvalue1\", \"-Dparam2\u003dvalue2\", \"-Dparam3\", \"-Dparam4\u003dvalue4\", \"-D\", \"--property\", \"foo\u003dbar\" };\r\n    final Options options \u003d new Options();\r\n    final Option optionD \u003d OptionBuilder.withValueSeparator().hasOptionalArgs(2).create(\u0027D\u0027);\r\n    final Option optionProperty \u003d OptionBuilder.withValueSeparator().hasArgs(2).withLongOpt(\"property\").create();\r\n    options.addOption(optionD);\r\n    options.addOption(optionProperty);\r\n    final Parser parser \u003d new GnuParser();\r\n    final CommandLine cl \u003d parser.parse(options, args);\r\n    final Properties props \u003d cl.getOptionProperties(optionD);\r\n    assertNotNull(\"null properties\", props);\r\n    assertEquals(\"number of properties in \" + props, 4, props.size());\r\n    assertEquals(\"property 1\", \"value1\", props.getProperty(\"param1\"));\r\n    assertEquals(\"property 2\", \"value2\", props.getProperty(\"param2\"));\r\n    assertEquals(\"property 3\", \"true\", props.getProperty(\"param3\"));\r\n    assertEquals(\"property 4\", \"value4\", props.getProperty(\"param4\"));\r\n    assertEquals(\"property with long format\", \"bar\", cl.getOptionProperties(optionProperty).getProperty(\"foo\"));\r\n}",
      "path": "src/test/java/org/apache/commons/cli/CommandLineTest.java",
      "functionStartLine": 54,
      "functionName": "testGetOptionPropertiesWithOption",
      "functionAnnotation": "@Test",
      "functionDoc": "",
      "diff": "@@ -1,19 +1,19 @@\n @Test\r\n public void testGetOptionPropertiesWithOption() throws Exception {\r\n-    final String[] args \u003d new String[] { \"-Dparam1\u003dvalue1\", \"-Dparam2\u003dvalue2\", \"-Dparam3\", \"-Dparam4\u003dvalue4\", \"-D\", \"--property\", \"foo\u003dbar\" };\r\n+    final String[] args \u003d { \"-Dparam1\u003dvalue1\", \"-Dparam2\u003dvalue2\", \"-Dparam3\", \"-Dparam4\u003dvalue4\", \"-D\", \"--property\", \"foo\u003dbar\" };\r\n     final Options options \u003d new Options();\r\n-    final Option option_D \u003d OptionBuilder.withValueSeparator().hasOptionalArgs(2).create(\u0027D\u0027);\r\n-    final Option option_property \u003d OptionBuilder.withValueSeparator().hasArgs(2).withLongOpt(\"property\").create();\r\n-    options.addOption(option_D);\r\n-    options.addOption(option_property);\r\n+    final Option optionD \u003d OptionBuilder.withValueSeparator().hasOptionalArgs(2).create(\u0027D\u0027);\r\n+    final Option optionProperty \u003d OptionBuilder.withValueSeparator().hasArgs(2).withLongOpt(\"property\").create();\r\n+    options.addOption(optionD);\r\n+    options.addOption(optionProperty);\r\n     final Parser parser \u003d new GnuParser();\r\n     final CommandLine cl \u003d parser.parse(options, args);\r\n-    final Properties props \u003d cl.getOptionProperties(option_D);\r\n+    final Properties props \u003d cl.getOptionProperties(optionD);\r\n     assertNotNull(\"null properties\", props);\r\n     assertEquals(\"number of properties in \" + props, 4, props.size());\r\n     assertEquals(\"property 1\", \"value1\", props.getProperty(\"param1\"));\r\n     assertEquals(\"property 2\", \"value2\", props.getProperty(\"param2\"));\r\n     assertEquals(\"property 3\", \"true\", props.getProperty(\"param3\"));\r\n     assertEquals(\"property 4\", \"value4\", props.getProperty(\"param4\"));\r\n-    assertEquals(\"property with long format\", \"bar\", cl.getOptionProperties(option_property).getProperty(\"foo\"));\r\n+    assertEquals(\"property with long format\", \"bar\", cl.getOptionProperties(optionProperty).getProperty(\"foo\"));\r\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "357a8b0b8f1090db29e0d541a9419f570a78457b": {
      "type": "Ybodychange",
      "commitMessage": "Add final modifier to local variables.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/cli/trunk@1797673 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "6/5/17 7:37 PM",
      "commitName": "357a8b0b8f1090db29e0d541a9419f570a78457b",
      "commitAuthor": "Gary D. Gregory",
      "commitDateOld": "3/25/17 9:32 PM",
      "commitNameOld": "269eae18a911f792895d0402f5dd4e7913410523",
      "commitAuthorOld": "Benedikt Ritter",
      "daysBetweenCommits": 71.92,
      "commitsBetweenForRepo": 7,
      "commitsBetweenForFile": 1,
      "actualSource": "@Test\r\npublic void testGetOptionPropertiesWithOption() throws Exception {\r\n    final String[] args \u003d new String[] { \"-Dparam1\u003dvalue1\", \"-Dparam2\u003dvalue2\", \"-Dparam3\", \"-Dparam4\u003dvalue4\", \"-D\", \"--property\", \"foo\u003dbar\" };\r\n    final Options options \u003d new Options();\r\n    final Option option_D \u003d OptionBuilder.withValueSeparator().hasOptionalArgs(2).create(\u0027D\u0027);\r\n    final Option option_property \u003d OptionBuilder.withValueSeparator().hasArgs(2).withLongOpt(\"property\").create();\r\n    options.addOption(option_D);\r\n    options.addOption(option_property);\r\n    final Parser parser \u003d new GnuParser();\r\n    final CommandLine cl \u003d parser.parse(options, args);\r\n    final Properties props \u003d cl.getOptionProperties(option_D);\r\n    assertNotNull(\"null properties\", props);\r\n    assertEquals(\"number of properties in \" + props, 4, props.size());\r\n    assertEquals(\"property 1\", \"value1\", props.getProperty(\"param1\"));\r\n    assertEquals(\"property 2\", \"value2\", props.getProperty(\"param2\"));\r\n    assertEquals(\"property 3\", \"true\", props.getProperty(\"param3\"));\r\n    assertEquals(\"property 4\", \"value4\", props.getProperty(\"param4\"));\r\n    assertEquals(\"property with long format\", \"bar\", cl.getOptionProperties(option_property).getProperty(\"foo\"));\r\n}",
      "path": "src/test/java/org/apache/commons/cli/CommandLineTest.java",
      "functionStartLine": 55,
      "functionName": "testGetOptionPropertiesWithOption",
      "functionAnnotation": "@Test",
      "functionDoc": "",
      "diff": "@@ -1,19 +1,19 @@\n @Test\r\n public void testGetOptionPropertiesWithOption() throws Exception {\r\n-    String[] args \u003d new String[] { \"-Dparam1\u003dvalue1\", \"-Dparam2\u003dvalue2\", \"-Dparam3\", \"-Dparam4\u003dvalue4\", \"-D\", \"--property\", \"foo\u003dbar\" };\r\n-    Options options \u003d new Options();\r\n-    Option option_D \u003d OptionBuilder.withValueSeparator().hasOptionalArgs(2).create(\u0027D\u0027);\r\n-    Option option_property \u003d OptionBuilder.withValueSeparator().hasArgs(2).withLongOpt(\"property\").create();\r\n+    final String[] args \u003d new String[] { \"-Dparam1\u003dvalue1\", \"-Dparam2\u003dvalue2\", \"-Dparam3\", \"-Dparam4\u003dvalue4\", \"-D\", \"--property\", \"foo\u003dbar\" };\r\n+    final Options options \u003d new Options();\r\n+    final Option option_D \u003d OptionBuilder.withValueSeparator().hasOptionalArgs(2).create(\u0027D\u0027);\r\n+    final Option option_property \u003d OptionBuilder.withValueSeparator().hasArgs(2).withLongOpt(\"property\").create();\r\n     options.addOption(option_D);\r\n     options.addOption(option_property);\r\n-    Parser parser \u003d new GnuParser();\r\n-    CommandLine cl \u003d parser.parse(options, args);\r\n-    Properties props \u003d cl.getOptionProperties(option_D);\r\n+    final Parser parser \u003d new GnuParser();\r\n+    final CommandLine cl \u003d parser.parse(options, args);\r\n+    final Properties props \u003d cl.getOptionProperties(option_D);\r\n     assertNotNull(\"null properties\", props);\r\n     assertEquals(\"number of properties in \" + props, 4, props.size());\r\n     assertEquals(\"property 1\", \"value1\", props.getProperty(\"param1\"));\r\n     assertEquals(\"property 2\", \"value2\", props.getProperty(\"param2\"));\r\n     assertEquals(\"property 3\", \"true\", props.getProperty(\"param3\"));\r\n     assertEquals(\"property 4\", \"value4\", props.getProperty(\"param4\"));\r\n     assertEquals(\"property with long format\", \"bar\", cl.getOptionProperties(option_property).getProperty(\"foo\"));\r\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "269eae18a911f792895d0402f5dd4e7913410523": {
      "type": "Yintroduced",
      "commitMessage": "CLI-271: CommandLine.getXXX and CommandLine.hasXXX should accept an Option as a\nparameter. Thanks to Christoph Läubrich. This also fixes #9 from GitHub\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/cli/trunk@1788678 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "3/25/17 9:32 PM",
      "commitName": "269eae18a911f792895d0402f5dd4e7913410523",
      "commitAuthor": "Benedikt Ritter",
      "diff": "@@ -0,0 +1,19 @@\n+@Test\r\n+public void testGetOptionPropertiesWithOption() throws Exception {\r\n+    String[] args \u003d new String[] { \"-Dparam1\u003dvalue1\", \"-Dparam2\u003dvalue2\", \"-Dparam3\", \"-Dparam4\u003dvalue4\", \"-D\", \"--property\", \"foo\u003dbar\" };\r\n+    Options options \u003d new Options();\r\n+    Option option_D \u003d OptionBuilder.withValueSeparator().hasOptionalArgs(2).create(\u0027D\u0027);\r\n+    Option option_property \u003d OptionBuilder.withValueSeparator().hasArgs(2).withLongOpt(\"property\").create();\r\n+    options.addOption(option_D);\r\n+    options.addOption(option_property);\r\n+    Parser parser \u003d new GnuParser();\r\n+    CommandLine cl \u003d parser.parse(options, args);\r\n+    Properties props \u003d cl.getOptionProperties(option_D);\r\n+    assertNotNull(\"null properties\", props);\r\n+    assertEquals(\"number of properties in \" + props, 4, props.size());\r\n+    assertEquals(\"property 1\", \"value1\", props.getProperty(\"param1\"));\r\n+    assertEquals(\"property 2\", \"value2\", props.getProperty(\"param2\"));\r\n+    assertEquals(\"property 3\", \"true\", props.getProperty(\"param3\"));\r\n+    assertEquals(\"property 4\", \"value4\", props.getProperty(\"param4\"));\r\n+    assertEquals(\"property with long format\", \"bar\", cl.getOptionProperties(option_property).getProperty(\"foo\"));\r\n+}\n\\ No newline at end of file\n",
      "actualSource": "@Test\r\npublic void testGetOptionPropertiesWithOption() throws Exception {\r\n    String[] args \u003d new String[] { \"-Dparam1\u003dvalue1\", \"-Dparam2\u003dvalue2\", \"-Dparam3\", \"-Dparam4\u003dvalue4\", \"-D\", \"--property\", \"foo\u003dbar\" };\r\n    Options options \u003d new Options();\r\n    Option option_D \u003d OptionBuilder.withValueSeparator().hasOptionalArgs(2).create(\u0027D\u0027);\r\n    Option option_property \u003d OptionBuilder.withValueSeparator().hasArgs(2).withLongOpt(\"property\").create();\r\n    options.addOption(option_D);\r\n    options.addOption(option_property);\r\n    Parser parser \u003d new GnuParser();\r\n    CommandLine cl \u003d parser.parse(options, args);\r\n    Properties props \u003d cl.getOptionProperties(option_D);\r\n    assertNotNull(\"null properties\", props);\r\n    assertEquals(\"number of properties in \" + props, 4, props.size());\r\n    assertEquals(\"property 1\", \"value1\", props.getProperty(\"param1\"));\r\n    assertEquals(\"property 2\", \"value2\", props.getProperty(\"param2\"));\r\n    assertEquals(\"property 3\", \"true\", props.getProperty(\"param3\"));\r\n    assertEquals(\"property 4\", \"value4\", props.getProperty(\"param4\"));\r\n    assertEquals(\"property with long format\", \"bar\", cl.getOptionProperties(option_property).getProperty(\"foo\"));\r\n}",
      "path": "src/test/java/org/apache/commons/cli/CommandLineTest.java",
      "functionStartLine": 55,
      "functionName": "testGetOptionPropertiesWithOption",
      "functionAnnotation": "@Test",
      "functionDoc": ""
    }
  }
}