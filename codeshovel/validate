{
  "origin": "codeshovel",
  "repositoryName": "commons-cli",
  "repositoryPath": "D:/_SELEN/_2022-2023/CS588/GitHub_Dataset/commons-cli/commons-cli/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "OptionValidator.java",
  "functionName": "validate",
  "functionId": "validate___option-String(modifiers-final)",
  "sourceFilePath": "src/main/java/org/apache/commons/cli/OptionValidator.java",
  "functionAnnotation": "",
  "functionDoc": "Validates whether {@code opt} is a permissible Option shortOpt. The rules that specify if the {@code opt}\r\nis valid are:\r\n\r\n\u003cul\u003e\r\n\u003cli\u003ea single character {@code opt} that is either \u0027 \u0027(special case), \u0027?\u0027, \u0027@\u0027 or a letter\u003c/li\u003e\r\n\u003cli\u003ea multi character {@code opt} that only contains letters.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003e\r\nIn case {@code opt} is {@code null} no further validation is performed.\r\n\r\n@param option The option string to validate, may be null\r\n@throws IllegalArgumentException if the Option is not valid.\r\n",
  "functionStartLine": 60,
  "functionEndLine": 82,
  "numCommitsSeen": 60,
  "timeTaken": 412,
  "changeHistory": [
    "f87f0b37881e927346af7aa732f4be05ef0c14a4",
    "f2aa3089560eb00cc973b0cb12ead7c3424536bb",
    "9539506e87648d753c44b68b3dfbdd1938c09315",
    "bc0edc47dbf47cdaa3485cfb724982f377c900df",
    "c12260c05ebcd27558265395df79b8b049534fbd",
    "5fb9e5009a8cdc7366b7a762f0e43dc47decf67c",
    "357a8b0b8f1090db29e0d541a9419f570a78457b",
    "b1ffe271a5f8a6ff7b6bf714a9b2631e7dc6bbb0",
    "f481ae3e7a6ec5462800da6349c50e9eaae35eaf",
    "29fefd2767b887e62cf17ca4412179b43f6ee4f6",
    "a1b5d44432c057cf675f051bb20379937565f4ef",
    "d36b987c3257c01b42353cf7d2eb69ca325860aa",
    "1596f3bbe57986361da4ac1a23634dd5b00d10df",
    "147df44faa4eb12ffd4a0063fc3284f784ea67c8",
    "8f8639f6a2606f45c130d7d9b65248248fc431c1",
    "9b2b8038b52be022e42c8c7fdf26e236888f94c5",
    "347bbeb8f98a49744501ac50850457ba8751d545",
    "04490af06faa8fd1be15da88172beb32218dd336",
    "16b91ad2b9f5f524b2b07ba4515c65479999f7ee",
    "7f90b98c1f77a0c1af9c774a12e8e257d7a0d1ac"
  ],
  "changeHistoryShort": {
    "f87f0b37881e927346af7aa732f4be05ef0c14a4": "Ybodychange",
    "f2aa3089560eb00cc973b0cb12ead7c3424536bb": "Ymultichange(Yrename,Yparameterchange,Yreturntypechange,Ybodychange,Ydocchange)",
    "9539506e87648d753c44b68b3dfbdd1938c09315": "Ydocchange",
    "bc0edc47dbf47cdaa3485cfb724982f377c900df": "Ymultichange(Ydocchange,Yformatchange)",
    "c12260c05ebcd27558265395df79b8b049534fbd": "Yformatchange",
    "5fb9e5009a8cdc7366b7a762f0e43dc47decf67c": "Yparametermetachange",
    "357a8b0b8f1090db29e0d541a9419f570a78457b": "Ybodychange",
    "b1ffe271a5f8a6ff7b6bf714a9b2631e7dc6bbb0": "Ymultichange(Ybodychange,Ydocchange)",
    "f481ae3e7a6ec5462800da6349c50e9eaae35eaf": "Ydocchange",
    "29fefd2767b887e62cf17ca4412179b43f6ee4f6": "Ybodychange",
    "a1b5d44432c057cf675f051bb20379937565f4ef": "Ybodychange",
    "d36b987c3257c01b42353cf7d2eb69ca325860aa": "Ybodychange",
    "1596f3bbe57986361da4ac1a23634dd5b00d10df": "Yfilerename",
    "147df44faa4eb12ffd4a0063fc3284f784ea67c8": "Ydocchange",
    "8f8639f6a2606f45c130d7d9b65248248fc431c1": "Yformatchange",
    "9b2b8038b52be022e42c8c7fdf26e236888f94c5": "Yformatchange",
    "347bbeb8f98a49744501ac50850457ba8751d545": "Ymultichange(Ymovefromfile,Ymodifierchange,Ybodychange)",
    "04490af06faa8fd1be15da88172beb32218dd336": "Ymultichange(Ybodychange,Ydocchange)",
    "16b91ad2b9f5f524b2b07ba4515c65479999f7ee": "Ybodychange",
    "7f90b98c1f77a0c1af9c774a12e8e257d7a0d1ac": "Yintroduced"
  },
  "changeHistoryDetails": {
    "f87f0b37881e927346af7aa732f4be05ef0c14a4": {
      "type": "Ybodychange",
      "commitMessage": "Rename some internals.\n",
      "commitDate": "10/6/21 3:37 PM",
      "commitName": "f87f0b37881e927346af7aa732f4be05ef0c14a4",
      "commitAuthor": "Gary Gregory",
      "commitDateOld": "10/6/21 3:24 PM",
      "commitNameOld": "f2aa3089560eb00cc973b0cb12ead7c3424536bb",
      "commitAuthorOld": "Gary Gregory",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "static String validate(final String option) throws IllegalArgumentException {\r\n    if (option \u003d\u003d null) {\r\n        return null;\r\n    }\r\n    if (option.length() \u003d\u003d 1) {\r\n        final char ch \u003d option.charAt(0);\r\n        if (!isValidOpt(ch)) {\r\n            throw new IllegalArgumentException(\"Illegal option name \u0027\" + ch + \"\u0027\");\r\n        }\r\n    } else {\r\n        for (final char ch : option.toCharArray()) {\r\n            if (!isValidChar(ch)) {\r\n                throw new IllegalArgumentException(\"The option \u0027\" + option + \"\u0027 contains an illegal \" + \"character : \u0027\" + ch + \"\u0027\");\r\n            }\r\n        }\r\n    }\r\n    return option;\r\n}",
      "path": "src/main/java/org/apache/commons/cli/OptionValidator.java",
      "functionStartLine": 60,
      "functionName": "validate",
      "functionAnnotation": "",
      "functionDoc": "Validates whether {@code opt} is a permissible Option shortOpt. The rules that specify if the {@code opt}\r\nis valid are:\r\n\r\n\u003cul\u003e\r\n\u003cli\u003ea single character {@code opt} that is either \u0027 \u0027(special case), \u0027?\u0027, \u0027@\u0027 or a letter\u003c/li\u003e\r\n\u003cli\u003ea multi character {@code opt} that only contains letters.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003e\r\nIn case {@code opt} is {@code null} no further validation is performed.\r\n\r\n@param option The option string to validate, may be null\r\n@throws IllegalArgumentException if the Option is not valid.\r\n",
      "diff": "@@ -1,18 +1,18 @@\n static String validate(final String option) throws IllegalArgumentException {\r\n     if (option \u003d\u003d null) {\r\n-        return option;\r\n+        return null;\r\n     }\r\n     if (option.length() \u003d\u003d 1) {\r\n         final char ch \u003d option.charAt(0);\r\n         if (!isValidOpt(ch)) {\r\n             throw new IllegalArgumentException(\"Illegal option name \u0027\" + ch + \"\u0027\");\r\n         }\r\n     } else {\r\n         for (final char ch : option.toCharArray()) {\r\n             if (!isValidChar(ch)) {\r\n                 throw new IllegalArgumentException(\"The option \u0027\" + option + \"\u0027 contains an illegal \" + \"character : \u0027\" + ch + \"\u0027\");\r\n             }\r\n         }\r\n     }\r\n     return option;\r\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "f2aa3089560eb00cc973b0cb12ead7c3424536bb": {
      "type": "Ymultichange(Yrename,Yparameterchange,Yreturntypechange,Ybodychange,Ydocchange)",
      "commitMessage": "Rename some internals.\n",
      "commitDate": "10/6/21 3:24 PM",
      "commitName": "f2aa3089560eb00cc973b0cb12ead7c3424536bb",
      "commitAuthor": "Gary Gregory",
      "subchanges": [
        {
          "type": "Yrename",
          "commitMessage": "Rename some internals.\n",
          "commitDate": "10/6/21 3:24 PM",
          "commitName": "f2aa3089560eb00cc973b0cb12ead7c3424536bb",
          "commitAuthor": "Gary Gregory",
          "commitDateOld": "10/4/21 12:32 AM",
          "commitNameOld": "9539506e87648d753c44b68b3dfbdd1938c09315",
          "commitAuthorOld": "Gary Gregory",
          "daysBetweenCommits": 2.62,
          "commitsBetweenForRepo": 28,
          "commitsBetweenForFile": 1,
          "actualSource": "static String validate(final String option) throws IllegalArgumentException {\r\n    if (option \u003d\u003d null) {\r\n        return option;\r\n    }\r\n    if (option.length() \u003d\u003d 1) {\r\n        final char ch \u003d option.charAt(0);\r\n        if (!isValidOpt(ch)) {\r\n            throw new IllegalArgumentException(\"Illegal option name \u0027\" + ch + \"\u0027\");\r\n        }\r\n    } else {\r\n        for (final char ch : option.toCharArray()) {\r\n            if (!isValidChar(ch)) {\r\n                throw new IllegalArgumentException(\"The option \u0027\" + option + \"\u0027 contains an illegal \" + \"character : \u0027\" + ch + \"\u0027\");\r\n            }\r\n        }\r\n    }\r\n    return option;\r\n}",
          "path": "src/main/java/org/apache/commons/cli/OptionValidator.java",
          "functionStartLine": 60,
          "functionName": "validate",
          "functionAnnotation": "",
          "functionDoc": "Validates whether {@code opt} is a permissible Option shortOpt. The rules that specify if the {@code opt}\r\nis valid are:\r\n\r\n\u003cul\u003e\r\n\u003cli\u003ea single character {@code opt} that is either \u0027 \u0027(special case), \u0027?\u0027, \u0027@\u0027 or a letter\u003c/li\u003e\r\n\u003cli\u003ea multi character {@code opt} that only contains letters.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003e\r\nIn case {@code opt} is {@code null} no further validation is performed.\r\n\r\n@param option The option string to validate, may be null\r\n@throws IllegalArgumentException if the Option is not valid.\r\n",
          "diff": "@@ -1,17 +1,18 @@\n-static void validateOption(final String opt) throws IllegalArgumentException {\r\n-    if (opt \u003d\u003d null) {\r\n-        return;\r\n+static String validate(final String option) throws IllegalArgumentException {\r\n+    if (option \u003d\u003d null) {\r\n+        return option;\r\n     }\r\n-    if (opt.length() \u003d\u003d 1) {\r\n-        final char ch \u003d opt.charAt(0);\r\n+    if (option.length() \u003d\u003d 1) {\r\n+        final char ch \u003d option.charAt(0);\r\n         if (!isValidOpt(ch)) {\r\n             throw new IllegalArgumentException(\"Illegal option name \u0027\" + ch + \"\u0027\");\r\n         }\r\n     } else {\r\n-        for (final char ch : opt.toCharArray()) {\r\n+        for (final char ch : option.toCharArray()) {\r\n             if (!isValidChar(ch)) {\r\n-                throw new IllegalArgumentException(\"The option \u0027\" + opt + \"\u0027 contains an illegal \" + \"character : \u0027\" + ch + \"\u0027\");\r\n+                throw new IllegalArgumentException(\"The option \u0027\" + option + \"\u0027 contains an illegal \" + \"character : \u0027\" + ch + \"\u0027\");\r\n             }\r\n         }\r\n     }\r\n+    return option;\r\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "validateOption",
            "newValue": "validate"
          }
        },
        {
          "type": "Yparameterchange",
          "commitMessage": "Rename some internals.\n",
          "commitDate": "10/6/21 3:24 PM",
          "commitName": "f2aa3089560eb00cc973b0cb12ead7c3424536bb",
          "commitAuthor": "Gary Gregory",
          "commitDateOld": "10/4/21 12:32 AM",
          "commitNameOld": "9539506e87648d753c44b68b3dfbdd1938c09315",
          "commitAuthorOld": "Gary Gregory",
          "daysBetweenCommits": 2.62,
          "commitsBetweenForRepo": 28,
          "commitsBetweenForFile": 1,
          "actualSource": "static String validate(final String option) throws IllegalArgumentException {\r\n    if (option \u003d\u003d null) {\r\n        return option;\r\n    }\r\n    if (option.length() \u003d\u003d 1) {\r\n        final char ch \u003d option.charAt(0);\r\n        if (!isValidOpt(ch)) {\r\n            throw new IllegalArgumentException(\"Illegal option name \u0027\" + ch + \"\u0027\");\r\n        }\r\n    } else {\r\n        for (final char ch : option.toCharArray()) {\r\n            if (!isValidChar(ch)) {\r\n                throw new IllegalArgumentException(\"The option \u0027\" + option + \"\u0027 contains an illegal \" + \"character : \u0027\" + ch + \"\u0027\");\r\n            }\r\n        }\r\n    }\r\n    return option;\r\n}",
          "path": "src/main/java/org/apache/commons/cli/OptionValidator.java",
          "functionStartLine": 60,
          "functionName": "validate",
          "functionAnnotation": "",
          "functionDoc": "Validates whether {@code opt} is a permissible Option shortOpt. The rules that specify if the {@code opt}\r\nis valid are:\r\n\r\n\u003cul\u003e\r\n\u003cli\u003ea single character {@code opt} that is either \u0027 \u0027(special case), \u0027?\u0027, \u0027@\u0027 or a letter\u003c/li\u003e\r\n\u003cli\u003ea multi character {@code opt} that only contains letters.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003e\r\nIn case {@code opt} is {@code null} no further validation is performed.\r\n\r\n@param option The option string to validate, may be null\r\n@throws IllegalArgumentException if the Option is not valid.\r\n",
          "diff": "@@ -1,17 +1,18 @@\n-static void validateOption(final String opt) throws IllegalArgumentException {\r\n-    if (opt \u003d\u003d null) {\r\n-        return;\r\n+static String validate(final String option) throws IllegalArgumentException {\r\n+    if (option \u003d\u003d null) {\r\n+        return option;\r\n     }\r\n-    if (opt.length() \u003d\u003d 1) {\r\n-        final char ch \u003d opt.charAt(0);\r\n+    if (option.length() \u003d\u003d 1) {\r\n+        final char ch \u003d option.charAt(0);\r\n         if (!isValidOpt(ch)) {\r\n             throw new IllegalArgumentException(\"Illegal option name \u0027\" + ch + \"\u0027\");\r\n         }\r\n     } else {\r\n-        for (final char ch : opt.toCharArray()) {\r\n+        for (final char ch : option.toCharArray()) {\r\n             if (!isValidChar(ch)) {\r\n-                throw new IllegalArgumentException(\"The option \u0027\" + opt + \"\u0027 contains an illegal \" + \"character : \u0027\" + ch + \"\u0027\");\r\n+                throw new IllegalArgumentException(\"The option \u0027\" + option + \"\u0027 contains an illegal \" + \"character : \u0027\" + ch + \"\u0027\");\r\n             }\r\n         }\r\n     }\r\n+    return option;\r\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[opt-String(modifiers-final)]",
            "newValue": "[option-String(modifiers-final)]"
          }
        },
        {
          "type": "Yreturntypechange",
          "commitMessage": "Rename some internals.\n",
          "commitDate": "10/6/21 3:24 PM",
          "commitName": "f2aa3089560eb00cc973b0cb12ead7c3424536bb",
          "commitAuthor": "Gary Gregory",
          "commitDateOld": "10/4/21 12:32 AM",
          "commitNameOld": "9539506e87648d753c44b68b3dfbdd1938c09315",
          "commitAuthorOld": "Gary Gregory",
          "daysBetweenCommits": 2.62,
          "commitsBetweenForRepo": 28,
          "commitsBetweenForFile": 1,
          "actualSource": "static String validate(final String option) throws IllegalArgumentException {\r\n    if (option \u003d\u003d null) {\r\n        return option;\r\n    }\r\n    if (option.length() \u003d\u003d 1) {\r\n        final char ch \u003d option.charAt(0);\r\n        if (!isValidOpt(ch)) {\r\n            throw new IllegalArgumentException(\"Illegal option name \u0027\" + ch + \"\u0027\");\r\n        }\r\n    } else {\r\n        for (final char ch : option.toCharArray()) {\r\n            if (!isValidChar(ch)) {\r\n                throw new IllegalArgumentException(\"The option \u0027\" + option + \"\u0027 contains an illegal \" + \"character : \u0027\" + ch + \"\u0027\");\r\n            }\r\n        }\r\n    }\r\n    return option;\r\n}",
          "path": "src/main/java/org/apache/commons/cli/OptionValidator.java",
          "functionStartLine": 60,
          "functionName": "validate",
          "functionAnnotation": "",
          "functionDoc": "Validates whether {@code opt} is a permissible Option shortOpt. The rules that specify if the {@code opt}\r\nis valid are:\r\n\r\n\u003cul\u003e\r\n\u003cli\u003ea single character {@code opt} that is either \u0027 \u0027(special case), \u0027?\u0027, \u0027@\u0027 or a letter\u003c/li\u003e\r\n\u003cli\u003ea multi character {@code opt} that only contains letters.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003e\r\nIn case {@code opt} is {@code null} no further validation is performed.\r\n\r\n@param option The option string to validate, may be null\r\n@throws IllegalArgumentException if the Option is not valid.\r\n",
          "diff": "@@ -1,17 +1,18 @@\n-static void validateOption(final String opt) throws IllegalArgumentException {\r\n-    if (opt \u003d\u003d null) {\r\n-        return;\r\n+static String validate(final String option) throws IllegalArgumentException {\r\n+    if (option \u003d\u003d null) {\r\n+        return option;\r\n     }\r\n-    if (opt.length() \u003d\u003d 1) {\r\n-        final char ch \u003d opt.charAt(0);\r\n+    if (option.length() \u003d\u003d 1) {\r\n+        final char ch \u003d option.charAt(0);\r\n         if (!isValidOpt(ch)) {\r\n             throw new IllegalArgumentException(\"Illegal option name \u0027\" + ch + \"\u0027\");\r\n         }\r\n     } else {\r\n-        for (final char ch : opt.toCharArray()) {\r\n+        for (final char ch : option.toCharArray()) {\r\n             if (!isValidChar(ch)) {\r\n-                throw new IllegalArgumentException(\"The option \u0027\" + opt + \"\u0027 contains an illegal \" + \"character : \u0027\" + ch + \"\u0027\");\r\n+                throw new IllegalArgumentException(\"The option \u0027\" + option + \"\u0027 contains an illegal \" + \"character : \u0027\" + ch + \"\u0027\");\r\n             }\r\n         }\r\n     }\r\n+    return option;\r\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "void",
            "newValue": "String"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Rename some internals.\n",
          "commitDate": "10/6/21 3:24 PM",
          "commitName": "f2aa3089560eb00cc973b0cb12ead7c3424536bb",
          "commitAuthor": "Gary Gregory",
          "commitDateOld": "10/4/21 12:32 AM",
          "commitNameOld": "9539506e87648d753c44b68b3dfbdd1938c09315",
          "commitAuthorOld": "Gary Gregory",
          "daysBetweenCommits": 2.62,
          "commitsBetweenForRepo": 28,
          "commitsBetweenForFile": 1,
          "actualSource": "static String validate(final String option) throws IllegalArgumentException {\r\n    if (option \u003d\u003d null) {\r\n        return option;\r\n    }\r\n    if (option.length() \u003d\u003d 1) {\r\n        final char ch \u003d option.charAt(0);\r\n        if (!isValidOpt(ch)) {\r\n            throw new IllegalArgumentException(\"Illegal option name \u0027\" + ch + \"\u0027\");\r\n        }\r\n    } else {\r\n        for (final char ch : option.toCharArray()) {\r\n            if (!isValidChar(ch)) {\r\n                throw new IllegalArgumentException(\"The option \u0027\" + option + \"\u0027 contains an illegal \" + \"character : \u0027\" + ch + \"\u0027\");\r\n            }\r\n        }\r\n    }\r\n    return option;\r\n}",
          "path": "src/main/java/org/apache/commons/cli/OptionValidator.java",
          "functionStartLine": 60,
          "functionName": "validate",
          "functionAnnotation": "",
          "functionDoc": "Validates whether {@code opt} is a permissible Option shortOpt. The rules that specify if the {@code opt}\r\nis valid are:\r\n\r\n\u003cul\u003e\r\n\u003cli\u003ea single character {@code opt} that is either \u0027 \u0027(special case), \u0027?\u0027, \u0027@\u0027 or a letter\u003c/li\u003e\r\n\u003cli\u003ea multi character {@code opt} that only contains letters.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003e\r\nIn case {@code opt} is {@code null} no further validation is performed.\r\n\r\n@param option The option string to validate, may be null\r\n@throws IllegalArgumentException if the Option is not valid.\r\n",
          "diff": "@@ -1,17 +1,18 @@\n-static void validateOption(final String opt) throws IllegalArgumentException {\r\n-    if (opt \u003d\u003d null) {\r\n-        return;\r\n+static String validate(final String option) throws IllegalArgumentException {\r\n+    if (option \u003d\u003d null) {\r\n+        return option;\r\n     }\r\n-    if (opt.length() \u003d\u003d 1) {\r\n-        final char ch \u003d opt.charAt(0);\r\n+    if (option.length() \u003d\u003d 1) {\r\n+        final char ch \u003d option.charAt(0);\r\n         if (!isValidOpt(ch)) {\r\n             throw new IllegalArgumentException(\"Illegal option name \u0027\" + ch + \"\u0027\");\r\n         }\r\n     } else {\r\n-        for (final char ch : opt.toCharArray()) {\r\n+        for (final char ch : option.toCharArray()) {\r\n             if (!isValidChar(ch)) {\r\n-                throw new IllegalArgumentException(\"The option \u0027\" + opt + \"\u0027 contains an illegal \" + \"character : \u0027\" + ch + \"\u0027\");\r\n+                throw new IllegalArgumentException(\"The option \u0027\" + option + \"\u0027 contains an illegal \" + \"character : \u0027\" + ch + \"\u0027\");\r\n             }\r\n         }\r\n     }\r\n+    return option;\r\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        },
        {
          "type": "Ydocchange",
          "commitMessage": "Rename some internals.\n",
          "commitDate": "10/6/21 3:24 PM",
          "commitName": "f2aa3089560eb00cc973b0cb12ead7c3424536bb",
          "commitAuthor": "Gary Gregory",
          "commitDateOld": "10/4/21 12:32 AM",
          "commitNameOld": "9539506e87648d753c44b68b3dfbdd1938c09315",
          "commitAuthorOld": "Gary Gregory",
          "daysBetweenCommits": 2.62,
          "commitsBetweenForRepo": 28,
          "commitsBetweenForFile": 1,
          "actualSource": "static String validate(final String option) throws IllegalArgumentException {\r\n    if (option \u003d\u003d null) {\r\n        return option;\r\n    }\r\n    if (option.length() \u003d\u003d 1) {\r\n        final char ch \u003d option.charAt(0);\r\n        if (!isValidOpt(ch)) {\r\n            throw new IllegalArgumentException(\"Illegal option name \u0027\" + ch + \"\u0027\");\r\n        }\r\n    } else {\r\n        for (final char ch : option.toCharArray()) {\r\n            if (!isValidChar(ch)) {\r\n                throw new IllegalArgumentException(\"The option \u0027\" + option + \"\u0027 contains an illegal \" + \"character : \u0027\" + ch + \"\u0027\");\r\n            }\r\n        }\r\n    }\r\n    return option;\r\n}",
          "path": "src/main/java/org/apache/commons/cli/OptionValidator.java",
          "functionStartLine": 60,
          "functionName": "validate",
          "functionAnnotation": "",
          "functionDoc": "Validates whether {@code opt} is a permissible Option shortOpt. The rules that specify if the {@code opt}\r\nis valid are:\r\n\r\n\u003cul\u003e\r\n\u003cli\u003ea single character {@code opt} that is either \u0027 \u0027(special case), \u0027?\u0027, \u0027@\u0027 or a letter\u003c/li\u003e\r\n\u003cli\u003ea multi character {@code opt} that only contains letters.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003e\r\nIn case {@code opt} is {@code null} no further validation is performed.\r\n\r\n@param option The option string to validate, may be null\r\n@throws IllegalArgumentException if the Option is not valid.\r\n",
          "diff": "@@ -1,17 +1,18 @@\n-static void validateOption(final String opt) throws IllegalArgumentException {\r\n-    if (opt \u003d\u003d null) {\r\n-        return;\r\n+static String validate(final String option) throws IllegalArgumentException {\r\n+    if (option \u003d\u003d null) {\r\n+        return option;\r\n     }\r\n-    if (opt.length() \u003d\u003d 1) {\r\n-        final char ch \u003d opt.charAt(0);\r\n+    if (option.length() \u003d\u003d 1) {\r\n+        final char ch \u003d option.charAt(0);\r\n         if (!isValidOpt(ch)) {\r\n             throw new IllegalArgumentException(\"Illegal option name \u0027\" + ch + \"\u0027\");\r\n         }\r\n     } else {\r\n-        for (final char ch : opt.toCharArray()) {\r\n+        for (final char ch : option.toCharArray()) {\r\n             if (!isValidChar(ch)) {\r\n-                throw new IllegalArgumentException(\"The option \u0027\" + opt + \"\u0027 contains an illegal \" + \"character : \u0027\" + ch + \"\u0027\");\r\n+                throw new IllegalArgumentException(\"The option \u0027\" + option + \"\u0027 contains an illegal \" + \"character : \u0027\" + ch + \"\u0027\");\r\n             }\r\n         }\r\n     }\r\n+    return option;\r\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "Validates whether {@code opt} is a permissible Option shortOpt. The rules that specify if the {@code opt}\r\nis valid are:\r\n\r\n\u003cul\u003e\r\n\u003cli\u003ea single character {@code opt} that is either \u0027 \u0027(special case), \u0027?\u0027, \u0027@\u0027 or a letter\u003c/li\u003e\r\n\u003cli\u003ea multi character {@code opt} that only contains letters.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003e\r\nIn case {@code opt} is {@code null} no further validation is performed.\r\n\r\n@param opt The option string to validate, may be null\r\n@throws IllegalArgumentException if the Option is not valid.\r\n",
            "newValue": "Validates whether {@code opt} is a permissible Option shortOpt. The rules that specify if the {@code opt}\r\nis valid are:\r\n\r\n\u003cul\u003e\r\n\u003cli\u003ea single character {@code opt} that is either \u0027 \u0027(special case), \u0027?\u0027, \u0027@\u0027 or a letter\u003c/li\u003e\r\n\u003cli\u003ea multi character {@code opt} that only contains letters.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003e\r\nIn case {@code opt} is {@code null} no further validation is performed.\r\n\r\n@param option The option string to validate, may be null\r\n@throws IllegalArgumentException if the Option is not valid.\r\n"
          }
        }
      ]
    },
    "9539506e87648d753c44b68b3dfbdd1938c09315": {
      "type": "Ydocchange",
      "commitMessage": "Javadoc: Use @code instead of HTML tags.\n",
      "commitDate": "10/4/21 12:32 AM",
      "commitName": "9539506e87648d753c44b68b3dfbdd1938c09315",
      "commitAuthor": "Gary Gregory",
      "commitDateOld": "10/2/21 11:07 PM",
      "commitNameOld": "4e8b3a2584ddac7411e20cdaca75b160787d7fa9",
      "commitAuthorOld": "Gary Gregory",
      "daysBetweenCommits": 1.06,
      "commitsBetweenForRepo": 9,
      "commitsBetweenForFile": 1,
      "actualSource": "static void validateOption(final String opt) throws IllegalArgumentException {\r\n    if (opt \u003d\u003d null) {\r\n        return;\r\n    }\r\n    if (opt.length() \u003d\u003d 1) {\r\n        final char ch \u003d opt.charAt(0);\r\n        if (!isValidOpt(ch)) {\r\n            throw new IllegalArgumentException(\"Illegal option name \u0027\" + ch + \"\u0027\");\r\n        }\r\n    } else {\r\n        for (final char ch : opt.toCharArray()) {\r\n            if (!isValidChar(ch)) {\r\n                throw new IllegalArgumentException(\"The option \u0027\" + opt + \"\u0027 contains an illegal \" + \"character : \u0027\" + ch + \"\u0027\");\r\n            }\r\n        }\r\n    }\r\n}",
      "path": "src/main/java/org/apache/commons/cli/OptionValidator.java",
      "functionStartLine": 60,
      "functionName": "validateOption",
      "functionAnnotation": "",
      "functionDoc": "Validates whether {@code opt} is a permissible Option shortOpt. The rules that specify if the {@code opt}\r\nis valid are:\r\n\r\n\u003cul\u003e\r\n\u003cli\u003ea single character {@code opt} that is either \u0027 \u0027(special case), \u0027?\u0027, \u0027@\u0027 or a letter\u003c/li\u003e\r\n\u003cli\u003ea multi character {@code opt} that only contains letters.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003e\r\nIn case {@code opt} is {@code null} no further validation is performed.\r\n\r\n@param opt The option string to validate, may be null\r\n@throws IllegalArgumentException if the Option is not valid.\r\n",
      "diff": "",
      "extendedDetails": {
        "oldValue": "Validates whether \u003ccode\u003eopt\u003c/code\u003e is a permissible Option shortOpt. The rules that specify if the \u003ccode\u003eopt\u003c/code\u003e\r\nis valid are:\r\n\r\n\u003cul\u003e\r\n\u003cli\u003ea single character \u003ccode\u003eopt\u003c/code\u003e that is either \u0027 \u0027(special case), \u0027?\u0027, \u0027@\u0027 or a letter\u003c/li\u003e\r\n\u003cli\u003ea multi character \u003ccode\u003eopt\u003c/code\u003e that only contains letters.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003e\r\nIn case {@code opt} is {@code null} no further validation is performed.\r\n\r\n@param opt The option string to validate, may be null\r\n@throws IllegalArgumentException if the Option is not valid.\r\n",
        "newValue": "Validates whether {@code opt} is a permissible Option shortOpt. The rules that specify if the {@code opt}\r\nis valid are:\r\n\r\n\u003cul\u003e\r\n\u003cli\u003ea single character {@code opt} that is either \u0027 \u0027(special case), \u0027?\u0027, \u0027@\u0027 or a letter\u003c/li\u003e\r\n\u003cli\u003ea multi character {@code opt} that only contains letters.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003e\r\nIn case {@code opt} is {@code null} no further validation is performed.\r\n\r\n@param opt The option string to validate, may be null\r\n@throws IllegalArgumentException if the Option is not valid.\r\n"
      }
    },
    "bc0edc47dbf47cdaa3485cfb724982f377c900df": {
      "type": "Ymultichange(Ydocchange,Yformatchange)",
      "commitMessage": "Clean ups.\n\n- maven-checkstyle-plugin 3.1.1 -\u003e 3.1.2.\n- checkstyle -\u003e 9.0\n- Updates for 21st century.\n- No need to nest else clause.\n- Use simple array declarations.\n- Use valueOf instead of new for Numbers.\n- Consistent formatting.\n- Remove some inline comments //-----...\n",
      "commitDate": "10/2/21 11:04 PM",
      "commitName": "bc0edc47dbf47cdaa3485cfb724982f377c900df",
      "commitAuthor": "Gary Gregory",
      "subchanges": [
        {
          "type": "Ydocchange",
          "commitMessage": "Clean ups.\n\n- maven-checkstyle-plugin 3.1.1 -\u003e 3.1.2.\n- checkstyle -\u003e 9.0\n- Updates for 21st century.\n- No need to nest else clause.\n- Use simple array declarations.\n- Use valueOf instead of new for Numbers.\n- Consistent formatting.\n- Remove some inline comments //-----...\n",
          "commitDate": "10/2/21 11:04 PM",
          "commitName": "bc0edc47dbf47cdaa3485cfb724982f377c900df",
          "commitAuthor": "Gary Gregory",
          "commitDateOld": "12/28/20 6:44 PM",
          "commitNameOld": "c67275279176504a6f5fc556cfa247e1df02a580",
          "commitAuthorOld": "Arturo Bernal",
          "daysBetweenCommits": 278.18,
          "commitsBetweenForRepo": 38,
          "commitsBetweenForFile": 1,
          "actualSource": "static void validateOption(final String opt) throws IllegalArgumentException {\r\n    if (opt \u003d\u003d null) {\r\n        return;\r\n    }\r\n    if (opt.length() \u003d\u003d 1) {\r\n        final char ch \u003d opt.charAt(0);\r\n        if (!isValidOpt(ch)) {\r\n            throw new IllegalArgumentException(\"Illegal option name \u0027\" + ch + \"\u0027\");\r\n        }\r\n    } else {\r\n        for (final char ch : opt.toCharArray()) {\r\n            if (!isValidChar(ch)) {\r\n                throw new IllegalArgumentException(\"The option \u0027\" + opt + \"\u0027 contains an illegal \" + \"character : \u0027\" + ch + \"\u0027\");\r\n            }\r\n        }\r\n    }\r\n}",
          "path": "src/main/java/org/apache/commons/cli/OptionValidator.java",
          "functionStartLine": 40,
          "functionName": "validateOption",
          "functionAnnotation": "",
          "functionDoc": "Validates whether \u003ccode\u003eopt\u003c/code\u003e is a permissible Option shortOpt. The rules that specify if the \u003ccode\u003eopt\u003c/code\u003e\r\nis valid are:\r\n\r\n\u003cul\u003e\r\n\u003cli\u003ea single character \u003ccode\u003eopt\u003c/code\u003e that is either \u0027 \u0027(special case), \u0027?\u0027, \u0027@\u0027 or a letter\u003c/li\u003e\r\n\u003cli\u003ea multi character \u003ccode\u003eopt\u003c/code\u003e that only contains letters.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003e\r\nIn case {@code opt} is {@code null} no further validation is performed.\r\n\r\n@param opt The option string to validate, may be null\r\n@throws IllegalArgumentException if the Option is not valid.\r\n",
          "diff": "",
          "extendedDetails": {
            "oldValue": "Validates whether \u003ccode\u003eopt\u003c/code\u003e is a permissible Option\r\nshortOpt.  The rules that specify if the \u003ccode\u003eopt\u003c/code\u003e\r\nis valid are:\r\n\r\n\u003cul\u003e\r\n \u003cli\u003ea single character \u003ccode\u003eopt\u003c/code\u003e that is either\r\n \u0027 \u0027(special case), \u0027?\u0027, \u0027@\u0027 or a letter\u003c/li\u003e\r\n \u003cli\u003ea multi character \u003ccode\u003eopt\u003c/code\u003e that only contains\r\n letters.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003e\r\nIn case {@code opt} is {@code null} no further validation is performed.\r\n\r\n@param opt The option string to validate, may be null\r\n@throws IllegalArgumentException if the Option is not valid.\r\n",
            "newValue": "Validates whether \u003ccode\u003eopt\u003c/code\u003e is a permissible Option shortOpt. The rules that specify if the \u003ccode\u003eopt\u003c/code\u003e\r\nis valid are:\r\n\r\n\u003cul\u003e\r\n\u003cli\u003ea single character \u003ccode\u003eopt\u003c/code\u003e that is either \u0027 \u0027(special case), \u0027?\u0027, \u0027@\u0027 or a letter\u003c/li\u003e\r\n\u003cli\u003ea multi character \u003ccode\u003eopt\u003c/code\u003e that only contains letters.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003e\r\nIn case {@code opt} is {@code null} no further validation is performed.\r\n\r\n@param opt The option string to validate, may be null\r\n@throws IllegalArgumentException if the Option is not valid.\r\n"
          }
        },
        {
          "type": "Yformatchange",
          "commitMessage": "Clean ups.\n\n- maven-checkstyle-plugin 3.1.1 -\u003e 3.1.2.\n- checkstyle -\u003e 9.0\n- Updates for 21st century.\n- No need to nest else clause.\n- Use simple array declarations.\n- Use valueOf instead of new for Numbers.\n- Consistent formatting.\n- Remove some inline comments //-----...\n",
          "commitDate": "10/2/21 11:04 PM",
          "commitName": "bc0edc47dbf47cdaa3485cfb724982f377c900df",
          "commitAuthor": "Gary Gregory",
          "commitDateOld": "12/28/20 6:44 PM",
          "commitNameOld": "c67275279176504a6f5fc556cfa247e1df02a580",
          "commitAuthorOld": "Arturo Bernal",
          "daysBetweenCommits": 278.18,
          "commitsBetweenForRepo": 38,
          "commitsBetweenForFile": 1,
          "actualSource": "static void validateOption(final String opt) throws IllegalArgumentException {\r\n    if (opt \u003d\u003d null) {\r\n        return;\r\n    }\r\n    if (opt.length() \u003d\u003d 1) {\r\n        final char ch \u003d opt.charAt(0);\r\n        if (!isValidOpt(ch)) {\r\n            throw new IllegalArgumentException(\"Illegal option name \u0027\" + ch + \"\u0027\");\r\n        }\r\n    } else {\r\n        for (final char ch : opt.toCharArray()) {\r\n            if (!isValidChar(ch)) {\r\n                throw new IllegalArgumentException(\"The option \u0027\" + opt + \"\u0027 contains an illegal \" + \"character : \u0027\" + ch + \"\u0027\");\r\n            }\r\n        }\r\n    }\r\n}",
          "path": "src/main/java/org/apache/commons/cli/OptionValidator.java",
          "functionStartLine": 40,
          "functionName": "validateOption",
          "functionAnnotation": "",
          "functionDoc": "Validates whether \u003ccode\u003eopt\u003c/code\u003e is a permissible Option shortOpt. The rules that specify if the \u003ccode\u003eopt\u003c/code\u003e\r\nis valid are:\r\n\r\n\u003cul\u003e\r\n\u003cli\u003ea single character \u003ccode\u003eopt\u003c/code\u003e that is either \u0027 \u0027(special case), \u0027?\u0027, \u0027@\u0027 or a letter\u003c/li\u003e\r\n\u003cli\u003ea multi character \u003ccode\u003eopt\u003c/code\u003e that only contains letters.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003e\r\nIn case {@code opt} is {@code null} no further validation is performed.\r\n\r\n@param opt The option string to validate, may be null\r\n@throws IllegalArgumentException if the Option is not valid.\r\n",
          "diff": "",
          "extendedDetails": {}
        }
      ]
    },
    "c12260c05ebcd27558265395df79b8b049534fbd": {
      "type": "Yformatchange",
      "commitMessage": "Remove trailing white spaces on all lines.\n",
      "commitDate": "12/18/19 11:28 PM",
      "commitName": "c12260c05ebcd27558265395df79b8b049534fbd",
      "commitAuthor": "Gary Gregory",
      "commitDateOld": "6/15/17 1:23 PM",
      "commitNameOld": "9a845a2a30742b500e3b823b105434203427ea93",
      "commitAuthorOld": "Bruno P. Kinoshita",
      "daysBetweenCommits": 916.42,
      "commitsBetweenForRepo": 47,
      "commitsBetweenForFile": 1,
      "actualSource": "static void validateOption(final String opt) throws IllegalArgumentException {\r\n    if (opt \u003d\u003d null) {\r\n        return;\r\n    }\r\n    if (opt.length() \u003d\u003d 1) {\r\n        final char ch \u003d opt.charAt(0);\r\n        if (!isValidOpt(ch)) {\r\n            throw new IllegalArgumentException(\"Illegal option name \u0027\" + ch + \"\u0027\");\r\n        }\r\n    } else {\r\n        for (final char ch : opt.toCharArray()) {\r\n            if (!isValidChar(ch)) {\r\n                throw new IllegalArgumentException(\"The option \u0027\" + opt + \"\u0027 contains an illegal \" + \"character : \u0027\" + ch + \"\u0027\");\r\n            }\r\n        }\r\n    }\r\n}",
      "path": "src/main/java/org/apache/commons/cli/OptionValidator.java",
      "functionStartLine": 44,
      "functionName": "validateOption",
      "functionAnnotation": "",
      "functionDoc": "Validates whether \u003ccode\u003eopt\u003c/code\u003e is a permissible Option\r\nshortOpt.  The rules that specify if the \u003ccode\u003eopt\u003c/code\u003e\r\nis valid are:\r\n\r\n\u003cul\u003e\r\n \u003cli\u003ea single character \u003ccode\u003eopt\u003c/code\u003e that is either\r\n \u0027 \u0027(special case), \u0027?\u0027, \u0027@\u0027 or a letter\u003c/li\u003e\r\n \u003cli\u003ea multi character \u003ccode\u003eopt\u003c/code\u003e that only contains\r\n letters.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003e\r\nIn case {@code opt} is {@code null} no further validation is performed.\r\n\r\n@param opt The option string to validate, may be null\r\n@throws IllegalArgumentException if the Option is not valid.\r\n",
      "diff": "",
      "extendedDetails": {}
    },
    "5fb9e5009a8cdc7366b7a762f0e43dc47decf67c": {
      "type": "Yparametermetachange",
      "commitMessage": "Add final modifier to method parameters.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/cli/trunk@1797674 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "6/5/17 7:38 PM",
      "commitName": "5fb9e5009a8cdc7366b7a762f0e43dc47decf67c",
      "commitAuthor": "Gary D. Gregory",
      "commitDateOld": "6/5/17 7:37 PM",
      "commitNameOld": "357a8b0b8f1090db29e0d541a9419f570a78457b",
      "commitAuthorOld": "Gary D. Gregory",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "static void validateOption(final String opt) throws IllegalArgumentException {\r\n    if (opt \u003d\u003d null) {\r\n        return;\r\n    }\r\n    if (opt.length() \u003d\u003d 1) {\r\n        final char ch \u003d opt.charAt(0);\r\n        if (!isValidOpt(ch)) {\r\n            throw new IllegalArgumentException(\"Illegal option name \u0027\" + ch + \"\u0027\");\r\n        }\r\n    } else {\r\n        for (final char ch : opt.toCharArray()) {\r\n            if (!isValidChar(ch)) {\r\n                throw new IllegalArgumentException(\"The option \u0027\" + opt + \"\u0027 contains an illegal \" + \"character : \u0027\" + ch + \"\u0027\");\r\n            }\r\n        }\r\n    }\r\n}",
      "path": "src/main/java/org/apache/commons/cli/OptionValidator.java",
      "functionStartLine": 45,
      "functionName": "validateOption",
      "functionAnnotation": "",
      "functionDoc": "Validates whether \u003ccode\u003eopt\u003c/code\u003e is a permissible Option\r\nshortOpt.  The rules that specify if the \u003ccode\u003eopt\u003c/code\u003e\r\nis valid are:\r\n\r\n\u003cul\u003e\r\n \u003cli\u003ea single character \u003ccode\u003eopt\u003c/code\u003e that is either\r\n \u0027 \u0027(special case), \u0027?\u0027, \u0027@\u0027 or a letter\u003c/li\u003e\r\n \u003cli\u003ea multi character \u003ccode\u003eopt\u003c/code\u003e that only contains\r\n letters.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003e\r\nIn case {@code opt} is {@code null} no further validation is performed.\r\n\r\n@param opt The option string to validate, may be null\r\n@throws IllegalArgumentException if the Option is not valid.\r\n",
      "diff": "@@ -1,17 +1,17 @@\n-static void validateOption(String opt) throws IllegalArgumentException {\r\n+static void validateOption(final String opt) throws IllegalArgumentException {\r\n     if (opt \u003d\u003d null) {\r\n         return;\r\n     }\r\n     if (opt.length() \u003d\u003d 1) {\r\n         final char ch \u003d opt.charAt(0);\r\n         if (!isValidOpt(ch)) {\r\n             throw new IllegalArgumentException(\"Illegal option name \u0027\" + ch + \"\u0027\");\r\n         }\r\n     } else {\r\n         for (final char ch : opt.toCharArray()) {\r\n             if (!isValidChar(ch)) {\r\n                 throw new IllegalArgumentException(\"The option \u0027\" + opt + \"\u0027 contains an illegal \" + \"character : \u0027\" + ch + \"\u0027\");\r\n             }\r\n         }\r\n     }\r\n }\n\\ No newline at end of file\n",
      "extendedDetails": {
        "oldValue": "[opt-String]",
        "newValue": "[opt-String(modifiers-final)]"
      }
    },
    "357a8b0b8f1090db29e0d541a9419f570a78457b": {
      "type": "Ybodychange",
      "commitMessage": "Add final modifier to local variables.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/cli/trunk@1797673 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "6/5/17 7:37 PM",
      "commitName": "357a8b0b8f1090db29e0d541a9419f570a78457b",
      "commitAuthor": "Gary D. Gregory",
      "commitDateOld": "11/23/13 5:34 PM",
      "commitNameOld": "b1ffe271a5f8a6ff7b6bf714a9b2631e7dc6bbb0",
      "commitAuthorOld": "Thomas Neidhart",
      "daysBetweenCommits": 1290.04,
      "commitsBetweenForRepo": 92,
      "commitsBetweenForFile": 1,
      "actualSource": "static void validateOption(String opt) throws IllegalArgumentException {\r\n    if (opt \u003d\u003d null) {\r\n        return;\r\n    }\r\n    if (opt.length() \u003d\u003d 1) {\r\n        final char ch \u003d opt.charAt(0);\r\n        if (!isValidOpt(ch)) {\r\n            throw new IllegalArgumentException(\"Illegal option name \u0027\" + ch + \"\u0027\");\r\n        }\r\n    } else {\r\n        for (final char ch : opt.toCharArray()) {\r\n            if (!isValidChar(ch)) {\r\n                throw new IllegalArgumentException(\"The option \u0027\" + opt + \"\u0027 contains an illegal \" + \"character : \u0027\" + ch + \"\u0027\");\r\n            }\r\n        }\r\n    }\r\n}",
      "path": "src/main/java/org/apache/commons/cli/OptionValidator.java",
      "functionStartLine": 45,
      "functionName": "validateOption",
      "functionAnnotation": "",
      "functionDoc": "Validates whether \u003ccode\u003eopt\u003c/code\u003e is a permissible Option\r\nshortOpt.  The rules that specify if the \u003ccode\u003eopt\u003c/code\u003e\r\nis valid are:\r\n\r\n\u003cul\u003e\r\n \u003cli\u003ea single character \u003ccode\u003eopt\u003c/code\u003e that is either\r\n \u0027 \u0027(special case), \u0027?\u0027, \u0027@\u0027 or a letter\u003c/li\u003e\r\n \u003cli\u003ea multi character \u003ccode\u003eopt\u003c/code\u003e that only contains\r\n letters.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003e\r\nIn case {@code opt} is {@code null} no further validation is performed.\r\n\r\n@param opt The option string to validate, may be null\r\n@throws IllegalArgumentException if the Option is not valid.\r\n",
      "diff": "@@ -1,17 +1,17 @@\n static void validateOption(String opt) throws IllegalArgumentException {\r\n     if (opt \u003d\u003d null) {\r\n         return;\r\n     }\r\n     if (opt.length() \u003d\u003d 1) {\r\n-        char ch \u003d opt.charAt(0);\r\n+        final char ch \u003d opt.charAt(0);\r\n         if (!isValidOpt(ch)) {\r\n             throw new IllegalArgumentException(\"Illegal option name \u0027\" + ch + \"\u0027\");\r\n         }\r\n     } else {\r\n-        for (char ch : opt.toCharArray()) {\r\n+        for (final char ch : opt.toCharArray()) {\r\n             if (!isValidChar(ch)) {\r\n                 throw new IllegalArgumentException(\"The option \u0027\" + opt + \"\u0027 contains an illegal \" + \"character : \u0027\" + ch + \"\u0027\");\r\n             }\r\n         }\r\n     }\r\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "b1ffe271a5f8a6ff7b6bf714a9b2631e7dc6bbb0": {
      "type": "Ymultichange(Ybodychange,Ydocchange)",
      "commitMessage": "[CLI-241] Clarified javadoc of OptionValidator. Thanks to Beluga Behr.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/cli/trunk@1544819 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "11/23/13 5:34 PM",
      "commitName": "b1ffe271a5f8a6ff7b6bf714a9b2631e7dc6bbb0",
      "commitAuthor": "Thomas Neidhart",
      "subchanges": [
        {
          "type": "Ybodychange",
          "commitMessage": "[CLI-241] Clarified javadoc of OptionValidator. Thanks to Beluga Behr.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/cli/trunk@1544819 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "11/23/13 5:34 PM",
          "commitName": "b1ffe271a5f8a6ff7b6bf714a9b2631e7dc6bbb0",
          "commitAuthor": "Thomas Neidhart",
          "commitDateOld": "2/6/13 8:12 PM",
          "commitNameOld": "08a1eb7875d24830e37a969e9963ccc365586ca1",
          "commitAuthorOld": "Thomas Neidhart",
          "daysBetweenCommits": 289.89,
          "commitsBetweenForRepo": 29,
          "commitsBetweenForFile": 1,
          "actualSource": "static void validateOption(String opt) throws IllegalArgumentException {\r\n    if (opt \u003d\u003d null) {\r\n        return;\r\n    }\r\n    if (opt.length() \u003d\u003d 1) {\r\n        char ch \u003d opt.charAt(0);\r\n        if (!isValidOpt(ch)) {\r\n            throw new IllegalArgumentException(\"Illegal option name \u0027\" + ch + \"\u0027\");\r\n        }\r\n    } else {\r\n        for (char ch : opt.toCharArray()) {\r\n            if (!isValidChar(ch)) {\r\n                throw new IllegalArgumentException(\"The option \u0027\" + opt + \"\u0027 contains an illegal \" + \"character : \u0027\" + ch + \"\u0027\");\r\n            }\r\n        }\r\n    }\r\n}",
          "path": "src/main/java/org/apache/commons/cli/OptionValidator.java",
          "functionStartLine": 45,
          "functionName": "validateOption",
          "functionAnnotation": "",
          "functionDoc": "Validates whether \u003ccode\u003eopt\u003c/code\u003e is a permissible Option\r\nshortOpt.  The rules that specify if the \u003ccode\u003eopt\u003c/code\u003e\r\nis valid are:\r\n\r\n\u003cul\u003e\r\n \u003cli\u003ea single character \u003ccode\u003eopt\u003c/code\u003e that is either\r\n \u0027 \u0027(special case), \u0027?\u0027, \u0027@\u0027 or a letter\u003c/li\u003e\r\n \u003cli\u003ea multi character \u003ccode\u003eopt\u003c/code\u003e that only contains\r\n letters.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003e\r\nIn case {@code opt} is {@code null} no further validation is performed.\r\n\r\n@param opt The option string to validate, may be null\r\n@throws IllegalArgumentException if the Option is not valid.\r\n",
          "diff": "",
          "extendedDetails": {}
        },
        {
          "type": "Ydocchange",
          "commitMessage": "[CLI-241] Clarified javadoc of OptionValidator. Thanks to Beluga Behr.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/cli/trunk@1544819 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "11/23/13 5:34 PM",
          "commitName": "b1ffe271a5f8a6ff7b6bf714a9b2631e7dc6bbb0",
          "commitAuthor": "Thomas Neidhart",
          "commitDateOld": "2/6/13 8:12 PM",
          "commitNameOld": "08a1eb7875d24830e37a969e9963ccc365586ca1",
          "commitAuthorOld": "Thomas Neidhart",
          "daysBetweenCommits": 289.89,
          "commitsBetweenForRepo": 29,
          "commitsBetweenForFile": 1,
          "actualSource": "static void validateOption(String opt) throws IllegalArgumentException {\r\n    if (opt \u003d\u003d null) {\r\n        return;\r\n    }\r\n    if (opt.length() \u003d\u003d 1) {\r\n        char ch \u003d opt.charAt(0);\r\n        if (!isValidOpt(ch)) {\r\n            throw new IllegalArgumentException(\"Illegal option name \u0027\" + ch + \"\u0027\");\r\n        }\r\n    } else {\r\n        for (char ch : opt.toCharArray()) {\r\n            if (!isValidChar(ch)) {\r\n                throw new IllegalArgumentException(\"The option \u0027\" + opt + \"\u0027 contains an illegal \" + \"character : \u0027\" + ch + \"\u0027\");\r\n            }\r\n        }\r\n    }\r\n}",
          "path": "src/main/java/org/apache/commons/cli/OptionValidator.java",
          "functionStartLine": 45,
          "functionName": "validateOption",
          "functionAnnotation": "",
          "functionDoc": "Validates whether \u003ccode\u003eopt\u003c/code\u003e is a permissible Option\r\nshortOpt.  The rules that specify if the \u003ccode\u003eopt\u003c/code\u003e\r\nis valid are:\r\n\r\n\u003cul\u003e\r\n \u003cli\u003ea single character \u003ccode\u003eopt\u003c/code\u003e that is either\r\n \u0027 \u0027(special case), \u0027?\u0027, \u0027@\u0027 or a letter\u003c/li\u003e\r\n \u003cli\u003ea multi character \u003ccode\u003eopt\u003c/code\u003e that only contains\r\n letters.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003e\r\nIn case {@code opt} is {@code null} no further validation is performed.\r\n\r\n@param opt The option string to validate, may be null\r\n@throws IllegalArgumentException if the Option is not valid.\r\n",
          "diff": "",
          "extendedDetails": {
            "oldValue": "Validates whether \u003ccode\u003eopt\u003c/code\u003e is a permissible Option\r\nshortOpt.  The rules that specify if the \u003ccode\u003eopt\u003c/code\u003e\r\nis valid are:\r\n\r\n\u003cul\u003e\r\n \u003cli\u003e\u003ccode\u003eopt\u003c/code\u003e is not NULL\u003c/li\u003e\r\n \u003cli\u003ea single character \u003ccode\u003eopt\u003c/code\u003e that is either\r\n \u0027 \u0027(special case), \u0027?\u0027, \u0027@\u0027 or a letter\u003c/li\u003e\r\n \u003cli\u003ea multi character \u003ccode\u003eopt\u003c/code\u003e that only contains\r\n letters.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\r\n@param opt The option string to validate\r\n@throws IllegalArgumentException if the Option is not valid.\r\n",
            "newValue": "Validates whether \u003ccode\u003eopt\u003c/code\u003e is a permissible Option\r\nshortOpt.  The rules that specify if the \u003ccode\u003eopt\u003c/code\u003e\r\nis valid are:\r\n\r\n\u003cul\u003e\r\n \u003cli\u003ea single character \u003ccode\u003eopt\u003c/code\u003e that is either\r\n \u0027 \u0027(special case), \u0027?\u0027, \u0027@\u0027 or a letter\u003c/li\u003e\r\n \u003cli\u003ea multi character \u003ccode\u003eopt\u003c/code\u003e that only contains\r\n letters.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003e\r\nIn case {@code opt} is {@code null} no further validation is performed.\r\n\r\n@param opt The option string to validate, may be null\r\n@throws IllegalArgumentException if the Option is not valid.\r\n"
          }
        }
      ]
    },
    "f481ae3e7a6ec5462800da6349c50e9eaae35eaf": {
      "type": "Ydocchange",
      "commitMessage": "Fix javadoc typos.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/cli/trunk@1439408 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "1/28/13 4:02 PM",
      "commitName": "f481ae3e7a6ec5462800da6349c50e9eaae35eaf",
      "commitAuthor": "Thomas Neidhart",
      "commitDateOld": "1/28/13 12:00 AM",
      "commitNameOld": "29fefd2767b887e62cf17ca4412179b43f6ee4f6",
      "commitAuthorOld": "Thomas Neidhart",
      "daysBetweenCommits": 0.67,
      "commitsBetweenForRepo": 4,
      "commitsBetweenForFile": 1,
      "actualSource": "static void validateOption(String opt) throws IllegalArgumentException {\r\n    if (opt \u003d\u003d null) {\r\n        return;\r\n    }\r\n    if (opt.length() \u003d\u003d 1) {\r\n        char ch \u003d opt.charAt(0);\r\n        if (!isValidOpt(ch)) {\r\n            throw new IllegalArgumentException(\"Illegal option name \u0027\" + ch + \"\u0027\");\r\n        }\r\n    } else {\r\n        for (char ch : opt.toCharArray()) {\r\n            if (!isValidChar(ch)) {\r\n                throw new IllegalArgumentException(\"The option \u0027\" + opt + \"\u0027 contains an illegal \" + \"character : \u0027\" + ch + \"\u0027\");\r\n            }\r\n        }\r\n    }\r\n}",
      "path": "src/main/java/org/apache/commons/cli/OptionValidator.java",
      "functionStartLine": 52,
      "functionName": "validateOption",
      "functionAnnotation": "",
      "functionDoc": "Validates whether \u003ccode\u003eopt\u003c/code\u003e is a permissible Option\r\nshortOpt.  The rules that specify if the \u003ccode\u003eopt\u003c/code\u003e\r\nis valid are:\r\n\r\n\u003cul\u003e\r\n \u003cli\u003e\u003ccode\u003eopt\u003c/code\u003e is not NULL\u003c/li\u003e\r\n \u003cli\u003ea single character \u003ccode\u003eopt\u003c/code\u003e that is either\r\n \u0027 \u0027(special case), \u0027?\u0027, \u0027@\u0027 or a letter\u003c/li\u003e\r\n \u003cli\u003ea multi character \u003ccode\u003eopt\u003c/code\u003e that only contains\r\n letters.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\r\n@param opt The option string to validate\r\n@throws IllegalArgumentException if the Option is not valid.\r\n",
      "diff": "",
      "extendedDetails": {
        "oldValue": "Validates whether \u003ccode\u003eopt\u003c/code\u003e is a permissable Option\r\nshortOpt.  The rules that specify if the \u003ccode\u003eopt\u003c/code\u003e\r\nis valid are:\r\n\r\n\u003cul\u003e\r\n \u003cli\u003e\u003ccode\u003eopt\u003c/code\u003e is not NULL\u003c/li\u003e\r\n \u003cli\u003ea single character \u003ccode\u003eopt\u003c/code\u003e that is either\r\n \u0027 \u0027(special case), \u0027?\u0027, \u0027@\u0027 or a letter\u003c/li\u003e\r\n \u003cli\u003ea multi character \u003ccode\u003eopt\u003c/code\u003e that only contains\r\n letters.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\r\n@param opt The option string to validate\r\n@throws IllegalArgumentException if the Option is not valid.\r\n",
        "newValue": "Validates whether \u003ccode\u003eopt\u003c/code\u003e is a permissible Option\r\nshortOpt.  The rules that specify if the \u003ccode\u003eopt\u003c/code\u003e\r\nis valid are:\r\n\r\n\u003cul\u003e\r\n \u003cli\u003e\u003ccode\u003eopt\u003c/code\u003e is not NULL\u003c/li\u003e\r\n \u003cli\u003ea single character \u003ccode\u003eopt\u003c/code\u003e that is either\r\n \u0027 \u0027(special case), \u0027?\u0027, \u0027@\u0027 or a letter\u003c/li\u003e\r\n \u003cli\u003ea multi character \u003ccode\u003eopt\u003c/code\u003e that only contains\r\n letters.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\r\n@param opt The option string to validate\r\n@throws IllegalArgumentException if the Option is not valid.\r\n"
      }
    },
    "29fefd2767b887e62cf17ca4412179b43f6ee4f6": {
      "type": "Ybodychange",
      "commitMessage": "Fix checkstyle warnings, minor formatting, typos, complete javadoc for not yet implemented methods.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/cli/trunk@1439197 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "1/28/13 12:00 AM",
      "commitName": "29fefd2767b887e62cf17ca4412179b43f6ee4f6",
      "commitAuthor": "Thomas Neidhart",
      "commitDateOld": "4/12/11 9:57 PM",
      "commitNameOld": "a1b5d44432c057cf675f051bb20379937565f4ef",
      "commitAuthorOld": "Emmanuel Bourg",
      "daysBetweenCommits": 656.13,
      "commitsBetweenForRepo": 39,
      "commitsBetweenForFile": 1,
      "actualSource": "static void validateOption(String opt) throws IllegalArgumentException {\r\n    if (opt \u003d\u003d null) {\r\n        return;\r\n    }\r\n    if (opt.length() \u003d\u003d 1) {\r\n        char ch \u003d opt.charAt(0);\r\n        if (!isValidOpt(ch)) {\r\n            throw new IllegalArgumentException(\"Illegal option name \u0027\" + ch + \"\u0027\");\r\n        }\r\n    } else {\r\n        for (char ch : opt.toCharArray()) {\r\n            if (!isValidChar(ch)) {\r\n                throw new IllegalArgumentException(\"The option \u0027\" + opt + \"\u0027 contains an illegal \" + \"character : \u0027\" + ch + \"\u0027\");\r\n            }\r\n        }\r\n    }\r\n}",
      "path": "src/main/java/org/apache/commons/cli/OptionValidator.java",
      "functionStartLine": 52,
      "functionName": "validateOption",
      "functionAnnotation": "",
      "functionDoc": "Validates whether \u003ccode\u003eopt\u003c/code\u003e is a permissable Option\r\nshortOpt.  The rules that specify if the \u003ccode\u003eopt\u003c/code\u003e\r\nis valid are:\r\n\r\n\u003cul\u003e\r\n \u003cli\u003e\u003ccode\u003eopt\u003c/code\u003e is not NULL\u003c/li\u003e\r\n \u003cli\u003ea single character \u003ccode\u003eopt\u003c/code\u003e that is either\r\n \u0027 \u0027(special case), \u0027?\u0027, \u0027@\u0027 or a letter\u003c/li\u003e\r\n \u003cli\u003ea multi character \u003ccode\u003eopt\u003c/code\u003e that only contains\r\n letters.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\r\n@param opt The option string to validate\r\n@throws IllegalArgumentException if the Option is not valid.\r\n",
      "diff": "@@ -1,17 +1,17 @@\n static void validateOption(String opt) throws IllegalArgumentException {\r\n     if (opt \u003d\u003d null) {\r\n         return;\r\n     }\r\n     if (opt.length() \u003d\u003d 1) {\r\n         char ch \u003d opt.charAt(0);\r\n         if (!isValidOpt(ch)) {\r\n             throw new IllegalArgumentException(\"Illegal option name \u0027\" + ch + \"\u0027\");\r\n         }\r\n     } else {\r\n         for (char ch : opt.toCharArray()) {\r\n             if (!isValidChar(ch)) {\r\n-                throw new IllegalArgumentException(\"The option \u0027\" + opt + \"\u0027 contains an illegal character : \u0027\" + ch + \"\u0027\");\r\n+                throw new IllegalArgumentException(\"The option \u0027\" + opt + \"\u0027 contains an illegal \" + \"character : \u0027\" + ch + \"\u0027\");\r\n             }\r\n         }\r\n     }\r\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "a1b5d44432c057cf675f051bb20379937565f4ef": {
      "type": "Ybodychange",
      "commitMessage": "Moving to Java 5\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/cli/trunk@1091539 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "4/12/11 9:57 PM",
      "commitName": "a1b5d44432c057cf675f051bb20379937565f4ef",
      "commitAuthor": "Emmanuel Bourg",
      "commitDateOld": "6/16/10 6:48 PM",
      "commitNameOld": "d36b987c3257c01b42353cf7d2eb69ca325860aa",
      "commitAuthorOld": "Emmanuel Bourg",
      "daysBetweenCommits": 300.13,
      "commitsBetweenForRepo": 25,
      "commitsBetweenForFile": 1,
      "actualSource": "static void validateOption(String opt) throws IllegalArgumentException {\r\n    if (opt \u003d\u003d null) {\r\n        return;\r\n    }\r\n    if (opt.length() \u003d\u003d 1) {\r\n        char ch \u003d opt.charAt(0);\r\n        if (!isValidOpt(ch)) {\r\n            throw new IllegalArgumentException(\"Illegal option name \u0027\" + ch + \"\u0027\");\r\n        }\r\n    } else {\r\n        for (char ch : opt.toCharArray()) {\r\n            if (!isValidChar(ch)) {\r\n                throw new IllegalArgumentException(\"The option \u0027\" + opt + \"\u0027 contains an illegal character : \u0027\" + ch + \"\u0027\");\r\n            }\r\n        }\r\n    }\r\n}",
      "path": "src/main/java/org/apache/commons/cli/OptionValidator.java",
      "functionStartLine": 45,
      "functionName": "validateOption",
      "functionAnnotation": "",
      "functionDoc": "Validates whether \u003ccode\u003eopt\u003c/code\u003e is a permissable Option\r\nshortOpt.  The rules that specify if the \u003ccode\u003eopt\u003c/code\u003e\r\nis valid are:\r\n\r\n\u003cul\u003e\r\n \u003cli\u003e\u003ccode\u003eopt\u003c/code\u003e is not NULL\u003c/li\u003e\r\n \u003cli\u003ea single character \u003ccode\u003eopt\u003c/code\u003e that is either\r\n \u0027 \u0027(special case), \u0027?\u0027, \u0027@\u0027 or a letter\u003c/li\u003e\r\n \u003cli\u003ea multi character \u003ccode\u003eopt\u003c/code\u003e that only contains\r\n letters.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\r\n@param opt The option string to validate\r\n@throws IllegalArgumentException if the Option is not valid.\r\n",
      "diff": "@@ -1,18 +1,17 @@\n static void validateOption(String opt) throws IllegalArgumentException {\r\n     if (opt \u003d\u003d null) {\r\n         return;\r\n     }\r\n     if (opt.length() \u003d\u003d 1) {\r\n         char ch \u003d opt.charAt(0);\r\n         if (!isValidOpt(ch)) {\r\n             throw new IllegalArgumentException(\"Illegal option name \u0027\" + ch + \"\u0027\");\r\n         }\r\n     } else {\r\n-        char[] chars \u003d opt.toCharArray();\r\n-        for (int i \u003d 0; i \u003c chars.length; i++) {\r\n-            if (!isValidChar(chars[i])) {\r\n-                throw new IllegalArgumentException(\"The option \u0027\" + opt + \"\u0027 contains an illegal character : \u0027\" + chars[i] + \"\u0027\");\r\n+        for (char ch : opt.toCharArray()) {\r\n+            if (!isValidChar(ch)) {\r\n+                throw new IllegalArgumentException(\"The option \u0027\" + opt + \"\u0027 contains an illegal character : \u0027\" + ch + \"\u0027\");\r\n             }\r\n         }\r\n     }\r\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "d36b987c3257c01b42353cf7d2eb69ca325860aa": {
      "type": "Ybodychange",
      "commitMessage": "A space character is no longer accepted as a valid short option\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/cli/trunk@955277 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "6/16/10 6:48 PM",
      "commitName": "d36b987c3257c01b42353cf7d2eb69ca325860aa",
      "commitAuthor": "Emmanuel Bourg",
      "commitDateOld": "6/16/10 12:45 PM",
      "commitNameOld": "1596f3bbe57986361da4ac1a23634dd5b00d10df",
      "commitAuthorOld": "Emmanuel Bourg",
      "daysBetweenCommits": 0.25,
      "commitsBetweenForRepo": 4,
      "commitsBetweenForFile": 1,
      "actualSource": "static void validateOption(String opt) throws IllegalArgumentException {\r\n    if (opt \u003d\u003d null) {\r\n        return;\r\n    }\r\n    if (opt.length() \u003d\u003d 1) {\r\n        char ch \u003d opt.charAt(0);\r\n        if (!isValidOpt(ch)) {\r\n            throw new IllegalArgumentException(\"Illegal option name \u0027\" + ch + \"\u0027\");\r\n        }\r\n    } else {\r\n        char[] chars \u003d opt.toCharArray();\r\n        for (int i \u003d 0; i \u003c chars.length; i++) {\r\n            if (!isValidChar(chars[i])) {\r\n                throw new IllegalArgumentException(\"The option \u0027\" + opt + \"\u0027 contains an illegal character : \u0027\" + chars[i] + \"\u0027\");\r\n            }\r\n        }\r\n    }\r\n}",
      "path": "src/main/java/org/apache/commons/cli/OptionValidator.java",
      "functionStartLine": 45,
      "functionName": "validateOption",
      "functionAnnotation": "",
      "functionDoc": "Validates whether \u003ccode\u003eopt\u003c/code\u003e is a permissable Option\r\nshortOpt.  The rules that specify if the \u003ccode\u003eopt\u003c/code\u003e\r\nis valid are:\r\n\r\n\u003cul\u003e\r\n \u003cli\u003e\u003ccode\u003eopt\u003c/code\u003e is not NULL\u003c/li\u003e\r\n \u003cli\u003ea single character \u003ccode\u003eopt\u003c/code\u003e that is either\r\n \u0027 \u0027(special case), \u0027?\u0027, \u0027@\u0027 or a letter\u003c/li\u003e\r\n \u003cli\u003ea multi character \u003ccode\u003eopt\u003c/code\u003e that only contains\r\n letters.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\r\n@param opt The option string to validate\r\n@throws IllegalArgumentException if the Option is not valid.\r\n",
      "diff": "@@ -1,17 +1,18 @@\n static void validateOption(String opt) throws IllegalArgumentException {\r\n     if (opt \u003d\u003d null) {\r\n         return;\r\n-    } else if (opt.length() \u003d\u003d 1) {\r\n+    }\r\n+    if (opt.length() \u003d\u003d 1) {\r\n         char ch \u003d opt.charAt(0);\r\n         if (!isValidOpt(ch)) {\r\n-            throw new IllegalArgumentException(\"illegal option value \u0027\" + ch + \"\u0027\");\r\n+            throw new IllegalArgumentException(\"Illegal option name \u0027\" + ch + \"\u0027\");\r\n         }\r\n     } else {\r\n         char[] chars \u003d opt.toCharArray();\r\n         for (int i \u003d 0; i \u003c chars.length; i++) {\r\n             if (!isValidChar(chars[i])) {\r\n-                throw new IllegalArgumentException(\"opt contains illegal character value \u0027\" + chars[i] + \"\u0027\");\r\n+                throw new IllegalArgumentException(\"The option \u0027\" + opt + \"\u0027 contains an illegal character : \u0027\" + chars[i] + \"\u0027\");\r\n             }\r\n         }\r\n     }\r\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "1596f3bbe57986361da4ac1a23634dd5b00d10df": {
      "type": "Yfilerename",
      "commitMessage": "Switched to the Maven 2 default directory layout (part 3)\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/cli/trunk@955173 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "6/16/10 12:45 PM",
      "commitName": "1596f3bbe57986361da4ac1a23634dd5b00d10df",
      "commitAuthor": "Emmanuel Bourg",
      "commitDateOld": "6/16/10 12:42 PM",
      "commitNameOld": "406a35f1a128944b7c51dcbc4a1f04c3f8bec3e6",
      "commitAuthorOld": "Emmanuel Bourg",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "static void validateOption(String opt) throws IllegalArgumentException {\r\n    if (opt \u003d\u003d null) {\r\n        return;\r\n    } else if (opt.length() \u003d\u003d 1) {\r\n        char ch \u003d opt.charAt(0);\r\n        if (!isValidOpt(ch)) {\r\n            throw new IllegalArgumentException(\"illegal option value \u0027\" + ch + \"\u0027\");\r\n        }\r\n    } else {\r\n        char[] chars \u003d opt.toCharArray();\r\n        for (int i \u003d 0; i \u003c chars.length; i++) {\r\n            if (!isValidChar(chars[i])) {\r\n                throw new IllegalArgumentException(\"opt contains illegal character value \u0027\" + chars[i] + \"\u0027\");\r\n            }\r\n        }\r\n    }\r\n}",
      "path": "src/main/java/org/apache/commons/cli/OptionValidator.java",
      "functionStartLine": 45,
      "functionName": "validateOption",
      "functionAnnotation": "",
      "functionDoc": "Validates whether \u003ccode\u003eopt\u003c/code\u003e is a permissable Option\r\nshortOpt.  The rules that specify if the \u003ccode\u003eopt\u003c/code\u003e\r\nis valid are:\r\n\r\n\u003cul\u003e\r\n \u003cli\u003e\u003ccode\u003eopt\u003c/code\u003e is not NULL\u003c/li\u003e\r\n \u003cli\u003ea single character \u003ccode\u003eopt\u003c/code\u003e that is either\r\n \u0027 \u0027(special case), \u0027?\u0027, \u0027@\u0027 or a letter\u003c/li\u003e\r\n \u003cli\u003ea multi character \u003ccode\u003eopt\u003c/code\u003e that only contains\r\n letters.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\r\n@param opt The option string to validate\r\n@throws IllegalArgumentException if the Option is not valid.\r\n",
      "diff": "",
      "extendedDetails": {
        "oldPath": "src/java/org/apache/commons/cli/OptionValidator.java",
        "newPath": "src/main/java/org/apache/commons/cli/OptionValidator.java"
      }
    },
    "147df44faa4eb12ffd4a0063fc3284f784ea67c8": {
      "type": "Ydocchange",
      "commitMessage": "Style update\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/cli/branches/cli-1.x@680644 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "7/29/08 11:13 AM",
      "commitName": "147df44faa4eb12ffd4a0063fc3284f784ea67c8",
      "commitAuthor": "Emmanuel Bourg",
      "commitDateOld": "7/22/08 11:41 AM",
      "commitNameOld": "8f8639f6a2606f45c130d7d9b65248248fc431c1",
      "commitAuthorOld": "Emmanuel Bourg",
      "daysBetweenCommits": 6.98,
      "commitsBetweenForRepo": 16,
      "commitsBetweenForFile": 1,
      "actualSource": "static void validateOption(String opt) throws IllegalArgumentException {\r\n    if (opt \u003d\u003d null) {\r\n        return;\r\n    } else if (opt.length() \u003d\u003d 1) {\r\n        char ch \u003d opt.charAt(0);\r\n        if (!isValidOpt(ch)) {\r\n            throw new IllegalArgumentException(\"illegal option value \u0027\" + ch + \"\u0027\");\r\n        }\r\n    } else {\r\n        char[] chars \u003d opt.toCharArray();\r\n        for (int i \u003d 0; i \u003c chars.length; i++) {\r\n            if (!isValidChar(chars[i])) {\r\n                throw new IllegalArgumentException(\"opt contains illegal character value \u0027\" + chars[i] + \"\u0027\");\r\n            }\r\n        }\r\n    }\r\n}",
      "path": "src/java/org/apache/commons/cli/OptionValidator.java",
      "functionStartLine": 45,
      "functionName": "validateOption",
      "functionAnnotation": "",
      "functionDoc": "Validates whether \u003ccode\u003eopt\u003c/code\u003e is a permissable Option\r\nshortOpt.  The rules that specify if the \u003ccode\u003eopt\u003c/code\u003e\r\nis valid are:\r\n\r\n\u003cul\u003e\r\n \u003cli\u003e\u003ccode\u003eopt\u003c/code\u003e is not NULL\u003c/li\u003e\r\n \u003cli\u003ea single character \u003ccode\u003eopt\u003c/code\u003e that is either\r\n \u0027 \u0027(special case), \u0027?\u0027, \u0027@\u0027 or a letter\u003c/li\u003e\r\n \u003cli\u003ea multi character \u003ccode\u003eopt\u003c/code\u003e that only contains\r\n letters.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\r\n@param opt The option string to validate\r\n@throws IllegalArgumentException if the Option is not valid.\r\n",
      "diff": "",
      "extendedDetails": {
        "oldValue": "\u003cp\u003eValidates whether \u003ccode\u003eopt\u003c/code\u003e is a permissable Option\r\nshortOpt.  The rules that specify if the \u003ccode\u003eopt\u003c/code\u003e\r\nis valid are:\u003c/p\u003e\r\n\u003cul\u003e\r\n \u003cli\u003e\u003ccode\u003eopt\u003c/code\u003e is not NULL\u003c/li\u003e\r\n \u003cli\u003ea single character \u003ccode\u003eopt\u003c/code\u003e that is either\r\n \u0027 \u0027(special case), \u0027?\u0027, \u0027@\u0027 or a letter\u003c/li\u003e\r\n \u003cli\u003ea multi character \u003ccode\u003eopt\u003c/code\u003e that only contains\r\n letters.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\r\n@param opt The option string to validate\r\n@throws IllegalArgumentException if the Option is not valid.\r\n",
        "newValue": "Validates whether \u003ccode\u003eopt\u003c/code\u003e is a permissable Option\r\nshortOpt.  The rules that specify if the \u003ccode\u003eopt\u003c/code\u003e\r\nis valid are:\r\n\r\n\u003cul\u003e\r\n \u003cli\u003e\u003ccode\u003eopt\u003c/code\u003e is not NULL\u003c/li\u003e\r\n \u003cli\u003ea single character \u003ccode\u003eopt\u003c/code\u003e that is either\r\n \u0027 \u0027(special case), \u0027?\u0027, \u0027@\u0027 or a letter\u003c/li\u003e\r\n \u003cli\u003ea multi character \u003ccode\u003eopt\u003c/code\u003e that only contains\r\n letters.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\r\n@param opt The option string to validate\r\n@throws IllegalArgumentException if the Option is not valid.\r\n"
      }
    },
    "8f8639f6a2606f45c130d7d9b65248248fc431c1": {
      "type": "Yformatchange",
      "commitMessage": "Changed the visibility of OptionValidator to package private since all its methods are either private or package private\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/cli/branches/cli-1.x@678678 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "7/22/08 11:41 AM",
      "commitName": "8f8639f6a2606f45c130d7d9b65248248fc431c1",
      "commitAuthor": "Emmanuel Bourg",
      "commitDateOld": "7/22/08 10:55 AM",
      "commitNameOld": "8ee0ed532e4ddbf2746d802f9926b9e3d0116cc5",
      "commitAuthorOld": "Emmanuel Bourg",
      "daysBetweenCommits": 0.03,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "static void validateOption(String opt) throws IllegalArgumentException {\r\n    if (opt \u003d\u003d null) {\r\n        return;\r\n    } else if (opt.length() \u003d\u003d 1) {\r\n        char ch \u003d opt.charAt(0);\r\n        if (!isValidOpt(ch)) {\r\n            throw new IllegalArgumentException(\"illegal option value \u0027\" + ch + \"\u0027\");\r\n        }\r\n    } else {\r\n        char[] chars \u003d opt.toCharArray();\r\n        for (int i \u003d 0; i \u003c chars.length; i++) {\r\n            if (!isValidChar(chars[i])) {\r\n                throw new IllegalArgumentException(\"opt contains illegal character value \u0027\" + chars[i] + \"\u0027\");\r\n            }\r\n        }\r\n    }\r\n}",
      "path": "src/java/org/apache/commons/cli/OptionValidator.java",
      "functionStartLine": 43,
      "functionName": "validateOption",
      "functionAnnotation": "",
      "functionDoc": "\u003cp\u003eValidates whether \u003ccode\u003eopt\u003c/code\u003e is a permissable Option\r\nshortOpt.  The rules that specify if the \u003ccode\u003eopt\u003c/code\u003e\r\nis valid are:\u003c/p\u003e\r\n\u003cul\u003e\r\n \u003cli\u003e\u003ccode\u003eopt\u003c/code\u003e is not NULL\u003c/li\u003e\r\n \u003cli\u003ea single character \u003ccode\u003eopt\u003c/code\u003e that is either\r\n \u0027 \u0027(special case), \u0027?\u0027, \u0027@\u0027 or a letter\u003c/li\u003e\r\n \u003cli\u003ea multi character \u003ccode\u003eopt\u003c/code\u003e that only contains\r\n letters.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\r\n@param opt The option string to validate\r\n@throws IllegalArgumentException if the Option is not valid.\r\n",
      "diff": "",
      "extendedDetails": {}
    },
    "9b2b8038b52be022e42c8c7fdf26e236888f94c5": {
      "type": "Yformatchange",
      "commitMessage": "checkstyle fixes\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/cli/trunk@129857 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/10/02 1:47 AM",
      "commitName": "9b2b8038b52be022e42c8c7fdf26e236888f94c5",
      "commitAuthor": "John Keyes",
      "commitDateOld": "11/18/02 10:41 AM",
      "commitNameOld": "347bbeb8f98a49744501ac50850457ba8751d545",
      "commitAuthorOld": "John Keyes",
      "daysBetweenCommits": 21.63,
      "commitsBetweenForRepo": 9,
      "commitsBetweenForFile": 1,
      "actualSource": "static void validateOption(String opt) throws IllegalArgumentException {\r\n    if (opt \u003d\u003d null) {\r\n        return;\r\n    } else if (opt.length() \u003d\u003d 1) {\r\n        char ch \u003d opt.charAt(0);\r\n        if (!isValidOpt(ch)) {\r\n            throw new IllegalArgumentException(\"illegal option value \u0027\" + ch + \"\u0027\");\r\n        }\r\n    } else {\r\n        char[] chars \u003d opt.toCharArray();\r\n        for (int i \u003d 0; i \u003c chars.length; i++) {\r\n            if (!isValidChar(chars[i])) {\r\n                throw new IllegalArgumentException(\"opt contains illegal character value \u0027\" + chars[i] + \"\u0027\");\r\n            }\r\n        }\r\n    }\r\n}",
      "path": "src/java/org/apache/commons/cli/OptionValidator.java",
      "functionStartLine": 85,
      "functionName": "validateOption",
      "functionAnnotation": "",
      "functionDoc": "\u003cp\u003eValidates whether \u003ccode\u003eopt\u003c/code\u003e is a permissable Option\r\nshortOpt.  The rules that specify if the \u003ccode\u003eopt\u003c/code\u003e\r\nis valid are:\u003c/p\u003e\r\n\u003cul\u003e\r\n \u003cli\u003e\u003ccode\u003eopt\u003c/code\u003e is not NULL\u003c/li\u003e\r\n \u003cli\u003ea single character \u003ccode\u003eopt\u003c/code\u003e that is either\r\n \u0027 \u0027(special case), \u0027?\u0027, \u0027@\u0027 or a letter\u003c/li\u003e\r\n \u003cli\u003ea multi character \u003ccode\u003eopt\u003c/code\u003e that only contains\r\n letters.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\r\n@param opt The option string to validate\r\n@throws IllegalArgumentException if the Option is not valid.\r\n",
      "diff": "",
      "extendedDetails": {}
    },
    "347bbeb8f98a49744501ac50850457ba8751d545": {
      "type": "Ymultichange(Ymovefromfile,Ymodifierchange,Ybodychange)",
      "commitMessage": "refactored the option string handling, added property support for options with an argument value\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/cli/trunk@129846 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "11/18/02 10:41 AM",
      "commitName": "347bbeb8f98a49744501ac50850457ba8751d545",
      "commitAuthor": "John Keyes",
      "subchanges": [
        {
          "type": "Ymovefromfile",
          "commitMessage": "refactored the option string handling, added property support for options with an argument value\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/cli/trunk@129846 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "11/18/02 10:41 AM",
          "commitName": "347bbeb8f98a49744501ac50850457ba8751d545",
          "commitAuthor": "John Keyes",
          "commitDateOld": "11/16/02 12:25 AM",
          "commitNameOld": "3b8e3de5b7599a6165d48103f94f3a830361188d",
          "commitAuthorOld": "John Keyes",
          "daysBetweenCommits": 2.43,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "static void validateOption(String opt) throws IllegalArgumentException {\r\n    if (opt \u003d\u003d null) {\r\n        return;\r\n    } else if (opt.length() \u003d\u003d 1) {\r\n        char ch \u003d opt.charAt(0);\r\n        if (!isValidOpt(ch)) {\r\n            throw new IllegalArgumentException(\"illegal option value \u0027\" + ch + \"\u0027\");\r\n        }\r\n    } else {\r\n        char[] chars \u003d opt.toCharArray();\r\n        for (int i \u003d 0; i \u003c chars.length; i++) {\r\n            if (!isValidChar(chars[i])) {\r\n                throw new IllegalArgumentException(\"opt contains illegal character value \u0027\" + chars[i] + \"\u0027\");\r\n            }\r\n        }\r\n    }\r\n}",
          "path": "src/java/org/apache/commons/cli/OptionValidator.java",
          "functionStartLine": 85,
          "functionName": "validateOption",
          "functionAnnotation": "",
          "functionDoc": "\u003cp\u003eValidates whether \u003ccode\u003eopt\u003c/code\u003e is a permissable Option\r\nshortOpt.  The rules that specify if the \u003ccode\u003eopt\u003c/code\u003e\r\nis valid are:\u003c/p\u003e\r\n\u003cul\u003e\r\n \u003cli\u003e\u003ccode\u003eopt\u003c/code\u003e is not NULL\u003c/li\u003e\r\n \u003cli\u003ea single character \u003ccode\u003eopt\u003c/code\u003e that is either\r\n \u0027 \u0027(special case), \u0027?\u0027, \u0027@\u0027 or a letter\u003c/li\u003e\r\n \u003cli\u003ea multi character \u003ccode\u003eopt\u003c/code\u003e that only contains\r\n letters.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\r\n@param opt The option string to validate\r\n@throws IllegalArgumentException if the Option is not valid.\r\n",
          "diff": "@@ -1,18 +1,17 @@\n-private void validateOption(String opt) throws IllegalArgumentException {\r\n+static void validateOption(String opt) throws IllegalArgumentException {\r\n     if (opt \u003d\u003d null) {\r\n-        throw new IllegalArgumentException(\"opt is null\");\r\n+        return;\r\n     } else if (opt.length() \u003d\u003d 1) {\r\n         char ch \u003d opt.charAt(0);\r\n         if (!isValidOpt(ch)) {\r\n             throw new IllegalArgumentException(\"illegal option value \u0027\" + ch + \"\u0027\");\r\n         }\r\n-        id \u003d ch;\r\n     } else {\r\n         char[] chars \u003d opt.toCharArray();\r\n         for (int i \u003d 0; i \u003c chars.length; i++) {\r\n             if (!isValidChar(chars[i])) {\r\n                 throw new IllegalArgumentException(\"opt contains illegal character value \u0027\" + chars[i] + \"\u0027\");\r\n             }\r\n         }\r\n     }\r\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldPath": "src/java/org/apache/commons/cli/Option.java",
            "newPath": "src/java/org/apache/commons/cli/OptionValidator.java",
            "oldMethodName": "validateOption",
            "newMethodName": "validateOption"
          }
        },
        {
          "type": "Ymodifierchange",
          "commitMessage": "refactored the option string handling, added property support for options with an argument value\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/cli/trunk@129846 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "11/18/02 10:41 AM",
          "commitName": "347bbeb8f98a49744501ac50850457ba8751d545",
          "commitAuthor": "John Keyes",
          "commitDateOld": "11/16/02 12:25 AM",
          "commitNameOld": "3b8e3de5b7599a6165d48103f94f3a830361188d",
          "commitAuthorOld": "John Keyes",
          "daysBetweenCommits": 2.43,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "static void validateOption(String opt) throws IllegalArgumentException {\r\n    if (opt \u003d\u003d null) {\r\n        return;\r\n    } else if (opt.length() \u003d\u003d 1) {\r\n        char ch \u003d opt.charAt(0);\r\n        if (!isValidOpt(ch)) {\r\n            throw new IllegalArgumentException(\"illegal option value \u0027\" + ch + \"\u0027\");\r\n        }\r\n    } else {\r\n        char[] chars \u003d opt.toCharArray();\r\n        for (int i \u003d 0; i \u003c chars.length; i++) {\r\n            if (!isValidChar(chars[i])) {\r\n                throw new IllegalArgumentException(\"opt contains illegal character value \u0027\" + chars[i] + \"\u0027\");\r\n            }\r\n        }\r\n    }\r\n}",
          "path": "src/java/org/apache/commons/cli/OptionValidator.java",
          "functionStartLine": 85,
          "functionName": "validateOption",
          "functionAnnotation": "",
          "functionDoc": "\u003cp\u003eValidates whether \u003ccode\u003eopt\u003c/code\u003e is a permissable Option\r\nshortOpt.  The rules that specify if the \u003ccode\u003eopt\u003c/code\u003e\r\nis valid are:\u003c/p\u003e\r\n\u003cul\u003e\r\n \u003cli\u003e\u003ccode\u003eopt\u003c/code\u003e is not NULL\u003c/li\u003e\r\n \u003cli\u003ea single character \u003ccode\u003eopt\u003c/code\u003e that is either\r\n \u0027 \u0027(special case), \u0027?\u0027, \u0027@\u0027 or a letter\u003c/li\u003e\r\n \u003cli\u003ea multi character \u003ccode\u003eopt\u003c/code\u003e that only contains\r\n letters.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\r\n@param opt The option string to validate\r\n@throws IllegalArgumentException if the Option is not valid.\r\n",
          "diff": "@@ -1,18 +1,17 @@\n-private void validateOption(String opt) throws IllegalArgumentException {\r\n+static void validateOption(String opt) throws IllegalArgumentException {\r\n     if (opt \u003d\u003d null) {\r\n-        throw new IllegalArgumentException(\"opt is null\");\r\n+        return;\r\n     } else if (opt.length() \u003d\u003d 1) {\r\n         char ch \u003d opt.charAt(0);\r\n         if (!isValidOpt(ch)) {\r\n             throw new IllegalArgumentException(\"illegal option value \u0027\" + ch + \"\u0027\");\r\n         }\r\n-        id \u003d ch;\r\n     } else {\r\n         char[] chars \u003d opt.toCharArray();\r\n         for (int i \u003d 0; i \u003c chars.length; i++) {\r\n             if (!isValidChar(chars[i])) {\r\n                 throw new IllegalArgumentException(\"opt contains illegal character value \u0027\" + chars[i] + \"\u0027\");\r\n             }\r\n         }\r\n     }\r\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[private]",
            "newValue": "[static]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "refactored the option string handling, added property support for options with an argument value\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/cli/trunk@129846 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "11/18/02 10:41 AM",
          "commitName": "347bbeb8f98a49744501ac50850457ba8751d545",
          "commitAuthor": "John Keyes",
          "commitDateOld": "11/16/02 12:25 AM",
          "commitNameOld": "3b8e3de5b7599a6165d48103f94f3a830361188d",
          "commitAuthorOld": "John Keyes",
          "daysBetweenCommits": 2.43,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "static void validateOption(String opt) throws IllegalArgumentException {\r\n    if (opt \u003d\u003d null) {\r\n        return;\r\n    } else if (opt.length() \u003d\u003d 1) {\r\n        char ch \u003d opt.charAt(0);\r\n        if (!isValidOpt(ch)) {\r\n            throw new IllegalArgumentException(\"illegal option value \u0027\" + ch + \"\u0027\");\r\n        }\r\n    } else {\r\n        char[] chars \u003d opt.toCharArray();\r\n        for (int i \u003d 0; i \u003c chars.length; i++) {\r\n            if (!isValidChar(chars[i])) {\r\n                throw new IllegalArgumentException(\"opt contains illegal character value \u0027\" + chars[i] + \"\u0027\");\r\n            }\r\n        }\r\n    }\r\n}",
          "path": "src/java/org/apache/commons/cli/OptionValidator.java",
          "functionStartLine": 85,
          "functionName": "validateOption",
          "functionAnnotation": "",
          "functionDoc": "\u003cp\u003eValidates whether \u003ccode\u003eopt\u003c/code\u003e is a permissable Option\r\nshortOpt.  The rules that specify if the \u003ccode\u003eopt\u003c/code\u003e\r\nis valid are:\u003c/p\u003e\r\n\u003cul\u003e\r\n \u003cli\u003e\u003ccode\u003eopt\u003c/code\u003e is not NULL\u003c/li\u003e\r\n \u003cli\u003ea single character \u003ccode\u003eopt\u003c/code\u003e that is either\r\n \u0027 \u0027(special case), \u0027?\u0027, \u0027@\u0027 or a letter\u003c/li\u003e\r\n \u003cli\u003ea multi character \u003ccode\u003eopt\u003c/code\u003e that only contains\r\n letters.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\r\n@param opt The option string to validate\r\n@throws IllegalArgumentException if the Option is not valid.\r\n",
          "diff": "@@ -1,18 +1,17 @@\n-private void validateOption(String opt) throws IllegalArgumentException {\r\n+static void validateOption(String opt) throws IllegalArgumentException {\r\n     if (opt \u003d\u003d null) {\r\n-        throw new IllegalArgumentException(\"opt is null\");\r\n+        return;\r\n     } else if (opt.length() \u003d\u003d 1) {\r\n         char ch \u003d opt.charAt(0);\r\n         if (!isValidOpt(ch)) {\r\n             throw new IllegalArgumentException(\"illegal option value \u0027\" + ch + \"\u0027\");\r\n         }\r\n-        id \u003d ch;\r\n     } else {\r\n         char[] chars \u003d opt.toCharArray();\r\n         for (int i \u003d 0; i \u003c chars.length; i++) {\r\n             if (!isValidChar(chars[i])) {\r\n                 throw new IllegalArgumentException(\"opt contains illegal character value \u0027\" + chars[i] + \"\u0027\");\r\n             }\r\n         }\r\n     }\r\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        }
      ]
    },
    "04490af06faa8fd1be15da88172beb32218dd336": {
      "type": "Ymultichange(Ybodychange,Ydocchange)",
      "commitMessage": "bug #11457: implemented fix, javadoc added to Option\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/cli/trunk@129803 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "8/18/02 10:07 PM",
      "commitName": "04490af06faa8fd1be15da88172beb32218dd336",
      "commitAuthor": "John Keyes",
      "subchanges": [
        {
          "type": "Ybodychange",
          "commitMessage": "bug #11457: implemented fix, javadoc added to Option\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/cli/trunk@129803 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "8/18/02 10:07 PM",
          "commitName": "04490af06faa8fd1be15da88172beb32218dd336",
          "commitAuthor": "John Keyes",
          "commitDateOld": "8/16/02 1:05 AM",
          "commitNameOld": "4fbf5978d9473a2504a554cbe53dc29c49dd67b5",
          "commitAuthorOld": "John Keyes",
          "daysBetweenCommits": 2.88,
          "commitsBetweenForRepo": 2,
          "commitsBetweenForFile": 1,
          "actualSource": "private void validateOption(String opt) throws IllegalArgumentException {\r\n    if (opt \u003d\u003d null) {\r\n        throw new IllegalArgumentException(\"opt is null\");\r\n    } else if (opt.length() \u003d\u003d 1) {\r\n        char ch \u003d opt.charAt(0);\r\n        if (!isValidOpt(ch)) {\r\n            throw new IllegalArgumentException(\"illegal option value \u0027\" + ch + \"\u0027\");\r\n        }\r\n        id \u003d ch;\r\n    } else {\r\n        char[] chars \u003d opt.toCharArray();\r\n        for (int i \u003d 0; i \u003c chars.length; i++) {\r\n            if (!isValidChar(chars[i])) {\r\n                throw new IllegalArgumentException(\"opt contains illegal character value \u0027\" + chars[i] + \"\u0027\");\r\n            }\r\n        }\r\n    }\r\n}",
          "path": "src/java/org/apache/commons/cli/Option.java",
          "functionStartLine": 151,
          "functionName": "validateOption",
          "functionAnnotation": "",
          "functionDoc": "\u003cp\u003eValidates whether \u003ccode\u003eopt\u003c/code\u003e is a permissable Option\r\nshortOpt.  The rules that specify if the \u003ccode\u003eopt\u003c/code\u003e\r\nis valid are:\u003c/p\u003e\r\n\u003cul\u003e\r\n \u003cli\u003e\u003ccode\u003eopt\u003c/code\u003e is not NULL\u003c/li\u003e\r\n \u003cli\u003ea single character \u003ccode\u003eopt\u003c/code\u003e that is either\r\n \u0027 \u0027(special case), \u0027?\u0027, \u0027@\u0027 or a letter\u003c/li\u003e\r\n \u003cli\u003ea multi character \u003ccode\u003eopt\u003c/code\u003e that only contains\r\n letters.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\r\n@param opt The option string to validate\r\n@throws IllegalArgumentException if the Option is not valid.\r\n",
          "diff": "@@ -1,17 +1,18 @@\n private void validateOption(String opt) throws IllegalArgumentException {\r\n     if (opt \u003d\u003d null) {\r\n         throw new IllegalArgumentException(\"opt is null\");\r\n     } else if (opt.length() \u003d\u003d 1) {\r\n-        if (!isValidOpt(opt.charAt(0))) {\r\n-            throw new IllegalArgumentException(\"illegal option value \u0027\" + opt.charAt(0) + \"\u0027\");\r\n+        char ch \u003d opt.charAt(0);\r\n+        if (!isValidOpt(ch)) {\r\n+            throw new IllegalArgumentException(\"illegal option value \u0027\" + ch + \"\u0027\");\r\n         }\r\n-        id \u003d opt.charAt(0);\r\n+        id \u003d ch;\r\n     } else {\r\n         char[] chars \u003d opt.toCharArray();\r\n         for (int i \u003d 0; i \u003c chars.length; i++) {\r\n             if (!isValidChar(chars[i])) {\r\n                 throw new IllegalArgumentException(\"opt contains illegal character value \u0027\" + chars[i] + \"\u0027\");\r\n             }\r\n         }\r\n     }\r\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        },
        {
          "type": "Ydocchange",
          "commitMessage": "bug #11457: implemented fix, javadoc added to Option\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/cli/trunk@129803 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "8/18/02 10:07 PM",
          "commitName": "04490af06faa8fd1be15da88172beb32218dd336",
          "commitAuthor": "John Keyes",
          "commitDateOld": "8/16/02 1:05 AM",
          "commitNameOld": "4fbf5978d9473a2504a554cbe53dc29c49dd67b5",
          "commitAuthorOld": "John Keyes",
          "daysBetweenCommits": 2.88,
          "commitsBetweenForRepo": 2,
          "commitsBetweenForFile": 1,
          "actualSource": "private void validateOption(String opt) throws IllegalArgumentException {\r\n    if (opt \u003d\u003d null) {\r\n        throw new IllegalArgumentException(\"opt is null\");\r\n    } else if (opt.length() \u003d\u003d 1) {\r\n        char ch \u003d opt.charAt(0);\r\n        if (!isValidOpt(ch)) {\r\n            throw new IllegalArgumentException(\"illegal option value \u0027\" + ch + \"\u0027\");\r\n        }\r\n        id \u003d ch;\r\n    } else {\r\n        char[] chars \u003d opt.toCharArray();\r\n        for (int i \u003d 0; i \u003c chars.length; i++) {\r\n            if (!isValidChar(chars[i])) {\r\n                throw new IllegalArgumentException(\"opt contains illegal character value \u0027\" + chars[i] + \"\u0027\");\r\n            }\r\n        }\r\n    }\r\n}",
          "path": "src/java/org/apache/commons/cli/Option.java",
          "functionStartLine": 151,
          "functionName": "validateOption",
          "functionAnnotation": "",
          "functionDoc": "\u003cp\u003eValidates whether \u003ccode\u003eopt\u003c/code\u003e is a permissable Option\r\nshortOpt.  The rules that specify if the \u003ccode\u003eopt\u003c/code\u003e\r\nis valid are:\u003c/p\u003e\r\n\u003cul\u003e\r\n \u003cli\u003e\u003ccode\u003eopt\u003c/code\u003e is not NULL\u003c/li\u003e\r\n \u003cli\u003ea single character \u003ccode\u003eopt\u003c/code\u003e that is either\r\n \u0027 \u0027(special case), \u0027?\u0027, \u0027@\u0027 or a letter\u003c/li\u003e\r\n \u003cli\u003ea multi character \u003ccode\u003eopt\u003c/code\u003e that only contains\r\n letters.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\r\n@param opt The option string to validate\r\n@throws IllegalArgumentException if the Option is not valid.\r\n",
          "diff": "@@ -1,17 +1,18 @@\n private void validateOption(String opt) throws IllegalArgumentException {\r\n     if (opt \u003d\u003d null) {\r\n         throw new IllegalArgumentException(\"opt is null\");\r\n     } else if (opt.length() \u003d\u003d 1) {\r\n-        if (!isValidOpt(opt.charAt(0))) {\r\n-            throw new IllegalArgumentException(\"illegal option value \u0027\" + opt.charAt(0) + \"\u0027\");\r\n+        char ch \u003d opt.charAt(0);\r\n+        if (!isValidOpt(ch)) {\r\n+            throw new IllegalArgumentException(\"illegal option value \u0027\" + ch + \"\u0027\");\r\n         }\r\n-        id \u003d opt.charAt(0);\r\n+        id \u003d ch;\r\n     } else {\r\n         char[] chars \u003d opt.toCharArray();\r\n         for (int i \u003d 0; i \u003c chars.length; i++) {\r\n             if (!isValidChar(chars[i])) {\r\n                 throw new IllegalArgumentException(\"opt contains illegal character value \u0027\" + chars[i] + \"\u0027\");\r\n             }\r\n         }\r\n     }\r\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "",
            "newValue": "\u003cp\u003eValidates whether \u003ccode\u003eopt\u003c/code\u003e is a permissable Option\r\nshortOpt.  The rules that specify if the \u003ccode\u003eopt\u003c/code\u003e\r\nis valid are:\u003c/p\u003e\r\n\u003cul\u003e\r\n \u003cli\u003e\u003ccode\u003eopt\u003c/code\u003e is not NULL\u003c/li\u003e\r\n \u003cli\u003ea single character \u003ccode\u003eopt\u003c/code\u003e that is either\r\n \u0027 \u0027(special case), \u0027?\u0027, \u0027@\u0027 or a letter\u003c/li\u003e\r\n \u003cli\u003ea multi character \u003ccode\u003eopt\u003c/code\u003e that only contains\r\n letters.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\r\n@param opt The option string to validate\r\n@throws IllegalArgumentException if the Option is not valid.\r\n"
          }
        }
      ]
    },
    "16b91ad2b9f5f524b2b07ba4515c65479999f7ee": {
      "type": "Ybodychange",
      "commitMessage": "its now possible to specify the number of argument values an option can have, refactored parsers argument value handling, refactored argument handling in Option, added getOptions method on CommandLine to return an array of the processed Options\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/cli/trunk@129794 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "8/4/02 2:45 AM",
      "commitName": "16b91ad2b9f5f524b2b07ba4515c65479999f7ee",
      "commitAuthor": "John Keyes",
      "commitDateOld": "8/1/02 1:24 AM",
      "commitNameOld": "5aa47b707d299503caf33e9ee1b44903b3a13eee",
      "commitAuthorOld": "John Keyes",
      "daysBetweenCommits": 3.06,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "private void validateOption(String opt) throws IllegalArgumentException {\r\n    if (opt \u003d\u003d null) {\r\n        throw new IllegalArgumentException(\"opt is null\");\r\n    } else if (opt.length() \u003d\u003d 1) {\r\n        if (!isValidOpt(opt.charAt(0))) {\r\n            throw new IllegalArgumentException(\"illegal option value \u0027\" + opt.charAt(0) + \"\u0027\");\r\n        }\r\n        id \u003d opt.charAt(0);\r\n    } else {\r\n        char[] chars \u003d opt.toCharArray();\r\n        for (int i \u003d 0; i \u003c chars.length; i++) {\r\n            if (!isValidChar(chars[i])) {\r\n                throw new IllegalArgumentException(\"opt contains illegal character value \u0027\" + chars[i] + \"\u0027\");\r\n            }\r\n        }\r\n    }\r\n}",
      "path": "src/java/org/apache/commons/cli/Option.java",
      "functionStartLine": 128,
      "functionName": "validateOption",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,16 +1,17 @@\n private void validateOption(String opt) throws IllegalArgumentException {\r\n     if (opt \u003d\u003d null) {\r\n         throw new IllegalArgumentException(\"opt is null\");\r\n     } else if (opt.length() \u003d\u003d 1) {\r\n         if (!isValidOpt(opt.charAt(0))) {\r\n             throw new IllegalArgumentException(\"illegal option value \u0027\" + opt.charAt(0) + \"\u0027\");\r\n         }\r\n+        id \u003d opt.charAt(0);\r\n     } else {\r\n         char[] chars \u003d opt.toCharArray();\r\n         for (int i \u003d 0; i \u003c chars.length; i++) {\r\n             if (!isValidChar(chars[i])) {\r\n                 throw new IllegalArgumentException(\"opt contains illegal character value \u0027\" + chars[i] + \"\u0027\");\r\n             }\r\n         }\r\n     }\r\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "7f90b98c1f77a0c1af9c774a12e8e257d7a0d1ac": {
      "type": "Yintroduced",
      "commitMessage": "OptionBuilder first cut\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/cli/trunk@129791 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "7/30/02 1:12 AM",
      "commitName": "7f90b98c1f77a0c1af9c774a12e8e257d7a0d1ac",
      "commitAuthor": "John Keyes",
      "diff": "@@ -0,0 +1,16 @@\n+private void validateOption(String opt) throws IllegalArgumentException {\r\n+    if (opt \u003d\u003d null) {\r\n+        throw new IllegalArgumentException(\"opt is null\");\r\n+    } else if (opt.length() \u003d\u003d 1) {\r\n+        if (!isValidOpt(opt.charAt(0))) {\r\n+            throw new IllegalArgumentException(\"illegal option value \u0027\" + opt.charAt(0) + \"\u0027\");\r\n+        }\r\n+    } else {\r\n+        char[] chars \u003d opt.toCharArray();\r\n+        for (int i \u003d 0; i \u003c chars.length; i++) {\r\n+            if (!isValidChar(chars[i])) {\r\n+                throw new IllegalArgumentException(\"opt contains illegal character value \u0027\" + chars[i] + \"\u0027\");\r\n+            }\r\n+        }\r\n+    }\r\n+}\n\\ No newline at end of file\n",
      "actualSource": "private void validateOption(String opt) throws IllegalArgumentException {\r\n    if (opt \u003d\u003d null) {\r\n        throw new IllegalArgumentException(\"opt is null\");\r\n    } else if (opt.length() \u003d\u003d 1) {\r\n        if (!isValidOpt(opt.charAt(0))) {\r\n            throw new IllegalArgumentException(\"illegal option value \u0027\" + opt.charAt(0) + \"\u0027\");\r\n        }\r\n    } else {\r\n        char[] chars \u003d opt.toCharArray();\r\n        for (int i \u003d 0; i \u003c chars.length; i++) {\r\n            if (!isValidChar(chars[i])) {\r\n                throw new IllegalArgumentException(\"opt contains illegal character value \u0027\" + chars[i] + \"\u0027\");\r\n            }\r\n        }\r\n    }\r\n}",
      "path": "src/java/org/apache/commons/cli/Option.java",
      "functionStartLine": 119,
      "functionName": "validateOption",
      "functionAnnotation": "",
      "functionDoc": ""
    }
  }
}