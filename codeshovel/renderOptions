{
  "origin": "codeshovel",
  "repositoryName": "commons-cli",
  "repositoryPath": "D:/_SELEN/_2022-2023/CS588/GitHub_Dataset/commons-cli/commons-cli/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "HelpFormatter.java",
  "functionName": "renderOptions",
  "functionId": "renderOptions___sb-StringBuffer(modifiers-final)__width-int(modifiers-final)__options-Options(modifiers-final)__leftPad-int(modifiers-final)__descPad-int(modifiers-final)",
  "sourceFilePath": "src/main/java/org/apache/commons/cli/HelpFormatter.java",
  "functionAnnotation": "",
  "functionDoc": "Render the specified Options and return the rendered Options in a StringBuffer.\r\n\r\n@param sb The StringBuffer to place the rendered Options into.\r\n@param width The number of characters to display per line\r\n@param options The command line Options\r\n@param leftPad the number of characters of padding to be prefixed to each line\r\n@param descPad the number of characters of padding to be prefixed to each description line\r\n@return the StringBuffer with the rendered Options contents.\r\n",
  "functionStartLine": 669,
  "functionEndLine": 740,
  "numCommitsSeen": 92,
  "timeTaken": 383,
  "changeHistory": [
    "6647dccc95f8ae3f3b5547b7d2cb2cbef6703e91",
    "bc0edc47dbf47cdaa3485cfb724982f377c900df",
    "af54c01799ebf3ed613bfd9cc9e4934676b245fd",
    "02aba6c78d451376053478e4d627ba6f2fd6ba21",
    "c12260c05ebcd27558265395df79b8b049534fbd",
    "5fb9e5009a8cdc7366b7a762f0e43dc47decf67c",
    "357a8b0b8f1090db29e0d541a9419f570a78457b",
    "6b87d290954c4594fc69a3a0b85fff12490cfde5",
    "3936da9d3fe37bcd20dd37216d82608e5917be07",
    "10eeaf63d01a0c31c5af87438d83be7096cd343e",
    "491340dc5e6c8d4233cc575571e15dd357f20b70",
    "a955324468d45eb845e05107d5b0013285c3bc0a",
    "a1b5d44432c057cf675f051bb20379937565f4ef",
    "3d57a495145916d1cd183cced771935c06da786a",
    "4d2c8a22d1e1831858029b8ef225a07f4445a221",
    "d8df5107a76b1a7fa579ec91f5482be901d18435",
    "1596f3bbe57986361da4ac1a23634dd5b00d10df",
    "180a16def56be368c2c33a56c1778b8d7ce170c7",
    "147df44faa4eb12ffd4a0063fc3284f784ea67c8",
    "df8f8e160c5fc9b955c627c4b65c7ba67088b7ac",
    "8f95e4a724350f9f80429c2af1c3ac9bb2b2c2db",
    "9b2b8038b52be022e42c8c7fdf26e236888f94c5",
    "6bcbf153c4497c38c4c36c3a04c1eac1f4cc153b",
    "4c34483ea18c6a4f259f19a6d18637bb1fbae1e8",
    "a0212835ed42e03a01c2c930a695e478a0884f68",
    "62670f565aa434b6cb614c1054a8ea5bc3715f25",
    "821b85fe781d57c9bd5851d3c95f3497ea397c17",
    "4dcbfa673771c8fcd2477cf7dd122ef8fe8967b7",
    "4cca25d72b216bfc8f2e75e4a99afb608ceb6df8",
    "aae50c585ec3ac33c6a9af792e80378904a73195"
  ],
  "changeHistoryShort": {
    "6647dccc95f8ae3f3b5547b7d2cb2cbef6703e91": "Ybodychange",
    "bc0edc47dbf47cdaa3485cfb724982f377c900df": "Ymultichange(Ydocchange,Yformatchange)",
    "af54c01799ebf3ed613bfd9cc9e4934676b245fd": "Ybodychange",
    "02aba6c78d451376053478e4d627ba6f2fd6ba21": "Ybodychange",
    "c12260c05ebcd27558265395df79b8b049534fbd": "Yformatchange",
    "5fb9e5009a8cdc7366b7a762f0e43dc47decf67c": "Yparametermetachange",
    "357a8b0b8f1090db29e0d541a9419f570a78457b": "Ybodychange",
    "6b87d290954c4594fc69a3a0b85fff12490cfde5": "Ybodychange",
    "3936da9d3fe37bcd20dd37216d82608e5917be07": "Ybodychange",
    "10eeaf63d01a0c31c5af87438d83be7096cd343e": "Ybodychange",
    "491340dc5e6c8d4233cc575571e15dd357f20b70": "Yformatchange",
    "a955324468d45eb845e05107d5b0013285c3bc0a": "Ybodychange",
    "a1b5d44432c057cf675f051bb20379937565f4ef": "Ybodychange",
    "3d57a495145916d1cd183cced771935c06da786a": "Ybodychange",
    "4d2c8a22d1e1831858029b8ef225a07f4445a221": "Ybodychange",
    "d8df5107a76b1a7fa579ec91f5482be901d18435": "Ybodychange",
    "1596f3bbe57986361da4ac1a23634dd5b00d10df": "Yfilerename",
    "180a16def56be368c2c33a56c1778b8d7ce170c7": "Ybodychange",
    "147df44faa4eb12ffd4a0063fc3284f784ea67c8": "Ymultichange(Ybodychange,Ydocchange)",
    "df8f8e160c5fc9b955c627c4b65c7ba67088b7ac": "Ybodychange",
    "8f95e4a724350f9f80429c2af1c3ac9bb2b2c2db": "Ybodychange",
    "9b2b8038b52be022e42c8c7fdf26e236888f94c5": "Ymultichange(Ybodychange,Ydocchange)",
    "6bcbf153c4497c38c4c36c3a04c1eac1f4cc153b": "Ybodychange",
    "4c34483ea18c6a4f259f19a6d18637bb1fbae1e8": "Ybodychange",
    "a0212835ed42e03a01c2c930a695e478a0884f68": "Ybodychange",
    "62670f565aa434b6cb614c1054a8ea5bc3715f25": "Ybodychange",
    "821b85fe781d57c9bd5851d3c95f3497ea397c17": "Ybodychange",
    "4dcbfa673771c8fcd2477cf7dd122ef8fe8967b7": "Ybodychange",
    "4cca25d72b216bfc8f2e75e4a99afb608ceb6df8": "Ybodychange",
    "aae50c585ec3ac33c6a9af792e80378904a73195": "Yintroduced"
  },
  "changeHistoryDetails": {
    "6647dccc95f8ae3f3b5547b7d2cb2cbef6703e91": {
      "type": "Ybodychange",
      "commitMessage": "The maximum can be calculated using a Math.max() instead of doing it manually. (#111)\n\n",
      "commitDate": "2/3/23 5:22 PM",
      "commitName": "6647dccc95f8ae3f3b5547b7d2cb2cbef6703e91",
      "commitAuthor": "Arturo Bernal",
      "commitDateOld": "10/22/21 5:29 PM",
      "commitNameOld": "897593c0f09ba8b87b3dd13dce00b0d5fbdf2c3f",
      "commitAuthorOld": "Gary Gregory",
      "daysBetweenCommits": 468.99,
      "commitsBetweenForRepo": 171,
      "commitsBetweenForFile": 1,
      "actualSource": "protected StringBuffer renderOptions(final StringBuffer sb, final int width, final Options options, final int leftPad, final int descPad) {\r\n    final String lpad \u003d createPadding(leftPad);\r\n    final String dpad \u003d createPadding(descPad);\r\n    int max \u003d 0;\r\n    final List\u003cStringBuffer\u003e prefixList \u003d new ArrayList\u003c\u003e();\r\n    final List\u003cOption\u003e optList \u003d options.helpOptions();\r\n    if (getOptionComparator() !\u003d null) {\r\n        Collections.sort(optList, getOptionComparator());\r\n    }\r\n    for (final Option option : optList) {\r\n        final StringBuffer optBuf \u003d new StringBuffer();\r\n        if (option.getOpt() \u003d\u003d null) {\r\n            optBuf.append(lpad).append(\"   \").append(getLongOptPrefix()).append(option.getLongOpt());\r\n        } else {\r\n            optBuf.append(lpad).append(getOptPrefix()).append(option.getOpt());\r\n            if (option.hasLongOpt()) {\r\n                optBuf.append(\u0027,\u0027).append(getLongOptPrefix()).append(option.getLongOpt());\r\n            }\r\n        }\r\n        if (option.hasArg()) {\r\n            final String argName \u003d option.getArgName();\r\n            if (argName !\u003d null \u0026\u0026 argName.isEmpty()) {\r\n                optBuf.append(\u0027 \u0027);\r\n            } else {\r\n                optBuf.append(option.hasLongOpt() ? longOptSeparator : \" \");\r\n                optBuf.append(\"\u003c\").append(argName !\u003d null ? option.getArgName() : getArgName()).append(\"\u003e\");\r\n            }\r\n        }\r\n        prefixList.add(optBuf);\r\n        max \u003d Math.max(optBuf.length(), max);\r\n    }\r\n    int x \u003d 0;\r\n    for (final Iterator\u003cOption\u003e it \u003d optList.iterator(); it.hasNext(); ) {\r\n        final Option option \u003d it.next();\r\n        final StringBuilder optBuf \u003d new StringBuilder(prefixList.get(x++).toString());\r\n        if (optBuf.length() \u003c max) {\r\n            optBuf.append(createPadding(max - optBuf.length()));\r\n        }\r\n        optBuf.append(dpad);\r\n        final int nextLineTabStop \u003d max + descPad;\r\n        if (option.getDescription() !\u003d null) {\r\n            optBuf.append(option.getDescription());\r\n        }\r\n        renderWrappedText(sb, width, nextLineTabStop, optBuf.toString());\r\n        if (it.hasNext()) {\r\n            sb.append(getNewLine());\r\n        }\r\n    }\r\n    return sb;\r\n}",
      "path": "src/main/java/org/apache/commons/cli/HelpFormatter.java",
      "functionStartLine": 669,
      "functionName": "renderOptions",
      "functionAnnotation": "",
      "functionDoc": "Render the specified Options and return the rendered Options in a StringBuffer.\r\n\r\n@param sb The StringBuffer to place the rendered Options into.\r\n@param width The number of characters to display per line\r\n@param options The command line Options\r\n@param leftPad the number of characters of padding to be prefixed to each line\r\n@param descPad the number of characters of padding to be prefixed to each description line\r\n@return the StringBuffer with the rendered Options contents.\r\n",
      "diff": "@@ -1,50 +1,50 @@\n protected StringBuffer renderOptions(final StringBuffer sb, final int width, final Options options, final int leftPad, final int descPad) {\r\n     final String lpad \u003d createPadding(leftPad);\r\n     final String dpad \u003d createPadding(descPad);\r\n     int max \u003d 0;\r\n     final List\u003cStringBuffer\u003e prefixList \u003d new ArrayList\u003c\u003e();\r\n     final List\u003cOption\u003e optList \u003d options.helpOptions();\r\n     if (getOptionComparator() !\u003d null) {\r\n         Collections.sort(optList, getOptionComparator());\r\n     }\r\n     for (final Option option : optList) {\r\n         final StringBuffer optBuf \u003d new StringBuffer();\r\n         if (option.getOpt() \u003d\u003d null) {\r\n             optBuf.append(lpad).append(\"   \").append(getLongOptPrefix()).append(option.getLongOpt());\r\n         } else {\r\n             optBuf.append(lpad).append(getOptPrefix()).append(option.getOpt());\r\n             if (option.hasLongOpt()) {\r\n                 optBuf.append(\u0027,\u0027).append(getLongOptPrefix()).append(option.getLongOpt());\r\n             }\r\n         }\r\n         if (option.hasArg()) {\r\n             final String argName \u003d option.getArgName();\r\n             if (argName !\u003d null \u0026\u0026 argName.isEmpty()) {\r\n                 optBuf.append(\u0027 \u0027);\r\n             } else {\r\n                 optBuf.append(option.hasLongOpt() ? longOptSeparator : \" \");\r\n                 optBuf.append(\"\u003c\").append(argName !\u003d null ? option.getArgName() : getArgName()).append(\"\u003e\");\r\n             }\r\n         }\r\n         prefixList.add(optBuf);\r\n-        max \u003d optBuf.length() \u003e max ? optBuf.length() : max;\r\n+        max \u003d Math.max(optBuf.length(), max);\r\n     }\r\n     int x \u003d 0;\r\n     for (final Iterator\u003cOption\u003e it \u003d optList.iterator(); it.hasNext(); ) {\r\n         final Option option \u003d it.next();\r\n         final StringBuilder optBuf \u003d new StringBuilder(prefixList.get(x++).toString());\r\n         if (optBuf.length() \u003c max) {\r\n             optBuf.append(createPadding(max - optBuf.length()));\r\n         }\r\n         optBuf.append(dpad);\r\n         final int nextLineTabStop \u003d max + descPad;\r\n         if (option.getDescription() !\u003d null) {\r\n             optBuf.append(option.getDescription());\r\n         }\r\n         renderWrappedText(sb, width, nextLineTabStop, optBuf.toString());\r\n         if (it.hasNext()) {\r\n             sb.append(getNewLine());\r\n         }\r\n     }\r\n     return sb;\r\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "bc0edc47dbf47cdaa3485cfb724982f377c900df": {
      "type": "Ymultichange(Ydocchange,Yformatchange)",
      "commitMessage": "Clean ups.\n\n- maven-checkstyle-plugin 3.1.1 -\u003e 3.1.2.\n- checkstyle -\u003e 9.0\n- Updates for 21st century.\n- No need to nest else clause.\n- Use simple array declarations.\n- Use valueOf instead of new for Numbers.\n- Consistent formatting.\n- Remove some inline comments //-----...\n",
      "commitDate": "10/2/21 11:04 PM",
      "commitName": "bc0edc47dbf47cdaa3485cfb724982f377c900df",
      "commitAuthor": "Gary Gregory",
      "subchanges": [
        {
          "type": "Ydocchange",
          "commitMessage": "Clean ups.\n\n- maven-checkstyle-plugin 3.1.1 -\u003e 3.1.2.\n- checkstyle -\u003e 9.0\n- Updates for 21st century.\n- No need to nest else clause.\n- Use simple array declarations.\n- Use valueOf instead of new for Numbers.\n- Consistent formatting.\n- Remove some inline comments //-----...\n",
          "commitDate": "10/2/21 11:04 PM",
          "commitName": "bc0edc47dbf47cdaa3485cfb724982f377c900df",
          "commitAuthor": "Gary Gregory",
          "commitDateOld": "2/8/21 10:11 PM",
          "commitNameOld": "66cc7b4cb8b0f39edfe0ee37eead4ace04a7be4e",
          "commitAuthorOld": "Gary Gregory",
          "daysBetweenCommits": 236.04,
          "commitsBetweenForRepo": 22,
          "commitsBetweenForFile": 1,
          "actualSource": "protected StringBuffer renderOptions(final StringBuffer sb, final int width, final Options options, final int leftPad, final int descPad) {\r\n    final String lpad \u003d createPadding(leftPad);\r\n    final String dpad \u003d createPadding(descPad);\r\n    int max \u003d 0;\r\n    final List\u003cStringBuffer\u003e prefixList \u003d new ArrayList\u003c\u003e();\r\n    final List\u003cOption\u003e optList \u003d options.helpOptions();\r\n    if (getOptionComparator() !\u003d null) {\r\n        Collections.sort(optList, getOptionComparator());\r\n    }\r\n    for (final Option option : optList) {\r\n        final StringBuffer optBuf \u003d new StringBuffer();\r\n        if (option.getOpt() \u003d\u003d null) {\r\n            optBuf.append(lpad).append(\"   \").append(getLongOptPrefix()).append(option.getLongOpt());\r\n        } else {\r\n            optBuf.append(lpad).append(getOptPrefix()).append(option.getOpt());\r\n            if (option.hasLongOpt()) {\r\n                optBuf.append(\u0027,\u0027).append(getLongOptPrefix()).append(option.getLongOpt());\r\n            }\r\n        }\r\n        if (option.hasArg()) {\r\n            final String argName \u003d option.getArgName();\r\n            if (argName !\u003d null \u0026\u0026 argName.isEmpty()) {\r\n                optBuf.append(\u0027 \u0027);\r\n            } else {\r\n                optBuf.append(option.hasLongOpt() ? longOptSeparator : \" \");\r\n                optBuf.append(\"\u003c\").append(argName !\u003d null ? option.getArgName() : getArgName()).append(\"\u003e\");\r\n            }\r\n        }\r\n        prefixList.add(optBuf);\r\n        max \u003d optBuf.length() \u003e max ? optBuf.length() : max;\r\n    }\r\n    int x \u003d 0;\r\n    for (final Iterator\u003cOption\u003e it \u003d optList.iterator(); it.hasNext(); ) {\r\n        final Option option \u003d it.next();\r\n        final StringBuilder optBuf \u003d new StringBuilder(prefixList.get(x++).toString());\r\n        if (optBuf.length() \u003c max) {\r\n            optBuf.append(createPadding(max - optBuf.length()));\r\n        }\r\n        optBuf.append(dpad);\r\n        final int nextLineTabStop \u003d max + descPad;\r\n        if (option.getDescription() !\u003d null) {\r\n            optBuf.append(option.getDescription());\r\n        }\r\n        renderWrappedText(sb, width, nextLineTabStop, optBuf.toString());\r\n        if (it.hasNext()) {\r\n            sb.append(getNewLine());\r\n        }\r\n    }\r\n    return sb;\r\n}",
          "path": "src/main/java/org/apache/commons/cli/HelpFormatter.java",
          "functionStartLine": 685,
          "functionName": "renderOptions",
          "functionAnnotation": "",
          "functionDoc": "Render the specified Options and return the rendered Options in a StringBuffer.\r\n\r\n@param sb The StringBuffer to place the rendered Options into.\r\n@param width The number of characters to display per line\r\n@param options The command line Options\r\n@param leftPad the number of characters of padding to be prefixed to each line\r\n@param descPad the number of characters of padding to be prefixed to each description line\r\n@return the StringBuffer with the rendered Options contents.\r\n",
          "diff": "",
          "extendedDetails": {
            "oldValue": "Render the specified Options and return the rendered Options\r\nin a StringBuffer.\r\n\r\n@param sb The StringBuffer to place the rendered Options into.\r\n@param width The number of characters to display per line\r\n@param options The command line Options\r\n@param leftPad the number of characters of padding to be prefixed\r\nto each line\r\n@param descPad the number of characters of padding to be prefixed\r\nto each description line\r\n@return the StringBuffer with the rendered Options contents.\r\n",
            "newValue": "Render the specified Options and return the rendered Options in a StringBuffer.\r\n\r\n@param sb The StringBuffer to place the rendered Options into.\r\n@param width The number of characters to display per line\r\n@param options The command line Options\r\n@param leftPad the number of characters of padding to be prefixed to each line\r\n@param descPad the number of characters of padding to be prefixed to each description line\r\n@return the StringBuffer with the rendered Options contents.\r\n"
          }
        },
        {
          "type": "Yformatchange",
          "commitMessage": "Clean ups.\n\n- maven-checkstyle-plugin 3.1.1 -\u003e 3.1.2.\n- checkstyle -\u003e 9.0\n- Updates for 21st century.\n- No need to nest else clause.\n- Use simple array declarations.\n- Use valueOf instead of new for Numbers.\n- Consistent formatting.\n- Remove some inline comments //-----...\n",
          "commitDate": "10/2/21 11:04 PM",
          "commitName": "bc0edc47dbf47cdaa3485cfb724982f377c900df",
          "commitAuthor": "Gary Gregory",
          "commitDateOld": "2/8/21 10:11 PM",
          "commitNameOld": "66cc7b4cb8b0f39edfe0ee37eead4ace04a7be4e",
          "commitAuthorOld": "Gary Gregory",
          "daysBetweenCommits": 236.04,
          "commitsBetweenForRepo": 22,
          "commitsBetweenForFile": 1,
          "actualSource": "protected StringBuffer renderOptions(final StringBuffer sb, final int width, final Options options, final int leftPad, final int descPad) {\r\n    final String lpad \u003d createPadding(leftPad);\r\n    final String dpad \u003d createPadding(descPad);\r\n    int max \u003d 0;\r\n    final List\u003cStringBuffer\u003e prefixList \u003d new ArrayList\u003c\u003e();\r\n    final List\u003cOption\u003e optList \u003d options.helpOptions();\r\n    if (getOptionComparator() !\u003d null) {\r\n        Collections.sort(optList, getOptionComparator());\r\n    }\r\n    for (final Option option : optList) {\r\n        final StringBuffer optBuf \u003d new StringBuffer();\r\n        if (option.getOpt() \u003d\u003d null) {\r\n            optBuf.append(lpad).append(\"   \").append(getLongOptPrefix()).append(option.getLongOpt());\r\n        } else {\r\n            optBuf.append(lpad).append(getOptPrefix()).append(option.getOpt());\r\n            if (option.hasLongOpt()) {\r\n                optBuf.append(\u0027,\u0027).append(getLongOptPrefix()).append(option.getLongOpt());\r\n            }\r\n        }\r\n        if (option.hasArg()) {\r\n            final String argName \u003d option.getArgName();\r\n            if (argName !\u003d null \u0026\u0026 argName.isEmpty()) {\r\n                optBuf.append(\u0027 \u0027);\r\n            } else {\r\n                optBuf.append(option.hasLongOpt() ? longOptSeparator : \" \");\r\n                optBuf.append(\"\u003c\").append(argName !\u003d null ? option.getArgName() : getArgName()).append(\"\u003e\");\r\n            }\r\n        }\r\n        prefixList.add(optBuf);\r\n        max \u003d optBuf.length() \u003e max ? optBuf.length() : max;\r\n    }\r\n    int x \u003d 0;\r\n    for (final Iterator\u003cOption\u003e it \u003d optList.iterator(); it.hasNext(); ) {\r\n        final Option option \u003d it.next();\r\n        final StringBuilder optBuf \u003d new StringBuilder(prefixList.get(x++).toString());\r\n        if (optBuf.length() \u003c max) {\r\n            optBuf.append(createPadding(max - optBuf.length()));\r\n        }\r\n        optBuf.append(dpad);\r\n        final int nextLineTabStop \u003d max + descPad;\r\n        if (option.getDescription() !\u003d null) {\r\n            optBuf.append(option.getDescription());\r\n        }\r\n        renderWrappedText(sb, width, nextLineTabStop, optBuf.toString());\r\n        if (it.hasNext()) {\r\n            sb.append(getNewLine());\r\n        }\r\n    }\r\n    return sb;\r\n}",
          "path": "src/main/java/org/apache/commons/cli/HelpFormatter.java",
          "functionStartLine": 685,
          "functionName": "renderOptions",
          "functionAnnotation": "",
          "functionDoc": "Render the specified Options and return the rendered Options in a StringBuffer.\r\n\r\n@param sb The StringBuffer to place the rendered Options into.\r\n@param width The number of characters to display per line\r\n@param options The command line Options\r\n@param leftPad the number of characters of padding to be prefixed to each line\r\n@param descPad the number of characters of padding to be prefixed to each description line\r\n@return the StringBuffer with the rendered Options contents.\r\n",
          "diff": "",
          "extendedDetails": {}
        }
      ]
    },
    "af54c01799ebf3ed613bfd9cc9e4934676b245fd": {
      "type": "Ybodychange",
      "commitMessage": "Use isEmpty().\n",
      "commitDate": "1/17/21 5:04 PM",
      "commitName": "af54c01799ebf3ed613bfd9cc9e4934676b245fd",
      "commitAuthor": "Gary Gregory",
      "commitDateOld": "12/28/20 6:44 PM",
      "commitNameOld": "c67275279176504a6f5fc556cfa247e1df02a580",
      "commitAuthorOld": "Arturo Bernal",
      "daysBetweenCommits": 19.93,
      "commitsBetweenForRepo": 9,
      "commitsBetweenForFile": 1,
      "actualSource": "protected StringBuffer renderOptions(final StringBuffer sb, final int width, final Options options, final int leftPad, final int descPad) {\r\n    final String lpad \u003d createPadding(leftPad);\r\n    final String dpad \u003d createPadding(descPad);\r\n    int max \u003d 0;\r\n    final List\u003cStringBuffer\u003e prefixList \u003d new ArrayList\u003c\u003e();\r\n    final List\u003cOption\u003e optList \u003d options.helpOptions();\r\n    if (getOptionComparator() !\u003d null) {\r\n        Collections.sort(optList, getOptionComparator());\r\n    }\r\n    for (final Option option : optList) {\r\n        final StringBuffer optBuf \u003d new StringBuffer();\r\n        if (option.getOpt() \u003d\u003d null) {\r\n            optBuf.append(lpad).append(\"   \").append(getLongOptPrefix()).append(option.getLongOpt());\r\n        } else {\r\n            optBuf.append(lpad).append(getOptPrefix()).append(option.getOpt());\r\n            if (option.hasLongOpt()) {\r\n                optBuf.append(\u0027,\u0027).append(getLongOptPrefix()).append(option.getLongOpt());\r\n            }\r\n        }\r\n        if (option.hasArg()) {\r\n            final String argName \u003d option.getArgName();\r\n            if (argName !\u003d null \u0026\u0026 argName.isEmpty()) {\r\n                optBuf.append(\u0027 \u0027);\r\n            } else {\r\n                optBuf.append(option.hasLongOpt() ? longOptSeparator : \" \");\r\n                optBuf.append(\"\u003c\").append(argName !\u003d null ? option.getArgName() : getArgName()).append(\"\u003e\");\r\n            }\r\n        }\r\n        prefixList.add(optBuf);\r\n        max \u003d optBuf.length() \u003e max ? optBuf.length() : max;\r\n    }\r\n    int x \u003d 0;\r\n    for (final Iterator\u003cOption\u003e it \u003d optList.iterator(); it.hasNext(); ) {\r\n        final Option option \u003d it.next();\r\n        final StringBuilder optBuf \u003d new StringBuilder(prefixList.get(x++).toString());\r\n        if (optBuf.length() \u003c max) {\r\n            optBuf.append(createPadding(max - optBuf.length()));\r\n        }\r\n        optBuf.append(dpad);\r\n        final int nextLineTabStop \u003d max + descPad;\r\n        if (option.getDescription() !\u003d null) {\r\n            optBuf.append(option.getDescription());\r\n        }\r\n        renderWrappedText(sb, width, nextLineTabStop, optBuf.toString());\r\n        if (it.hasNext()) {\r\n            sb.append(getNewLine());\r\n        }\r\n    }\r\n    return sb;\r\n}",
      "path": "src/main/java/org/apache/commons/cli/HelpFormatter.java",
      "functionStartLine": 789,
      "functionName": "renderOptions",
      "functionAnnotation": "",
      "functionDoc": "Render the specified Options and return the rendered Options\r\nin a StringBuffer.\r\n\r\n@param sb The StringBuffer to place the rendered Options into.\r\n@param width The number of characters to display per line\r\n@param options The command line Options\r\n@param leftPad the number of characters of padding to be prefixed\r\nto each line\r\n@param descPad the number of characters of padding to be prefixed\r\nto each description line\r\n@return the StringBuffer with the rendered Options contents.\r\n",
      "diff": "@@ -1,50 +1,50 @@\n protected StringBuffer renderOptions(final StringBuffer sb, final int width, final Options options, final int leftPad, final int descPad) {\r\n     final String lpad \u003d createPadding(leftPad);\r\n     final String dpad \u003d createPadding(descPad);\r\n     int max \u003d 0;\r\n     final List\u003cStringBuffer\u003e prefixList \u003d new ArrayList\u003c\u003e();\r\n     final List\u003cOption\u003e optList \u003d options.helpOptions();\r\n     if (getOptionComparator() !\u003d null) {\r\n         Collections.sort(optList, getOptionComparator());\r\n     }\r\n     for (final Option option : optList) {\r\n         final StringBuffer optBuf \u003d new StringBuffer();\r\n         if (option.getOpt() \u003d\u003d null) {\r\n             optBuf.append(lpad).append(\"   \").append(getLongOptPrefix()).append(option.getLongOpt());\r\n         } else {\r\n             optBuf.append(lpad).append(getOptPrefix()).append(option.getOpt());\r\n             if (option.hasLongOpt()) {\r\n                 optBuf.append(\u0027,\u0027).append(getLongOptPrefix()).append(option.getLongOpt());\r\n             }\r\n         }\r\n         if (option.hasArg()) {\r\n             final String argName \u003d option.getArgName();\r\n-            if (argName !\u003d null \u0026\u0026 argName.length() \u003d\u003d 0) {\r\n+            if (argName !\u003d null \u0026\u0026 argName.isEmpty()) {\r\n                 optBuf.append(\u0027 \u0027);\r\n             } else {\r\n                 optBuf.append(option.hasLongOpt() ? longOptSeparator : \" \");\r\n                 optBuf.append(\"\u003c\").append(argName !\u003d null ? option.getArgName() : getArgName()).append(\"\u003e\");\r\n             }\r\n         }\r\n         prefixList.add(optBuf);\r\n         max \u003d optBuf.length() \u003e max ? optBuf.length() : max;\r\n     }\r\n     int x \u003d 0;\r\n     for (final Iterator\u003cOption\u003e it \u003d optList.iterator(); it.hasNext(); ) {\r\n         final Option option \u003d it.next();\r\n         final StringBuilder optBuf \u003d new StringBuilder(prefixList.get(x++).toString());\r\n         if (optBuf.length() \u003c max) {\r\n             optBuf.append(createPadding(max - optBuf.length()));\r\n         }\r\n         optBuf.append(dpad);\r\n         final int nextLineTabStop \u003d max + descPad;\r\n         if (option.getDescription() !\u003d null) {\r\n             optBuf.append(option.getDescription());\r\n         }\r\n         renderWrappedText(sb, width, nextLineTabStop, optBuf.toString());\r\n         if (it.hasNext()) {\r\n             sb.append(getNewLine());\r\n         }\r\n     }\r\n     return sb;\r\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "02aba6c78d451376053478e4d627ba6f2fd6ba21": {
      "type": "Ybodychange",
      "commitMessage": "Remove redundant generic type arguments.\n",
      "commitDate": "5/24/20 6:44 PM",
      "commitName": "02aba6c78d451376053478e4d627ba6f2fd6ba21",
      "commitAuthor": "Gary Gregory",
      "commitDateOld": "12/18/19 11:28 PM",
      "commitNameOld": "c12260c05ebcd27558265395df79b8b049534fbd",
      "commitAuthorOld": "Gary Gregory",
      "daysBetweenCommits": 157.8,
      "commitsBetweenForRepo": 6,
      "commitsBetweenForFile": 1,
      "actualSource": "protected StringBuffer renderOptions(final StringBuffer sb, final int width, final Options options, final int leftPad, final int descPad) {\r\n    final String lpad \u003d createPadding(leftPad);\r\n    final String dpad \u003d createPadding(descPad);\r\n    int max \u003d 0;\r\n    final List\u003cStringBuffer\u003e prefixList \u003d new ArrayList\u003c\u003e();\r\n    final List\u003cOption\u003e optList \u003d options.helpOptions();\r\n    if (getOptionComparator() !\u003d null) {\r\n        Collections.sort(optList, getOptionComparator());\r\n    }\r\n    for (final Option option : optList) {\r\n        final StringBuffer optBuf \u003d new StringBuffer();\r\n        if (option.getOpt() \u003d\u003d null) {\r\n            optBuf.append(lpad).append(\"   \").append(getLongOptPrefix()).append(option.getLongOpt());\r\n        } else {\r\n            optBuf.append(lpad).append(getOptPrefix()).append(option.getOpt());\r\n            if (option.hasLongOpt()) {\r\n                optBuf.append(\u0027,\u0027).append(getLongOptPrefix()).append(option.getLongOpt());\r\n            }\r\n        }\r\n        if (option.hasArg()) {\r\n            final String argName \u003d option.getArgName();\r\n            if (argName !\u003d null \u0026\u0026 argName.length() \u003d\u003d 0) {\r\n                optBuf.append(\u0027 \u0027);\r\n            } else {\r\n                optBuf.append(option.hasLongOpt() ? longOptSeparator : \" \");\r\n                optBuf.append(\"\u003c\").append(argName !\u003d null ? option.getArgName() : getArgName()).append(\"\u003e\");\r\n            }\r\n        }\r\n        prefixList.add(optBuf);\r\n        max \u003d optBuf.length() \u003e max ? optBuf.length() : max;\r\n    }\r\n    int x \u003d 0;\r\n    for (final Iterator\u003cOption\u003e it \u003d optList.iterator(); it.hasNext(); ) {\r\n        final Option option \u003d it.next();\r\n        final StringBuilder optBuf \u003d new StringBuilder(prefixList.get(x++).toString());\r\n        if (optBuf.length() \u003c max) {\r\n            optBuf.append(createPadding(max - optBuf.length()));\r\n        }\r\n        optBuf.append(dpad);\r\n        final int nextLineTabStop \u003d max + descPad;\r\n        if (option.getDescription() !\u003d null) {\r\n            optBuf.append(option.getDescription());\r\n        }\r\n        renderWrappedText(sb, width, nextLineTabStop, optBuf.toString());\r\n        if (it.hasNext()) {\r\n            sb.append(getNewLine());\r\n        }\r\n    }\r\n    return sb;\r\n}",
      "path": "src/main/java/org/apache/commons/cli/HelpFormatter.java",
      "functionStartLine": 789,
      "functionName": "renderOptions",
      "functionAnnotation": "",
      "functionDoc": "Render the specified Options and return the rendered Options\r\nin a StringBuffer.\r\n\r\n@param sb The StringBuffer to place the rendered Options into.\r\n@param width The number of characters to display per line\r\n@param options The command line Options\r\n@param leftPad the number of characters of padding to be prefixed\r\nto each line\r\n@param descPad the number of characters of padding to be prefixed\r\nto each description line\r\n@return the StringBuffer with the rendered Options contents.\r\n",
      "diff": "@@ -1,50 +1,50 @@\n protected StringBuffer renderOptions(final StringBuffer sb, final int width, final Options options, final int leftPad, final int descPad) {\r\n     final String lpad \u003d createPadding(leftPad);\r\n     final String dpad \u003d createPadding(descPad);\r\n     int max \u003d 0;\r\n-    final List\u003cStringBuffer\u003e prefixList \u003d new ArrayList\u003cStringBuffer\u003e();\r\n+    final List\u003cStringBuffer\u003e prefixList \u003d new ArrayList\u003c\u003e();\r\n     final List\u003cOption\u003e optList \u003d options.helpOptions();\r\n     if (getOptionComparator() !\u003d null) {\r\n         Collections.sort(optList, getOptionComparator());\r\n     }\r\n     for (final Option option : optList) {\r\n         final StringBuffer optBuf \u003d new StringBuffer();\r\n         if (option.getOpt() \u003d\u003d null) {\r\n             optBuf.append(lpad).append(\"   \").append(getLongOptPrefix()).append(option.getLongOpt());\r\n         } else {\r\n             optBuf.append(lpad).append(getOptPrefix()).append(option.getOpt());\r\n             if (option.hasLongOpt()) {\r\n                 optBuf.append(\u0027,\u0027).append(getLongOptPrefix()).append(option.getLongOpt());\r\n             }\r\n         }\r\n         if (option.hasArg()) {\r\n             final String argName \u003d option.getArgName();\r\n             if (argName !\u003d null \u0026\u0026 argName.length() \u003d\u003d 0) {\r\n                 optBuf.append(\u0027 \u0027);\r\n             } else {\r\n                 optBuf.append(option.hasLongOpt() ? longOptSeparator : \" \");\r\n                 optBuf.append(\"\u003c\").append(argName !\u003d null ? option.getArgName() : getArgName()).append(\"\u003e\");\r\n             }\r\n         }\r\n         prefixList.add(optBuf);\r\n         max \u003d optBuf.length() \u003e max ? optBuf.length() : max;\r\n     }\r\n     int x \u003d 0;\r\n     for (final Iterator\u003cOption\u003e it \u003d optList.iterator(); it.hasNext(); ) {\r\n         final Option option \u003d it.next();\r\n         final StringBuilder optBuf \u003d new StringBuilder(prefixList.get(x++).toString());\r\n         if (optBuf.length() \u003c max) {\r\n             optBuf.append(createPadding(max - optBuf.length()));\r\n         }\r\n         optBuf.append(dpad);\r\n         final int nextLineTabStop \u003d max + descPad;\r\n         if (option.getDescription() !\u003d null) {\r\n             optBuf.append(option.getDescription());\r\n         }\r\n         renderWrappedText(sb, width, nextLineTabStop, optBuf.toString());\r\n         if (it.hasNext()) {\r\n             sb.append(getNewLine());\r\n         }\r\n     }\r\n     return sb;\r\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "c12260c05ebcd27558265395df79b8b049534fbd": {
      "type": "Yformatchange",
      "commitMessage": "Remove trailing white spaces on all lines.\n",
      "commitDate": "12/18/19 11:28 PM",
      "commitName": "c12260c05ebcd27558265395df79b8b049534fbd",
      "commitAuthor": "Gary Gregory",
      "commitDateOld": "6/15/17 1:23 PM",
      "commitNameOld": "9a845a2a30742b500e3b823b105434203427ea93",
      "commitAuthorOld": "Bruno P. Kinoshita",
      "daysBetweenCommits": 916.42,
      "commitsBetweenForRepo": 47,
      "commitsBetweenForFile": 1,
      "actualSource": "protected StringBuffer renderOptions(final StringBuffer sb, final int width, final Options options, final int leftPad, final int descPad) {\r\n    final String lpad \u003d createPadding(leftPad);\r\n    final String dpad \u003d createPadding(descPad);\r\n    int max \u003d 0;\r\n    final List\u003cStringBuffer\u003e prefixList \u003d new ArrayList\u003cStringBuffer\u003e();\r\n    final List\u003cOption\u003e optList \u003d options.helpOptions();\r\n    if (getOptionComparator() !\u003d null) {\r\n        Collections.sort(optList, getOptionComparator());\r\n    }\r\n    for (final Option option : optList) {\r\n        final StringBuffer optBuf \u003d new StringBuffer();\r\n        if (option.getOpt() \u003d\u003d null) {\r\n            optBuf.append(lpad).append(\"   \").append(getLongOptPrefix()).append(option.getLongOpt());\r\n        } else {\r\n            optBuf.append(lpad).append(getOptPrefix()).append(option.getOpt());\r\n            if (option.hasLongOpt()) {\r\n                optBuf.append(\u0027,\u0027).append(getLongOptPrefix()).append(option.getLongOpt());\r\n            }\r\n        }\r\n        if (option.hasArg()) {\r\n            final String argName \u003d option.getArgName();\r\n            if (argName !\u003d null \u0026\u0026 argName.length() \u003d\u003d 0) {\r\n                optBuf.append(\u0027 \u0027);\r\n            } else {\r\n                optBuf.append(option.hasLongOpt() ? longOptSeparator : \" \");\r\n                optBuf.append(\"\u003c\").append(argName !\u003d null ? option.getArgName() : getArgName()).append(\"\u003e\");\r\n            }\r\n        }\r\n        prefixList.add(optBuf);\r\n        max \u003d optBuf.length() \u003e max ? optBuf.length() : max;\r\n    }\r\n    int x \u003d 0;\r\n    for (final Iterator\u003cOption\u003e it \u003d optList.iterator(); it.hasNext(); ) {\r\n        final Option option \u003d it.next();\r\n        final StringBuilder optBuf \u003d new StringBuilder(prefixList.get(x++).toString());\r\n        if (optBuf.length() \u003c max) {\r\n            optBuf.append(createPadding(max - optBuf.length()));\r\n        }\r\n        optBuf.append(dpad);\r\n        final int nextLineTabStop \u003d max + descPad;\r\n        if (option.getDescription() !\u003d null) {\r\n            optBuf.append(option.getDescription());\r\n        }\r\n        renderWrappedText(sb, width, nextLineTabStop, optBuf.toString());\r\n        if (it.hasNext()) {\r\n            sb.append(getNewLine());\r\n        }\r\n    }\r\n    return sb;\r\n}",
      "path": "src/main/java/org/apache/commons/cli/HelpFormatter.java",
      "functionStartLine": 789,
      "functionName": "renderOptions",
      "functionAnnotation": "",
      "functionDoc": "Render the specified Options and return the rendered Options\r\nin a StringBuffer.\r\n\r\n@param sb The StringBuffer to place the rendered Options into.\r\n@param width The number of characters to display per line\r\n@param options The command line Options\r\n@param leftPad the number of characters of padding to be prefixed\r\nto each line\r\n@param descPad the number of characters of padding to be prefixed\r\nto each description line\r\n@return the StringBuffer with the rendered Options contents.\r\n",
      "diff": "",
      "extendedDetails": {}
    },
    "5fb9e5009a8cdc7366b7a762f0e43dc47decf67c": {
      "type": "Yparametermetachange",
      "commitMessage": "Add final modifier to method parameters.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/cli/trunk@1797674 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "6/5/17 7:38 PM",
      "commitName": "5fb9e5009a8cdc7366b7a762f0e43dc47decf67c",
      "commitAuthor": "Gary D. Gregory",
      "commitDateOld": "6/5/17 7:37 PM",
      "commitNameOld": "357a8b0b8f1090db29e0d541a9419f570a78457b",
      "commitAuthorOld": "Gary D. Gregory",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "protected StringBuffer renderOptions(final StringBuffer sb, final int width, final Options options, final int leftPad, final int descPad) {\r\n    final String lpad \u003d createPadding(leftPad);\r\n    final String dpad \u003d createPadding(descPad);\r\n    int max \u003d 0;\r\n    final List\u003cStringBuffer\u003e prefixList \u003d new ArrayList\u003cStringBuffer\u003e();\r\n    final List\u003cOption\u003e optList \u003d options.helpOptions();\r\n    if (getOptionComparator() !\u003d null) {\r\n        Collections.sort(optList, getOptionComparator());\r\n    }\r\n    for (final Option option : optList) {\r\n        final StringBuffer optBuf \u003d new StringBuffer();\r\n        if (option.getOpt() \u003d\u003d null) {\r\n            optBuf.append(lpad).append(\"   \").append(getLongOptPrefix()).append(option.getLongOpt());\r\n        } else {\r\n            optBuf.append(lpad).append(getOptPrefix()).append(option.getOpt());\r\n            if (option.hasLongOpt()) {\r\n                optBuf.append(\u0027,\u0027).append(getLongOptPrefix()).append(option.getLongOpt());\r\n            }\r\n        }\r\n        if (option.hasArg()) {\r\n            final String argName \u003d option.getArgName();\r\n            if (argName !\u003d null \u0026\u0026 argName.length() \u003d\u003d 0) {\r\n                optBuf.append(\u0027 \u0027);\r\n            } else {\r\n                optBuf.append(option.hasLongOpt() ? longOptSeparator : \" \");\r\n                optBuf.append(\"\u003c\").append(argName !\u003d null ? option.getArgName() : getArgName()).append(\"\u003e\");\r\n            }\r\n        }\r\n        prefixList.add(optBuf);\r\n        max \u003d optBuf.length() \u003e max ? optBuf.length() : max;\r\n    }\r\n    int x \u003d 0;\r\n    for (final Iterator\u003cOption\u003e it \u003d optList.iterator(); it.hasNext(); ) {\r\n        final Option option \u003d it.next();\r\n        final StringBuilder optBuf \u003d new StringBuilder(prefixList.get(x++).toString());\r\n        if (optBuf.length() \u003c max) {\r\n            optBuf.append(createPadding(max - optBuf.length()));\r\n        }\r\n        optBuf.append(dpad);\r\n        final int nextLineTabStop \u003d max + descPad;\r\n        if (option.getDescription() !\u003d null) {\r\n            optBuf.append(option.getDescription());\r\n        }\r\n        renderWrappedText(sb, width, nextLineTabStop, optBuf.toString());\r\n        if (it.hasNext()) {\r\n            sb.append(getNewLine());\r\n        }\r\n    }\r\n    return sb;\r\n}",
      "path": "src/main/java/org/apache/commons/cli/HelpFormatter.java",
      "functionStartLine": 791,
      "functionName": "renderOptions",
      "functionAnnotation": "",
      "functionDoc": "Render the specified Options and return the rendered Options\r\nin a StringBuffer.\r\n\r\n@param sb The StringBuffer to place the rendered Options into.\r\n@param width The number of characters to display per line\r\n@param options The command line Options\r\n@param leftPad the number of characters of padding to be prefixed\r\nto each line\r\n@param descPad the number of characters of padding to be prefixed\r\nto each description line\r\n@return the StringBuffer with the rendered Options contents.\r\n",
      "diff": "@@ -1,50 +1,50 @@\n-protected StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad) {\r\n+protected StringBuffer renderOptions(final StringBuffer sb, final int width, final Options options, final int leftPad, final int descPad) {\r\n     final String lpad \u003d createPadding(leftPad);\r\n     final String dpad \u003d createPadding(descPad);\r\n     int max \u003d 0;\r\n     final List\u003cStringBuffer\u003e prefixList \u003d new ArrayList\u003cStringBuffer\u003e();\r\n     final List\u003cOption\u003e optList \u003d options.helpOptions();\r\n     if (getOptionComparator() !\u003d null) {\r\n         Collections.sort(optList, getOptionComparator());\r\n     }\r\n     for (final Option option : optList) {\r\n         final StringBuffer optBuf \u003d new StringBuffer();\r\n         if (option.getOpt() \u003d\u003d null) {\r\n             optBuf.append(lpad).append(\"   \").append(getLongOptPrefix()).append(option.getLongOpt());\r\n         } else {\r\n             optBuf.append(lpad).append(getOptPrefix()).append(option.getOpt());\r\n             if (option.hasLongOpt()) {\r\n                 optBuf.append(\u0027,\u0027).append(getLongOptPrefix()).append(option.getLongOpt());\r\n             }\r\n         }\r\n         if (option.hasArg()) {\r\n             final String argName \u003d option.getArgName();\r\n             if (argName !\u003d null \u0026\u0026 argName.length() \u003d\u003d 0) {\r\n                 optBuf.append(\u0027 \u0027);\r\n             } else {\r\n                 optBuf.append(option.hasLongOpt() ? longOptSeparator : \" \");\r\n                 optBuf.append(\"\u003c\").append(argName !\u003d null ? option.getArgName() : getArgName()).append(\"\u003e\");\r\n             }\r\n         }\r\n         prefixList.add(optBuf);\r\n         max \u003d optBuf.length() \u003e max ? optBuf.length() : max;\r\n     }\r\n     int x \u003d 0;\r\n     for (final Iterator\u003cOption\u003e it \u003d optList.iterator(); it.hasNext(); ) {\r\n         final Option option \u003d it.next();\r\n         final StringBuilder optBuf \u003d new StringBuilder(prefixList.get(x++).toString());\r\n         if (optBuf.length() \u003c max) {\r\n             optBuf.append(createPadding(max - optBuf.length()));\r\n         }\r\n         optBuf.append(dpad);\r\n         final int nextLineTabStop \u003d max + descPad;\r\n         if (option.getDescription() !\u003d null) {\r\n             optBuf.append(option.getDescription());\r\n         }\r\n         renderWrappedText(sb, width, nextLineTabStop, optBuf.toString());\r\n         if (it.hasNext()) {\r\n             sb.append(getNewLine());\r\n         }\r\n     }\r\n     return sb;\r\n }\n\\ No newline at end of file\n",
      "extendedDetails": {
        "oldValue": "[sb-StringBuffer, width-int, options-Options, leftPad-int, descPad-int]",
        "newValue": "[sb-StringBuffer(modifiers-final), width-int(modifiers-final), options-Options(modifiers-final), leftPad-int(modifiers-final), descPad-int(modifiers-final)]"
      }
    },
    "357a8b0b8f1090db29e0d541a9419f570a78457b": {
      "type": "Ybodychange",
      "commitMessage": "Add final modifier to local variables.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/cli/trunk@1797673 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "6/5/17 7:37 PM",
      "commitName": "357a8b0b8f1090db29e0d541a9419f570a78457b",
      "commitAuthor": "Gary D. Gregory",
      "commitDateOld": "5/3/15 5:31 PM",
      "commitNameOld": "3a730c03fcd3f2715c83db85331d1b5b8c95a1d5",
      "commitAuthorOld": "Benedikt Ritter",
      "daysBetweenCommits": 764.09,
      "commitsBetweenForRepo": 55,
      "commitsBetweenForFile": 1,
      "actualSource": "protected StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad) {\r\n    final String lpad \u003d createPadding(leftPad);\r\n    final String dpad \u003d createPadding(descPad);\r\n    int max \u003d 0;\r\n    final List\u003cStringBuffer\u003e prefixList \u003d new ArrayList\u003cStringBuffer\u003e();\r\n    final List\u003cOption\u003e optList \u003d options.helpOptions();\r\n    if (getOptionComparator() !\u003d null) {\r\n        Collections.sort(optList, getOptionComparator());\r\n    }\r\n    for (final Option option : optList) {\r\n        final StringBuffer optBuf \u003d new StringBuffer();\r\n        if (option.getOpt() \u003d\u003d null) {\r\n            optBuf.append(lpad).append(\"   \").append(getLongOptPrefix()).append(option.getLongOpt());\r\n        } else {\r\n            optBuf.append(lpad).append(getOptPrefix()).append(option.getOpt());\r\n            if (option.hasLongOpt()) {\r\n                optBuf.append(\u0027,\u0027).append(getLongOptPrefix()).append(option.getLongOpt());\r\n            }\r\n        }\r\n        if (option.hasArg()) {\r\n            final String argName \u003d option.getArgName();\r\n            if (argName !\u003d null \u0026\u0026 argName.length() \u003d\u003d 0) {\r\n                optBuf.append(\u0027 \u0027);\r\n            } else {\r\n                optBuf.append(option.hasLongOpt() ? longOptSeparator : \" \");\r\n                optBuf.append(\"\u003c\").append(argName !\u003d null ? option.getArgName() : getArgName()).append(\"\u003e\");\r\n            }\r\n        }\r\n        prefixList.add(optBuf);\r\n        max \u003d optBuf.length() \u003e max ? optBuf.length() : max;\r\n    }\r\n    int x \u003d 0;\r\n    for (final Iterator\u003cOption\u003e it \u003d optList.iterator(); it.hasNext(); ) {\r\n        final Option option \u003d it.next();\r\n        final StringBuilder optBuf \u003d new StringBuilder(prefixList.get(x++).toString());\r\n        if (optBuf.length() \u003c max) {\r\n            optBuf.append(createPadding(max - optBuf.length()));\r\n        }\r\n        optBuf.append(dpad);\r\n        final int nextLineTabStop \u003d max + descPad;\r\n        if (option.getDescription() !\u003d null) {\r\n            optBuf.append(option.getDescription());\r\n        }\r\n        renderWrappedText(sb, width, nextLineTabStop, optBuf.toString());\r\n        if (it.hasNext()) {\r\n            sb.append(getNewLine());\r\n        }\r\n    }\r\n    return sb;\r\n}",
      "path": "src/main/java/org/apache/commons/cli/HelpFormatter.java",
      "functionStartLine": 791,
      "functionName": "renderOptions",
      "functionAnnotation": "",
      "functionDoc": "Render the specified Options and return the rendered Options\r\nin a StringBuffer.\r\n\r\n@param sb The StringBuffer to place the rendered Options into.\r\n@param width The number of characters to display per line\r\n@param options The command line Options\r\n@param leftPad the number of characters of padding to be prefixed\r\nto each line\r\n@param descPad the number of characters of padding to be prefixed\r\nto each description line\r\n@return the StringBuffer with the rendered Options contents.\r\n",
      "diff": "@@ -1,50 +1,50 @@\n protected StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad) {\r\n     final String lpad \u003d createPadding(leftPad);\r\n     final String dpad \u003d createPadding(descPad);\r\n     int max \u003d 0;\r\n-    List\u003cStringBuffer\u003e prefixList \u003d new ArrayList\u003cStringBuffer\u003e();\r\n-    List\u003cOption\u003e optList \u003d options.helpOptions();\r\n+    final List\u003cStringBuffer\u003e prefixList \u003d new ArrayList\u003cStringBuffer\u003e();\r\n+    final List\u003cOption\u003e optList \u003d options.helpOptions();\r\n     if (getOptionComparator() !\u003d null) {\r\n         Collections.sort(optList, getOptionComparator());\r\n     }\r\n-    for (Option option : optList) {\r\n-        StringBuffer optBuf \u003d new StringBuffer();\r\n+    for (final Option option : optList) {\r\n+        final StringBuffer optBuf \u003d new StringBuffer();\r\n         if (option.getOpt() \u003d\u003d null) {\r\n             optBuf.append(lpad).append(\"   \").append(getLongOptPrefix()).append(option.getLongOpt());\r\n         } else {\r\n             optBuf.append(lpad).append(getOptPrefix()).append(option.getOpt());\r\n             if (option.hasLongOpt()) {\r\n                 optBuf.append(\u0027,\u0027).append(getLongOptPrefix()).append(option.getLongOpt());\r\n             }\r\n         }\r\n         if (option.hasArg()) {\r\n-            String argName \u003d option.getArgName();\r\n+            final String argName \u003d option.getArgName();\r\n             if (argName !\u003d null \u0026\u0026 argName.length() \u003d\u003d 0) {\r\n                 optBuf.append(\u0027 \u0027);\r\n             } else {\r\n                 optBuf.append(option.hasLongOpt() ? longOptSeparator : \" \");\r\n                 optBuf.append(\"\u003c\").append(argName !\u003d null ? option.getArgName() : getArgName()).append(\"\u003e\");\r\n             }\r\n         }\r\n         prefixList.add(optBuf);\r\n         max \u003d optBuf.length() \u003e max ? optBuf.length() : max;\r\n     }\r\n     int x \u003d 0;\r\n-    for (Iterator\u003cOption\u003e it \u003d optList.iterator(); it.hasNext(); ) {\r\n-        Option option \u003d it.next();\r\n-        StringBuilder optBuf \u003d new StringBuilder(prefixList.get(x++).toString());\r\n+    for (final Iterator\u003cOption\u003e it \u003d optList.iterator(); it.hasNext(); ) {\r\n+        final Option option \u003d it.next();\r\n+        final StringBuilder optBuf \u003d new StringBuilder(prefixList.get(x++).toString());\r\n         if (optBuf.length() \u003c max) {\r\n             optBuf.append(createPadding(max - optBuf.length()));\r\n         }\r\n         optBuf.append(dpad);\r\n-        int nextLineTabStop \u003d max + descPad;\r\n+        final int nextLineTabStop \u003d max + descPad;\r\n         if (option.getDescription() !\u003d null) {\r\n             optBuf.append(option.getDescription());\r\n         }\r\n         renderWrappedText(sb, width, nextLineTabStop, optBuf.toString());\r\n         if (it.hasNext()) {\r\n             sb.append(getNewLine());\r\n         }\r\n     }\r\n     return sb;\r\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "6b87d290954c4594fc69a3a0b85fff12490cfde5": {
      "type": "Ybodychange",
      "commitMessage": "PMD: Useless parenthesis\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/cli/trunk@1677402 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "5/3/15 4:57 PM",
      "commitName": "6b87d290954c4594fc69a3a0b85fff12490cfde5",
      "commitAuthor": "Benedikt Ritter",
      "commitDateOld": "2/11/13 11:03 PM",
      "commitNameOld": "fadd0a3c19356ebd5a0ee5a365ff0b6666ff99a9",
      "commitAuthorOld": "Thomas Neidhart",
      "daysBetweenCommits": 810.7,
      "commitsBetweenForRepo": 55,
      "commitsBetweenForFile": 1,
      "actualSource": "protected StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad) {\r\n    final String lpad \u003d createPadding(leftPad);\r\n    final String dpad \u003d createPadding(descPad);\r\n    int max \u003d 0;\r\n    List\u003cStringBuffer\u003e prefixList \u003d new ArrayList\u003cStringBuffer\u003e();\r\n    List\u003cOption\u003e optList \u003d options.helpOptions();\r\n    if (getOptionComparator() !\u003d null) {\r\n        Collections.sort(optList, getOptionComparator());\r\n    }\r\n    for (Option option : optList) {\r\n        StringBuffer optBuf \u003d new StringBuffer();\r\n        if (option.getOpt() \u003d\u003d null) {\r\n            optBuf.append(lpad).append(\"   \").append(getLongOptPrefix()).append(option.getLongOpt());\r\n        } else {\r\n            optBuf.append(lpad).append(getOptPrefix()).append(option.getOpt());\r\n            if (option.hasLongOpt()) {\r\n                optBuf.append(\u0027,\u0027).append(getLongOptPrefix()).append(option.getLongOpt());\r\n            }\r\n        }\r\n        if (option.hasArg()) {\r\n            String argName \u003d option.getArgName();\r\n            if (argName !\u003d null \u0026\u0026 argName.length() \u003d\u003d 0) {\r\n                optBuf.append(\u0027 \u0027);\r\n            } else {\r\n                optBuf.append(option.hasLongOpt() ? longOptSeparator : \" \");\r\n                optBuf.append(\"\u003c\").append(argName !\u003d null ? option.getArgName() : getArgName()).append(\"\u003e\");\r\n            }\r\n        }\r\n        prefixList.add(optBuf);\r\n        max \u003d optBuf.length() \u003e max ? optBuf.length() : max;\r\n    }\r\n    int x \u003d 0;\r\n    for (Iterator\u003cOption\u003e it \u003d optList.iterator(); it.hasNext(); ) {\r\n        Option option \u003d it.next();\r\n        StringBuilder optBuf \u003d new StringBuilder(prefixList.get(x++).toString());\r\n        if (optBuf.length() \u003c max) {\r\n            optBuf.append(createPadding(max - optBuf.length()));\r\n        }\r\n        optBuf.append(dpad);\r\n        int nextLineTabStop \u003d max + descPad;\r\n        if (option.getDescription() !\u003d null) {\r\n            optBuf.append(option.getDescription());\r\n        }\r\n        renderWrappedText(sb, width, nextLineTabStop, optBuf.toString());\r\n        if (it.hasNext()) {\r\n            sb.append(getNewLine());\r\n        }\r\n    }\r\n    return sb;\r\n}",
      "path": "src/main/java/org/apache/commons/cli/HelpFormatter.java",
      "functionStartLine": 787,
      "functionName": "renderOptions",
      "functionAnnotation": "",
      "functionDoc": "Render the specified Options and return the rendered Options\r\nin a StringBuffer.\r\n\r\n@param sb The StringBuffer to place the rendered Options into.\r\n@param width The number of characters to display per line\r\n@param options The command line Options\r\n@param leftPad the number of characters of padding to be prefixed\r\nto each line\r\n@param descPad the number of characters of padding to be prefixed\r\nto each description line\r\n@return the StringBuffer with the rendered Options contents.\r\n",
      "diff": "@@ -1,50 +1,50 @@\n protected StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad) {\r\n     final String lpad \u003d createPadding(leftPad);\r\n     final String dpad \u003d createPadding(descPad);\r\n     int max \u003d 0;\r\n     List\u003cStringBuffer\u003e prefixList \u003d new ArrayList\u003cStringBuffer\u003e();\r\n     List\u003cOption\u003e optList \u003d options.helpOptions();\r\n     if (getOptionComparator() !\u003d null) {\r\n         Collections.sort(optList, getOptionComparator());\r\n     }\r\n     for (Option option : optList) {\r\n         StringBuffer optBuf \u003d new StringBuffer();\r\n         if (option.getOpt() \u003d\u003d null) {\r\n             optBuf.append(lpad).append(\"   \").append(getLongOptPrefix()).append(option.getLongOpt());\r\n         } else {\r\n             optBuf.append(lpad).append(getOptPrefix()).append(option.getOpt());\r\n             if (option.hasLongOpt()) {\r\n                 optBuf.append(\u0027,\u0027).append(getLongOptPrefix()).append(option.getLongOpt());\r\n             }\r\n         }\r\n         if (option.hasArg()) {\r\n             String argName \u003d option.getArgName();\r\n             if (argName !\u003d null \u0026\u0026 argName.length() \u003d\u003d 0) {\r\n                 optBuf.append(\u0027 \u0027);\r\n             } else {\r\n                 optBuf.append(option.hasLongOpt() ? longOptSeparator : \" \");\r\n                 optBuf.append(\"\u003c\").append(argName !\u003d null ? option.getArgName() : getArgName()).append(\"\u003e\");\r\n             }\r\n         }\r\n         prefixList.add(optBuf);\r\n-        max \u003d (optBuf.length() \u003e max) ? optBuf.length() : max;\r\n+        max \u003d optBuf.length() \u003e max ? optBuf.length() : max;\r\n     }\r\n     int x \u003d 0;\r\n     for (Iterator\u003cOption\u003e it \u003d optList.iterator(); it.hasNext(); ) {\r\n         Option option \u003d it.next();\r\n         StringBuilder optBuf \u003d new StringBuilder(prefixList.get(x++).toString());\r\n         if (optBuf.length() \u003c max) {\r\n             optBuf.append(createPadding(max - optBuf.length()));\r\n         }\r\n         optBuf.append(dpad);\r\n         int nextLineTabStop \u003d max + descPad;\r\n         if (option.getDescription() !\u003d null) {\r\n             optBuf.append(option.getDescription());\r\n         }\r\n         renderWrappedText(sb, width, nextLineTabStop, optBuf.toString());\r\n         if (it.hasNext()) {\r\n             sb.append(getNewLine());\r\n         }\r\n     }\r\n     return sb;\r\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "3936da9d3fe37bcd20dd37216d82608e5917be07": {
      "type": "Ybodychange",
      "commitMessage": "Minor syntax changes\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/cli/trunk@1403792 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "10/30/12 7:24 PM",
      "commitName": "3936da9d3fe37bcd20dd37216d82608e5917be07",
      "commitAuthor": "Emmanuel Bourg",
      "commitDateOld": "10/30/12 4:16 PM",
      "commitNameOld": "4f1b2386770c76ce39d45c00ed9d939be8a7d081",
      "commitAuthorOld": "Emmanuel Bourg",
      "daysBetweenCommits": 0.13,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "protected StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad) {\r\n    final String lpad \u003d createPadding(leftPad);\r\n    final String dpad \u003d createPadding(descPad);\r\n    int max \u003d 0;\r\n    List\u003cStringBuffer\u003e prefixList \u003d new ArrayList\u003cStringBuffer\u003e();\r\n    List\u003cOption\u003e optList \u003d options.helpOptions();\r\n    if (getOptionComparator() !\u003d null) {\r\n        Collections.sort(optList, getOptionComparator());\r\n    }\r\n    for (Option option : optList) {\r\n        StringBuffer optBuf \u003d new StringBuffer();\r\n        if (option.getOpt() \u003d\u003d null) {\r\n            optBuf.append(lpad).append(\"   \").append(getLongOptPrefix()).append(option.getLongOpt());\r\n        } else {\r\n            optBuf.append(lpad).append(getOptPrefix()).append(option.getOpt());\r\n            if (option.hasLongOpt()) {\r\n                optBuf.append(\u0027,\u0027).append(getLongOptPrefix()).append(option.getLongOpt());\r\n            }\r\n        }\r\n        if (option.hasArg()) {\r\n            String argName \u003d option.getArgName();\r\n            if (argName !\u003d null \u0026\u0026 argName.length() \u003d\u003d 0) {\r\n                optBuf.append(\u0027 \u0027);\r\n            } else {\r\n                optBuf.append(option.hasLongOpt() ? longOptSeparator : \" \");\r\n                optBuf.append(\"\u003c\").append(argName !\u003d null ? option.getArgName() : getArgName()).append(\"\u003e\");\r\n            }\r\n        }\r\n        prefixList.add(optBuf);\r\n        max \u003d (optBuf.length() \u003e max) ? optBuf.length() : max;\r\n    }\r\n    int x \u003d 0;\r\n    for (Iterator\u003cOption\u003e it \u003d optList.iterator(); it.hasNext(); ) {\r\n        Option option \u003d it.next();\r\n        StringBuilder optBuf \u003d new StringBuilder(prefixList.get(x++).toString());\r\n        if (optBuf.length() \u003c max) {\r\n            optBuf.append(createPadding(max - optBuf.length()));\r\n        }\r\n        optBuf.append(dpad);\r\n        int nextLineTabStop \u003d max + descPad;\r\n        if (option.getDescription() !\u003d null) {\r\n            optBuf.append(option.getDescription());\r\n        }\r\n        renderWrappedText(sb, width, nextLineTabStop, optBuf.toString());\r\n        if (it.hasNext()) {\r\n            sb.append(getNewLine());\r\n        }\r\n    }\r\n    return sb;\r\n}",
      "path": "src/main/java/org/apache/commons/cli/HelpFormatter.java",
      "functionStartLine": 778,
      "functionName": "renderOptions",
      "functionAnnotation": "",
      "functionDoc": "Render the specified Options and return the rendered Options\r\nin a StringBuffer.\r\n\r\n@param sb The StringBuffer to place the rendered Options into.\r\n@param width The number of characters to display per line\r\n@param options The command line Options\r\n@param leftPad the number of characters of padding to be prefixed\r\nto each line\r\n@param descPad the number of characters of padding to be prefixed\r\nto each description line\r\n@return the StringBuffer with the rendered Options contents.\r\n",
      "diff": "@@ -1,50 +1,50 @@\n protected StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad) {\r\n     final String lpad \u003d createPadding(leftPad);\r\n     final String dpad \u003d createPadding(descPad);\r\n     int max \u003d 0;\r\n     List\u003cStringBuffer\u003e prefixList \u003d new ArrayList\u003cStringBuffer\u003e();\r\n     List\u003cOption\u003e optList \u003d options.helpOptions();\r\n     if (getOptionComparator() !\u003d null) {\r\n         Collections.sort(optList, getOptionComparator());\r\n     }\r\n     for (Option option : optList) {\r\n         StringBuffer optBuf \u003d new StringBuffer();\r\n         if (option.getOpt() \u003d\u003d null) {\r\n             optBuf.append(lpad).append(\"   \").append(getLongOptPrefix()).append(option.getLongOpt());\r\n         } else {\r\n             optBuf.append(lpad).append(getOptPrefix()).append(option.getOpt());\r\n             if (option.hasLongOpt()) {\r\n                 optBuf.append(\u0027,\u0027).append(getLongOptPrefix()).append(option.getLongOpt());\r\n             }\r\n         }\r\n         if (option.hasArg()) {\r\n             String argName \u003d option.getArgName();\r\n             if (argName !\u003d null \u0026\u0026 argName.length() \u003d\u003d 0) {\r\n                 optBuf.append(\u0027 \u0027);\r\n             } else {\r\n                 optBuf.append(option.hasLongOpt() ? longOptSeparator : \" \");\r\n                 optBuf.append(\"\u003c\").append(argName !\u003d null ? option.getArgName() : getArgName()).append(\"\u003e\");\r\n             }\r\n         }\r\n         prefixList.add(optBuf);\r\n         max \u003d (optBuf.length() \u003e max) ? optBuf.length() : max;\r\n     }\r\n     int x \u003d 0;\r\n-    for (Iterator i \u003d optList.iterator(); i.hasNext(); ) {\r\n-        Option option \u003d (Option) i.next();\r\n+    for (Iterator\u003cOption\u003e it \u003d optList.iterator(); it.hasNext(); ) {\r\n+        Option option \u003d it.next();\r\n         StringBuilder optBuf \u003d new StringBuilder(prefixList.get(x++).toString());\r\n         if (optBuf.length() \u003c max) {\r\n             optBuf.append(createPadding(max - optBuf.length()));\r\n         }\r\n         optBuf.append(dpad);\r\n         int nextLineTabStop \u003d max + descPad;\r\n         if (option.getDescription() !\u003d null) {\r\n             optBuf.append(option.getDescription());\r\n         }\r\n         renderWrappedText(sb, width, nextLineTabStop, optBuf.toString());\r\n-        if (i.hasNext()) {\r\n+        if (it.hasNext()) {\r\n             sb.append(getNewLine());\r\n         }\r\n     }\r\n     return sb;\r\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "10eeaf63d01a0c31c5af87438d83be7096cd343e": {
      "type": "Ybodychange",
      "commitMessage": "Replaced StringBuilder with StringBuffer wherever possible without breaking binary compatibility\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/cli/trunk@1214688 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/15/11 12:26 PM",
      "commitName": "10eeaf63d01a0c31c5af87438d83be7096cd343e",
      "commitAuthor": "Emmanuel Bourg",
      "commitDateOld": "4/21/11 2:22 PM",
      "commitNameOld": "491340dc5e6c8d4233cc575571e15dd357f20b70",
      "commitAuthorOld": "Simone Tripodi",
      "daysBetweenCommits": 237.96,
      "commitsBetweenForRepo": 7,
      "commitsBetweenForFile": 1,
      "actualSource": "protected StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad) {\r\n    final String lpad \u003d createPadding(leftPad);\r\n    final String dpad \u003d createPadding(descPad);\r\n    int max \u003d 0;\r\n    List\u003cStringBuffer\u003e prefixList \u003d new ArrayList\u003cStringBuffer\u003e();\r\n    List\u003cOption\u003e optList \u003d options.helpOptions();\r\n    if (getOptionComparator() !\u003d null) {\r\n        Collections.sort(optList, getOptionComparator());\r\n    }\r\n    for (Option option : optList) {\r\n        StringBuffer optBuf \u003d new StringBuffer();\r\n        if (option.getOpt() \u003d\u003d null) {\r\n            optBuf.append(lpad).append(\"   \").append(getLongOptPrefix()).append(option.getLongOpt());\r\n        } else {\r\n            optBuf.append(lpad).append(getOptPrefix()).append(option.getOpt());\r\n            if (option.hasLongOpt()) {\r\n                optBuf.append(\u0027,\u0027).append(getLongOptPrefix()).append(option.getLongOpt());\r\n            }\r\n        }\r\n        if (option.hasArg()) {\r\n            String argName \u003d option.getArgName();\r\n            if (argName !\u003d null \u0026\u0026 argName.length() \u003d\u003d 0) {\r\n                optBuf.append(\u0027 \u0027);\r\n            } else {\r\n                optBuf.append(option.hasLongOpt() ? longOptSeparator : \" \");\r\n                optBuf.append(\"\u003c\").append(argName !\u003d null ? option.getArgName() : getArgName()).append(\"\u003e\");\r\n            }\r\n        }\r\n        prefixList.add(optBuf);\r\n        max \u003d (optBuf.length() \u003e max) ? optBuf.length() : max;\r\n    }\r\n    int x \u003d 0;\r\n    for (Iterator i \u003d optList.iterator(); i.hasNext(); ) {\r\n        Option option \u003d (Option) i.next();\r\n        StringBuilder optBuf \u003d new StringBuilder(prefixList.get(x++).toString());\r\n        if (optBuf.length() \u003c max) {\r\n            optBuf.append(createPadding(max - optBuf.length()));\r\n        }\r\n        optBuf.append(dpad);\r\n        int nextLineTabStop \u003d max + descPad;\r\n        if (option.getDescription() !\u003d null) {\r\n            optBuf.append(option.getDescription());\r\n        }\r\n        renderWrappedText(sb, width, nextLineTabStop, optBuf.toString());\r\n        if (i.hasNext()) {\r\n            sb.append(getNewLine());\r\n        }\r\n    }\r\n    return sb;\r\n}",
      "path": "src/main/java/org/apache/commons/cli/HelpFormatter.java",
      "functionStartLine": 746,
      "functionName": "renderOptions",
      "functionAnnotation": "",
      "functionDoc": "Render the specified Options and return the rendered Options\r\nin a StringBuffer.\r\n\r\n@param sb The StringBuffer to place the rendered Options into.\r\n@param width The number of characters to display per line\r\n@param options The command line Options\r\n@param leftPad the number of characters of padding to be prefixed\r\nto each line\r\n@param descPad the number of characters of padding to be prefixed\r\nto each description line\r\n@return the StringBuffer with the rendered Options contents.\r\n",
      "diff": "@@ -1,50 +1,50 @@\n protected StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad) {\r\n     final String lpad \u003d createPadding(leftPad);\r\n     final String dpad \u003d createPadding(descPad);\r\n     int max \u003d 0;\r\n     List\u003cStringBuffer\u003e prefixList \u003d new ArrayList\u003cStringBuffer\u003e();\r\n     List\u003cOption\u003e optList \u003d options.helpOptions();\r\n     if (getOptionComparator() !\u003d null) {\r\n         Collections.sort(optList, getOptionComparator());\r\n     }\r\n     for (Option option : optList) {\r\n         StringBuffer optBuf \u003d new StringBuffer();\r\n         if (option.getOpt() \u003d\u003d null) {\r\n             optBuf.append(lpad).append(\"   \").append(getLongOptPrefix()).append(option.getLongOpt());\r\n         } else {\r\n             optBuf.append(lpad).append(getOptPrefix()).append(option.getOpt());\r\n             if (option.hasLongOpt()) {\r\n                 optBuf.append(\u0027,\u0027).append(getLongOptPrefix()).append(option.getLongOpt());\r\n             }\r\n         }\r\n         if (option.hasArg()) {\r\n             String argName \u003d option.getArgName();\r\n             if (argName !\u003d null \u0026\u0026 argName.length() \u003d\u003d 0) {\r\n                 optBuf.append(\u0027 \u0027);\r\n             } else {\r\n                 optBuf.append(option.hasLongOpt() ? longOptSeparator : \" \");\r\n                 optBuf.append(\"\u003c\").append(argName !\u003d null ? option.getArgName() : getArgName()).append(\"\u003e\");\r\n             }\r\n         }\r\n         prefixList.add(optBuf);\r\n         max \u003d (optBuf.length() \u003e max) ? optBuf.length() : max;\r\n     }\r\n     int x \u003d 0;\r\n     for (Iterator i \u003d optList.iterator(); i.hasNext(); ) {\r\n         Option option \u003d (Option) i.next();\r\n-        StringBuffer optBuf \u003d new StringBuffer(prefixList.get(x++).toString());\r\n+        StringBuilder optBuf \u003d new StringBuilder(prefixList.get(x++).toString());\r\n         if (optBuf.length() \u003c max) {\r\n             optBuf.append(createPadding(max - optBuf.length()));\r\n         }\r\n         optBuf.append(dpad);\r\n         int nextLineTabStop \u003d max + descPad;\r\n         if (option.getDescription() !\u003d null) {\r\n             optBuf.append(option.getDescription());\r\n         }\r\n         renderWrappedText(sb, width, nextLineTabStop, optBuf.toString());\r\n         if (i.hasNext()) {\r\n             sb.append(getNewLine());\r\n         }\r\n     }\r\n     return sb;\r\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "491340dc5e6c8d4233cc575571e15dd357f20b70": {
      "type": "Yformatchange",
      "commitMessage": "trailing spaces\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/cli/trunk@1095659 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "4/21/11 2:22 PM",
      "commitName": "491340dc5e6c8d4233cc575571e15dd357f20b70",
      "commitAuthor": "Simone Tripodi",
      "commitDateOld": "4/13/11 12:17 AM",
      "commitNameOld": "a955324468d45eb845e05107d5b0013285c3bc0a",
      "commitAuthorOld": "Emmanuel Bourg",
      "daysBetweenCommits": 8.59,
      "commitsBetweenForRepo": 10,
      "commitsBetweenForFile": 1,
      "actualSource": "protected StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad) {\r\n    final String lpad \u003d createPadding(leftPad);\r\n    final String dpad \u003d createPadding(descPad);\r\n    int max \u003d 0;\r\n    List\u003cStringBuffer\u003e prefixList \u003d new ArrayList\u003cStringBuffer\u003e();\r\n    List\u003cOption\u003e optList \u003d options.helpOptions();\r\n    if (getOptionComparator() !\u003d null) {\r\n        Collections.sort(optList, getOptionComparator());\r\n    }\r\n    for (Option option : optList) {\r\n        StringBuffer optBuf \u003d new StringBuffer();\r\n        if (option.getOpt() \u003d\u003d null) {\r\n            optBuf.append(lpad).append(\"   \").append(getLongOptPrefix()).append(option.getLongOpt());\r\n        } else {\r\n            optBuf.append(lpad).append(getOptPrefix()).append(option.getOpt());\r\n            if (option.hasLongOpt()) {\r\n                optBuf.append(\u0027,\u0027).append(getLongOptPrefix()).append(option.getLongOpt());\r\n            }\r\n        }\r\n        if (option.hasArg()) {\r\n            String argName \u003d option.getArgName();\r\n            if (argName !\u003d null \u0026\u0026 argName.length() \u003d\u003d 0) {\r\n                optBuf.append(\u0027 \u0027);\r\n            } else {\r\n                optBuf.append(option.hasLongOpt() ? longOptSeparator : \" \");\r\n                optBuf.append(\"\u003c\").append(argName !\u003d null ? option.getArgName() : getArgName()).append(\"\u003e\");\r\n            }\r\n        }\r\n        prefixList.add(optBuf);\r\n        max \u003d (optBuf.length() \u003e max) ? optBuf.length() : max;\r\n    }\r\n    int x \u003d 0;\r\n    for (Iterator i \u003d optList.iterator(); i.hasNext(); ) {\r\n        Option option \u003d (Option) i.next();\r\n        StringBuffer optBuf \u003d new StringBuffer(prefixList.get(x++).toString());\r\n        if (optBuf.length() \u003c max) {\r\n            optBuf.append(createPadding(max - optBuf.length()));\r\n        }\r\n        optBuf.append(dpad);\r\n        int nextLineTabStop \u003d max + descPad;\r\n        if (option.getDescription() !\u003d null) {\r\n            optBuf.append(option.getDescription());\r\n        }\r\n        renderWrappedText(sb, width, nextLineTabStop, optBuf.toString());\r\n        if (i.hasNext()) {\r\n            sb.append(getNewLine());\r\n        }\r\n    }\r\n    return sb;\r\n}",
      "path": "src/main/java/org/apache/commons/cli/HelpFormatter.java",
      "functionStartLine": 746,
      "functionName": "renderOptions",
      "functionAnnotation": "",
      "functionDoc": "Render the specified Options and return the rendered Options\r\nin a StringBuffer.\r\n\r\n@param sb The StringBuffer to place the rendered Options into.\r\n@param width The number of characters to display per line\r\n@param options The command line Options\r\n@param leftPad the number of characters of padding to be prefixed\r\nto each line\r\n@param descPad the number of characters of padding to be prefixed\r\nto each description line\r\n@return the StringBuffer with the rendered Options contents.\r\n",
      "diff": "",
      "extendedDetails": {}
    },
    "a955324468d45eb845e05107d5b0013285c3bc0a": {
      "type": "Ybodychange",
      "commitMessage": "HelpFormatter now accepts a null comparator to preserve the declaration order of the options (CLI-212)\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/cli/trunk@1091575 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "4/13/11 12:17 AM",
      "commitName": "a955324468d45eb845e05107d5b0013285c3bc0a",
      "commitAuthor": "Emmanuel Bourg",
      "commitDateOld": "4/12/11 10:17 PM",
      "commitNameOld": "39e1da969818b360858115ae5d852e22acd4329a",
      "commitAuthorOld": "Emmanuel Bourg",
      "daysBetweenCommits": 0.08,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "actualSource": "protected StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad) {\r\n    final String lpad \u003d createPadding(leftPad);\r\n    final String dpad \u003d createPadding(descPad);\r\n    int max \u003d 0;\r\n    List\u003cStringBuffer\u003e prefixList \u003d new ArrayList\u003cStringBuffer\u003e();\r\n    List\u003cOption\u003e optList \u003d options.helpOptions();\r\n    if (getOptionComparator() !\u003d null) {\r\n        Collections.sort(optList, getOptionComparator());\r\n    }\r\n    for (Option option : optList) {\r\n        StringBuffer optBuf \u003d new StringBuffer();\r\n        if (option.getOpt() \u003d\u003d null) {\r\n            optBuf.append(lpad).append(\"   \").append(getLongOptPrefix()).append(option.getLongOpt());\r\n        } else {\r\n            optBuf.append(lpad).append(getOptPrefix()).append(option.getOpt());\r\n            if (option.hasLongOpt()) {\r\n                optBuf.append(\u0027,\u0027).append(getLongOptPrefix()).append(option.getLongOpt());\r\n            }\r\n        }\r\n        if (option.hasArg()) {\r\n            String argName \u003d option.getArgName();\r\n            if (argName !\u003d null \u0026\u0026 argName.length() \u003d\u003d 0) {\r\n                optBuf.append(\u0027 \u0027);\r\n            } else {\r\n                optBuf.append(option.hasLongOpt() ? longOptSeparator : \" \");\r\n                optBuf.append(\"\u003c\").append(argName !\u003d null ? option.getArgName() : getArgName()).append(\"\u003e\");\r\n            }\r\n        }\r\n        prefixList.add(optBuf);\r\n        max \u003d (optBuf.length() \u003e max) ? optBuf.length() : max;\r\n    }\r\n    int x \u003d 0;\r\n    for (Iterator i \u003d optList.iterator(); i.hasNext(); ) {\r\n        Option option \u003d (Option) i.next();\r\n        StringBuffer optBuf \u003d new StringBuffer(prefixList.get(x++).toString());\r\n        if (optBuf.length() \u003c max) {\r\n            optBuf.append(createPadding(max - optBuf.length()));\r\n        }\r\n        optBuf.append(dpad);\r\n        int nextLineTabStop \u003d max + descPad;\r\n        if (option.getDescription() !\u003d null) {\r\n            optBuf.append(option.getDescription());\r\n        }\r\n        renderWrappedText(sb, width, nextLineTabStop, optBuf.toString());\r\n        if (i.hasNext()) {\r\n            sb.append(getNewLine());\r\n        }\r\n    }\r\n    return sb;\r\n}",
      "path": "src/main/java/org/apache/commons/cli/HelpFormatter.java",
      "functionStartLine": 746,
      "functionName": "renderOptions",
      "functionAnnotation": "",
      "functionDoc": "Render the specified Options and return the rendered Options\r\nin a StringBuffer.\r\n\r\n@param sb The StringBuffer to place the rendered Options into.\r\n@param width The number of characters to display per line\r\n@param options The command line Options\r\n@param leftPad the number of characters of padding to be prefixed\r\nto each line\r\n@param descPad the number of characters of padding to be prefixed\r\nto each description line\r\n@return the StringBuffer with the rendered Options contents.\r\n",
      "diff": "@@ -1,49 +1,50 @@\n protected StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad) {\r\n     final String lpad \u003d createPadding(leftPad);\r\n     final String dpad \u003d createPadding(descPad);\r\n     int max \u003d 0;\r\n-    StringBuffer optBuf;\r\n     List\u003cStringBuffer\u003e prefixList \u003d new ArrayList\u003cStringBuffer\u003e();\r\n     List\u003cOption\u003e optList \u003d options.helpOptions();\r\n-    Collections.sort(optList, getOptionComparator());\r\n+    if (getOptionComparator() !\u003d null) {\r\n+        Collections.sort(optList, getOptionComparator());\r\n+    }\r\n     for (Option option : optList) {\r\n-        optBuf \u003d new StringBuffer();\r\n+        StringBuffer optBuf \u003d new StringBuffer();\r\n         if (option.getOpt() \u003d\u003d null) {\r\n             optBuf.append(lpad).append(\"   \").append(getLongOptPrefix()).append(option.getLongOpt());\r\n         } else {\r\n             optBuf.append(lpad).append(getOptPrefix()).append(option.getOpt());\r\n             if (option.hasLongOpt()) {\r\n                 optBuf.append(\u0027,\u0027).append(getLongOptPrefix()).append(option.getLongOpt());\r\n             }\r\n         }\r\n         if (option.hasArg()) {\r\n             String argName \u003d option.getArgName();\r\n             if (argName !\u003d null \u0026\u0026 argName.length() \u003d\u003d 0) {\r\n                 optBuf.append(\u0027 \u0027);\r\n             } else {\r\n                 optBuf.append(option.hasLongOpt() ? longOptSeparator : \" \");\r\n                 optBuf.append(\"\u003c\").append(argName !\u003d null ? option.getArgName() : getArgName()).append(\"\u003e\");\r\n             }\r\n         }\r\n         prefixList.add(optBuf);\r\n         max \u003d (optBuf.length() \u003e max) ? optBuf.length() : max;\r\n     }\r\n     int x \u003d 0;\r\n     for (Iterator i \u003d optList.iterator(); i.hasNext(); ) {\r\n         Option option \u003d (Option) i.next();\r\n-        optBuf \u003d new StringBuffer(prefixList.get(x++).toString());\r\n+        StringBuffer optBuf \u003d new StringBuffer(prefixList.get(x++).toString());\r\n         if (optBuf.length() \u003c max) {\r\n             optBuf.append(createPadding(max - optBuf.length()));\r\n         }\r\n         optBuf.append(dpad);\r\n         int nextLineTabStop \u003d max + descPad;\r\n         if (option.getDescription() !\u003d null) {\r\n             optBuf.append(option.getDescription());\r\n         }\r\n         renderWrappedText(sb, width, nextLineTabStop, optBuf.toString());\r\n         if (i.hasNext()) {\r\n             sb.append(getNewLine());\r\n         }\r\n     }\r\n     return sb;\r\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "a1b5d44432c057cf675f051bb20379937565f4ef": {
      "type": "Ybodychange",
      "commitMessage": "Moving to Java 5\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/cli/trunk@1091539 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "4/12/11 9:57 PM",
      "commitName": "a1b5d44432c057cf675f051bb20379937565f4ef",
      "commitAuthor": "Emmanuel Bourg",
      "commitDateOld": "7/21/10 7:49 PM",
      "commitNameOld": "3d57a495145916d1cd183cced771935c06da786a",
      "commitAuthorOld": "Emmanuel Bourg",
      "daysBetweenCommits": 265.09,
      "commitsBetweenForRepo": 11,
      "commitsBetweenForFile": 1,
      "actualSource": "protected StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad) {\r\n    final String lpad \u003d createPadding(leftPad);\r\n    final String dpad \u003d createPadding(descPad);\r\n    int max \u003d 0;\r\n    StringBuffer optBuf;\r\n    List\u003cStringBuffer\u003e prefixList \u003d new ArrayList\u003cStringBuffer\u003e();\r\n    List\u003cOption\u003e optList \u003d options.helpOptions();\r\n    Collections.sort(optList, getOptionComparator());\r\n    for (Option option : optList) {\r\n        optBuf \u003d new StringBuffer();\r\n        if (option.getOpt() \u003d\u003d null) {\r\n            optBuf.append(lpad).append(\"   \").append(getLongOptPrefix()).append(option.getLongOpt());\r\n        } else {\r\n            optBuf.append(lpad).append(getOptPrefix()).append(option.getOpt());\r\n            if (option.hasLongOpt()) {\r\n                optBuf.append(\u0027,\u0027).append(getLongOptPrefix()).append(option.getLongOpt());\r\n            }\r\n        }\r\n        if (option.hasArg()) {\r\n            String argName \u003d option.getArgName();\r\n            if (argName !\u003d null \u0026\u0026 argName.length() \u003d\u003d 0) {\r\n                optBuf.append(\u0027 \u0027);\r\n            } else {\r\n                optBuf.append(option.hasLongOpt() ? longOptSeparator : \" \");\r\n                optBuf.append(\"\u003c\").append(argName !\u003d null ? option.getArgName() : getArgName()).append(\"\u003e\");\r\n            }\r\n        }\r\n        prefixList.add(optBuf);\r\n        max \u003d (optBuf.length() \u003e max) ? optBuf.length() : max;\r\n    }\r\n    int x \u003d 0;\r\n    for (Iterator i \u003d optList.iterator(); i.hasNext(); ) {\r\n        Option option \u003d (Option) i.next();\r\n        optBuf \u003d new StringBuffer(prefixList.get(x++).toString());\r\n        if (optBuf.length() \u003c max) {\r\n            optBuf.append(createPadding(max - optBuf.length()));\r\n        }\r\n        optBuf.append(dpad);\r\n        int nextLineTabStop \u003d max + descPad;\r\n        if (option.getDescription() !\u003d null) {\r\n            optBuf.append(option.getDescription());\r\n        }\r\n        renderWrappedText(sb, width, nextLineTabStop, optBuf.toString());\r\n        if (i.hasNext()) {\r\n            sb.append(getNewLine());\r\n        }\r\n    }\r\n    return sb;\r\n}",
      "path": "src/main/java/org/apache/commons/cli/HelpFormatter.java",
      "functionStartLine": 750,
      "functionName": "renderOptions",
      "functionAnnotation": "",
      "functionDoc": "Render the specified Options and return the rendered Options\r\nin a StringBuffer.\r\n\r\n@param sb The StringBuffer to place the rendered Options into.\r\n@param width The number of characters to display per line\r\n@param options The command line Options\r\n@param leftPad the number of characters of padding to be prefixed\r\nto each line\r\n@param descPad the number of characters of padding to be prefixed\r\nto each description line\r\n@return the StringBuffer with the rendered Options contents.\r\n",
      "diff": "@@ -1,50 +1,49 @@\n protected StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad) {\r\n     final String lpad \u003d createPadding(leftPad);\r\n     final String dpad \u003d createPadding(descPad);\r\n     int max \u003d 0;\r\n     StringBuffer optBuf;\r\n-    List prefixList \u003d new ArrayList();\r\n-    List optList \u003d options.helpOptions();\r\n+    List\u003cStringBuffer\u003e prefixList \u003d new ArrayList\u003cStringBuffer\u003e();\r\n+    List\u003cOption\u003e optList \u003d options.helpOptions();\r\n     Collections.sort(optList, getOptionComparator());\r\n-    for (Iterator i \u003d optList.iterator(); i.hasNext(); ) {\r\n-        Option option \u003d (Option) i.next();\r\n+    for (Option option : optList) {\r\n         optBuf \u003d new StringBuffer();\r\n         if (option.getOpt() \u003d\u003d null) {\r\n             optBuf.append(lpad).append(\"   \").append(getLongOptPrefix()).append(option.getLongOpt());\r\n         } else {\r\n             optBuf.append(lpad).append(getOptPrefix()).append(option.getOpt());\r\n             if (option.hasLongOpt()) {\r\n                 optBuf.append(\u0027,\u0027).append(getLongOptPrefix()).append(option.getLongOpt());\r\n             }\r\n         }\r\n         if (option.hasArg()) {\r\n             String argName \u003d option.getArgName();\r\n             if (argName !\u003d null \u0026\u0026 argName.length() \u003d\u003d 0) {\r\n                 optBuf.append(\u0027 \u0027);\r\n             } else {\r\n                 optBuf.append(option.hasLongOpt() ? longOptSeparator : \" \");\r\n                 optBuf.append(\"\u003c\").append(argName !\u003d null ? option.getArgName() : getArgName()).append(\"\u003e\");\r\n             }\r\n         }\r\n         prefixList.add(optBuf);\r\n         max \u003d (optBuf.length() \u003e max) ? optBuf.length() : max;\r\n     }\r\n     int x \u003d 0;\r\n     for (Iterator i \u003d optList.iterator(); i.hasNext(); ) {\r\n         Option option \u003d (Option) i.next();\r\n         optBuf \u003d new StringBuffer(prefixList.get(x++).toString());\r\n         if (optBuf.length() \u003c max) {\r\n             optBuf.append(createPadding(max - optBuf.length()));\r\n         }\r\n         optBuf.append(dpad);\r\n         int nextLineTabStop \u003d max + descPad;\r\n         if (option.getDescription() !\u003d null) {\r\n             optBuf.append(option.getDescription());\r\n         }\r\n         renderWrappedText(sb, width, nextLineTabStop, optBuf.toString());\r\n         if (i.hasNext()) {\r\n             sb.append(getNewLine());\r\n         }\r\n     }\r\n     return sb;\r\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "3d57a495145916d1cd183cced771935c06da786a": {
      "type": "Ybodychange",
      "commitMessage": "Removed the direct usage of the deprecated fields in HelpFormatter\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/cli/trunk@966310 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "7/21/10 7:49 PM",
      "commitName": "3d57a495145916d1cd183cced771935c06da786a",
      "commitAuthor": "Emmanuel Bourg",
      "commitDateOld": "7/21/10 7:40 PM",
      "commitNameOld": "483f811dfefdc6bee162481425f261d983f15e4a",
      "commitAuthorOld": "Emmanuel Bourg",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "protected StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad) {\r\n    final String lpad \u003d createPadding(leftPad);\r\n    final String dpad \u003d createPadding(descPad);\r\n    int max \u003d 0;\r\n    StringBuffer optBuf;\r\n    List prefixList \u003d new ArrayList();\r\n    List optList \u003d options.helpOptions();\r\n    Collections.sort(optList, getOptionComparator());\r\n    for (Iterator i \u003d optList.iterator(); i.hasNext(); ) {\r\n        Option option \u003d (Option) i.next();\r\n        optBuf \u003d new StringBuffer();\r\n        if (option.getOpt() \u003d\u003d null) {\r\n            optBuf.append(lpad).append(\"   \").append(getLongOptPrefix()).append(option.getLongOpt());\r\n        } else {\r\n            optBuf.append(lpad).append(getOptPrefix()).append(option.getOpt());\r\n            if (option.hasLongOpt()) {\r\n                optBuf.append(\u0027,\u0027).append(getLongOptPrefix()).append(option.getLongOpt());\r\n            }\r\n        }\r\n        if (option.hasArg()) {\r\n            String argName \u003d option.getArgName();\r\n            if (argName !\u003d null \u0026\u0026 argName.length() \u003d\u003d 0) {\r\n                optBuf.append(\u0027 \u0027);\r\n            } else {\r\n                optBuf.append(option.hasLongOpt() ? longOptSeparator : \" \");\r\n                optBuf.append(\"\u003c\").append(argName !\u003d null ? option.getArgName() : getArgName()).append(\"\u003e\");\r\n            }\r\n        }\r\n        prefixList.add(optBuf);\r\n        max \u003d (optBuf.length() \u003e max) ? optBuf.length() : max;\r\n    }\r\n    int x \u003d 0;\r\n    for (Iterator i \u003d optList.iterator(); i.hasNext(); ) {\r\n        Option option \u003d (Option) i.next();\r\n        optBuf \u003d new StringBuffer(prefixList.get(x++).toString());\r\n        if (optBuf.length() \u003c max) {\r\n            optBuf.append(createPadding(max - optBuf.length()));\r\n        }\r\n        optBuf.append(dpad);\r\n        int nextLineTabStop \u003d max + descPad;\r\n        if (option.getDescription() !\u003d null) {\r\n            optBuf.append(option.getDescription());\r\n        }\r\n        renderWrappedText(sb, width, nextLineTabStop, optBuf.toString());\r\n        if (i.hasNext()) {\r\n            sb.append(getNewLine());\r\n        }\r\n    }\r\n    return sb;\r\n}",
      "path": "src/main/java/org/apache/commons/cli/HelpFormatter.java",
      "functionStartLine": 750,
      "functionName": "renderOptions",
      "functionAnnotation": "",
      "functionDoc": "Render the specified Options and return the rendered Options\r\nin a StringBuffer.\r\n\r\n@param sb The StringBuffer to place the rendered Options into.\r\n@param width The number of characters to display per line\r\n@param options The command line Options\r\n@param leftPad the number of characters of padding to be prefixed\r\nto each line\r\n@param descPad the number of characters of padding to be prefixed\r\nto each description line\r\n@return the StringBuffer with the rendered Options contents.\r\n",
      "diff": "@@ -1,50 +1,50 @@\n protected StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad) {\r\n     final String lpad \u003d createPadding(leftPad);\r\n     final String dpad \u003d createPadding(descPad);\r\n     int max \u003d 0;\r\n     StringBuffer optBuf;\r\n     List prefixList \u003d new ArrayList();\r\n     List optList \u003d options.helpOptions();\r\n     Collections.sort(optList, getOptionComparator());\r\n     for (Iterator i \u003d optList.iterator(); i.hasNext(); ) {\r\n         Option option \u003d (Option) i.next();\r\n         optBuf \u003d new StringBuffer();\r\n         if (option.getOpt() \u003d\u003d null) {\r\n-            optBuf.append(lpad).append(\"   \" + defaultLongOptPrefix).append(option.getLongOpt());\r\n+            optBuf.append(lpad).append(\"   \").append(getLongOptPrefix()).append(option.getLongOpt());\r\n         } else {\r\n-            optBuf.append(lpad).append(defaultOptPrefix).append(option.getOpt());\r\n+            optBuf.append(lpad).append(getOptPrefix()).append(option.getOpt());\r\n             if (option.hasLongOpt()) {\r\n-                optBuf.append(\u0027,\u0027).append(defaultLongOptPrefix).append(option.getLongOpt());\r\n+                optBuf.append(\u0027,\u0027).append(getLongOptPrefix()).append(option.getLongOpt());\r\n             }\r\n         }\r\n         if (option.hasArg()) {\r\n             String argName \u003d option.getArgName();\r\n             if (argName !\u003d null \u0026\u0026 argName.length() \u003d\u003d 0) {\r\n                 optBuf.append(\u0027 \u0027);\r\n             } else {\r\n                 optBuf.append(option.hasLongOpt() ? longOptSeparator : \" \");\r\n                 optBuf.append(\"\u003c\").append(argName !\u003d null ? option.getArgName() : getArgName()).append(\"\u003e\");\r\n             }\r\n         }\r\n         prefixList.add(optBuf);\r\n         max \u003d (optBuf.length() \u003e max) ? optBuf.length() : max;\r\n     }\r\n     int x \u003d 0;\r\n     for (Iterator i \u003d optList.iterator(); i.hasNext(); ) {\r\n         Option option \u003d (Option) i.next();\r\n         optBuf \u003d new StringBuffer(prefixList.get(x++).toString());\r\n         if (optBuf.length() \u003c max) {\r\n             optBuf.append(createPadding(max - optBuf.length()));\r\n         }\r\n         optBuf.append(dpad);\r\n         int nextLineTabStop \u003d max + descPad;\r\n         if (option.getDescription() !\u003d null) {\r\n             optBuf.append(option.getDescription());\r\n         }\r\n         renderWrappedText(sb, width, nextLineTabStop, optBuf.toString());\r\n         if (i.hasNext()) {\r\n-            sb.append(defaultNewLine);\r\n+            sb.append(getNewLine());\r\n         }\r\n     }\r\n     return sb;\r\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "4d2c8a22d1e1831858029b8ef225a07f4445a221": {
      "type": "Ybodychange",
      "commitMessage": "The default argument name displayed is now properly controlled by the help formatter (CLI-205)\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/cli/trunk@956303 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "6/20/10 1:06 AM",
      "commitName": "4d2c8a22d1e1831858029b8ef225a07f4445a221",
      "commitAuthor": "Emmanuel Bourg",
      "commitDateOld": "6/16/10 1:32 PM",
      "commitNameOld": "d8df5107a76b1a7fa579ec91f5482be901d18435",
      "commitAuthorOld": "Emmanuel Bourg",
      "daysBetweenCommits": 3.48,
      "commitsBetweenForRepo": 6,
      "commitsBetweenForFile": 1,
      "actualSource": "protected StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad) {\r\n    final String lpad \u003d createPadding(leftPad);\r\n    final String dpad \u003d createPadding(descPad);\r\n    int max \u003d 0;\r\n    StringBuffer optBuf;\r\n    List prefixList \u003d new ArrayList();\r\n    List optList \u003d options.helpOptions();\r\n    Collections.sort(optList, getOptionComparator());\r\n    for (Iterator i \u003d optList.iterator(); i.hasNext(); ) {\r\n        Option option \u003d (Option) i.next();\r\n        optBuf \u003d new StringBuffer();\r\n        if (option.getOpt() \u003d\u003d null) {\r\n            optBuf.append(lpad).append(\"   \" + defaultLongOptPrefix).append(option.getLongOpt());\r\n        } else {\r\n            optBuf.append(lpad).append(defaultOptPrefix).append(option.getOpt());\r\n            if (option.hasLongOpt()) {\r\n                optBuf.append(\u0027,\u0027).append(defaultLongOptPrefix).append(option.getLongOpt());\r\n            }\r\n        }\r\n        if (option.hasArg()) {\r\n            String argName \u003d option.getArgName();\r\n            if (argName !\u003d null \u0026\u0026 argName.length() \u003d\u003d 0) {\r\n                optBuf.append(\u0027 \u0027);\r\n            } else {\r\n                optBuf.append(option.hasLongOpt() ? longOptSeparator : \" \");\r\n                optBuf.append(\"\u003c\").append(argName !\u003d null ? option.getArgName() : getArgName()).append(\"\u003e\");\r\n            }\r\n        }\r\n        prefixList.add(optBuf);\r\n        max \u003d (optBuf.length() \u003e max) ? optBuf.length() : max;\r\n    }\r\n    int x \u003d 0;\r\n    for (Iterator i \u003d optList.iterator(); i.hasNext(); ) {\r\n        Option option \u003d (Option) i.next();\r\n        optBuf \u003d new StringBuffer(prefixList.get(x++).toString());\r\n        if (optBuf.length() \u003c max) {\r\n            optBuf.append(createPadding(max - optBuf.length()));\r\n        }\r\n        optBuf.append(dpad);\r\n        int nextLineTabStop \u003d max + descPad;\r\n        if (option.getDescription() !\u003d null) {\r\n            optBuf.append(option.getDescription());\r\n        }\r\n        renderWrappedText(sb, width, nextLineTabStop, optBuf.toString());\r\n        if (i.hasNext()) {\r\n            sb.append(defaultNewLine);\r\n        }\r\n    }\r\n    return sb;\r\n}",
      "path": "src/main/java/org/apache/commons/cli/HelpFormatter.java",
      "functionStartLine": 746,
      "functionName": "renderOptions",
      "functionAnnotation": "",
      "functionDoc": "Render the specified Options and return the rendered Options\r\nin a StringBuffer.\r\n\r\n@param sb The StringBuffer to place the rendered Options into.\r\n@param width The number of characters to display per line\r\n@param options The command line Options\r\n@param leftPad the number of characters of padding to be prefixed\r\nto each line\r\n@param descPad the number of characters of padding to be prefixed\r\nto each description line\r\n@return the StringBuffer with the rendered Options contents.\r\n",
      "diff": "@@ -1,49 +1,50 @@\n protected StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad) {\r\n     final String lpad \u003d createPadding(leftPad);\r\n     final String dpad \u003d createPadding(descPad);\r\n     int max \u003d 0;\r\n     StringBuffer optBuf;\r\n     List prefixList \u003d new ArrayList();\r\n     List optList \u003d options.helpOptions();\r\n     Collections.sort(optList, getOptionComparator());\r\n     for (Iterator i \u003d optList.iterator(); i.hasNext(); ) {\r\n         Option option \u003d (Option) i.next();\r\n         optBuf \u003d new StringBuffer();\r\n         if (option.getOpt() \u003d\u003d null) {\r\n             optBuf.append(lpad).append(\"   \" + defaultLongOptPrefix).append(option.getLongOpt());\r\n         } else {\r\n             optBuf.append(lpad).append(defaultOptPrefix).append(option.getOpt());\r\n             if (option.hasLongOpt()) {\r\n                 optBuf.append(\u0027,\u0027).append(defaultLongOptPrefix).append(option.getLongOpt());\r\n             }\r\n         }\r\n         if (option.hasArg()) {\r\n-            if (option.hasArgName()) {\r\n-                optBuf.append(option.hasLongOpt() ? longOptSeparator : \" \");\r\n-                optBuf.append(\"\u003c\").append(option.getArgName()).append(\"\u003e\");\r\n-            } else {\r\n+            String argName \u003d option.getArgName();\r\n+            if (argName !\u003d null \u0026\u0026 argName.length() \u003d\u003d 0) {\r\n                 optBuf.append(\u0027 \u0027);\r\n+            } else {\r\n+                optBuf.append(option.hasLongOpt() ? longOptSeparator : \" \");\r\n+                optBuf.append(\"\u003c\").append(argName !\u003d null ? option.getArgName() : getArgName()).append(\"\u003e\");\r\n             }\r\n         }\r\n         prefixList.add(optBuf);\r\n         max \u003d (optBuf.length() \u003e max) ? optBuf.length() : max;\r\n     }\r\n     int x \u003d 0;\r\n     for (Iterator i \u003d optList.iterator(); i.hasNext(); ) {\r\n         Option option \u003d (Option) i.next();\r\n         optBuf \u003d new StringBuffer(prefixList.get(x++).toString());\r\n         if (optBuf.length() \u003c max) {\r\n             optBuf.append(createPadding(max - optBuf.length()));\r\n         }\r\n         optBuf.append(dpad);\r\n         int nextLineTabStop \u003d max + descPad;\r\n         if (option.getDescription() !\u003d null) {\r\n             optBuf.append(option.getDescription());\r\n         }\r\n         renderWrappedText(sb, width, nextLineTabStop, optBuf.toString());\r\n         if (i.hasNext()) {\r\n             sb.append(defaultNewLine);\r\n         }\r\n     }\r\n     return sb;\r\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "d8df5107a76b1a7fa579ec91f5482be901d18435": {
      "type": "Ybodychange",
      "commitMessage": "Fixed some of the checkstyle errors\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/cli/trunk@955185 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "6/16/10 1:32 PM",
      "commitName": "d8df5107a76b1a7fa579ec91f5482be901d18435",
      "commitAuthor": "Emmanuel Bourg",
      "commitDateOld": "6/16/10 12:45 PM",
      "commitNameOld": "1596f3bbe57986361da4ac1a23634dd5b00d10df",
      "commitAuthorOld": "Emmanuel Bourg",
      "daysBetweenCommits": 0.03,
      "commitsBetweenForRepo": 3,
      "commitsBetweenForFile": 1,
      "actualSource": "protected StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad) {\r\n    final String lpad \u003d createPadding(leftPad);\r\n    final String dpad \u003d createPadding(descPad);\r\n    int max \u003d 0;\r\n    StringBuffer optBuf;\r\n    List prefixList \u003d new ArrayList();\r\n    List optList \u003d options.helpOptions();\r\n    Collections.sort(optList, getOptionComparator());\r\n    for (Iterator i \u003d optList.iterator(); i.hasNext(); ) {\r\n        Option option \u003d (Option) i.next();\r\n        optBuf \u003d new StringBuffer();\r\n        if (option.getOpt() \u003d\u003d null) {\r\n            optBuf.append(lpad).append(\"   \" + defaultLongOptPrefix).append(option.getLongOpt());\r\n        } else {\r\n            optBuf.append(lpad).append(defaultOptPrefix).append(option.getOpt());\r\n            if (option.hasLongOpt()) {\r\n                optBuf.append(\u0027,\u0027).append(defaultLongOptPrefix).append(option.getLongOpt());\r\n            }\r\n        }\r\n        if (option.hasArg()) {\r\n            if (option.hasArgName()) {\r\n                optBuf.append(option.hasLongOpt() ? longOptSeparator : \" \");\r\n                optBuf.append(\"\u003c\").append(option.getArgName()).append(\"\u003e\");\r\n            } else {\r\n                optBuf.append(\u0027 \u0027);\r\n            }\r\n        }\r\n        prefixList.add(optBuf);\r\n        max \u003d (optBuf.length() \u003e max) ? optBuf.length() : max;\r\n    }\r\n    int x \u003d 0;\r\n    for (Iterator i \u003d optList.iterator(); i.hasNext(); ) {\r\n        Option option \u003d (Option) i.next();\r\n        optBuf \u003d new StringBuffer(prefixList.get(x++).toString());\r\n        if (optBuf.length() \u003c max) {\r\n            optBuf.append(createPadding(max - optBuf.length()));\r\n        }\r\n        optBuf.append(dpad);\r\n        int nextLineTabStop \u003d max + descPad;\r\n        if (option.getDescription() !\u003d null) {\r\n            optBuf.append(option.getDescription());\r\n        }\r\n        renderWrappedText(sb, width, nextLineTabStop, optBuf.toString());\r\n        if (i.hasNext()) {\r\n            sb.append(defaultNewLine);\r\n        }\r\n    }\r\n    return sb;\r\n}",
      "path": "src/main/java/org/apache/commons/cli/HelpFormatter.java",
      "functionStartLine": 746,
      "functionName": "renderOptions",
      "functionAnnotation": "",
      "functionDoc": "Render the specified Options and return the rendered Options\r\nin a StringBuffer.\r\n\r\n@param sb The StringBuffer to place the rendered Options into.\r\n@param width The number of characters to display per line\r\n@param options The command line Options\r\n@param leftPad the number of characters of padding to be prefixed\r\nto each line\r\n@param descPad the number of characters of padding to be prefixed\r\nto each description line\r\n@return the StringBuffer with the rendered Options contents.\r\n",
      "diff": "@@ -1,49 +1,49 @@\n protected StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad) {\r\n     final String lpad \u003d createPadding(leftPad);\r\n     final String dpad \u003d createPadding(descPad);\r\n     int max \u003d 0;\r\n     StringBuffer optBuf;\r\n     List prefixList \u003d new ArrayList();\r\n     List optList \u003d options.helpOptions();\r\n     Collections.sort(optList, getOptionComparator());\r\n     for (Iterator i \u003d optList.iterator(); i.hasNext(); ) {\r\n         Option option \u003d (Option) i.next();\r\n-        optBuf \u003d new StringBuffer(8);\r\n+        optBuf \u003d new StringBuffer();\r\n         if (option.getOpt() \u003d\u003d null) {\r\n             optBuf.append(lpad).append(\"   \" + defaultLongOptPrefix).append(option.getLongOpt());\r\n         } else {\r\n             optBuf.append(lpad).append(defaultOptPrefix).append(option.getOpt());\r\n             if (option.hasLongOpt()) {\r\n                 optBuf.append(\u0027,\u0027).append(defaultLongOptPrefix).append(option.getLongOpt());\r\n             }\r\n         }\r\n         if (option.hasArg()) {\r\n             if (option.hasArgName()) {\r\n                 optBuf.append(option.hasLongOpt() ? longOptSeparator : \" \");\r\n                 optBuf.append(\"\u003c\").append(option.getArgName()).append(\"\u003e\");\r\n             } else {\r\n                 optBuf.append(\u0027 \u0027);\r\n             }\r\n         }\r\n         prefixList.add(optBuf);\r\n         max \u003d (optBuf.length() \u003e max) ? optBuf.length() : max;\r\n     }\r\n     int x \u003d 0;\r\n     for (Iterator i \u003d optList.iterator(); i.hasNext(); ) {\r\n         Option option \u003d (Option) i.next();\r\n         optBuf \u003d new StringBuffer(prefixList.get(x++).toString());\r\n         if (optBuf.length() \u003c max) {\r\n             optBuf.append(createPadding(max - optBuf.length()));\r\n         }\r\n         optBuf.append(dpad);\r\n         int nextLineTabStop \u003d max + descPad;\r\n         if (option.getDescription() !\u003d null) {\r\n             optBuf.append(option.getDescription());\r\n         }\r\n         renderWrappedText(sb, width, nextLineTabStop, optBuf.toString());\r\n         if (i.hasNext()) {\r\n             sb.append(defaultNewLine);\r\n         }\r\n     }\r\n     return sb;\r\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "1596f3bbe57986361da4ac1a23634dd5b00d10df": {
      "type": "Yfilerename",
      "commitMessage": "Switched to the Maven 2 default directory layout (part 3)\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/cli/trunk@955173 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "6/16/10 12:45 PM",
      "commitName": "1596f3bbe57986361da4ac1a23634dd5b00d10df",
      "commitAuthor": "Emmanuel Bourg",
      "commitDateOld": "6/16/10 12:42 PM",
      "commitNameOld": "406a35f1a128944b7c51dcbc4a1f04c3f8bec3e6",
      "commitAuthorOld": "Emmanuel Bourg",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "protected StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad) {\r\n    final String lpad \u003d createPadding(leftPad);\r\n    final String dpad \u003d createPadding(descPad);\r\n    int max \u003d 0;\r\n    StringBuffer optBuf;\r\n    List prefixList \u003d new ArrayList();\r\n    List optList \u003d options.helpOptions();\r\n    Collections.sort(optList, getOptionComparator());\r\n    for (Iterator i \u003d optList.iterator(); i.hasNext(); ) {\r\n        Option option \u003d (Option) i.next();\r\n        optBuf \u003d new StringBuffer(8);\r\n        if (option.getOpt() \u003d\u003d null) {\r\n            optBuf.append(lpad).append(\"   \" + defaultLongOptPrefix).append(option.getLongOpt());\r\n        } else {\r\n            optBuf.append(lpad).append(defaultOptPrefix).append(option.getOpt());\r\n            if (option.hasLongOpt()) {\r\n                optBuf.append(\u0027,\u0027).append(defaultLongOptPrefix).append(option.getLongOpt());\r\n            }\r\n        }\r\n        if (option.hasArg()) {\r\n            if (option.hasArgName()) {\r\n                optBuf.append(option.hasLongOpt() ? longOptSeparator : \" \");\r\n                optBuf.append(\"\u003c\").append(option.getArgName()).append(\"\u003e\");\r\n            } else {\r\n                optBuf.append(\u0027 \u0027);\r\n            }\r\n        }\r\n        prefixList.add(optBuf);\r\n        max \u003d (optBuf.length() \u003e max) ? optBuf.length() : max;\r\n    }\r\n    int x \u003d 0;\r\n    for (Iterator i \u003d optList.iterator(); i.hasNext(); ) {\r\n        Option option \u003d (Option) i.next();\r\n        optBuf \u003d new StringBuffer(prefixList.get(x++).toString());\r\n        if (optBuf.length() \u003c max) {\r\n            optBuf.append(createPadding(max - optBuf.length()));\r\n        }\r\n        optBuf.append(dpad);\r\n        int nextLineTabStop \u003d max + descPad;\r\n        if (option.getDescription() !\u003d null) {\r\n            optBuf.append(option.getDescription());\r\n        }\r\n        renderWrappedText(sb, width, nextLineTabStop, optBuf.toString());\r\n        if (i.hasNext()) {\r\n            sb.append(defaultNewLine);\r\n        }\r\n    }\r\n    return sb;\r\n}",
      "path": "src/main/java/org/apache/commons/cli/HelpFormatter.java",
      "functionStartLine": 746,
      "functionName": "renderOptions",
      "functionAnnotation": "",
      "functionDoc": "Render the specified Options and return the rendered Options\r\nin a StringBuffer.\r\n\r\n@param sb The StringBuffer to place the rendered Options into.\r\n@param width The number of characters to display per line\r\n@param options The command line Options\r\n@param leftPad the number of characters of padding to be prefixed\r\nto each line\r\n@param descPad the number of characters of padding to be prefixed\r\nto each description line\r\n@return the StringBuffer with the rendered Options contents.\r\n",
      "diff": "",
      "extendedDetails": {
        "oldPath": "src/java/org/apache/commons/cli/HelpFormatter.java",
        "newPath": "src/main/java/org/apache/commons/cli/HelpFormatter.java"
      }
    },
    "180a16def56be368c2c33a56c1778b8d7ce170c7": {
      "type": "Ybodychange",
      "commitMessage": "Added a parameter in HelpFormatter to specify the separator displayed between a long option and its value (CLI-169)\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/cli/trunk@954899 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "6/15/10 5:11 PM",
      "commitName": "180a16def56be368c2c33a56c1778b8d7ce170c7",
      "commitAuthor": "Emmanuel Bourg",
      "commitDateOld": "5/28/09 7:22 PM",
      "commitNameOld": "6a999186695d404ccb6c1528df68fe2eb42863c2",
      "commitAuthorOld": "Jim Jagielski",
      "daysBetweenCommits": 382.91,
      "commitsBetweenForRepo": 18,
      "commitsBetweenForFile": 1,
      "actualSource": "protected StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad) {\r\n    final String lpad \u003d createPadding(leftPad);\r\n    final String dpad \u003d createPadding(descPad);\r\n    int max \u003d 0;\r\n    StringBuffer optBuf;\r\n    List prefixList \u003d new ArrayList();\r\n    List optList \u003d options.helpOptions();\r\n    Collections.sort(optList, getOptionComparator());\r\n    for (Iterator i \u003d optList.iterator(); i.hasNext(); ) {\r\n        Option option \u003d (Option) i.next();\r\n        optBuf \u003d new StringBuffer(8);\r\n        if (option.getOpt() \u003d\u003d null) {\r\n            optBuf.append(lpad).append(\"   \" + defaultLongOptPrefix).append(option.getLongOpt());\r\n        } else {\r\n            optBuf.append(lpad).append(defaultOptPrefix).append(option.getOpt());\r\n            if (option.hasLongOpt()) {\r\n                optBuf.append(\u0027,\u0027).append(defaultLongOptPrefix).append(option.getLongOpt());\r\n            }\r\n        }\r\n        if (option.hasArg()) {\r\n            if (option.hasArgName()) {\r\n                optBuf.append(option.hasLongOpt() ? longOptSeparator : \" \");\r\n                optBuf.append(\"\u003c\").append(option.getArgName()).append(\"\u003e\");\r\n            } else {\r\n                optBuf.append(\u0027 \u0027);\r\n            }\r\n        }\r\n        prefixList.add(optBuf);\r\n        max \u003d (optBuf.length() \u003e max) ? optBuf.length() : max;\r\n    }\r\n    int x \u003d 0;\r\n    for (Iterator i \u003d optList.iterator(); i.hasNext(); ) {\r\n        Option option \u003d (Option) i.next();\r\n        optBuf \u003d new StringBuffer(prefixList.get(x++).toString());\r\n        if (optBuf.length() \u003c max) {\r\n            optBuf.append(createPadding(max - optBuf.length()));\r\n        }\r\n        optBuf.append(dpad);\r\n        int nextLineTabStop \u003d max + descPad;\r\n        if (option.getDescription() !\u003d null) {\r\n            optBuf.append(option.getDescription());\r\n        }\r\n        renderWrappedText(sb, width, nextLineTabStop, optBuf.toString());\r\n        if (i.hasNext()) {\r\n            sb.append(defaultNewLine);\r\n        }\r\n    }\r\n    return sb;\r\n}",
      "path": "src/java/org/apache/commons/cli/HelpFormatter.java",
      "functionStartLine": 746,
      "functionName": "renderOptions",
      "functionAnnotation": "",
      "functionDoc": "Render the specified Options and return the rendered Options\r\nin a StringBuffer.\r\n\r\n@param sb The StringBuffer to place the rendered Options into.\r\n@param width The number of characters to display per line\r\n@param options The command line Options\r\n@param leftPad the number of characters of padding to be prefixed\r\nto each line\r\n@param descPad the number of characters of padding to be prefixed\r\nto each description line\r\n@return the StringBuffer with the rendered Options contents.\r\n",
      "diff": "@@ -1,48 +1,49 @@\n protected StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad) {\r\n     final String lpad \u003d createPadding(leftPad);\r\n     final String dpad \u003d createPadding(descPad);\r\n     int max \u003d 0;\r\n     StringBuffer optBuf;\r\n     List prefixList \u003d new ArrayList();\r\n     List optList \u003d options.helpOptions();\r\n     Collections.sort(optList, getOptionComparator());\r\n     for (Iterator i \u003d optList.iterator(); i.hasNext(); ) {\r\n         Option option \u003d (Option) i.next();\r\n         optBuf \u003d new StringBuffer(8);\r\n         if (option.getOpt() \u003d\u003d null) {\r\n             optBuf.append(lpad).append(\"   \" + defaultLongOptPrefix).append(option.getLongOpt());\r\n         } else {\r\n             optBuf.append(lpad).append(defaultOptPrefix).append(option.getOpt());\r\n             if (option.hasLongOpt()) {\r\n                 optBuf.append(\u0027,\u0027).append(defaultLongOptPrefix).append(option.getLongOpt());\r\n             }\r\n         }\r\n         if (option.hasArg()) {\r\n             if (option.hasArgName()) {\r\n-                optBuf.append(\" \u003c\").append(option.getArgName()).append(\"\u003e\");\r\n+                optBuf.append(option.hasLongOpt() ? longOptSeparator : \" \");\r\n+                optBuf.append(\"\u003c\").append(option.getArgName()).append(\"\u003e\");\r\n             } else {\r\n                 optBuf.append(\u0027 \u0027);\r\n             }\r\n         }\r\n         prefixList.add(optBuf);\r\n         max \u003d (optBuf.length() \u003e max) ? optBuf.length() : max;\r\n     }\r\n     int x \u003d 0;\r\n     for (Iterator i \u003d optList.iterator(); i.hasNext(); ) {\r\n         Option option \u003d (Option) i.next();\r\n         optBuf \u003d new StringBuffer(prefixList.get(x++).toString());\r\n         if (optBuf.length() \u003c max) {\r\n             optBuf.append(createPadding(max - optBuf.length()));\r\n         }\r\n         optBuf.append(dpad);\r\n         int nextLineTabStop \u003d max + descPad;\r\n         if (option.getDescription() !\u003d null) {\r\n             optBuf.append(option.getDescription());\r\n         }\r\n         renderWrappedText(sb, width, nextLineTabStop, optBuf.toString());\r\n         if (i.hasNext()) {\r\n             sb.append(defaultNewLine);\r\n         }\r\n     }\r\n     return sb;\r\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "147df44faa4eb12ffd4a0063fc3284f784ea67c8": {
      "type": "Ymultichange(Ybodychange,Ydocchange)",
      "commitMessage": "Style update\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/cli/branches/cli-1.x@680644 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "7/29/08 11:13 AM",
      "commitName": "147df44faa4eb12ffd4a0063fc3284f784ea67c8",
      "commitAuthor": "Emmanuel Bourg",
      "subchanges": [
        {
          "type": "Ybodychange",
          "commitMessage": "Style update\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/cli/branches/cli-1.x@680644 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "7/29/08 11:13 AM",
          "commitName": "147df44faa4eb12ffd4a0063fc3284f784ea67c8",
          "commitAuthor": "Emmanuel Bourg",
          "commitDateOld": "5/30/08 1:22 PM",
          "commitNameOld": "d36adebd3547279b709960c902c3fb7b89a9a4ef",
          "commitAuthorOld": "Emmanuel Bourg",
          "daysBetweenCommits": 59.91,
          "commitsBetweenForRepo": 39,
          "commitsBetweenForFile": 1,
          "actualSource": "protected StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad) {\r\n    final String lpad \u003d createPadding(leftPad);\r\n    final String dpad \u003d createPadding(descPad);\r\n    int max \u003d 0;\r\n    StringBuffer optBuf;\r\n    List prefixList \u003d new ArrayList();\r\n    List optList \u003d options.helpOptions();\r\n    Collections.sort(optList, getOptionComparator());\r\n    for (Iterator i \u003d optList.iterator(); i.hasNext(); ) {\r\n        Option option \u003d (Option) i.next();\r\n        optBuf \u003d new StringBuffer(8);\r\n        if (option.getOpt() \u003d\u003d null) {\r\n            optBuf.append(lpad).append(\"   \" + defaultLongOptPrefix).append(option.getLongOpt());\r\n        } else {\r\n            optBuf.append(lpad).append(defaultOptPrefix).append(option.getOpt());\r\n            if (option.hasLongOpt()) {\r\n                optBuf.append(\u0027,\u0027).append(defaultLongOptPrefix).append(option.getLongOpt());\r\n            }\r\n        }\r\n        if (option.hasArg()) {\r\n            if (option.hasArgName()) {\r\n                optBuf.append(\" \u003c\").append(option.getArgName()).append(\"\u003e\");\r\n            } else {\r\n                optBuf.append(\u0027 \u0027);\r\n            }\r\n        }\r\n        prefixList.add(optBuf);\r\n        max \u003d (optBuf.length() \u003e max) ? optBuf.length() : max;\r\n    }\r\n    int x \u003d 0;\r\n    for (Iterator i \u003d optList.iterator(); i.hasNext(); ) {\r\n        Option option \u003d (Option) i.next();\r\n        optBuf \u003d new StringBuffer(prefixList.get(x++).toString());\r\n        if (optBuf.length() \u003c max) {\r\n            optBuf.append(createPadding(max - optBuf.length()));\r\n        }\r\n        optBuf.append(dpad);\r\n        int nextLineTabStop \u003d max + descPad;\r\n        if (option.getDescription() !\u003d null) {\r\n            optBuf.append(option.getDescription());\r\n        }\r\n        renderWrappedText(sb, width, nextLineTabStop, optBuf.toString());\r\n        if (i.hasNext()) {\r\n            sb.append(defaultNewLine);\r\n        }\r\n    }\r\n    return sb;\r\n}",
          "path": "src/java/org/apache/commons/cli/HelpFormatter.java",
          "functionStartLine": 710,
          "functionName": "renderOptions",
          "functionAnnotation": "",
          "functionDoc": "Render the specified Options and return the rendered Options\r\nin a StringBuffer.\r\n\r\n@param sb The StringBuffer to place the rendered Options into.\r\n@param width The number of characters to display per line\r\n@param options The command line Options\r\n@param leftPad the number of characters of padding to be prefixed\r\nto each line\r\n@param descPad the number of characters of padding to be prefixed\r\nto each description line\r\n@return the StringBuffer with the rendered Options contents.\r\n",
          "diff": "@@ -1,49 +1,48 @@\n protected StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad) {\r\n     final String lpad \u003d createPadding(leftPad);\r\n     final String dpad \u003d createPadding(descPad);\r\n     int max \u003d 0;\r\n     StringBuffer optBuf;\r\n     List prefixList \u003d new ArrayList();\r\n-    Option option;\r\n     List optList \u003d options.helpOptions();\r\n     Collections.sort(optList, getOptionComparator());\r\n     for (Iterator i \u003d optList.iterator(); i.hasNext(); ) {\r\n-        option \u003d (Option) i.next();\r\n+        Option option \u003d (Option) i.next();\r\n         optBuf \u003d new StringBuffer(8);\r\n         if (option.getOpt() \u003d\u003d null) {\r\n             optBuf.append(lpad).append(\"   \" + defaultLongOptPrefix).append(option.getLongOpt());\r\n         } else {\r\n             optBuf.append(lpad).append(defaultOptPrefix).append(option.getOpt());\r\n             if (option.hasLongOpt()) {\r\n                 optBuf.append(\u0027,\u0027).append(defaultLongOptPrefix).append(option.getLongOpt());\r\n             }\r\n         }\r\n         if (option.hasArg()) {\r\n             if (option.hasArgName()) {\r\n                 optBuf.append(\" \u003c\").append(option.getArgName()).append(\"\u003e\");\r\n             } else {\r\n                 optBuf.append(\u0027 \u0027);\r\n             }\r\n         }\r\n         prefixList.add(optBuf);\r\n         max \u003d (optBuf.length() \u003e max) ? optBuf.length() : max;\r\n     }\r\n     int x \u003d 0;\r\n     for (Iterator i \u003d optList.iterator(); i.hasNext(); ) {\r\n-        option \u003d (Option) i.next();\r\n+        Option option \u003d (Option) i.next();\r\n         optBuf \u003d new StringBuffer(prefixList.get(x++).toString());\r\n         if (optBuf.length() \u003c max) {\r\n             optBuf.append(createPadding(max - optBuf.length()));\r\n         }\r\n         optBuf.append(dpad);\r\n         int nextLineTabStop \u003d max + descPad;\r\n         if (option.getDescription() !\u003d null) {\r\n             optBuf.append(option.getDescription());\r\n         }\r\n         renderWrappedText(sb, width, nextLineTabStop, optBuf.toString());\r\n         if (i.hasNext()) {\r\n             sb.append(defaultNewLine);\r\n         }\r\n     }\r\n     return sb;\r\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        },
        {
          "type": "Ydocchange",
          "commitMessage": "Style update\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/cli/branches/cli-1.x@680644 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "7/29/08 11:13 AM",
          "commitName": "147df44faa4eb12ffd4a0063fc3284f784ea67c8",
          "commitAuthor": "Emmanuel Bourg",
          "commitDateOld": "5/30/08 1:22 PM",
          "commitNameOld": "d36adebd3547279b709960c902c3fb7b89a9a4ef",
          "commitAuthorOld": "Emmanuel Bourg",
          "daysBetweenCommits": 59.91,
          "commitsBetweenForRepo": 39,
          "commitsBetweenForFile": 1,
          "actualSource": "protected StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad) {\r\n    final String lpad \u003d createPadding(leftPad);\r\n    final String dpad \u003d createPadding(descPad);\r\n    int max \u003d 0;\r\n    StringBuffer optBuf;\r\n    List prefixList \u003d new ArrayList();\r\n    List optList \u003d options.helpOptions();\r\n    Collections.sort(optList, getOptionComparator());\r\n    for (Iterator i \u003d optList.iterator(); i.hasNext(); ) {\r\n        Option option \u003d (Option) i.next();\r\n        optBuf \u003d new StringBuffer(8);\r\n        if (option.getOpt() \u003d\u003d null) {\r\n            optBuf.append(lpad).append(\"   \" + defaultLongOptPrefix).append(option.getLongOpt());\r\n        } else {\r\n            optBuf.append(lpad).append(defaultOptPrefix).append(option.getOpt());\r\n            if (option.hasLongOpt()) {\r\n                optBuf.append(\u0027,\u0027).append(defaultLongOptPrefix).append(option.getLongOpt());\r\n            }\r\n        }\r\n        if (option.hasArg()) {\r\n            if (option.hasArgName()) {\r\n                optBuf.append(\" \u003c\").append(option.getArgName()).append(\"\u003e\");\r\n            } else {\r\n                optBuf.append(\u0027 \u0027);\r\n            }\r\n        }\r\n        prefixList.add(optBuf);\r\n        max \u003d (optBuf.length() \u003e max) ? optBuf.length() : max;\r\n    }\r\n    int x \u003d 0;\r\n    for (Iterator i \u003d optList.iterator(); i.hasNext(); ) {\r\n        Option option \u003d (Option) i.next();\r\n        optBuf \u003d new StringBuffer(prefixList.get(x++).toString());\r\n        if (optBuf.length() \u003c max) {\r\n            optBuf.append(createPadding(max - optBuf.length()));\r\n        }\r\n        optBuf.append(dpad);\r\n        int nextLineTabStop \u003d max + descPad;\r\n        if (option.getDescription() !\u003d null) {\r\n            optBuf.append(option.getDescription());\r\n        }\r\n        renderWrappedText(sb, width, nextLineTabStop, optBuf.toString());\r\n        if (i.hasNext()) {\r\n            sb.append(defaultNewLine);\r\n        }\r\n    }\r\n    return sb;\r\n}",
          "path": "src/java/org/apache/commons/cli/HelpFormatter.java",
          "functionStartLine": 710,
          "functionName": "renderOptions",
          "functionAnnotation": "",
          "functionDoc": "Render the specified Options and return the rendered Options\r\nin a StringBuffer.\r\n\r\n@param sb The StringBuffer to place the rendered Options into.\r\n@param width The number of characters to display per line\r\n@param options The command line Options\r\n@param leftPad the number of characters of padding to be prefixed\r\nto each line\r\n@param descPad the number of characters of padding to be prefixed\r\nto each description line\r\n@return the StringBuffer with the rendered Options contents.\r\n",
          "diff": "@@ -1,49 +1,48 @@\n protected StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad) {\r\n     final String lpad \u003d createPadding(leftPad);\r\n     final String dpad \u003d createPadding(descPad);\r\n     int max \u003d 0;\r\n     StringBuffer optBuf;\r\n     List prefixList \u003d new ArrayList();\r\n-    Option option;\r\n     List optList \u003d options.helpOptions();\r\n     Collections.sort(optList, getOptionComparator());\r\n     for (Iterator i \u003d optList.iterator(); i.hasNext(); ) {\r\n-        option \u003d (Option) i.next();\r\n+        Option option \u003d (Option) i.next();\r\n         optBuf \u003d new StringBuffer(8);\r\n         if (option.getOpt() \u003d\u003d null) {\r\n             optBuf.append(lpad).append(\"   \" + defaultLongOptPrefix).append(option.getLongOpt());\r\n         } else {\r\n             optBuf.append(lpad).append(defaultOptPrefix).append(option.getOpt());\r\n             if (option.hasLongOpt()) {\r\n                 optBuf.append(\u0027,\u0027).append(defaultLongOptPrefix).append(option.getLongOpt());\r\n             }\r\n         }\r\n         if (option.hasArg()) {\r\n             if (option.hasArgName()) {\r\n                 optBuf.append(\" \u003c\").append(option.getArgName()).append(\"\u003e\");\r\n             } else {\r\n                 optBuf.append(\u0027 \u0027);\r\n             }\r\n         }\r\n         prefixList.add(optBuf);\r\n         max \u003d (optBuf.length() \u003e max) ? optBuf.length() : max;\r\n     }\r\n     int x \u003d 0;\r\n     for (Iterator i \u003d optList.iterator(); i.hasNext(); ) {\r\n-        option \u003d (Option) i.next();\r\n+        Option option \u003d (Option) i.next();\r\n         optBuf \u003d new StringBuffer(prefixList.get(x++).toString());\r\n         if (optBuf.length() \u003c max) {\r\n             optBuf.append(createPadding(max - optBuf.length()));\r\n         }\r\n         optBuf.append(dpad);\r\n         int nextLineTabStop \u003d max + descPad;\r\n         if (option.getDescription() !\u003d null) {\r\n             optBuf.append(option.getDescription());\r\n         }\r\n         renderWrappedText(sb, width, nextLineTabStop, optBuf.toString());\r\n         if (i.hasNext()) {\r\n             sb.append(defaultNewLine);\r\n         }\r\n     }\r\n     return sb;\r\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "\u003cp\u003eRender the specified Options and return the rendered Options\r\nin a StringBuffer.\u003c/p\u003e\r\n\r\n@param sb The StringBuffer to place the rendered Options into.\r\n@param width The number of characters to display per line\r\n@param options The command line Options\r\n@param leftPad the number of characters of padding to be prefixed\r\nto each line\r\n@param descPad the number of characters of padding to be prefixed\r\nto each description line\r\n@return the StringBuffer with the rendered Options contents.\r\n",
            "newValue": "Render the specified Options and return the rendered Options\r\nin a StringBuffer.\r\n\r\n@param sb The StringBuffer to place the rendered Options into.\r\n@param width The number of characters to display per line\r\n@param options The command line Options\r\n@param leftPad the number of characters of padding to be prefixed\r\nto each line\r\n@param descPad the number of characters of padding to be prefixed\r\nto each description line\r\n@return the StringBuffer with the rendered Options contents.\r\n"
          }
        }
      ]
    },
    "df8f8e160c5fc9b955c627c4b65c7ba67088b7ac": {
      "type": "Ybodychange",
      "commitMessage": "Making the OptionComparator modifiable so people can change the order in which arguments are printed by the HelpFormatter - as requested in CLI-155\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/cli/branches/cli-1.x@655735 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "5/13/08 7:54 AM",
      "commitName": "df8f8e160c5fc9b955c627c4b65c7ba67088b7ac",
      "commitAuthor": "Henri Yandell",
      "commitDateOld": "5/8/08 9:40 AM",
      "commitNameOld": "4f407378c93b9e2a8e24c855e8bed5eb12bf7a06",
      "commitAuthorOld": "Henri Yandell",
      "daysBetweenCommits": 4.93,
      "commitsBetweenForRepo": 3,
      "commitsBetweenForFile": 1,
      "actualSource": "protected StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad) {\r\n    final String lpad \u003d createPadding(leftPad);\r\n    final String dpad \u003d createPadding(descPad);\r\n    int max \u003d 0;\r\n    StringBuffer optBuf;\r\n    List prefixList \u003d new ArrayList();\r\n    Option option;\r\n    List optList \u003d options.helpOptions();\r\n    Collections.sort(optList, getOptionComparator());\r\n    for (Iterator i \u003d optList.iterator(); i.hasNext(); ) {\r\n        option \u003d (Option) i.next();\r\n        optBuf \u003d new StringBuffer(8);\r\n        if (option.getOpt() \u003d\u003d null) {\r\n            optBuf.append(lpad).append(\"   \" + defaultLongOptPrefix).append(option.getLongOpt());\r\n        } else {\r\n            optBuf.append(lpad).append(defaultOptPrefix).append(option.getOpt());\r\n            if (option.hasLongOpt()) {\r\n                optBuf.append(\u0027,\u0027).append(defaultLongOptPrefix).append(option.getLongOpt());\r\n            }\r\n        }\r\n        if (option.hasArg()) {\r\n            if (option.hasArgName()) {\r\n                optBuf.append(\" \u003c\").append(option.getArgName()).append(\"\u003e\");\r\n            } else {\r\n                optBuf.append(\u0027 \u0027);\r\n            }\r\n        }\r\n        prefixList.add(optBuf);\r\n        max \u003d (optBuf.length() \u003e max) ? optBuf.length() : max;\r\n    }\r\n    int x \u003d 0;\r\n    for (Iterator i \u003d optList.iterator(); i.hasNext(); ) {\r\n        option \u003d (Option) i.next();\r\n        optBuf \u003d new StringBuffer(prefixList.get(x++).toString());\r\n        if (optBuf.length() \u003c max) {\r\n            optBuf.append(createPadding(max - optBuf.length()));\r\n        }\r\n        optBuf.append(dpad);\r\n        int nextLineTabStop \u003d max + descPad;\r\n        if (option.getDescription() !\u003d null) {\r\n            optBuf.append(option.getDescription());\r\n        }\r\n        renderWrappedText(sb, width, nextLineTabStop, optBuf.toString());\r\n        if (i.hasNext()) {\r\n            sb.append(defaultNewLine);\r\n        }\r\n    }\r\n    return sb;\r\n}",
      "path": "src/java/org/apache/commons/cli/HelpFormatter.java",
      "functionStartLine": 726,
      "functionName": "renderOptions",
      "functionAnnotation": "",
      "functionDoc": "\u003cp\u003eRender the specified Options and return the rendered Options\r\nin a StringBuffer.\u003c/p\u003e\r\n\r\n@param sb The StringBuffer to place the rendered Options into.\r\n@param width The number of characters to display per line\r\n@param options The command line Options\r\n@param leftPad the number of characters of padding to be prefixed\r\nto each line\r\n@param descPad the number of characters of padding to be prefixed\r\nto each description line\r\n@return the StringBuffer with the rendered Options contents.\r\n",
      "diff": "@@ -1,49 +1,49 @@\n protected StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad) {\r\n     final String lpad \u003d createPadding(leftPad);\r\n     final String dpad \u003d createPadding(descPad);\r\n     int max \u003d 0;\r\n     StringBuffer optBuf;\r\n     List prefixList \u003d new ArrayList();\r\n     Option option;\r\n     List optList \u003d options.helpOptions();\r\n-    Collections.sort(optList, new OptionComparator());\r\n+    Collections.sort(optList, getOptionComparator());\r\n     for (Iterator i \u003d optList.iterator(); i.hasNext(); ) {\r\n         option \u003d (Option) i.next();\r\n         optBuf \u003d new StringBuffer(8);\r\n         if (option.getOpt() \u003d\u003d null) {\r\n             optBuf.append(lpad).append(\"   \" + defaultLongOptPrefix).append(option.getLongOpt());\r\n         } else {\r\n             optBuf.append(lpad).append(defaultOptPrefix).append(option.getOpt());\r\n             if (option.hasLongOpt()) {\r\n                 optBuf.append(\u0027,\u0027).append(defaultLongOptPrefix).append(option.getLongOpt());\r\n             }\r\n         }\r\n         if (option.hasArg()) {\r\n             if (option.hasArgName()) {\r\n                 optBuf.append(\" \u003c\").append(option.getArgName()).append(\"\u003e\");\r\n             } else {\r\n                 optBuf.append(\u0027 \u0027);\r\n             }\r\n         }\r\n         prefixList.add(optBuf);\r\n         max \u003d (optBuf.length() \u003e max) ? optBuf.length() : max;\r\n     }\r\n     int x \u003d 0;\r\n     for (Iterator i \u003d optList.iterator(); i.hasNext(); ) {\r\n         option \u003d (Option) i.next();\r\n         optBuf \u003d new StringBuffer(prefixList.get(x++).toString());\r\n         if (optBuf.length() \u003c max) {\r\n             optBuf.append(createPadding(max - optBuf.length()));\r\n         }\r\n         optBuf.append(dpad);\r\n         int nextLineTabStop \u003d max + descPad;\r\n         if (option.getDescription() !\u003d null) {\r\n             optBuf.append(option.getDescription());\r\n         }\r\n         renderWrappedText(sb, width, nextLineTabStop, optBuf.toString());\r\n         if (i.hasNext()) {\r\n             sb.append(defaultNewLine);\r\n         }\r\n     }\r\n     return sb;\r\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "8f95e4a724350f9f80429c2af1c3ac9bb2b2c2db": {
      "type": "Ybodychange",
      "commitMessage": "Merged RESEARCH_CLI_2_ROXSPRING branch back to HEAD\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/cli/trunk@130066 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "4/23/04 2:00 AM",
      "commitName": "8f95e4a724350f9f80429c2af1c3ac9bb2b2c2db",
      "commitAuthor": "Robert James Oxspring",
      "commitDateOld": "2/29/04 6:30 PM",
      "commitNameOld": "213c137b7515e71abf006611d8927b4fa68bd62b",
      "commitAuthorOld": "Yoav Shapira",
      "daysBetweenCommits": 53.27,
      "commitsBetweenForRepo": 5,
      "commitsBetweenForFile": 1,
      "actualSource": "protected StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad) {\r\n    final String lpad \u003d createPadding(leftPad);\r\n    final String dpad \u003d createPadding(descPad);\r\n    int max \u003d 0;\r\n    StringBuffer optBuf;\r\n    List prefixList \u003d new ArrayList();\r\n    Option option;\r\n    List optList \u003d options.helpOptions();\r\n    Collections.sort(optList, new OptionComparator());\r\n    for (Iterator i \u003d optList.iterator(); i.hasNext(); ) {\r\n        option \u003d (Option) i.next();\r\n        optBuf \u003d new StringBuffer(8);\r\n        if (option.getOpt() \u003d\u003d null) {\r\n            optBuf.append(lpad).append(\"   \" + defaultLongOptPrefix).append(option.getLongOpt());\r\n        } else {\r\n            optBuf.append(lpad).append(defaultOptPrefix).append(option.getOpt());\r\n            if (option.hasLongOpt()) {\r\n                optBuf.append(\u0027,\u0027).append(defaultLongOptPrefix).append(option.getLongOpt());\r\n            }\r\n        }\r\n        if (option.hasArg()) {\r\n            if (option.hasArgName()) {\r\n                optBuf.append(\" \u003c\").append(option.getArgName()).append(\"\u003e\");\r\n            } else {\r\n                optBuf.append(\u0027 \u0027);\r\n            }\r\n        }\r\n        prefixList.add(optBuf);\r\n        max \u003d (optBuf.length() \u003e max) ? optBuf.length() : max;\r\n    }\r\n    int x \u003d 0;\r\n    for (Iterator i \u003d optList.iterator(); i.hasNext(); ) {\r\n        option \u003d (Option) i.next();\r\n        optBuf \u003d new StringBuffer(prefixList.get(x++).toString());\r\n        if (optBuf.length() \u003c max) {\r\n            optBuf.append(createPadding(max - optBuf.length()));\r\n        }\r\n        optBuf.append(dpad);\r\n        int nextLineTabStop \u003d max + descPad;\r\n        if (option.getDescription() !\u003d null) {\r\n            optBuf.append(option.getDescription());\r\n        }\r\n        renderWrappedText(sb, width, nextLineTabStop, optBuf.toString());\r\n        if (i.hasNext()) {\r\n            sb.append(defaultNewLine);\r\n        }\r\n    }\r\n    return sb;\r\n}",
      "path": "src/java/org/apache/commons/cli/HelpFormatter.java",
      "functionStartLine": 643,
      "functionName": "renderOptions",
      "functionAnnotation": "",
      "functionDoc": "\u003cp\u003eRender the specified Options and return the rendered Options\r\nin a StringBuffer.\u003c/p\u003e\r\n\r\n@param sb The StringBuffer to place the rendered Options into.\r\n@param width The number of characters to display per line\r\n@param options The command line Options\r\n@param leftPad the number of characters of padding to be prefixed\r\nto each line\r\n@param descPad the number of characters of padding to be prefixed\r\nto each description line\r\n@return the StringBuffer with the rendered Options contents.\r\n",
      "diff": "@@ -1,49 +1,49 @@\n protected StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad) {\r\n     final String lpad \u003d createPadding(leftPad);\r\n     final String dpad \u003d createPadding(descPad);\r\n     int max \u003d 0;\r\n     StringBuffer optBuf;\r\n     List prefixList \u003d new ArrayList();\r\n     Option option;\r\n     List optList \u003d options.helpOptions();\r\n-    Collections.sort(optList, new StringBufferComparator());\r\n+    Collections.sort(optList, new OptionComparator());\r\n     for (Iterator i \u003d optList.iterator(); i.hasNext(); ) {\r\n         option \u003d (Option) i.next();\r\n         optBuf \u003d new StringBuffer(8);\r\n         if (option.getOpt() \u003d\u003d null) {\r\n             optBuf.append(lpad).append(\"   \" + defaultLongOptPrefix).append(option.getLongOpt());\r\n         } else {\r\n             optBuf.append(lpad).append(defaultOptPrefix).append(option.getOpt());\r\n             if (option.hasLongOpt()) {\r\n                 optBuf.append(\u0027,\u0027).append(defaultLongOptPrefix).append(option.getLongOpt());\r\n             }\r\n         }\r\n         if (option.hasArg()) {\r\n             if (option.hasArgName()) {\r\n                 optBuf.append(\" \u003c\").append(option.getArgName()).append(\"\u003e\");\r\n             } else {\r\n                 optBuf.append(\u0027 \u0027);\r\n             }\r\n         }\r\n         prefixList.add(optBuf);\r\n         max \u003d (optBuf.length() \u003e max) ? optBuf.length() : max;\r\n     }\r\n     int x \u003d 0;\r\n     for (Iterator i \u003d optList.iterator(); i.hasNext(); ) {\r\n         option \u003d (Option) i.next();\r\n         optBuf \u003d new StringBuffer(prefixList.get(x++).toString());\r\n         if (optBuf.length() \u003c max) {\r\n             optBuf.append(createPadding(max - optBuf.length()));\r\n         }\r\n         optBuf.append(dpad);\r\n         int nextLineTabStop \u003d max + descPad;\r\n         if (option.getDescription() !\u003d null) {\r\n             optBuf.append(option.getDescription());\r\n         }\r\n         renderWrappedText(sb, width, nextLineTabStop, optBuf.toString());\r\n         if (i.hasNext()) {\r\n             sb.append(defaultNewLine);\r\n         }\r\n     }\r\n     return sb;\r\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "9b2b8038b52be022e42c8c7fdf26e236888f94c5": {
      "type": "Ymultichange(Ybodychange,Ydocchange)",
      "commitMessage": "checkstyle fixes\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/cli/trunk@129857 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/10/02 1:47 AM",
      "commitName": "9b2b8038b52be022e42c8c7fdf26e236888f94c5",
      "commitAuthor": "John Keyes",
      "subchanges": [
        {
          "type": "Ybodychange",
          "commitMessage": "checkstyle fixes\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/cli/trunk@129857 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "12/10/02 1:47 AM",
          "commitName": "9b2b8038b52be022e42c8c7fdf26e236888f94c5",
          "commitAuthor": "John Keyes",
          "commitDateOld": "11/20/02 12:50 AM",
          "commitNameOld": "6bcbf153c4497c38c4c36c3a04c1eac1f4cc153b",
          "commitAuthorOld": "John Keyes",
          "daysBetweenCommits": 20.04,
          "commitsBetweenForRepo": 6,
          "commitsBetweenForFile": 1,
          "actualSource": "protected StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad) {\r\n    final String lpad \u003d createPadding(leftPad);\r\n    final String dpad \u003d createPadding(descPad);\r\n    int max \u003d 0;\r\n    StringBuffer optBuf;\r\n    List prefixList \u003d new ArrayList();\r\n    Option option;\r\n    List optList \u003d options.helpOptions();\r\n    Collections.sort(optList, new StringBufferComparator());\r\n    for (Iterator i \u003d optList.iterator(); i.hasNext(); ) {\r\n        option \u003d (Option) i.next();\r\n        optBuf \u003d new StringBuffer(8);\r\n        if (option.getOpt() \u003d\u003d null) {\r\n            optBuf.append(lpad).append(\"   \" + defaultLongOptPrefix).append(option.getLongOpt());\r\n        } else {\r\n            optBuf.append(lpad).append(defaultOptPrefix).append(option.getOpt());\r\n            if (option.hasLongOpt()) {\r\n                optBuf.append(\u0027,\u0027).append(defaultLongOptPrefix).append(option.getLongOpt());\r\n            }\r\n        }\r\n        if (option.hasArg()) {\r\n            if (option.hasArgName()) {\r\n                optBuf.append(\" \u003c\").append(option.getArgName()).append(\"\u003e\");\r\n            } else {\r\n                optBuf.append(\u0027 \u0027);\r\n            }\r\n        }\r\n        prefixList.add(optBuf);\r\n        max \u003d (optBuf.length() \u003e max) ? optBuf.length() : max;\r\n    }\r\n    int x \u003d 0;\r\n    for (Iterator i \u003d optList.iterator(); i.hasNext(); ) {\r\n        option \u003d (Option) i.next();\r\n        optBuf \u003d new StringBuffer(prefixList.get(x++).toString());\r\n        if (optBuf.length() \u003c max) {\r\n            optBuf.append(createPadding(max - optBuf.length()));\r\n        }\r\n        optBuf.append(dpad);\r\n        int nextLineTabStop \u003d max + descPad;\r\n        if (option.getDescription() !\u003d null) {\r\n            optBuf.append(option.getDescription());\r\n        }\r\n        renderWrappedText(sb, width, nextLineTabStop, optBuf.toString());\r\n        if (i.hasNext()) {\r\n            sb.append(defaultNewLine);\r\n        }\r\n    }\r\n    return sb;\r\n}",
          "path": "src/java/org/apache/commons/cli/HelpFormatter.java",
          "functionStartLine": 682,
          "functionName": "renderOptions",
          "functionAnnotation": "",
          "functionDoc": "\u003cp\u003eRender the specified Options and return the rendered Options\r\nin a StringBuffer.\u003c/p\u003e\r\n\r\n@param sb The StringBuffer to place the rendered Options into.\r\n@param width The number of characters to display per line\r\n@param options The command line Options\r\n@param leftPad the number of characters of padding to be prefixed\r\nto each line\r\n@param descPad the number of characters of padding to be prefixed\r\nto each description line\r\n@return the StringBuffer with the rendered Options contents.\r\n",
          "diff": "@@ -1,49 +1,49 @@\n protected StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad) {\r\n     final String lpad \u003d createPadding(leftPad);\r\n     final String dpad \u003d createPadding(descPad);\r\n     int max \u003d 0;\r\n     StringBuffer optBuf;\r\n     List prefixList \u003d new ArrayList();\r\n     Option option;\r\n     List optList \u003d options.helpOptions();\r\n     Collections.sort(optList, new StringBufferComparator());\r\n     for (Iterator i \u003d optList.iterator(); i.hasNext(); ) {\r\n         option \u003d (Option) i.next();\r\n         optBuf \u003d new StringBuffer(8);\r\n         if (option.getOpt() \u003d\u003d null) {\r\n             optBuf.append(lpad).append(\"   \" + defaultLongOptPrefix).append(option.getLongOpt());\r\n         } else {\r\n             optBuf.append(lpad).append(defaultOptPrefix).append(option.getOpt());\r\n             if (option.hasLongOpt()) {\r\n                 optBuf.append(\u0027,\u0027).append(defaultLongOptPrefix).append(option.getLongOpt());\r\n             }\r\n         }\r\n         if (option.hasArg()) {\r\n             if (option.hasArgName()) {\r\n                 optBuf.append(\" \u003c\").append(option.getArgName()).append(\"\u003e\");\r\n             } else {\r\n                 optBuf.append(\u0027 \u0027);\r\n             }\r\n         }\r\n         prefixList.add(optBuf);\r\n-        max \u003d optBuf.length() \u003e max ? optBuf.length() : max;\r\n+        max \u003d (optBuf.length() \u003e max) ? optBuf.length() : max;\r\n     }\r\n     int x \u003d 0;\r\n     for (Iterator i \u003d optList.iterator(); i.hasNext(); ) {\r\n         option \u003d (Option) i.next();\r\n         optBuf \u003d new StringBuffer(prefixList.get(x++).toString());\r\n         if (optBuf.length() \u003c max) {\r\n             optBuf.append(createPadding(max - optBuf.length()));\r\n         }\r\n         optBuf.append(dpad);\r\n         int nextLineTabStop \u003d max + descPad;\r\n         if (option.getDescription() !\u003d null) {\r\n             optBuf.append(option.getDescription());\r\n         }\r\n         renderWrappedText(sb, width, nextLineTabStop, optBuf.toString());\r\n         if (i.hasNext()) {\r\n             sb.append(defaultNewLine);\r\n         }\r\n     }\r\n     return sb;\r\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        },
        {
          "type": "Ydocchange",
          "commitMessage": "checkstyle fixes\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/cli/trunk@129857 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "12/10/02 1:47 AM",
          "commitName": "9b2b8038b52be022e42c8c7fdf26e236888f94c5",
          "commitAuthor": "John Keyes",
          "commitDateOld": "11/20/02 12:50 AM",
          "commitNameOld": "6bcbf153c4497c38c4c36c3a04c1eac1f4cc153b",
          "commitAuthorOld": "John Keyes",
          "daysBetweenCommits": 20.04,
          "commitsBetweenForRepo": 6,
          "commitsBetweenForFile": 1,
          "actualSource": "protected StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad) {\r\n    final String lpad \u003d createPadding(leftPad);\r\n    final String dpad \u003d createPadding(descPad);\r\n    int max \u003d 0;\r\n    StringBuffer optBuf;\r\n    List prefixList \u003d new ArrayList();\r\n    Option option;\r\n    List optList \u003d options.helpOptions();\r\n    Collections.sort(optList, new StringBufferComparator());\r\n    for (Iterator i \u003d optList.iterator(); i.hasNext(); ) {\r\n        option \u003d (Option) i.next();\r\n        optBuf \u003d new StringBuffer(8);\r\n        if (option.getOpt() \u003d\u003d null) {\r\n            optBuf.append(lpad).append(\"   \" + defaultLongOptPrefix).append(option.getLongOpt());\r\n        } else {\r\n            optBuf.append(lpad).append(defaultOptPrefix).append(option.getOpt());\r\n            if (option.hasLongOpt()) {\r\n                optBuf.append(\u0027,\u0027).append(defaultLongOptPrefix).append(option.getLongOpt());\r\n            }\r\n        }\r\n        if (option.hasArg()) {\r\n            if (option.hasArgName()) {\r\n                optBuf.append(\" \u003c\").append(option.getArgName()).append(\"\u003e\");\r\n            } else {\r\n                optBuf.append(\u0027 \u0027);\r\n            }\r\n        }\r\n        prefixList.add(optBuf);\r\n        max \u003d (optBuf.length() \u003e max) ? optBuf.length() : max;\r\n    }\r\n    int x \u003d 0;\r\n    for (Iterator i \u003d optList.iterator(); i.hasNext(); ) {\r\n        option \u003d (Option) i.next();\r\n        optBuf \u003d new StringBuffer(prefixList.get(x++).toString());\r\n        if (optBuf.length() \u003c max) {\r\n            optBuf.append(createPadding(max - optBuf.length()));\r\n        }\r\n        optBuf.append(dpad);\r\n        int nextLineTabStop \u003d max + descPad;\r\n        if (option.getDescription() !\u003d null) {\r\n            optBuf.append(option.getDescription());\r\n        }\r\n        renderWrappedText(sb, width, nextLineTabStop, optBuf.toString());\r\n        if (i.hasNext()) {\r\n            sb.append(defaultNewLine);\r\n        }\r\n    }\r\n    return sb;\r\n}",
          "path": "src/java/org/apache/commons/cli/HelpFormatter.java",
          "functionStartLine": 682,
          "functionName": "renderOptions",
          "functionAnnotation": "",
          "functionDoc": "\u003cp\u003eRender the specified Options and return the rendered Options\r\nin a StringBuffer.\u003c/p\u003e\r\n\r\n@param sb The StringBuffer to place the rendered Options into.\r\n@param width The number of characters to display per line\r\n@param options The command line Options\r\n@param leftPad the number of characters of padding to be prefixed\r\nto each line\r\n@param descPad the number of characters of padding to be prefixed\r\nto each description line\r\n@return the StringBuffer with the rendered Options contents.\r\n",
          "diff": "@@ -1,49 +1,49 @@\n protected StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad) {\r\n     final String lpad \u003d createPadding(leftPad);\r\n     final String dpad \u003d createPadding(descPad);\r\n     int max \u003d 0;\r\n     StringBuffer optBuf;\r\n     List prefixList \u003d new ArrayList();\r\n     Option option;\r\n     List optList \u003d options.helpOptions();\r\n     Collections.sort(optList, new StringBufferComparator());\r\n     for (Iterator i \u003d optList.iterator(); i.hasNext(); ) {\r\n         option \u003d (Option) i.next();\r\n         optBuf \u003d new StringBuffer(8);\r\n         if (option.getOpt() \u003d\u003d null) {\r\n             optBuf.append(lpad).append(\"   \" + defaultLongOptPrefix).append(option.getLongOpt());\r\n         } else {\r\n             optBuf.append(lpad).append(defaultOptPrefix).append(option.getOpt());\r\n             if (option.hasLongOpt()) {\r\n                 optBuf.append(\u0027,\u0027).append(defaultLongOptPrefix).append(option.getLongOpt());\r\n             }\r\n         }\r\n         if (option.hasArg()) {\r\n             if (option.hasArgName()) {\r\n                 optBuf.append(\" \u003c\").append(option.getArgName()).append(\"\u003e\");\r\n             } else {\r\n                 optBuf.append(\u0027 \u0027);\r\n             }\r\n         }\r\n         prefixList.add(optBuf);\r\n-        max \u003d optBuf.length() \u003e max ? optBuf.length() : max;\r\n+        max \u003d (optBuf.length() \u003e max) ? optBuf.length() : max;\r\n     }\r\n     int x \u003d 0;\r\n     for (Iterator i \u003d optList.iterator(); i.hasNext(); ) {\r\n         option \u003d (Option) i.next();\r\n         optBuf \u003d new StringBuffer(prefixList.get(x++).toString());\r\n         if (optBuf.length() \u003c max) {\r\n             optBuf.append(createPadding(max - optBuf.length()));\r\n         }\r\n         optBuf.append(dpad);\r\n         int nextLineTabStop \u003d max + descPad;\r\n         if (option.getDescription() !\u003d null) {\r\n             optBuf.append(option.getDescription());\r\n         }\r\n         renderWrappedText(sb, width, nextLineTabStop, optBuf.toString());\r\n         if (i.hasNext()) {\r\n             sb.append(defaultNewLine);\r\n         }\r\n     }\r\n     return sb;\r\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "",
            "newValue": "\u003cp\u003eRender the specified Options and return the rendered Options\r\nin a StringBuffer.\u003c/p\u003e\r\n\r\n@param sb The StringBuffer to place the rendered Options into.\r\n@param width The number of characters to display per line\r\n@param options The command line Options\r\n@param leftPad the number of characters of padding to be prefixed\r\nto each line\r\n@param descPad the number of characters of padding to be prefixed\r\nto each description line\r\n@return the StringBuffer with the rendered Options contents.\r\n"
          }
        }
      ]
    },
    "6bcbf153c4497c38c4c36c3a04c1eac1f4cc153b": {
      "type": "Ybodychange",
      "commitMessage": "applied some fixes to HelpFormatter, thanks to Rob and Boon\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/cli/trunk@129850 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "11/20/02 12:50 AM",
      "commitName": "6bcbf153c4497c38c4c36c3a04c1eac1f4cc153b",
      "commitAuthor": "John Keyes",
      "commitDateOld": "11/16/02 12:22 AM",
      "commitNameOld": "4c34483ea18c6a4f259f19a6d18637bb1fbae1e8",
      "commitAuthorOld": "John Keyes",
      "daysBetweenCommits": 4.02,
      "commitsBetweenForRepo": 5,
      "commitsBetweenForFile": 1,
      "actualSource": "protected StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad) {\r\n    final String lpad \u003d createPadding(leftPad);\r\n    final String dpad \u003d createPadding(descPad);\r\n    int max \u003d 0;\r\n    StringBuffer optBuf;\r\n    List prefixList \u003d new ArrayList();\r\n    Option option;\r\n    List optList \u003d options.helpOptions();\r\n    Collections.sort(optList, new StringBufferComparator());\r\n    for (Iterator i \u003d optList.iterator(); i.hasNext(); ) {\r\n        option \u003d (Option) i.next();\r\n        optBuf \u003d new StringBuffer(8);\r\n        if (option.getOpt() \u003d\u003d null) {\r\n            optBuf.append(lpad).append(\"   \" + defaultLongOptPrefix).append(option.getLongOpt());\r\n        } else {\r\n            optBuf.append(lpad).append(defaultOptPrefix).append(option.getOpt());\r\n            if (option.hasLongOpt()) {\r\n                optBuf.append(\u0027,\u0027).append(defaultLongOptPrefix).append(option.getLongOpt());\r\n            }\r\n        }\r\n        if (option.hasArg()) {\r\n            if (option.hasArgName()) {\r\n                optBuf.append(\" \u003c\").append(option.getArgName()).append(\"\u003e\");\r\n            } else {\r\n                optBuf.append(\u0027 \u0027);\r\n            }\r\n        }\r\n        prefixList.add(optBuf);\r\n        max \u003d optBuf.length() \u003e max ? optBuf.length() : max;\r\n    }\r\n    int x \u003d 0;\r\n    for (Iterator i \u003d optList.iterator(); i.hasNext(); ) {\r\n        option \u003d (Option) i.next();\r\n        optBuf \u003d new StringBuffer(prefixList.get(x++).toString());\r\n        if (optBuf.length() \u003c max) {\r\n            optBuf.append(createPadding(max - optBuf.length()));\r\n        }\r\n        optBuf.append(dpad);\r\n        int nextLineTabStop \u003d max + descPad;\r\n        if (option.getDescription() !\u003d null) {\r\n            optBuf.append(option.getDescription());\r\n        }\r\n        renderWrappedText(sb, width, nextLineTabStop, optBuf.toString());\r\n        if (i.hasNext()) {\r\n            sb.append(defaultNewLine);\r\n        }\r\n    }\r\n    return sb;\r\n}",
      "path": "src/java/org/apache/commons/cli/HelpFormatter.java",
      "functionStartLine": 363,
      "functionName": "renderOptions",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,49 +1,49 @@\n protected StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad) {\r\n     final String lpad \u003d createPadding(leftPad);\r\n     final String dpad \u003d createPadding(descPad);\r\n     int max \u003d 0;\r\n     StringBuffer optBuf;\r\n     List prefixList \u003d new ArrayList();\r\n     Option option;\r\n     List optList \u003d options.helpOptions();\r\n     Collections.sort(optList, new StringBufferComparator());\r\n     for (Iterator i \u003d optList.iterator(); i.hasNext(); ) {\r\n         option \u003d (Option) i.next();\r\n         optBuf \u003d new StringBuffer(8);\r\n-        if (option.getOpt().equals(\" \")) {\r\n+        if (option.getOpt() \u003d\u003d null) {\r\n             optBuf.append(lpad).append(\"   \" + defaultLongOptPrefix).append(option.getLongOpt());\r\n         } else {\r\n             optBuf.append(lpad).append(defaultOptPrefix).append(option.getOpt());\r\n             if (option.hasLongOpt()) {\r\n                 optBuf.append(\u0027,\u0027).append(defaultLongOptPrefix).append(option.getLongOpt());\r\n             }\r\n         }\r\n         if (option.hasArg()) {\r\n             if (option.hasArgName()) {\r\n-                optBuf.append(\" \u003c\").append(option.getArgName()).append(\u0027\u003e\u0027);\r\n+                optBuf.append(\" \u003c\").append(option.getArgName()).append(\"\u003e\");\r\n             } else {\r\n                 optBuf.append(\u0027 \u0027);\r\n             }\r\n         }\r\n         prefixList.add(optBuf);\r\n         max \u003d optBuf.length() \u003e max ? optBuf.length() : max;\r\n     }\r\n     int x \u003d 0;\r\n     for (Iterator i \u003d optList.iterator(); i.hasNext(); ) {\r\n         option \u003d (Option) i.next();\r\n         optBuf \u003d new StringBuffer(prefixList.get(x++).toString());\r\n         if (optBuf.length() \u003c max) {\r\n             optBuf.append(createPadding(max - optBuf.length()));\r\n         }\r\n         optBuf.append(dpad);\r\n         int nextLineTabStop \u003d max + descPad;\r\n         if (option.getDescription() !\u003d null) {\r\n             optBuf.append(option.getDescription());\r\n         }\r\n         renderWrappedText(sb, width, nextLineTabStop, optBuf.toString());\r\n         if (i.hasNext()) {\r\n             sb.append(defaultNewLine);\r\n         }\r\n     }\r\n     return sb;\r\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "4c34483ea18c6a4f259f19a6d18637bb1fbae1e8": {
      "type": "Ybodychange",
      "commitMessage": "some fixes to avoid \u0027null\u0027 appearing in the help output\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/cli/trunk@129844 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "11/16/02 12:22 AM",
      "commitName": "4c34483ea18c6a4f259f19a6d18637bb1fbae1e8",
      "commitAuthor": "John Keyes",
      "commitDateOld": "10/12/02 2:10 AM",
      "commitNameOld": "a0212835ed42e03a01c2c930a695e478a0884f68",
      "commitAuthorOld": "John Keyes",
      "daysBetweenCommits": 34.97,
      "commitsBetweenForRepo": 20,
      "commitsBetweenForFile": 1,
      "actualSource": "protected StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad) {\r\n    final String lpad \u003d createPadding(leftPad);\r\n    final String dpad \u003d createPadding(descPad);\r\n    int max \u003d 0;\r\n    StringBuffer optBuf;\r\n    List prefixList \u003d new ArrayList();\r\n    Option option;\r\n    List optList \u003d options.helpOptions();\r\n    Collections.sort(optList, new StringBufferComparator());\r\n    for (Iterator i \u003d optList.iterator(); i.hasNext(); ) {\r\n        option \u003d (Option) i.next();\r\n        optBuf \u003d new StringBuffer(8);\r\n        if (option.getOpt().equals(\" \")) {\r\n            optBuf.append(lpad).append(\"   \" + defaultLongOptPrefix).append(option.getLongOpt());\r\n        } else {\r\n            optBuf.append(lpad).append(defaultOptPrefix).append(option.getOpt());\r\n            if (option.hasLongOpt()) {\r\n                optBuf.append(\u0027,\u0027).append(defaultLongOptPrefix).append(option.getLongOpt());\r\n            }\r\n        }\r\n        if (option.hasArg()) {\r\n            if (option.hasArgName()) {\r\n                optBuf.append(\" \u003c\").append(option.getArgName()).append(\u0027\u003e\u0027);\r\n            } else {\r\n                optBuf.append(\u0027 \u0027);\r\n            }\r\n        }\r\n        prefixList.add(optBuf);\r\n        max \u003d optBuf.length() \u003e max ? optBuf.length() : max;\r\n    }\r\n    int x \u003d 0;\r\n    for (Iterator i \u003d optList.iterator(); i.hasNext(); ) {\r\n        option \u003d (Option) i.next();\r\n        optBuf \u003d new StringBuffer(prefixList.get(x++).toString());\r\n        if (optBuf.length() \u003c max) {\r\n            optBuf.append(createPadding(max - optBuf.length()));\r\n        }\r\n        optBuf.append(dpad);\r\n        int nextLineTabStop \u003d max + descPad;\r\n        if (option.getDescription() !\u003d null) {\r\n            optBuf.append(option.getDescription());\r\n        }\r\n        renderWrappedText(sb, width, nextLineTabStop, optBuf.toString());\r\n        if (i.hasNext()) {\r\n            sb.append(defaultNewLine);\r\n        }\r\n    }\r\n    return sb;\r\n}",
      "path": "src/java/org/apache/commons/cli/HelpFormatter.java",
      "functionStartLine": 326,
      "functionName": "renderOptions",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,46 +1,49 @@\n protected StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad) {\r\n     final String lpad \u003d createPadding(leftPad);\r\n     final String dpad \u003d createPadding(descPad);\r\n     int max \u003d 0;\r\n     StringBuffer optBuf;\r\n     List prefixList \u003d new ArrayList();\r\n     Option option;\r\n     List optList \u003d options.helpOptions();\r\n     Collections.sort(optList, new StringBufferComparator());\r\n     for (Iterator i \u003d optList.iterator(); i.hasNext(); ) {\r\n         option \u003d (Option) i.next();\r\n         optBuf \u003d new StringBuffer(8);\r\n         if (option.getOpt().equals(\" \")) {\r\n             optBuf.append(lpad).append(\"   \" + defaultLongOptPrefix).append(option.getLongOpt());\r\n         } else {\r\n             optBuf.append(lpad).append(defaultOptPrefix).append(option.getOpt());\r\n             if (option.hasLongOpt()) {\r\n                 optBuf.append(\u0027,\u0027).append(defaultLongOptPrefix).append(option.getLongOpt());\r\n             }\r\n         }\r\n         if (option.hasArg()) {\r\n             if (option.hasArgName()) {\r\n                 optBuf.append(\" \u003c\").append(option.getArgName()).append(\u0027\u003e\u0027);\r\n             } else {\r\n                 optBuf.append(\u0027 \u0027);\r\n             }\r\n         }\r\n         prefixList.add(optBuf);\r\n         max \u003d optBuf.length() \u003e max ? optBuf.length() : max;\r\n     }\r\n     int x \u003d 0;\r\n     for (Iterator i \u003d optList.iterator(); i.hasNext(); ) {\r\n         option \u003d (Option) i.next();\r\n         optBuf \u003d new StringBuffer(prefixList.get(x++).toString());\r\n         if (optBuf.length() \u003c max) {\r\n             optBuf.append(createPadding(max - optBuf.length()));\r\n         }\r\n         optBuf.append(dpad);\r\n         int nextLineTabStop \u003d max + descPad;\r\n-        renderWrappedText(sb, width, nextLineTabStop, optBuf.append(option.getDescription()).toString());\r\n+        if (option.getDescription() !\u003d null) {\r\n+            optBuf.append(option.getDescription());\r\n+        }\r\n+        renderWrappedText(sb, width, nextLineTabStop, optBuf.toString());\r\n         if (i.hasNext()) {\r\n             sb.append(defaultNewLine);\r\n         }\r\n     }\r\n     return sb;\r\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "a0212835ed42e03a01c2c930a695e478a0884f68": {
      "type": "Ybodychange",
      "commitMessage": "some fixes for autousage and padding\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/cli/trunk@129821 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "10/12/02 2:10 AM",
      "commitName": "a0212835ed42e03a01c2c930a695e478a0884f68",
      "commitAuthor": "John Keyes",
      "commitDateOld": "10/9/02 12:24 AM",
      "commitNameOld": "62670f565aa434b6cb614c1054a8ea5bc3715f25",
      "commitAuthorOld": "John Keyes",
      "daysBetweenCommits": 3.07,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "actualSource": "protected StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad) {\r\n    final String lpad \u003d createPadding(leftPad);\r\n    final String dpad \u003d createPadding(descPad);\r\n    int max \u003d 0;\r\n    StringBuffer optBuf;\r\n    List prefixList \u003d new ArrayList();\r\n    Option option;\r\n    List optList \u003d options.helpOptions();\r\n    Collections.sort(optList, new StringBufferComparator());\r\n    for (Iterator i \u003d optList.iterator(); i.hasNext(); ) {\r\n        option \u003d (Option) i.next();\r\n        optBuf \u003d new StringBuffer(8);\r\n        if (option.getOpt().equals(\" \")) {\r\n            optBuf.append(lpad).append(\"   \" + defaultLongOptPrefix).append(option.getLongOpt());\r\n        } else {\r\n            optBuf.append(lpad).append(defaultOptPrefix).append(option.getOpt());\r\n            if (option.hasLongOpt()) {\r\n                optBuf.append(\u0027,\u0027).append(defaultLongOptPrefix).append(option.getLongOpt());\r\n            }\r\n        }\r\n        if (option.hasArg()) {\r\n            if (option.hasArgName()) {\r\n                optBuf.append(\" \u003c\").append(option.getArgName()).append(\u0027\u003e\u0027);\r\n            } else {\r\n                optBuf.append(\u0027 \u0027);\r\n            }\r\n        }\r\n        prefixList.add(optBuf);\r\n        max \u003d optBuf.length() \u003e max ? optBuf.length() : max;\r\n    }\r\n    int x \u003d 0;\r\n    for (Iterator i \u003d optList.iterator(); i.hasNext(); ) {\r\n        option \u003d (Option) i.next();\r\n        optBuf \u003d new StringBuffer(prefixList.get(x++).toString());\r\n        if (optBuf.length() \u003c max) {\r\n            optBuf.append(createPadding(max - optBuf.length()));\r\n        }\r\n        optBuf.append(dpad);\r\n        int nextLineTabStop \u003d max + descPad;\r\n        renderWrappedText(sb, width, nextLineTabStop, optBuf.append(option.getDescription()).toString());\r\n        if (i.hasNext()) {\r\n            sb.append(defaultNewLine);\r\n        }\r\n    }\r\n    return sb;\r\n}",
      "path": "src/java/org/apache/commons/cli/HelpFormatter.java",
      "functionStartLine": 330,
      "functionName": "renderOptions",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,41 +1,46 @@\n protected StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad) {\r\n     final String lpad \u003d createPadding(leftPad);\r\n     final String dpad \u003d createPadding(descPad);\r\n     int max \u003d 0;\r\n     StringBuffer optBuf;\r\n     List prefixList \u003d new ArrayList();\r\n     Option option;\r\n     List optList \u003d options.helpOptions();\r\n     Collections.sort(optList, new StringBufferComparator());\r\n     for (Iterator i \u003d optList.iterator(); i.hasNext(); ) {\r\n         option \u003d (Option) i.next();\r\n         optBuf \u003d new StringBuffer(8);\r\n         if (option.getOpt().equals(\" \")) {\r\n             optBuf.append(lpad).append(\"   \" + defaultLongOptPrefix).append(option.getLongOpt());\r\n         } else {\r\n             optBuf.append(lpad).append(defaultOptPrefix).append(option.getOpt());\r\n             if (option.hasLongOpt()) {\r\n                 optBuf.append(\u0027,\u0027).append(defaultLongOptPrefix).append(option.getLongOpt());\r\n             }\r\n         }\r\n         if (option.hasArg()) {\r\n             if (option.hasArgName()) {\r\n-                optBuf.append(option.getArgName());\r\n+                optBuf.append(\" \u003c\").append(option.getArgName()).append(\u0027\u003e\u0027);\r\n             } else {\r\n                 optBuf.append(\u0027 \u0027);\r\n             }\r\n         }\r\n         prefixList.add(optBuf);\r\n         max \u003d optBuf.length() \u003e max ? optBuf.length() : max;\r\n+    }\r\n+    int x \u003d 0;\r\n+    for (Iterator i \u003d optList.iterator(); i.hasNext(); ) {\r\n+        option \u003d (Option) i.next();\r\n+        optBuf \u003d new StringBuffer(prefixList.get(x++).toString());\r\n         if (optBuf.length() \u003c max) {\r\n             optBuf.append(createPadding(max - optBuf.length()));\r\n         }\r\n         optBuf.append(dpad);\r\n         int nextLineTabStop \u003d max + descPad;\r\n         renderWrappedText(sb, width, nextLineTabStop, optBuf.append(option.getDescription()).toString());\r\n         if (i.hasNext()) {\r\n             sb.append(defaultNewLine);\r\n         }\r\n     }\r\n     return sb;\r\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "62670f565aa434b6cb614c1054a8ea5bc3715f25": {
      "type": "Ybodychange",
      "commitMessage": "fixed bug 13425, added argName support, fixed some bugs in the HelpFormatter\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/cli/trunk@129819 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "10/9/02 12:24 AM",
      "commitName": "62670f565aa434b6cb614c1054a8ea5bc3715f25",
      "commitAuthor": "John Keyes",
      "commitDateOld": "9/20/02 1:59 AM",
      "commitNameOld": "c08f73835beda155421d78ee4f96d9e11c501159",
      "commitAuthorOld": "John Keyes",
      "daysBetweenCommits": 18.93,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "actualSource": "protected StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad) {\r\n    final String lpad \u003d createPadding(leftPad);\r\n    final String dpad \u003d createPadding(descPad);\r\n    int max \u003d 0;\r\n    StringBuffer optBuf;\r\n    List prefixList \u003d new ArrayList();\r\n    Option option;\r\n    List optList \u003d options.helpOptions();\r\n    Collections.sort(optList, new StringBufferComparator());\r\n    for (Iterator i \u003d optList.iterator(); i.hasNext(); ) {\r\n        option \u003d (Option) i.next();\r\n        optBuf \u003d new StringBuffer(8);\r\n        if (option.getOpt().equals(\" \")) {\r\n            optBuf.append(lpad).append(\"   \" + defaultLongOptPrefix).append(option.getLongOpt());\r\n        } else {\r\n            optBuf.append(lpad).append(defaultOptPrefix).append(option.getOpt());\r\n            if (option.hasLongOpt()) {\r\n                optBuf.append(\u0027,\u0027).append(defaultLongOptPrefix).append(option.getLongOpt());\r\n            }\r\n        }\r\n        if (option.hasArg()) {\r\n            if (option.hasArgName()) {\r\n                optBuf.append(option.getArgName());\r\n            } else {\r\n                optBuf.append(\u0027 \u0027);\r\n            }\r\n        }\r\n        prefixList.add(optBuf);\r\n        max \u003d optBuf.length() \u003e max ? optBuf.length() : max;\r\n        if (optBuf.length() \u003c max) {\r\n            optBuf.append(createPadding(max - optBuf.length()));\r\n        }\r\n        optBuf.append(dpad);\r\n        int nextLineTabStop \u003d max + descPad;\r\n        renderWrappedText(sb, width, nextLineTabStop, optBuf.append(option.getDescription()).toString());\r\n        if (i.hasNext()) {\r\n            sb.append(defaultNewLine);\r\n        }\r\n    }\r\n    return sb;\r\n}",
      "path": "src/java/org/apache/commons/cli/HelpFormatter.java",
      "functionStartLine": 333,
      "functionName": "renderOptions",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,49 +1,41 @@\n protected StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad) {\r\n     final String lpad \u003d createPadding(leftPad);\r\n     final String dpad \u003d createPadding(descPad);\r\n     int max \u003d 0;\r\n     StringBuffer optBuf;\r\n     List prefixList \u003d new ArrayList();\r\n     Option option;\r\n-    for (Iterator i \u003d options.getOptions().iterator(); i.hasNext(); ) {\r\n+    List optList \u003d options.helpOptions();\r\n+    Collections.sort(optList, new StringBufferComparator());\r\n+    for (Iterator i \u003d optList.iterator(); i.hasNext(); ) {\r\n         option \u003d (Option) i.next();\r\n         optBuf \u003d new StringBuffer(8);\r\n         if (option.getOpt().equals(\" \")) {\r\n             optBuf.append(lpad).append(\"   \" + defaultLongOptPrefix).append(option.getLongOpt());\r\n         } else {\r\n             optBuf.append(lpad).append(defaultOptPrefix).append(option.getOpt());\r\n             if (option.hasLongOpt()) {\r\n                 optBuf.append(\u0027,\u0027).append(defaultLongOptPrefix).append(option.getLongOpt());\r\n             }\r\n         }\r\n         if (option.hasArg()) {\r\n-            optBuf.append(\u0027 \u0027).append(defaultArgName);\r\n+            if (option.hasArgName()) {\r\n+                optBuf.append(option.getArgName());\r\n+            } else {\r\n+                optBuf.append(\u0027 \u0027);\r\n+            }\r\n         }\r\n         prefixList.add(optBuf);\r\n         max \u003d optBuf.length() \u003e max ? optBuf.length() : max;\r\n-    }\r\n-    for (Iterator i \u003d prefixList.iterator(); i.hasNext(); ) {\r\n-        optBuf \u003d (StringBuffer) i.next();\r\n         if (optBuf.length() \u003c max) {\r\n             optBuf.append(createPadding(max - optBuf.length()));\r\n         }\r\n         optBuf.append(dpad);\r\n-    }\r\n-    Collections.sort(prefixList, new StringBufferComparator());\r\n-    int nextLineTabStop \u003d max + descPad;\r\n-    String opt;\r\n-    int optOffset \u003d leftPad + defaultOptPrefix.length();\r\n-    for (Iterator i \u003d prefixList.iterator(); i.hasNext(); ) {\r\n-        optBuf \u003d (StringBuffer) i.next();\r\n-        opt \u003d optBuf.toString().trim();\r\n-        if (opt.indexOf(\u0027,\u0027) !\u003d -1) {\r\n-            opt \u003d opt.substring(0, opt.indexOf(\u0027,\u0027, optOffset));\r\n-        }\r\n-        option \u003d options.getOption(opt);\r\n+        int nextLineTabStop \u003d max + descPad;\r\n         renderWrappedText(sb, width, nextLineTabStop, optBuf.append(option.getDescription()).toString());\r\n         if (i.hasNext()) {\r\n             sb.append(defaultNewLine);\r\n         }\r\n     }\r\n     return sb;\r\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "821b85fe781d57c9bd5851d3c95f3497ea397c17": {
      "type": "Ybodychange",
      "commitMessage": "added Pete Maddocks fix for options only created with a longopt\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/cli/trunk@129813 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "9/9/02 10:51 PM",
      "commitName": "821b85fe781d57c9bd5851d3c95f3497ea397c17",
      "commitAuthor": "John Keyes",
      "commitDateOld": "7/23/02 1:49 AM",
      "commitNameOld": "c7127329dad2c5d6284532da09ddc0fdefd67436",
      "commitAuthorOld": "John Keyes",
      "daysBetweenCommits": 48.88,
      "commitsBetweenForRepo": 27,
      "commitsBetweenForFile": 1,
      "actualSource": "protected StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad) {\r\n    final String lpad \u003d createPadding(leftPad);\r\n    final String dpad \u003d createPadding(descPad);\r\n    int max \u003d 0;\r\n    StringBuffer optBuf;\r\n    List prefixList \u003d new ArrayList();\r\n    Option option;\r\n    for (Iterator i \u003d options.getOptions().iterator(); i.hasNext(); ) {\r\n        option \u003d (Option) i.next();\r\n        optBuf \u003d new StringBuffer(8);\r\n        if (option.getOpt().equals(\" \")) {\r\n            optBuf.append(lpad).append(\"   \" + defaultLongOptPrefix).append(option.getLongOpt());\r\n        } else {\r\n            optBuf.append(lpad).append(defaultOptPrefix).append(option.getOpt());\r\n            if (option.hasLongOpt()) {\r\n                optBuf.append(\u0027,\u0027).append(defaultLongOptPrefix).append(option.getLongOpt());\r\n            }\r\n        }\r\n        if (option.hasArg()) {\r\n            optBuf.append(\u0027 \u0027).append(defaultArgName);\r\n        }\r\n        prefixList.add(optBuf);\r\n        max \u003d optBuf.length() \u003e max ? optBuf.length() : max;\r\n    }\r\n    for (Iterator i \u003d prefixList.iterator(); i.hasNext(); ) {\r\n        optBuf \u003d (StringBuffer) i.next();\r\n        if (optBuf.length() \u003c max) {\r\n            optBuf.append(createPadding(max - optBuf.length()));\r\n        }\r\n        optBuf.append(dpad);\r\n    }\r\n    Collections.sort(prefixList, new StringBufferComparator());\r\n    int nextLineTabStop \u003d max + descPad;\r\n    String opt;\r\n    int optOffset \u003d leftPad + defaultOptPrefix.length();\r\n    for (Iterator i \u003d prefixList.iterator(); i.hasNext(); ) {\r\n        optBuf \u003d (StringBuffer) i.next();\r\n        opt \u003d optBuf.toString().trim();\r\n        if (opt.indexOf(\u0027,\u0027) !\u003d -1) {\r\n            opt \u003d opt.substring(0, opt.indexOf(\u0027,\u0027, optOffset));\r\n        }\r\n        option \u003d options.getOption(opt);\r\n        renderWrappedText(sb, width, nextLineTabStop, optBuf.append(option.getDescription()).toString());\r\n        if (i.hasNext()) {\r\n            sb.append(defaultNewLine);\r\n        }\r\n    }\r\n    return sb;\r\n}",
      "path": "src/java/org/apache/commons/cli/HelpFormatter.java",
      "functionStartLine": 321,
      "functionName": "renderOptions",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,47 +1,49 @@\n protected StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad) {\r\n     final String lpad \u003d createPadding(leftPad);\r\n     final String dpad \u003d createPadding(descPad);\r\n     int max \u003d 0;\r\n     StringBuffer optBuf;\r\n     List prefixList \u003d new ArrayList();\r\n     Option option;\r\n     for (Iterator i \u003d options.getOptions().iterator(); i.hasNext(); ) {\r\n         option \u003d (Option) i.next();\r\n         optBuf \u003d new StringBuffer(8);\r\n-        optBuf.append(lpad).append(defaultOptPrefix).append(option.getOpt());\r\n-        if (option.hasLongOpt()) {\r\n-            optBuf.append(\u0027,\u0027).append(defaultLongOptPrefix).append(option.getLongOpt());\r\n+        if (option.getOpt().equals(\" \")) {\r\n+            optBuf.append(lpad).append(\"   \" + defaultLongOptPrefix).append(option.getLongOpt());\r\n+        } else {\r\n+            optBuf.append(lpad).append(defaultOptPrefix).append(option.getOpt());\r\n+            if (option.hasLongOpt()) {\r\n+                optBuf.append(\u0027,\u0027).append(defaultLongOptPrefix).append(option.getLongOpt());\r\n+            }\r\n         }\r\n         if (option.hasArg()) {\r\n             optBuf.append(\u0027 \u0027).append(defaultArgName);\r\n         }\r\n         prefixList.add(optBuf);\r\n         max \u003d optBuf.length() \u003e max ? optBuf.length() : max;\r\n     }\r\n     for (Iterator i \u003d prefixList.iterator(); i.hasNext(); ) {\r\n         optBuf \u003d (StringBuffer) i.next();\r\n         if (optBuf.length() \u003c max) {\r\n             optBuf.append(createPadding(max - optBuf.length()));\r\n         }\r\n         optBuf.append(dpad);\r\n     }\r\n     Collections.sort(prefixList, new StringBufferComparator());\r\n     int nextLineTabStop \u003d max + descPad;\r\n     String opt;\r\n     int optOffset \u003d leftPad + defaultOptPrefix.length();\r\n     for (Iterator i \u003d prefixList.iterator(); i.hasNext(); ) {\r\n         optBuf \u003d (StringBuffer) i.next();\r\n-        opt \u003d optBuf.toString();\r\n+        opt \u003d optBuf.toString().trim();\r\n         if (opt.indexOf(\u0027,\u0027) !\u003d -1) {\r\n-            opt \u003d opt.substring(optOffset, opt.indexOf(\u0027,\u0027, optOffset));\r\n-        } else {\r\n-            opt \u003d opt.substring(optOffset, opt.indexOf(\u0027 \u0027, optOffset));\r\n+            opt \u003d opt.substring(0, opt.indexOf(\u0027,\u0027, optOffset));\r\n         }\r\n-        option \u003d options.getOption(\"-\" + opt);\r\n+        option \u003d options.getOption(opt);\r\n         renderWrappedText(sb, width, nextLineTabStop, optBuf.append(option.getDescription()).toString());\r\n         if (i.hasNext()) {\r\n             sb.append(defaultNewLine);\r\n         }\r\n     }\r\n     return sb;\r\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "4dcbfa673771c8fcd2477cf7dd122ef8fe8967b7": {
      "type": "Ybodychange",
      "commitMessage": "now supports new Option i.e. key changed from char to String\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/cli/trunk@129783 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "7/11/02 12:08 AM",
      "commitName": "4dcbfa673771c8fcd2477cf7dd122ef8fe8967b7",
      "commitAuthor": "John Keyes",
      "commitDateOld": "7/10/02 2:12 AM",
      "commitNameOld": "7e3bcff98a5e290755664dc27eb9b86ba64330d1",
      "commitAuthorOld": "John Keyes",
      "daysBetweenCommits": 0.91,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "protected StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad) {\r\n    final String lpad \u003d createPadding(leftPad);\r\n    final String dpad \u003d createPadding(descPad);\r\n    int max \u003d 0;\r\n    StringBuffer optBuf;\r\n    List prefixList \u003d new ArrayList();\r\n    Option option;\r\n    for (Iterator i \u003d options.getOptions().iterator(); i.hasNext(); ) {\r\n        option \u003d (Option) i.next();\r\n        optBuf \u003d new StringBuffer(8);\r\n        optBuf.append(lpad).append(defaultOptPrefix).append(option.getOpt());\r\n        if (option.hasLongOpt()) {\r\n            optBuf.append(\u0027,\u0027).append(defaultLongOptPrefix).append(option.getLongOpt());\r\n        }\r\n        if (option.hasArg()) {\r\n            optBuf.append(\u0027 \u0027).append(defaultArgName);\r\n        }\r\n        prefixList.add(optBuf);\r\n        max \u003d optBuf.length() \u003e max ? optBuf.length() : max;\r\n    }\r\n    for (Iterator i \u003d prefixList.iterator(); i.hasNext(); ) {\r\n        optBuf \u003d (StringBuffer) i.next();\r\n        if (optBuf.length() \u003c max) {\r\n            optBuf.append(createPadding(max - optBuf.length()));\r\n        }\r\n        optBuf.append(dpad);\r\n    }\r\n    Collections.sort(prefixList, new StringBufferComparator());\r\n    int nextLineTabStop \u003d max + descPad;\r\n    String opt;\r\n    int optOffset \u003d leftPad + defaultOptPrefix.length();\r\n    for (Iterator i \u003d prefixList.iterator(); i.hasNext(); ) {\r\n        optBuf \u003d (StringBuffer) i.next();\r\n        opt \u003d optBuf.toString();\r\n        if (opt.indexOf(\u0027,\u0027) !\u003d -1) {\r\n            opt \u003d opt.substring(optOffset, opt.indexOf(\u0027,\u0027, optOffset));\r\n        } else {\r\n            opt \u003d opt.substring(optOffset, opt.indexOf(\u0027 \u0027, optOffset));\r\n        }\r\n        option \u003d options.getOption(\"-\" + opt);\r\n        renderWrappedText(sb, width, nextLineTabStop, optBuf.append(option.getDescription()).toString());\r\n        if (i.hasNext()) {\r\n            sb.append(defaultNewLine);\r\n        }\r\n    }\r\n    return sb;\r\n}",
      "path": "src/java/org/apache/commons/cli/HelpFormatter.java",
      "functionStartLine": 198,
      "functionName": "renderOptions",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,42 +1,47 @@\n protected StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad) {\r\n     final String lpad \u003d createPadding(leftPad);\r\n     final String dpad \u003d createPadding(descPad);\r\n     int max \u003d 0;\r\n     StringBuffer optBuf;\r\n     List prefixList \u003d new ArrayList();\r\n     Option option;\r\n     for (Iterator i \u003d options.getOptions().iterator(); i.hasNext(); ) {\r\n         option \u003d (Option) i.next();\r\n         optBuf \u003d new StringBuffer(8);\r\n         optBuf.append(lpad).append(defaultOptPrefix).append(option.getOpt());\r\n         if (option.hasLongOpt()) {\r\n             optBuf.append(\u0027,\u0027).append(defaultLongOptPrefix).append(option.getLongOpt());\r\n         }\r\n         if (option.hasArg()) {\r\n             optBuf.append(\u0027 \u0027).append(defaultArgName);\r\n         }\r\n         prefixList.add(optBuf);\r\n         max \u003d optBuf.length() \u003e max ? optBuf.length() : max;\r\n     }\r\n     for (Iterator i \u003d prefixList.iterator(); i.hasNext(); ) {\r\n         optBuf \u003d (StringBuffer) i.next();\r\n         if (optBuf.length() \u003c max) {\r\n             optBuf.append(createPadding(max - optBuf.length()));\r\n         }\r\n         optBuf.append(dpad);\r\n     }\r\n     Collections.sort(prefixList, new StringBufferComparator());\r\n     int nextLineTabStop \u003d max + descPad;\r\n-    char opt;\r\n+    String opt;\r\n     int optOffset \u003d leftPad + defaultOptPrefix.length();\r\n     for (Iterator i \u003d prefixList.iterator(); i.hasNext(); ) {\r\n         optBuf \u003d (StringBuffer) i.next();\r\n-        opt \u003d optBuf.charAt(optOffset);\r\n-        option \u003d options.getOption(\"\" + opt);\r\n+        opt \u003d optBuf.toString();\r\n+        if (opt.indexOf(\u0027,\u0027) !\u003d -1) {\r\n+            opt \u003d opt.substring(optOffset, opt.indexOf(\u0027,\u0027, optOffset));\r\n+        } else {\r\n+            opt \u003d opt.substring(optOffset, opt.indexOf(\u0027 \u0027, optOffset));\r\n+        }\r\n+        option \u003d options.getOption(\"-\" + opt);\r\n         renderWrappedText(sb, width, nextLineTabStop, optBuf.append(option.getDescription()).toString());\r\n         if (i.hasNext()) {\r\n             sb.append(defaultNewLine);\r\n         }\r\n     }\r\n     return sb;\r\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "4cca25d72b216bfc8f2e75e4a99afb608ceb6df8": {
      "type": "Ybodychange",
      "commitMessage": "configurable parser support added, PosixParser added\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/cli/trunk@129770 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "6/17/02 2:00 AM",
      "commitName": "4cca25d72b216bfc8f2e75e4a99afb608ceb6df8",
      "commitAuthor": "John Keyes",
      "commitDateOld": "6/10/02 9:01 PM",
      "commitNameOld": "aae50c585ec3ac33c6a9af792e80378904a73195",
      "commitAuthorOld": "James Strachan",
      "daysBetweenCommits": 6.21,
      "commitsBetweenForRepo": 3,
      "commitsBetweenForFile": 1,
      "actualSource": "protected StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad) {\r\n    final String lpad \u003d createPadding(leftPad);\r\n    final String dpad \u003d createPadding(descPad);\r\n    int max \u003d 0;\r\n    StringBuffer optBuf;\r\n    List prefixList \u003d new ArrayList();\r\n    Option option;\r\n    for (Iterator i \u003d options.getOptions().iterator(); i.hasNext(); ) {\r\n        option \u003d (Option) i.next();\r\n        optBuf \u003d new StringBuffer(8);\r\n        optBuf.append(lpad).append(defaultOptPrefix).append(option.getOpt());\r\n        if (option.hasLongOpt()) {\r\n            optBuf.append(\u0027,\u0027).append(defaultLongOptPrefix).append(option.getLongOpt());\r\n        }\r\n        if (option.hasArg()) {\r\n            optBuf.append(\u0027 \u0027).append(defaultArgName);\r\n        }\r\n        prefixList.add(optBuf);\r\n        max \u003d optBuf.length() \u003e max ? optBuf.length() : max;\r\n    }\r\n    for (Iterator i \u003d prefixList.iterator(); i.hasNext(); ) {\r\n        optBuf \u003d (StringBuffer) i.next();\r\n        if (optBuf.length() \u003c max) {\r\n            optBuf.append(createPadding(max - optBuf.length()));\r\n        }\r\n        optBuf.append(dpad);\r\n    }\r\n    Collections.sort(prefixList, new StringBufferComparator());\r\n    int nextLineTabStop \u003d max + descPad;\r\n    char opt;\r\n    int optOffset \u003d leftPad + defaultOptPrefix.length();\r\n    for (Iterator i \u003d prefixList.iterator(); i.hasNext(); ) {\r\n        optBuf \u003d (StringBuffer) i.next();\r\n        opt \u003d optBuf.charAt(optOffset);\r\n        option \u003d options.getOption(\"\" + opt);\r\n        renderWrappedText(sb, width, nextLineTabStop, optBuf.append(option.getDescription()).toString());\r\n        if (i.hasNext()) {\r\n            sb.append(defaultNewLine);\r\n        }\r\n    }\r\n    return sb;\r\n}",
      "path": "src/java/org/apache/commons/cli/HelpFormatter.java",
      "functionStartLine": 145,
      "functionName": "renderOptions",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,42 +1,42 @@\n protected StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad) {\r\n     final String lpad \u003d createPadding(leftPad);\r\n     final String dpad \u003d createPadding(descPad);\r\n     int max \u003d 0;\r\n     StringBuffer optBuf;\r\n     List prefixList \u003d new ArrayList();\r\n     Option option;\r\n     for (Iterator i \u003d options.getOptions().iterator(); i.hasNext(); ) {\r\n         option \u003d (Option) i.next();\r\n         optBuf \u003d new StringBuffer(8);\r\n         optBuf.append(lpad).append(defaultOptPrefix).append(option.getOpt());\r\n         if (option.hasLongOpt()) {\r\n             optBuf.append(\u0027,\u0027).append(defaultLongOptPrefix).append(option.getLongOpt());\r\n         }\r\n         if (option.hasArg()) {\r\n             optBuf.append(\u0027 \u0027).append(defaultArgName);\r\n         }\r\n         prefixList.add(optBuf);\r\n         max \u003d optBuf.length() \u003e max ? optBuf.length() : max;\r\n     }\r\n     for (Iterator i \u003d prefixList.iterator(); i.hasNext(); ) {\r\n         optBuf \u003d (StringBuffer) i.next();\r\n         if (optBuf.length() \u003c max) {\r\n             optBuf.append(createPadding(max - optBuf.length()));\r\n         }\r\n         optBuf.append(dpad);\r\n     }\r\n     Collections.sort(prefixList, new StringBufferComparator());\r\n     int nextLineTabStop \u003d max + descPad;\r\n     char opt;\r\n     int optOffset \u003d leftPad + defaultOptPrefix.length();\r\n     for (Iterator i \u003d prefixList.iterator(); i.hasNext(); ) {\r\n         optBuf \u003d (StringBuffer) i.next();\r\n         opt \u003d optBuf.charAt(optOffset);\r\n-        option \u003d options.getOption(opt);\r\n+        option \u003d options.getOption(\"\" + opt);\r\n         renderWrappedText(sb, width, nextLineTabStop, optBuf.append(option.getDescription()).toString());\r\n         if (i.hasNext()) {\r\n             sb.append(defaultNewLine);\r\n         }\r\n     }\r\n     return sb;\r\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "aae50c585ec3ac33c6a9af792e80378904a73195": {
      "type": "Yintroduced",
      "commitMessage": "moved cli over from the sandbox to commons proper\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/cli/trunk@129767 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "6/10/02 9:01 PM",
      "commitName": "aae50c585ec3ac33c6a9af792e80378904a73195",
      "commitAuthor": "James Strachan",
      "diff": "@@ -0,0 +1,42 @@\n+protected StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad) {\r\n+    final String lpad \u003d createPadding(leftPad);\r\n+    final String dpad \u003d createPadding(descPad);\r\n+    int max \u003d 0;\r\n+    StringBuffer optBuf;\r\n+    List prefixList \u003d new ArrayList();\r\n+    Option option;\r\n+    for (Iterator i \u003d options.getOptions().iterator(); i.hasNext(); ) {\r\n+        option \u003d (Option) i.next();\r\n+        optBuf \u003d new StringBuffer(8);\r\n+        optBuf.append(lpad).append(defaultOptPrefix).append(option.getOpt());\r\n+        if (option.hasLongOpt()) {\r\n+            optBuf.append(\u0027,\u0027).append(defaultLongOptPrefix).append(option.getLongOpt());\r\n+        }\r\n+        if (option.hasArg()) {\r\n+            optBuf.append(\u0027 \u0027).append(defaultArgName);\r\n+        }\r\n+        prefixList.add(optBuf);\r\n+        max \u003d optBuf.length() \u003e max ? optBuf.length() : max;\r\n+    }\r\n+    for (Iterator i \u003d prefixList.iterator(); i.hasNext(); ) {\r\n+        optBuf \u003d (StringBuffer) i.next();\r\n+        if (optBuf.length() \u003c max) {\r\n+            optBuf.append(createPadding(max - optBuf.length()));\r\n+        }\r\n+        optBuf.append(dpad);\r\n+    }\r\n+    Collections.sort(prefixList, new StringBufferComparator());\r\n+    int nextLineTabStop \u003d max + descPad;\r\n+    char opt;\r\n+    int optOffset \u003d leftPad + defaultOptPrefix.length();\r\n+    for (Iterator i \u003d prefixList.iterator(); i.hasNext(); ) {\r\n+        optBuf \u003d (StringBuffer) i.next();\r\n+        opt \u003d optBuf.charAt(optOffset);\r\n+        option \u003d options.getOption(opt);\r\n+        renderWrappedText(sb, width, nextLineTabStop, optBuf.append(option.getDescription()).toString());\r\n+        if (i.hasNext()) {\r\n+            sb.append(defaultNewLine);\r\n+        }\r\n+    }\r\n+    return sb;\r\n+}\n\\ No newline at end of file\n",
      "actualSource": "protected StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad) {\r\n    final String lpad \u003d createPadding(leftPad);\r\n    final String dpad \u003d createPadding(descPad);\r\n    int max \u003d 0;\r\n    StringBuffer optBuf;\r\n    List prefixList \u003d new ArrayList();\r\n    Option option;\r\n    for (Iterator i \u003d options.getOptions().iterator(); i.hasNext(); ) {\r\n        option \u003d (Option) i.next();\r\n        optBuf \u003d new StringBuffer(8);\r\n        optBuf.append(lpad).append(defaultOptPrefix).append(option.getOpt());\r\n        if (option.hasLongOpt()) {\r\n            optBuf.append(\u0027,\u0027).append(defaultLongOptPrefix).append(option.getLongOpt());\r\n        }\r\n        if (option.hasArg()) {\r\n            optBuf.append(\u0027 \u0027).append(defaultArgName);\r\n        }\r\n        prefixList.add(optBuf);\r\n        max \u003d optBuf.length() \u003e max ? optBuf.length() : max;\r\n    }\r\n    for (Iterator i \u003d prefixList.iterator(); i.hasNext(); ) {\r\n        optBuf \u003d (StringBuffer) i.next();\r\n        if (optBuf.length() \u003c max) {\r\n            optBuf.append(createPadding(max - optBuf.length()));\r\n        }\r\n        optBuf.append(dpad);\r\n    }\r\n    Collections.sort(prefixList, new StringBufferComparator());\r\n    int nextLineTabStop \u003d max + descPad;\r\n    char opt;\r\n    int optOffset \u003d leftPad + defaultOptPrefix.length();\r\n    for (Iterator i \u003d prefixList.iterator(); i.hasNext(); ) {\r\n        optBuf \u003d (StringBuffer) i.next();\r\n        opt \u003d optBuf.charAt(optOffset);\r\n        option \u003d options.getOption(opt);\r\n        renderWrappedText(sb, width, nextLineTabStop, optBuf.append(option.getDescription()).toString());\r\n        if (i.hasNext()) {\r\n            sb.append(defaultNewLine);\r\n        }\r\n    }\r\n    return sb;\r\n}",
      "path": "src/java/org/apache/commons/cli/HelpFormatter.java",
      "functionStartLine": 145,
      "functionName": "renderOptions",
      "functionAnnotation": "",
      "functionDoc": ""
    }
  }
}