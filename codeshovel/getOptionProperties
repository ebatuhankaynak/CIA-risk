{
  "origin": "codeshovel",
  "repositoryName": "commons-cli",
  "repositoryPath": "D:/_SELEN/_2022-2023/CS588/GitHub_Dataset/commons-cli/commons-cli/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "CommandLine.java",
  "functionName": "getOptionProperties",
  "functionId": "getOptionProperties___opt-String(modifiers-final)",
  "sourceFilePath": "src/main/java/org/apache/commons/cli/CommandLine.java",
  "functionAnnotation": "",
  "functionDoc": "Gets the map of values associated to the option. This is convenient for options specifying Java properties like\r\n\u003ccode\u003e-Dparam1\u003dvalue1\r\n-Dparam2\u003dvalue2\u003c/code\u003e. The first argument of the option is the key, and the 2nd argument is the value. If the option\r\nhas only one argument ({@code -Dfoo}) it is considered as a boolean flag and the value is {@code \"true\"}.\r\n\r\n@param opt name of the option.\r\n@return The Properties mapped by the option, never {@code null} even if the option doesn\u0027t exists.\r\n@since 1.2\r\n",
  "functionStartLine": 209,
  "functionEndLine": 226,
  "numCommitsSeen": 74,
  "timeTaken": 276,
  "changeHistory": [
    "0ef219a7774df7df9cd11d3f0586b5e5248b1141",
    "9539506e87648d753c44b68b3dfbdd1938c09315",
    "bc0edc47dbf47cdaa3485cfb724982f377c900df",
    "c5536b7f82862fe798ae91cd4b4a8a2df049d06a",
    "04697739edb6b60ecdbcccbfeb4e787728674942",
    "5fb9e5009a8cdc7366b7a762f0e43dc47decf67c",
    "357a8b0b8f1090db29e0d541a9419f570a78457b",
    "a1b5d44432c057cf675f051bb20379937565f4ef",
    "1596f3bbe57986361da4ac1a23634dd5b00d10df",
    "147df44faa4eb12ffd4a0063fc3284f784ea67c8",
    "c49b5fe1cbce7809a20535ef2e2910e10d485756",
    "84d333ab1a80231963280a47711086a6b1a56781"
  ],
  "changeHistoryShort": {
    "0ef219a7774df7df9cd11d3f0586b5e5248b1141": "Ydocchange",
    "9539506e87648d753c44b68b3dfbdd1938c09315": "Ydocchange",
    "bc0edc47dbf47cdaa3485cfb724982f377c900df": "Ymultichange(Ydocchange,Yformatchange)",
    "c5536b7f82862fe798ae91cd4b4a8a2df049d06a": "Ydocchange",
    "04697739edb6b60ecdbcccbfeb4e787728674942": "Ydocchange",
    "5fb9e5009a8cdc7366b7a762f0e43dc47decf67c": "Yparametermetachange",
    "357a8b0b8f1090db29e0d541a9419f570a78457b": "Ybodychange",
    "a1b5d44432c057cf675f051bb20379937565f4ef": "Ybodychange",
    "1596f3bbe57986361da4ac1a23634dd5b00d10df": "Yfilerename",
    "147df44faa4eb12ffd4a0063fc3284f784ea67c8": "Yformatchange",
    "c49b5fe1cbce7809a20535ef2e2910e10d485756": "Ydocchange",
    "84d333ab1a80231963280a47711086a6b1a56781": "Yintroduced"
  },
  "changeHistoryDetails": {
    "0ef219a7774df7df9cd11d3f0586b5e5248b1141": {
      "type": "Ydocchange",
      "commitMessage": "Javadoc",
      "commitDate": "8/14/23 7:18 PM",
      "commitName": "0ef219a7774df7df9cd11d3f0586b5e5248b1141",
      "commitAuthor": "Gary Gregory",
      "commitDateOld": "8/14/23 7:16 PM",
      "commitNameOld": "57c08d0d16e0de5920d7211cf1c888397f71f558",
      "commitAuthorOld": "Gary Gregory",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "public Properties getOptionProperties(final String opt) {\r\n    final Properties props \u003d new Properties();\r\n    for (final Option option : options) {\r\n        if (opt.equals(option.getOpt()) || opt.equals(option.getLongOpt())) {\r\n            final List\u003cString\u003e values \u003d option.getValuesList();\r\n            if (values.size() \u003e\u003d 2) {\r\n                props.put(values.get(0), values.get(1));\r\n            } else if (values.size() \u003d\u003d 1) {\r\n                props.put(values.get(0), \"true\");\r\n            }\r\n        }\r\n    }\r\n    return props;\r\n}",
      "path": "src/main/java/org/apache/commons/cli/CommandLine.java",
      "functionStartLine": 200,
      "functionName": "getOptionProperties",
      "functionAnnotation": "",
      "functionDoc": "Gets the map of values associated to the option. This is convenient for options specifying Java properties like\r\n\u003ccode\u003e-Dparam1\u003dvalue1\r\n-Dparam2\u003dvalue2\u003c/code\u003e. The first argument of the option is the key, and the 2nd argument is the value. If the option\r\nhas only one argument ({@code -Dfoo}) it is considered as a boolean flag and the value is {@code \"true\"}.\r\n\r\n@param opt name of the option.\r\n@return The Properties mapped by the option, never {@code null} even if the option doesn\u0027t exists.\r\n@since 1.2\r\n",
      "diff": "",
      "extendedDetails": {
        "oldValue": "Retrieve the map of values associated to the option. This is convenient for options specifying Java properties like\r\n\u003ccode\u003e-Dparam1\u003dvalue1\r\n-Dparam2\u003dvalue2\u003c/code\u003e. The first argument of the option is the key, and the 2nd argument is the value. If the option\r\nhas only one argument ({@code -Dfoo}) it is considered as a boolean flag and the value is {@code \"true\"}.\r\n\r\n@param opt name of the option.\r\n@return The Properties mapped by the option, never {@code null} even if the option doesn\u0027t exists.\r\n@since 1.2\r\n",
        "newValue": "Gets the map of values associated to the option. This is convenient for options specifying Java properties like\r\n\u003ccode\u003e-Dparam1\u003dvalue1\r\n-Dparam2\u003dvalue2\u003c/code\u003e. The first argument of the option is the key, and the 2nd argument is the value. If the option\r\nhas only one argument ({@code -Dfoo}) it is considered as a boolean flag and the value is {@code \"true\"}.\r\n\r\n@param opt name of the option.\r\n@return The Properties mapped by the option, never {@code null} even if the option doesn\u0027t exists.\r\n@since 1.2\r\n"
      }
    },
    "9539506e87648d753c44b68b3dfbdd1938c09315": {
      "type": "Ydocchange",
      "commitMessage": "Javadoc: Use @code instead of HTML tags.\n",
      "commitDate": "10/4/21 12:32 AM",
      "commitName": "9539506e87648d753c44b68b3dfbdd1938c09315",
      "commitAuthor": "Gary Gregory",
      "commitDateOld": "10/2/21 11:07 PM",
      "commitNameOld": "4e8b3a2584ddac7411e20cdaca75b160787d7fa9",
      "commitAuthorOld": "Gary Gregory",
      "daysBetweenCommits": 1.06,
      "commitsBetweenForRepo": 9,
      "commitsBetweenForFile": 1,
      "actualSource": "public Properties getOptionProperties(final String opt) {\r\n    final Properties props \u003d new Properties();\r\n    for (final Option option : options) {\r\n        if (opt.equals(option.getOpt()) || opt.equals(option.getLongOpt())) {\r\n            final List\u003cString\u003e values \u003d option.getValuesList();\r\n            if (values.size() \u003e\u003d 2) {\r\n                props.put(values.get(0), values.get(1));\r\n            } else if (values.size() \u003d\u003d 1) {\r\n                props.put(values.get(0), \"true\");\r\n            }\r\n        }\r\n    }\r\n    return props;\r\n}",
      "path": "src/main/java/org/apache/commons/cli/CommandLine.java",
      "functionStartLine": 201,
      "functionName": "getOptionProperties",
      "functionAnnotation": "",
      "functionDoc": "Retrieve the map of values associated to the option. This is convenient for options specifying Java properties like\r\n\u003ccode\u003e-Dparam1\u003dvalue1\r\n-Dparam2\u003dvalue2\u003c/code\u003e. The first argument of the option is the key, and the 2nd argument is the value. If the option\r\nhas only one argument ({@code -Dfoo}) it is considered as a boolean flag and the value is {@code \"true\"}.\r\n\r\n@param opt name of the option.\r\n@return The Properties mapped by the option, never {@code null} even if the option doesn\u0027t exists.\r\n@since 1.2\r\n",
      "diff": "",
      "extendedDetails": {
        "oldValue": "Retrieve the map of values associated to the option. This is convenient for options specifying Java properties like\r\n\u003ccode\u003e-Dparam1\u003dvalue1\r\n-Dparam2\u003dvalue2\u003c/code\u003e. The first argument of the option is the key, and the 2nd argument is the value. If the option\r\nhas only one argument (\u003ccode\u003e-Dfoo\u003c/code\u003e) it is considered as a boolean flag and the value is \u003ccode\u003e\"true\"\u003c/code\u003e.\r\n\r\n@param opt name of the option.\r\n@return The Properties mapped by the option, never \u003ccode\u003enull\u003c/code\u003e even if the option doesn\u0027t exists.\r\n@since 1.2\r\n",
        "newValue": "Retrieve the map of values associated to the option. This is convenient for options specifying Java properties like\r\n\u003ccode\u003e-Dparam1\u003dvalue1\r\n-Dparam2\u003dvalue2\u003c/code\u003e. The first argument of the option is the key, and the 2nd argument is the value. If the option\r\nhas only one argument ({@code -Dfoo}) it is considered as a boolean flag and the value is {@code \"true\"}.\r\n\r\n@param opt name of the option.\r\n@return The Properties mapped by the option, never {@code null} even if the option doesn\u0027t exists.\r\n@since 1.2\r\n"
      }
    },
    "bc0edc47dbf47cdaa3485cfb724982f377c900df": {
      "type": "Ymultichange(Ydocchange,Yformatchange)",
      "commitMessage": "Clean ups.\n\n- maven-checkstyle-plugin 3.1.1 -\u003e 3.1.2.\n- checkstyle -\u003e 9.0\n- Updates for 21st century.\n- No need to nest else clause.\n- Use simple array declarations.\n- Use valueOf instead of new for Numbers.\n- Consistent formatting.\n- Remove some inline comments //-----...\n",
      "commitDate": "10/2/21 11:04 PM",
      "commitName": "bc0edc47dbf47cdaa3485cfb724982f377c900df",
      "commitAuthor": "Gary Gregory",
      "subchanges": [
        {
          "type": "Ydocchange",
          "commitMessage": "Clean ups.\n\n- maven-checkstyle-plugin 3.1.1 -\u003e 3.1.2.\n- checkstyle -\u003e 9.0\n- Updates for 21st century.\n- No need to nest else clause.\n- Use simple array declarations.\n- Use valueOf instead of new for Numbers.\n- Consistent formatting.\n- Remove some inline comments //-----...\n",
          "commitDate": "10/2/21 11:04 PM",
          "commitName": "bc0edc47dbf47cdaa3485cfb724982f377c900df",
          "commitAuthor": "Gary Gregory",
          "commitDateOld": "2/8/21 10:11 PM",
          "commitNameOld": "66cc7b4cb8b0f39edfe0ee37eead4ace04a7be4e",
          "commitAuthorOld": "Gary Gregory",
          "daysBetweenCommits": 236.04,
          "commitsBetweenForRepo": 22,
          "commitsBetweenForFile": 1,
          "actualSource": "public Properties getOptionProperties(final String opt) {\r\n    final Properties props \u003d new Properties();\r\n    for (final Option option : options) {\r\n        if (opt.equals(option.getOpt()) || opt.equals(option.getLongOpt())) {\r\n            final List\u003cString\u003e values \u003d option.getValuesList();\r\n            if (values.size() \u003e\u003d 2) {\r\n                props.put(values.get(0), values.get(1));\r\n            } else if (values.size() \u003d\u003d 1) {\r\n                props.put(values.get(0), \"true\");\r\n            }\r\n        }\r\n    }\r\n    return props;\r\n}",
          "path": "src/main/java/org/apache/commons/cli/CommandLine.java",
          "functionStartLine": 328,
          "functionName": "getOptionProperties",
          "functionAnnotation": "",
          "functionDoc": "Retrieve the map of values associated to the option. This is convenient for options specifying Java properties like\r\n\u003ccode\u003e-Dparam1\u003dvalue1\r\n-Dparam2\u003dvalue2\u003c/code\u003e. The first argument of the option is the key, and the 2nd argument is the value. If the option\r\nhas only one argument (\u003ccode\u003e-Dfoo\u003c/code\u003e) it is considered as a boolean flag and the value is \u003ccode\u003e\"true\"\u003c/code\u003e.\r\n\r\n@param opt name of the option.\r\n@return The Properties mapped by the option, never \u003ccode\u003enull\u003c/code\u003e even if the option doesn\u0027t exists.\r\n@since 1.2\r\n",
          "diff": "",
          "extendedDetails": {
            "oldValue": "Retrieve the map of values associated to the option. This is convenient\r\nfor options specifying Java properties like \u003ccode\u003e-Dparam1\u003dvalue1\r\n-Dparam2\u003dvalue2\u003c/code\u003e. The first argument of the option is the key, and\r\nthe 2nd argument is the value. If the option has only one argument\r\n(\u003ccode\u003e-Dfoo\u003c/code\u003e) it is considered as a boolean flag and the value is\r\n\u003ccode\u003e\"true\"\u003c/code\u003e.\r\n\r\n@param opt name of the option.\r\n@return The Properties mapped by the option, never \u003ccode\u003enull\u003c/code\u003e\r\n        even if the option doesn\u0027t exists.\r\n@since 1.2\r\n",
            "newValue": "Retrieve the map of values associated to the option. This is convenient for options specifying Java properties like\r\n\u003ccode\u003e-Dparam1\u003dvalue1\r\n-Dparam2\u003dvalue2\u003c/code\u003e. The first argument of the option is the key, and the 2nd argument is the value. If the option\r\nhas only one argument (\u003ccode\u003e-Dfoo\u003c/code\u003e) it is considered as a boolean flag and the value is \u003ccode\u003e\"true\"\u003c/code\u003e.\r\n\r\n@param opt name of the option.\r\n@return The Properties mapped by the option, never \u003ccode\u003enull\u003c/code\u003e even if the option doesn\u0027t exists.\r\n@since 1.2\r\n"
          }
        },
        {
          "type": "Yformatchange",
          "commitMessage": "Clean ups.\n\n- maven-checkstyle-plugin 3.1.1 -\u003e 3.1.2.\n- checkstyle -\u003e 9.0\n- Updates for 21st century.\n- No need to nest else clause.\n- Use simple array declarations.\n- Use valueOf instead of new for Numbers.\n- Consistent formatting.\n- Remove some inline comments //-----...\n",
          "commitDate": "10/2/21 11:04 PM",
          "commitName": "bc0edc47dbf47cdaa3485cfb724982f377c900df",
          "commitAuthor": "Gary Gregory",
          "commitDateOld": "2/8/21 10:11 PM",
          "commitNameOld": "66cc7b4cb8b0f39edfe0ee37eead4ace04a7be4e",
          "commitAuthorOld": "Gary Gregory",
          "daysBetweenCommits": 236.04,
          "commitsBetweenForRepo": 22,
          "commitsBetweenForFile": 1,
          "actualSource": "public Properties getOptionProperties(final String opt) {\r\n    final Properties props \u003d new Properties();\r\n    for (final Option option : options) {\r\n        if (opt.equals(option.getOpt()) || opt.equals(option.getLongOpt())) {\r\n            final List\u003cString\u003e values \u003d option.getValuesList();\r\n            if (values.size() \u003e\u003d 2) {\r\n                props.put(values.get(0), values.get(1));\r\n            } else if (values.size() \u003d\u003d 1) {\r\n                props.put(values.get(0), \"true\");\r\n            }\r\n        }\r\n    }\r\n    return props;\r\n}",
          "path": "src/main/java/org/apache/commons/cli/CommandLine.java",
          "functionStartLine": 328,
          "functionName": "getOptionProperties",
          "functionAnnotation": "",
          "functionDoc": "Retrieve the map of values associated to the option. This is convenient for options specifying Java properties like\r\n\u003ccode\u003e-Dparam1\u003dvalue1\r\n-Dparam2\u003dvalue2\u003c/code\u003e. The first argument of the option is the key, and the 2nd argument is the value. If the option\r\nhas only one argument (\u003ccode\u003e-Dfoo\u003c/code\u003e) it is considered as a boolean flag and the value is \u003ccode\u003e\"true\"\u003c/code\u003e.\r\n\r\n@param opt name of the option.\r\n@return The Properties mapped by the option, never \u003ccode\u003enull\u003c/code\u003e even if the option doesn\u0027t exists.\r\n@since 1.2\r\n",
          "diff": "",
          "extendedDetails": {}
        }
      ]
    },
    "c5536b7f82862fe798ae91cd4b4a8a2df049d06a": {
      "type": "Ydocchange",
      "commitMessage": "Fix JavaDoc errors\n",
      "commitDate": "2/17/19 8:49 PM",
      "commitName": "c5536b7f82862fe798ae91cd4b4a8a2df049d06a",
      "commitAuthor": "Benedikt Ritter",
      "commitDateOld": "9/24/17 6:36 PM",
      "commitNameOld": "04697739edb6b60ecdbcccbfeb4e787728674942",
      "commitAuthorOld": "Krishna Mohan",
      "daysBetweenCommits": 511.09,
      "commitsBetweenForRepo": 14,
      "commitsBetweenForFile": 1,
      "actualSource": "public Properties getOptionProperties(final String opt) {\r\n    final Properties props \u003d new Properties();\r\n    for (final Option option : options) {\r\n        if (opt.equals(option.getOpt()) || opt.equals(option.getLongOpt())) {\r\n            final List\u003cString\u003e values \u003d option.getValuesList();\r\n            if (values.size() \u003e\u003d 2) {\r\n                props.put(values.get(0), values.get(1));\r\n            } else if (values.size() \u003d\u003d 1) {\r\n                props.put(values.get(0), \"true\");\r\n            }\r\n        }\r\n    }\r\n    return props;\r\n}",
      "path": "src/main/java/org/apache/commons/cli/CommandLine.java",
      "functionStartLine": 384,
      "functionName": "getOptionProperties",
      "functionAnnotation": "",
      "functionDoc": "Retrieve the map of values associated to the option. This is convenient\r\nfor options specifying Java properties like \u003ccode\u003e-Dparam1\u003dvalue1\r\n-Dparam2\u003dvalue2\u003c/code\u003e. The first argument of the option is the key, and\r\nthe 2nd argument is the value. If the option has only one argument\r\n(\u003ccode\u003e-Dfoo\u003c/code\u003e) it is considered as a boolean flag and the value is\r\n\u003ccode\u003e\"true\"\u003c/code\u003e.\r\n\r\n@param opt name of the option.\r\n@return The Properties mapped by the option, never \u003ccode\u003enull\u003c/code\u003e\r\n        even if the option doesn\u0027t exists.\r\n@since 1.2\r\n",
      "diff": "",
      "extendedDetails": {
        "oldValue": "Retrieve the map of values associated to the option. This is convenient\r\nfor options specifying Java properties like \u003ctt\u003e-Dparam1\u003dvalue1\r\n-Dparam2\u003dvalue2\u003c/tt\u003e. The first argument of the option is the key, and\r\nthe 2nd argument is the value. If the option has only one argument\r\n(\u003ctt\u003e-Dfoo\u003c/tt\u003e) it is considered as a boolean flag and the value is\r\n\u003ctt\u003e\"true\"\u003c/tt\u003e.\r\n\r\n@param opt name of the option.\r\n@return The Properties mapped by the option, never \u003ctt\u003enull\u003c/tt\u003e\r\n        even if the option doesn\u0027t exists.\r\n@since 1.2\r\n",
        "newValue": "Retrieve the map of values associated to the option. This is convenient\r\nfor options specifying Java properties like \u003ccode\u003e-Dparam1\u003dvalue1\r\n-Dparam2\u003dvalue2\u003c/code\u003e. The first argument of the option is the key, and\r\nthe 2nd argument is the value. If the option has only one argument\r\n(\u003ccode\u003e-Dfoo\u003c/code\u003e) it is considered as a boolean flag and the value is\r\n\u003ccode\u003e\"true\"\u003c/code\u003e.\r\n\r\n@param opt name of the option.\r\n@return The Properties mapped by the option, never \u003ccode\u003enull\u003c/code\u003e\r\n        even if the option doesn\u0027t exists.\r\n@since 1.2\r\n"
      }
    },
    "04697739edb6b60ecdbcccbfeb4e787728674942": {
      "type": "Ydocchange",
      "commitMessage": "adding period to javadocs\n",
      "commitDate": "9/24/17 6:36 PM",
      "commitName": "04697739edb6b60ecdbcccbfeb4e787728674942",
      "commitAuthor": "Krishna Mohan",
      "commitDateOld": "6/15/17 1:23 PM",
      "commitNameOld": "9a845a2a30742b500e3b823b105434203427ea93",
      "commitAuthorOld": "Bruno P. Kinoshita",
      "daysBetweenCommits": 101.22,
      "commitsBetweenForRepo": 18,
      "commitsBetweenForFile": 1,
      "actualSource": "public Properties getOptionProperties(final String opt) {\r\n    final Properties props \u003d new Properties();\r\n    for (final Option option : options) {\r\n        if (opt.equals(option.getOpt()) || opt.equals(option.getLongOpt())) {\r\n            final List\u003cString\u003e values \u003d option.getValuesList();\r\n            if (values.size() \u003e\u003d 2) {\r\n                props.put(values.get(0), values.get(1));\r\n            } else if (values.size() \u003d\u003d 1) {\r\n                props.put(values.get(0), \"true\");\r\n            }\r\n        }\r\n    }\r\n    return props;\r\n}",
      "path": "src/main/java/org/apache/commons/cli/CommandLine.java",
      "functionStartLine": 384,
      "functionName": "getOptionProperties",
      "functionAnnotation": "",
      "functionDoc": "Retrieve the map of values associated to the option. This is convenient\r\nfor options specifying Java properties like \u003ctt\u003e-Dparam1\u003dvalue1\r\n-Dparam2\u003dvalue2\u003c/tt\u003e. The first argument of the option is the key, and\r\nthe 2nd argument is the value. If the option has only one argument\r\n(\u003ctt\u003e-Dfoo\u003c/tt\u003e) it is considered as a boolean flag and the value is\r\n\u003ctt\u003e\"true\"\u003c/tt\u003e.\r\n\r\n@param opt name of the option.\r\n@return The Properties mapped by the option, never \u003ctt\u003enull\u003c/tt\u003e\r\n        even if the option doesn\u0027t exists.\r\n@since 1.2\r\n",
      "diff": "",
      "extendedDetails": {
        "oldValue": "Retrieve the map of values associated to the option. This is convenient\r\nfor options specifying Java properties like \u003ctt\u003e-Dparam1\u003dvalue1\r\n-Dparam2\u003dvalue2\u003c/tt\u003e. The first argument of the option is the key, and\r\nthe 2nd argument is the value. If the option has only one argument\r\n(\u003ctt\u003e-Dfoo\u003c/tt\u003e) it is considered as a boolean flag and the value is\r\n\u003ctt\u003e\"true\"\u003c/tt\u003e.\r\n\r\n@param opt name of the option\r\n@return The Properties mapped by the option, never \u003ctt\u003enull\u003c/tt\u003e\r\n        even if the option doesn\u0027t exists\r\n@since 1.2\r\n",
        "newValue": "Retrieve the map of values associated to the option. This is convenient\r\nfor options specifying Java properties like \u003ctt\u003e-Dparam1\u003dvalue1\r\n-Dparam2\u003dvalue2\u003c/tt\u003e. The first argument of the option is the key, and\r\nthe 2nd argument is the value. If the option has only one argument\r\n(\u003ctt\u003e-Dfoo\u003c/tt\u003e) it is considered as a boolean flag and the value is\r\n\u003ctt\u003e\"true\"\u003c/tt\u003e.\r\n\r\n@param opt name of the option.\r\n@return The Properties mapped by the option, never \u003ctt\u003enull\u003c/tt\u003e\r\n        even if the option doesn\u0027t exists.\r\n@since 1.2\r\n"
      }
    },
    "5fb9e5009a8cdc7366b7a762f0e43dc47decf67c": {
      "type": "Yparametermetachange",
      "commitMessage": "Add final modifier to method parameters.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/cli/trunk@1797674 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "6/5/17 7:38 PM",
      "commitName": "5fb9e5009a8cdc7366b7a762f0e43dc47decf67c",
      "commitAuthor": "Gary D. Gregory",
      "commitDateOld": "6/5/17 7:37 PM",
      "commitNameOld": "357a8b0b8f1090db29e0d541a9419f570a78457b",
      "commitAuthorOld": "Gary D. Gregory",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "public Properties getOptionProperties(final String opt) {\r\n    final Properties props \u003d new Properties();\r\n    for (final Option option : options) {\r\n        if (opt.equals(option.getOpt()) || opt.equals(option.getLongOpt())) {\r\n            final List\u003cString\u003e values \u003d option.getValuesList();\r\n            if (values.size() \u003e\u003d 2) {\r\n                props.put(values.get(0), values.get(1));\r\n            } else if (values.size() \u003d\u003d 1) {\r\n                props.put(values.get(0), \"true\");\r\n            }\r\n        }\r\n    }\r\n    return props;\r\n}",
      "path": "src/main/java/org/apache/commons/cli/CommandLine.java",
      "functionStartLine": 386,
      "functionName": "getOptionProperties",
      "functionAnnotation": "",
      "functionDoc": "Retrieve the map of values associated to the option. This is convenient\r\nfor options specifying Java properties like \u003ctt\u003e-Dparam1\u003dvalue1\r\n-Dparam2\u003dvalue2\u003c/tt\u003e. The first argument of the option is the key, and\r\nthe 2nd argument is the value. If the option has only one argument\r\n(\u003ctt\u003e-Dfoo\u003c/tt\u003e) it is considered as a boolean flag and the value is\r\n\u003ctt\u003e\"true\"\u003c/tt\u003e.\r\n\r\n@param opt name of the option\r\n@return The Properties mapped by the option, never \u003ctt\u003enull\u003c/tt\u003e\r\n        even if the option doesn\u0027t exists\r\n@since 1.2\r\n",
      "diff": "@@ -1,14 +1,14 @@\n-public Properties getOptionProperties(String opt) {\r\n+public Properties getOptionProperties(final String opt) {\r\n     final Properties props \u003d new Properties();\r\n     for (final Option option : options) {\r\n         if (opt.equals(option.getOpt()) || opt.equals(option.getLongOpt())) {\r\n             final List\u003cString\u003e values \u003d option.getValuesList();\r\n             if (values.size() \u003e\u003d 2) {\r\n                 props.put(values.get(0), values.get(1));\r\n             } else if (values.size() \u003d\u003d 1) {\r\n                 props.put(values.get(0), \"true\");\r\n             }\r\n         }\r\n     }\r\n     return props;\r\n }\n\\ No newline at end of file\n",
      "extendedDetails": {
        "oldValue": "[opt-String]",
        "newValue": "[opt-String(modifiers-final)]"
      }
    },
    "357a8b0b8f1090db29e0d541a9419f570a78457b": {
      "type": "Ybodychange",
      "commitMessage": "Add final modifier to local variables.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/cli/trunk@1797673 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "6/5/17 7:37 PM",
      "commitName": "357a8b0b8f1090db29e0d541a9419f570a78457b",
      "commitAuthor": "Gary D. Gregory",
      "commitDateOld": "3/27/17 4:26 PM",
      "commitNameOld": "a2afe70f0d14cbf8199b7c8ccda424211dba4843",
      "commitAuthorOld": "Benedikt Ritter",
      "daysBetweenCommits": 70.13,
      "commitsBetweenForRepo": 5,
      "commitsBetweenForFile": 1,
      "actualSource": "public Properties getOptionProperties(String opt) {\r\n    final Properties props \u003d new Properties();\r\n    for (final Option option : options) {\r\n        if (opt.equals(option.getOpt()) || opt.equals(option.getLongOpt())) {\r\n            final List\u003cString\u003e values \u003d option.getValuesList();\r\n            if (values.size() \u003e\u003d 2) {\r\n                props.put(values.get(0), values.get(1));\r\n            } else if (values.size() \u003d\u003d 1) {\r\n                props.put(values.get(0), \"true\");\r\n            }\r\n        }\r\n    }\r\n    return props;\r\n}",
      "path": "src/main/java/org/apache/commons/cli/CommandLine.java",
      "functionStartLine": 386,
      "functionName": "getOptionProperties",
      "functionAnnotation": "",
      "functionDoc": "Retrieve the map of values associated to the option. This is convenient\r\nfor options specifying Java properties like \u003ctt\u003e-Dparam1\u003dvalue1\r\n-Dparam2\u003dvalue2\u003c/tt\u003e. The first argument of the option is the key, and\r\nthe 2nd argument is the value. If the option has only one argument\r\n(\u003ctt\u003e-Dfoo\u003c/tt\u003e) it is considered as a boolean flag and the value is\r\n\u003ctt\u003e\"true\"\u003c/tt\u003e.\r\n\r\n@param opt name of the option\r\n@return The Properties mapped by the option, never \u003ctt\u003enull\u003c/tt\u003e\r\n        even if the option doesn\u0027t exists\r\n@since 1.2\r\n",
      "diff": "@@ -1,14 +1,14 @@\n public Properties getOptionProperties(String opt) {\r\n-    Properties props \u003d new Properties();\r\n-    for (Option option : options) {\r\n+    final Properties props \u003d new Properties();\r\n+    for (final Option option : options) {\r\n         if (opt.equals(option.getOpt()) || opt.equals(option.getLongOpt())) {\r\n-            List\u003cString\u003e values \u003d option.getValuesList();\r\n+            final List\u003cString\u003e values \u003d option.getValuesList();\r\n             if (values.size() \u003e\u003d 2) {\r\n                 props.put(values.get(0), values.get(1));\r\n             } else if (values.size() \u003d\u003d 1) {\r\n                 props.put(values.get(0), \"true\");\r\n             }\r\n         }\r\n     }\r\n     return props;\r\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "a1b5d44432c057cf675f051bb20379937565f4ef": {
      "type": "Ybodychange",
      "commitMessage": "Moving to Java 5\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/cli/trunk@1091539 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "4/12/11 9:57 PM",
      "commitName": "a1b5d44432c057cf675f051bb20379937565f4ef",
      "commitAuthor": "Emmanuel Bourg",
      "commitDateOld": "4/12/11 6:55 PM",
      "commitNameOld": "62a3b36efc78e53c233c2fb49cc8199c5eabec1d",
      "commitAuthorOld": "Emmanuel Bourg",
      "daysBetweenCommits": 0.13,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "public Properties getOptionProperties(String opt) {\r\n    Properties props \u003d new Properties();\r\n    for (Option option : options) {\r\n        if (opt.equals(option.getOpt()) || opt.equals(option.getLongOpt())) {\r\n            List\u003cString\u003e values \u003d option.getValuesList();\r\n            if (values.size() \u003e\u003d 2) {\r\n                props.put(values.get(0), values.get(1));\r\n            } else if (values.size() \u003d\u003d 1) {\r\n                props.put(values.get(0), \"true\");\r\n            }\r\n        }\r\n    }\r\n    return props;\r\n}",
      "path": "src/main/java/org/apache/commons/cli/CommandLine.java",
      "functionStartLine": 264,
      "functionName": "getOptionProperties",
      "functionAnnotation": "",
      "functionDoc": "Retrieve the map of values associated to the option. This is convenient\r\nfor options specifying Java properties like \u003ctt\u003e-Dparam1\u003dvalue1\r\n-Dparam2\u003dvalue2\u003c/tt\u003e. The first argument of the option is the key, and\r\nthe 2nd argument is the value. If the option has only one argument\r\n(\u003ctt\u003e-Dfoo\u003c/tt\u003e) it is considered as a boolean flag and the value is\r\n\u003ctt\u003e\"true\"\u003c/tt\u003e.\r\n\r\n@param opt name of the option\r\n@return The Properties mapped by the option, never \u003ctt\u003enull\u003c/tt\u003e\r\n        even if the option doesn\u0027t exists\r\n@since 1.2\r\n",
      "diff": "@@ -1,15 +1,14 @@\n public Properties getOptionProperties(String opt) {\r\n     Properties props \u003d new Properties();\r\n-    for (Iterator it \u003d options.iterator(); it.hasNext(); ) {\r\n-        Option option \u003d (Option) it.next();\r\n+    for (Option option : options) {\r\n         if (opt.equals(option.getOpt()) || opt.equals(option.getLongOpt())) {\r\n-            List values \u003d option.getValuesList();\r\n+            List\u003cString\u003e values \u003d option.getValuesList();\r\n             if (values.size() \u003e\u003d 2) {\r\n                 props.put(values.get(0), values.get(1));\r\n             } else if (values.size() \u003d\u003d 1) {\r\n                 props.put(values.get(0), \"true\");\r\n             }\r\n         }\r\n     }\r\n     return props;\r\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "1596f3bbe57986361da4ac1a23634dd5b00d10df": {
      "type": "Yfilerename",
      "commitMessage": "Switched to the Maven 2 default directory layout (part 3)\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/cli/trunk@955173 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "6/16/10 12:45 PM",
      "commitName": "1596f3bbe57986361da4ac1a23634dd5b00d10df",
      "commitAuthor": "Emmanuel Bourg",
      "commitDateOld": "6/16/10 12:42 PM",
      "commitNameOld": "406a35f1a128944b7c51dcbc4a1f04c3f8bec3e6",
      "commitAuthorOld": "Emmanuel Bourg",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "public Properties getOptionProperties(String opt) {\r\n    Properties props \u003d new Properties();\r\n    for (Iterator it \u003d options.iterator(); it.hasNext(); ) {\r\n        Option option \u003d (Option) it.next();\r\n        if (opt.equals(option.getOpt()) || opt.equals(option.getLongOpt())) {\r\n            List values \u003d option.getValuesList();\r\n            if (values.size() \u003e\u003d 2) {\r\n                props.put(values.get(0), values.get(1));\r\n            } else if (values.size() \u003d\u003d 1) {\r\n                props.put(values.get(0), \"true\");\r\n            }\r\n        }\r\n    }\r\n    return props;\r\n}",
      "path": "src/main/java/org/apache/commons/cli/CommandLine.java",
      "functionStartLine": 266,
      "functionName": "getOptionProperties",
      "functionAnnotation": "",
      "functionDoc": "Retrieve the map of values associated to the option. This is convenient\r\nfor options specifying Java properties like \u003ctt\u003e-Dparam1\u003dvalue1\r\n-Dparam2\u003dvalue2\u003c/tt\u003e. The first argument of the option is the key, and\r\nthe 2nd argument is the value. If the option has only one argument\r\n(\u003ctt\u003e-Dfoo\u003c/tt\u003e) it is considered as a boolean flag and the value is\r\n\u003ctt\u003e\"true\"\u003c/tt\u003e.\r\n\r\n@param opt name of the option\r\n@return The Properties mapped by the option, never \u003ctt\u003enull\u003c/tt\u003e\r\n        even if the option doesn\u0027t exists\r\n@since 1.2\r\n",
      "diff": "",
      "extendedDetails": {
        "oldPath": "src/java/org/apache/commons/cli/CommandLine.java",
        "newPath": "src/main/java/org/apache/commons/cli/CommandLine.java"
      }
    },
    "147df44faa4eb12ffd4a0063fc3284f784ea67c8": {
      "type": "Yformatchange",
      "commitMessage": "Style update\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/cli/branches/cli-1.x@680644 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "7/29/08 11:13 AM",
      "commitName": "147df44faa4eb12ffd4a0063fc3284f784ea67c8",
      "commitAuthor": "Emmanuel Bourg",
      "commitDateOld": "7/22/08 3:56 PM",
      "commitNameOld": "c49b5fe1cbce7809a20535ef2e2910e10d485756",
      "commitAuthorOld": "Emmanuel Bourg",
      "daysBetweenCommits": 6.8,
      "commitsBetweenForRepo": 12,
      "commitsBetweenForFile": 1,
      "actualSource": "public Properties getOptionProperties(String opt) {\r\n    Properties props \u003d new Properties();\r\n    for (Iterator it \u003d options.iterator(); it.hasNext(); ) {\r\n        Option option \u003d (Option) it.next();\r\n        if (opt.equals(option.getOpt()) || opt.equals(option.getLongOpt())) {\r\n            List values \u003d option.getValuesList();\r\n            if (values.size() \u003e\u003d 2) {\r\n                props.put(values.get(0), values.get(1));\r\n            } else if (values.size() \u003d\u003d 1) {\r\n                props.put(values.get(0), \"true\");\r\n            }\r\n        }\r\n    }\r\n    return props;\r\n}",
      "path": "src/java/org/apache/commons/cli/CommandLine.java",
      "functionStartLine": 245,
      "functionName": "getOptionProperties",
      "functionAnnotation": "",
      "functionDoc": "Retrieve the map of values associated to the option. This is convenient\r\nfor options specifying Java properties like \u003ctt\u003e-Dparam1\u003dvalue1\r\n-Dparam2\u003dvalue2\u003c/tt\u003e. The first argument of the option is the key, and\r\nthe 2nd argument is the value. If the option has only one argument\r\n(\u003ctt\u003e-Dfoo\u003c/tt\u003e) it is considered as a boolean flag and the value is\r\n\u003ctt\u003e\"true\"\u003c/tt\u003e.\r\n\r\n@param opt name of the option\r\n@return The Properties mapped by the option, never \u003ctt\u003enull\u003c/tt\u003e\r\n        even if the option doesn\u0027t exists\r\n@since 1.2\r\n",
      "diff": "",
      "extendedDetails": {}
    },
    "c49b5fe1cbce7809a20535ef2e2910e10d485756": {
      "type": "Ydocchange",
      "commitMessage": "Added the missing @since tag on getOptionProperties()\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/cli/branches/cli-1.x@678748 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "7/22/08 3:56 PM",
      "commitName": "c49b5fe1cbce7809a20535ef2e2910e10d485756",
      "commitAuthor": "Emmanuel Bourg",
      "commitDateOld": "6/13/08 8:03 PM",
      "commitNameOld": "84d333ab1a80231963280a47711086a6b1a56781",
      "commitAuthorOld": "Emmanuel Bourg",
      "daysBetweenCommits": 38.83,
      "commitsBetweenForRepo": 9,
      "commitsBetweenForFile": 1,
      "actualSource": "public Properties getOptionProperties(String opt) {\r\n    Properties props \u003d new Properties();\r\n    for (Iterator it \u003d options.iterator(); it.hasNext(); ) {\r\n        Option option \u003d (Option) it.next();\r\n        if (opt.equals(option.getOpt()) || opt.equals(option.getLongOpt())) {\r\n            List values \u003d option.getValuesList();\r\n            if (values.size() \u003e\u003d 2) {\r\n                props.put(values.get(0), values.get(1));\r\n            } else if (values.size() \u003d\u003d 1) {\r\n                props.put(values.get(0), \"true\");\r\n            }\r\n        }\r\n    }\r\n    return props;\r\n}",
      "path": "src/java/org/apache/commons/cli/CommandLine.java",
      "functionStartLine": 245,
      "functionName": "getOptionProperties",
      "functionAnnotation": "",
      "functionDoc": "Retrieve the map of values associated to the option. This is convenient\r\nfor options specifying Java properties like \u003ctt\u003e-Dparam1\u003dvalue1\r\n-Dparam2\u003dvalue2\u003c/tt\u003e. The first argument of the option is the key, and\r\nthe 2nd argument is the value. If the option has only one argument\r\n(\u003ctt\u003e-Dfoo\u003c/tt\u003e) it is considered as a boolean flag and the value is\r\n\u003ctt\u003e\"true\"\u003c/tt\u003e.\r\n\r\n@param opt name of the option\r\n@return The Properties mapped by the option, never \u003ctt\u003enull\u003c/tt\u003e\r\n        even if the option doesn\u0027t exists\r\n@since 1.2\r\n",
      "diff": "",
      "extendedDetails": {
        "oldValue": "Retrieve the map of values associated to the option. This is convenient\r\nfor options specifying Java properties like \u003ctt\u003e-Dparam1\u003dvalue1\r\n-Dparam2\u003dvalue2\u003c/tt\u003e. The first argument of the option is the key, and\r\nthe 2nd argument is the value. If the option has only one argument\r\n(\u003ctt\u003e-Dfoo\u003c/tt\u003e) it is considered as a boolean flag and the value is\r\n\u003ctt\u003e\"true\"\u003c/tt\u003e.\r\n\r\n@param opt name of the option\r\n@return The Properties mapped by the option, never \u003ctt\u003enull\u003c/tt\u003e\r\n        even if the option doesn\u0027t exists\r\n",
        "newValue": "Retrieve the map of values associated to the option. This is convenient\r\nfor options specifying Java properties like \u003ctt\u003e-Dparam1\u003dvalue1\r\n-Dparam2\u003dvalue2\u003c/tt\u003e. The first argument of the option is the key, and\r\nthe 2nd argument is the value. If the option has only one argument\r\n(\u003ctt\u003e-Dfoo\u003c/tt\u003e) it is considered as a boolean flag and the value is\r\n\u003ctt\u003e\"true\"\u003c/tt\u003e.\r\n\r\n@param opt name of the option\r\n@return The Properties mapped by the option, never \u003ctt\u003enull\u003c/tt\u003e\r\n        even if the option doesn\u0027t exists\r\n@since 1.2\r\n"
      }
    },
    "84d333ab1a80231963280a47711086a6b1a56781": {
      "type": "Yintroduced",
      "commitMessage": "Added the method getOptionProperties() in CommandLine to retrieve easily a set of properties specified by an option (-Dparam\u003dvalue)\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/cli/branches/cli-1.x@667595 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "6/13/08 8:03 PM",
      "commitName": "84d333ab1a80231963280a47711086a6b1a56781",
      "commitAuthor": "Emmanuel Bourg",
      "diff": "@@ -0,0 +1,15 @@\n+public Properties getOptionProperties(String opt) {\r\n+    Properties props \u003d new Properties();\r\n+    for (Iterator it \u003d options.iterator(); it.hasNext(); ) {\r\n+        Option option \u003d (Option) it.next();\r\n+        if (opt.equals(option.getOpt()) || opt.equals(option.getLongOpt())) {\r\n+            List values \u003d option.getValuesList();\r\n+            if (values.size() \u003e\u003d 2) {\r\n+                props.put(values.get(0), values.get(1));\r\n+            } else if (values.size() \u003d\u003d 1) {\r\n+                props.put(values.get(0), \"true\");\r\n+            }\r\n+        }\r\n+    }\r\n+    return props;\r\n+}\n\\ No newline at end of file\n",
      "actualSource": "public Properties getOptionProperties(String opt) {\r\n    Properties props \u003d new Properties();\r\n    for (Iterator it \u003d options.iterator(); it.hasNext(); ) {\r\n        Option option \u003d (Option) it.next();\r\n        if (opt.equals(option.getOpt()) || opt.equals(option.getLongOpt())) {\r\n            List values \u003d option.getValuesList();\r\n            if (values.size() \u003e\u003d 2) {\r\n                props.put(values.get(0), values.get(1));\r\n            } else if (values.size() \u003d\u003d 1) {\r\n                props.put(values.get(0), \"true\");\r\n            }\r\n        }\r\n    }\r\n    return props;\r\n}",
      "path": "src/java/org/apache/commons/cli/CommandLine.java",
      "functionStartLine": 244,
      "functionName": "getOptionProperties",
      "functionAnnotation": "",
      "functionDoc": "Retrieve the map of values associated to the option. This is convenient\r\nfor options specifying Java properties like \u003ctt\u003e-Dparam1\u003dvalue1\r\n-Dparam2\u003dvalue2\u003c/tt\u003e. The first argument of the option is the key, and\r\nthe 2nd argument is the value. If the option has only one argument\r\n(\u003ctt\u003e-Dfoo\u003c/tt\u003e) it is considered as a boolean flag and the value is\r\n\u003ctt\u003e\"true\"\u003c/tt\u003e.\r\n\r\n@param opt name of the option\r\n@return The Properties mapped by the option, never \u003ctt\u003enull\u003c/tt\u003e\r\n        even if the option doesn\u0027t exists\r\n"
    }
  }
}